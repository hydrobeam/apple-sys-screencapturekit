/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
use objc::{self, class, msg_send, sel, sel_impl};
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const COPYFILE_STATE_SRC_FD: u32 = 1;
pub const COPYFILE_STATE_SRC_FILENAME: u32 = 2;
pub const COPYFILE_STATE_DST_FD: u32 = 3;
pub const COPYFILE_STATE_DST_FILENAME: u32 = 4;
pub const COPYFILE_STATE_QUARANTINE: u32 = 5;
pub const COPYFILE_STATE_STATUS_CB: u32 = 6;
pub const COPYFILE_STATE_STATUS_CTX: u32 = 7;
pub const COPYFILE_STATE_COPIED: u32 = 8;
pub const COPYFILE_STATE_XATTRNAME: u32 = 9;
pub const COPYFILE_STATE_WAS_CLONED: u32 = 10;
pub const COPYFILE_STATE_SRC_BSIZE: u32 = 11;
pub const COPYFILE_STATE_DST_BSIZE: u32 = 12;
pub const COPYFILE_STATE_BSIZE: u32 = 13;
pub const COPYFILE_DISABLE_VAR: &[u8; 17usize] = b"COPYFILE_DISABLE\0";
pub const COPYFILE_ACL: u32 = 1;
pub const COPYFILE_STAT: u32 = 2;
pub const COPYFILE_XATTR: u32 = 4;
pub const COPYFILE_DATA: u32 = 8;
pub const COPYFILE_SECURITY: u32 = 3;
pub const COPYFILE_METADATA: u32 = 7;
pub const COPYFILE_ALL: u32 = 15;
pub const COPYFILE_RECURSIVE: u32 = 32768;
pub const COPYFILE_CHECK: u32 = 65536;
pub const COPYFILE_EXCL: u32 = 131072;
pub const COPYFILE_NOFOLLOW_SRC: u32 = 262144;
pub const COPYFILE_NOFOLLOW_DST: u32 = 524288;
pub const COPYFILE_MOVE: u32 = 1048576;
pub const COPYFILE_UNLINK: u32 = 2097152;
pub const COPYFILE_NOFOLLOW: u32 = 786432;
pub const COPYFILE_PACK: u32 = 4194304;
pub const COPYFILE_UNPACK: u32 = 8388608;
pub const COPYFILE_CLONE: u32 = 16777216;
pub const COPYFILE_CLONE_FORCE: u32 = 33554432;
pub const COPYFILE_RUN_IN_PLACE: u32 = 67108864;
pub const COPYFILE_DATA_SPARSE: u32 = 134217728;
pub const COPYFILE_PRESERVE_DST_TRACKED: u32 = 268435456;
pub const COPYFILE_VERBOSE: u32 = 1073741824;
pub const COPYFILE_RECURSE_ERROR: u32 = 0;
pub const COPYFILE_RECURSE_FILE: u32 = 1;
pub const COPYFILE_RECURSE_DIR: u32 = 2;
pub const COPYFILE_RECURSE_DIR_CLEANUP: u32 = 3;
pub const COPYFILE_COPY_DATA: u32 = 4;
pub const COPYFILE_COPY_XATTR: u32 = 5;
pub const COPYFILE_START: u32 = 1;
pub const COPYFILE_FINISH: u32 = 2;
pub const COPYFILE_ERR: u32 = 3;
pub const COPYFILE_PROGRESS: u32 = 4;
pub const COPYFILE_CONTINUE: u32 = 0;
pub const COPYFILE_SKIP: u32 = 1;
pub const COPYFILE_QUIT: u32 = 2;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FE_INEXACT: u32 = 32;
pub const FE_UNDERFLOW: u32 = 16;
pub const FE_OVERFLOW: u32 = 8;
pub const FE_DIVBYZERO: u32 = 4;
pub const FE_INVALID: u32 = 1;
pub const FE_DENORMALOPERAND: u32 = 2;
pub const FE_ALL_EXCEPT: u32 = 63;
pub const FE_TONEAREST: u32 = 0;
pub const FE_DOWNWARD: u32 = 1024;
pub const FE_UPWARD: u32 = 2048;
pub const FE_TOWARDZERO: u32 = 3072;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const PRId8: &[u8; 4usize] = b"hhd\0";
pub const PRIi8: &[u8; 4usize] = b"hhi\0";
pub const PRIo8: &[u8; 4usize] = b"hho\0";
pub const PRIu8: &[u8; 4usize] = b"hhu\0";
pub const PRIx8: &[u8; 4usize] = b"hhx\0";
pub const PRIX8: &[u8; 4usize] = b"hhX\0";
pub const PRId16: &[u8; 3usize] = b"hd\0";
pub const PRIi16: &[u8; 3usize] = b"hi\0";
pub const PRIo16: &[u8; 3usize] = b"ho\0";
pub const PRIu16: &[u8; 3usize] = b"hu\0";
pub const PRIx16: &[u8; 3usize] = b"hx\0";
pub const PRIX16: &[u8; 3usize] = b"hX\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRId64: &[u8; 4usize] = b"lld\0";
pub const PRIi64: &[u8; 4usize] = b"lli\0";
pub const PRIo64: &[u8; 4usize] = b"llo\0";
pub const PRIu64: &[u8; 4usize] = b"llu\0";
pub const PRIx64: &[u8; 4usize] = b"llx\0";
pub const PRIX64: &[u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &[u8; 2usize] = b"d\0";
pub const PRIiFAST32: &[u8; 2usize] = b"i\0";
pub const PRIoFAST32: &[u8; 2usize] = b"o\0";
pub const PRIuFAST32: &[u8; 2usize] = b"u\0";
pub const PRIxFAST32: &[u8; 2usize] = b"x\0";
pub const PRIXFAST32: &[u8; 2usize] = b"X\0";
pub const PRIdFAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"jd\0";
pub const PRIiMAX: &[u8; 3usize] = b"ji\0";
pub const PRIoMAX: &[u8; 3usize] = b"jo\0";
pub const PRIuMAX: &[u8; 3usize] = b"ju\0";
pub const PRIxMAX: &[u8; 3usize] = b"jx\0";
pub const PRIXMAX: &[u8; 3usize] = b"jX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNd64: &[u8; 4usize] = b"lld\0";
pub const SCNi64: &[u8; 4usize] = b"lli\0";
pub const SCNo64: &[u8; 4usize] = b"llo\0";
pub const SCNu64: &[u8; 4usize] = b"llu\0";
pub const SCNx64: &[u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &[u8; 2usize] = b"d\0";
pub const SCNiFAST32: &[u8; 2usize] = b"i\0";
pub const SCNoFAST32: &[u8; 2usize] = b"o\0";
pub const SCNuFAST32: &[u8; 2usize] = b"u\0";
pub const SCNxFAST32: &[u8; 2usize] = b"x\0";
pub const SCNdFAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"jd\0";
pub const SCNiMAX: &[u8; 3usize] = b"ji\0";
pub const SCNoMAX: &[u8; 3usize] = b"jo\0";
pub const SCNuMAX: &[u8; 3usize] = b"ju\0";
pub const SCNxMAX: &[u8; 3usize] = b"jx\0";
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const RPP_ECHO_OFF: u32 = 0;
pub const RPP_ECHO_ON: u32 = 1;
pub const RPP_REQUIRE_TTY: u32 = 2;
pub const RPP_FORCELOWER: u32 = 4;
pub const RPP_FORCEUPPER: u32 = 8;
pub const RPP_SEVENBIT: u32 = 16;
pub const RPP_STDIN: u32 = 32;
pub const _JBLEN: u32 = 37;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const _PATH_PWD: &[u8; 5usize] = b"/etc\0";
pub const _PATH_PASSWD: &[u8; 12usize] = b"/etc/passwd\0";
pub const _PASSWD: &[u8; 7usize] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &[u8; 19usize] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &[u8; 10usize] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &[u8; 14usize] = b"master.passwd\0";
pub const _PATH_MP_DB: &[u8; 12usize] = b"/etc/pwd.db\0";
pub const _MP_DB: &[u8; 7usize] = b"pwd.db\0";
pub const _PATH_SMP_DB: &[u8; 13usize] = b"/etc/spwd.db\0";
pub const _SMP_DB: &[u8; 8usize] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &[u8; 19usize] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VEOL2: u32 = 2;
pub const VERASE: u32 = 3;
pub const VWERASE: u32 = 4;
pub const VKILL: u32 = 5;
pub const VREPRINT: u32 = 6;
pub const VINTR: u32 = 8;
pub const VQUIT: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VDSUSP: u32 = 11;
pub const VSTART: u32 = 12;
pub const VSTOP: u32 = 13;
pub const VLNEXT: u32 = 14;
pub const VDISCARD: u32 = 15;
pub const VMIN: u32 = 16;
pub const VTIME: u32 = 17;
pub const VSTATUS: u32 = 18;
pub const NCCS: u32 = 20;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IXON: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const ONLCR: u32 = 2;
pub const OXTABS: u32 = 4;
pub const ONOEOT: u32 = 8;
pub const OCRNL: u32 = 16;
pub const ONOCR: u32 = 32;
pub const ONLRET: u32 = 64;
pub const OFILL: u32 = 128;
pub const NLDLY: u32 = 768;
pub const TABDLY: u32 = 3076;
pub const CRDLY: u32 = 12288;
pub const FFDLY: u32 = 16384;
pub const BSDLY: u32 = 32768;
pub const VTDLY: u32 = 65536;
pub const OFDEL: u32 = 131072;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const NL2: u32 = 512;
pub const NL3: u32 = 768;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 4;
pub const CR0: u32 = 0;
pub const CR1: u32 = 4096;
pub const CR2: u32 = 8192;
pub const CR3: u32 = 12288;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const BS0: u32 = 0;
pub const BS1: u32 = 32768;
pub const VT0: u32 = 0;
pub const VT1: u32 = 65536;
pub const CIGNORE: u32 = 1;
pub const CSIZE: u32 = 768;
pub const CS5: u32 = 0;
pub const CS6: u32 = 256;
pub const CS7: u32 = 512;
pub const CS8: u32 = 768;
pub const CSTOPB: u32 = 1024;
pub const CREAD: u32 = 2048;
pub const PARENB: u32 = 4096;
pub const PARODD: u32 = 8192;
pub const HUPCL: u32 = 16384;
pub const CLOCAL: u32 = 32768;
pub const CCTS_OFLOW: u32 = 65536;
pub const CRTS_IFLOW: u32 = 131072;
pub const CDTR_IFLOW: u32 = 262144;
pub const CDSR_OFLOW: u32 = 524288;
pub const CCAR_OFLOW: u32 = 1048576;
pub const MDMBUF: u32 = 1048576;
pub const ECHOKE: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHONL: u32 = 16;
pub const ECHOPRT: u32 = 32;
pub const ECHOCTL: u32 = 64;
pub const ISIG: u32 = 128;
pub const ICANON: u32 = 256;
pub const ALTWERASE: u32 = 512;
pub const IEXTEN: u32 = 1024;
pub const EXTPROC: u32 = 2048;
pub const TOSTOP: u32 = 4194304;
pub const FLUSHO: u32 = 8388608;
pub const NOKERNINFO: u32 = 33554432;
pub const PENDIN: u32 = 536870912;
pub const NOFLSH: u32 = 2147483648;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCSASOFT: u32 = 16;
pub const B0: u32 = 0;
pub const B50: u32 = 50;
pub const B75: u32 = 75;
pub const B110: u32 = 110;
pub const B134: u32 = 134;
pub const B150: u32 = 150;
pub const B200: u32 = 200;
pub const B300: u32 = 300;
pub const B600: u32 = 600;
pub const B1200: u32 = 1200;
pub const B1800: u32 = 1800;
pub const B2400: u32 = 2400;
pub const B4800: u32 = 4800;
pub const B9600: u32 = 9600;
pub const B19200: u32 = 19200;
pub const B38400: u32 = 38400;
pub const B7200: u32 = 7200;
pub const B14400: u32 = 14400;
pub const B28800: u32 = 28800;
pub const B57600: u32 = 57600;
pub const B76800: u32 = 76800;
pub const B115200: u32 = 115200;
pub const B230400: u32 = 230400;
pub const EXTA: u32 = 19200;
pub const EXTB: u32 = 38400;
pub const TCIFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFLUSH: u32 = 3;
pub const TCOOFF: u32 = 1;
pub const TCOON: u32 = 2;
pub const TCIOFF: u32 = 3;
pub const TCION: u32 = 4;
pub const TTYDEF_IFLAG: u32 = 11010;
pub const TTYDEF_OFLAG: u32 = 3;
pub const TTYDEF_LFLAG: u32 = 1483;
pub const TTYDEF_CFLAG: u32 = 19200;
pub const TTYDEF_SPEED: u32 = 9600;
pub const CEOL: u32 = 255;
pub const CERASE: u32 = 127;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u32 = 255;
pub const PIDLOCK_NONBLOCK: u32 = 1;
pub const PIDLOCK_USEHOSTNAME: u32 = 2;
pub const FPARSELN_UNESCESC: u32 = 1;
pub const FPARSELN_UNESCCONT: u32 = 2;
pub const FPARSELN_UNESCCOMM: u32 = 4;
pub const FPARSELN_UNESCREST: u32 = 8;
pub const FPARSELN_UNESCALL: u32 = 15;
pub const OPENDEV_PART: u32 = 1;
pub const OPENDEV_BLCK: u32 = 4;
pub const _PATH_UTMP: &[u8; 14usize] = b"/var/run/utmp\0";
pub const _PATH_WTMP: &[u8; 14usize] = b"/var/log/wtmp\0";
pub const _PATH_LASTLOG: &[u8; 17usize] = b"/var/log/lastlog\0";
pub const UT_NAMESIZE: u32 = 8;
pub const UT_LINESIZE: u32 = 8;
pub const UT_HOSTSIZE: u32 = 16;
pub const LC_COLLATE_MASK: u32 = 1;
pub const LC_CTYPE_MASK: u32 = 2;
pub const LC_MESSAGES_MASK: u32 = 4;
pub const LC_MONETARY_MASK: u32 = 8;
pub const LC_NUMERIC_MASK: u32 = 16;
pub const LC_TIME_MASK: u32 = 32;
pub const _LC_NUM_MASK: u32 = 6;
pub const _LC_LAST_MASK: u32 = 32;
pub const XATTR_OPERATION_INTENT_COPY: u32 = 1;
pub const XATTR_OPERATION_INTENT_SAVE: u32 = 2;
pub const XATTR_OPERATION_INTENT_SHARE: u32 = 3;
pub const XATTR_OPERATION_INTENT_SYNC: u32 = 4;
pub const XATTR_OPERATION_INTENT_BACKUP: u32 = 5;
pub const O_SYNC: u32 = 128;
pub const O_DSYNC: u32 = 4194304;
pub const AIO_ALLDONE: u32 = 1;
pub const AIO_CANCELED: u32 = 2;
pub const AIO_NOTCANCELED: u32 = 4;
pub const LIO_NOP: u32 = 0;
pub const LIO_READ: u32 = 1;
pub const LIO_WRITE: u32 = 2;
pub const LIO_NOWAIT: u32 = 1;
pub const LIO_WAIT: u32 = 2;
pub const AIO_LISTIO_MAX: u32 = 16;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18usize] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const C_ISSOCK: u32 = 49152;
pub const C_ISLNK: u32 = 40960;
pub const C_ISCTG: u32 = 36864;
pub const C_ISREG: u32 = 32768;
pub const C_ISBLK: u32 = 24576;
pub const C_ISDIR: u32 = 16384;
pub const C_ISCHR: u32 = 8192;
pub const C_ISFIFO: u32 = 4096;
pub const C_ISUID: u32 = 2048;
pub const C_ISGID: u32 = 1024;
pub const C_ISVTX: u32 = 512;
pub const C_IRUSR: u32 = 256;
pub const C_IWUSR: u32 = 128;
pub const C_IXUSR: u32 = 64;
pub const C_IRGRP: u32 = 32;
pub const C_IWGRP: u32 = 16;
pub const C_IXGRP: u32 = 8;
pub const C_IROTH: u32 = 4;
pub const C_IWOTH: u32 = 2;
pub const C_IXOTH: u32 = 1;
pub const MAGIC: &[u8; 7usize] = b"070707\0";
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_LOCAL: u32 = 4;
pub const RTLD_GLOBAL: u32 = 8;
pub const RTLD_NOLOAD: u32 = 16;
pub const RTLD_NODELETE: u32 = 128;
pub const RTLD_FIRST: u32 = 256;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const MM_HARD: u32 = 1;
pub const MM_SOFT: u32 = 2;
pub const MM_FIRM: u32 = 4;
pub const MM_APPL: u32 = 16;
pub const MM_UTIL: u32 = 32;
pub const MM_OPSYS: u32 = 64;
pub const MM_PRINT: u32 = 256;
pub const MM_CONSOLE: u32 = 512;
pub const MM_RECOVER: u32 = 4096;
pub const MM_NRECOV: u32 = 8192;
pub const MM_NOSEV: u32 = 0;
pub const MM_HALT: u32 = 1;
pub const MM_ERROR: u32 = 2;
pub const MM_WARNING: u32 = 3;
pub const MM_INFO: u32 = 4;
pub const MM_NULLSEV: u32 = 0;
pub const MM_NULLMC: u32 = 0;
pub const MM_OK: u32 = 0;
pub const MM_NOMSG: u32 = 1;
pub const MM_NOCON: u32 = 2;
pub const MM_NOTOK: u32 = 3;
pub const FNM_NOMATCH: u32 = 1;
pub const FNM_NOESCAPE: u32 = 1;
pub const FNM_PATHNAME: u32 = 2;
pub const FNM_PERIOD: u32 = 4;
pub const FNM_NOSYS: i32 = -1;
pub const FNM_LEADING_DIR: u32 = 8;
pub const FNM_CASEFOLD: u32 = 16;
pub const FNM_IGNORECASE: u32 = 16;
pub const FNM_FILE_NAME: u32 = 2;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const EF_IS_SYNTHETIC: u32 = 32;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const FTW_F: u32 = 0;
pub const FTW_D: u32 = 1;
pub const FTW_DNR: u32 = 2;
pub const FTW_DP: u32 = 3;
pub const FTW_NS: u32 = 4;
pub const FTW_SL: u32 = 5;
pub const FTW_SLN: u32 = 6;
pub const FTW_PHYS: u32 = 1;
pub const FTW_MOUNT: u32 = 2;
pub const FTW_DEPTH: u32 = 4;
pub const FTW_CHDIR: u32 = 8;
pub const GLOB_APPEND: u32 = 1;
pub const GLOB_DOOFFS: u32 = 2;
pub const GLOB_ERR: u32 = 4;
pub const GLOB_MARK: u32 = 8;
pub const GLOB_NOCHECK: u32 = 16;
pub const GLOB_NOSORT: u32 = 32;
pub const GLOB_NOESCAPE: u32 = 8192;
pub const GLOB_NOSPACE: i32 = -1;
pub const GLOB_ABORTED: i32 = -2;
pub const GLOB_NOMATCH: i32 = -3;
pub const GLOB_NOSYS: i32 = -4;
pub const GLOB_ALTDIRFUNC: u32 = 64;
pub const GLOB_BRACE: u32 = 128;
pub const GLOB_MAGCHAR: u32 = 256;
pub const GLOB_NOMAGIC: u32 = 512;
pub const GLOB_QUOTE: u32 = 1024;
pub const GLOB_TILDE: u32 = 2048;
pub const GLOB_LIMIT: u32 = 4096;
pub const _GLOB_ERR_BLOCK: u32 = 2147483648;
pub const GLOB_MAXPATH: u32 = 4096;
pub const GLOB_ABEND: i32 = -2;
pub const _PATH_GROUP: &[u8; 11usize] = b"/etc/group\0";
pub const _LIBICONV_VERSION: u32 = 267;
pub const ICONV_TRIVIALP: u32 = 0;
pub const ICONV_GET_TRANSLITERATE: u32 = 1;
pub const ICONV_SET_TRANSLITERATE: u32 = 2;
pub const ICONV_GET_DISCARD_ILSEQ: u32 = 3;
pub const ICONV_SET_DISCARD_ILSEQ: u32 = 4;
pub const ICONV_SET_HOOKS: u32 = 5;
pub const ICONV_SET_FALLBACKS: u32 = 6;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const CODESET: u32 = 0;
pub const D_T_FMT: u32 = 1;
pub const D_FMT: u32 = 2;
pub const T_FMT: u32 = 3;
pub const T_FMT_AMPM: u32 = 4;
pub const AM_STR: u32 = 5;
pub const PM_STR: u32 = 6;
pub const DAY_1: u32 = 7;
pub const DAY_2: u32 = 8;
pub const DAY_3: u32 = 9;
pub const DAY_4: u32 = 10;
pub const DAY_5: u32 = 11;
pub const DAY_6: u32 = 12;
pub const DAY_7: u32 = 13;
pub const ABDAY_1: u32 = 14;
pub const ABDAY_2: u32 = 15;
pub const ABDAY_3: u32 = 16;
pub const ABDAY_4: u32 = 17;
pub const ABDAY_5: u32 = 18;
pub const ABDAY_6: u32 = 19;
pub const ABDAY_7: u32 = 20;
pub const MON_1: u32 = 21;
pub const MON_2: u32 = 22;
pub const MON_3: u32 = 23;
pub const MON_4: u32 = 24;
pub const MON_5: u32 = 25;
pub const MON_6: u32 = 26;
pub const MON_7: u32 = 27;
pub const MON_8: u32 = 28;
pub const MON_9: u32 = 29;
pub const MON_10: u32 = 30;
pub const MON_11: u32 = 31;
pub const MON_12: u32 = 32;
pub const ABMON_1: u32 = 33;
pub const ABMON_2: u32 = 34;
pub const ABMON_3: u32 = 35;
pub const ABMON_4: u32 = 36;
pub const ABMON_5: u32 = 37;
pub const ABMON_6: u32 = 38;
pub const ABMON_7: u32 = 39;
pub const ABMON_8: u32 = 40;
pub const ABMON_9: u32 = 41;
pub const ABMON_10: u32 = 42;
pub const ABMON_11: u32 = 43;
pub const ABMON_12: u32 = 44;
pub const ERA: u32 = 45;
pub const ERA_D_FMT: u32 = 46;
pub const ERA_D_T_FMT: u32 = 47;
pub const ERA_T_FMT: u32 = 48;
pub const ALT_DIGITS: u32 = 49;
pub const RADIXCHAR: u32 = 50;
pub const THOUSEP: u32 = 51;
pub const YESEXPR: u32 = 52;
pub const NOEXPR: u32 = 53;
pub const YESSTR: u32 = 54;
pub const NOSTR: u32 = 55;
pub const CRNCYSTR: u32 = 56;
pub const D_MD_ORDER: u32 = 57;
pub const DBM_RDONLY: u32 = 0;
pub const DBM_INSERT: u32 = 0;
pub const DBM_REPLACE: u32 = 1;
pub const DBM_SUFFIX: &[u8; 4usize] = b".db\0";
pub const _PATH_HEQUIV: &[u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14usize] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &[u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14usize] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const DLIL_SDLDATACOUNT: u32 = 12;
pub const IF_NAMESIZE: u32 = 16;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const APPLE_IF_FAM_LOOPBACK: u32 = 1;
pub const APPLE_IF_FAM_ETHERNET: u32 = 2;
pub const APPLE_IF_FAM_SLIP: u32 = 3;
pub const APPLE_IF_FAM_TUN: u32 = 4;
pub const APPLE_IF_FAM_VLAN: u32 = 5;
pub const APPLE_IF_FAM_PPP: u32 = 6;
pub const APPLE_IF_FAM_PVC: u32 = 7;
pub const APPLE_IF_FAM_DISC: u32 = 8;
pub const APPLE_IF_FAM_MDECAP: u32 = 9;
pub const APPLE_IF_FAM_GIF: u32 = 10;
pub const APPLE_IF_FAM_FAITH: u32 = 11;
pub const APPLE_IF_FAM_STF: u32 = 12;
pub const APPLE_IF_FAM_FIREWIRE: u32 = 13;
pub const APPLE_IF_FAM_BOND: u32 = 14;
pub const APPLE_IF_FAM_CELLULAR: u32 = 15;
pub const APPLE_IF_FAM_UNUSED_16: u32 = 16;
pub const APPLE_IF_FAM_UTUN: u32 = 17;
pub const APPLE_IF_FAM_IPSEC: u32 = 18;
pub const IF_MINMTU: u32 = 72;
pub const IF_MAXMTU: u32 = 65535;
pub const IFNAMSIZ: u32 = 16;
pub const IFF_UP: u32 = 1;
pub const IFF_BROADCAST: u32 = 2;
pub const IFF_DEBUG: u32 = 4;
pub const IFF_LOOPBACK: u32 = 8;
pub const IFF_POINTOPOINT: u32 = 16;
pub const IFF_NOTRAILERS: u32 = 32;
pub const IFF_RUNNING: u32 = 64;
pub const IFF_NOARP: u32 = 128;
pub const IFF_PROMISC: u32 = 256;
pub const IFF_ALLMULTI: u32 = 512;
pub const IFF_OACTIVE: u32 = 1024;
pub const IFF_SIMPLEX: u32 = 2048;
pub const IFF_LINK0: u32 = 4096;
pub const IFF_LINK1: u32 = 8192;
pub const IFF_LINK2: u32 = 16384;
pub const IFF_ALTPHYS: u32 = 16384;
pub const IFF_MULTICAST: u32 = 32768;
pub const IFCAP_RXCSUM: u32 = 1;
pub const IFCAP_TXCSUM: u32 = 2;
pub const IFCAP_VLAN_MTU: u32 = 4;
pub const IFCAP_VLAN_HWTAGGING: u32 = 8;
pub const IFCAP_JUMBO_MTU: u32 = 16;
pub const IFCAP_TSO4: u32 = 32;
pub const IFCAP_TSO6: u32 = 64;
pub const IFCAP_LRO: u32 = 128;
pub const IFCAP_AV: u32 = 256;
pub const IFCAP_TXSTATUS: u32 = 512;
pub const IFCAP_SKYWALK: u32 = 1024;
pub const IFCAP_HW_TIMESTAMP: u32 = 2048;
pub const IFCAP_SW_TIMESTAMP: u32 = 4096;
pub const IFCAP_CSUM_PARTIAL: u32 = 8192;
pub const IFCAP_CSUM_ZERO_INVERT: u32 = 16384;
pub const IFCAP_HWCSUM: u32 = 3;
pub const IFCAP_TSO: u32 = 96;
pub const IFCAP_VALID: u32 = 32767;
pub const IFQ_MAXLEN: u32 = 128;
pub const IFNET_SLOWHZ: u32 = 1;
pub const IFQ_DEF_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_DEF_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_DEF_L4S_TARGET_DELAY: u32 = 2000000;
pub const IFQ_DEF_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_L4S_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IF_WAKE_ON_MAGIC_PACKET: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_UNKNOWN: u32 = 0;
pub const IFRTYPE_FUNCTIONAL_LOOPBACK: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_WIRED: u32 = 2;
pub const IFRTYPE_FUNCTIONAL_WIFI_INFRA: u32 = 3;
pub const IFRTYPE_FUNCTIONAL_WIFI_AWDL: u32 = 4;
pub const IFRTYPE_FUNCTIONAL_CELLULAR: u32 = 5;
pub const IFRTYPE_FUNCTIONAL_INTCOPROC: u32 = 6;
pub const IFRTYPE_FUNCTIONAL_COMPANIONLINK: u32 = 7;
pub const IFRTYPE_FUNCTIONAL_LAST: u32 = 7;
pub const IFSTATMAX: u32 = 800;
pub const IFT_OTHER: u32 = 1;
pub const IFT_1822: u32 = 2;
pub const IFT_HDH1822: u32 = 3;
pub const IFT_X25DDN: u32 = 4;
pub const IFT_X25: u32 = 5;
pub const IFT_ETHER: u32 = 6;
pub const IFT_ISO88023: u32 = 7;
pub const IFT_ISO88024: u32 = 8;
pub const IFT_ISO88025: u32 = 9;
pub const IFT_ISO88026: u32 = 10;
pub const IFT_STARLAN: u32 = 11;
pub const IFT_P10: u32 = 12;
pub const IFT_P80: u32 = 13;
pub const IFT_HY: u32 = 14;
pub const IFT_FDDI: u32 = 15;
pub const IFT_LAPB: u32 = 16;
pub const IFT_SDLC: u32 = 17;
pub const IFT_T1: u32 = 18;
pub const IFT_CEPT: u32 = 19;
pub const IFT_ISDNBASIC: u32 = 20;
pub const IFT_ISDNPRIMARY: u32 = 21;
pub const IFT_PTPSERIAL: u32 = 22;
pub const IFT_PPP: u32 = 23;
pub const IFT_LOOP: u32 = 24;
pub const IFT_EON: u32 = 25;
pub const IFT_XETHER: u32 = 26;
pub const IFT_NSIP: u32 = 27;
pub const IFT_SLIP: u32 = 28;
pub const IFT_ULTRA: u32 = 29;
pub const IFT_DS3: u32 = 30;
pub const IFT_SIP: u32 = 31;
pub const IFT_FRELAY: u32 = 32;
pub const IFT_RS232: u32 = 33;
pub const IFT_PARA: u32 = 34;
pub const IFT_ARCNET: u32 = 35;
pub const IFT_ARCNETPLUS: u32 = 36;
pub const IFT_ATM: u32 = 37;
pub const IFT_MIOX25: u32 = 38;
pub const IFT_SONET: u32 = 39;
pub const IFT_X25PLE: u32 = 40;
pub const IFT_ISO88022LLC: u32 = 41;
pub const IFT_LOCALTALK: u32 = 42;
pub const IFT_SMDSDXI: u32 = 43;
pub const IFT_FRELAYDCE: u32 = 44;
pub const IFT_V35: u32 = 45;
pub const IFT_HSSI: u32 = 46;
pub const IFT_HIPPI: u32 = 47;
pub const IFT_MODEM: u32 = 48;
pub const IFT_AAL5: u32 = 49;
pub const IFT_SONETPATH: u32 = 50;
pub const IFT_SONETVT: u32 = 51;
pub const IFT_SMDSICIP: u32 = 52;
pub const IFT_PROPVIRTUAL: u32 = 53;
pub const IFT_PROPMUX: u32 = 54;
pub const IFT_GIF: u32 = 55;
pub const IFT_FAITH: u32 = 56;
pub const IFT_STF: u32 = 57;
pub const IFT_6LOWPAN: u32 = 64;
pub const IFT_L2VLAN: u32 = 135;
pub const IFT_IEEE8023ADLAG: u32 = 136;
pub const IFT_IEEE1394: u32 = 144;
pub const IFT_BRIDGE: u32 = 209;
pub const IFT_ENC: u32 = 244;
pub const IFT_PFLOG: u32 = 245;
pub const IFT_PFSYNC: u32 = 246;
pub const IFT_CARP: u32 = 248;
pub const IFT_PKTAP: u32 = 254;
pub const IFT_CELLULAR: u32 = 255;
pub const IFT_PDP: u32 = 255;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TH_ECE: u32 = 64;
pub const TH_CWR: u32 = 128;
pub const TH_AE: u32 = 256;
pub const TH_FLAGS: u32 = 247;
pub const TH_FLAGS_ALL: u32 = 255;
pub const TH_ACCEPT: u32 = 23;
pub const TH_ACE: u32 = 448;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOLEN_SACK: u32 = 8;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const MAX_TCPOPTLEN: u32 = 40;
pub const TCPOPT_CC: u32 = 11;
pub const TCPOPT_CCNEW: u32 = 12;
pub const TCPOPT_CCECHO: u32 = 13;
pub const TCPOLEN_CC: u32 = 6;
pub const TCPOLEN_CC_APPA: u32 = 8;
pub const TCPOPT_SIGNATURE: u32 = 19;
pub const TCPOLEN_SIGNATURE: u32 = 18;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOLEN_FASTOPEN_REQ: u32 = 2;
pub const TCPOPT_ACCECN0: u32 = 172;
pub const TCPOPT_ACCECN1: u32 = 174;
pub const TCPOLEN_ACCECN_EMPTY: u32 = 2;
pub const TCPOLEN_ACCECN_COUNTER: u32 = 3;
pub const TCPOPT_SACK_HDR: u32 = 16844032;
pub const MAX_SACK_BLKS: u32 = 6;
pub const TCP_MAX_SACK: u32 = 4;
pub const TCP_MSS: u32 = 512;
pub const TCP_MINMSS: u32 = 216;
pub const TCP6_MSS: u32 = 1024;
pub const TCP_MAXWIN: u32 = 65535;
pub const TTCP_CLIENT_SND_WND: u32 = 4096;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const TCP_MAXHLEN: u32 = 60;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_NOPUSH: u32 = 4;
pub const TCP_NOOPT: u32 = 8;
pub const TCP_KEEPALIVE: u32 = 16;
pub const TCP_CONNECTIONTIMEOUT: u32 = 32;
pub const PERSIST_TIMEOUT: u32 = 64;
pub const TCP_RXT_CONNDROPTIME: u32 = 128;
pub const TCP_RXT_FINDROP: u32 = 256;
pub const TCP_KEEPINTVL: u32 = 257;
pub const TCP_KEEPCNT: u32 = 258;
pub const TCP_SENDMOREACKS: u32 = 259;
pub const TCP_ENABLE_ECN: u32 = 260;
pub const TCP_FASTOPEN: u32 = 261;
pub const TCP_CONNECTION_INFO: u32 = 262;
pub const TCP_NOTSENT_LOWAT: u32 = 513;
pub const TCPCI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPCI_OPT_SACK: u32 = 2;
pub const TCPCI_OPT_WSCALE: u32 = 4;
pub const TCPCI_OPT_ECN: u32 = 8;
pub const TCPCI_FLAG_LOSSRECOVERY: u32 = 1;
pub const TCPCI_FLAG_REORDERING_DETECTED: u32 = 2;
pub const NL_SETD: u32 = 1;
pub const NL_CAT_LOCALE: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLWRNORM: u32 = 4;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRBAND: u32 = 256;
pub const POLLEXTEND: u32 = 512;
pub const POLLATTRIB: u32 = 1024;
pub const POLLNLINK: u32 = 2048;
pub const POLLWRITE: u32 = 4096;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const POLLSTANDARD: u32 = 511;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const POSIX_SPAWN_RESETIDS: u32 = 1;
pub const POSIX_SPAWN_SETPGROUP: u32 = 2;
pub const POSIX_SPAWN_SETSIGDEF: u32 = 4;
pub const POSIX_SPAWN_SETSIGMASK: u32 = 8;
pub const POSIX_SPAWN_SETEXEC: u32 = 64;
pub const POSIX_SPAWN_START_SUSPENDED: u32 = 128;
pub const POSIX_SPAWN_SETSID: u32 = 1024;
pub const POSIX_SPAWN_CLOEXEC_DEFAULT: u32 = 16384;
pub const _POSIX_SPAWN_RESLIDE: u32 = 2048;
pub const POSIX_SPAWN_PCONTROL_NONE: u32 = 0;
pub const POSIX_SPAWN_PCONTROL_THROTTLE: u32 = 1;
pub const POSIX_SPAWN_PCONTROL_SUSPEND: u32 = 2;
pub const POSIX_SPAWN_PCONTROL_KILL: u32 = 3;
pub const POSIX_SPAWN_PANIC_ON_CRASH: u32 = 1;
pub const POSIX_SPAWN_PANIC_ON_NON_ZERO_EXIT: u32 = 2;
pub const POSIX_SPAWN_PANIC_ON_EXIT: u32 = 4;
pub const POSIX_SPAWN_PANIC_ON_SPAWN_FAIL: u32 = 8;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_I386_INVOP: u32 = 1;
pub const EXC_I386_DIV: u32 = 1;
pub const EXC_I386_INTO: u32 = 2;
pub const EXC_I386_NOEXT: u32 = 3;
pub const EXC_I386_EXTOVR: u32 = 4;
pub const EXC_I386_EXTERR: u32 = 5;
pub const EXC_I386_EMERR: u32 = 6;
pub const EXC_I386_BOUND: u32 = 7;
pub const EXC_I386_SSEEXTERR: u32 = 8;
pub const EXC_I386_SGL: u32 = 1;
pub const EXC_I386_BPT: u32 = 2;
pub const EXC_I386_DIVERR: u32 = 0;
pub const EXC_I386_SGLSTP: u32 = 1;
pub const EXC_I386_NMIFLT: u32 = 2;
pub const EXC_I386_BPTFLT: u32 = 3;
pub const EXC_I386_INTOFLT: u32 = 4;
pub const EXC_I386_BOUNDFLT: u32 = 5;
pub const EXC_I386_INVOPFLT: u32 = 6;
pub const EXC_I386_NOEXTFLT: u32 = 7;
pub const EXC_I386_DBLFLT: u32 = 8;
pub const EXC_I386_EXTOVRFLT: u32 = 9;
pub const EXC_I386_INVTSSFLT: u32 = 10;
pub const EXC_I386_SEGNPFLT: u32 = 11;
pub const EXC_I386_STKFLT: u32 = 12;
pub const EXC_I386_GPFLT: u32 = 13;
pub const EXC_I386_PGFLT: u32 = 14;
pub const EXC_I386_EXTERRFLT: u32 = 16;
pub const EXC_I386_ALIGNFLT: u32 = 17;
pub const EXC_I386_ENDPERR: u32 = 33;
pub const EXC_I386_ENOEXTFLT: u32 = 32;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const I386_THREAD_STATE_MAX: u32 = 614;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const FPC_IE: u32 = 1;
pub const FPC_IM: u32 = 1;
pub const FPC_DE: u32 = 2;
pub const FPC_DM: u32 = 2;
pub const FPC_ZE: u32 = 4;
pub const FPC_ZM: u32 = 4;
pub const FPC_OE: u32 = 8;
pub const FPC_OM: u32 = 8;
pub const FPC_UE: u32 = 16;
pub const FPC_PE: u32 = 32;
pub const FPC_PC: u32 = 768;
pub const FPC_PC_24: u32 = 0;
pub const FPC_PC_53: u32 = 512;
pub const FPC_PC_64: u32 = 768;
pub const FPC_RC: u32 = 3072;
pub const FPC_RC_RN: u32 = 0;
pub const FPC_RC_RD: u32 = 1024;
pub const FPC_RC_RU: u32 = 2048;
pub const FPC_RC_CHOP: u32 = 3072;
pub const FPC_IC: u32 = 4096;
pub const FPC_IC_PROJ: u32 = 0;
pub const FPC_IC_AFF: u32 = 4096;
pub const FPS_IE: u32 = 1;
pub const FPS_DE: u32 = 2;
pub const FPS_ZE: u32 = 4;
pub const FPS_OE: u32 = 8;
pub const FPS_UE: u32 = 16;
pub const FPS_PE: u32 = 32;
pub const FPS_SF: u32 = 64;
pub const FPS_ES: u32 = 128;
pub const FPS_C0: u32 = 256;
pub const FPS_C1: u32 = 512;
pub const FPS_C2: u32 = 1024;
pub const FPS_TOS: u32 = 14336;
pub const FPS_TOS_SHIFT: u32 = 11;
pub const FPS_C3: u32 = 16384;
pub const FPS_BUSY: u32 = 32768;
pub const FP_NO: u32 = 0;
pub const FP_SOFT: u32 = 1;
pub const FP_287: u32 = 2;
pub const FP_387: u32 = 3;
pub const FP_FXSR: u32 = 4;
pub const EFL_CF: u32 = 1;
pub const EFL_PF: u32 = 4;
pub const EFL_AF: u32 = 16;
pub const EFL_ZF: u32 = 64;
pub const EFL_SF: u32 = 128;
pub const EFL_TF: u32 = 256;
pub const EFL_IF: u32 = 512;
pub const EFL_DF: u32 = 1024;
pub const EFL_OF: u32 = 2048;
pub const EFL_IOPL: u32 = 12288;
pub const EFL_IOPL_KERNEL: u32 = 0;
pub const EFL_IOPL_USER: u32 = 12288;
pub const EFL_NT: u32 = 16384;
pub const EFL_RF: u32 = 65536;
pub const EFL_VM: u32 = 131072;
pub const EFL_AC: u32 = 262144;
pub const EFL_VIF: u32 = 524288;
pub const EFL_VIP: u32 = 1048576;
pub const EFL_ID: u32 = 2097152;
pub const EFL_CLR: u32 = 4294475816;
pub const EFL_SET: u32 = 2;
pub const EFL_USER_SET: u32 = 512;
pub const EFL_USER_CLEAR: u32 = 94208;
pub const i386_THREAD_STATE: u32 = 1;
pub const i386_FLOAT_STATE: u32 = 2;
pub const i386_EXCEPTION_STATE: u32 = 3;
pub const x86_THREAD_STATE32: u32 = 1;
pub const x86_FLOAT_STATE32: u32 = 2;
pub const x86_EXCEPTION_STATE32: u32 = 3;
pub const x86_THREAD_STATE64: u32 = 4;
pub const x86_FLOAT_STATE64: u32 = 5;
pub const x86_EXCEPTION_STATE64: u32 = 6;
pub const x86_THREAD_STATE: u32 = 7;
pub const x86_FLOAT_STATE: u32 = 8;
pub const x86_EXCEPTION_STATE: u32 = 9;
pub const x86_DEBUG_STATE32: u32 = 10;
pub const x86_DEBUG_STATE64: u32 = 11;
pub const x86_DEBUG_STATE: u32 = 12;
pub const THREAD_STATE_NONE: u32 = 13;
pub const x86_AVX_STATE32: u32 = 16;
pub const x86_AVX_STATE64: u32 = 17;
pub const x86_AVX_STATE: u32 = 18;
pub const x86_AVX512_STATE32: u32 = 19;
pub const x86_AVX512_STATE64: u32 = 20;
pub const x86_AVX512_STATE: u32 = 21;
pub const x86_PAGEIN_STATE: u32 = 22;
pub const x86_THREAD_FULL_STATE64: u32 = 23;
pub const x86_INSTRUCTION_STATE: u32 = 24;
pub const x86_LAST_BRANCH_STATE: u32 = 25;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const USER_CODE_SELECTOR: u32 = 23;
pub const USER_DATA_SELECTOR: u32 = 31;
pub const KERN_CODE_SELECTOR: u32 = 8;
pub const KERN_DATA_SELECTOR: u32 = 16;
pub const MACHINE_THREAD_STATE: u32 = 7;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const POSIX_SPAWN_NP_CSM_ALL: u32 = 1;
pub const POSIX_SPAWN_NP_CSM_NOSMT: u32 = 2;
pub const POSIX_SPAWN_NP_CSM_TECS: u32 = 4;
pub const _PTHREAD_MUTEX_POLICY_FAIRSHARE: u32 = 1;
pub const _PTHREAD_MUTEX_POLICY_FIRSTFIT: u32 = 3;
pub const REG_BASIC: u32 = 0;
pub const REG_EXTENDED: u32 = 1;
pub const REG_ICASE: u32 = 2;
pub const REG_NOSUB: u32 = 4;
pub const REG_NEWLINE: u32 = 8;
pub const REG_NOSPEC: u32 = 16;
pub const REG_LITERAL: u32 = 16;
pub const REG_PEND: u32 = 32;
pub const REG_MINIMAL: u32 = 64;
pub const REG_UNGREEDY: u32 = 64;
pub const REG_DUMP: u32 = 128;
pub const REG_ENHANCED: u32 = 256;
pub const REG_ENOSYS: i32 = -1;
pub const REG_NOMATCH: u32 = 1;
pub const REG_BADPAT: u32 = 2;
pub const REG_ECOLLATE: u32 = 3;
pub const REG_ECTYPE: u32 = 4;
pub const REG_EESCAPE: u32 = 5;
pub const REG_ESUBREG: u32 = 6;
pub const REG_EBRACK: u32 = 7;
pub const REG_EPAREN: u32 = 8;
pub const REG_EBRACE: u32 = 9;
pub const REG_BADBR: u32 = 10;
pub const REG_ERANGE: u32 = 11;
pub const REG_ESPACE: u32 = 12;
pub const REG_BADRPT: u32 = 13;
pub const REG_EMPTY: u32 = 14;
pub const REG_ASSERT: u32 = 15;
pub const REG_INVARG: u32 = 16;
pub const REG_ILLSEQ: u32 = 17;
pub const REG_ATOI: u32 = 255;
pub const REG_ITOA: u32 = 256;
pub const REG_NOTBOL: u32 = 1;
pub const REG_NOTEOL: u32 = 2;
pub const REG_STARTEND: u32 = 4;
pub const REG_TRACE: u32 = 256;
pub const REG_LARGE: u32 = 512;
pub const REG_BACKR: u32 = 1024;
pub const REG_BACKTRACKING_MATCHER: u32 = 1024;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 131072;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const NMBCLUSTERS: u32 = 512;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 131072;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const EVFILT_READ: i32 = -1;
pub const EVFILT_WRITE: i32 = -2;
pub const EVFILT_AIO: i32 = -3;
pub const EVFILT_VNODE: i32 = -4;
pub const EVFILT_PROC: i32 = -5;
pub const EVFILT_SIGNAL: i32 = -6;
pub const EVFILT_TIMER: i32 = -7;
pub const EVFILT_MACHPORT: i32 = -8;
pub const EVFILT_FS: i32 = -9;
pub const EVFILT_USER: i32 = -10;
pub const EVFILT_VM: i32 = -12;
pub const EVFILT_EXCEPT: i32 = -15;
pub const EVFILT_SYSCOUNT: u32 = 17;
pub const EVFILT_THREADMARKER: u32 = 17;
pub const KEVENT_FLAG_NONE: u32 = 0;
pub const KEVENT_FLAG_IMMEDIATE: u32 = 1;
pub const KEVENT_FLAG_ERROR_EVENTS: u32 = 2;
pub const EV_ADD: u32 = 1;
pub const EV_DELETE: u32 = 2;
pub const EV_ENABLE: u32 = 4;
pub const EV_DISABLE: u32 = 8;
pub const EV_ONESHOT: u32 = 16;
pub const EV_CLEAR: u32 = 32;
pub const EV_RECEIPT: u32 = 64;
pub const EV_DISPATCH: u32 = 128;
pub const EV_UDATA_SPECIFIC: u32 = 256;
pub const EV_DISPATCH2: u32 = 384;
pub const EV_VANISHED: u32 = 512;
pub const EV_SYSFLAGS: u32 = 61440;
pub const EV_FLAG0: u32 = 4096;
pub const EV_FLAG1: u32 = 8192;
pub const EV_EOF: u32 = 32768;
pub const EV_ERROR: u32 = 16384;
pub const EV_POLL: u32 = 4096;
pub const EV_OOBAND: u32 = 8192;
pub const NOTE_TRIGGER: u32 = 16777216;
pub const NOTE_FFNOP: u32 = 0;
pub const NOTE_FFAND: u32 = 1073741824;
pub const NOTE_FFOR: u32 = 2147483648;
pub const NOTE_FFCOPY: u32 = 3221225472;
pub const NOTE_FFCTRLMASK: u32 = 3221225472;
pub const NOTE_FFLAGSMASK: u32 = 16777215;
pub const NOTE_LOWAT: u32 = 1;
pub const NOTE_OOB: u32 = 2;
pub const NOTE_DELETE: u32 = 1;
pub const NOTE_WRITE: u32 = 2;
pub const NOTE_EXTEND: u32 = 4;
pub const NOTE_ATTRIB: u32 = 8;
pub const NOTE_LINK: u32 = 16;
pub const NOTE_RENAME: u32 = 32;
pub const NOTE_REVOKE: u32 = 64;
pub const NOTE_NONE: u32 = 128;
pub const NOTE_FUNLOCK: u32 = 256;
pub const NOTE_LEASE_DOWNGRADE: u32 = 512;
pub const NOTE_LEASE_RELEASE: u32 = 1024;
pub const NOTE_EXIT: u32 = 2147483648;
pub const NOTE_FORK: u32 = 1073741824;
pub const NOTE_EXEC: u32 = 536870912;
pub const NOTE_SIGNAL: u32 = 134217728;
pub const NOTE_EXITSTATUS: u32 = 67108864;
pub const NOTE_EXIT_DETAIL: u32 = 33554432;
pub const NOTE_PDATAMASK: u32 = 1048575;
pub const NOTE_PCTRLMASK: i32 = -1048576;
pub const NOTE_EXIT_DETAIL_MASK: u32 = 458752;
pub const NOTE_EXIT_DECRYPTFAIL: u32 = 65536;
pub const NOTE_EXIT_MEMORY: u32 = 131072;
pub const NOTE_EXIT_CSERROR: u32 = 262144;
pub const NOTE_VM_PRESSURE: u32 = 2147483648;
pub const NOTE_VM_PRESSURE_TERMINATE: u32 = 1073741824;
pub const NOTE_VM_PRESSURE_SUDDEN_TERMINATE: u32 = 536870912;
pub const NOTE_VM_ERROR: u32 = 268435456;
pub const NOTE_SECONDS: u32 = 1;
pub const NOTE_USECONDS: u32 = 2;
pub const NOTE_NSECONDS: u32 = 4;
pub const NOTE_ABSOLUTE: u32 = 8;
pub const NOTE_LEEWAY: u32 = 16;
pub const NOTE_CRITICAL: u32 = 32;
pub const NOTE_BACKGROUND: u32 = 64;
pub const NOTE_MACH_CONTINUOUS_TIME: u32 = 128;
pub const NOTE_MACHTIME: u32 = 256;
pub const NOTE_TRACK: u32 = 1;
pub const NOTE_TRACKERR: u32 = 2;
pub const NOTE_CHILD: u32 = 4;
pub const SIDL: u32 = 1;
pub const SRUN: u32 = 2;
pub const SSLEEP: u32 = 3;
pub const SSTOP: u32 = 4;
pub const SZOMB: u32 = 5;
pub const P_ADVLOCK: u32 = 1;
pub const P_CONTROLT: u32 = 2;
pub const P_LP64: u32 = 4;
pub const P_NOCLDSTOP: u32 = 8;
pub const P_PPWAIT: u32 = 16;
pub const P_PROFIL: u32 = 32;
pub const P_SELECT: u32 = 64;
pub const P_CONTINUED: u32 = 128;
pub const P_SUGID: u32 = 256;
pub const P_SYSTEM: u32 = 512;
pub const P_TIMEOUT: u32 = 1024;
pub const P_TRACED: u32 = 2048;
pub const P_DISABLE_ASLR: u32 = 4096;
pub const P_WEXIT: u32 = 8192;
pub const P_EXEC: u32 = 16384;
pub const P_OWEUPC: u32 = 32768;
pub const P_AFFINITY: u32 = 65536;
pub const P_TRANSLATED: u32 = 131072;
pub const P_CLASSIC: u32 = 131072;
pub const P_DELAYIDLESLEEP: u32 = 262144;
pub const P_CHECKOPENEVT: u32 = 524288;
pub const P_DEPENDENCY_CAPABLE: u32 = 1048576;
pub const P_REBOOT: u32 = 2097152;
pub const P_RESV6: u32 = 4194304;
pub const P_RESV7: u32 = 8388608;
pub const P_THCWD: u32 = 16777216;
pub const P_RESV9: u32 = 33554432;
pub const P_ADOPTPERSONA: u32 = 67108864;
pub const P_RESV11: u32 = 134217728;
pub const P_NOSHLIB: u32 = 268435456;
pub const P_FORCEQUOTA: u32 = 536870912;
pub const P_NOCLDWAIT: u32 = 1073741824;
pub const P_NOREMOTEHANG: u32 = 2147483648;
pub const P_INMEM: u32 = 0;
pub const P_NOSWAP: u32 = 0;
pub const P_PHYSIO: u32 = 0;
pub const P_FSTRACE: u32 = 0;
pub const P_SSTEP: u32 = 0;
pub const P_DIRTY_TRACK: u32 = 1;
pub const P_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const P_DIRTY_DEFER: u32 = 4;
pub const P_DIRTY: u32 = 8;
pub const P_DIRTY_SHUTDOWN: u32 = 16;
pub const P_DIRTY_TERMINATED: u32 = 32;
pub const P_DIRTY_BUSY: u32 = 64;
pub const P_DIRTY_MARKED: u32 = 128;
pub const P_DIRTY_AGING_IN_PROGRESS: u32 = 256;
pub const P_DIRTY_LAUNCH_IN_PROGRESS: u32 = 512;
pub const P_DIRTY_DEFER_ALWAYS: u32 = 1024;
pub const P_DIRTY_IS_DIRTY: u32 = 24;
pub const P_DIRTY_IDLE_EXIT_ENABLED: u32 = 3;
pub const PSEMNAMLEN: u32 = 31;
pub const PSEM_NONE: u32 = 1;
pub const PSEM_DEFINED: u32 = 2;
pub const PSEM_ALLOCATED: u32 = 4;
pub const PSEM_MAPPED: u32 = 8;
pub const PSEM_INUSE: u32 = 16;
pub const PSEM_REMOVED: u32 = 32;
pub const PSEM_INCREATE: u32 = 64;
pub const PSEM_INDELETE: u32 = 128;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_R: u32 = 256;
pub const IPC_W: u32 = 128;
pub const IPC_M: u32 = 4096;
pub const PROT_NONE: u32 = 0;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_COPY: u32 = 2;
pub const MAP_FIXED: u32 = 16;
pub const MAP_RENAME: u32 = 32;
pub const MAP_NORESERVE: u32 = 64;
pub const MAP_RESERVED0080: u32 = 128;
pub const MAP_NOEXTEND: u32 = 256;
pub const MAP_HASSEMAPHORE: u32 = 512;
pub const MAP_NOCACHE: u32 = 1024;
pub const MAP_JIT: u32 = 2048;
pub const MAP_FILE: u32 = 0;
pub const MAP_ANON: u32 = 4096;
pub const MAP_ANONYMOUS: u32 = 4096;
pub const MAP_RESILIENT_CODESIGN: u32 = 8192;
pub const MAP_RESILIENT_MEDIA: u32 = 16384;
pub const MAP_32BIT: u32 = 32768;
pub const MAP_TRANSLATED_ALLOW_EXECUTE: u32 = 131072;
pub const MAP_UNIX03: u32 = 262144;
pub const MCL_CURRENT: u32 = 1;
pub const MCL_FUTURE: u32 = 2;
pub const MS_ASYNC: u32 = 1;
pub const MS_INVALIDATE: u32 = 2;
pub const MS_SYNC: u32 = 16;
pub const MS_KILLPAGES: u32 = 4;
pub const MS_DEACTIVATE: u32 = 8;
pub const POSIX_MADV_NORMAL: u32 = 0;
pub const POSIX_MADV_RANDOM: u32 = 1;
pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
pub const POSIX_MADV_WILLNEED: u32 = 3;
pub const POSIX_MADV_DONTNEED: u32 = 4;
pub const MADV_NORMAL: u32 = 0;
pub const MADV_RANDOM: u32 = 1;
pub const MADV_SEQUENTIAL: u32 = 2;
pub const MADV_WILLNEED: u32 = 3;
pub const MADV_DONTNEED: u32 = 4;
pub const MADV_FREE: u32 = 5;
pub const MADV_ZERO_WIRED_PAGES: u32 = 6;
pub const MADV_FREE_REUSABLE: u32 = 7;
pub const MADV_FREE_REUSE: u32 = 8;
pub const MADV_CAN_REUSE: u32 = 9;
pub const MADV_PAGEOUT: u32 = 10;
pub const MINCORE_INCORE: u32 = 1;
pub const MINCORE_REFERENCED: u32 = 2;
pub const MINCORE_MODIFIED: u32 = 4;
pub const MINCORE_REFERENCED_OTHER: u32 = 8;
pub const MINCORE_MODIFIED_OTHER: u32 = 16;
pub const MINCORE_PAGED_OUT: u32 = 32;
pub const MINCORE_COPIED: u32 = 64;
pub const MINCORE_ANONYMOUS: u32 = 128;
pub const MSG_NOERROR: u32 = 4096;
pub const GETNCNT: u32 = 3;
pub const GETPID: u32 = 4;
pub const GETVAL: u32 = 5;
pub const GETALL: u32 = 6;
pub const GETZCNT: u32 = 7;
pub const SETVAL: u32 = 8;
pub const SETALL: u32 = 9;
pub const SEM_UNDO: u32 = 4096;
pub const SEM_A: u32 = 128;
pub const SEM_R: u32 = 256;
pub const SHM_RDONLY: u32 = 4096;
pub const SHM_RND: u32 = 8192;
pub const SHMLBA: u32 = 4096;
pub const SHM_R: u32 = 256;
pub const SHM_W: u32 = 128;
pub const PSHMNAMLEN: u32 = 31;
pub const ST_RDONLY: u32 = 1;
pub const ST_NOSUID: u32 = 2;
pub const GRAFTDMG_SECURE_BOOT_CRYPTEX_ARGS_VERSION: u32 = 1;
pub const MAX_GRAFT_ARGS_SIZE: u32 = 512;
pub const SBC_PRESERVE_MOUNT: u32 = 1;
pub const SBC_ALTERNATE_SHARED_REGION: u32 = 2;
pub const SBC_SYSTEM_CONTENT: u32 = 4;
pub const SBC_PANIC_ON_AUTHFAIL: u32 = 8;
pub const SBC_STRICT_AUTH: u32 = 16;
pub const SBC_PRESERVE_GRAFT: u32 = 32;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const SOL_LOCAL: u32 = 0;
pub const LOCAL_PEERCRED: u32 = 1;
pub const LOCAL_PEERPID: u32 = 2;
pub const LOCAL_PEEREPID: u32 = 3;
pub const LOCAL_PEERUUID: u32 = 4;
pub const LOCAL_PEEREUUID: u32 = 5;
pub const LOCAL_PEERTOKEN: u32 = 6;
pub const _SYS_NAMELEN: u32 = 256;
pub const XATTR_NOFOLLOW: u32 = 1;
pub const XATTR_CREATE: u32 = 2;
pub const XATTR_REPLACE: u32 = 4;
pub const XATTR_NOSECURITY: u32 = 8;
pub const XATTR_NODEFAULT: u32 = 16;
pub const XATTR_SHOWCOMPRESSION: u32 = 32;
pub const XATTR_MAXNAMELEN: u32 = 127;
pub const XATTR_FINDERINFO_NAME: &[u8; 21usize] = b"com.apple.FinderInfo\0";
pub const XATTR_RESOURCEFORK_NAME: &[u8; 23usize] = b"com.apple.ResourceFork\0";
pub const _PATH_LOG: &[u8; 16usize] = b"/var/run/syslog\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_NETINFO: u32 = 96;
pub const LOG_REMOTEAUTH: u32 = 104;
pub const LOG_INSTALL: u32 = 112;
pub const LOG_RAS: u32 = 120;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_LAUNCHD: u32 = 192;
pub const LOG_NFACILITIES: u32 = 25;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const TMAGIC: &[u8; 6usize] = b"ustar\0";
pub const TMAGLEN: u32 = 6;
pub const TVERSION: &[u8; 3usize] = b"00\0";
pub const TVERSLEN: u32 = 2;
pub const REGTYPE: u8 = 48u8;
pub const AREGTYPE: u8 = 0u8;
pub const LNKTYPE: u8 = 49u8;
pub const SYMTYPE: u8 = 50u8;
pub const CHRTYPE: u8 = 51u8;
pub const BLKTYPE: u8 = 52u8;
pub const DIRTYPE: u8 = 53u8;
pub const FIFOTYPE: u8 = 54u8;
pub const CONTTYPE: u8 = 55u8;
pub const TSUID: u32 = 2048;
pub const TSGID: u32 = 1024;
pub const TSVTX: u32 = 512;
pub const TUREAD: u32 = 256;
pub const TUWRITE: u32 = 128;
pub const TUEXEC: u32 = 64;
pub const TGREAD: u32 = 32;
pub const TGWRITE: u32 = 16;
pub const TGEXEC: u32 = 8;
pub const TOREAD: u32 = 4;
pub const TOWRITE: u32 = 2;
pub const TOEXEC: u32 = 1;
pub const UL_GETFSIZE: u32 = 1;
pub const UL_SETFSIZE: u32 = 2;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const _PATH_UTMPX: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const UTMPX_FILE: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const _UTX_USERSIZE: u32 = 256;
pub const _UTX_LINESIZE: u32 = 32;
pub const _UTX_IDSIZE: u32 = 4;
pub const _UTX_HOSTSIZE: u32 = 256;
pub const EMPTY: u32 = 0;
pub const RUN_LVL: u32 = 1;
pub const BOOT_TIME: u32 = 2;
pub const OLD_TIME: u32 = 3;
pub const NEW_TIME: u32 = 4;
pub const INIT_PROCESS: u32 = 5;
pub const LOGIN_PROCESS: u32 = 6;
pub const USER_PROCESS: u32 = 7;
pub const DEAD_PROCESS: u32 = 8;
pub const ACCOUNTING: u32 = 9;
pub const SIGNATURE: u32 = 10;
pub const SHUTDOWN_TIME: u32 = 11;
pub const UTMPX_AUTOFILL_MASK: u32 = 32768;
pub const UTMPX_DEAD_IF_CORRESPONDING_MASK: u32 = 16384;
pub const UTMPX_CHANGE_NOTIFICATION: &[u8; 23usize] = b"com.apple.system.utmpx\0";
pub const WRDE_APPEND: u32 = 1;
pub const WRDE_DOOFFS: u32 = 2;
pub const WRDE_NOCMD: u32 = 4;
pub const WRDE_REUSE: u32 = 8;
pub const WRDE_SHOWERR: u32 = 16;
pub const WRDE_UNDEF: u32 = 32;
pub const WRDE_BADCHAR: u32 = 1;
pub const WRDE_BADVAL: u32 = 2;
pub const WRDE_CMDSUB: u32 = 3;
pub const WRDE_NOSPACE: u32 = 4;
pub const WRDE_NOSYS: u32 = 5;
pub const WRDE_SYNTAX: u32 = 6;
pub const BPF_RELEASE: u32 = 199606;
pub const BPF_MAXINSNS: u32 = 512;
pub const BPF_MAXBUFSIZE: u32 = 524288;
pub const BPF_MINBUFSIZE: u32 = 32;
pub const BPF_MAJOR_VERSION: u32 = 1;
pub const BPF_MINOR_VERSION: u32 = 1;
pub const DLT_NULL: u32 = 0;
pub const DLT_EN10MB: u32 = 1;
pub const DLT_EN3MB: u32 = 2;
pub const DLT_AX25: u32 = 3;
pub const DLT_PRONET: u32 = 4;
pub const DLT_CHAOS: u32 = 5;
pub const DLT_IEEE802: u32 = 6;
pub const DLT_ARCNET: u32 = 7;
pub const DLT_SLIP: u32 = 8;
pub const DLT_PPP: u32 = 9;
pub const DLT_FDDI: u32 = 10;
pub const DLT_ATM_RFC1483: u32 = 11;
pub const DLT_RAW: u32 = 12;
pub const DLT_SLIP_BSDOS: u32 = 15;
pub const DLT_PPP_BSDOS: u32 = 16;
pub const DLT_PFSYNC: u32 = 18;
pub const DLT_ATM_CLIP: u32 = 19;
pub const DLT_PPP_SERIAL: u32 = 50;
pub const DLT_PPP_ETHER: u32 = 51;
pub const DLT_SYMANTEC_FIREWALL: u32 = 99;
pub const DLT_MATCHING_MIN: u32 = 104;
pub const DLT_C_HDLC: u32 = 104;
pub const DLT_CHDLC: u32 = 104;
pub const DLT_IEEE802_11: u32 = 105;
pub const DLT_FRELAY: u32 = 107;
pub const DLT_LOOP: u32 = 108;
pub const DLT_ENC: u32 = 109;
pub const DLT_LINUX_SLL: u32 = 113;
pub const DLT_LTALK: u32 = 114;
pub const DLT_ECONET: u32 = 115;
pub const DLT_IPFILTER: u32 = 116;
pub const DLT_PFLOG: u32 = 117;
pub const DLT_CISCO_IOS: u32 = 118;
pub const DLT_PRISM_HEADER: u32 = 119;
pub const DLT_AIRONET_HEADER: u32 = 120;
pub const DLT_HHDLC: u32 = 121;
pub const DLT_IP_OVER_FC: u32 = 122;
pub const DLT_SUNATM: u32 = 123;
pub const DLT_RIO: u32 = 124;
pub const DLT_PCI_EXP: u32 = 125;
pub const DLT_AURORA: u32 = 126;
pub const DLT_IEEE802_11_RADIO: u32 = 127;
pub const DLT_TZSP: u32 = 128;
pub const DLT_ARCNET_LINUX: u32 = 129;
pub const DLT_JUNIPER_MLPPP: u32 = 130;
pub const DLT_JUNIPER_MLFR: u32 = 131;
pub const DLT_JUNIPER_ES: u32 = 132;
pub const DLT_JUNIPER_GGSN: u32 = 133;
pub const DLT_JUNIPER_MFR: u32 = 134;
pub const DLT_JUNIPER_ATM2: u32 = 135;
pub const DLT_JUNIPER_SERVICES: u32 = 136;
pub const DLT_JUNIPER_ATM1: u32 = 137;
pub const DLT_APPLE_IP_OVER_IEEE1394: u32 = 138;
pub const DLT_MTP2_WITH_PHDR: u32 = 139;
pub const DLT_MTP2: u32 = 140;
pub const DLT_MTP3: u32 = 141;
pub const DLT_SCCP: u32 = 142;
pub const DLT_DOCSIS: u32 = 143;
pub const DLT_LINUX_IRDA: u32 = 144;
pub const DLT_IBM_SP: u32 = 145;
pub const DLT_IBM_SN: u32 = 146;
pub const DLT_USER0: u32 = 147;
pub const DLT_USER1: u32 = 148;
pub const DLT_USER2: u32 = 149;
pub const DLT_USER3: u32 = 150;
pub const DLT_USER4: u32 = 151;
pub const DLT_USER5: u32 = 152;
pub const DLT_USER6: u32 = 153;
pub const DLT_USER7: u32 = 154;
pub const DLT_USER8: u32 = 155;
pub const DLT_USER9: u32 = 156;
pub const DLT_USER10: u32 = 157;
pub const DLT_USER11: u32 = 158;
pub const DLT_USER12: u32 = 159;
pub const DLT_USER13: u32 = 160;
pub const DLT_USER14: u32 = 161;
pub const DLT_USER15: u32 = 162;
pub const DLT_IEEE802_11_RADIO_AVS: u32 = 163;
pub const DLT_JUNIPER_MONITOR: u32 = 164;
pub const DLT_BACNET_MS_TP: u32 = 165;
pub const DLT_PPP_PPPD: u32 = 166;
pub const DLT_PPP_WITH_DIRECTION: u32 = 166;
pub const DLT_LINUX_PPP_WITHDIRECTION: u32 = 166;
pub const DLT_JUNIPER_PPPOE: u32 = 167;
pub const DLT_JUNIPER_PPPOE_ATM: u32 = 168;
pub const DLT_GPRS_LLC: u32 = 169;
pub const DLT_GPF_T: u32 = 170;
pub const DLT_GPF_F: u32 = 171;
pub const DLT_GCOM_T1E1: u32 = 172;
pub const DLT_GCOM_SERIAL: u32 = 173;
pub const DLT_JUNIPER_PIC_PEER: u32 = 174;
pub const DLT_ERF_ETH: u32 = 175;
pub const DLT_ERF_POS: u32 = 176;
pub const DLT_LINUX_LAPD: u32 = 177;
pub const DLT_JUNIPER_ETHER: u32 = 178;
pub const DLT_JUNIPER_PPP: u32 = 179;
pub const DLT_JUNIPER_FRELAY: u32 = 180;
pub const DLT_JUNIPER_CHDLC: u32 = 181;
pub const DLT_MFR: u32 = 182;
pub const DLT_JUNIPER_VP: u32 = 183;
pub const DLT_A429: u32 = 184;
pub const DLT_A653_ICM: u32 = 185;
pub const DLT_USB: u32 = 186;
pub const DLT_BLUETOOTH_HCI_H4: u32 = 187;
pub const DLT_IEEE802_16_MAC_CPS: u32 = 188;
pub const DLT_USB_LINUX: u32 = 189;
pub const DLT_CAN20B: u32 = 190;
pub const DLT_IEEE802_15_4_LINUX: u32 = 191;
pub const DLT_PPI: u32 = 192;
pub const DLT_IEEE802_16_MAC_CPS_RADIO: u32 = 193;
pub const DLT_JUNIPER_ISM: u32 = 194;
pub const DLT_IEEE802_15_4: u32 = 195;
pub const DLT_SITA: u32 = 196;
pub const DLT_ERF: u32 = 197;
pub const DLT_RAIF1: u32 = 198;
pub const DLT_IPMB: u32 = 199;
pub const DLT_JUNIPER_ST: u32 = 200;
pub const DLT_BLUETOOTH_HCI_H4_WITH_PHDR: u32 = 201;
pub const DLT_AX25_KISS: u32 = 202;
pub const DLT_LAPD: u32 = 203;
pub const DLT_PPP_WITH_DIR: u32 = 204;
pub const DLT_C_HDLC_WITH_DIR: u32 = 205;
pub const DLT_FRELAY_WITH_DIR: u32 = 206;
pub const DLT_LAPB_WITH_DIR: u32 = 207;
pub const DLT_IPMB_LINUX: u32 = 209;
pub const DLT_FLEXRAY: u32 = 210;
pub const DLT_MOST: u32 = 211;
pub const DLT_LIN: u32 = 212;
pub const DLT_X2E_SERIAL: u32 = 213;
pub const DLT_X2E_XORAYA: u32 = 214;
pub const DLT_IEEE802_15_4_NONASK_PHY: u32 = 215;
pub const DLT_LINUX_EVDEV: u32 = 216;
pub const DLT_GSMTAP_UM: u32 = 217;
pub const DLT_GSMTAP_ABIS: u32 = 218;
pub const DLT_MPLS: u32 = 219;
pub const DLT_USB_LINUX_MMAPPED: u32 = 220;
pub const DLT_DECT: u32 = 221;
pub const DLT_AOS: u32 = 222;
pub const DLT_WIHART: u32 = 223;
pub const DLT_FC_2: u32 = 224;
pub const DLT_FC_2_WITH_FRAME_DELIMS: u32 = 225;
pub const DLT_IPNET: u32 = 226;
pub const DLT_CAN_SOCKETCAN: u32 = 227;
pub const DLT_IPV4: u32 = 228;
pub const DLT_IPV6: u32 = 229;
pub const DLT_IEEE802_15_4_NOFCS: u32 = 230;
pub const DLT_DBUS: u32 = 231;
pub const DLT_JUNIPER_VS: u32 = 232;
pub const DLT_JUNIPER_SRX_E2E: u32 = 233;
pub const DLT_JUNIPER_FIBRECHANNEL: u32 = 234;
pub const DLT_DVB_CI: u32 = 235;
pub const DLT_MUX27010: u32 = 236;
pub const DLT_STANAG_5066_D_PDU: u32 = 237;
pub const DLT_JUNIPER_ATM_CEMIC: u32 = 238;
pub const DLT_NFLOG: u32 = 239;
pub const DLT_NETANALYZER: u32 = 240;
pub const DLT_NETANALYZER_TRANSPARENT: u32 = 241;
pub const DLT_IPOIB: u32 = 242;
pub const DLT_MPEG_2_TS: u32 = 243;
pub const DLT_NG40: u32 = 244;
pub const DLT_NFC_LLCP: u32 = 245;
pub const DLT_USB_DARWIN: u32 = 266;
pub const DLT_MATCHING_MAX: u32 = 266;
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_A: u32 = 16;
pub const BPF_TAX: u32 = 0;
pub const BPF_TXA: u32 = 128;
pub const BPF_MEMWORDS: u32 = 16;
pub const ETHER_ADDR_LEN: u32 = 6;
pub const ETHER_TYPE_LEN: u32 = 2;
pub const ETHER_CRC_LEN: u32 = 4;
pub const ETHER_HDR_LEN: u32 = 14;
pub const ETHER_MIN_LEN: u32 = 64;
pub const ETHER_MAX_LEN: u32 = 1518;
pub const ETHER_ALIGN: u32 = 2;
pub const ETHERTYPE_PUP: u32 = 512;
pub const ETHERTYPE_IP: u32 = 2048;
pub const ETHERTYPE_ARP: u32 = 2054;
pub const ETHERTYPE_REVARP: u32 = 32821;
pub const ETHERTYPE_VLAN: u32 = 33024;
pub const ETHERTYPE_IPV6: u32 = 34525;
pub const ETHERTYPE_PAE: u32 = 34958;
pub const ETHERTYPE_RSN_PREAUTH: u32 = 35015;
pub const ETHERTYPE_PTP: u32 = 35063;
pub const ETHERTYPE_LOOPBACK: u32 = 36864;
pub const ETHERTYPE_TRAIL: u32 = 4096;
pub const ETHERTYPE_NTRAILER: u32 = 16;
pub const ETHERMTU: u32 = 1500;
pub const ETHERMIN: u32 = 46;
pub const ARPHRD_ETHER: u32 = 1;
pub const ARPHRD_IEEE802: u32 = 6;
pub const ARPHRD_FRELAY: u32 = 15;
pub const ARPHRD_IEEE1394: u32 = 24;
pub const ARPHRD_IEEE1394_EUI64: u32 = 27;
pub const ARPOP_REQUEST: u32 = 1;
pub const ARPOP_REPLY: u32 = 2;
pub const ARPOP_REVREQUEST: u32 = 3;
pub const ARPOP_REVREPLY: u32 = 4;
pub const ARPOP_INVREQUEST: u32 = 8;
pub const ARPOP_INVREPLY: u32 = 9;
pub const ATF_INUSE: u32 = 1;
pub const ATF_COM: u32 = 2;
pub const ATF_PERM: u32 = 4;
pub const ATF_PUBL: u32 = 8;
pub const ATF_USETRAILERS: u32 = 16;
pub const LLC_ISFRAMELEN: u32 = 4;
pub const LLC_UFRAMELEN: u32 = 3;
pub const LLC_FRMRLEN: u32 = 7;
pub const LLC_SNAPFRAMELEN: u32 = 8;
pub const LLC_UI: u32 = 3;
pub const LLC_UI_P: u32 = 19;
pub const LLC_DISC: u32 = 67;
pub const LLC_DISC_P: u32 = 83;
pub const LLC_UA: u32 = 99;
pub const LLC_UA_P: u32 = 115;
pub const LLC_TEST: u32 = 227;
pub const LLC_TEST_P: u32 = 243;
pub const LLC_FRMR: u32 = 135;
pub const LLC_FRMR_P: u32 = 151;
pub const LLC_DM: u32 = 15;
pub const LLC_DM_P: u32 = 31;
pub const LLC_XID: u32 = 175;
pub const LLC_XID_P: u32 = 191;
pub const LLC_SABME: u32 = 111;
pub const LLC_SABME_P: u32 = 127;
pub const LLC_RR: u32 = 1;
pub const LLC_RNR: u32 = 5;
pub const LLC_REJ: u32 = 9;
pub const LLC_INFO: u32 = 0;
pub const LLC_8021D_LSAP: u32 = 66;
pub const LLC_X25_LSAP: u32 = 126;
pub const LLC_SNAP_LSAP: u32 = 170;
pub const LLC_ISO_LSAP: u32 = 254;
pub const LLC_XID_FORMAT_BASIC: u32 = 129;
pub const LLC_XID_BASIC_MINLEN: u32 = 6;
pub const LLC_XID_CLASS_I: u32 = 1;
pub const LLC_XID_CLASS_II: u32 = 3;
pub const LLC_XID_CLASS_III: u32 = 5;
pub const LLC_XID_CLASS_IV: u32 = 7;
pub const IFM_ETHER: u32 = 32;
pub const IFM_10_T: u32 = 3;
pub const IFM_10_2: u32 = 4;
pub const IFM_10_5: u32 = 5;
pub const IFM_100_TX: u32 = 6;
pub const IFM_100_FX: u32 = 7;
pub const IFM_100_T4: u32 = 8;
pub const IFM_100_VG: u32 = 9;
pub const IFM_100_T2: u32 = 10;
pub const IFM_1000_SX: u32 = 11;
pub const IFM_10_STP: u32 = 12;
pub const IFM_10_FL: u32 = 13;
pub const IFM_1000_LX: u32 = 14;
pub const IFM_1000_CX: u32 = 15;
pub const IFM_1000_T: u32 = 16;
pub const IFM_HPNA_1: u32 = 17;
pub const IFM_10G_SR: u32 = 18;
pub const IFM_10G_LR: u32 = 19;
pub const IFM_10G_CX4: u32 = 20;
pub const IFM_10G_T: u32 = 21;
pub const IFM_2500_T: u32 = 22;
pub const IFM_5000_T: u32 = 23;
pub const IFM_1000_CX_SGMII: u32 = 24;
pub const IFM_1000_KX: u32 = 25;
pub const IFM_10G_KX4: u32 = 26;
pub const IFM_10G_KR: u32 = 27;
pub const IFM_10G_CR1: u32 = 28;
pub const IFM_10G_ER: u32 = 29;
pub const IFM_20G_KR2: u32 = 30;
pub const IFM_OTHER: u32 = 31;
pub const IFM_TOKEN: u32 = 64;
pub const IFM_TOK_STP4: u32 = 3;
pub const IFM_TOK_STP16: u32 = 4;
pub const IFM_TOK_UTP4: u32 = 5;
pub const IFM_TOK_UTP16: u32 = 6;
pub const IFM_TOK_STP100: u32 = 7;
pub const IFM_TOK_UTP100: u32 = 8;
pub const IFM_TOK_ETR: u32 = 512;
pub const IFM_TOK_SRCRT: u32 = 1024;
pub const IFM_TOK_ALLR: u32 = 2048;
pub const IFM_TOK_DTR: u32 = 8192;
pub const IFM_TOK_CLASSIC: u32 = 16384;
pub const IFM_TOK_AUTO: u32 = 32768;
pub const IFM_FDDI: u32 = 96;
pub const IFM_FDDI_SMF: u32 = 3;
pub const IFM_FDDI_MMF: u32 = 4;
pub const IFM_FDDI_UTP: u32 = 5;
pub const IFM_FDDI_DA: u32 = 256;
pub const IFM_IEEE80211: u32 = 128;
pub const IFM_IEEE80211_FH1: u32 = 3;
pub const IFM_IEEE80211_FH2: u32 = 4;
pub const IFM_IEEE80211_DS2: u32 = 5;
pub const IFM_IEEE80211_DS5: u32 = 6;
pub const IFM_IEEE80211_DS11: u32 = 7;
pub const IFM_IEEE80211_DS1: u32 = 8;
pub const IFM_IEEE80211_DS22: u32 = 9;
pub const IFM_IEEE80211_ADHOC: u32 = 256;
pub const IFM_AUTO: u32 = 0;
pub const IFM_MANUAL: u32 = 1;
pub const IFM_NONE: u32 = 2;
pub const IFM_FDX: u32 = 1048576;
pub const IFM_HDX: u32 = 2097152;
pub const IFM_FLOW: u32 = 4194304;
pub const IFM_EEE: u32 = 8388608;
pub const IFM_FLAG0: u32 = 16777216;
pub const IFM_FLAG1: u32 = 33554432;
pub const IFM_FLAG2: u32 = 67108864;
pub const IFM_LOOP: u32 = 134217728;
pub const IFM_TMASK_COMPAT: u32 = 31;
pub const IFM_TMASK_EXT: u32 = 983040;
pub const IFM_TMASK_EXT_SHIFT: u32 = 11;
pub const IFM_NMASK: u32 = 224;
pub const IFM_TMASK: u32 = 983071;
pub const IFM_IMASK: u32 = 4026531840;
pub const IFM_ISHIFT: u32 = 28;
pub const IFM_OMASK: u32 = 65280;
pub const IFM_GMASK: u32 = 267386880;
pub const IFM_AVALID: u32 = 1;
pub const IFM_ACTIVE: u32 = 2;
pub const IFM_WAKESAMENET: u32 = 4;
pub const _NET_IF_MIB_H: u32 = 1;
pub const IFMIB_SYSTEM: u32 = 1;
pub const IFMIB_IFDATA: u32 = 2;
pub const IFMIB_IFALLDATA: u32 = 3;
pub const IFDATA_GENERAL: u32 = 1;
pub const IFDATA_LINKSPECIFIC: u32 = 2;
pub const IFDATA_ADDRS: u32 = 3;
pub const IFDATA_MULTIADDRS: u32 = 4;
pub const IFMIB_IFCOUNT: u32 = 1;
pub const NETLINK_GENERIC: u32 = 0;
pub const DOT3COMPLIANCE_STATS: u32 = 1;
pub const DOT3COMPLIANCE_COLLS: u32 = 2;
pub const UTUN_CONTROL_NAME: &[u8; 27usize] = b"com.apple.net.utun_control\0";
pub const UTUN_OPT_FLAGS: u32 = 1;
pub const UTUN_OPT_IFNAME: u32 = 2;
pub const UTUN_OPT_EXT_IFDATA_STATS: u32 = 3;
pub const UTUN_OPT_INC_IFDATA_STATS_IN: u32 = 4;
pub const UTUN_OPT_INC_IFDATA_STATS_OUT: u32 = 5;
pub const UTUN_OPT_SET_DELEGATE_INTERFACE: u32 = 15;
pub const UTUN_OPT_MAX_PENDING_PACKETS: u32 = 16;
pub const UTUN_OPT_ENABLE_CHANNEL: u32 = 17;
pub const UTUN_OPT_GET_CHANNEL_UUID: u32 = 18;
pub const UTUN_OPT_ENABLE_FLOWSWITCH: u32 = 19;
pub const UTUN_OPT_ENABLE_NETIF: u32 = 20;
pub const UTUN_OPT_SLOT_SIZE: u32 = 21;
pub const UTUN_OPT_NETIF_RING_SIZE: u32 = 22;
pub const UTUN_OPT_TX_FSW_RING_SIZE: u32 = 23;
pub const UTUN_OPT_RX_FSW_RING_SIZE: u32 = 24;
pub const UTUN_OPT_KPIPE_TX_RING_SIZE: u32 = 25;
pub const UTUN_OPT_KPIPE_RX_RING_SIZE: u32 = 26;
pub const UTUN_OPT_ATTACH_FLOWSWITCH: u32 = 27;
pub const UTUN_FLAGS_NO_OUTPUT: u32 = 1;
pub const UTUN_FLAGS_NO_INPUT: u32 = 2;
pub const UTUN_FLAGS_ENABLE_PROC_UUID: u32 = 4;
pub const IF_CELLULAR_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_CELLULAR_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_CELL_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_CELL_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_CELL_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_CELL_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_CELL_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_CELL_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_CELL_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_CELL_UL_BYTES_LOST_VALID: u32 = 128;
pub const IF_CELL_UL_MIN_QUEUE_SIZE_VALID: u32 = 256;
pub const IF_CELL_UL_AVG_QUEUE_SIZE_VALID: u32 = 512;
pub const IF_CELL_UL_MAX_QUEUE_SIZE_VALID: u32 = 1024;
pub const IF_CELL_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2048;
pub const IF_CELL_DL_MAX_BANDWIDTH_VALID: u32 = 4096;
pub const IF_CELL_CONFIG_INACTIVITY_TIME_VALID: u32 = 8192;
pub const IF_CELL_CONFIG_BACKOFF_TIME_VALID: u32 = 16384;
pub const IF_CELL_UL_MSS_RECOMMENDED_VALID: u32 = 32768;
pub const IF_CELL_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_CELL_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_CELL_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_CELL_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_CELL_UL_MSS_RECOMMENDED_NONE: u32 = 0;
pub const IF_CELL_UL_MSS_RECOMMENDED_MEDIUM: u32 = 1;
pub const IF_CELL_UL_MSS_RECOMMENDED_LOW: u32 = 2;
pub const IF_WIFI_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_WIFI_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_WIFI_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_WIFI_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_WIFI_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_WIFI_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_WIFI_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_WIFI_UL_ERROR_RATE_VALID: u32 = 128;
pub const IF_WIFI_UL_BYTES_LOST_VALID: u32 = 256;
pub const IF_WIFI_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 512;
pub const IF_WIFI_DL_MAX_BANDWIDTH_VALID: u32 = 1024;
pub const IF_WIFI_DL_MIN_LATENCY_VALID: u32 = 2048;
pub const IF_WIFI_DL_EFFECTIVE_LATENCY_VALID: u32 = 4096;
pub const IF_WIFI_DL_MAX_LATENCY_VALID: u32 = 8192;
pub const IF_WIFI_DL_ERROR_RATE_VALID: u32 = 16384;
pub const IF_WIFI_CONFIG_FREQUENCY_VALID: u32 = 32768;
pub const IF_WIFI_CONFIG_MULTICAST_RATE_VALID: u32 = 65536;
pub const IF_WIFI_CONFIG_SCAN_COUNT_VALID: u32 = 131072;
pub const IF_WIFI_CONFIG_SCAN_DURATION_VALID: u32 = 262144;
pub const IF_WIFI_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_WIFI_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_WIFI_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_WIFI_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_WIFI_CONFIG_FREQUENCY_2_4_GHZ: u32 = 1;
pub const IF_WIFI_CONFIG_FREQUENCY_5_0_GHZ: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_BT: u32 = 1;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_AWDL: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_TX_QUEUE_COUNT: u32 = 6;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_NO: u32 = 0;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_YES: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_TYPE_INET: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_INBOUND: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_OUTBOUND: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_IPVER: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_PROTO: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LADDR: u32 = 4;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RADDR: u32 = 8;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LPORT: u32 = 16;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RPORT: u32 = 32;
pub const IFNET_TRAFFIC_RULE_ACTION_STEER: u32 = 1;
pub const NFF_BEFORE: u32 = 1;
pub const NFF_AFTER: u32 = 2;
pub const NKE_OK: u32 = 0;
pub const NKE_REMOVE: i32 = -1;
pub const NDRV_DEMUXTYPE_ETHERTYPE: u32 = 4;
pub const NDRV_DEMUXTYPE_SAP: u32 = 5;
pub const NDRV_DEMUXTYPE_SNAP: u32 = 6;
pub const NDRVPROTO_NDRV: u32 = 0;
pub const NDRV_PROTOCOL_DESC_VERS: u32 = 1;
pub const SOL_NDRVPROTO: u32 = 0;
pub const NDRV_DELDMXSPEC: u32 = 2;
pub const NDRV_SETDMXSPEC: u32 = 4;
pub const NDRV_ADDMULTICAST: u32 = 5;
pub const NDRV_DELMULTICAST: u32 = 6;
pub const NDRV_DMUX_MAX_DESCR: u32 = 1024;
pub const NRDV_MULTICAST_ADDRS_PER_SOCK: u32 = 1;
pub const __PFKEY_V2_H: u32 = 1;
pub const PF_KEY_V2: u32 = 2;
pub const PFKEYV2_REVISION: u32 = 199806;
pub const SADB_RESERVED: u32 = 0;
pub const SADB_GETSPI: u32 = 1;
pub const SADB_UPDATE: u32 = 2;
pub const SADB_ADD: u32 = 3;
pub const SADB_DELETE: u32 = 4;
pub const SADB_GET: u32 = 5;
pub const SADB_ACQUIRE: u32 = 6;
pub const SADB_REGISTER: u32 = 7;
pub const SADB_EXPIRE: u32 = 8;
pub const SADB_FLUSH: u32 = 9;
pub const SADB_DUMP: u32 = 10;
pub const SADB_X_PROMISC: u32 = 11;
pub const SADB_X_PCHANGE: u32 = 12;
pub const SADB_X_SPDUPDATE: u32 = 13;
pub const SADB_X_SPDADD: u32 = 14;
pub const SADB_X_SPDDELETE: u32 = 15;
pub const SADB_X_SPDGET: u32 = 16;
pub const SADB_X_SPDACQUIRE: u32 = 17;
pub const SADB_X_SPDDUMP: u32 = 18;
pub const SADB_X_SPDFLUSH: u32 = 19;
pub const SADB_X_SPDSETIDX: u32 = 20;
pub const SADB_X_SPDEXPIRE: u32 = 21;
pub const SADB_X_SPDDELETE2: u32 = 22;
pub const SADB_GETSASTAT: u32 = 23;
pub const SADB_X_SPDENABLE: u32 = 24;
pub const SADB_X_SPDDISABLE: u32 = 25;
pub const SADB_MIGRATE: u32 = 26;
pub const SADB_MAX: u32 = 26;
pub const SADB_EXT_RESERVED: u32 = 0;
pub const SADB_EXT_SA: u32 = 1;
pub const SADB_EXT_LIFETIME_CURRENT: u32 = 2;
pub const SADB_EXT_LIFETIME_HARD: u32 = 3;
pub const SADB_EXT_LIFETIME_SOFT: u32 = 4;
pub const SADB_EXT_ADDRESS_SRC: u32 = 5;
pub const SADB_EXT_ADDRESS_DST: u32 = 6;
pub const SADB_EXT_ADDRESS_PROXY: u32 = 7;
pub const SADB_EXT_KEY_AUTH: u32 = 8;
pub const SADB_EXT_KEY_ENCRYPT: u32 = 9;
pub const SADB_EXT_IDENTITY_SRC: u32 = 10;
pub const SADB_EXT_IDENTITY_DST: u32 = 11;
pub const SADB_EXT_SENSITIVITY: u32 = 12;
pub const SADB_EXT_PROPOSAL: u32 = 13;
pub const SADB_EXT_SUPPORTED_AUTH: u32 = 14;
pub const SADB_EXT_SUPPORTED_ENCRYPT: u32 = 15;
pub const SADB_EXT_SPIRANGE: u32 = 16;
pub const SADB_X_EXT_KMPRIVATE: u32 = 17;
pub const SADB_X_EXT_POLICY: u32 = 18;
pub const SADB_X_EXT_SA2: u32 = 19;
pub const SADB_EXT_SESSION_ID: u32 = 20;
pub const SADB_EXT_SASTAT: u32 = 21;
pub const SADB_X_EXT_IPSECIF: u32 = 22;
pub const SADB_X_EXT_ADDR_RANGE_SRC_START: u32 = 23;
pub const SADB_X_EXT_ADDR_RANGE_SRC_END: u32 = 24;
pub const SADB_X_EXT_ADDR_RANGE_DST_START: u32 = 25;
pub const SADB_X_EXT_ADDR_RANGE_DST_END: u32 = 26;
pub const SADB_EXT_MIGRATE_ADDRESS_SRC: u32 = 27;
pub const SADB_EXT_MIGRATE_ADDRESS_DST: u32 = 28;
pub const SADB_X_EXT_MIGRATE_IPSECIF: u32 = 29;
pub const SADB_EXT_MAX: u32 = 29;
pub const SADB_SATYPE_UNSPEC: u32 = 0;
pub const SADB_SATYPE_AH: u32 = 2;
pub const SADB_SATYPE_ESP: u32 = 3;
pub const SADB_SATYPE_RSVP: u32 = 5;
pub const SADB_SATYPE_OSPFV2: u32 = 6;
pub const SADB_SATYPE_RIPV2: u32 = 7;
pub const SADB_SATYPE_MIP: u32 = 8;
pub const SADB_X_SATYPE_IPCOMP: u32 = 9;
pub const SADB_X_SATYPE_POLICY: u32 = 10;
pub const SADB_SATYPE_MAX: u32 = 11;
pub const SADB_SASTATE_LARVAL: u32 = 0;
pub const SADB_SASTATE_MATURE: u32 = 1;
pub const SADB_SASTATE_DYING: u32 = 2;
pub const SADB_SASTATE_DEAD: u32 = 3;
pub const SADB_SASTATE_MAX: u32 = 3;
pub const SADB_SAFLAGS_PFS: u32 = 1;
pub const SADB_AALG_NONE: u32 = 0;
pub const SADB_AALG_MD5HMAC: u32 = 1;
pub const SADB_AALG_SHA1HMAC: u32 = 2;
pub const SADB_AALG_MAX: u32 = 8;
pub const SADB_X_AALG_SHA2_256: u32 = 6;
pub const SADB_X_AALG_SHA2_384: u32 = 7;
pub const SADB_X_AALG_SHA2_512: u32 = 8;
pub const SADB_X_AALG_MD5: u32 = 3;
pub const SADB_X_AALG_SHA: u32 = 4;
pub const SADB_X_AALG_NULL: u32 = 5;
pub const SADB_EALG_NONE: u32 = 0;
pub const SADB_EALG_DESCBC: u32 = 1;
pub const SADB_EALG_3DESCBC: u32 = 2;
pub const SADB_EALG_NULL: u32 = 3;
pub const SADB_EALG_MAX: u32 = 12;
pub const SADB_X_EALG_CAST128CBC: u32 = 5;
pub const SADB_X_EALG_BLOWFISHCBC: u32 = 4;
pub const SADB_X_EALG_RIJNDAELCBC: u32 = 12;
pub const SADB_X_EALG_AESCBC: u32 = 12;
pub const SADB_X_EALG_AES: u32 = 12;
pub const SADB_X_EALG_AES_GCM: u32 = 13;
pub const SADB_X_EALG_CHACHA20POLY1305: u32 = 14;
pub const SADB_X_CALG_NONE: u32 = 0;
pub const SADB_X_CALG_OUI: u32 = 1;
pub const SADB_X_CALG_DEFLATE: u32 = 2;
pub const SADB_X_CALG_LZS: u32 = 3;
pub const SADB_X_CALG_MAX: u32 = 4;
pub const SADB_IDENTTYPE_RESERVED: u32 = 0;
pub const SADB_IDENTTYPE_PREFIX: u32 = 1;
pub const SADB_IDENTTYPE_FQDN: u32 = 2;
pub const SADB_IDENTTYPE_USERFQDN: u32 = 3;
pub const SADB_X_IDENTTYPE_ADDR: u32 = 4;
pub const SADB_IDENTTYPE_MAX: u32 = 4;
pub const SADB_X_EXT_NONE: u32 = 0;
pub const SADB_X_EXT_OLD: u32 = 1;
pub const SADB_X_EXT_IV4B: u32 = 16;
pub const SADB_X_EXT_DERIV: u32 = 32;
pub const SADB_X_EXT_CYCSEQ: u32 = 64;
pub const SADB_X_EXT_PSEQ: u32 = 0;
pub const SADB_X_EXT_PRAND: u32 = 256;
pub const SADB_X_EXT_PZERO: u32 = 512;
pub const SADB_X_EXT_PMASK: u32 = 768;
pub const SADB_X_EXT_IIV: u32 = 1024;
pub const SADB_X_EXT_RAWCPI: u32 = 128;
pub const SADB_KEY_FLAGS_MAX: u32 = 32767;
pub const SADB_X_LIFETIME_ALLOCATIONS: u32 = 0;
pub const SADB_X_LIFETIME_BYTES: u32 = 1;
pub const SADB_X_LIFETIME_ADDTIME: u32 = 2;
pub const SADB_X_LIFETIME_USETIME: u32 = 3;
pub const PFKEY_SOFT_LIFETIME_RATE: u32 = 80;
pub const RTM_RTTUNIT: u32 = 1000000;
pub const RTF_UP: u32 = 1;
pub const RTF_GATEWAY: u32 = 2;
pub const RTF_HOST: u32 = 4;
pub const RTF_REJECT: u32 = 8;
pub const RTF_DYNAMIC: u32 = 16;
pub const RTF_MODIFIED: u32 = 32;
pub const RTF_DONE: u32 = 64;
pub const RTF_DELCLONE: u32 = 128;
pub const RTF_CLONING: u32 = 256;
pub const RTF_XRESOLVE: u32 = 512;
pub const RTF_LLINFO: u32 = 1024;
pub const RTF_LLDATA: u32 = 1024;
pub const RTF_STATIC: u32 = 2048;
pub const RTF_BLACKHOLE: u32 = 4096;
pub const RTF_NOIFREF: u32 = 8192;
pub const RTF_PROTO2: u32 = 16384;
pub const RTF_PROTO1: u32 = 32768;
pub const RTF_PRCLONING: u32 = 65536;
pub const RTF_WASCLONED: u32 = 131072;
pub const RTF_PROTO3: u32 = 262144;
pub const RTF_PINNED: u32 = 1048576;
pub const RTF_LOCAL: u32 = 2097152;
pub const RTF_BROADCAST: u32 = 4194304;
pub const RTF_MULTICAST: u32 = 8388608;
pub const RTF_IFSCOPE: u32 = 16777216;
pub const RTF_CONDEMNED: u32 = 33554432;
pub const RTF_IFREF: u32 = 67108864;
pub const RTF_PROXY: u32 = 134217728;
pub const RTF_ROUTER: u32 = 268435456;
pub const RTF_DEAD: u32 = 536870912;
pub const RTF_GLOBAL: u32 = 1073741824;
pub const RTPRF_OURS: u32 = 262144;
pub const RTF_BITS : & [u8 ; 223usize] = b"\x10\x01UP\x02GATEWAY\x03HOST\x04REJECT\x05DYNAMIC\x06MODIFIED\x07DONE\x08DELCLONE\tCLONING\nXRESOLVE\x0BLLINFO\x0CSTATIC\rBLACKHOLE\x0ENOIFREF\x0FPROTO2\x10PROTO1\x11PRCLONING\x12WASCLONED\x13PROTO3\x15PINNED\x16LOCAL\x17BROADCAST\x18MULTICAST\x19IFSCOPE\x1ACONDEMNED\x1BIFREF\x1CPROXY\x1DROUTER\x1FGLOBAL\0" ;
pub const RTM_VERSION: u32 = 5;
pub const RTM_ADD: u32 = 1;
pub const RTM_DELETE: u32 = 2;
pub const RTM_CHANGE: u32 = 3;
pub const RTM_GET: u32 = 4;
pub const RTM_LOSING: u32 = 5;
pub const RTM_REDIRECT: u32 = 6;
pub const RTM_MISS: u32 = 7;
pub const RTM_LOCK: u32 = 8;
pub const RTM_OLDADD: u32 = 9;
pub const RTM_OLDDEL: u32 = 10;
pub const RTM_RESOLVE: u32 = 11;
pub const RTM_NEWADDR: u32 = 12;
pub const RTM_DELADDR: u32 = 13;
pub const RTM_IFINFO: u32 = 14;
pub const RTM_NEWMADDR: u32 = 15;
pub const RTM_DELMADDR: u32 = 16;
pub const RTM_IFINFO2: u32 = 18;
pub const RTM_NEWMADDR2: u32 = 19;
pub const RTM_GET2: u32 = 20;
pub const RTV_MTU: u32 = 1;
pub const RTV_HOPCOUNT: u32 = 2;
pub const RTV_EXPIRE: u32 = 4;
pub const RTV_RPIPE: u32 = 8;
pub const RTV_SPIPE: u32 = 16;
pub const RTV_SSTHRESH: u32 = 32;
pub const RTV_RTT: u32 = 64;
pub const RTV_RTTVAR: u32 = 128;
pub const RTA_DST: u32 = 1;
pub const RTA_GATEWAY: u32 = 2;
pub const RTA_NETMASK: u32 = 4;
pub const RTA_GENMASK: u32 = 8;
pub const RTA_IFP: u32 = 16;
pub const RTA_IFA: u32 = 32;
pub const RTA_AUTHOR: u32 = 64;
pub const RTA_BRD: u32 = 128;
pub const RTAX_DST: u32 = 0;
pub const RTAX_GATEWAY: u32 = 1;
pub const RTAX_NETMASK: u32 = 2;
pub const RTAX_GENMASK: u32 = 3;
pub const RTAX_IFP: u32 = 4;
pub const RTAX_IFA: u32 = 5;
pub const RTAX_AUTHOR: u32 = 6;
pub const RTAX_BRD: u32 = 7;
pub const RTAX_MAX: u32 = 8;
pub const IPVERSION: u32 = 4;
pub const IP_RF: u32 = 32768;
pub const IP_DF: u32 = 16384;
pub const IP_MF: u32 = 8192;
pub const IP_OFFMASK: u32 = 8191;
pub const IP_MAXPACKET: u32 = 65535;
pub const IPTOS_LOWDELAY: u32 = 16;
pub const IPTOS_THROUGHPUT: u32 = 8;
pub const IPTOS_RELIABILITY: u32 = 4;
pub const IPTOS_MINCOST: u32 = 2;
pub const IPTOS_CE: u32 = 1;
pub const IPTOS_ECT: u32 = 2;
pub const IPTOS_DSCP_SHIFT: u32 = 2;
pub const IPTOS_ECN_NOTECT: u32 = 0;
pub const IPTOS_ECN_ECT1: u32 = 1;
pub const IPTOS_ECN_ECT0: u32 = 2;
pub const IPTOS_ECN_CE: u32 = 3;
pub const IPTOS_ECN_MASK: u32 = 3;
pub const IPTOS_PREC_NETCONTROL: u32 = 224;
pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
pub const IPTOS_PREC_FLASH: u32 = 96;
pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
pub const IPTOS_PREC_PRIORITY: u32 = 32;
pub const IPTOS_PREC_ROUTINE: u32 = 0;
pub const IPOPT_CONTROL: u32 = 0;
pub const IPOPT_RESERVED1: u32 = 32;
pub const IPOPT_DEBMEAS: u32 = 64;
pub const IPOPT_RESERVED2: u32 = 96;
pub const IPOPT_EOL: u32 = 0;
pub const IPOPT_NOP: u32 = 1;
pub const IPOPT_RR: u32 = 7;
pub const IPOPT_TS: u32 = 68;
pub const IPOPT_SECURITY: u32 = 130;
pub const IPOPT_LSRR: u32 = 131;
pub const IPOPT_SATID: u32 = 136;
pub const IPOPT_SSRR: u32 = 137;
pub const IPOPT_RA: u32 = 148;
pub const IPOPT_OPTVAL: u32 = 0;
pub const IPOPT_OLEN: u32 = 1;
pub const IPOPT_OFFSET: u32 = 2;
pub const IPOPT_MINOFF: u32 = 4;
pub const IPOPT_TS_TSONLY: u32 = 0;
pub const IPOPT_TS_TSANDADDR: u32 = 1;
pub const IPOPT_TS_PRESPEC: u32 = 3;
pub const IPOPT_SECUR_UNCLASS: u32 = 0;
pub const IPOPT_SECUR_CONFID: u32 = 61749;
pub const IPOPT_SECUR_EFTO: u32 = 30874;
pub const IPOPT_SECUR_MMMM: u32 = 48205;
pub const IPOPT_SECUR_RESTR: u32 = 44819;
pub const IPOPT_SECUR_SECRET: u32 = 55176;
pub const IPOPT_SECUR_TOPSECRET: u32 = 27589;
pub const MAXTTL: u32 = 255;
pub const IPDEFTTL: u32 = 64;
pub const IPFRAGTTL: u32 = 30;
pub const IPTTLDEC: u32 = 1;
pub const IP_MSS: u32 = 576;
pub const UDP_NOCKSUM: u32 = 1;
pub const BOOTREQUEST: u32 = 1;
pub const BOOTREPLY: u32 = 2;
pub const IPPORT_BOOTPS: u32 = 67;
pub const IPPORT_BOOTPC: u32 = 68;
pub const VM_STANFORD: &[u8; 5usize] = b"STAN\0";
pub const VF_PCBOOT: u32 = 1;
pub const VF_HELP: u32 = 2;
pub const NVMAXTEXT: u32 = 55;
pub const VM_NEXT: &[u8; 5usize] = b"NeXT\0";
pub const BPOP_OK: u32 = 0;
pub const BPOP_QUERY: u32 = 1;
pub const BPOP_QUERY_NE: u32 = 2;
pub const BPOP_ERROR: u32 = 3;
pub const BOOTP_MIN_BACKOFF: u32 = 2047;
pub const BOOTP_MAX_BACKOFF: u32 = 65535;
pub const BOOTP_RETRY: u32 = 6;
pub const ICMPV6_PLD_MAXLEN: u32 = 1232;
pub const ICMP6_DST_UNREACH: u32 = 1;
pub const ICMP6_PACKET_TOO_BIG: u32 = 2;
pub const ICMP6_TIME_EXCEEDED: u32 = 3;
pub const ICMP6_PARAM_PROB: u32 = 4;
pub const ICMP6_ECHO_REQUEST: u32 = 128;
pub const ICMP6_ECHO_REPLY: u32 = 129;
pub const MLD_LISTENER_QUERY: u32 = 130;
pub const MLD_LISTENER_REPORT: u32 = 131;
pub const MLD_LISTENER_DONE: u32 = 132;
pub const MLD_LISTENER_REDUCTION: u32 = 132;
pub const ICMP6_MEMBERSHIP_QUERY: u32 = 130;
pub const ICMP6_MEMBERSHIP_REPORT: u32 = 131;
pub const ICMP6_MEMBERSHIP_REDUCTION: u32 = 132;
pub const MLD6_LISTENER_QUERY: u32 = 130;
pub const MLD6_LISTENER_REPORT: u32 = 131;
pub const MLD6_LISTENER_DONE: u32 = 132;
pub const ND_ROUTER_SOLICIT: u32 = 133;
pub const ND_ROUTER_ADVERT: u32 = 134;
pub const ND_NEIGHBOR_SOLICIT: u32 = 135;
pub const ND_NEIGHBOR_ADVERT: u32 = 136;
pub const ND_REDIRECT: u32 = 137;
pub const ICMP6_ROUTER_RENUMBERING: u32 = 138;
pub const ICMP6_WRUREQUEST: u32 = 139;
pub const ICMP6_WRUREPLY: u32 = 140;
pub const ICMP6_FQDN_QUERY: u32 = 139;
pub const ICMP6_FQDN_REPLY: u32 = 140;
pub const ICMP6_NI_QUERY: u32 = 139;
pub const ICMP6_NI_REPLY: u32 = 140;
pub const MLDV2_LISTENER_REPORT: u32 = 143;
pub const MLD_MTRACE_RESP: u32 = 200;
pub const MLD_MTRACE: u32 = 201;
pub const MLD6_MTRACE_RESP: u32 = 200;
pub const MLD6_MTRACE: u32 = 201;
pub const ICMP6_MAXTYPE: u32 = 201;
pub const ICMP6_DST_UNREACH_NOROUTE: u32 = 0;
pub const ICMP6_DST_UNREACH_ADMIN: u32 = 1;
pub const ICMP6_DST_UNREACH_NOTNEIGHBOR: u32 = 2;
pub const ICMP6_DST_UNREACH_BEYONDSCOPE: u32 = 2;
pub const ICMP6_DST_UNREACH_ADDR: u32 = 3;
pub const ICMP6_DST_UNREACH_NOPORT: u32 = 4;
pub const ICMP6_TIME_EXCEED_TRANSIT: u32 = 0;
pub const ICMP6_TIME_EXCEED_REASSEMBLY: u32 = 1;
pub const ICMP6_PARAMPROB_HEADER: u32 = 0;
pub const ICMP6_PARAMPROB_NEXTHEADER: u32 = 1;
pub const ICMP6_PARAMPROB_OPTION: u32 = 2;
pub const ICMP6_PARAMPROB_FIRSTFRAG_INCOMP_HDR: u32 = 3;
pub const ICMP6_INFOMSG_MASK: u32 = 128;
pub const ICMP6_NI_SUBJ_IPV6: u32 = 0;
pub const ICMP6_NI_SUBJ_FQDN: u32 = 1;
pub const ICMP6_NI_SUBJ_IPV4: u32 = 2;
pub const ICMP6_NI_SUCCESS: u32 = 0;
pub const ICMP6_NI_REFUSED: u32 = 1;
pub const ICMP6_NI_UNKNOWN: u32 = 2;
pub const ICMP6_ROUTER_RENUMBERING_COMMAND: u32 = 0;
pub const ICMP6_ROUTER_RENUMBERING_RESULT: u32 = 1;
pub const ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET: u32 = 255;
pub const ND_REDIRECT_ONLINK: u32 = 0;
pub const ND_REDIRECT_ROUTER: u32 = 1;
pub const ND_RA_FLAG_MANAGED: u32 = 128;
pub const ND_RA_FLAG_OTHER: u32 = 64;
pub const ND_RA_FLAG_HA: u32 = 32;
pub const ND_RA_FLAG_RTPREF_MASK: u32 = 24;
pub const ND_RA_FLAG_RTPREF_HIGH: u32 = 8;
pub const ND_RA_FLAG_RTPREF_MEDIUM: u32 = 0;
pub const ND_RA_FLAG_RTPREF_LOW: u32 = 24;
pub const ND_RA_FLAG_RTPREF_RSV: u32 = 16;
pub const ND_NA_FLAG_ROUTER: u32 = 128;
pub const ND_NA_FLAG_SOLICITED: u32 = 64;
pub const ND_NA_FLAG_OVERRIDE: u32 = 32;
pub const ND_OPT_SOURCE_LINKADDR: u32 = 1;
pub const ND_OPT_TARGET_LINKADDR: u32 = 2;
pub const ND_OPT_PREFIX_INFORMATION: u32 = 3;
pub const ND_OPT_REDIRECTED_HEADER: u32 = 4;
pub const ND_OPT_MTU: u32 = 5;
pub const ND_OPT_NONCE: u32 = 14;
pub const ND_OPT_ROUTE_INFO: u32 = 24;
pub const ND_OPT_RDNSS: u32 = 25;
pub const ND_OPT_DNSSL: u32 = 31;
pub const ND_OPT_CAPTIVE_PORTAL: u32 = 37;
pub const ND_OPT_PREF64: u32 = 38;
pub const ND_OPT_PI_FLAG_ONLINK: u32 = 128;
pub const ND_OPT_PI_FLAG_AUTO: u32 = 64;
pub const ND_OPT_NONCE_LEN: u32 = 6;
pub const ND_OPT_PREF64_SCALED_LIFETIME_MASK: u32 = 65528;
pub const ND_OPT_PREF64_PLC_MASK: u32 = 7;
pub const ND_OPT_PREF64_LIFETIME_MAX: u32 = 65528;
pub const ND_OPT_PREF64_PLC_32: u32 = 5;
pub const ND_OPT_PREF64_PLC_40: u32 = 4;
pub const ND_OPT_PREF64_PLC_48: u32 = 3;
pub const ND_OPT_PREF64_PLC_56: u32 = 2;
pub const ND_OPT_PREF64_PLC_64: u32 = 1;
pub const ND_OPT_PREF64_PLC_96: u32 = 0;
pub const NI_QTYPE_NOOP: u32 = 0;
pub const NI_QTYPE_SUPTYPES: u32 = 1;
pub const NI_QTYPE_FQDN: u32 = 2;
pub const NI_QTYPE_DNSNAME: u32 = 2;
pub const NI_QTYPE_NODEADDR: u32 = 3;
pub const NI_QTYPE_IPV4ADDR: u32 = 4;
pub const NI_SUPTYPE_FLAG_COMPRESS: u32 = 256;
pub const NI_FQDN_FLAG_VALIDTTL: u32 = 256;
pub const NI_NODEADDR_FLAG_TRUNCATE: u32 = 256;
pub const NI_NODEADDR_FLAG_ALL: u32 = 512;
pub const NI_NODEADDR_FLAG_COMPAT: u32 = 1024;
pub const NI_NODEADDR_FLAG_LINKLOCAL: u32 = 2048;
pub const NI_NODEADDR_FLAG_SITELOCAL: u32 = 4096;
pub const NI_NODEADDR_FLAG_GLOBAL: u32 = 8192;
pub const NI_NODEADDR_FLAG_ANYCAST: u32 = 16384;
pub const ICMP6_RR_FLAGS_TEST: u32 = 128;
pub const ICMP6_RR_FLAGS_REQRESULT: u32 = 64;
pub const ICMP6_RR_FLAGS_FORCEAPPLY: u32 = 32;
pub const ICMP6_RR_FLAGS_SPECSITE: u32 = 16;
pub const ICMP6_RR_FLAGS_PREVDONE: u32 = 8;
pub const RPM_PCO_ADD: u32 = 1;
pub const RPM_PCO_CHANGE: u32 = 2;
pub const RPM_PCO_SETGLOBAL: u32 = 3;
pub const RPM_PCO_MAX: u32 = 4;
pub const ICMP6_RR_PCOUSE_RAFLAGS_ONLINK: u32 = 128;
pub const ICMP6_RR_PCOUSE_RAFLAGS_AUTO: u32 = 64;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME: u32 = 128;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME: u32 = 64;
pub const ICMP6_RR_RESULT_FLAGS_OOB: u32 = 512;
pub const ICMP6_RR_RESULT_FLAGS_FORBIDDEN: u32 = 256;
pub const ICMPV6CTL_STATS: u32 = 1;
pub const ICMPV6CTL_REDIRACCEPT: u32 = 2;
pub const ICMPV6CTL_REDIRTIMEOUT: u32 = 3;
pub const ICMPV6CTL_ND6_PRUNE: u32 = 6;
pub const ICMPV6CTL_ND6_DELAY: u32 = 8;
pub const ICMPV6CTL_ND6_UMAXTRIES: u32 = 9;
pub const ICMPV6CTL_ND6_MMAXTRIES: u32 = 10;
pub const ICMPV6CTL_ND6_USELOOPBACK: u32 = 11;
pub const ICMPV6CTL_NODEINFO: u32 = 13;
pub const ICMPV6CTL_ERRPPSLIMIT: u32 = 14;
pub const ICMPV6CTL_ND6_MAXNUDHINT: u32 = 15;
pub const ICMPV6CTL_MTUDISC_HIWAT: u32 = 16;
pub const ICMPV6CTL_MTUDISC_LOWAT: u32 = 17;
pub const ICMPV6CTL_ND6_DEBUG: u32 = 18;
pub const ICMPV6CTL_ND6_DRLIST: u32 = 19;
pub const ICMPV6CTL_ND6_PRLIST: u32 = 20;
pub const ICMPV6CTL_MLD_MAXSRCFILTER: u32 = 21;
pub const ICMPV6CTL_MLD_SOMAXSRC: u32 = 22;
pub const ICMPV6CTL_MLD_VERSION: u32 = 23;
pub const ICMPV6CTL_ND6_MAXQLEN: u32 = 24;
pub const ICMPV6CTL_ND6_ACCEPT_6TO4: u32 = 25;
pub const ICMPV6CTL_ND6_OPTIMISTIC_DAD: u32 = 26;
pub const ICMPV6CTL_ERRPPSLIMIT_RANDOM_INCR: u32 = 27;
pub const ICMPV6CTL_MAXID: u32 = 28;
pub const ICMP_MINLEN: u32 = 8;
pub const ICMP_MASKLEN: u32 = 12;
pub const ICMP_ECHOREPLY: u32 = 0;
pub const ICMP_UNREACH: u32 = 3;
pub const ICMP_UNREACH_NET: u32 = 0;
pub const ICMP_UNREACH_HOST: u32 = 1;
pub const ICMP_UNREACH_PROTOCOL: u32 = 2;
pub const ICMP_UNREACH_PORT: u32 = 3;
pub const ICMP_UNREACH_NEEDFRAG: u32 = 4;
pub const ICMP_UNREACH_SRCFAIL: u32 = 5;
pub const ICMP_UNREACH_NET_UNKNOWN: u32 = 6;
pub const ICMP_UNREACH_HOST_UNKNOWN: u32 = 7;
pub const ICMP_UNREACH_ISOLATED: u32 = 8;
pub const ICMP_UNREACH_NET_PROHIB: u32 = 9;
pub const ICMP_UNREACH_HOST_PROHIB: u32 = 10;
pub const ICMP_UNREACH_TOSNET: u32 = 11;
pub const ICMP_UNREACH_TOSHOST: u32 = 12;
pub const ICMP_UNREACH_FILTER_PROHIB: u32 = 13;
pub const ICMP_UNREACH_HOST_PRECEDENCE: u32 = 14;
pub const ICMP_UNREACH_PRECEDENCE_CUTOFF: u32 = 15;
pub const ICMP_SOURCEQUENCH: u32 = 4;
pub const ICMP_REDIRECT: u32 = 5;
pub const ICMP_REDIRECT_NET: u32 = 0;
pub const ICMP_REDIRECT_HOST: u32 = 1;
pub const ICMP_REDIRECT_TOSNET: u32 = 2;
pub const ICMP_REDIRECT_TOSHOST: u32 = 3;
pub const ICMP_ALTHOSTADDR: u32 = 6;
pub const ICMP_ECHO: u32 = 8;
pub const ICMP_ROUTERADVERT: u32 = 9;
pub const ICMP_ROUTERADVERT_NORMAL: u32 = 0;
pub const ICMP_ROUTERADVERT_NOROUTE_COMMON: u32 = 16;
pub const ICMP_ROUTERSOLICIT: u32 = 10;
pub const ICMP_TIMXCEED: u32 = 11;
pub const ICMP_TIMXCEED_INTRANS: u32 = 0;
pub const ICMP_TIMXCEED_REASS: u32 = 1;
pub const ICMP_PARAMPROB: u32 = 12;
pub const ICMP_PARAMPROB_ERRATPTR: u32 = 0;
pub const ICMP_PARAMPROB_OPTABSENT: u32 = 1;
pub const ICMP_PARAMPROB_LENGTH: u32 = 2;
pub const ICMP_TSTAMP: u32 = 13;
pub const ICMP_TSTAMPREPLY: u32 = 14;
pub const ICMP_IREQ: u32 = 15;
pub const ICMP_IREQREPLY: u32 = 16;
pub const ICMP_MASKREQ: u32 = 17;
pub const ICMP_MASKREPLY: u32 = 18;
pub const ICMP_TRACEROUTE: u32 = 30;
pub const ICMP_DATACONVERR: u32 = 31;
pub const ICMP_MOBILE_REDIRECT: u32 = 32;
pub const ICMP_IPV6_WHEREAREYOU: u32 = 33;
pub const ICMP_IPV6_IAMHERE: u32 = 34;
pub const ICMP_MOBILE_REGREQUEST: u32 = 35;
pub const ICMP_MOBILE_REGREPLY: u32 = 36;
pub const ICMP_SKIP: u32 = 39;
pub const ICMP_PHOTURIS: u32 = 40;
pub const ICMP_PHOTURIS_UNKNOWN_INDEX: u32 = 1;
pub const ICMP_PHOTURIS_AUTH_FAILED: u32 = 2;
pub const ICMP_PHOTURIS_DECRYPT_FAILED: u32 = 3;
pub const ICMP_MAXTYPE: u32 = 40;
pub const ICMPCTL_MASKREPL: u32 = 1;
pub const ICMPCTL_STATS: u32 = 2;
pub const ICMPCTL_ICMPLIM: u32 = 3;
pub const ICMPCTL_TIMESTAMP: u32 = 4;
pub const ICMPCTL_ICMPLIM_INCR: u32 = 5;
pub const ICMPCTL_MAXID: u32 = 6;
pub const SIN_PROXY: u32 = 1;
pub const SIN_ROUTER: u32 = 2;
pub const RTF_USETRAILERS: u32 = 32768;
pub const RTF_ANNOUNCE: u32 = 16384;
pub const IGMP_MINLEN: u32 = 8;
pub const IGMP_V3_QUERY_MINLEN: u32 = 12;
pub const IGMP_V3_QUERY_MAX_SRCS: u32 = 366;
pub const IGMP_GRPREC_HDRLEN: u32 = 8;
pub const IGMP_V3_REPORT_MINLEN: u32 = 8;
pub const IGMP_V3_REPORT_MAXRECS: u32 = 65535;
pub const IGMP_HOST_MEMBERSHIP_QUERY: u32 = 17;
pub const IGMP_v1_HOST_MEMBERSHIP_REPORT: u32 = 18;
pub const IGMP_DVMRP: u32 = 19;
pub const IGMP_PIM: u32 = 20;
pub const IGMP_v2_HOST_MEMBERSHIP_REPORT: u32 = 22;
pub const IGMP_HOST_LEAVE_MESSAGE: u32 = 23;
pub const IGMP_MTRACE_REPLY: u32 = 30;
pub const IGMP_MTRACE_QUERY: u32 = 31;
pub const IGMP_v3_HOST_MEMBERSHIP_REPORT: u32 = 34;
pub const IGMP_DO_NOTHING: u32 = 0;
pub const IGMP_MODE_IS_INCLUDE: u32 = 1;
pub const IGMP_MODE_IS_EXCLUDE: u32 = 2;
pub const IGMP_CHANGE_TO_INCLUDE_MODE: u32 = 3;
pub const IGMP_CHANGE_TO_EXCLUDE_MODE: u32 = 4;
pub const IGMP_ALLOW_NEW_SOURCES: u32 = 5;
pub const IGMP_BLOCK_OLD_SOURCES: u32 = 6;
pub const IGMP_V3_GENERAL_QUERY: u32 = 1;
pub const IGMP_V3_GROUP_QUERY: u32 = 2;
pub const IGMP_V3_GROUP_SOURCE_QUERY: u32 = 3;
pub const IGMP_V1V2_MAX_RI: u32 = 10;
pub const IGMP_MAX_HOST_REPORT_DELAY: u32 = 10;
pub const IGMP_TIMER_SCALE: u32 = 10;
pub const IGPS_VERSION_3: u32 = 3;
pub const IGPS_VERSION3_LEN: u32 = 168;
pub const IGMPCTL_STATS: u32 = 1;
pub const IGMPCTL_MAXID: u32 = 2;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 1;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_APP_APPROVED: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_TRACKER: u32 = 2;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_DOMAIN_SHORT: u32 = 4;
pub const SO_TRACKER_TRANSPARENCY_VERSION: u32 = 3;
pub const INP_IPV4: u32 = 1;
pub const INP_IPV6: u32 = 2;
pub const INP_V4MAPPEDV6: u32 = 4;
pub const INP_ANONPORT: u32 = 64;
pub const IN6P_IPV6_V6ONLY: u32 = 32768;
pub const IN6P_BINDV6ONLY: u32 = 16777216;
pub const SYSPROTO_EVENT: u32 = 1;
pub const SYSPROTO_CONTROL: u32 = 2;
pub const AF_SYS_CONTROL: u32 = 2;
pub const KEV_SNDSPACE: u32 = 4096;
pub const KEV_RECVSPACE: u32 = 32768;
pub const KEV_ANY_VENDOR: u32 = 0;
pub const KEV_ANY_CLASS: u32 = 0;
pub const KEV_ANY_SUBCLASS: u32 = 0;
pub const KEV_VENDOR_APPLE: u32 = 1;
pub const KEV_NETWORK_CLASS: u32 = 1;
pub const KEV_IOKIT_CLASS: u32 = 2;
pub const KEV_SYSTEM_CLASS: u32 = 3;
pub const KEV_APPLESHARE_CLASS: u32 = 4;
pub const KEV_FIREWALL_CLASS: u32 = 5;
pub const KEV_IEEE80211_CLASS: u32 = 6;
pub const KEV_NKE_CLASS: u32 = 7;
pub const KEV_NKE_ALF_SUBCLASS: u32 = 1;
pub const KEV_NKE_ALF_STATE_CHANGED: u32 = 1;
pub const XNU_KERN_EVENT_DATA_SIZE: u32 = 1;
pub const KEV_VENDOR_CODE_MAX_STR_LEN: u32 = 200;
pub const SCOPE6_ID_MAX: u32 = 16;
pub const IN6_PREFIX_ND: u32 = 1;
pub const IN6_PREFIX_RR: u32 = 2;
pub const PR_ORIG_RA: u32 = 0;
pub const PR_ORIG_RR: u32 = 1;
pub const PR_ORIG_STATIC: u32 = 2;
pub const PR_ORIG_KERNEL: u32 = 3;
pub const IN6_IFF_ANYCAST: u32 = 1;
pub const IN6_IFF_TENTATIVE: u32 = 2;
pub const IN6_IFF_DUPLICATED: u32 = 4;
pub const IN6_IFF_DETACHED: u32 = 8;
pub const IN6_IFF_DEPRECATED: u32 = 16;
pub const IN6_IFF_NODAD: u32 = 32;
pub const IN6_IFF_AUTOCONF: u32 = 64;
pub const IN6_IFF_TEMPORARY: u32 = 128;
pub const IN6_IFF_DYNAMIC: u32 = 256;
pub const IN6_IFF_OPTIMISTIC: u32 = 512;
pub const IN6_IFF_SECURED: u32 = 1024;
pub const IN6_IFF_CLAT46: u32 = 4096;
pub const IN6_IFF_NOPFX: u32 = 32768;
pub const IN6_IFF_DADPROGRESS: u32 = 514;
pub const IN6_IFF_NOTREADY: u32 = 6;
pub const IN6_IFF_NOTMANUAL: u32 = 320;
pub const IPV6_VERSION: u32 = 96;
pub const IPV6_VERSION_MASK: u32 = 240;
pub const IPV6_FLOWINFO_MASK: u32 = 4294967055;
pub const IPV6_FLOWLABEL_MASK: u32 = 4294905600;
pub const IPV6_FLOW_ECN_MASK: u32 = 12288;
pub const IP6TOS_CE: u32 = 1;
pub const IP6TOS_ECT: u32 = 2;
pub const IP6FLOW_DSCP_MASK: u32 = 264241152;
pub const IP6FLOW_DSCP_SHIFT: u32 = 22;
pub const IP6OPT_PAD1: u32 = 0;
pub const IP6OPT_PADN: u32 = 1;
pub const IP6OPT_JUMBO: u32 = 194;
pub const IP6OPT_NSAP_ADDR: u32 = 195;
pub const IP6OPT_TUNNEL_LIMIT: u32 = 4;
pub const IP6OPT_RTALERT: u32 = 5;
pub const IP6OPT_ROUTER_ALERT: u32 = 5;
pub const IP6OPT_RTALERT_LEN: u32 = 4;
pub const IP6OPT_RTALERT_MLD: u32 = 0;
pub const IP6OPT_RTALERT_RSVP: u32 = 1;
pub const IP6OPT_RTALERT_ACTNET: u32 = 2;
pub const IP6OPT_MINLEN: u32 = 2;
pub const IP6OPT_EID: u32 = 138;
pub const IP6OPT_TYPE_SKIP: u32 = 0;
pub const IP6OPT_TYPE_DISCARD: u32 = 64;
pub const IP6OPT_TYPE_FORCEICMP: u32 = 128;
pub const IP6OPT_TYPE_ICMP: u32 = 192;
pub const IP6OPT_MUTABLE: u32 = 32;
pub const IP6OPT_JUMBO_LEN: u32 = 6;
pub const IP6_ALERT_MLD: u32 = 0;
pub const IP6_ALERT_RSVP: u32 = 256;
pub const IP6_ALERT_AN: u32 = 512;
pub const IP6F_OFF_MASK: u32 = 63743;
pub const IP6F_RESERVED_MASK: u32 = 1536;
pub const IP6F_MORE_FRAG: u32 = 256;
pub const IPV6_MAXHLIM: u32 = 255;
pub const IPV6_DEFHLIM: u32 = 64;
pub const IPV6_FRAGTTL: u32 = 60;
pub const IPV6_HLIMDEC: u32 = 1;
pub const IPV6_MMTU: u32 = 1280;
pub const IPV6_MAXPACKET: u32 = 65535;
pub const IPV6_MAXOPTHDR: u32 = 2048;
pub const MAX_IPOPTLEN: u32 = 40;
pub const TCP_NSTATES: u32 = 11;
pub const TCPS_CLOSED: u32 = 0;
pub const TCPS_LISTEN: u32 = 1;
pub const TCPS_SYN_SENT: u32 = 2;
pub const TCPS_SYN_RECEIVED: u32 = 3;
pub const TCPS_ESTABLISHED: u32 = 4;
pub const TCPS_CLOSE_WAIT: u32 = 5;
pub const TCPS_FIN_WAIT_1: u32 = 6;
pub const TCPS_CLOSING: u32 = 7;
pub const TCPS_LAST_ACK: u32 = 8;
pub const TCPS_FIN_WAIT_2: u32 = 9;
pub const TCPS_TIME_WAIT: u32 = 10;
pub const TCP6_NSTATES: u32 = 11;
pub const TCP6S_CLOSED: u32 = 0;
pub const TCP6S_LISTEN: u32 = 1;
pub const TCP6S_SYN_SENT: u32 = 2;
pub const TCP6S_SYN_RECEIVED: u32 = 3;
pub const TCP6S_ESTABLISHED: u32 = 4;
pub const TCP6S_CLOSE_WAIT: u32 = 5;
pub const TCP6S_FIN_WAIT_1: u32 = 6;
pub const TCP6S_CLOSING: u32 = 7;
pub const TCP6S_LAST_ACK: u32 = 8;
pub const TCP6S_FIN_WAIT_2: u32 = 9;
pub const TCP6S_TIME_WAIT: u32 = 10;
pub const TCPT_NTIMERS_EXT: u32 = 4;
pub const TCPT_REXMT: u32 = 0;
pub const TCPT_PERSIST: u32 = 1;
pub const TCPT_KEEP: u32 = 2;
pub const TCPT_2MSL: u32 = 3;
pub const TCPT_DELACK: u32 = 4;
pub const TCPT_MAX: u32 = 4;
pub const TCPT_NONE: u32 = 5;
pub const TCPT_NTIMERS: u32 = 5;
pub const TF_ACKNOW: u32 = 1;
pub const TF_DELACK: u32 = 2;
pub const TF_NODELAY: u32 = 4;
pub const TF_NOOPT: u32 = 8;
pub const TF_SENTFIN: u32 = 16;
pub const TF_REQ_SCALE: u32 = 32;
pub const TF_RCVD_SCALE: u32 = 64;
pub const TF_REQ_TSTMP: u32 = 128;
pub const TF_RCVD_TSTMP: u32 = 256;
pub const TF_SACK_PERMIT: u32 = 512;
pub const TF_NEEDSYN: u32 = 1024;
pub const TF_NEEDFIN: u32 = 2048;
pub const TF_NOPUSH: u32 = 4096;
pub const TF_REQ_CC: u32 = 8192;
pub const TF_RCVD_CC: u32 = 16384;
pub const TF_SENDCCNEW: u32 = 32768;
pub const TF_MORETOCOME: u32 = 65536;
pub const TF_LQ_OVERFLOW: u32 = 131072;
pub const TF_RXWIN0SENT: u32 = 262144;
pub const TF_SLOWLINK: u32 = 524288;
pub const TCPOOB_HAVEDATA: u32 = 1;
pub const TCPOOB_HADDATA: u32 = 2;
pub const TCPCTL_DO_RFC1323: u32 = 1;
pub const TCPCTL_DO_RFC1644: u32 = 2;
pub const TCPCTL_MSSDFLT: u32 = 3;
pub const TCPCTL_STATS: u32 = 4;
pub const TCPCTL_RTTDFLT: u32 = 5;
pub const TCPCTL_KEEPIDLE: u32 = 6;
pub const TCPCTL_KEEPINTVL: u32 = 7;
pub const TCPCTL_SENDSPACE: u32 = 8;
pub const TCPCTL_RECVSPACE: u32 = 9;
pub const TCPCTL_KEEPINIT: u32 = 10;
pub const TCPCTL_PCBLIST: u32 = 11;
pub const TCPCTL_DELACKTIME: u32 = 12;
pub const TCPCTL_V6MSSDFLT: u32 = 13;
pub const TCPCTL_MAXID: u32 = 14;
pub const AUDIT_RECORD_MAGIC: u32 = 2190085915;
pub const MAX_AUDIT_RECORDS: u32 = 20;
pub const MAXAUDITDATA: u32 = 32767;
pub const MAX_AUDIT_RECORD_SIZE: u32 = 32767;
pub const MIN_AUDIT_FILE_SIZE: u32 = 524288;
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS: u32 = 4;
pub const AUDIT_TRIGGER_MIN: u32 = 1;
pub const AUDIT_TRIGGER_LOW_SPACE: u32 = 1;
pub const AUDIT_TRIGGER_ROTATE_KERNEL: u32 = 2;
pub const AUDIT_TRIGGER_READ_FILE: u32 = 3;
pub const AUDIT_TRIGGER_CLOSE_AND_DIE: u32 = 4;
pub const AUDIT_TRIGGER_NO_SPACE: u32 = 5;
pub const AUDIT_TRIGGER_ROTATE_USER: u32 = 6;
pub const AUDIT_TRIGGER_INITIALIZE: u32 = 7;
pub const AUDIT_TRIGGER_EXPIRE_TRAILS: u32 = 8;
pub const AUDIT_TRIGGER_MAX: u32 = 8;
pub const AUDITDEV_FILENAME: &[u8; 6usize] = b"audit\0";
pub const AUDIT_TRIGGER_FILE: &[u8; 11usize] = b"/dev/audit\0";
pub const AU_DEFAUDITSID: u32 = 0;
pub const AU_ASSIGN_ASID: i32 = -1;
pub const AUC_UNSET: u32 = 0;
pub const AUC_AUDITING: u32 = 1;
pub const AUC_NOAUDIT: u32 = 2;
pub const AUC_DISABLED: i32 = -1;
pub const A_OLDGETPOLICY: u32 = 2;
pub const A_OLDSETPOLICY: u32 = 3;
pub const A_GETKMASK: u32 = 4;
pub const A_SETKMASK: u32 = 5;
pub const A_OLDGETQCTRL: u32 = 6;
pub const A_OLDSETQCTRL: u32 = 7;
pub const A_GETCWD: u32 = 8;
pub const A_GETCAR: u32 = 9;
pub const A_GETSTAT: u32 = 12;
pub const A_SETSTAT: u32 = 13;
pub const A_SETUMASK: u32 = 14;
pub const A_SETSMASK: u32 = 15;
pub const A_OLDGETCOND: u32 = 20;
pub const A_OLDSETCOND: u32 = 21;
pub const A_GETCLASS: u32 = 22;
pub const A_SETCLASS: u32 = 23;
pub const A_GETPINFO: u32 = 24;
pub const A_SETPMASK: u32 = 25;
pub const A_SETFSIZE: u32 = 26;
pub const A_GETFSIZE: u32 = 27;
pub const A_GETPINFO_ADDR: u32 = 28;
pub const A_GETKAUDIT: u32 = 29;
pub const A_SETKAUDIT: u32 = 30;
pub const A_SENDTRIGGER: u32 = 31;
pub const A_GETSINFO_ADDR: u32 = 32;
pub const A_GETPOLICY: u32 = 33;
pub const A_SETPOLICY: u32 = 34;
pub const A_GETQCTRL: u32 = 35;
pub const A_SETQCTRL: u32 = 36;
pub const A_GETCOND: u32 = 37;
pub const A_SETCOND: u32 = 38;
pub const A_GETSFLAGS: u32 = 39;
pub const A_SETSFLAGS: u32 = 40;
pub const A_GETCTLMODE: u32 = 41;
pub const A_SETCTLMODE: u32 = 42;
pub const A_GETEXPAFTER: u32 = 43;
pub const A_SETEXPAFTER: u32 = 44;
pub const AUDIT_CNT: u32 = 1;
pub const AUDIT_AHLT: u32 = 2;
pub const AUDIT_ARGV: u32 = 4;
pub const AUDIT_ARGE: u32 = 8;
pub const AUDIT_SEQ: u32 = 16;
pub const AUDIT_WINDATA: u32 = 32;
pub const AUDIT_USER: u32 = 64;
pub const AUDIT_GROUP: u32 = 128;
pub const AUDIT_TRAIL: u32 = 256;
pub const AUDIT_PATH: u32 = 512;
pub const AUDIT_SCNT: u32 = 1024;
pub const AUDIT_PUBLIC: u32 = 2048;
pub const AUDIT_ZONENAME: u32 = 4096;
pub const AUDIT_PERZONE: u32 = 8192;
pub const AQ_HIWATER: u32 = 100;
pub const AQ_MAXHIGH: u32 = 10000;
pub const AQ_LOWATER: u32 = 10;
pub const AQ_BUFSZ: u32 = 32767;
pub const AQ_MAXBUFSZ: u32 = 1048576;
pub const AU_FS_MINFREE: u32 = 20;
pub const AU_IPv4: u32 = 4;
pub const AU_IPv6: u32 = 16;
pub const AU_CLASS_MASK_RESERVED: u32 = 268435456;
pub const CRF_NOMEMBERD: u32 = 1;
pub const CRF_MAC_ENFORCE: u32 = 2;
pub const XUCRED_VERSION: u32 = 0;
pub const CTL_MAXNAME: u32 = 12;
pub const CTLTYPE: u32 = 15;
pub const CTLTYPE_NODE: u32 = 1;
pub const CTLTYPE_INT: u32 = 2;
pub const CTLTYPE_STRING: u32 = 3;
pub const CTLTYPE_QUAD: u32 = 4;
pub const CTLTYPE_OPAQUE: u32 = 5;
pub const CTLTYPE_STRUCT: u32 = 5;
pub const CTLFLAG_RD: u32 = 2147483648;
pub const CTLFLAG_WR: u32 = 1073741824;
pub const CTLFLAG_RW: u32 = 3221225472;
pub const CTLFLAG_NOLOCK: u32 = 536870912;
pub const CTLFLAG_ANYBODY: u32 = 268435456;
pub const CTLFLAG_SECURE: u32 = 134217728;
pub const CTLFLAG_MASKED: u32 = 67108864;
pub const CTLFLAG_NOAUTO: u32 = 33554432;
pub const CTLFLAG_KERN: u32 = 16777216;
pub const CTLFLAG_LOCKED: u32 = 8388608;
pub const CTLFLAG_OID2: u32 = 4194304;
pub const CTLFLAG_EXPERIMENT: u32 = 1048576;
pub const OID_AUTO: i32 = -1;
pub const OID_AUTO_START: u32 = 100;
pub const CTL_UNSPEC: u32 = 0;
pub const CTL_KERN: u32 = 1;
pub const CTL_VM: u32 = 2;
pub const CTL_VFS: u32 = 3;
pub const CTL_NET: u32 = 4;
pub const CTL_DEBUG: u32 = 5;
pub const CTL_HW: u32 = 6;
pub const CTL_MACHDEP: u32 = 7;
pub const CTL_USER: u32 = 8;
pub const CTL_MAXID: u32 = 9;
pub const KERN_OSTYPE: u32 = 1;
pub const KERN_OSRELEASE: u32 = 2;
pub const KERN_OSREV: u32 = 3;
pub const KERN_VERSION: u32 = 4;
pub const KERN_MAXVNODES: u32 = 5;
pub const KERN_MAXPROC: u32 = 6;
pub const KERN_MAXFILES: u32 = 7;
pub const KERN_ARGMAX: u32 = 8;
pub const KERN_SECURELVL: u32 = 9;
pub const KERN_HOSTNAME: u32 = 10;
pub const KERN_HOSTID: u32 = 11;
pub const KERN_CLOCKRATE: u32 = 12;
pub const KERN_VNODE: u32 = 13;
pub const KERN_PROC: u32 = 14;
pub const KERN_FILE: u32 = 15;
pub const KERN_PROF: u32 = 16;
pub const KERN_POSIX1: u32 = 17;
pub const KERN_NGROUPS: u32 = 18;
pub const KERN_JOB_CONTROL: u32 = 19;
pub const KERN_SAVED_IDS: u32 = 20;
pub const KERN_BOOTTIME: u32 = 21;
pub const KERN_NISDOMAINNAME: u32 = 22;
pub const KERN_DOMAINNAME: u32 = 22;
pub const KERN_MAXPARTITIONS: u32 = 23;
pub const KERN_KDEBUG: u32 = 24;
pub const KERN_UPDATEINTERVAL: u32 = 25;
pub const KERN_OSRELDATE: u32 = 26;
pub const KERN_NTP_PLL: u32 = 27;
pub const KERN_BOOTFILE: u32 = 28;
pub const KERN_MAXFILESPERPROC: u32 = 29;
pub const KERN_MAXPROCPERUID: u32 = 30;
pub const KERN_DUMPDEV: u32 = 31;
pub const KERN_IPC: u32 = 32;
pub const KERN_DUMMY: u32 = 33;
pub const KERN_PS_STRINGS: u32 = 34;
pub const KERN_USRSTACK32: u32 = 35;
pub const KERN_LOGSIGEXIT: u32 = 36;
pub const KERN_SYMFILE: u32 = 37;
pub const KERN_PROCARGS: u32 = 38;
pub const KERN_NETBOOT: u32 = 40;
pub const KERN_SYSV: u32 = 42;
pub const KERN_AFFINITY: u32 = 43;
pub const KERN_TRANSLATE: u32 = 44;
pub const KERN_CLASSIC: u32 = 44;
pub const KERN_EXEC: u32 = 45;
pub const KERN_CLASSICHANDLER: u32 = 45;
pub const KERN_AIOMAX: u32 = 46;
pub const KERN_AIOPROCMAX: u32 = 47;
pub const KERN_AIOTHREADS: u32 = 48;
pub const KERN_PROCARGS2: u32 = 49;
pub const KERN_COREFILE: u32 = 50;
pub const KERN_COREDUMP: u32 = 51;
pub const KERN_SUGID_COREDUMP: u32 = 52;
pub const KERN_PROCDELAYTERM: u32 = 53;
pub const KERN_SHREG_PRIVATIZABLE: u32 = 54;
pub const KERN_LOW_PRI_WINDOW: u32 = 56;
pub const KERN_LOW_PRI_DELAY: u32 = 57;
pub const KERN_POSIX: u32 = 58;
pub const KERN_USRSTACK64: u32 = 59;
pub const KERN_NX_PROTECTION: u32 = 60;
pub const KERN_TFP: u32 = 61;
pub const KERN_PROCNAME: u32 = 62;
pub const KERN_THALTSTACK: u32 = 63;
pub const KERN_SPECULATIVE_READS: u32 = 64;
pub const KERN_OSVERSION: u32 = 65;
pub const KERN_SAFEBOOT: u32 = 66;
pub const KERN_RAGEVNODE: u32 = 68;
pub const KERN_TTY: u32 = 69;
pub const KERN_CHECKOPENEVT: u32 = 70;
pub const KERN_THREADNAME: u32 = 71;
pub const KERN_MAXID: u32 = 72;
pub const KERN_USRSTACK: u32 = 59;
pub const KERN_RAGE_PROC: u32 = 1;
pub const KERN_RAGE_THREAD: u32 = 2;
pub const KERN_UNRAGE_PROC: u32 = 3;
pub const KERN_UNRAGE_THREAD: u32 = 4;
pub const KERN_OPENEVT_PROC: u32 = 1;
pub const KERN_UNOPENEVT_PROC: u32 = 2;
pub const KERN_TFP_POLICY: u32 = 1;
pub const KERN_TFP_POLICY_DENY: u32 = 0;
pub const KERN_TFP_POLICY_DEFAULT: u32 = 2;
pub const KERN_KDEFLAGS: u32 = 1;
pub const KERN_KDDFLAGS: u32 = 2;
pub const KERN_KDENABLE: u32 = 3;
pub const KERN_KDSETBUF: u32 = 4;
pub const KERN_KDGETBUF: u32 = 5;
pub const KERN_KDSETUP: u32 = 6;
pub const KERN_KDREMOVE: u32 = 7;
pub const KERN_KDSETREG: u32 = 8;
pub const KERN_KDGETREG: u32 = 9;
pub const KERN_KDREADTR: u32 = 10;
pub const KERN_KDPIDTR: u32 = 11;
pub const KERN_KDTHRMAP: u32 = 12;
pub const KERN_KDPIDEX: u32 = 14;
pub const KERN_KDSETRTCDEC: u32 = 15;
pub const KERN_KDGETENTROPY: u32 = 16;
pub const KERN_KDWRITETR: u32 = 17;
pub const KERN_KDWRITEMAP: u32 = 18;
pub const KERN_KDTEST: u32 = 19;
pub const KERN_KDREADCURTHRMAP: u32 = 21;
pub const KERN_KDSET_TYPEFILTER: u32 = 22;
pub const KERN_KDBUFWAIT: u32 = 23;
pub const KERN_KDCPUMAP: u32 = 24;
pub const KERN_KDCPUMAP_EXT: u32 = 25;
pub const KERN_KDSET_EDM: u32 = 26;
pub const KERN_KDGET_EDM: u32 = 27;
pub const KERN_KDWRITETR_V3: u32 = 28;
pub const KERN_PROC_ALL: u32 = 0;
pub const KERN_PROC_PID: u32 = 1;
pub const KERN_PROC_PGRP: u32 = 2;
pub const KERN_PROC_SESSION: u32 = 3;
pub const KERN_PROC_TTY: u32 = 4;
pub const KERN_PROC_UID: u32 = 5;
pub const KERN_PROC_RUID: u32 = 6;
pub const KERN_PROC_LCID: u32 = 7;
pub const KERN_VFSNSPACE_HANDLE_PROC: u32 = 1;
pub const KERN_VFSNSPACE_UNHANDLE_PROC: u32 = 2;
pub const WMESGLEN: u32 = 7;
pub const EPROC_CTTY: u32 = 1;
pub const EPROC_SLEADER: u32 = 2;
pub const COMAPT_MAXLOGNAME: u32 = 12;
pub const KIPC_MAXSOCKBUF: u32 = 1;
pub const KIPC_SOCKBUF_WASTE: u32 = 2;
pub const KIPC_SOMAXCONN: u32 = 3;
pub const KIPC_MAX_LINKHDR: u32 = 4;
pub const KIPC_MAX_PROTOHDR: u32 = 5;
pub const KIPC_MAX_HDR: u32 = 6;
pub const KIPC_MAX_DATALEN: u32 = 7;
pub const KIPC_MBSTAT: u32 = 8;
pub const KIPC_NMBCLUSTERS: u32 = 9;
pub const KIPC_SOQLIMITCOMPAT: u32 = 10;
pub const VM_METER: u32 = 1;
pub const VM_LOADAVG: u32 = 2;
pub const VM_MACHFACTOR: u32 = 4;
pub const VM_SWAPUSAGE: u32 = 5;
pub const VM_MAXID: u32 = 6;
pub const LSCALE: u32 = 1000;
pub const HW_MACHINE: u32 = 1;
pub const HW_MODEL: u32 = 2;
pub const HW_NCPU: u32 = 3;
pub const HW_BYTEORDER: u32 = 4;
pub const HW_PHYSMEM: u32 = 5;
pub const HW_USERMEM: u32 = 6;
pub const HW_PAGESIZE: u32 = 7;
pub const HW_DISKNAMES: u32 = 8;
pub const HW_DISKSTATS: u32 = 9;
pub const HW_EPOCH: u32 = 10;
pub const HW_FLOATINGPT: u32 = 11;
pub const HW_MACHINE_ARCH: u32 = 12;
pub const HW_VECTORUNIT: u32 = 13;
pub const HW_BUS_FREQ: u32 = 14;
pub const HW_CPU_FREQ: u32 = 15;
pub const HW_CACHELINE: u32 = 16;
pub const HW_L1ICACHESIZE: u32 = 17;
pub const HW_L1DCACHESIZE: u32 = 18;
pub const HW_L2SETTINGS: u32 = 19;
pub const HW_L2CACHESIZE: u32 = 20;
pub const HW_L3SETTINGS: u32 = 21;
pub const HW_L3CACHESIZE: u32 = 22;
pub const HW_TB_FREQ: u32 = 23;
pub const HW_MEMSIZE: u32 = 24;
pub const HW_AVAILCPU: u32 = 25;
pub const HW_TARGET: u32 = 26;
pub const HW_PRODUCT: u32 = 27;
pub const HW_MAXID: u32 = 28;
pub const USER_CS_PATH: u32 = 1;
pub const USER_BC_BASE_MAX: u32 = 2;
pub const USER_BC_DIM_MAX: u32 = 3;
pub const USER_BC_SCALE_MAX: u32 = 4;
pub const USER_BC_STRING_MAX: u32 = 5;
pub const USER_COLL_WEIGHTS_MAX: u32 = 6;
pub const USER_EXPR_NEST_MAX: u32 = 7;
pub const USER_LINE_MAX: u32 = 8;
pub const USER_RE_DUP_MAX: u32 = 9;
pub const USER_POSIX2_VERSION: u32 = 10;
pub const USER_POSIX2_C_BIND: u32 = 11;
pub const USER_POSIX2_C_DEV: u32 = 12;
pub const USER_POSIX2_CHAR_TERM: u32 = 13;
pub const USER_POSIX2_FORT_DEV: u32 = 14;
pub const USER_POSIX2_FORT_RUN: u32 = 15;
pub const USER_POSIX2_LOCALEDEF: u32 = 16;
pub const USER_POSIX2_SW_DEV: u32 = 17;
pub const USER_POSIX2_UPE: u32 = 18;
pub const USER_STREAM_MAX: u32 = 19;
pub const USER_TZNAME_MAX: u32 = 20;
pub const USER_MAXID: u32 = 21;
pub const CTL_DEBUG_NAME: u32 = 0;
pub const CTL_DEBUG_VALUE: u32 = 1;
pub const CTL_DEBUG_MAXID: u32 = 20;
pub const UDPCTL_CHECKSUM: u32 = 1;
pub const UDPCTL_STATS: u32 = 2;
pub const UDPCTL_MAXDGRAM: u32 = 3;
pub const UDPCTL_RECVSPACE: u32 = 4;
pub const UDPCTL_PCBLIST: u32 = 5;
pub const UDPCTL_MAXID: u32 = 6;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PGUARD: u32 = 13;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MAX_SPECIAL_PORT: u32 = 33;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const PPNUM_MAX: u32 = 4294967295;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_BASIC_INFO_64: u32 = 5;
pub const TASK_BASIC_INFO: u32 = 5;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const I386_PGBYTES: u32 = 4096;
pub const I386_PGSHIFT: u32 = 12;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const MACH_VOUCHER_BANK_CONTENT_SIZE: u32 = 500;
pub const BANK_ORIGINATOR_PID: u32 = 1;
pub const BANK_PERSONA_TOKEN: u32 = 2;
pub const BANK_PERSONA_ID: u32 = 3;
pub const BANK_PERSONA_ADOPT_ANY: u32 = 4;
pub const PROC_PERSONA_INFO_FLAG_ADOPTION_ALLOWED: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const DEBUG_ASSERT_COMPONENT_NAME_STRING: &[u8; 1usize] = b"\0";
pub const __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const task_MSG_COUNT: u32 = 65;
pub const thread_act_MSG_COUNT: u32 = 31;
pub const vm_map_MSG_COUNT: u32 = 33;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const _MACH_INIT_: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const clock_MSG_COUNT: u32 = 3;
pub const clock_reply_MSG_COUNT: u32 = 1;
pub const exc_MSG_COUNT: u32 = 3;
pub const HOST_REBOOT_HALT: u32 = 8;
pub const HOST_REBOOT_UPSDELAY: u32 = 256;
pub const HOST_REBOOT_DEBUGGER: u32 = 4096;
pub const TASK_PORT_REGISTER_MAX: u32 = 3;
pub const TASK_MAX_WATCHPORT_COUNT: u32 = 32;
pub const TASK_SELF_PORT_COUNT: u32 = 4;
pub const THREAD_SELF_PORT_COUNT: u32 = 3;
pub const mach_vm_MSG_COUNT: u32 = 25;
pub const mach_voucher_MSG_COUNT: u32 = 5;
pub const memory_entry_MSG_COUNT: u32 = 3;
pub const SHARED_REGION_BASE_I386: u32 = 2415919104;
pub const SHARED_REGION_SIZE_I386: u32 = 536870912;
pub const SHARED_REGION_NESTING_BASE_I386: u32 = 2415919104;
pub const SHARED_REGION_NESTING_SIZE_I386: u32 = 536870912;
pub const SHARED_REGION_NESTING_MIN_I386: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX_I386: u32 = 4292870144;
pub const SHARED_REGION_BASE_X86_64: u64 = 140703128616960;
pub const SHARED_REGION_SIZE_X86_64: u64 = 34326183936;
pub const SHARED_REGION_NESTING_BASE_X86_64: u64 = 140703128616960;
pub const SHARED_REGION_NESTING_SIZE_X86_64: u64 = 34326183936;
pub const SHARED_REGION_NESTING_MIN_X86_64: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX_X86_64: i32 = -2097152;
pub const SHARED_REGION_BASE_PPC: u32 = 2415919104;
pub const SHARED_REGION_SIZE_PPC: u32 = 536870912;
pub const SHARED_REGION_NESTING_BASE_PPC: u32 = 2415919104;
pub const SHARED_REGION_NESTING_SIZE_PPC: u32 = 268435456;
pub const SHARED_REGION_NESTING_MIN_PPC: u32 = 268435456;
pub const SHARED_REGION_NESTING_MAX_PPC: u32 = 268435456;
pub const SHARED_REGION_BASE_PPC64: u64 = 140734804000768;
pub const SHARED_REGION_SIZE_PPC64: u32 = 2684354560;
pub const SHARED_REGION_NESTING_BASE_PPC64: u64 = 140734804000768;
pub const SHARED_REGION_NESTING_SIZE_PPC64: u32 = 2684354560;
pub const SHARED_REGION_NESTING_MIN_PPC64: u32 = 268435456;
pub const SHARED_REGION_NESTING_MAX_PPC64: u32 = 268435456;
pub const SHARED_REGION_BASE_ARM: u32 = 1073741824;
pub const SHARED_REGION_SIZE_ARM: u32 = 1073741824;
pub const SHARED_REGION_NESTING_BASE_ARM: u32 = 1073741824;
pub const SHARED_REGION_NESTING_SIZE_ARM: u32 = 1073741824;
pub const SHARED_REGION_BASE_ARM64_32: u32 = 436207616;
pub const SHARED_REGION_SIZE_ARM64_32: u32 = 2785017856;
pub const SHARED_REGION_NESTING_BASE_ARM64_32: u32 = 436207616;
pub const SHARED_REGION_NESTING_SIZE_ARM64_32: u32 = 2785017856;
pub const SHARED_REGION_BASE_ARM64: u64 = 6442450944;
pub const SHARED_REGION_SIZE_ARM64: u64 = 4294967296;
pub const SHARED_REGION_NESTING_BASE_ARM64: u64 = 6442450944;
pub const SHARED_REGION_NESTING_SIZE_ARM64: u64 = 4294967296;
pub const SHARED_REGION_BASE: u64 = 140703128616960;
pub const SHARED_REGION_SIZE: u64 = 34326183936;
pub const SHARED_REGION_NESTING_BASE: u64 = 140703128616960;
pub const SHARED_REGION_NESTING_SIZE: u64 = 34326183936;
pub const SHARED_REGION_NESTING_MIN: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX: i32 = -2097152;
pub const VM_PROT_COW: u32 = 8;
pub const VM_PROT_ZF: u32 = 16;
pub const VM_PROT_SLIDE: u32 = 32;
pub const VM_PROT_NOAUTH: u32 = 64;
pub const VM_PROT_TRANSLATED_ALLOW_EXECUTE: u32 = 128;
pub const Gstack: u32 = 0;
pub const CC_SYM_PREFIX: &[u8; 2usize] = b"_\0";
pub const DTRACE_NOPS: &[u8; 16usize] = b"nop\n\tnop\n\tnop\n\t\0";
pub const DEVICE_PAGER_GUARDED: u32 = 1;
pub const DEVICE_PAGER_COHERENT: u32 = 2;
pub const DEVICE_PAGER_CACHE_INHIB: u32 = 4;
pub const DEVICE_PAGER_WRITE_THROUGH: u32 = 8;
pub const DEVICE_PAGER_CONTIGUOUS: u32 = 256;
pub const DEVICE_PAGER_NOPHYSCACHE: u32 = 512;
pub const OSATOMIC_DEPRECATED: u32 = 1;
pub const OSSPINLOCK_DEPRECATED: u32 = 1;
pub const OS_SPINLOCK_INIT: u32 = 0;
pub const OS_LOCK_API_VERSION: u32 = 20160309;
pub const MALLOC_PTR_IN_USE_RANGE_TYPE: u32 = 1;
pub const MALLOC_PTR_REGION_RANGE_TYPE: u32 = 2;
pub const MALLOC_ADMIN_REGION_RANGE_TYPE: u32 = 4;
pub const MALLOC_ZONE_SPECIFIC_FLAGS: u32 = 65280;
pub const MALLOC_VERBOSE_PRINT_LEVEL: u32 = 2;
pub const FASTTRAP_MAX_INSTR_SIZE: u32 = 15;
pub const FASTTRAP_INSTR: u32 = 204;
pub const FASTTRAP_SUNWDTRACE_SIZE: u32 = 64;
pub const FASTTRAP_T_COMMON: u32 = 0;
pub const FASTTRAP_T_JCC: u32 = 1;
pub const FASTTRAP_T_LOOP: u32 = 2;
pub const FASTTRAP_T_JCXZ: u32 = 3;
pub const FASTTRAP_T_JMP: u32 = 4;
pub const FASTTRAP_T_CALL: u32 = 5;
pub const FASTTRAP_T_RET: u32 = 6;
pub const FASTTRAP_T_RET16: u32 = 7;
pub const FASTTRAP_T_PUSHL_EBP: u32 = 16;
pub const FASTTRAP_T_NOP: u32 = 17;
pub const FASTTRAP_RIP_1: u32 = 1;
pub const FASTTRAP_RIP_2: u32 = 2;
pub const FASTTRAP_RIP_X: u32 = 4;
pub const FASTTRAP_SEG_NONE: u32 = 0;
pub const FASTTRAP_SEG_CS: u32 = 1;
pub const FASTTRAP_SEG_DS: u32 = 2;
pub const FASTTRAP_SEG_ES: u32 = 3;
pub const FASTTRAP_SEG_FS: u32 = 4;
pub const FASTTRAP_SEG_GS: u32 = 5;
pub const FASTTRAP_SEG_SS: u32 = 6;
pub const FASTTRAP_RETURN_AFRAMES: u32 = 6;
pub const FASTTRAP_ENTRY_AFRAMES: u32 = 5;
pub const FASTTRAP_OFFSET_AFRAMES: u32 = 5;
pub const _ARM_SIGNAL_: u32 = 1;
pub const LDT_AUTO_ALLOC: u32 = 4294967295;
pub const _BSD_I386_VMPARAM_H_: u32 = 1;
pub const DFLSSIZ: u32 = 8388608;
pub const MAXSSIZ: u32 = 67108864;
pub const DFLCSIZ: u32 = 0;
pub const _BSD_ARM_VMPARAM_H_: u32 = 1;
pub const BSM_PF_UNSPEC: u32 = 0;
pub const BSM_PF_LOCAL: u32 = 1;
pub const BSM_PF_INET: u32 = 2;
pub const BSM_PF_IMPLINK: u32 = 3;
pub const BSM_PF_PUP: u32 = 4;
pub const BSM_PF_CHAOS: u32 = 5;
pub const BSM_PF_NS: u32 = 6;
pub const BSM_PF_NBS: u32 = 7;
pub const BSM_PF_ECMA: u32 = 8;
pub const BSM_PF_DATAKIT: u32 = 9;
pub const BSM_PF_CCITT: u32 = 10;
pub const BSM_PF_SNA: u32 = 11;
pub const BSM_PF_DECnet: u32 = 12;
pub const BSM_PF_DLI: u32 = 13;
pub const BSM_PF_LAT: u32 = 14;
pub const BSM_PF_HYLINK: u32 = 15;
pub const BSM_PF_APPLETALK: u32 = 16;
pub const BSM_PF_NIT: u32 = 17;
pub const BSM_PF_802: u32 = 18;
pub const BSM_PF_OSI: u32 = 19;
pub const BSM_PF_X25: u32 = 20;
pub const BSM_PF_OSINET: u32 = 21;
pub const BSM_PF_GOSIP: u32 = 22;
pub const BSM_PF_IPX: u32 = 23;
pub const BSM_PF_ROUTE: u32 = 24;
pub const BSM_PF_LINK: u32 = 25;
pub const BSM_PF_INET6: u32 = 26;
pub const BSM_PF_KEY: u32 = 27;
pub const BSM_PF_NCA: u32 = 28;
pub const BSM_PF_POLICY: u32 = 29;
pub const BSM_PF_INET_OFFLOAD: u32 = 30;
pub const BSM_PF_NETBIOS: u32 = 500;
pub const BSM_PF_ISO: u32 = 501;
pub const BSM_PF_XTP: u32 = 502;
pub const BSM_PF_COIP: u32 = 503;
pub const BSM_PF_CNT: u32 = 504;
pub const BSM_PF_RTIP: u32 = 505;
pub const BSM_PF_SIP: u32 = 506;
pub const BSM_PF_PIP: u32 = 507;
pub const BSM_PF_ISDN: u32 = 508;
pub const BSM_PF_E164: u32 = 509;
pub const BSM_PF_NATM: u32 = 510;
pub const BSM_PF_ATM: u32 = 511;
pub const BSM_PF_NETGRAPH: u32 = 512;
pub const BSM_PF_SLOW: u32 = 513;
pub const BSM_PF_SCLUSTER: u32 = 514;
pub const BSM_PF_ARP: u32 = 515;
pub const BSM_PF_BLUETOOTH: u32 = 516;
pub const BSM_PF_IEEE80211: u32 = 517;
pub const BSM_PF_AX25: u32 = 518;
pub const BSM_PF_ROSE: u32 = 519;
pub const BSM_PF_NETBEUI: u32 = 520;
pub const BSM_PF_SECURITY: u32 = 521;
pub const BSM_PF_PACKET: u32 = 522;
pub const BSM_PF_ASH: u32 = 523;
pub const BSM_PF_ECONET: u32 = 524;
pub const BSM_PF_ATMSVC: u32 = 525;
pub const BSM_PF_IRDA: u32 = 526;
pub const BSM_PF_PPPOX: u32 = 527;
pub const BSM_PF_WANPIPE: u32 = 528;
pub const BSM_PF_LLC: u32 = 529;
pub const BSM_PF_CAN: u32 = 530;
pub const BSM_PF_TIPC: u32 = 531;
pub const BSM_PF_IUCV: u32 = 532;
pub const BSM_PF_RXRPC: u32 = 533;
pub const BSM_PF_PHONET: u32 = 534;
pub const BSM_PF_UNKNOWN: u32 = 700;
pub const BSM_ERRNO_ESUCCESS: u32 = 0;
pub const BSM_ERRNO_EPERM: u32 = 1;
pub const BSM_ERRNO_ENOENT: u32 = 2;
pub const BSM_ERRNO_ESRCH: u32 = 3;
pub const BSM_ERRNO_EINTR: u32 = 4;
pub const BSM_ERRNO_EIO: u32 = 5;
pub const BSM_ERRNO_ENXIO: u32 = 6;
pub const BSM_ERRNO_E2BIG: u32 = 7;
pub const BSM_ERRNO_ENOEXEC: u32 = 8;
pub const BSM_ERRNO_EBADF: u32 = 9;
pub const BSM_ERRNO_ECHILD: u32 = 10;
pub const BSM_ERRNO_EAGAIN: u32 = 11;
pub const BSM_ERRNO_ENOMEM: u32 = 12;
pub const BSM_ERRNO_EACCES: u32 = 13;
pub const BSM_ERRNO_EFAULT: u32 = 14;
pub const BSM_ERRNO_ENOTBLK: u32 = 15;
pub const BSM_ERRNO_EBUSY: u32 = 16;
pub const BSM_ERRNO_EEXIST: u32 = 17;
pub const BSM_ERRNO_EXDEV: u32 = 18;
pub const BSM_ERRNO_ENODEV: u32 = 19;
pub const BSM_ERRNO_ENOTDIR: u32 = 20;
pub const BSM_ERRNO_EISDIR: u32 = 21;
pub const BSM_ERRNO_EINVAL: u32 = 22;
pub const BSM_ERRNO_ENFILE: u32 = 23;
pub const BSM_ERRNO_EMFILE: u32 = 24;
pub const BSM_ERRNO_ENOTTY: u32 = 25;
pub const BSM_ERRNO_ETXTBSY: u32 = 26;
pub const BSM_ERRNO_EFBIG: u32 = 27;
pub const BSM_ERRNO_ENOSPC: u32 = 28;
pub const BSM_ERRNO_ESPIPE: u32 = 29;
pub const BSM_ERRNO_EROFS: u32 = 30;
pub const BSM_ERRNO_EMLINK: u32 = 31;
pub const BSM_ERRNO_EPIPE: u32 = 32;
pub const BSM_ERRNO_EDOM: u32 = 33;
pub const BSM_ERRNO_ERANGE: u32 = 34;
pub const BSM_ERRNO_ENOMSG: u32 = 35;
pub const BSM_ERRNO_EIDRM: u32 = 36;
pub const BSM_ERRNO_ECHRNG: u32 = 37;
pub const BSM_ERRNO_EL2NSYNC: u32 = 38;
pub const BSM_ERRNO_EL3HLT: u32 = 39;
pub const BSM_ERRNO_EL3RST: u32 = 40;
pub const BSM_ERRNO_ELNRNG: u32 = 41;
pub const BSM_ERRNO_EUNATCH: u32 = 42;
pub const BSM_ERRNO_ENOCSI: u32 = 43;
pub const BSM_ERRNO_EL2HLT: u32 = 44;
pub const BSM_ERRNO_EDEADLK: u32 = 45;
pub const BSM_ERRNO_ENOLCK: u32 = 46;
pub const BSM_ERRNO_ECANCELED: u32 = 47;
pub const BSM_ERRNO_ENOTSUP: u32 = 48;
pub const BSM_ERRNO_EDQUOT: u32 = 49;
pub const BSM_ERRNO_EBADE: u32 = 50;
pub const BSM_ERRNO_EBADR: u32 = 51;
pub const BSM_ERRNO_EXFULL: u32 = 52;
pub const BSM_ERRNO_ENOANO: u32 = 53;
pub const BSM_ERRNO_EBADRQC: u32 = 54;
pub const BSM_ERRNO_EBADSLT: u32 = 55;
pub const BSM_ERRNO_EDEADLOCK: u32 = 56;
pub const BSM_ERRNO_EBFONT: u32 = 57;
pub const BSM_ERRNO_EOWNERDEAD: u32 = 58;
pub const BSM_ERRNO_ENOTRECOVERABLE: u32 = 59;
pub const BSM_ERRNO_ENOSTR: u32 = 60;
pub const BSM_ERRNO_ENODATA: u32 = 61;
pub const BSM_ERRNO_ETIME: u32 = 62;
pub const BSM_ERRNO_ENOSR: u32 = 63;
pub const BSM_ERRNO_ENONET: u32 = 64;
pub const BSM_ERRNO_ENOPKG: u32 = 65;
pub const BSM_ERRNO_EREMOTE: u32 = 66;
pub const BSM_ERRNO_ENOLINK: u32 = 67;
pub const BSM_ERRNO_EADV: u32 = 68;
pub const BSM_ERRNO_ESRMNT: u32 = 69;
pub const BSM_ERRNO_ECOMM: u32 = 70;
pub const BSM_ERRNO_EPROTO: u32 = 71;
pub const BSM_ERRNO_ELOCKUNMAPPED: u32 = 72;
pub const BSM_ERRNO_ENOTACTIVE: u32 = 73;
pub const BSM_ERRNO_EMULTIHOP: u32 = 74;
pub const BSM_ERRNO_EBADMSG: u32 = 77;
pub const BSM_ERRNO_ENAMETOOLONG: u32 = 78;
pub const BSM_ERRNO_EOVERFLOW: u32 = 79;
pub const BSM_ERRNO_ENOTUNIQ: u32 = 80;
pub const BSM_ERRNO_EBADFD: u32 = 81;
pub const BSM_ERRNO_EREMCHG: u32 = 82;
pub const BSM_ERRNO_ELIBACC: u32 = 83;
pub const BSM_ERRNO_ELIBBAD: u32 = 84;
pub const BSM_ERRNO_ELIBSCN: u32 = 85;
pub const BSM_ERRNO_ELIBMAX: u32 = 86;
pub const BSM_ERRNO_ELIBEXEC: u32 = 87;
pub const BSM_ERRNO_EILSEQ: u32 = 88;
pub const BSM_ERRNO_ENOSYS: u32 = 89;
pub const BSM_ERRNO_ELOOP: u32 = 90;
pub const BSM_ERRNO_ERESTART: u32 = 91;
pub const BSM_ERRNO_ESTRPIPE: u32 = 92;
pub const BSM_ERRNO_ENOTEMPTY: u32 = 93;
pub const BSM_ERRNO_EUSERS: u32 = 94;
pub const BSM_ERRNO_ENOTSOCK: u32 = 95;
pub const BSM_ERRNO_EDESTADDRREQ: u32 = 96;
pub const BSM_ERRNO_EMSGSIZE: u32 = 97;
pub const BSM_ERRNO_EPROTOTYPE: u32 = 98;
pub const BSM_ERRNO_ENOPROTOOPT: u32 = 99;
pub const BSM_ERRNO_EPROTONOSUPPORT: u32 = 120;
pub const BSM_ERRNO_ESOCKTNOSUPPORT: u32 = 121;
pub const BSM_ERRNO_EOPNOTSUPP: u32 = 122;
pub const BSM_ERRNO_EPFNOSUPPORT: u32 = 123;
pub const BSM_ERRNO_EAFNOSUPPORT: u32 = 124;
pub const BSM_ERRNO_EADDRINUSE: u32 = 125;
pub const BSM_ERRNO_EADDRNOTAVAIL: u32 = 126;
pub const BSM_ERRNO_ENETDOWN: u32 = 127;
pub const BSM_ERRNO_ENETUNREACH: u32 = 128;
pub const BSM_ERRNO_ENETRESET: u32 = 129;
pub const BSM_ERRNO_ECONNABORTED: u32 = 130;
pub const BSM_ERRNO_ECONNRESET: u32 = 131;
pub const BSM_ERRNO_ENOBUFS: u32 = 132;
pub const BSM_ERRNO_EISCONN: u32 = 133;
pub const BSM_ERRNO_ENOTCONN: u32 = 134;
pub const BSM_ERRNO_ESHUTDOWN: u32 = 143;
pub const BSM_ERRNO_ETOOMANYREFS: u32 = 144;
pub const BSM_ERRNO_ETIMEDOUT: u32 = 145;
pub const BSM_ERRNO_ECONNREFUSED: u32 = 146;
pub const BSM_ERRNO_EHOSTDOWN: u32 = 147;
pub const BSM_ERRNO_EHOSTUNREACH: u32 = 148;
pub const BSM_ERRNO_EALREADY: u32 = 149;
pub const BSM_ERRNO_EINPROGRESS: u32 = 150;
pub const BSM_ERRNO_ESTALE: u32 = 151;
pub const BSM_ERRNO_EQFULL: u32 = 152;
pub const BSM_ERRNO_EPROCLIM: u32 = 190;
pub const BSM_ERRNO_EBADRPC: u32 = 191;
pub const BSM_ERRNO_ERPCMISMATCH: u32 = 192;
pub const BSM_ERRNO_EPROGUNAVAIL: u32 = 193;
pub const BSM_ERRNO_EPROGMISMATCH: u32 = 194;
pub const BSM_ERRNO_EPROCUNAVAIL: u32 = 195;
pub const BSM_ERRNO_EFTYPE: u32 = 196;
pub const BSM_ERRNO_EAUTH: u32 = 197;
pub const BSM_ERRNO_ENEEDAUTH: u32 = 198;
pub const BSM_ERRNO_ENOATTR: u32 = 199;
pub const BSM_ERRNO_EDOOFUS: u32 = 200;
pub const BSM_ERRNO_EJUSTRETURN: u32 = 201;
pub const BSM_ERRNO_ENOIOCTL: u32 = 202;
pub const BSM_ERRNO_EDIRIOCTL: u32 = 203;
pub const BSM_ERRNO_EPWROFF: u32 = 204;
pub const BSM_ERRNO_EDEVERR: u32 = 205;
pub const BSM_ERRNO_EBADEXEC: u32 = 206;
pub const BSM_ERRNO_EBADARCH: u32 = 207;
pub const BSM_ERRNO_ESHLIBVERS: u32 = 208;
pub const BSM_ERRNO_EBADMACHO: u32 = 209;
pub const BSM_ERRNO_EPOLICY: u32 = 210;
pub const BSM_ERRNO_EDOTDOT: u32 = 211;
pub const BSM_ERRNO_EUCLEAN: u32 = 212;
pub const BSM_ERRNO_ENOTNAM: u32 = 213;
pub const BSM_ERRNO_ENAVAIL: u32 = 214;
pub const BSM_ERRNO_EISNAM: u32 = 215;
pub const BSM_ERRNO_EREMOTEIO: u32 = 216;
pub const BSM_ERRNO_ENOMEDIUM: u32 = 217;
pub const BSM_ERRNO_EMEDIUMTYPE: u32 = 218;
pub const BSM_ERRNO_ENOKEY: u32 = 219;
pub const BSM_ERRNO_EKEYEXPIRED: u32 = 220;
pub const BSM_ERRNO_EKEYREVOKED: u32 = 221;
pub const BSM_ERRNO_EKEYREJECTED: u32 = 222;
pub const BSM_ERRNO_UNKNOWN: u32 = 250;
pub const BSM_F_DUPFD: u32 = 0;
pub const BSM_F_GETFD: u32 = 1;
pub const BSM_F_SETFD: u32 = 2;
pub const BSM_F_GETFL: u32 = 3;
pub const BSM_F_SETFL: u32 = 4;
pub const BSM_F_O_GETLK: u32 = 5;
pub const BSM_F_SETLK: u32 = 6;
pub const BSM_F_SETLKW: u32 = 7;
pub const BSM_F_CHKFL: u32 = 8;
pub const BSM_F_DUP2FD: u32 = 9;
pub const BSM_F_ALLOCSP: u32 = 10;
pub const BSM_F_FREESP: u32 = 11;
pub const BSM_F_ISSTREAM: u32 = 13;
pub const BSM_F_GETLK: u32 = 14;
pub const BSM_F_PRIV: u32 = 15;
pub const BSM_F_NPRIV: u32 = 16;
pub const BSM_F_QUOTACTL: u32 = 17;
pub const BSM_F_BLOCKS: u32 = 18;
pub const BSM_F_BLKSIZE: u32 = 19;
pub const BSM_F_GETOWN: u32 = 23;
pub const BSM_F_SETOWN: u32 = 24;
pub const BSM_F_REVOKE: u32 = 25;
pub const BSM_F_HASREMOTELOCKS: u32 = 26;
pub const BSM_F_FREESP64: u32 = 27;
pub const BSM_F_ALLOCSP64: u32 = 28;
pub const BSM_F_GETLK64: u32 = 33;
pub const BSM_F_SETLK64: u32 = 34;
pub const BSM_F_SETLKW64: u32 = 35;
pub const BSM_F_SHARE: u32 = 40;
pub const BSM_F_UNSHARE: u32 = 41;
pub const BSM_F_SETLK_NBMAND: u32 = 42;
pub const BSM_F_SHARE_NBMAND: u32 = 43;
pub const BSM_F_SETLK64_NBMAND: u32 = 44;
pub const BSM_F_GETXFL: u32 = 45;
pub const BSM_F_BADFD: u32 = 46;
pub const BSM_F_OGETLK: u32 = 107;
pub const BSM_F_OSETLK: u32 = 108;
pub const BSM_F_OSETLKW: u32 = 109;
pub const BSM_F_SETLK_REMOTE: u32 = 114;
pub const BSM_F_SETSIG: u32 = 210;
pub const BSM_F_GETSIG: u32 = 211;
pub const BSM_F_CHKCLEAN: u32 = 341;
pub const BSM_F_PREALLOCATE: u32 = 342;
pub const BSM_F_SETSIZE: u32 = 343;
pub const BSM_F_RDADVISE: u32 = 344;
pub const BSM_F_RDAHEAD: u32 = 345;
pub const BSM_F_NOCACHE: u32 = 348;
pub const BSM_F_LOG2PHYS: u32 = 349;
pub const BSM_F_GETPATH: u32 = 350;
pub const BSM_F_FULLFSYNC: u32 = 351;
pub const BSM_F_PATHPKG_CHECK: u32 = 352;
pub const BSM_F_FREEZE_FS: u32 = 353;
pub const BSM_F_THAW_FS: u32 = 354;
pub const BSM_F_GLOBAL_NOCACHE: u32 = 355;
pub const BSM_F_OPENFROM: u32 = 356;
pub const BSM_F_UNLINKFROM: u32 = 357;
pub const BSM_F_CHECK_OPENEVT: u32 = 358;
pub const BSM_F_ADDSIGS: u32 = 359;
pub const BSM_F_MARKDEPENDENCY: u32 = 360;
pub const BSM_F_BARRIERFSYNC: u32 = 361;
pub const BSM_F_PUNCHHOLE: u32 = 362;
pub const BSM_F_TRIM_ACTIVE_FILE: u32 = 363;
pub const BSM_F_SPECULATIVE_READ: u32 = 364;
pub const BSM_F_FS_SPECIFIC_0: u32 = 400;
pub const BSM_F_FS_SPECIFIC_1: u32 = 401;
pub const BSM_F_FS_SPECIFIC_2: u32 = 402;
pub const BSM_F_FS_SPECIFIC_3: u32 = 403;
pub const BSM_F_FS_SPECIFIC_4: u32 = 404;
pub const BSM_F_FS_SPECIFIC_5: u32 = 405;
pub const BSM_F_FS_SPECIFIC_6: u32 = 406;
pub const BSM_F_FS_SPECIFIC_7: u32 = 407;
pub const BSM_F_FS_SPECIFIC_8: u32 = 408;
pub const BSM_F_FS_SPECIFIC_9: u32 = 409;
pub const BSM_F_FS_SPECIFIC_10: u32 = 410;
pub const BSM_F_FS_SPECIFIC_11: u32 = 411;
pub const BSM_F_FS_SPECIFIC_12: u32 = 412;
pub const BSM_F_FS_SPECIFIC_13: u32 = 413;
pub const BSM_F_FS_SPECIFIC_14: u32 = 414;
pub const BSM_F_FS_SPECIFIC_15: u32 = 415;
pub const BSM_F_UNKNOWN: u32 = 65535;
pub const AUT_INVALID: u32 = 0;
pub const AUT_OTHER_FILE32: u32 = 17;
pub const AUT_OHEADER: u32 = 18;
pub const AUT_TRAILER: u32 = 19;
pub const AUT_HEADER32: u32 = 20;
pub const AUT_HEADER32_EX: u32 = 21;
pub const AUT_DATA: u32 = 33;
pub const AUT_IPC: u32 = 34;
pub const AUT_PATH: u32 = 35;
pub const AUT_SUBJECT32: u32 = 36;
pub const AUT_XATPATH: u32 = 37;
pub const AUT_PROCESS32: u32 = 38;
pub const AUT_RETURN32: u32 = 39;
pub const AUT_TEXT: u32 = 40;
pub const AUT_OPAQUE: u32 = 41;
pub const AUT_IN_ADDR: u32 = 42;
pub const AUT_IP: u32 = 43;
pub const AUT_IPORT: u32 = 44;
pub const AUT_ARG32: u32 = 45;
pub const AUT_SOCKET: u32 = 46;
pub const AUT_SEQ: u32 = 47;
pub const AUT_ACL: u32 = 48;
pub const AUT_ATTR: u32 = 49;
pub const AUT_IPC_PERM: u32 = 50;
pub const AUT_LABEL: u32 = 51;
pub const AUT_GROUPS: u32 = 52;
pub const AUT_ACE: u32 = 53;
pub const AUT_PRIV: u32 = 56;
pub const AUT_UPRIV: u32 = 57;
pub const AUT_LIAISON: u32 = 58;
pub const AUT_NEWGROUPS: u32 = 59;
pub const AUT_EXEC_ARGS: u32 = 60;
pub const AUT_EXEC_ENV: u32 = 61;
pub const AUT_ATTR32: u32 = 62;
pub const AUT_UNAUTH: u32 = 63;
pub const AUT_XATOM: u32 = 64;
pub const AUT_XOBJ: u32 = 65;
pub const AUT_XPROTO: u32 = 66;
pub const AUT_XSELECT: u32 = 67;
pub const AUT_XCOLORMAP: u32 = 68;
pub const AUT_XCURSOR: u32 = 69;
pub const AUT_XFONT: u32 = 70;
pub const AUT_XGC: u32 = 71;
pub const AUT_XPIXMAP: u32 = 72;
pub const AUT_XPROPERTY: u32 = 73;
pub const AUT_XWINDOW: u32 = 74;
pub const AUT_XCLIENT: u32 = 75;
pub const AUT_CMD: u32 = 81;
pub const AUT_EXIT: u32 = 82;
pub const AUT_ZONENAME: u32 = 96;
pub const AUT_HOST: u32 = 112;
pub const AUT_ARG64: u32 = 113;
pub const AUT_RETURN64: u32 = 114;
pub const AUT_ATTR64: u32 = 115;
pub const AUT_HEADER64: u32 = 116;
pub const AUT_SUBJECT64: u32 = 117;
pub const AUT_PROCESS64: u32 = 119;
pub const AUT_OTHER_FILE64: u32 = 120;
pub const AUT_HEADER64_EX: u32 = 121;
pub const AUT_SUBJECT32_EX: u32 = 122;
pub const AUT_PROCESS32_EX: u32 = 123;
pub const AUT_SUBJECT64_EX: u32 = 124;
pub const AUT_PROCESS64_EX: u32 = 125;
pub const AUT_IN_ADDR_EX: u32 = 126;
pub const AUT_SOCKET_EX: u32 = 127;
pub const AUT_HEADER: u32 = 20;
pub const AUT_ARG: u32 = 45;
pub const AUT_RETURN: u32 = 39;
pub const AUT_SUBJECT: u32 = 36;
pub const AUT_PROCESS: u32 = 38;
pub const AUT_OTHER_FILE: u32 = 17;
pub const AUT_SOCKINET32: u32 = 128;
pub const AUT_SOCKINET128: u32 = 129;
pub const AUT_SOCKUNIX: u32 = 130;
pub const AUT_IDENTITY: u32 = 237;
pub const AUT_KRB5_PRINCIPAL: u32 = 238;
pub const AUT_CERT_HASH: u32 = 239;
pub const AUP_BINARY: u32 = 0;
pub const AUP_OCTAL: u32 = 1;
pub const AUP_DECIMAL: u32 = 2;
pub const AUP_HEX: u32 = 3;
pub const AUP_STRING: u32 = 4;
pub const AUR_BYTE: u32 = 0;
pub const AUR_CHAR: u32 = 0;
pub const AUR_SHORT: u32 = 1;
pub const AUR_INT32: u32 = 2;
pub const AUR_INT: u32 = 2;
pub const AUR_INT64: u32 = 3;
pub const PAD_NOTATTR: u32 = 16384;
pub const PAD_FAILURE: u32 = 32768;
pub const AUDIT_MAX_GROUPS: u32 = 16;
pub const AUDIT_HEADER_VERSION_OLDDARWIN: u32 = 1;
pub const AUDIT_HEADER_VERSION_SOLARIS: u32 = 2;
pub const AUDIT_HEADER_VERSION_TSOL25: u32 = 3;
pub const AUDIT_HEADER_VERSION_TSOL: u32 = 4;
pub const AUDIT_HEADER_VERSION_OPENBSM10: u32 = 10;
pub const AUDIT_HEADER_VERSION_OPENBSM11: u32 = 11;
pub const AUDIT_HEADER_VERSION_OPENBSM: u32 = 11;
pub const AUT_TRAILER_MAGIC: u32 = 45317;
pub const AUDIT_MAX_ARGS: u32 = 128;
pub const AUDIT_MAX_ENV: u32 = 128;
pub const AUDIT_MAX_CERT_HASH: u32 = 32;
pub const AUDIT_MAX_KRB5_PRINCIPAL: u32 = 32;
pub const AU_PRS_USECACHE: u32 = 0;
pub const AU_PRS_REREAD: u32 = 1;
pub const AU_PRS_SUCCESS: u32 = 1;
pub const AU_PRS_FAILURE: u32 = 2;
pub const AU_PRS_BOTH: u32 = 3;
pub const AUDIT_EVENT_FILE: &[u8; 26usize] = b"/etc/security/audit_event\0";
pub const AUDIT_CLASS_FILE: &[u8; 26usize] = b"/etc/security/audit_class\0";
pub const AUDIT_CONTROL_FILE: &[u8; 28usize] = b"/etc/security/audit_control\0";
pub const AUDIT_USER_FILE: &[u8; 25usize] = b"/etc/security/audit_user\0";
pub const DIR_CONTROL_ENTRY: &[u8; 4usize] = b"dir\0";
pub const MINFREE_CONTROL_ENTRY: &[u8; 8usize] = b"minfree\0";
pub const FILESZ_CONTROL_ENTRY: &[u8; 7usize] = b"filesz\0";
pub const FLAGS_CONTROL_ENTRY: &[u8; 6usize] = b"flags\0";
pub const NA_CONTROL_ENTRY: &[u8; 8usize] = b"naflags\0";
pub const POLICY_CONTROL_ENTRY: &[u8; 7usize] = b"policy\0";
pub const AUDIT_HOST_CONTROL_ENTRY: &[u8; 5usize] = b"host\0";
pub const EXPIRE_AFTER_CONTROL_ENTRY: &[u8; 13usize] = b"expire-after\0";
pub const MEMBER_SET_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 23usize] = b"member-set-sflags-mask\0";
pub const MEMBER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 25usize] = b"member-clear-sflags-mask\0";
pub const SUPERUSER_SET_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 26usize] = b"superuser-set-sflags-mask\0";
pub const SUPERUSER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 28usize] =
    b"superuser-clear-sflags-mask\0";
pub const AU_CLASS_NAME_MAX: u32 = 8;
pub const AU_CLASS_DESC_MAX: u32 = 72;
pub const AU_EVENT_NAME_MAX: u32 = 30;
pub const AU_EVENT_DESC_MAX: u32 = 50;
pub const AU_USER_NAME_MAX: u32 = 50;
pub const AU_LINE_MAX: u32 = 256;
pub const MAX_AUDITSTRING_LEN: u32 = 256;
pub const BSM_TEXTBUFSZ: u32 = 256;
pub const AU_TO_NO_WRITE: u32 = 0;
pub const AU_TO_WRITE: u32 = 1;
pub const AU_OFLAG_NONE: u32 = 0;
pub const AU_OFLAG_RAW: u32 = 1;
pub const AU_OFLAG_SHORT: u32 = 2;
pub const AU_OFLAG_XML: u32 = 4;
pub const AU_OFLAG_NORESOLVE: u32 = 8;
pub const __BSM_INTERNAL_NOTIFY_KEY: &[u8; 23usize] = b"com.apple.audit.change\0";
pub const AUDIT_OFF: u32 = 2;
pub const AUDIT_ON: u32 = 1;
pub const AUDIT_FILTER_SUCCESS: u32 = 0;
pub const AUDIT_FILTER_FAILURE: i32 = -1;
pub const AUDIT_FILTER_ATTACH_STRING: &[u8; 20usize] = b"audit_filter_attach\0";
pub const AUDIT_FILTER_REINIT_STRING: &[u8; 20usize] = b"audit_filter_reinit\0";
pub const AUDIT_FILTER_RECORD_STRING: &[u8; 20usize] = b"audit_filter_record\0";
pub const AUDIT_FILTER_RAWRECORD_STRING: &[u8; 23usize] = b"audit_filter_rawrecord\0";
pub const AUDIT_FILTER_DETACH_STRING: &[u8; 20usize] = b"audit_filter_detach\0";
pub const AUDIT_HEADER_SIZE: u32 = 18;
pub const AUDIT_TRAILER_SIZE: u32 = 7;
pub const MAX_AUDIT_IDENTITY_SIZE: u32 = 179;
pub const AUE_NULL: u32 = 0;
pub const AUE_EXIT: u32 = 1;
pub const AUE_FORK: u32 = 2;
pub const AUE_FORKALL: u32 = 2;
pub const AUE_OPEN: u32 = 3;
pub const AUE_CREAT: u32 = 4;
pub const AUE_LINK: u32 = 5;
pub const AUE_UNLINK: u32 = 6;
pub const AUE_DELETE: u32 = 6;
pub const AUE_EXEC: u32 = 7;
pub const AUE_CHDIR: u32 = 8;
pub const AUE_MKNOD: u32 = 9;
pub const AUE_CHMOD: u32 = 10;
pub const AUE_CHOWN: u32 = 11;
pub const AUE_UMOUNT: u32 = 12;
pub const AUE_JUNK: u32 = 13;
pub const AUE_ACCESS: u32 = 14;
pub const AUE_KILL: u32 = 15;
pub const AUE_STAT: u32 = 16;
pub const AUE_LSTAT: u32 = 17;
pub const AUE_ACCT: u32 = 18;
pub const AUE_MCTL: u32 = 19;
pub const AUE_REBOOT: u32 = 20;
pub const AUE_SYMLINK: u32 = 21;
pub const AUE_READLINK: u32 = 22;
pub const AUE_EXECVE: u32 = 23;
pub const AUE_CHROOT: u32 = 24;
pub const AUE_VFORK: u32 = 25;
pub const AUE_SETGROUPS: u32 = 26;
pub const AUE_SETPGRP: u32 = 27;
pub const AUE_SWAPON: u32 = 28;
pub const AUE_SETHOSTNAME: u32 = 29;
pub const AUE_FCNTL: u32 = 30;
pub const AUE_SETPRIORITY: u32 = 31;
pub const AUE_CONNECT: u32 = 32;
pub const AUE_ACCEPT: u32 = 33;
pub const AUE_BIND: u32 = 34;
pub const AUE_SETSOCKOPT: u32 = 35;
pub const AUE_VTRACE: u32 = 36;
pub const AUE_SETTIMEOFDAY: u32 = 37;
pub const AUE_FCHOWN: u32 = 38;
pub const AUE_FCHMOD: u32 = 39;
pub const AUE_SETREUID: u32 = 40;
pub const AUE_SETREGID: u32 = 41;
pub const AUE_RENAME: u32 = 42;
pub const AUE_TRUNCATE: u32 = 43;
pub const AUE_FTRUNCATE: u32 = 44;
pub const AUE_FLOCK: u32 = 45;
pub const AUE_SHUTDOWN: u32 = 46;
pub const AUE_MKDIR: u32 = 47;
pub const AUE_RMDIR: u32 = 48;
pub const AUE_UTIMES: u32 = 49;
pub const AUE_ADJTIME: u32 = 50;
pub const AUE_SETRLIMIT: u32 = 51;
pub const AUE_KILLPG: u32 = 52;
pub const AUE_NFS_SVC: u32 = 53;
pub const AUE_STATFS: u32 = 54;
pub const AUE_FSTATFS: u32 = 55;
pub const AUE_UNMOUNT: u32 = 56;
pub const AUE_ASYNC_DAEMON: u32 = 57;
pub const AUE_NFS_GETFH: u32 = 58;
pub const AUE_SETDOMAINNAME: u32 = 59;
pub const AUE_QUOTACTL: u32 = 60;
pub const AUE_EXPORTFS: u32 = 61;
pub const AUE_MOUNT: u32 = 62;
pub const AUE_SEMSYS: u32 = 63;
pub const AUE_MSGSYS: u32 = 64;
pub const AUE_SHMSYS: u32 = 65;
pub const AUE_BSMSYS: u32 = 66;
pub const AUE_RFSSYS: u32 = 67;
pub const AUE_FCHDIR: u32 = 68;
pub const AUE_FCHROOT: u32 = 69;
pub const AUE_VPIXSYS: u32 = 70;
pub const AUE_PATHCONF: u32 = 71;
pub const AUE_OPEN_R: u32 = 72;
pub const AUE_OPEN_RC: u32 = 73;
pub const AUE_OPEN_RT: u32 = 74;
pub const AUE_OPEN_RTC: u32 = 75;
pub const AUE_OPEN_W: u32 = 76;
pub const AUE_OPEN_WC: u32 = 77;
pub const AUE_OPEN_WT: u32 = 78;
pub const AUE_OPEN_WTC: u32 = 79;
pub const AUE_OPEN_RW: u32 = 80;
pub const AUE_OPEN_RWC: u32 = 81;
pub const AUE_OPEN_RWT: u32 = 82;
pub const AUE_OPEN_RWTC: u32 = 83;
pub const AUE_MSGCTL: u32 = 84;
pub const AUE_MSGCTL_RMID: u32 = 85;
pub const AUE_MSGCTL_SET: u32 = 86;
pub const AUE_MSGCTL_STAT: u32 = 87;
pub const AUE_MSGGET: u32 = 88;
pub const AUE_MSGRCV: u32 = 89;
pub const AUE_MSGSND: u32 = 90;
pub const AUE_SHMCTL: u32 = 91;
pub const AUE_SHMCTL_RMID: u32 = 92;
pub const AUE_SHMCTL_SET: u32 = 93;
pub const AUE_SHMCTL_STAT: u32 = 94;
pub const AUE_SHMGET: u32 = 95;
pub const AUE_SHMAT: u32 = 96;
pub const AUE_SHMDT: u32 = 97;
pub const AUE_SEMCTL: u32 = 98;
pub const AUE_SEMCTL_RMID: u32 = 99;
pub const AUE_SEMCTL_SET: u32 = 100;
pub const AUE_SEMCTL_STAT: u32 = 101;
pub const AUE_SEMCTL_GETNCNT: u32 = 102;
pub const AUE_SEMCTL_GETPID: u32 = 103;
pub const AUE_SEMCTL_GETVAL: u32 = 104;
pub const AUE_SEMCTL_GETALL: u32 = 105;
pub const AUE_SEMCTL_GETZCNT: u32 = 106;
pub const AUE_SEMCTL_SETVAL: u32 = 107;
pub const AUE_SEMCTL_SETALL: u32 = 108;
pub const AUE_SEMGET: u32 = 109;
pub const AUE_SEMOP: u32 = 110;
pub const AUE_CORE: u32 = 111;
pub const AUE_CLOSE: u32 = 112;
pub const AUE_SYSTEMBOOT: u32 = 113;
pub const AUE_ASYNC_DAEMON_EXIT: u32 = 114;
pub const AUE_NFSSVC_EXIT: u32 = 115;
pub const AUE_WRITEL: u32 = 128;
pub const AUE_WRITEVL: u32 = 129;
pub const AUE_GETAUID: u32 = 130;
pub const AUE_SETAUID: u32 = 131;
pub const AUE_GETAUDIT: u32 = 132;
pub const AUE_SETAUDIT: u32 = 133;
pub const AUE_GETUSERAUDIT: u32 = 134;
pub const AUE_SETUSERAUDIT: u32 = 135;
pub const AUE_AUDITSVC: u32 = 136;
pub const AUE_AUDITUSER: u32 = 137;
pub const AUE_AUDITON: u32 = 138;
pub const AUE_AUDITON_GTERMID: u32 = 139;
pub const AUE_AUDITON_STERMID: u32 = 140;
pub const AUE_AUDITON_GPOLICY: u32 = 141;
pub const AUE_AUDITON_SPOLICY: u32 = 142;
pub const AUE_AUDITON_GQCTRL: u32 = 145;
pub const AUE_AUDITON_SQCTRL: u32 = 146;
pub const AUE_GETKERNSTATE: u32 = 147;
pub const AUE_SETKERNSTATE: u32 = 148;
pub const AUE_GETPORTAUDIT: u32 = 149;
pub const AUE_AUDITSTAT: u32 = 150;
pub const AUE_REVOKE: u32 = 151;
pub const AUE_MAC: u32 = 152;
pub const AUE_ENTERPROM: u32 = 153;
pub const AUE_EXITPROM: u32 = 154;
pub const AUE_IFLOAT: u32 = 155;
pub const AUE_PFLOAT: u32 = 156;
pub const AUE_UPRIV: u32 = 157;
pub const AUE_IOCTL: u32 = 158;
pub const AUE_SOCKET: u32 = 183;
pub const AUE_SENDTO: u32 = 184;
pub const AUE_PIPE: u32 = 185;
pub const AUE_SOCKETPAIR: u32 = 186;
pub const AUE_SEND: u32 = 187;
pub const AUE_SENDMSG: u32 = 188;
pub const AUE_RECV: u32 = 189;
pub const AUE_RECVMSG: u32 = 190;
pub const AUE_RECVFROM: u32 = 191;
pub const AUE_READ: u32 = 192;
pub const AUE_GETDENTS: u32 = 193;
pub const AUE_LSEEK: u32 = 194;
pub const AUE_WRITE: u32 = 195;
pub const AUE_WRITEV: u32 = 196;
pub const AUE_NFS: u32 = 197;
pub const AUE_READV: u32 = 198;
pub const AUE_OSTAT: u32 = 199;
pub const AUE_SETUID: u32 = 200;
pub const AUE_STIME: u32 = 201;
pub const AUE_UTIME: u32 = 202;
pub const AUE_NICE: u32 = 203;
pub const AUE_OSETPGRP: u32 = 204;
pub const AUE_SETGID: u32 = 205;
pub const AUE_READL: u32 = 206;
pub const AUE_READVL: u32 = 207;
pub const AUE_FSTAT: u32 = 208;
pub const AUE_DUP2: u32 = 209;
pub const AUE_MMAP: u32 = 210;
pub const AUE_AUDIT: u32 = 211;
pub const AUE_PRIOCNTLSYS: u32 = 212;
pub const AUE_MUNMAP: u32 = 213;
pub const AUE_SETEGID: u32 = 214;
pub const AUE_SETEUID: u32 = 215;
pub const AUE_PUTMSG: u32 = 216;
pub const AUE_GETMSG: u32 = 217;
pub const AUE_PUTPMSG: u32 = 218;
pub const AUE_GETPMSG: u32 = 219;
pub const AUE_AUDITSYS: u32 = 220;
pub const AUE_AUDITON_GETKMASK: u32 = 221;
pub const AUE_AUDITON_SETKMASK: u32 = 222;
pub const AUE_AUDITON_GETCWD: u32 = 223;
pub const AUE_AUDITON_GETCAR: u32 = 224;
pub const AUE_AUDITON_GETSTAT: u32 = 225;
pub const AUE_AUDITON_SETSTAT: u32 = 226;
pub const AUE_AUDITON_SETUMASK: u32 = 227;
pub const AUE_AUDITON_SETSMASK: u32 = 228;
pub const AUE_AUDITON_GETCOND: u32 = 229;
pub const AUE_AUDITON_SETCOND: u32 = 230;
pub const AUE_AUDITON_GETCLASS: u32 = 231;
pub const AUE_AUDITON_SETCLASS: u32 = 232;
pub const AUE_FUSERS: u32 = 233;
pub const AUE_STATVFS: u32 = 234;
pub const AUE_XSTAT: u32 = 235;
pub const AUE_LXSTAT: u32 = 236;
pub const AUE_LCHOWN: u32 = 237;
pub const AUE_MEMCNTL: u32 = 238;
pub const AUE_SYSINFO: u32 = 239;
pub const AUE_XMKNOD: u32 = 240;
pub const AUE_FORK1: u32 = 241;
pub const AUE_MODCTL: u32 = 242;
pub const AUE_MODLOAD: u32 = 243;
pub const AUE_MODUNLOAD: u32 = 244;
pub const AUE_MODCONFIG: u32 = 245;
pub const AUE_MODADDMAJ: u32 = 246;
pub const AUE_SOCKACCEPT: u32 = 247;
pub const AUE_SOCKCONNECT: u32 = 248;
pub const AUE_SOCKSEND: u32 = 249;
pub const AUE_SOCKRECEIVE: u32 = 250;
pub const AUE_ACLSET: u32 = 251;
pub const AUE_FACLSET: u32 = 252;
pub const AUE_DOORFS: u32 = 253;
pub const AUE_DOORFS_DOOR_CALL: u32 = 254;
pub const AUE_DOORFS_DOOR_RETURN: u32 = 255;
pub const AUE_DOORFS_DOOR_CREATE: u32 = 256;
pub const AUE_DOORFS_DOOR_REVOKE: u32 = 257;
pub const AUE_DOORFS_DOOR_INFO: u32 = 258;
pub const AUE_DOORFS_DOOR_CRED: u32 = 259;
pub const AUE_DOORFS_DOOR_BIND: u32 = 260;
pub const AUE_DOORFS_DOOR_UNBIND: u32 = 261;
pub const AUE_P_ONLINE: u32 = 262;
pub const AUE_PROCESSOR_BIND: u32 = 263;
pub const AUE_INST_SYNC: u32 = 264;
pub const AUE_SOCKCONFIG: u32 = 265;
pub const AUE_SETAUDIT_ADDR: u32 = 266;
pub const AUE_GETAUDIT_ADDR: u32 = 267;
pub const AUE_UMOUNT2: u32 = 268;
pub const AUE_FSAT: u32 = 269;
pub const AUE_OPENAT_R: u32 = 270;
pub const AUE_OPENAT_RC: u32 = 271;
pub const AUE_OPENAT_RT: u32 = 272;
pub const AUE_OPENAT_RTC: u32 = 273;
pub const AUE_OPENAT_W: u32 = 274;
pub const AUE_OPENAT_WC: u32 = 275;
pub const AUE_OPENAT_WT: u32 = 276;
pub const AUE_OPENAT_WTC: u32 = 277;
pub const AUE_OPENAT_RW: u32 = 278;
pub const AUE_OPENAT_RWC: u32 = 279;
pub const AUE_OPENAT_RWT: u32 = 280;
pub const AUE_OPENAT_RWTC: u32 = 281;
pub const AUE_RENAMEAT: u32 = 282;
pub const AUE_FSTATAT: u32 = 283;
pub const AUE_FCHOWNAT: u32 = 284;
pub const AUE_FUTIMESAT: u32 = 285;
pub const AUE_UNLINKAT: u32 = 286;
pub const AUE_CLOCK_SETTIME: u32 = 287;
pub const AUE_NTP_ADJTIME: u32 = 288;
pub const AUE_SETPPRIV: u32 = 289;
pub const AUE_MODDEVPLCY: u32 = 290;
pub const AUE_MODADDPRIV: u32 = 291;
pub const AUE_CRYPTOADM: u32 = 292;
pub const AUE_CONFIGKSSL: u32 = 293;
pub const AUE_BRANDSYS: u32 = 294;
pub const AUE_PF_POLICY_ADDRULE: u32 = 295;
pub const AUE_PF_POLICY_DELRULE: u32 = 296;
pub const AUE_PF_POLICY_CLONE: u32 = 297;
pub const AUE_PF_POLICY_FLIP: u32 = 298;
pub const AUE_PF_POLICY_FLUSH: u32 = 299;
pub const AUE_PF_POLICY_ALGS: u32 = 300;
pub const AUE_PORTFS: u32 = 301;
pub const AUE_DARWIN_GETFSSTAT: u32 = 301;
pub const AUE_DARWIN_PTRACE: u32 = 302;
pub const AUE_DARWIN_CHFLAGS: u32 = 303;
pub const AUE_DARWIN_FCHFLAGS: u32 = 304;
pub const AUE_DARWIN_PROFILE: u32 = 305;
pub const AUE_DARWIN_KTRACE: u32 = 306;
pub const AUE_DARWIN_SETLOGIN: u32 = 307;
pub const AUE_DARWIN_REBOOT: u32 = 308;
pub const AUE_DARWIN_REVOKE: u32 = 309;
pub const AUE_DARWIN_UMASK: u32 = 310;
pub const AUE_DARWIN_MPROTECT: u32 = 311;
pub const AUE_DARWIN_SETPRIORITY: u32 = 312;
pub const AUE_DARWIN_SETTIMEOFDAY: u32 = 313;
pub const AUE_DARWIN_FLOCK: u32 = 314;
pub const AUE_DARWIN_MKFIFO: u32 = 315;
pub const AUE_DARWIN_POLL: u32 = 316;
pub const AUE_DARWIN_SOCKETPAIR: u32 = 317;
pub const AUE_DARWIN_FUTIMES: u32 = 318;
pub const AUE_DARWIN_SETSID: u32 = 319;
pub const AUE_DARWIN_SETPRIVEXEC: u32 = 320;
pub const AUE_DARWIN_NFSSVC: u32 = 321;
pub const AUE_DARWIN_GETFH: u32 = 322;
pub const AUE_DARWIN_QUOTACTL: u32 = 323;
pub const AUE_DARWIN_ADDPROFILE: u32 = 324;
pub const AUE_DARWIN_KDEBUGTRACE: u32 = 325;
pub const AUE_DARWIN_FSTAT: u32 = 326;
pub const AUE_DARWIN_FPATHCONF: u32 = 327;
pub const AUE_DARWIN_GETDIRENTRIES: u32 = 328;
pub const AUE_DARWIN_TRUNCATE: u32 = 329;
pub const AUE_DARWIN_FTRUNCATE: u32 = 330;
pub const AUE_DARWIN_SYSCTL: u32 = 331;
pub const AUE_DARWIN_MLOCK: u32 = 332;
pub const AUE_DARWIN_MUNLOCK: u32 = 333;
pub const AUE_DARWIN_UNDELETE: u32 = 334;
pub const AUE_DARWIN_GETATTRLIST: u32 = 335;
pub const AUE_DARWIN_SETATTRLIST: u32 = 336;
pub const AUE_DARWIN_GETDIRENTRIESATTR: u32 = 337;
pub const AUE_DARWIN_EXCHANGEDATA: u32 = 338;
pub const AUE_DARWIN_SEARCHFS: u32 = 339;
pub const AUE_DARWIN_MINHERIT: u32 = 340;
pub const AUE_DARWIN_SEMCONFIG: u32 = 341;
pub const AUE_DARWIN_SEMOPEN: u32 = 342;
pub const AUE_DARWIN_SEMCLOSE: u32 = 343;
pub const AUE_DARWIN_SEMUNLINK: u32 = 344;
pub const AUE_DARWIN_SHMOPEN: u32 = 345;
pub const AUE_DARWIN_SHMUNLINK: u32 = 346;
pub const AUE_DARWIN_LOADSHFILE: u32 = 347;
pub const AUE_DARWIN_RESETSHFILE: u32 = 348;
pub const AUE_DARWIN_NEWSYSTEMSHREG: u32 = 349;
pub const AUE_DARWIN_PTHREADKILL: u32 = 350;
pub const AUE_DARWIN_PTHREADSIGMASK: u32 = 351;
pub const AUE_DARWIN_AUDITCTL: u32 = 352;
pub const AUE_DARWIN_RFORK: u32 = 353;
pub const AUE_DARWIN_LCHMOD: u32 = 354;
pub const AUE_DARWIN_SWAPOFF: u32 = 355;
pub const AUE_DARWIN_INITPROCESS: u32 = 356;
pub const AUE_DARWIN_MAPFD: u32 = 357;
pub const AUE_DARWIN_TASKFORPID: u32 = 358;
pub const AUE_DARWIN_PIDFORTASK: u32 = 359;
pub const AUE_DARWIN_SYSCTL_NONADMIN: u32 = 360;
pub const AUE_DARWIN_COPYFILE: u32 = 361;
pub const AUE_TRACKERACTION: u32 = 362;
pub const AUE_GETFSSTAT: u32 = 43001;
pub const AUE_PTRACE: u32 = 43002;
pub const AUE_CHFLAGS: u32 = 43003;
pub const AUE_FCHFLAGS: u32 = 43004;
pub const AUE_PROFILE: u32 = 43005;
pub const AUE_KTRACE: u32 = 43006;
pub const AUE_SETLOGIN: u32 = 43007;
pub const AUE_OPENBSM_REVOKE: u32 = 43008;
pub const AUE_UMASK: u32 = 43009;
pub const AUE_MPROTECT: u32 = 43010;
pub const AUE_MKFIFO: u32 = 43011;
pub const AUE_POLL: u32 = 43012;
pub const AUE_FUTIMES: u32 = 43013;
pub const AUE_SETSID: u32 = 43014;
pub const AUE_SETPRIVEXEC: u32 = 43015;
pub const AUE_ADDPROFILE: u32 = 43016;
pub const AUE_KDEBUGTRACE: u32 = 43017;
pub const AUE_KDBUGTRACE: u32 = 43017;
pub const AUE_OPENBSM_FSTAT: u32 = 43018;
pub const AUE_FPATHCONF: u32 = 43019;
pub const AUE_GETDIRENTRIES: u32 = 43020;
pub const AUE_SYSCTL: u32 = 43021;
pub const AUE_MLOCK: u32 = 43022;
pub const AUE_MUNLOCK: u32 = 43023;
pub const AUE_UNDELETE: u32 = 43024;
pub const AUE_GETATTRLIST: u32 = 43025;
pub const AUE_SETATTRLIST: u32 = 43026;
pub const AUE_GETDIRENTRIESATTR: u32 = 43027;
pub const AUE_EXCHANGEDATA: u32 = 43028;
pub const AUE_SEARCHFS: u32 = 43029;
pub const AUE_MINHERIT: u32 = 43030;
pub const AUE_SEMCONFIG: u32 = 43031;
pub const AUE_SEMOPEN: u32 = 43032;
pub const AUE_SEMCLOSE: u32 = 43033;
pub const AUE_SEMUNLINK: u32 = 43034;
pub const AUE_SHMOPEN: u32 = 43035;
pub const AUE_SHMUNLINK: u32 = 43036;
pub const AUE_LOADSHFILE: u32 = 43037;
pub const AUE_RESETSHFILE: u32 = 43038;
pub const AUE_NEWSYSTEMSHREG: u32 = 43039;
pub const AUE_PTHREADKILL: u32 = 43040;
pub const AUE_PTHREADSIGMASK: u32 = 43041;
pub const AUE_AUDITCTL: u32 = 43042;
pub const AUE_RFORK: u32 = 43043;
pub const AUE_LCHMOD: u32 = 43044;
pub const AUE_SWAPOFF: u32 = 43045;
pub const AUE_INITPROCESS: u32 = 43046;
pub const AUE_MAPFD: u32 = 43047;
pub const AUE_TASKFORPID: u32 = 43048;
pub const AUE_PIDFORTASK: u32 = 43049;
pub const AUE_SYSCTL_NONADMIN: u32 = 43050;
pub const AUE_COPYFILE: u32 = 43051;
pub const AUE_LUTIMES: u32 = 43052;
pub const AUE_LCHFLAGS: u32 = 43053;
pub const AUE_SENDFILE: u32 = 43054;
pub const AUE_USELIB: u32 = 43055;
pub const AUE_GETRESUID: u32 = 43056;
pub const AUE_SETRESUID: u32 = 43057;
pub const AUE_GETRESGID: u32 = 43058;
pub const AUE_SETRESGID: u32 = 43059;
pub const AUE_WAIT4: u32 = 43060;
pub const AUE_LGETFH: u32 = 43061;
pub const AUE_FHSTATFS: u32 = 43062;
pub const AUE_FHOPEN: u32 = 43063;
pub const AUE_FHSTAT: u32 = 43064;
pub const AUE_JAIL: u32 = 43065;
pub const AUE_EACCESS: u32 = 43066;
pub const AUE_KQUEUE: u32 = 43067;
pub const AUE_KEVENT: u32 = 43068;
pub const AUE_FSYNC: u32 = 43069;
pub const AUE_NMOUNT: u32 = 43070;
pub const AUE_BDFLUSH: u32 = 43071;
pub const AUE_SETFSUID: u32 = 43072;
pub const AUE_SETFSGID: u32 = 43073;
pub const AUE_PERSONALITY: u32 = 43074;
pub const AUE_SCHED_GETSCHEDULER: u32 = 43075;
pub const AUE_SCHED_SETSCHEDULER: u32 = 43076;
pub const AUE_PRCTL: u32 = 43077;
pub const AUE_GETCWD: u32 = 43078;
pub const AUE_CAPGET: u32 = 43079;
pub const AUE_CAPSET: u32 = 43080;
pub const AUE_PIVOT_ROOT: u32 = 43081;
pub const AUE_RTPRIO: u32 = 43082;
pub const AUE_SCHED_GETPARAM: u32 = 43083;
pub const AUE_SCHED_SETPARAM: u32 = 43084;
pub const AUE_SCHED_GET_PRIORITY_MAX: u32 = 43085;
pub const AUE_SCHED_GET_PRIORITY_MIN: u32 = 43086;
pub const AUE_SCHED_RR_GET_INTERVAL: u32 = 43087;
pub const AUE_ACL_GET_FILE: u32 = 43088;
pub const AUE_ACL_SET_FILE: u32 = 43089;
pub const AUE_ACL_GET_FD: u32 = 43090;
pub const AUE_ACL_SET_FD: u32 = 43091;
pub const AUE_ACL_DELETE_FILE: u32 = 43092;
pub const AUE_ACL_DELETE_FD: u32 = 43093;
pub const AUE_ACL_CHECK_FILE: u32 = 43094;
pub const AUE_ACL_CHECK_FD: u32 = 43095;
pub const AUE_ACL_GET_LINK: u32 = 43096;
pub const AUE_ACL_SET_LINK: u32 = 43097;
pub const AUE_ACL_DELETE_LINK: u32 = 43098;
pub const AUE_ACL_CHECK_LINK: u32 = 43099;
pub const AUE_SYSARCH: u32 = 43100;
pub const AUE_EXTATTRCTL: u32 = 43101;
pub const AUE_EXTATTR_GET_FILE: u32 = 43102;
pub const AUE_EXTATTR_SET_FILE: u32 = 43103;
pub const AUE_EXTATTR_LIST_FILE: u32 = 43104;
pub const AUE_EXTATTR_DELETE_FILE: u32 = 43105;
pub const AUE_EXTATTR_GET_FD: u32 = 43106;
pub const AUE_EXTATTR_SET_FD: u32 = 43107;
pub const AUE_EXTATTR_LIST_FD: u32 = 43108;
pub const AUE_EXTATTR_DELETE_FD: u32 = 43109;
pub const AUE_EXTATTR_GET_LINK: u32 = 43110;
pub const AUE_EXTATTR_SET_LINK: u32 = 43111;
pub const AUE_EXTATTR_LIST_LINK: u32 = 43112;
pub const AUE_EXTATTR_DELETE_LINK: u32 = 43113;
pub const AUE_KENV: u32 = 43114;
pub const AUE_JAIL_ATTACH: u32 = 43115;
pub const AUE_SYSCTL_WRITE: u32 = 43116;
pub const AUE_IOPERM: u32 = 43117;
pub const AUE_READDIR: u32 = 43118;
pub const AUE_IOPL: u32 = 43119;
pub const AUE_VM86: u32 = 43120;
pub const AUE_MAC_GET_PROC: u32 = 43121;
pub const AUE_MAC_SET_PROC: u32 = 43122;
pub const AUE_MAC_GET_FD: u32 = 43123;
pub const AUE_MAC_GET_FILE: u32 = 43124;
pub const AUE_MAC_SET_FD: u32 = 43125;
pub const AUE_MAC_SET_FILE: u32 = 43126;
pub const AUE_MAC_SYSCALL: u32 = 43127;
pub const AUE_MAC_GET_PID: u32 = 43128;
pub const AUE_MAC_GET_LINK: u32 = 43129;
pub const AUE_MAC_SET_LINK: u32 = 43130;
pub const AUE_MAC_EXECVE: u32 = 43131;
pub const AUE_GETPATH_FROMFD: u32 = 43132;
pub const AUE_GETPATH_FROMADDR: u32 = 43133;
pub const AUE_MQ_OPEN: u32 = 43134;
pub const AUE_MQ_SETATTR: u32 = 43135;
pub const AUE_MQ_TIMEDRECEIVE: u32 = 43136;
pub const AUE_MQ_TIMEDSEND: u32 = 43137;
pub const AUE_MQ_NOTIFY: u32 = 43138;
pub const AUE_MQ_UNLINK: u32 = 43139;
pub const AUE_LISTEN: u32 = 43140;
pub const AUE_MLOCKALL: u32 = 43141;
pub const AUE_MUNLOCKALL: u32 = 43142;
pub const AUE_CLOSEFROM: u32 = 43143;
pub const AUE_FEXECVE: u32 = 43144;
pub const AUE_FACCESSAT: u32 = 43145;
pub const AUE_FCHMODAT: u32 = 43146;
pub const AUE_LINKAT: u32 = 43147;
pub const AUE_MKDIRAT: u32 = 43148;
pub const AUE_MKFIFOAT: u32 = 43149;
pub const AUE_MKNODAT: u32 = 43150;
pub const AUE_READLINKAT: u32 = 43151;
pub const AUE_SYMLINKAT: u32 = 43152;
pub const AUE_MAC_GETFSSTAT: u32 = 43153;
pub const AUE_MAC_GET_MOUNT: u32 = 43154;
pub const AUE_MAC_GET_LCID: u32 = 43155;
pub const AUE_MAC_GET_LCTX: u32 = 43156;
pub const AUE_MAC_SET_LCTX: u32 = 43157;
pub const AUE_MAC_MOUNT: u32 = 43158;
pub const AUE_GETLCID: u32 = 43159;
pub const AUE_SETLCID: u32 = 43160;
pub const AUE_TASKNAMEFORPID: u32 = 43161;
pub const AUE_ACCESS_EXTENDED: u32 = 43162;
pub const AUE_CHMOD_EXTENDED: u32 = 43163;
pub const AUE_FCHMOD_EXTENDED: u32 = 43164;
pub const AUE_FSTAT_EXTENDED: u32 = 43165;
pub const AUE_LSTAT_EXTENDED: u32 = 43166;
pub const AUE_MKDIR_EXTENDED: u32 = 43167;
pub const AUE_MKFIFO_EXTENDED: u32 = 43168;
pub const AUE_OPEN_EXTENDED: u32 = 43169;
pub const AUE_OPEN_EXTENDED_R: u32 = 43170;
pub const AUE_OPEN_EXTENDED_RC: u32 = 43171;
pub const AUE_OPEN_EXTENDED_RT: u32 = 43172;
pub const AUE_OPEN_EXTENDED_RTC: u32 = 43173;
pub const AUE_OPEN_EXTENDED_W: u32 = 43174;
pub const AUE_OPEN_EXTENDED_WC: u32 = 43175;
pub const AUE_OPEN_EXTENDED_WT: u32 = 43176;
pub const AUE_OPEN_EXTENDED_WTC: u32 = 43177;
pub const AUE_OPEN_EXTENDED_RW: u32 = 43178;
pub const AUE_OPEN_EXTENDED_RWC: u32 = 43179;
pub const AUE_OPEN_EXTENDED_RWT: u32 = 43180;
pub const AUE_OPEN_EXTENDED_RWTC: u32 = 43181;
pub const AUE_STAT_EXTENDED: u32 = 43182;
pub const AUE_UMASK_EXTENDED: u32 = 43183;
pub const AUE_OPENAT: u32 = 43184;
pub const AUE_POSIX_OPENPT: u32 = 43185;
pub const AUE_CAP_NEW: u32 = 43186;
pub const AUE_CAP_GETRIGHTS: u32 = 43187;
pub const AUE_CAP_ENTER: u32 = 43188;
pub const AUE_CAP_GETMODE: u32 = 43189;
pub const AUE_POSIX_SPAWN: u32 = 43190;
pub const AUE_FSGETPATH: u32 = 43191;
pub const AUE_PREAD: u32 = 43192;
pub const AUE_PWRITE: u32 = 43193;
pub const AUE_FSCTL: u32 = 43194;
pub const AUE_FFSCTL: u32 = 43195;
pub const AUE_LPATHCONF: u32 = 43196;
pub const AUE_PDFORK: u32 = 43197;
pub const AUE_PDKILL: u32 = 43198;
pub const AUE_PDGETPID: u32 = 43199;
pub const AUE_PDWAIT: u32 = 43200;
pub const AUE_GETATTRLISTBULK: u32 = 43201;
pub const AUE_GETATTRLISTAT: u32 = 43202;
pub const AUE_OPENBYID: u32 = 43203;
pub const AUE_OPENBYID_R: u32 = 43204;
pub const AUE_OPENBYID_RT: u32 = 43205;
pub const AUE_OPENBYID_W: u32 = 43206;
pub const AUE_OPENBYID_WT: u32 = 43207;
pub const AUE_OPENBYID_RW: u32 = 43208;
pub const AUE_OPENBYID_RWT: u32 = 43209;
pub const AUE_CLONEFILEAT: u32 = 43210;
pub const AUE_FCLONEFILEAT: u32 = 43211;
pub const AUE_SETATTRLISTAT: u32 = 43212;
pub const AUE_FMOUNT: u32 = 43213;
pub const AUE_FSGETPATH_EXTENDED: u32 = 43214;
pub const AUE_DBGPORTFORPID: u32 = 43215;
pub const AUE_PREADV: u32 = 43216;
pub const AUE_PWRITEV: u32 = 43217;
pub const AUE_FREADLINK: u32 = 43218;
pub const AUE_SESSION_START: u32 = 44901;
pub const AUE_SESSION_UPDATE: u32 = 44902;
pub const AUE_SESSION_END: u32 = 44903;
pub const AUE_SESSION_CLOSE: u32 = 44904;
pub const AUE_O_CREAT: u32 = 83;
pub const AUE_O_EXECVE: u32 = 0;
pub const AUE_O_SBREAK: u32 = 0;
pub const AUE_O_LSEEK: u32 = 0;
pub const AUE_O_MOUNT: u32 = 0;
pub const AUE_O_UMOUNT: u32 = 0;
pub const AUE_O_STAT: u32 = 16;
pub const AUE_O_LSTAT: u32 = 17;
pub const AUE_O_FSTAT: u32 = 208;
pub const AUE_O_GETPAGESIZE: u32 = 0;
pub const AUE_O_VREAD: u32 = 0;
pub const AUE_O_VWRITE: u32 = 0;
pub const AUE_O_MMAP: u32 = 210;
pub const AUE_O_VADVISE: u32 = 0;
pub const AUE_O_VHANGUP: u32 = 0;
pub const AUE_O_VLIMIT: u32 = 0;
pub const AUE_O_WAIT: u32 = 0;
pub const AUE_O_GETHOSTNAME: u32 = 0;
pub const AUE_O_SETHOSTNAME: u32 = 43021;
pub const AUE_O_GETDOPT: u32 = 0;
pub const AUE_O_SETDOPT: u32 = 0;
pub const AUE_O_ACCEPT: u32 = 0;
pub const AUE_O_SEND: u32 = 188;
pub const AUE_O_RECV: u32 = 190;
pub const AUE_O_VTIMES: u32 = 0;
pub const AUE_O_SIGVEC: u32 = 0;
pub const AUE_O_SIGBLOCK: u32 = 0;
pub const AUE_O_SIGSETMASK: u32 = 0;
pub const AUE_O_SIGSTACK: u32 = 0;
pub const AUE_O_RECVMSG: u32 = 190;
pub const AUE_O_SENDMSG: u32 = 188;
pub const AUE_O_VTRACE: u32 = 0;
pub const AUE_O_RESUBA: u32 = 0;
pub const AUE_O_RECVFROM: u32 = 191;
pub const AUE_O_SETREUID: u32 = 40;
pub const AUE_O_SETREGID: u32 = 41;
pub const AUE_O_GETDIRENTRIES: u32 = 43020;
pub const AUE_O_TRUNCATE: u32 = 43;
pub const AUE_O_FTRUNCATE: u32 = 44;
pub const AUE_O_GETPEERNAME: u32 = 0;
pub const AUE_O_GETHOSTID: u32 = 0;
pub const AUE_O_SETHOSTID: u32 = 0;
pub const AUE_O_GETRLIMIT: u32 = 0;
pub const AUE_O_SETRLIMIT: u32 = 51;
pub const AUE_O_KILLPG: u32 = 15;
pub const AUE_O_SETQUOTA: u32 = 0;
pub const AUE_O_QUOTA: u32 = 0;
pub const AUE_O_GETSOCKNAME: u32 = 0;
pub const AUE_O_ASYNCDAEMON: u32 = 0;
pub const AUE_O_GETDOMAINNAME: u32 = 0;
pub const AUE_O_SETDOMAINNAME: u32 = 43021;
pub const AUE_O_PCFS_MOUNT: u32 = 0;
pub const AUE_O_EXPORTFS: u32 = 0;
pub const AUE_O_USTATE: u32 = 0;
pub const AUE_O_WAIT3: u32 = 0;
pub const AUE_O_RPAUSE: u32 = 0;
pub const AUE_O_GETDENTS: u32 = 0;
pub const AUE_ATGETMSG: u32 = 0;
pub const AUE_ATPUTMSG: u32 = 0;
pub const AUE_ATSOCKET: u32 = 0;
pub const AUE_ATPGETREQ: u32 = 0;
pub const AUE_ATPGETRSP: u32 = 0;
pub const AUE_ATPSNDREQ: u32 = 0;
pub const AUE_ATPSNDRSP: u32 = 0;
pub const AUE_BSDTHREADCREATE: u32 = 0;
pub const AUE_BSDTHREADTERMINATE: u32 = 0;
pub const AUE_BSDTHREADREGISTER: u32 = 0;
pub const AUE_CSOPS: u32 = 0;
pub const AUE_DUP: u32 = 0;
pub const AUE_FDATASYNC: u32 = 0;
pub const AUE_FGETATTRLIST: u32 = 0;
pub const AUE_FGETXATTR: u32 = 0;
pub const AUE_FLISTXATTR: u32 = 0;
pub const AUE_FREMOVEXATTR: u32 = 0;
pub const AUE_FSETATTRLIST: u32 = 0;
pub const AUE_FSETXATTR: u32 = 0;
pub const AUE_FSTATFS64: u32 = 0;
pub const AUE_FSTATV: u32 = 0;
pub const AUE_FSTAT64: u32 = 0;
pub const AUE_FSTAT64_EXTENDED: u32 = 0;
pub const AUE_GCCONTROL: u32 = 0;
pub const AUE_GETDIRENTRIES64: u32 = 0;
pub const AUE_GETDTABLESIZE: u32 = 0;
pub const AUE_GETEGID: u32 = 0;
pub const AUE_GETEUID: u32 = 0;
pub const AUE_GETFSSTAT64: u32 = 0;
pub const AUE_GETGID: u32 = 0;
pub const AUE_GETGROUPS: u32 = 0;
pub const AUE_GETITIMER: u32 = 0;
pub const AUE_GETLOGIN: u32 = 0;
pub const AUE_GETPEERNAME: u32 = 0;
pub const AUE_GETPGID: u32 = 0;
pub const AUE_GETPGRP: u32 = 0;
pub const AUE_GETPID: u32 = 0;
pub const AUE_GETPPID: u32 = 0;
pub const AUE_GETPRIORITY: u32 = 0;
pub const AUE_GETRLIMIT: u32 = 0;
pub const AUE_GETRUSAGE: u32 = 0;
pub const AUE_GETSGROUPS: u32 = 0;
pub const AUE_GETSID: u32 = 0;
pub const AUE_GETSOCKNAME: u32 = 0;
pub const AUE_GETTIMEOFDAY: u32 = 0;
pub const AUE_GETTID: u32 = 0;
pub const AUE_GETUID: u32 = 0;
pub const AUE_GETSOCKOPT: u32 = 0;
pub const AUE_GETWGROUPS: u32 = 0;
pub const AUE_GETXATTR: u32 = 0;
pub const AUE_IDENTITYSVC: u32 = 0;
pub const AUE_INITGROUPS: u32 = 0;
pub const AUE_IOPOLICYSYS: u32 = 0;
pub const AUE_ISSETUGID: u32 = 0;
pub const AUE_LEDGER: u32 = 0;
pub const AUE_LIOLISTIO: u32 = 0;
pub const AUE_LISTXATTR: u32 = 0;
pub const AUE_LSTATV: u32 = 0;
pub const AUE_LSTAT64: u32 = 0;
pub const AUE_LSTAT64_EXTENDED: u32 = 0;
pub const AUE_MADVISE: u32 = 0;
pub const AUE_MINCORE: u32 = 0;
pub const AUE_MKCOMPLEX: u32 = 0;
pub const AUE_MSGCL: u32 = 0;
pub const AUE_MSYNC: u32 = 0;
pub const AUE_NECP: u32 = 0;
pub const AUE_NETAGENT: u32 = 0;
pub const AUE_PROCINFO: u32 = 0;
pub const AUE_PTHREADCANCELED: u32 = 0;
pub const AUE_PTHREADCHDIR: u32 = 0;
pub const AUE_PTHREADCONDBROADCAST: u32 = 0;
pub const AUE_PTHREADCONDDESTORY: u32 = 0;
pub const AUE_PTHREADCONDINIT: u32 = 0;
pub const AUE_PTHREADCONDSIGNAL: u32 = 0;
pub const AUE_PTHREADCONDWAIT: u32 = 0;
pub const AUE_PTHREADFCHDIR: u32 = 0;
pub const AUE_PTHREADMARK: u32 = 0;
pub const AUE_PTHREADMUTEXDESTROY: u32 = 0;
pub const AUE_PTHREADMUTEXINIT: u32 = 0;
pub const AUE_PTHREADMUTEXTRYLOCK: u32 = 0;
pub const AUE_PTHREADMUTEXUNLOCK: u32 = 0;
pub const AUE_REMOVEXATTR: u32 = 0;
pub const AUE_SBRK: u32 = 0;
pub const AUE_SELECT: u32 = 0;
pub const AUE_SEMDESTROY: u32 = 0;
pub const AUE_SEMGETVALUE: u32 = 0;
pub const AUE_SEMINIT: u32 = 0;
pub const AUE_SEMPOST: u32 = 0;
pub const AUE_SEMTRYWAIT: u32 = 0;
pub const AUE_SEMWAIT: u32 = 0;
pub const AUE_SEMWAITSIGNAL: u32 = 0;
pub const AUE_SETITIMER: u32 = 0;
pub const AUE_SETSGROUPS: u32 = 0;
pub const AUE_SETTID: u32 = 0;
pub const AUE_SETTIDWITHPID: u32 = 0;
pub const AUE_SETWGROUPS: u32 = 0;
pub const AUE_SETXATTR: u32 = 0;
pub const AUE_SHAREDREGIONCHECK: u32 = 0;
pub const AUE_SHAREDREGIONMAP: u32 = 0;
pub const AUE_SIGACTION: u32 = 0;
pub const AUE_SIGALTSTACK: u32 = 0;
pub const AUE_SIGPENDING: u32 = 0;
pub const AUE_SIGPROCMASK: u32 = 0;
pub const AUE_SIGRETURN: u32 = 0;
pub const AUE_SIGSUSPEND: u32 = 0;
pub const AUE_SIGWAIT: u32 = 0;
pub const AUE_SSTK: u32 = 0;
pub const AUE_STACKSNAPSHOT: u32 = 0;
pub const AUE_STATFS64: u32 = 0;
pub const AUE_STATV: u32 = 0;
pub const AUE_STAT64: u32 = 0;
pub const AUE_STAT64_EXTENDED: u32 = 0;
pub const AUE_SYNC: u32 = 0;
pub const AUE_SYSCALL: u32 = 0;
pub const AUE_TABLE: u32 = 0;
pub const AUE_VMPRESSUREMONITOR: u32 = 0;
pub const AUE_WAITID: u32 = 0;
pub const AUE_WORKQOPEN: u32 = 0;
pub const AUE_WORKQOPS: u32 = 0;
pub const AUE_WORKLOOPCTL: u32 = 0;
pub const AUE_PERSONA: u32 = 0;
pub const AUE_USRCTL: u32 = 0;
pub const AUE_NEXUS: u32 = 0;
pub const AUE_CHANNEL: u32 = 0;
pub const AUE_NET: u32 = 0;
pub const AUE_TASKREADFORPID: u32 = 0;
pub const AUE_TASKINSPECTFORPID: u32 = 0;
pub const AUE_DEBUG_SYSCALL_REJECT: u32 = 0;
pub const AUE_DEBUG_SYSCALL_REJECT_CONFIG: u32 = 0;
pub const AUDIT_SDEV_PATH: &[u8; 19usize] = b"/dev/auditsessions\0";
pub const BSM_SOCK_DGRAM: u32 = 1;
pub const BSM_SOCK_STREAM: u32 = 2;
pub const BSM_SOCK_RAW: u32 = 4;
pub const BSM_SOCK_RDM: u32 = 5;
pub const BSM_SOCK_SEQPACKET: u32 = 6;
pub const BSM_SOCK_UNKNOWN: u32 = 500;
pub const AUE_at_create: u32 = 6144;
pub const AUE_at_delete: u32 = 6145;
pub const AUE_at_perm: u32 = 6146;
pub const AUE_cron_invoke: u32 = 6147;
pub const AUE_crontab_create: u32 = 6148;
pub const AUE_crontab_delete: u32 = 6149;
pub const AUE_crontab_perm: u32 = 6150;
pub const AUE_inetd_connect: u32 = 6151;
pub const AUE_login: u32 = 6152;
pub const AUE_logout: u32 = 6153;
pub const AUE_telnet: u32 = 6154;
pub const AUE_rlogin: u32 = 6155;
pub const AUE_mountd_mount: u32 = 6156;
pub const AUE_mountd_umount: u32 = 6157;
pub const AUE_rshd: u32 = 6158;
pub const AUE_su: u32 = 6159;
pub const AUE_halt: u32 = 6160;
pub const AUE_reboot: u32 = 6161;
pub const AUE_rexecd: u32 = 6162;
pub const AUE_passwd: u32 = 6163;
pub const AUE_rexd: u32 = 6164;
pub const AUE_ftpd: u32 = 6165;
pub const AUE_init: u32 = 6166;
pub const AUE_uadmin: u32 = 6167;
pub const AUE_shutdown: u32 = 6168;
pub const AUE_poweroff: u32 = 6169;
pub const AUE_crontab_mod: u32 = 6170;
pub const AUE_ftpd_logout: u32 = 6171;
pub const AUE_ssh: u32 = 6172;
pub const AUE_role_login: u32 = 6173;
pub const AUE_prof_cmd: u32 = 6180;
pub const AUE_filesystem_add: u32 = 6181;
pub const AUE_filesystem_delete: u32 = 6182;
pub const AUE_filesystem_modify: u32 = 6183;
pub const AUE_allocate_succ: u32 = 6200;
pub const AUE_allocate_fail: u32 = 6201;
pub const AUE_deallocate_succ: u32 = 6202;
pub const AUE_deallocate_fail: u32 = 6203;
pub const AUE_listdevice_succ: u32 = 6205;
pub const AUE_listdevice_fail: u32 = 6206;
pub const AUE_create_user: u32 = 6207;
pub const AUE_modify_user: u32 = 6208;
pub const AUE_delete_user: u32 = 6209;
pub const AUE_disable_user: u32 = 6210;
pub const AUE_enable_user: u32 = 6211;
pub const AUE_newgrp_login: u32 = 6212;
pub const AUE_admin_authentication: u32 = 6213;
pub const AUE_kadmind_auth: u32 = 6214;
pub const AUE_kadmind_unauth: u32 = 6215;
pub const AUE_krb5kdc_as_req: u32 = 6216;
pub const AUE_krb5kdc_tgs_req: u32 = 6217;
pub const AUE_krb5kdc_tgs_req_2ndtktmm: u32 = 6218;
pub const AUE_krb5kdc_tgs_req_alt_tgt: u32 = 6219;
pub const AUE_DARWIN_audit_startup: u32 = 6171;
pub const AUE_DARWIN_audit_shutdown: u32 = 6172;
pub const AUE_DARWIN_sudo: u32 = 6300;
pub const AUE_DARWIN_modify_password: u32 = 6501;
pub const AUE_DARWIN_create_group: u32 = 6511;
pub const AUE_DARWIN_delete_group: u32 = 6512;
pub const AUE_DARWIN_modify_group: u32 = 6513;
pub const AUE_DARWIN_add_to_group: u32 = 6514;
pub const AUE_DARWIN_remove_from_group: u32 = 6515;
pub const AUE_DARWIN_revoke_obj: u32 = 6521;
pub const AUE_DARWIN_lw_login: u32 = 6600;
pub const AUE_DARWIN_lw_logout: u32 = 6601;
pub const AUE_DARWIN_auth_user: u32 = 7000;
pub const AUE_DARWIN_ssconn: u32 = 7001;
pub const AUE_DARWIN_ssauthorize: u32 = 7002;
pub const AUE_DARWIN_ssauthint: u32 = 7003;
pub const AUE_openssh: u32 = 32800;
pub const AUE_audit_startup: u32 = 45000;
pub const AUE_audit_shutdown: u32 = 45001;
pub const AUE_modify_password: u32 = 45014;
pub const AUE_create_group: u32 = 45015;
pub const AUE_delete_group: u32 = 45016;
pub const AUE_modify_group: u32 = 45017;
pub const AUE_add_to_group: u32 = 45018;
pub const AUE_remove_from_group: u32 = 45019;
pub const AUE_revoke_obj: u32 = 45020;
pub const AUE_lw_login: u32 = 45021;
pub const AUE_lw_logout: u32 = 45022;
pub const AUE_auth_user: u32 = 45023;
pub const AUE_ssconn: u32 = 45024;
pub const AUE_ssauthorize: u32 = 45025;
pub const AUE_ssauthint: u32 = 45026;
pub const AUE_calife: u32 = 45027;
pub const AUE_sudo: u32 = 45028;
pub const AUE_audit_recovery: u32 = 45029;
pub const AUE_ssauthmech: u32 = 45030;
pub const AUE_sec_assessment: u32 = 45031;
pub const HFSPLUSMETADATAFOLDER: &[u8; 30usize] =
    b"\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80HFS+ Private Data\0";
pub const HFSPLUS_DIR_METADATA_FOLDER: &[u8; 30usize] = b".HFS+ Private Directory Data\r\0";
pub const HFS_INODE_PREFIX: &[u8; 6usize] = b"iNode\0";
pub const HFS_DELETE_PREFIX: &[u8; 5usize] = b"temp\0";
pub const HFS_DIRINODE_PREFIX: &[u8; 5usize] = b"dir_\0";
pub const FIRST_LINK_XATTR_NAME: &[u8; 31usize] = b"com.apple.system.hfs.firstlink\0";
pub const HFS_UUID_NAMESPACE_ID: [u8; 17usize] = [
    179u8, 226u8, 15u8, 57u8, 242u8, 146u8, 17u8, 214u8, 151u8, 164u8, 0u8, 48u8, 101u8, 67u8,
    236u8, 172u8, 0u8,
];
pub const EXTJNL_CONTENT_TYPE_UUID: &[u8; 37usize] = b"4A6F7572-6E61-11AA-AA11-00306543ECAC\0";
pub const FSOPT_NOFOLLOW: u32 = 1;
pub const FSOPT_NOINMEMUPDATE: u32 = 2;
pub const FSOPT_REPORT_FULLSIZE: u32 = 4;
pub const FSOPT_PACK_INVAL_ATTRS: u32 = 8;
pub const FSOPT_ATTR_CMN_EXTENDED: u32 = 32;
pub const FSOPT_RETURN_REALDEV: u32 = 512;
pub const FSOPT_NOFOLLOW_ANY: u32 = 2048;
pub const SEARCHFS_MAX_SEARCHPARMS: u32 = 4096;
pub const ATTR_BIT_MAP_COUNT: u32 = 5;
pub const VOL_CAPABILITIES_FORMAT: u32 = 0;
pub const VOL_CAPABILITIES_INTERFACES: u32 = 1;
pub const VOL_CAPABILITIES_RESERVED1: u32 = 2;
pub const VOL_CAPABILITIES_RESERVED2: u32 = 3;
pub const ATTR_MAX_BUFFER: u32 = 8192;
pub const VOL_CAP_FMT_PERSISTENTOBJECTIDS: u32 = 1;
pub const VOL_CAP_FMT_SYMBOLICLINKS: u32 = 2;
pub const VOL_CAP_FMT_HARDLINKS: u32 = 4;
pub const VOL_CAP_FMT_JOURNAL: u32 = 8;
pub const VOL_CAP_FMT_JOURNAL_ACTIVE: u32 = 16;
pub const VOL_CAP_FMT_NO_ROOT_TIMES: u32 = 32;
pub const VOL_CAP_FMT_SPARSE_FILES: u32 = 64;
pub const VOL_CAP_FMT_ZERO_RUNS: u32 = 128;
pub const VOL_CAP_FMT_CASE_SENSITIVE: u32 = 256;
pub const VOL_CAP_FMT_CASE_PRESERVING: u32 = 512;
pub const VOL_CAP_FMT_FAST_STATFS: u32 = 1024;
pub const VOL_CAP_FMT_2TB_FILESIZE: u32 = 2048;
pub const VOL_CAP_FMT_OPENDENYMODES: u32 = 4096;
pub const VOL_CAP_FMT_HIDDEN_FILES: u32 = 8192;
pub const VOL_CAP_FMT_PATH_FROM_ID: u32 = 16384;
pub const VOL_CAP_FMT_NO_VOLUME_SIZES: u32 = 32768;
pub const VOL_CAP_FMT_DECMPFS_COMPRESSION: u32 = 65536;
pub const VOL_CAP_FMT_64BIT_OBJECT_IDS: u32 = 131072;
pub const VOL_CAP_FMT_DIR_HARDLINKS: u32 = 262144;
pub const VOL_CAP_FMT_DOCUMENT_ID: u32 = 524288;
pub const VOL_CAP_FMT_WRITE_GENERATION_COUNT: u32 = 1048576;
pub const VOL_CAP_FMT_NO_IMMUTABLE_FILES: u32 = 2097152;
pub const VOL_CAP_FMT_NO_PERMISSIONS: u32 = 4194304;
pub const VOL_CAP_FMT_SHARED_SPACE: u32 = 8388608;
pub const VOL_CAP_FMT_VOL_GROUPS: u32 = 16777216;
pub const VOL_CAP_FMT_SEALED: u32 = 33554432;
pub const VOL_CAP_INT_SEARCHFS: u32 = 1;
pub const VOL_CAP_INT_ATTRLIST: u32 = 2;
pub const VOL_CAP_INT_NFSEXPORT: u32 = 4;
pub const VOL_CAP_INT_READDIRATTR: u32 = 8;
pub const VOL_CAP_INT_EXCHANGEDATA: u32 = 16;
pub const VOL_CAP_INT_COPYFILE: u32 = 32;
pub const VOL_CAP_INT_ALLOCATE: u32 = 64;
pub const VOL_CAP_INT_VOL_RENAME: u32 = 128;
pub const VOL_CAP_INT_ADVLOCK: u32 = 256;
pub const VOL_CAP_INT_FLOCK: u32 = 512;
pub const VOL_CAP_INT_EXTENDED_SECURITY: u32 = 1024;
pub const VOL_CAP_INT_USERACCESS: u32 = 2048;
pub const VOL_CAP_INT_MANLOCK: u32 = 4096;
pub const VOL_CAP_INT_NAMEDSTREAMS: u32 = 8192;
pub const VOL_CAP_INT_EXTENDED_ATTR: u32 = 16384;
pub const VOL_CAP_INT_CLONE: u32 = 65536;
pub const VOL_CAP_INT_SNAPSHOT: u32 = 131072;
pub const VOL_CAP_INT_RENAME_SWAP: u32 = 262144;
pub const VOL_CAP_INT_RENAME_EXCL: u32 = 524288;
pub const VOL_CAP_INT_RENAME_OPENFAIL: u32 = 1048576;
pub const ATTR_CMN_NAME: u32 = 1;
pub const ATTR_CMN_DEVID: u32 = 2;
pub const ATTR_CMN_FSID: u32 = 4;
pub const ATTR_CMN_OBJTYPE: u32 = 8;
pub const ATTR_CMN_OBJTAG: u32 = 16;
pub const ATTR_CMN_OBJID: u32 = 32;
pub const ATTR_CMN_OBJPERMANENTID: u32 = 64;
pub const ATTR_CMN_PAROBJID: u32 = 128;
pub const ATTR_CMN_SCRIPT: u32 = 256;
pub const ATTR_CMN_CRTIME: u32 = 512;
pub const ATTR_CMN_MODTIME: u32 = 1024;
pub const ATTR_CMN_CHGTIME: u32 = 2048;
pub const ATTR_CMN_ACCTIME: u32 = 4096;
pub const ATTR_CMN_BKUPTIME: u32 = 8192;
pub const ATTR_CMN_FNDRINFO: u32 = 16384;
pub const ATTR_CMN_OWNERID: u32 = 32768;
pub const ATTR_CMN_GRPID: u32 = 65536;
pub const ATTR_CMN_ACCESSMASK: u32 = 131072;
pub const ATTR_CMN_FLAGS: u32 = 262144;
pub const ATTR_CMN_GEN_COUNT: u32 = 524288;
pub const ATTR_CMN_DOCUMENT_ID: u32 = 1048576;
pub const ATTR_CMN_USERACCESS: u32 = 2097152;
pub const ATTR_CMN_EXTENDED_SECURITY: u32 = 4194304;
pub const ATTR_CMN_UUID: u32 = 8388608;
pub const ATTR_CMN_GRPUUID: u32 = 16777216;
pub const ATTR_CMN_FILEID: u32 = 33554432;
pub const ATTR_CMN_PARENTID: u32 = 67108864;
pub const ATTR_CMN_FULLPATH: u32 = 134217728;
pub const ATTR_CMN_ADDEDTIME: u32 = 268435456;
pub const ATTR_CMN_ERROR: u32 = 536870912;
pub const ATTR_CMN_DATA_PROTECT_FLAGS: u32 = 1073741824;
pub const ATTR_CMN_RETURNED_ATTRS: u32 = 2147483648;
pub const ATTR_CMN_VALIDMASK: u32 = 4294967295;
pub const ATTR_CMN_SETMASK: u32 = 1372061440;
pub const ATTR_CMN_VOLSETMASK: u32 = 26368;
pub const ATTR_VOL_FSTYPE: u32 = 1;
pub const ATTR_VOL_SIGNATURE: u32 = 2;
pub const ATTR_VOL_SIZE: u32 = 4;
pub const ATTR_VOL_SPACEFREE: u32 = 8;
pub const ATTR_VOL_SPACEAVAIL: u32 = 16;
pub const ATTR_VOL_MINALLOCATION: u32 = 32;
pub const ATTR_VOL_ALLOCATIONCLUMP: u32 = 64;
pub const ATTR_VOL_IOBLOCKSIZE: u32 = 128;
pub const ATTR_VOL_OBJCOUNT: u32 = 256;
pub const ATTR_VOL_FILECOUNT: u32 = 512;
pub const ATTR_VOL_DIRCOUNT: u32 = 1024;
pub const ATTR_VOL_MAXOBJCOUNT: u32 = 2048;
pub const ATTR_VOL_MOUNTPOINT: u32 = 4096;
pub const ATTR_VOL_NAME: u32 = 8192;
pub const ATTR_VOL_MOUNTFLAGS: u32 = 16384;
pub const ATTR_VOL_MOUNTEDDEVICE: u32 = 32768;
pub const ATTR_VOL_ENCODINGSUSED: u32 = 65536;
pub const ATTR_VOL_CAPABILITIES: u32 = 131072;
pub const ATTR_VOL_UUID: u32 = 262144;
pub const ATTR_VOL_SPACEUSED: u32 = 8388608;
pub const ATTR_VOL_QUOTA_SIZE: u32 = 268435456;
pub const ATTR_VOL_RESERVED_SIZE: u32 = 536870912;
pub const ATTR_VOL_ATTRIBUTES: u32 = 1073741824;
pub const ATTR_VOL_INFO: u32 = 2147483648;
pub const ATTR_VOL_VALIDMASK: u32 = 4035444735;
pub const ATTR_VOL_SETMASK: u32 = 2147491840;
pub const ATTR_DIR_LINKCOUNT: u32 = 1;
pub const ATTR_DIR_ENTRYCOUNT: u32 = 2;
pub const ATTR_DIR_MOUNTSTATUS: u32 = 4;
pub const ATTR_DIR_ALLOCSIZE: u32 = 8;
pub const ATTR_DIR_IOBLOCKSIZE: u32 = 16;
pub const ATTR_DIR_DATALENGTH: u32 = 32;
pub const DIR_MNTSTATUS_MNTPOINT: u32 = 1;
pub const DIR_MNTSTATUS_TRIGGER: u32 = 2;
pub const ATTR_DIR_VALIDMASK: u32 = 63;
pub const ATTR_DIR_SETMASK: u32 = 0;
pub const ATTR_FILE_LINKCOUNT: u32 = 1;
pub const ATTR_FILE_TOTALSIZE: u32 = 2;
pub const ATTR_FILE_ALLOCSIZE: u32 = 4;
pub const ATTR_FILE_IOBLOCKSIZE: u32 = 8;
pub const ATTR_FILE_DEVTYPE: u32 = 32;
pub const ATTR_FILE_FORKCOUNT: u32 = 128;
pub const ATTR_FILE_FORKLIST: u32 = 256;
pub const ATTR_FILE_DATALENGTH: u32 = 512;
pub const ATTR_FILE_DATAALLOCSIZE: u32 = 1024;
pub const ATTR_FILE_RSRCLENGTH: u32 = 4096;
pub const ATTR_FILE_RSRCALLOCSIZE: u32 = 8192;
pub const ATTR_FILE_VALIDMASK: u32 = 14335;
pub const ATTR_FILE_SETMASK: u32 = 32;
pub const ATTR_CMNEXT_RELPATH: u32 = 4;
pub const ATTR_CMNEXT_PRIVATESIZE: u32 = 8;
pub const ATTR_CMNEXT_LINKID: u32 = 16;
pub const ATTR_CMNEXT_NOFIRMLINKPATH: u32 = 32;
pub const ATTR_CMNEXT_REALDEVID: u32 = 64;
pub const ATTR_CMNEXT_REALFSID: u32 = 128;
pub const ATTR_CMNEXT_CLONEID: u32 = 256;
pub const ATTR_CMNEXT_EXT_FLAGS: u32 = 512;
pub const ATTR_CMNEXT_RECURSIVE_GENCOUNT: u32 = 1024;
pub const ATTR_CMNEXT_VALIDMASK: u32 = 2044;
pub const ATTR_CMNEXT_SETMASK: u32 = 0;
pub const ATTR_FORK_TOTALSIZE: u32 = 1;
pub const ATTR_FORK_ALLOCSIZE: u32 = 2;
pub const ATTR_FORK_RESERVED: u32 = 4294967295;
pub const ATTR_FORK_VALIDMASK: u32 = 3;
pub const ATTR_FORK_SETMASK: u32 = 0;
pub const ATTR_CMN_NAMEDATTRCOUNT: u32 = 524288;
pub const ATTR_CMN_NAMEDATTRLIST: u32 = 1048576;
pub const ATTR_FILE_CLUMPSIZE: u32 = 16;
pub const ATTR_FILE_FILETYPE: u32 = 64;
pub const ATTR_FILE_DATAEXTENTS: u32 = 2048;
pub const ATTR_FILE_RSRCEXTENTS: u32 = 16384;
pub const ATTR_BULK_REQUIRED: u32 = 2147483649;
pub const SRCHFS_START: u32 = 1;
pub const SRCHFS_MATCHPARTIALNAMES: u32 = 2;
pub const SRCHFS_MATCHDIRS: u32 = 4;
pub const SRCHFS_MATCHFILES: u32 = 8;
pub const SRCHFS_SKIPLINKS: u32 = 16;
pub const SRCHFS_SKIPINVISIBLE: u32 = 32;
pub const SRCHFS_SKIPPACKAGES: u32 = 64;
pub const SRCHFS_SKIPINAPPROPRIATE: u32 = 128;
pub const SRCHFS_NEGATEPARAMS: u32 = 2147483648;
pub const SRCHFS_VALIDOPTIONSMASK: u32 = 2147483903;
pub const FST_EOF: i32 = -1;
pub const MFSNAMELEN: u32 = 15;
pub const MFSTYPENAMELEN: u32 = 16;
pub const MNAMELEN: u32 = 1024;
pub const MNT_EXT_ROOT_DATA_VOL: u32 = 1;
pub const MNT_RDONLY: u32 = 1;
pub const MNT_SYNCHRONOUS: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOSUID: u32 = 8;
pub const MNT_NODEV: u32 = 16;
pub const MNT_UNION: u32 = 32;
pub const MNT_ASYNC: u32 = 64;
pub const MNT_CPROTECT: u32 = 128;
pub const MNT_EXPORTED: u32 = 256;
pub const MNT_REMOVABLE: u32 = 512;
pub const MNT_QUARANTINE: u32 = 1024;
pub const MNT_LOCAL: u32 = 4096;
pub const MNT_QUOTA: u32 = 8192;
pub const MNT_ROOTFS: u32 = 16384;
pub const MNT_DOVOLFS: u32 = 32768;
pub const MNT_DONTBROWSE: u32 = 1048576;
pub const MNT_IGNORE_OWNERSHIP: u32 = 2097152;
pub const MNT_AUTOMOUNTED: u32 = 4194304;
pub const MNT_JOURNALED: u32 = 8388608;
pub const MNT_NOUSERXATTR: u32 = 16777216;
pub const MNT_DEFWRITE: u32 = 33554432;
pub const MNT_MULTILABEL: u32 = 67108864;
pub const MNT_NOFOLLOW: u32 = 134217728;
pub const MNT_NOATIME: u32 = 268435456;
pub const MNT_SNAPSHOT: u32 = 1073741824;
pub const MNT_STRICTATIME: u32 = 2147483648;
pub const MNT_UNKNOWNPERMISSIONS: u32 = 2097152;
pub const MNT_VISFLAGMASK: u32 = 3757111295;
pub const MNT_UPDATE: u32 = 65536;
pub const MNT_NOBLOCK: u32 = 131072;
pub const MNT_RELOAD: u32 = 262144;
pub const MNT_FORCE: u32 = 524288;
pub const MNT_CMDFLAGS: u32 = 983040;
pub const VFS_GENERIC: u32 = 0;
pub const VFS_NUMMNTOPS: u32 = 1;
pub const VFS_MAXTYPENUM: u32 = 1;
pub const VFS_CONF: u32 = 2;
pub const MNT_WAIT: u32 = 1;
pub const MNT_NOWAIT: u32 = 2;
pub const MNT_DWAIT: u32 = 4;
pub const VFS_CTL_VERS1: u32 = 1;
pub const VFS_CTL_OSTATFS: u32 = 65537;
pub const VFS_CTL_UMOUNT: u32 = 65538;
pub const VFS_CTL_QUERY: u32 = 65539;
pub const VFS_CTL_NEWADDR: u32 = 65540;
pub const VFS_CTL_TIMEO: u32 = 65541;
pub const VFS_CTL_NOLOCKS: u32 = 65542;
pub const VFS_CTL_SADDR: u32 = 65543;
pub const VFS_CTL_DISC: u32 = 65544;
pub const VFS_CTL_SERVERINFO: u32 = 65545;
pub const VFS_CTL_NSTATUS: u32 = 65546;
pub const VFS_CTL_STATFS64: u32 = 65547;
pub const VFS_CTL_STATFS: u32 = 65547;
pub const VQ_NOTRESP: u32 = 1;
pub const VQ_NEEDAUTH: u32 = 2;
pub const VQ_LOWDISK: u32 = 4;
pub const VQ_MOUNT: u32 = 8;
pub const VQ_UNMOUNT: u32 = 16;
pub const VQ_DEAD: u32 = 32;
pub const VQ_ASSIST: u32 = 64;
pub const VQ_NOTRESPLOCK: u32 = 128;
pub const VQ_UPDATE: u32 = 256;
pub const VQ_VERYLOWDISK: u32 = 512;
pub const VQ_SYNCEVENT: u32 = 1024;
pub const VQ_SERVEREVENT: u32 = 2048;
pub const VQ_QUOTA: u32 = 4096;
pub const VQ_NEARLOWDISK: u32 = 8192;
pub const VQ_DESIRED_DISK: u32 = 16384;
pub const VQ_FREE_SPACE_CHANGE: u32 = 32768;
pub const VQ_FLAG10000: u32 = 65536;
pub const NFSV4_MAX_FH_SIZE: u32 = 128;
pub const NFSV3_MAX_FH_SIZE: u32 = 64;
pub const NFSV2_MAX_FH_SIZE: u32 = 32;
pub const OVERRIDE_UNKNOWN_PERMISSIONS: u32 = 0;
pub const UNKNOWNPERMISSIONS: u32 = 453;
pub const HFSFSMNT_NOXONFILES: u32 = 1;
pub const HFSFSMNT_WRAPPER: u32 = 2;
pub const HFSFSMNT_EXTENDED_ARGS: u32 = 4;
pub const HFS_ENCODINGBIAS: u32 = 1;
pub const HFS_EXTEND_FS: u32 = 2;
pub const HFS_ENABLE_JOURNALING: u32 = 534889;
pub const HFS_DISABLE_JOURNALING: u32 = 201330;
pub const HFS_REPLAY_JOURNAL: u32 = 1785621618;
pub const HFS_ENABLE_RESIZE_DEBUG: u32 = 4;
pub const CURSES: u32 = 1;
pub const CURSES_H: u32 = 1;
pub const NCURSES_VERSION_MAJOR: u32 = 5;
pub const NCURSES_VERSION_MINOR: u32 = 7;
pub const NCURSES_VERSION_PATCH: u32 = 20081102;
pub const NCURSES_VERSION: &[u8; 4usize] = b"5.7\0";
pub const NCURSES_MOUSE_VERSION: u32 = 1;
pub const NCURSES_DLL_H_incl: u32 = 1;
pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
pub const NCURSES_OPAQUE: u32 = 1;
pub const NCURSES_TPARM_VARARGS: u32 = 1;
pub const NCURSES_UNCTRL_H_incl: u32 = 1;
pub const COLOR_BLACK: u32 = 0;
pub const COLOR_RED: u32 = 1;
pub const COLOR_GREEN: u32 = 2;
pub const COLOR_YELLOW: u32 = 3;
pub const COLOR_BLUE: u32 = 4;
pub const COLOR_MAGENTA: u32 = 5;
pub const COLOR_CYAN: u32 = 6;
pub const COLOR_WHITE: u32 = 7;
pub const ERR: i32 = -1;
pub const OK: u32 = 0;
pub const _SUBWIN: u32 = 1;
pub const _ENDLINE: u32 = 2;
pub const _FULLWIN: u32 = 4;
pub const _SCROLLWIN: u32 = 8;
pub const _ISPAD: u32 = 16;
pub const _HASMOVED: u32 = 32;
pub const _WRAPPED: u32 = 64;
pub const _NOCHANGE: i32 = -1;
pub const _NEWINDEX: i32 = -1;
pub const NCURSES_EXT_FUNCS: u32 = 20081102;
pub const NCURSES_ATTR_SHIFT: u32 = 8;
pub const A_NORMAL: u32 = 0;
pub const KEY_CODE_YES: u32 = 256;
pub const KEY_MIN: u32 = 257;
pub const KEY_BREAK: u32 = 257;
pub const KEY_SRESET: u32 = 344;
pub const KEY_RESET: u32 = 345;
pub const KEY_DOWN: u32 = 258;
pub const KEY_UP: u32 = 259;
pub const KEY_LEFT: u32 = 260;
pub const KEY_RIGHT: u32 = 261;
pub const KEY_HOME: u32 = 262;
pub const KEY_BACKSPACE: u32 = 263;
pub const KEY_F0: u32 = 264;
pub const KEY_DL: u32 = 328;
pub const KEY_IL: u32 = 329;
pub const KEY_DC: u32 = 330;
pub const KEY_IC: u32 = 331;
pub const KEY_EIC: u32 = 332;
pub const KEY_CLEAR: u32 = 333;
pub const KEY_EOS: u32 = 334;
pub const KEY_EOL: u32 = 335;
pub const KEY_SF: u32 = 336;
pub const KEY_SR: u32 = 337;
pub const KEY_NPAGE: u32 = 338;
pub const KEY_PPAGE: u32 = 339;
pub const KEY_STAB: u32 = 340;
pub const KEY_CTAB: u32 = 341;
pub const KEY_CATAB: u32 = 342;
pub const KEY_ENTER: u32 = 343;
pub const KEY_PRINT: u32 = 346;
pub const KEY_LL: u32 = 347;
pub const KEY_A1: u32 = 348;
pub const KEY_A3: u32 = 349;
pub const KEY_B2: u32 = 350;
pub const KEY_C1: u32 = 351;
pub const KEY_C3: u32 = 352;
pub const KEY_BTAB: u32 = 353;
pub const KEY_BEG: u32 = 354;
pub const KEY_CANCEL: u32 = 355;
pub const KEY_CLOSE: u32 = 356;
pub const KEY_COMMAND: u32 = 357;
pub const KEY_COPY: u32 = 358;
pub const KEY_CREATE: u32 = 359;
pub const KEY_END: u32 = 360;
pub const KEY_EXIT: u32 = 361;
pub const KEY_FIND: u32 = 362;
pub const KEY_HELP: u32 = 363;
pub const KEY_MARK: u32 = 364;
pub const KEY_MESSAGE: u32 = 365;
pub const KEY_MOVE: u32 = 366;
pub const KEY_NEXT: u32 = 367;
pub const KEY_OPEN: u32 = 368;
pub const KEY_OPTIONS: u32 = 369;
pub const KEY_PREVIOUS: u32 = 370;
pub const KEY_REDO: u32 = 371;
pub const KEY_REFERENCE: u32 = 372;
pub const KEY_REFRESH: u32 = 373;
pub const KEY_REPLACE: u32 = 374;
pub const KEY_RESTART: u32 = 375;
pub const KEY_RESUME: u32 = 376;
pub const KEY_SAVE: u32 = 377;
pub const KEY_SBEG: u32 = 378;
pub const KEY_SCANCEL: u32 = 379;
pub const KEY_SCOMMAND: u32 = 380;
pub const KEY_SCOPY: u32 = 381;
pub const KEY_SCREATE: u32 = 382;
pub const KEY_SDC: u32 = 383;
pub const KEY_SDL: u32 = 384;
pub const KEY_SELECT: u32 = 385;
pub const KEY_SEND: u32 = 386;
pub const KEY_SEOL: u32 = 387;
pub const KEY_SEXIT: u32 = 388;
pub const KEY_SFIND: u32 = 389;
pub const KEY_SHELP: u32 = 390;
pub const KEY_SHOME: u32 = 391;
pub const KEY_SIC: u32 = 392;
pub const KEY_SLEFT: u32 = 393;
pub const KEY_SMESSAGE: u32 = 394;
pub const KEY_SMOVE: u32 = 395;
pub const KEY_SNEXT: u32 = 396;
pub const KEY_SOPTIONS: u32 = 397;
pub const KEY_SPREVIOUS: u32 = 398;
pub const KEY_SPRINT: u32 = 399;
pub const KEY_SREDO: u32 = 400;
pub const KEY_SREPLACE: u32 = 401;
pub const KEY_SRIGHT: u32 = 402;
pub const KEY_SRSUME: u32 = 403;
pub const KEY_SSAVE: u32 = 404;
pub const KEY_SSUSPEND: u32 = 405;
pub const KEY_SUNDO: u32 = 406;
pub const KEY_SUSPEND: u32 = 407;
pub const KEY_UNDO: u32 = 408;
pub const KEY_MOUSE: u32 = 409;
pub const KEY_RESIZE: u32 = 410;
pub const KEY_EVENT: u32 = 411;
pub const KEY_MAX: u32 = 511;
pub const NCURSES_BUTTON_RELEASED: u32 = 1;
pub const NCURSES_BUTTON_PRESSED: u32 = 2;
pub const NCURSES_BUTTON_CLICKED: u32 = 4;
pub const NCURSES_DOUBLE_CLICKED: u32 = 8;
pub const NCURSES_TRIPLE_CLICKED: u32 = 16;
pub const NCURSES_RESERVED_EVENT: u32 = 32;
pub const TRACE_DISABLE: u32 = 0;
pub const TRACE_TIMES: u32 = 1;
pub const TRACE_TPUTS: u32 = 2;
pub const TRACE_UPDATE: u32 = 4;
pub const TRACE_MOVE: u32 = 8;
pub const TRACE_CHARPUT: u32 = 16;
pub const TRACE_ORDINARY: u32 = 31;
pub const TRACE_CALLS: u32 = 32;
pub const TRACE_VIRTPUT: u32 = 64;
pub const TRACE_IEVENT: u32 = 128;
pub const TRACE_BITS: u32 = 256;
pub const TRACE_ICALLS: u32 = 512;
pub const TRACE_CCALLS: u32 = 1024;
pub const TRACE_DATABASE: u32 = 2048;
pub const TRACE_ATTRS: u32 = 4096;
pub const TRACE_SHIFT: u32 = 13;
pub const TRACE_MAXIMUM: u32 = 8191;
pub const IPSEC_PORT_ANY: u32 = 0;
pub const IPSEC_ULPROTO_ANY: u32 = 255;
pub const IPSEC_PROTO_ANY: u32 = 255;
pub const IPSEC_MODE_ANY: u32 = 0;
pub const IPSEC_MODE_TRANSPORT: u32 = 1;
pub const IPSEC_MODE_TUNNEL: u32 = 2;
pub const IPSEC_DIR_ANY: u32 = 0;
pub const IPSEC_DIR_INBOUND: u32 = 1;
pub const IPSEC_DIR_OUTBOUND: u32 = 2;
pub const IPSEC_DIR_MAX: u32 = 3;
pub const IPSEC_DIR_INVALID: u32 = 4;
pub const IPSEC_POLICY_DISCARD: u32 = 0;
pub const IPSEC_POLICY_NONE: u32 = 1;
pub const IPSEC_POLICY_IPSEC: u32 = 2;
pub const IPSEC_POLICY_ENTRUST: u32 = 3;
pub const IPSEC_POLICY_BYPASS: u32 = 4;
pub const IPSEC_POLICY_GENERATE: u32 = 5;
pub const IPSEC_LEVEL_DEFAULT: u32 = 0;
pub const IPSEC_LEVEL_USE: u32 = 1;
pub const IPSEC_LEVEL_REQUIRE: u32 = 2;
pub const IPSEC_LEVEL_UNIQUE: u32 = 3;
pub const IPSEC_MANUAL_REQID_MAX: u32 = 16383;
pub const IPSEC_REPLAYWSIZE: u32 = 32;
pub const IPSEC_KEY_AUTH_MAX_BYTES: u32 = 256;
pub const IPSEC_KEY_ENCRYPT_MAX_BYTES: u32 = 256;
pub const IPSEC_MAX_WAKE_PKT_LEN: u32 = 100;
pub const IPCOMP_OUI: u32 = 1;
pub const IPCOMP_DEFLATE: u32 = 2;
pub const IPCOMP_LZS: u32 = 3;
pub const IPCOMP_MAX: u32 = 4;
pub const IPCOMP_CPI_NEGOTIATE_MIN: u32 = 256;
pub const AFORK: u32 = 1;
pub const ASU: u32 = 2;
pub const ACOMPAT: u32 = 4;
pub const ACORE: u32 = 8;
pub const AXSIG: u32 = 16;
pub const AHZ: u32 = 64;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &[u8; 30usize] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &[u8; 26usize] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const B_WRITE: u32 = 0;
pub const B_READ: u32 = 1;
pub const B_ASYNC: u32 = 2;
pub const B_NOCACHE: u32 = 4;
pub const B_DELWRI: u32 = 8;
pub const B_LOCKED: u32 = 16;
pub const B_PHYS: u32 = 32;
pub const B_CLUSTER: u32 = 64;
pub const B_PAGEIO: u32 = 128;
pub const B_META: u32 = 256;
pub const B_RAW: u32 = 512;
pub const B_FUA: u32 = 1024;
pub const B_PASSIVE: u32 = 2048;
pub const B_IOSTREAMING: u32 = 4096;
pub const B_THROTTLED_IO: u32 = 8192;
pub const B_ENCRYPTED_IO: u32 = 16384;
pub const B_STATICCONTENT: u32 = 32768;
pub const BUF_WAIT: u32 = 1;
pub const BUF_WRITE_DATA: u32 = 1;
pub const BUF_SKIP_META: u32 = 2;
pub const BUF_INVALIDATE_LOCKED: u32 = 4;
pub const BUF_SKIP_NONLOCKED: u32 = 1;
pub const BUF_SKIP_LOCKED: u32 = 2;
pub const BUF_SCAN_CLEAN: u32 = 4;
pub const BUF_SCAN_DIRTY: u32 = 8;
pub const BUF_NOTIFY_BUSY: u32 = 16;
pub const BUF_RETURNED: u32 = 0;
pub const BUF_RETURNED_DONE: u32 = 1;
pub const BUF_CLAIMED: u32 = 2;
pub const BUF_CLAIMED_DONE: u32 = 3;
pub const BLK_READ: u32 = 1;
pub const BLK_WRITE: u32 = 2;
pub const BLK_META: u32 = 16;
pub const BLK_ONLYVALID: u32 = 2147483648;
pub const CLONE_NOFOLLOW: u32 = 1;
pub const CLONE_NOOWNERCOPY: u32 = 2;
pub const CLONE_ACL: u32 = 4;
pub const _SYS_CONF_H_: u32 = 1;
pub const D_TAPE: u32 = 1;
pub const D_DISK: u32 = 2;
pub const D_TTY: u32 = 3;
pub const DK_FEATURE_BARRIER: u32 = 2;
pub const DK_FEATURE_PRIORITY: u32 = 4;
pub const DK_FEATURE_UNMAP: u32 = 16;
pub const DK_SYNCHRONIZE_OPTION_BARRIER: u32 = 2;
pub const DK_CORESTORAGE_PIN_YOUR_METADATA: u32 = 1;
pub const DK_CORESTORAGE_ENABLE_HOTFILES: u32 = 2;
pub const DK_CORESTORAGE_PIN_YOUR_SWAPFILE: u32 = 4;
pub const DK_PROVISION_TYPE_MAPPED: u32 = 0;
pub const DK_PROVISION_TYPE_DEALLOCATED: u32 = 1;
pub const DK_PROVISION_TYPE_ANCHORED: u32 = 2;
pub const DK_LOCATION_INTERNAL: u32 = 0;
pub const DK_LOCATION_EXTERNAL: u32 = 1;
pub const EV_FD: u32 = 1;
pub const EV_RE: u32 = 1;
pub const EV_WR: u32 = 2;
pub const EV_EX: u32 = 4;
pub const EV_RM: u32 = 8;
pub const EV_MASK: u32 = 15;
pub const EV_RBYTES: u32 = 256;
pub const EV_WBYTES: u32 = 512;
pub const EV_RWBYTES: u32 = 768;
pub const EV_RCLOSED: u32 = 1024;
pub const EV_RCONN: u32 = 2048;
pub const EV_WCLOSED: u32 = 4096;
pub const EV_WCONN: u32 = 8192;
pub const EV_OOB: u32 = 16384;
pub const EV_FIN: u32 = 32768;
pub const EV_RESET: u32 = 65536;
pub const EV_TIMEOUT: u32 = 131072;
pub const EV_DMASK: u32 = 4294967040;
pub const NDFILE: u32 = 25;
pub const NDEXTENT: u32 = 50;
pub const GMONVERSION: u32 = 333945;
pub const HISTFRACTION: u32 = 2;
pub const HASHFRACTION: u32 = 2;
pub const ARCDENSITY: u32 = 2;
pub const MINARCS: u32 = 50;
pub const GMON_PROF_ON: u32 = 0;
pub const GMON_PROF_BUSY: u32 = 1;
pub const GMON_PROF_ERROR: u32 = 2;
pub const GMON_PROF_OFF: u32 = 3;
pub const GMON_MAGIC: u32 = 3203381950;
pub const GMON_MAGIC_64: u32 = 3203381951;
pub const GMONTYPE_SAMPLES: u32 = 1;
pub const GMONTYPE_RAWARCS: u32 = 2;
pub const GMONTYPE_ARCS_ORDERS: u32 = 3;
pub const GMONTYPE_DYLD_STATE: u32 = 4;
pub const GMONTYPE_DYLD2_STATE: u32 = 5;
pub const TANDEM: u32 = 1;
pub const CBREAK: u32 = 2;
pub const LCASE: u32 = 4;
pub const CRMOD: u32 = 16;
pub const RAW: u32 = 32;
pub const ODDP: u32 = 64;
pub const EVENP: u32 = 128;
pub const ANYP: u32 = 192;
pub const NLDELAY: u32 = 768;
pub const TBDELAY: u32 = 3072;
pub const XTABS: u32 = 3072;
pub const CRDELAY: u32 = 12288;
pub const VTDELAY: u32 = 16384;
pub const BSDELAY: u32 = 32768;
pub const ALLDELAY: u32 = 65280;
pub const CRTBS: u32 = 65536;
pub const PRTERA: u32 = 131072;
pub const CRTERA: u32 = 262144;
pub const TILDE: u32 = 524288;
pub const LITOUT: u32 = 2097152;
pub const NOHANG: u32 = 16777216;
pub const L001000: u32 = 33554432;
pub const CRTKIL: u32 = 67108864;
pub const PASS8: u32 = 134217728;
pub const CTLECH: u32 = 268435456;
pub const DECCTQ: u32 = 1073741824;
pub const LCRTBS: u32 = 1;
pub const LPRTERA: u32 = 2;
pub const LCRTERA: u32 = 4;
pub const LTILDE: u32 = 8;
pub const LMDMBUF: u32 = 16;
pub const LLITOUT: u32 = 32;
pub const LTOSTOP: u32 = 64;
pub const LFLUSHO: u32 = 128;
pub const LNOHANG: u32 = 256;
pub const LCRTKIL: u32 = 1024;
pub const LPASS8: u32 = 2048;
pub const LCTLECH: u32 = 4096;
pub const LPENDIN: u32 = 8192;
pub const LDECCTQ: u32 = 16384;
pub const LNOFLSH: u32 = 32768;
pub const OTTYDISC: u32 = 0;
pub const NETLDISC: u32 = 1;
pub const NTTYDISC: u32 = 2;
pub const KDBG_CLASS_MASK: u32 = 4278190080;
pub const KDBG_CLASS_OFFSET: u32 = 24;
pub const KDBG_CLASS_MAX: u32 = 255;
pub const KDBG_SUBCLASS_MASK: u32 = 16711680;
pub const KDBG_SUBCLASS_OFFSET: u32 = 16;
pub const KDBG_SUBCLASS_MAX: u32 = 255;
pub const KDBG_CSC_MASK: u32 = 4294901760;
pub const KDBG_CSC_OFFSET: u32 = 16;
pub const KDBG_CSC_MAX: u32 = 65535;
pub const KDBG_CODE_MASK: u32 = 65532;
pub const KDBG_CODE_OFFSET: u32 = 2;
pub const KDBG_CODE_MAX: u32 = 16383;
pub const KDBG_EVENTID_MASK: u32 = 4294967292;
pub const KDBG_FUNC_MASK: u32 = 3;
pub const DBG_FUNC_START: u32 = 1;
pub const DBG_FUNC_END: u32 = 2;
pub const DBG_FUNC_NONE: u32 = 0;
pub const DBG_MACH: u32 = 1;
pub const DBG_NETWORK: u32 = 2;
pub const DBG_FSYSTEM: u32 = 3;
pub const DBG_BSD: u32 = 4;
pub const DBG_IOKIT: u32 = 5;
pub const DBG_DRIVERS: u32 = 6;
pub const DBG_TRACE: u32 = 7;
pub const DBG_DLIL: u32 = 8;
pub const DBG_PTHREAD: u32 = 9;
pub const DBG_CORESTORAGE: u32 = 10;
pub const DBG_CG: u32 = 11;
pub const DBG_MONOTONIC: u32 = 12;
pub const DBG_MISC: u32 = 20;
pub const DBG_SECURITY: u32 = 30;
pub const DBG_DYLD: u32 = 31;
pub const DBG_QT: u32 = 32;
pub const DBG_APPS: u32 = 33;
pub const DBG_LAUNCHD: u32 = 34;
pub const DBG_SILICON: u32 = 35;
pub const DBG_PERF: u32 = 37;
pub const DBG_IMPORTANCE: u32 = 38;
pub const DBG_BANK: u32 = 40;
pub const DBG_XPC: u32 = 41;
pub const DBG_ATM: u32 = 42;
pub const DBG_ARIADNE: u32 = 43;
pub const DBG_DAEMON: u32 = 44;
pub const DBG_ENERGYTRACE: u32 = 45;
pub const DBG_DISPATCH: u32 = 46;
pub const DBG_IMG: u32 = 49;
pub const DBG_UMALLOC: u32 = 51;
pub const DBG_TURNSTILE: u32 = 53;
pub const DBG_AUDIO: u32 = 54;
pub const DBG_MIG: u32 = 255;
pub const DBG_MACH_EXCP_KTRAP_x86: u32 = 2;
pub const DBG_MACH_EXCP_DFLT: u32 = 3;
pub const DBG_MACH_EXCP_SYNC_ARM: u32 = 3;
pub const DBG_MACH_EXCP_IFLT: u32 = 4;
pub const DBG_MACH_EXCP_SERR_ARM: u32 = 4;
pub const DBG_MACH_EXCP_INTR: u32 = 5;
pub const DBG_MACH_EXCP_ALNG: u32 = 6;
pub const DBG_MACH_EXCP_UTRAP_x86: u32 = 7;
pub const DBG_MACH_EXCP_FP: u32 = 8;
pub const DBG_MACH_EXCP_DECI: u32 = 9;
pub const DBG_MACH_CHUD: u32 = 10;
pub const DBG_MACH_SIGNPOST: u32 = 10;
pub const DBG_MACH_EXCP_SC: u32 = 12;
pub const DBG_MACH_EXCP_TRACE: u32 = 13;
pub const DBG_MACH_EXCP_EMUL: u32 = 14;
pub const DBG_MACH_IHDLR: u32 = 16;
pub const DBG_MACH_IPC: u32 = 32;
pub const DBG_MACH_RESOURCE: u32 = 37;
pub const DBG_MACH_VM: u32 = 48;
pub const DBG_MACH_LEAKS: u32 = 49;
pub const DBG_MACH_WORKINGSET: u32 = 50;
pub const DBG_MACH_SCHED: u32 = 64;
pub const DBG_MACH_MSGID_INVALID: u32 = 80;
pub const DBG_MACH_LOCKS: u32 = 96;
pub const DBG_MACH_PMAP: u32 = 112;
pub const DBG_MACH_CLOCK: u32 = 128;
pub const DBG_MACH_MP: u32 = 144;
pub const DBG_MACH_VM_PRESSURE: u32 = 160;
pub const DBG_MACH_STACKSHOT: u32 = 161;
pub const DBG_MACH_SFI: u32 = 162;
pub const DBG_MACH_ENERGY_PERF: u32 = 163;
pub const DBG_MACH_SYSDIAGNOSE: u32 = 164;
pub const DBG_MACH_ZALLOC: u32 = 165;
pub const DBG_MACH_THREAD_GROUP: u32 = 166;
pub const DBG_MACH_COALITION: u32 = 167;
pub const DBG_MACH_SHAREDREGION: u32 = 168;
pub const DBG_MACH_SCHED_CLUTCH: u32 = 169;
pub const DBG_MACH_IO: u32 = 170;
pub const DBG_MACH_WORKGROUP: u32 = 171;
pub const DBG_MACH_HV: u32 = 172;
pub const DBG_MACH_KCOV: u32 = 173;
pub const DBG_MACH_MACHDEP_EXCP_SC_x86: u32 = 174;
pub const DBG_MACH_MACHDEP_EXCP_SC_ARM: u32 = 175;
pub const DBC_MACH_IO_MMIO_READ: u32 = 1;
pub const DBC_MACH_IO_MMIO_WRITE: u32 = 2;
pub const DBC_MACH_IO_PHYS_READ: u32 = 3;
pub const DBC_MACH_IO_PHYS_WRITE: u32 = 4;
pub const DBC_MACH_IO_PORTIO_READ: u32 = 5;
pub const DBC_MACH_IO_PORTIO_WRITE: u32 = 6;
pub const DBG_INTR_TYPE_UNKNOWN: u32 = 0;
pub const DBG_INTR_TYPE_IPI: u32 = 1;
pub const DBG_INTR_TYPE_TIMER: u32 = 2;
pub const DBG_INTR_TYPE_OTHER: u32 = 3;
pub const DBG_INTR_TYPE_PMI: u32 = 4;
pub const MACH_SCHED: u32 = 0;
pub const MACH_STACK_ATTACH: u32 = 1;
pub const MACH_STACK_HANDOFF: u32 = 2;
pub const MACH_CALL_CONT: u32 = 3;
pub const MACH_CALLOUT: u32 = 4;
pub const MACH_STACK_DETACH: u32 = 5;
pub const MACH_MAKE_RUNNABLE: u32 = 6;
pub const MACH_PROMOTE: u32 = 7;
pub const MACH_DEMOTE: u32 = 8;
pub const MACH_IDLE: u32 = 9;
pub const MACH_STACK_DEPTH: u32 = 10;
pub const MACH_MOVED: u32 = 11;
pub const MACH_PSET_LOAD_AVERAGE: u32 = 12;
pub const MACH_AMP_DEBUG: u32 = 13;
pub const MACH_FAILSAFE: u32 = 14;
pub const MACH_BLOCK: u32 = 15;
pub const MACH_WAIT: u32 = 16;
pub const MACH_GET_URGENCY: u32 = 20;
pub const MACH_URGENCY: u32 = 21;
pub const MACH_REDISPATCH: u32 = 22;
pub const MACH_REMOTE_AST: u32 = 23;
pub const MACH_SCHED_CHOOSE_PROCESSOR: u32 = 24;
pub const MACH_DEEP_IDLE: u32 = 25;
pub const MACH_CPU_THROTTLE_DISABLE: u32 = 27;
pub const MACH_RW_PROMOTE: u32 = 28;
pub const MACH_RW_DEMOTE: u32 = 29;
pub const MACH_SCHED_MAINTENANCE: u32 = 31;
pub const MACH_DISPATCH: u32 = 32;
pub const MACH_QUANTUM_HANDOFF: u32 = 33;
pub const MACH_MULTIQ_DEQUEUE: u32 = 34;
pub const MACH_SCHED_THREAD_SWITCH: u32 = 35;
pub const MACH_SCHED_SMT_BALANCE: u32 = 36;
pub const MACH_REMOTE_DEFERRED_AST: u32 = 37;
pub const MACH_REMOTE_CANCEL_AST: u32 = 38;
pub const MACH_SCHED_CHANGE_PRIORITY: u32 = 39;
pub const MACH_SCHED_UPDATE_REC_CORES: u32 = 40;
pub const MACH_STACK_WAIT: u32 = 41;
pub const MACH_THREAD_BIND: u32 = 42;
pub const MACH_WAITQ_PROMOTE: u32 = 43;
pub const MACH_WAITQ_DEMOTE: u32 = 44;
pub const MACH_SCHED_LOAD: u32 = 45;
pub const MACH_REC_CORES_FAILSAFE: u32 = 46;
pub const MACH_SCHED_QUANTUM_EXPIRED: u32 = 47;
pub const MACH_EXEC_PROMOTE: u32 = 48;
pub const MACH_EXEC_DEMOTE: u32 = 49;
pub const MACH_AMP_SIGNAL_SPILL: u32 = 50;
pub const MACH_AMP_STEAL: u32 = 51;
pub const MACH_SCHED_LOAD_EFFECTIVE: u32 = 52;
pub const MACH_QUIESCENT_COUNTER: u32 = 56;
pub const MACH_TURNSTILE_USER_CHANGE: u32 = 57;
pub const MACH_AMP_RECOMMENDATION_CHANGE: u32 = 58;
pub const MACH_AMP_PERFCTL_POLICY_CHANGE: u32 = 59;
pub const MACH_TURNSTILE_KERNEL_CHANGE: u32 = 64;
pub const MACH_SCHED_WI_AUTO_JOIN: u32 = 65;
pub const MACH_SCHED_WI_DEFERRED_FINISH: u32 = 66;
pub const MACH_SET_RT_DEADLINE: u32 = 67;
pub const MACH_CANCEL_RT_DEADLINE: u32 = 68;
pub const MACH_RT_SIGNAL_SPILL: u32 = 69;
pub const MACH_RT_STEAL: u32 = 70;
pub const MACH_PENDING_AST_URGENT: u32 = 71;
pub const MACH_SCHED_THREAD_SELECT: u32 = 72;
pub const MACH_SCHED_NEXT_PROCESSOR: u32 = 73;
pub const MACH_PSET_AVG_EXEC_TIME: u32 = 80;
pub const MACH_SUSPEND_USERSPACE: u32 = 81;
pub const MACH_PREEMPTION_EXPIRED: u32 = 82;
pub const MACH_FLOOR_PROMOTE: u32 = 83;
pub const MACH_FLOOR_DEMOTE: u32 = 84;
pub const MACH_INT_MASKED_EXPIRED: u32 = 85;
pub const MACH_INT_HANDLED_EXPIRED: u32 = 86;
pub const MACH_UPDATE_POWERED_CORES: u32 = 88;
pub const MACH_MODE_DEMOTE_THROTTLED: u32 = 89;
pub const MACH_MODE_DEMOTE_FAILSAFE: u32 = 90;
pub const MACH_MODE_DEMOTE_RT_RESTRICTED: u32 = 91;
pub const MACH_MODE_UNDEMOTE_THROTTLED: u32 = 92;
pub const MACH_MODE_UNDEMOTE_FAILSAFE: u32 = 93;
pub const MACH_MODE_UNDEMOTE_RT_RESTRICTED: u32 = 94;
pub const MACH_INT_MASKED_RESET: u32 = 95;
pub const MACH_SCHED_CLUTCH_ROOT_BUCKET_STATE: u32 = 0;
pub const MACH_SCHED_CLUTCH_TG_BUCKET_STATE: u32 = 1;
pub const MACH_SCHED_CLUTCH_THREAD_SELECT: u32 = 2;
pub const MACH_SCHED_CLUTCH_THREAD_STATE: u32 = 3;
pub const MACH_SCHED_CLUTCH_TG_BUCKET_PRI: u32 = 4;
pub const MACH_SCHED_EDGE_CLUSTER_OVERLOAD: u32 = 5;
pub const MACH_SCHED_EDGE_STEAL: u32 = 6;
pub const MACH_SCHED_EDGE_REBAL_RUNNABLE: u32 = 7;
pub const MACH_SCHED_EDGE_REBAL_RUNNING: u32 = 8;
pub const MACH_SCHED_EDGE_SHOULD_YIELD: u32 = 9;
pub const MACH_SCHED_CLUTCH_THR_COUNT: u32 = 10;
pub const MACH_SCHED_EDGE_LOAD_AVG: u32 = 11;
pub const MACH_SCHED_EDGE_CLUSTER_SHARED_LOAD: u32 = 12;
pub const MACH_SCHED_EDGE_RSRC_HEAVY_THREAD: u32 = 13;
pub const MACH_SCHED_EDGE_SHARED_RSRC_MIGRATE: u32 = 14;
pub const WORKGROUP_INTERVAL_CREATE: u32 = 0;
pub const WORKGROUP_INTERVAL_DESTROY: u32 = 1;
pub const WORKGROUP_INTERVAL_CHANGE: u32 = 2;
pub const WORKGROUP_INTERVAL_START: u32 = 3;
pub const WORKGROUP_INTERVAL_UPDATE: u32 = 4;
pub const WORKGROUP_INTERVAL_FINISH: u32 = 5;
pub const WORKGROUP_INTERVAL_SET_WORKLOAD_ID: u32 = 6;
pub const WORKGROUP_INTERVAL_SET_WORKLOAD_ID_NAME: u32 = 7;
pub const KCOV_STKSZ_THRESHOLD_ABOVE: u32 = 0;
pub const KCOV_STKSZ_THRESHOLD_BELOW: u32 = 1;
pub const KCOV_STKSZ_DELTA: u32 = 2;
pub const MACH_MULTIQ_BOUND: u32 = 1;
pub const MACH_MULTIQ_GROUP: u32 = 2;
pub const MACH_MULTIQ_GLOBAL: u32 = 3;
pub const DBG_ZERO_FILL_FAULT: u32 = 1;
pub const DBG_PAGEIN_FAULT: u32 = 2;
pub const DBG_COW_FAULT: u32 = 3;
pub const DBG_CACHE_HIT_FAULT: u32 = 4;
pub const DBG_NZF_PAGE_FAULT: u32 = 5;
pub const DBG_GUARD_FAULT: u32 = 6;
pub const DBG_PAGEINV_FAULT: u32 = 7;
pub const DBG_PAGEIND_FAULT: u32 = 8;
pub const DBG_COMPRESSOR_FAULT: u32 = 9;
pub const DBG_COMPRESSOR_SWAPIN_FAULT: u32 = 10;
pub const DBG_COR_FAULT: u32 = 11;
pub const MACH_TASK_SUSPEND: u32 = 0;
pub const MACH_TASK_RESUME: u32 = 1;
pub const MACH_THREAD_SET_VOUCHER: u32 = 2;
pub const MACH_IPC_MSG_SEND: u32 = 3;
pub const MACH_IPC_MSG_RECV: u32 = 4;
pub const MACH_IPC_MSG_RECV_VOUCHER_REFUSED: u32 = 5;
pub const MACH_IPC_KMSG_FREE: u32 = 6;
pub const MACH_IPC_VOUCHER_CREATE: u32 = 7;
pub const MACH_IPC_VOUCHER_CREATE_ATTR_DATA: u32 = 8;
pub const MACH_IPC_VOUCHER_DESTROY: u32 = 9;
pub const MACH_IPC_KMSG_INFO: u32 = 10;
pub const MACH_IPC_KMSG_LINK: u32 = 11;
pub const MACH_IPC_PORT_ENTRY_MODIFY: u32 = 12;
pub const MACH_IPC_DESTROY_GUARDED_DESC: u32 = 13;
pub const MACH_THREAD_GROUP_NEW: u32 = 0;
pub const MACH_THREAD_GROUP_FREE: u32 = 1;
pub const MACH_THREAD_GROUP_SET: u32 = 2;
pub const MACH_THREAD_GROUP_NAME: u32 = 3;
pub const MACH_THREAD_GROUP_NAME_FREE: u32 = 4;
pub const MACH_THREAD_GROUP_FLAGS: u32 = 5;
pub const MACH_THREAD_GROUP_BLOCK: u32 = 6;
pub const MACH_THREAD_GROUP_PREADOPT: u32 = 7;
pub const MACH_THREAD_GROUP_PREADOPT_NEXTTIME: u32 = 8;
pub const MACH_THREAD_GROUP_PREADOPT_CLEAR: u32 = 9;
pub const MACH_THREAD_GROUP_PREADOPT_NA: u32 = 10;
pub const MACH_COALITION_NEW: u32 = 0;
pub const MACH_COALITION_FREE: u32 = 1;
pub const MACH_COALITION_ADOPT: u32 = 2;
pub const MACH_COALITION_REMOVE: u32 = 3;
pub const MACH_COALITION_THREAD_GROUP_SET: u32 = 4;
pub const PMAP__CREATE: u32 = 0;
pub const PMAP__DESTROY: u32 = 1;
pub const PMAP__PROTECT: u32 = 2;
pub const PMAP__PAGE_PROTECT: u32 = 3;
pub const PMAP__ENTER: u32 = 4;
pub const PMAP__REMOVE: u32 = 5;
pub const PMAP__NEST: u32 = 6;
pub const PMAP__UNNEST: u32 = 7;
pub const PMAP__FLUSH_TLBS: u32 = 8;
pub const PMAP__UPDATE_INTERRUPT: u32 = 9;
pub const PMAP__ATTRIBUTE_CLEAR: u32 = 10;
pub const PMAP__REUSABLE: u32 = 11;
pub const PMAP__QUERY_RESIDENT: u32 = 12;
pub const PMAP__FLUSH_KERN_TLBS: u32 = 13;
pub const PMAP__FLUSH_DELAYED_TLBS: u32 = 14;
pub const PMAP__FLUSH_TLBS_TO: u32 = 15;
pub const PMAP__FLUSH_EPT: u32 = 16;
pub const PMAP__FAST_FAULT: u32 = 17;
pub const PMAP__SWITCH: u32 = 18;
pub const PMAP__TTE: u32 = 19;
pub const PMAP__SWITCH_USER_TTB: u32 = 20;
pub const PMAP__UPDATE_CACHING: u32 = 21;
pub const PMAP__ATTRIBUTE_CLEAR_RANGE: u32 = 22;
pub const PMAP__CLEAR_USER_TTB: u32 = 23;
pub const PMAP__IOMMU_INIT: u32 = 24;
pub const PMAP__IOMMU_IOVMALLOC: u32 = 25;
pub const PMAP__IOMMU_IOVMFREE: u32 = 26;
pub const PMAP__IOMMU_MAP: u32 = 27;
pub const PMAP__IOMMU_UNMAP: u32 = 28;
pub const PMAP__IOMMU_IOCTL: u32 = 29;
pub const PMAP__IOMMU_GRANT_PAGE: u32 = 30;
pub const PMAP__BATCH_UPDATE_CACHING: u32 = 31;
pub const MACH_EPOCH_CHANGE: u32 = 0;
pub const MACH_BRIDGE_RCV_TS: u32 = 1;
pub const MACH_BRIDGE_REMOTE_TIME: u32 = 2;
pub const MACH_BRIDGE_RESET_TS: u32 = 3;
pub const MACH_BRIDGE_TS_PARAMS: u32 = 4;
pub const MACH_BRIDGE_SKIP_TS: u32 = 5;
pub const MACH_BRIDGE_TS_MISMATCH: u32 = 6;
pub const MACH_BRIDGE_OBSV_RATE: u32 = 7;
pub const MICROSTACKSHOT_RECORD: u32 = 0;
pub const MICROSTACKSHOT_GATHER: u32 = 1;
pub const STACKSHOT_RECORD: u32 = 2;
pub const STACKSHOT_RECORD_SHORT: u32 = 3;
pub const STACKSHOT_KERN_RECORD: u32 = 4;
pub const SYSDIAGNOSE_NOTIFY_USER: u32 = 0;
pub const SYSDIAGNOSE_FULL: u32 = 1;
pub const SYSDIAGNOSE_STACKSHOT: u32 = 2;
pub const SYSDIAGNOSE_TAILSPIN: u32 = 3;
pub const SFI_SET_WINDOW: u32 = 0;
pub const SFI_CANCEL_WINDOW: u32 = 1;
pub const SFI_SET_CLASS_OFFTIME: u32 = 2;
pub const SFI_CANCEL_CLASS_OFFTIME: u32 = 3;
pub const SFI_THREAD_DEFER: u32 = 4;
pub const SFI_OFF_TIMER: u32 = 5;
pub const SFI_ON_TIMER: u32 = 6;
pub const SFI_WAIT_CANCELED: u32 = 7;
pub const SFI_PID_SET_MANAGED: u32 = 8;
pub const SFI_PID_CLEAR_MANAGED: u32 = 9;
pub const SFI_GLOBAL_DEFER: u32 = 10;
pub const ZALLOC_ZCRAM: u32 = 0;
pub const RMON_ENABLE_CPUUSAGE_MONITOR: u32 = 1;
pub const RMON_CPUUSAGE_VIOLATED: u32 = 2;
pub const RMON_CPUUSAGE_SUSPENDED: u32 = 3;
pub const RMON_CPUUSAGE_VIOLATED_K32A: u32 = 4;
pub const RMON_CPUUSAGE_VIOLATED_K32B: u32 = 5;
pub const RMON_CPUUSAGE_RESUMED: u32 = 6;
pub const RMON_DISABLE_CPUUSAGE_MONITOR: u32 = 15;
pub const RMON_ENABLE_CPUWAKES_MONITOR: u32 = 17;
pub const RMON_CPUWAKES_VIOLATED: u32 = 18;
pub const RMON_CPUWAKES_VIOLATED_K32A: u32 = 20;
pub const RMON_CPUWAKES_VIOLATED_K32B: u32 = 21;
pub const RMON_DISABLE_CPUWAKES_MONITOR: u32 = 31;
pub const RMON_ENABLE_IO_MONITOR: u32 = 33;
pub const RMON_LOGWRITES_VIOLATED: u32 = 34;
pub const RMON_PHYSWRITES_VIOLATED: u32 = 35;
pub const RMON_LOGWRITES_VIOLATED_K32A: u32 = 36;
pub const RMON_LOGWRITES_VIOLATED_K32B: u32 = 37;
pub const RMON_DISABLE_IO_MONITOR: u32 = 47;
pub const HV_X86_ENTER: u32 = 0;
pub const HV_X86_ENTER_ERROR: u32 = 1;
pub const HV_X86_TRAP_TASK: u32 = 2;
pub const HV_X86_TRAP_THREAD: u32 = 3;
pub const HV_X86_INTERRUPT_INJECT: u32 = 4;
pub const HV_X86_INTERRUPT_RECV: u32 = 5;
pub const HV_X86_INTERRUPT_SEND: u32 = 6;
pub const HV_X86_IPI_SEND: u32 = 7;
pub const HV_X86_NMI_INJECT: u32 = 8;
pub const HV_X86_NMI_SEND: u32 = 9;
pub const HV_X86_LSC_HIT: u32 = 10;
pub const HV_X86_LSC_INSERT: u32 = 11;
pub const HV_X86_LSC_INSERT_IMM32: u32 = 12;
pub const HV_X86_LSC_INVALID: u32 = 13;
pub const HV_X86_LSC_INVALIDATE: u32 = 14;
pub const HV_X86_LSC_MISS: u32 = 15;
pub const HV_X86_TIMER_CANCEL: u32 = 16;
pub const HV_X86_TIMER_FIRE: u32 = 17;
pub const HV_X86_TIMER_SCHEDULE: u32 = 18;
pub const HV_X86_APIC_ACCESS_EXIT: u32 = 19;
pub const HV_X86_APIC_WRITE_EXIT: u32 = 20;
pub const HV_X86_EPT_VIOLATION_EXIT: u32 = 21;
pub const HV_X86_EXC_NMI_EXIT: u32 = 22;
pub const HV_X86_HLT_EXIT: u32 = 23;
pub const HV_X86_IO_EXIT: u32 = 24;
pub const HV_X86_IRQ_EXIT: u32 = 25;
pub const HV_X86_IRQ_WND_EXIT: u32 = 26;
pub const HV_X86_MOV_DR_EXIT: u32 = 27;
pub const HV_X86_NMI_WND_EXIT: u32 = 28;
pub const HV_X86_RDMSR_EXIT: u32 = 29;
pub const HV_X86_RDPMC_EXIT: u32 = 30;
pub const HV_X86_TPR_THRESHOLD_EXIT: u32 = 31;
pub const HV_X86_VMX_TIMER_EXPIRED_EXIT: u32 = 32;
pub const HV_X86_WRMSR_EXIT: u32 = 33;
pub const HV_X86_VCPU_READ_APIC_TRAP: u32 = 34;
pub const HV_X86_VCPU_READ_VMCS_TRAP: u32 = 35;
pub const HV_X86_VCPU_RUN_TRAP: u32 = 36;
pub const HV_X86_VCPU_RUN_UNTIL_TRAP: u32 = 37;
pub const HV_X86_VCPU_WRITE_APIC_TRAP: u32 = 38;
pub const HV_X86_VM_ADDRSPACE_CREATE_TRAP: u32 = 39;
pub const HV_X86_VM_ADDRSPACE_DESTROY_TRAP: u32 = 40;
pub const HV_X86_VM_INTR_MSI_TRAP: u32 = 41;
pub const HV_X86_VM_MAP_TRAP: u32 = 42;
pub const HV_X86_VM_PROTECT_TRAP: u32 = 43;
pub const HV_X86_VM_UNMAP_TRAP: u32 = 44;
pub const HV_X86_TSC_OFFSET_SET: u32 = 45;
pub const DBG_NETIP: u32 = 1;
pub const DBG_NETARP: u32 = 2;
pub const DBG_NETUDP: u32 = 3;
pub const DBG_NETTCP: u32 = 4;
pub const DBG_NETICMP: u32 = 5;
pub const DBG_NETIGMP: u32 = 6;
pub const DBG_NETRIP: u32 = 7;
pub const DBG_NETOSPF: u32 = 8;
pub const DBG_NETISIS: u32 = 9;
pub const DBG_NETSNMP: u32 = 10;
pub const DBG_NETSOCK: u32 = 11;
pub const DBG_NETAARP: u32 = 100;
pub const DBG_NETDDP: u32 = 101;
pub const DBG_NETNBP: u32 = 102;
pub const DBG_NETZIP: u32 = 103;
pub const DBG_NETADSP: u32 = 104;
pub const DBG_NETATP: u32 = 105;
pub const DBG_NETASP: u32 = 106;
pub const DBG_NETAFP: u32 = 107;
pub const DBG_NETRTMP: u32 = 108;
pub const DBG_NETAURP: u32 = 109;
pub const DBG_NETIPSEC: u32 = 128;
pub const DBG_NETVMNET: u32 = 129;
pub const DBG_IOINTC: u32 = 0;
pub const DBG_IOWORKLOOP: u32 = 1;
pub const DBG_IOINTES: u32 = 2;
pub const DBG_IOCLKES: u32 = 3;
pub const DBG_IOCMDQ: u32 = 4;
pub const DBG_IOMCURS: u32 = 5;
pub const DBG_IOMDESC: u32 = 6;
pub const DBG_IOPOWER: u32 = 7;
pub const DBG_IOSERVICE: u32 = 8;
pub const DBG_IOREGISTRY: u32 = 9;
pub const DBG_IOSTORAGE: u32 = 32;
pub const DBG_IONETWORK: u32 = 33;
pub const DBG_IOKEYBOARD: u32 = 34;
pub const DBG_IOHID: u32 = 35;
pub const DBG_IOAUDIO: u32 = 36;
pub const DBG_IOSERIAL: u32 = 37;
pub const DBG_IOTTY: u32 = 38;
pub const DBG_IOSAM: u32 = 39;
pub const DBG_IOPARALLELATA: u32 = 40;
pub const DBG_IOPARALLELSCSI: u32 = 41;
pub const DBG_IOSATA: u32 = 42;
pub const DBG_IOSAS: u32 = 43;
pub const DBG_IOFIBRECHANNEL: u32 = 44;
pub const DBG_IOUSB: u32 = 45;
pub const DBG_IOBLUETOOTH: u32 = 46;
pub const DBG_IOFIREWIRE: u32 = 47;
pub const DBG_IOINFINIBAND: u32 = 48;
pub const DBG_IOCPUPM: u32 = 49;
pub const DBG_IOGRAPHICS: u32 = 50;
pub const DBG_HIBERNATE: u32 = 51;
pub const DBG_IOTHUNDERBOLT: u32 = 52;
pub const DBG_BOOTER: u32 = 53;
pub const DBG_IOAUDIO2: u32 = 54;
pub const DBG_IOAFK: u32 = 55;
pub const DBG_IOSURFACEPA: u32 = 64;
pub const DBG_IOMDPA: u32 = 65;
pub const DBG_IODARTPA: u32 = 66;
pub const DBG_IOPOINTING: u32 = 35;
pub const DBG_IODISK: u32 = 32;
pub const DBG_DRVSTORAGE: u32 = 1;
pub const DBG_DRVNETWORK: u32 = 2;
pub const DBG_DRVKEYBOARD: u32 = 3;
pub const DBG_DRVHID: u32 = 4;
pub const DBG_DRVAUDIO: u32 = 5;
pub const DBG_DRVSERIAL: u32 = 7;
pub const DBG_DRVSAM: u32 = 8;
pub const DBG_DRVPARALLELATA: u32 = 9;
pub const DBG_DRVPARALLELSCSI: u32 = 10;
pub const DBG_DRVSATA: u32 = 11;
pub const DBG_DRVSAS: u32 = 12;
pub const DBG_DRVFIBRECHANNEL: u32 = 13;
pub const DBG_DRVUSB: u32 = 14;
pub const DBG_DRVBLUETOOTH: u32 = 15;
pub const DBG_DRVFIREWIRE: u32 = 16;
pub const DBG_DRVINFINIBAND: u32 = 17;
pub const DBG_DRVGRAPHICS: u32 = 18;
pub const DBG_DRVSD: u32 = 19;
pub const DBG_DRVNAND: u32 = 20;
pub const DBG_SSD: u32 = 21;
pub const DBG_DRVSPI: u32 = 22;
pub const DBG_DRVWLAN_802_11: u32 = 23;
pub const DBG_DRVSSM: u32 = 24;
pub const DBG_DRVSMC: u32 = 25;
pub const DBG_DRVMACEFIMANAGER: u32 = 26;
pub const DBG_DRVANE: u32 = 27;
pub const DBG_DRVETHERNET: u32 = 28;
pub const DBG_DRVMCC: u32 = 29;
pub const DBG_DRVACCESSORY: u32 = 30;
pub const DBG_SOCDIAGS: u32 = 31;
pub const DBG_DRVVIRTIO: u32 = 32;
pub const DBG_DRVCELLULAR: u32 = 33;
pub const DBG_DRVPOINTING: u32 = 4;
pub const DBG_DRVDISK: u32 = 1;
pub const DBG_DLIL_STATIC: u32 = 1;
pub const DBG_DLIL_PR_MOD: u32 = 2;
pub const DBG_DLIL_IF_MOD: u32 = 3;
pub const DBG_DLIL_PR_FLT: u32 = 4;
pub const DBG_DLIL_IF_FLT: u32 = 5;
pub const DBG_FSRW: u32 = 1;
pub const DBG_DKRW: u32 = 2;
pub const DBG_FSVN: u32 = 3;
pub const DBG_FSLOOOKUP: u32 = 4;
pub const DBG_JOURNAL: u32 = 5;
pub const DBG_IOCTL: u32 = 6;
pub const DBG_BOOTCACHE: u32 = 7;
pub const DBG_HFS: u32 = 8;
pub const DBG_APFS: u32 = 9;
pub const DBG_SMB: u32 = 10;
pub const DBG_MOUNT: u32 = 11;
pub const DBG_EXFAT: u32 = 14;
pub const DBG_MSDOS: u32 = 15;
pub const DBG_ACFS: u32 = 16;
pub const DBG_THROTTLE: u32 = 17;
pub const DBG_DECMP: u32 = 18;
pub const DBG_VFS: u32 = 19;
pub const DBG_LIVEFS: u32 = 20;
pub const DBG_CONTENT_PROT: u32 = 207;
pub const DBG_HFS_UPDATE_ACCTIME: u32 = 1;
pub const DBG_HFS_UPDATE_MODTIME: u32 = 2;
pub const DBG_HFS_UPDATE_CHGTIME: u32 = 4;
pub const DBG_HFS_UPDATE_MODIFIED: u32 = 8;
pub const DBG_HFS_UPDATE_FORCE: u32 = 16;
pub const DBG_HFS_UPDATE_DATEADDED: u32 = 32;
pub const DBG_HFS_UPDATE_MINOR: u32 = 64;
pub const DBG_HFS_UPDATE_SKIPPED: u32 = 128;
pub const DBG_VFS_IO_COMPRESSION_STATS: u32 = 4096;
pub const DBG_BSD_PROC: u32 = 1;
pub const DBG_BSD_MEMSTAT: u32 = 2;
pub const DBG_BSD_KEVENT: u32 = 3;
pub const DBG_BSD_EXCP_SC: u32 = 12;
pub const DBG_BSD_AIO: u32 = 13;
pub const DBG_BSD_SC_EXTENDED_INFO: u32 = 14;
pub const DBG_BSD_SC_EXTENDED_INFO2: u32 = 15;
pub const DBG_BSD_KDEBUG_TEST: u32 = 255;
pub const BSD_PROC_EXIT: u32 = 1;
pub const BSD_PROC_FRCEXIT: u32 = 2;
pub const BSD_PROC_EXEC: u32 = 3;
pub const BSD_PROC_EXITREASON_CREATE: u32 = 4;
pub const BSD_PROC_EXITREASON_COMMIT: u32 = 5;
pub const BSD_MEMSTAT_SCAN: u32 = 1;
pub const BSD_MEMSTAT_JETSAM: u32 = 2;
pub const BSD_MEMSTAT_JETSAM_HIWAT: u32 = 3;
pub const BSD_MEMSTAT_FREEZE: u32 = 4;
pub const BSD_MEMSTAT_FREEZE_SCAN: u32 = 5;
pub const BSD_MEMSTAT_UPDATE: u32 = 6;
pub const BSD_MEMSTAT_IDLE_DEMOTE: u32 = 7;
pub const BSD_MEMSTAT_CLEAR_ERRORS: u32 = 8;
pub const BSD_MEMSTAT_DIRTY_TRACK: u32 = 9;
pub const BSD_MEMSTAT_DIRTY_SET: u32 = 10;
pub const BSD_MEMSTAT_DIRTY_CLEAR: u32 = 11;
pub const BSD_MEMSTAT_FAST_JETSAM: u32 = 15;
pub const BSD_MEMSTAT_COMPACTOR_RUN: u32 = 16;
pub const BSD_MEMSTAT_FREEZE_DISABLE: u32 = 17;
pub const BSD_MEMSTAT_RELAUNCH_FLAGS: u32 = 18;
pub const BSD_KEVENT_KQ_PROCESS_BEGIN: u32 = 1;
pub const BSD_KEVENT_KQ_PROCESS_END: u32 = 2;
pub const BSD_KEVENT_KQWQ_PROCESS_BEGIN: u32 = 3;
pub const BSD_KEVENT_KQWQ_PROCESS_END: u32 = 4;
pub const BSD_KEVENT_KQWQ_BIND: u32 = 5;
pub const BSD_KEVENT_KQWQ_UNBIND: u32 = 6;
pub const BSD_KEVENT_KQWQ_THREQUEST: u32 = 7;
pub const BSD_KEVENT_KQWL_PROCESS_BEGIN: u32 = 8;
pub const BSD_KEVENT_KQWL_PROCESS_END: u32 = 9;
pub const BSD_KEVENT_KQWL_THREQUEST: u32 = 10;
pub const BSD_KEVENT_KQWL_THADJUST: u32 = 11;
pub const BSD_KEVENT_KQ_REGISTER: u32 = 12;
pub const BSD_KEVENT_KQWQ_REGISTER: u32 = 13;
pub const BSD_KEVENT_KQWL_REGISTER: u32 = 14;
pub const BSD_KEVENT_KNOTE_ACTIVATE: u32 = 15;
pub const BSD_KEVENT_KQ_PROCESS: u32 = 16;
pub const BSD_KEVENT_KQWQ_PROCESS: u32 = 17;
pub const BSD_KEVENT_KQWL_PROCESS: u32 = 18;
pub const BSD_KEVENT_KQWL_BIND: u32 = 19;
pub const BSD_KEVENT_KQWL_UNBIND: u32 = 20;
pub const BSD_KEVENT_KNOTE_ENABLE: u32 = 21;
pub const BSD_KEVENT_KNOTE_VANISHED: u32 = 22;
pub const DBG_TRACE_DATA: u32 = 0;
pub const DBG_TRACE_STRING: u32 = 1;
pub const DBG_TRACE_INFO: u32 = 2;
pub const DBG_CS_IO: u32 = 0;
pub const DBG_SEC_KERNEL: u32 = 0;
pub const DBG_SEC_SANDBOX: u32 = 1;
pub const DBG_MT_INSTRS_CYCLES: u32 = 1;
pub const DBG_MT_DEBUG: u32 = 2;
pub const DBG_MT_RESOURCES_PROC_EXIT: u32 = 3;
pub const DBG_MT_RESOURCES_THR_EXIT: u32 = 4;
pub const DBG_MT_TMPTH: u32 = 254;
pub const DBG_MT_TMPCPU: u32 = 255;
pub const DBG_MISC_COREBRIGHTNESS: u32 = 1;
pub const DBG_MISC_VIDEOENG: u32 = 2;
pub const DBG_EVENT: u32 = 16;
pub const DBG_MISC_INSTRUMENTS: u32 = 17;
pub const DBG_MISC_INSTRUMENTSBT: u32 = 18;
pub const DBG_MISC_RUNLOOP_DETAILS: u32 = 19;
pub const DBG_MISC_RUNLOOP_BUSY: u32 = 20;
pub const DBG_MISC_LAYOUT: u32 = 26;
pub const DBG_BUFFER: u32 = 32;
pub const DBG_DYLD_UUID: u32 = 5;
pub const DBG_DYLD_UUID_MAP_A: u32 = 0;
pub const DBG_DYLD_UUID_MAP_B: u32 = 1;
pub const DBG_DYLD_UUID_MAP_32_A: u32 = 2;
pub const DBG_DYLD_UUID_MAP_32_B: u32 = 3;
pub const DBG_DYLD_UUID_MAP_32_C: u32 = 4;
pub const DBG_DYLD_UUID_UNMAP_A: u32 = 5;
pub const DBG_DYLD_UUID_UNMAP_B: u32 = 6;
pub const DBG_DYLD_UUID_UNMAP_32_A: u32 = 7;
pub const DBG_DYLD_UUID_UNMAP_32_B: u32 = 8;
pub const DBG_DYLD_UUID_UNMAP_32_C: u32 = 9;
pub const DBG_DYLD_UUID_SHARED_CACHE_A: u32 = 10;
pub const DBG_DYLD_UUID_SHARED_CACHE_B: u32 = 11;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_A: u32 = 12;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_B: u32 = 13;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_C: u32 = 14;
pub const DBG_DYLD_AOT_UUID_MAP_A: u32 = 15;
pub const DBG_DYLD_AOT_UUID_MAP_B: u32 = 16;
pub const DKIO_DONE: u32 = 1;
pub const DKIO_READ: u32 = 2;
pub const DKIO_ASYNC: u32 = 4;
pub const DKIO_META: u32 = 8;
pub const DKIO_PAGING: u32 = 16;
pub const DKIO_THROTTLE: u32 = 32;
pub const DKIO_PASSIVE: u32 = 64;
pub const DKIO_NOCACHE: u32 = 128;
pub const DKIO_TIER_MASK: u32 = 3840;
pub const DKIO_TIER_SHIFT: u32 = 8;
pub const DKIO_TIER_UPGRADE: u32 = 4096;
pub const DBG_APP_LOGINWINDOW: u32 = 3;
pub const DBG_APP_AUDIO: u32 = 4;
pub const DBG_APP_SYSTEMUI: u32 = 5;
pub const DBG_APP_SIGNPOST: u32 = 10;
pub const DBG_APP_TAL: u32 = 11;
pub const DBG_APP_APPKIT: u32 = 12;
pub const DBG_APP_UIKIT: u32 = 13;
pub const DBG_APP_DFR: u32 = 14;
pub const DBG_APP_LAYOUT: u32 = 15;
pub const DBG_APP_COREDATA: u32 = 16;
pub const DBG_APP_RUNLOOP_BASIC: u32 = 17;
pub const DBG_APP_RUNLOOP_ADVANCED: u32 = 18;
pub const DBG_APP_SAMBA: u32 = 128;
pub const DBG_APP_EOSSUPPORT: u32 = 129;
pub const DBG_APP_MACEFIMANAGER: u32 = 130;
pub const OPEN_THROTTLE_WINDOW: u32 = 1;
pub const PROCESS_THROTTLED: u32 = 2;
pub const IO_THROTTLE_DISABLE: u32 = 3;
pub const IO_TIER_UPL_MISMATCH: u32 = 4;
pub const IMP_ASSERTION: u32 = 16;
pub const IMP_BOOST: u32 = 17;
pub const IMP_MSG: u32 = 18;
pub const IMP_WATCHPORT: u32 = 19;
pub const IMP_TASK_SUPPRESSION: u32 = 23;
pub const IMP_TASK_APPTYPE: u32 = 24;
pub const IMP_UPDATE: u32 = 25;
pub const IMP_USYNCH_QOS_OVERRIDE: u32 = 26;
pub const IMP_DONOR_CHANGE: u32 = 27;
pub const IMP_MAIN_THREAD_QOS: u32 = 28;
pub const IMP_SYNC_IPC_QOS: u32 = 29;
pub const IMP_TASK_POLICY_DARWIN_BG: u32 = 33;
pub const IMP_TASK_POLICY_IOPOL: u32 = 34;
pub const IMP_TASK_POLICY_IO: u32 = 35;
pub const IMP_TASK_POLICY_PASSIVE_IO: u32 = 36;
pub const IMP_TASK_POLICY_DARWIN_BG_IOPOL: u32 = 39;
pub const IMP_TASK_POLICY_BOOST: u32 = 41;
pub const IMP_TASK_POLICY_ROLE: u32 = 42;
pub const IMP_TASK_POLICY_TERMINATED: u32 = 44;
pub const IMP_TASK_POLICY_NEW_SOCKETS_BG: u32 = 45;
pub const IMP_TASK_POLICY_SUP_ACTIVE: u32 = 46;
pub const IMP_TASK_POLICY_LATENCY_QOS: u32 = 47;
pub const IMP_TASK_POLICY_THROUGH_QOS: u32 = 48;
pub const IMP_TASK_POLICY_WATCHERS_BG: u32 = 49;
pub const IMP_TASK_POLICY_SFI_MANAGED: u32 = 52;
pub const IMP_TASK_POLICY_ALL_SOCKETS_BG: u32 = 55;
pub const IMP_TASK_POLICY_BASE_LATENCY_AND_THROUGHPUT_QOS: u32 = 57;
pub const IMP_TASK_POLICY_OVERRIDE_LATENCY_AND_THROUGHPUT_QOS: u32 = 58;
pub const IMP_TASK_POLICY_PIDBIND_BG: u32 = 50;
pub const IMP_TASK_POLICY_QOS_OVERRIDE: u32 = 54;
pub const IMP_TASK_POLICY_QOS_AND_RELPRIO: u32 = 56;
pub const IMP_TASK_POLICY_QOS_WORKQ_OVERRIDE: u32 = 59;
pub const IMP_TASK_POLICY_QOS_PROMOTE: u32 = 60;
pub const IMP_TASK_POLICY_QOS_KEVENT_OVERRIDE: u32 = 61;
pub const IMP_TASK_POLICY_QOS_IPC_OVERRIDE: u32 = 61;
pub const IMP_TASK_POLICY_QOS_SERVICER_OVERRIDE: u32 = 62;
pub const IMP_TASK_POLICY_IOTIER_KEVENT_OVERRIDE: u32 = 63;
pub const IMP_TASK_POLICY_WI_DRIVEN: u32 = 64;
pub const IMP_HOLD: u32 = 2;
pub const IMP_DROP: u32 = 4;
pub const IMP_EXTERN: u32 = 8;
pub const IMP_BOOSTED: u32 = 1;
pub const IMP_UNBOOSTED: u32 = 2;
pub const IMP_MSG_SEND: u32 = 1;
pub const IMP_MSG_DELV: u32 = 2;
pub const IMP_UPDATE_TASK_CREATE: u32 = 1;
pub const IMP_USYNCH_ADD_OVERRIDE: u32 = 0;
pub const IMP_USYNCH_REMOVE_OVERRIDE: u32 = 1;
pub const IMP_DONOR_UPDATE_LIVE_DONOR_STATE: u32 = 0;
pub const IMP_DONOR_INIT_DONOR_STATE: u32 = 1;
pub const IMP_SYNC_IPC_QOS_APPLIED: u32 = 0;
pub const IMP_SYNC_IPC_QOS_REMOVED: u32 = 1;
pub const IMP_SYNC_IPC_QOS_OVERFLOW: u32 = 2;
pub const IMP_SYNC_IPC_QOS_UNDERFLOW: u32 = 3;
pub const TURNSTILE_HEAP_OPERATIONS: u32 = 16;
pub const TURNSTILE_PRIORITY_OPERATIONS: u32 = 32;
pub const TURNSTILE_FREELIST_OPERATIONS: u32 = 48;
pub const THREAD_ADDED_TO_TURNSTILE_WAITQ: u32 = 1;
pub const THREAD_REMOVED_FROM_TURNSTILE_WAITQ: u32 = 2;
pub const THREAD_MOVED_IN_TURNSTILE_WAITQ: u32 = 3;
pub const TURNSTILE_ADDED_TO_TURNSTILE_HEAP: u32 = 4;
pub const TURNSTILE_REMOVED_FROM_TURNSTILE_HEAP: u32 = 5;
pub const TURNSTILE_MOVED_IN_TURNSTILE_HEAP: u32 = 6;
pub const TURNSTILE_ADDED_TO_THREAD_HEAP: u32 = 7;
pub const TURNSTILE_REMOVED_FROM_THREAD_HEAP: u32 = 8;
pub const TURNSTILE_MOVED_IN_THREAD_HEAP: u32 = 9;
pub const TURNSTILE_UPDATE_STOPPED_BY_LIMIT: u32 = 10;
pub const THREAD_NOT_WAITING_ON_TURNSTILE: u32 = 11;
pub const TURNSTILE_PRIORITY_CHANGE: u32 = 1;
pub const THREAD_USER_PROMOTION_CHANGE: u32 = 2;
pub const TURNSTILE_PREPARE: u32 = 1;
pub const TURNSTILE_COMPLETE: u32 = 2;
pub const BANK_ACCOUNT_INFO: u32 = 16;
pub const BANK_TASK_INFO: u32 = 17;
pub const ATM_SUBAID_INFO: u32 = 16;
pub const ATM_GETVALUE_INFO: u32 = 32;
pub const ATM_UNREGISTER_INFO: u32 = 48;
pub const BANK_SETTLE_CPU_TIME: u32 = 1;
pub const BANK_SECURE_ORIGINATOR_CHANGED: u32 = 2;
pub const BANK_SETTLE_ENERGY: u32 = 3;
pub const ATM_MIN_CALLED: u32 = 1;
pub const ATM_LINK_LIST_TRIM: u32 = 2;
pub const ATM_VALUE_REPLACED: u32 = 1;
pub const ATM_VALUE_ADDED: u32 = 2;
pub const ATM_VALUE_UNREGISTERED: u32 = 1;
pub const ATM_VALUE_DIFF_MAILBOX: u32 = 2;
pub const DBG_DAEMON_COREDUET: u32 = 1;
pub const DBG_DAEMON_POWERD: u32 = 2;
pub const DBG_UMALLOC_EXTERNAL: u32 = 1;
pub const DBG_UMALLOC_INTERNAL: u32 = 2;
pub const LCID_PROC_SELF: u32 = 0;
pub const LCID_REMOVE: i32 = -1;
pub const LCID_CREATE: u32 = 0;
pub const KEV_CTL_SUBCLASS: u32 = 2;
pub const KEV_CTL_REGISTERED: u32 = 1;
pub const KEV_CTL_DEREGISTERED: u32 = 2;
pub const MAX_KCTL_NAME: u32 = 96;
pub const MT_FREE: u32 = 0;
pub const MT_DATA: u32 = 1;
pub const MT_HEADER: u32 = 2;
pub const MT_SOCKET: u32 = 3;
pub const MT_PCB: u32 = 4;
pub const MT_RTABLE: u32 = 5;
pub const MT_HTABLE: u32 = 6;
pub const MT_ATABLE: u32 = 7;
pub const MT_SONAME: u32 = 8;
pub const MT_SOOPTS: u32 = 10;
pub const MT_FTABLE: u32 = 11;
pub const MT_RIGHTS: u32 = 12;
pub const MT_IFADDR: u32 = 13;
pub const MT_CONTROL: u32 = 14;
pub const MT_OOBDATA: u32 = 15;
pub const MT_TAG: u32 = 16;
pub const MT_MAX: u32 = 32;
pub const MAX_MBUF_CNAME: u32 = 15;
pub const MCS_DISABLED: u32 = 0;
pub const MCS_ONLINE: u32 = 1;
pub const MCS_PURGING: u32 = 2;
pub const MCS_OFFLINE: u32 = 3;
pub const MAX_MSG_BSIZE: u32 = 1048576;
pub const MSG_MAGIC: u32 = 405601;
pub const _PATH_FORKSPECIFIER: &[u8; 14usize] = b"/..namedfork/\0";
pub const _PATH_DATANAME: &[u8; 5usize] = b"data\0";
pub const _PATH_RSRCNAME: &[u8; 5usize] = b"rsrc\0";
pub const _PATH_RSRCFORKSPEC: &[u8; 18usize] = b"/..namedfork/rsrc\0";
pub const PIPE_SIZE: u32 = 16384;
pub const PIPE_KVAMAX: u32 = 16777216;
pub const BIG_PIPE_SIZE: u32 = 65536;
pub const PIPE_MINDIRECT: u32 = 8192;
pub const PIPE_ASYNC: u32 = 4;
pub const PIPE_WANTR: u32 = 8;
pub const PIPE_WANTW: u32 = 16;
pub const PIPE_WANT: u32 = 32;
pub const PIPE_EOF: u32 = 128;
pub const PIPE_LOCKFL: u32 = 256;
pub const PIPE_LWANT: u32 = 512;
pub const PIPE_DIRECTW: u32 = 1024;
pub const PIPE_DIRECTOK: u32 = 2048;
pub const PIPE_DRAIN: u32 = 8192;
pub const PIPE_WSELECT: u32 = 16384;
pub const PIPE_DEAD: u32 = 32768;
pub const PROC_ALL_PIDS: u32 = 1;
pub const PROC_PGRP_ONLY: u32 = 2;
pub const PROC_TTY_ONLY: u32 = 3;
pub const PROC_UID_ONLY: u32 = 4;
pub const PROC_RUID_ONLY: u32 = 5;
pub const PROC_PPID_ONLY: u32 = 6;
pub const PROC_KDBG_ONLY: u32 = 7;
pub const PROC_FLAG_SYSTEM: u32 = 1;
pub const PROC_FLAG_TRACED: u32 = 2;
pub const PROC_FLAG_INEXIT: u32 = 4;
pub const PROC_FLAG_PPWAIT: u32 = 8;
pub const PROC_FLAG_LP64: u32 = 16;
pub const PROC_FLAG_SLEADER: u32 = 32;
pub const PROC_FLAG_CTTY: u32 = 64;
pub const PROC_FLAG_CONTROLT: u32 = 128;
pub const PROC_FLAG_THCWD: u32 = 256;
pub const PROC_FLAG_PC_THROTTLE: u32 = 512;
pub const PROC_FLAG_PC_SUSP: u32 = 1024;
pub const PROC_FLAG_PC_KILL: u32 = 1536;
pub const PROC_FLAG_PC_MASK: u32 = 1536;
pub const PROC_FLAG_PA_THROTTLE: u32 = 2048;
pub const PROC_FLAG_PA_SUSP: u32 = 4096;
pub const PROC_FLAG_PSUGID: u32 = 8192;
pub const PROC_FLAG_EXEC: u32 = 16384;
pub const PROC_REGION_SUBMAP: u32 = 1;
pub const PROC_REGION_SHARED: u32 = 2;
pub const WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT: u32 = 1;
pub const WQ_EXCEEDED_TOTAL_THREAD_LIMIT: u32 = 2;
pub const WQ_FLAGS_AVAILABLE: u32 = 4;
pub const PROC_FP_SHARED: u32 = 1;
pub const PROC_FP_CLEXEC: u32 = 2;
pub const PROC_FP_GUARDED: u32 = 4;
pub const PROC_FP_CLFORK: u32 = 8;
pub const PROC_FI_GUARD_CLOSE: u32 = 1;
pub const PROC_FI_GUARD_DUP: u32 = 2;
pub const PROC_FI_GUARD_SOCKET_IPC: u32 = 4;
pub const PROC_FI_GUARD_FILEPORT: u32 = 8;
pub const INI_IPV4: u32 = 1;
pub const INI_IPV6: u32 = 2;
pub const TSI_T_REXMT: u32 = 0;
pub const TSI_T_PERSIST: u32 = 1;
pub const TSI_T_KEEP: u32 = 2;
pub const TSI_T_2MSL: u32 = 3;
pub const TSI_T_NTIMERS: u32 = 4;
pub const TSI_S_CLOSED: u32 = 0;
pub const TSI_S_LISTEN: u32 = 1;
pub const TSI_S_SYN_SENT: u32 = 2;
pub const TSI_S_SYN_RECEIVED: u32 = 3;
pub const TSI_S_ESTABLISHED: u32 = 4;
pub const TSI_S__CLOSE_WAIT: u32 = 5;
pub const TSI_S_FIN_WAIT_1: u32 = 6;
pub const TSI_S_CLOSING: u32 = 7;
pub const TSI_S_LAST_ACK: u32 = 8;
pub const TSI_S_FIN_WAIT_2: u32 = 9;
pub const TSI_S_TIME_WAIT: u32 = 10;
pub const TSI_S_RESERVED: u32 = 11;
pub const SOI_S_NOFDREF: u32 = 1;
pub const SOI_S_ISCONNECTED: u32 = 2;
pub const SOI_S_ISCONNECTING: u32 = 4;
pub const SOI_S_ISDISCONNECTING: u32 = 8;
pub const SOI_S_CANTSENDMORE: u32 = 16;
pub const SOI_S_CANTRCVMORE: u32 = 32;
pub const SOI_S_RCVATMARK: u32 = 64;
pub const SOI_S_PRIV: u32 = 128;
pub const SOI_S_NBIO: u32 = 256;
pub const SOI_S_ASYNC: u32 = 512;
pub const SOI_S_INCOMP: u32 = 2048;
pub const SOI_S_COMP: u32 = 4096;
pub const SOI_S_ISDISCONNECTED: u32 = 8192;
pub const SOI_S_DRAINING: u32 = 16384;
pub const PROC_KQUEUE_SELECT: u32 = 1;
pub const PROC_KQUEUE_SLEEP: u32 = 2;
pub const PROC_KQUEUE_32: u32 = 8;
pub const PROC_KQUEUE_64: u32 = 16;
pub const PROC_KQUEUE_QOS: u32 = 32;
pub const PROX_FDTYPE_ATALK: u32 = 0;
pub const PROX_FDTYPE_VNODE: u32 = 1;
pub const PROX_FDTYPE_SOCKET: u32 = 2;
pub const PROX_FDTYPE_PSHM: u32 = 3;
pub const PROX_FDTYPE_PSEM: u32 = 4;
pub const PROX_FDTYPE_KQUEUE: u32 = 5;
pub const PROX_FDTYPE_PIPE: u32 = 6;
pub const PROX_FDTYPE_FSEVENTS: u32 = 7;
pub const PROX_FDTYPE_NETPOLICY: u32 = 9;
pub const PROX_FDTYPE_CHANNEL: u32 = 10;
pub const PROX_FDTYPE_NEXUS: u32 = 11;
pub const PROC_CHANNEL_TYPE_USER_PIPE: u32 = 0;
pub const PROC_CHANNEL_TYPE_KERNEL_PIPE: u32 = 1;
pub const PROC_CHANNEL_TYPE_NET_IF: u32 = 2;
pub const PROC_CHANNEL_TYPE_FLOW_SWITCH: u32 = 3;
pub const PROC_CHANNEL_FLAGS_MONITOR_TX: u32 = 1;
pub const PROC_CHANNEL_FLAGS_MONITOR_RX: u32 = 2;
pub const PROC_CHANNEL_FLAGS_MONITOR_NO_COPY: u32 = 4;
pub const PROC_CHANNEL_FLAGS_EXCLUSIVE: u32 = 16;
pub const PROC_CHANNEL_FLAGS_USER_PACKET_POOL: u32 = 32;
pub const PROC_CHANNEL_FLAGS_DEFUNCT_OK: u32 = 64;
pub const PROC_CHANNEL_FLAGS_LOW_LATENCY: u32 = 128;
pub const PROC_CHANNEL_FLAGS_MONITOR: u32 = 3;
pub const PROC_PIDLISTFDS: u32 = 1;
pub const PROC_PIDTASKALLINFO: u32 = 2;
pub const PROC_PIDTBSDINFO: u32 = 3;
pub const PROC_PIDTASKINFO: u32 = 4;
pub const PROC_PIDTHREADINFO: u32 = 5;
pub const PROC_PIDLISTTHREADS: u32 = 6;
pub const PROC_PIDREGIONINFO: u32 = 7;
pub const PROC_PIDREGIONPATHINFO: u32 = 8;
pub const PROC_PIDVNODEPATHINFO: u32 = 9;
pub const PROC_PIDTHREADPATHINFO: u32 = 10;
pub const PROC_PIDPATHINFO: u32 = 11;
pub const PROC_PIDPATHINFO_SIZE: u32 = 1024;
pub const PROC_PIDPATHINFO_MAXSIZE: u32 = 4096;
pub const PROC_PIDWORKQUEUEINFO: u32 = 12;
pub const PROC_PIDT_SHORTBSDINFO: u32 = 13;
pub const PROC_PIDLISTFILEPORTS: u32 = 14;
pub const PROC_PIDTHREADID64INFO: u32 = 15;
pub const PROC_PID_RUSAGE: u32 = 16;
pub const PROC_PID_RUSAGE_SIZE: u32 = 0;
pub const PROC_PIDFDVNODEINFO: u32 = 1;
pub const PROC_PIDFDVNODEPATHINFO: u32 = 2;
pub const PROC_PIDFDSOCKETINFO: u32 = 3;
pub const PROC_PIDFDPSEMINFO: u32 = 4;
pub const PROC_PIDFDPSHMINFO: u32 = 5;
pub const PROC_PIDFDPIPEINFO: u32 = 6;
pub const PROC_PIDFDKQUEUEINFO: u32 = 7;
pub const PROC_PIDFDATALKINFO: u32 = 8;
pub const PROC_PIDFDCHANNELINFO: u32 = 10;
pub const PROC_PIDFILEPORTVNODEPATHINFO: u32 = 2;
pub const PROC_PIDFILEPORTSOCKETINFO: u32 = 3;
pub const PROC_PIDFILEPORTPSHMINFO: u32 = 5;
pub const PROC_PIDFILEPORTPIPEINFO: u32 = 6;
pub const PROC_SELFSET_PCONTROL: u32 = 1;
pub const PROC_SELFSET_THREADNAME: u32 = 2;
pub const PROC_SELFSET_THREADNAME_SIZE: u32 = 63;
pub const PROC_SELFSET_VMRSRCOWNER: u32 = 3;
pub const PROC_SELFSET_DELAYIDLESLEEP: u32 = 4;
pub const PROC_DIRTYCONTROL_TRACK: u32 = 1;
pub const PROC_DIRTYCONTROL_SET: u32 = 2;
pub const PROC_DIRTYCONTROL_GET: u32 = 3;
pub const PROC_DIRTYCONTROL_CLEAR: u32 = 4;
pub const PROC_DIRTY_TRACK: u32 = 1;
pub const PROC_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const PROC_DIRTY_DEFER: u32 = 4;
pub const PROC_DIRTY_LAUNCH_IN_PROGRESS: u32 = 8;
pub const PROC_DIRTY_DEFER_ALWAYS: u32 = 16;
pub const PROC_DIRTY_TRACKED: u32 = 1;
pub const PROC_DIRTY_ALLOWS_IDLE_EXIT: u32 = 2;
pub const PROC_DIRTY_IS_DIRTY: u32 = 4;
pub const PROC_DIRTY_LAUNCH_IS_IN_PROGRESS: u32 = 8;
pub const PROC_UDATA_INFO_GET: u32 = 1;
pub const PROC_UDATA_INFO_SET: u32 = 2;
pub const MAX_IQ_TIME: u32 = 604800;
pub const MAX_DQ_TIME: u32 = 604800;
pub const MAXQUOTAS: u32 = 2;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const QUOTAFILENAME: &[u8; 7usize] = b".quota\0";
pub const QUOTAOPSNAME: &[u8; 11usize] = b".quota.ops\0";
pub const QUOTAGROUP: &[u8; 9usize] = b"operator\0";
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_QUOTAON: u32 = 256;
pub const Q_QUOTAOFF: u32 = 512;
pub const Q_GETQUOTA: u32 = 768;
pub const Q_SETQUOTA: u32 = 1024;
pub const Q_SETUSE: u32 = 1280;
pub const Q_SYNC: u32 = 1536;
pub const Q_QUOTASTAT: u32 = 1792;
pub const QF_VERSION: u32 = 1;
pub const QF_STRING_TAG: &[u8; 16usize] = b"QUOTA HASH FILE\0";
pub const QF_USERS_PER_GB: u32 = 256;
pub const QF_MIN_USERS: u32 = 2048;
pub const QF_MAX_USERS: u32 = 2097152;
pub const QF_GROUPS_PER_GB: u32 = 32;
pub const QF_MIN_GROUPS: u32 = 2048;
pub const QF_MAX_GROUPS: u32 = 262144;
pub const RB_DIR_LEFT: u32 = 0;
pub const RB_DIR_RIGHT: u32 = 1;
pub const RB_AUTOBOOT: u32 = 0;
pub const RB_ASKNAME: u32 = 1;
pub const RB_SINGLE: u32 = 2;
pub const RB_NOSYNC: u32 = 4;
pub const RB_HALT: u32 = 8;
pub const RB_INITNAME: u32 = 16;
pub const RB_DFLTROOT: u32 = 32;
pub const RB_ALTBOOT: u32 = 64;
pub const RB_UNIPROC: u32 = 128;
pub const RB_SAFEBOOT: u32 = 256;
pub const RB_UPSDELAY: u32 = 512;
pub const RB_QUICK: u32 = 1024;
pub const RB_PANIC: u32 = 2048;
pub const RB_PANIC_ZPRINT: u32 = 4096;
pub const RB_PANIC_FORCERESET: u32 = 8192;
pub const B_ADAPTORSHIFT: u32 = 24;
pub const B_ADAPTORMASK: u32 = 15;
pub const B_CONTROLLERSHIFT: u32 = 20;
pub const B_CONTROLLERMASK: u32 = 15;
pub const B_UNITSHIFT: u32 = 16;
pub const B_UNITMASK: u32 = 255;
pub const B_PARTITIONSHIFT: u32 = 8;
pub const B_PARTITIONMASK: u32 = 255;
pub const B_TYPESHIFT: u32 = 0;
pub const B_TYPEMASK: u32 = 255;
pub const B_MAGICMASK: u32 = 4026531840;
pub const B_DEVMAGIC: u32 = 2684354560;
pub const SBUF_FIXEDLEN: u32 = 0;
pub const SBUF_AUTOEXTEND: u32 = 1;
pub const SBUF_USRFLAGMSK: u32 = 65535;
pub const SBUF_DYNAMIC: u32 = 65536;
pub const SBUF_FINISHED: u32 = 131072;
pub const SBUF_OVERFLOWED: u32 = 262144;
pub const SBUF_DYNSTRUCT: u32 = 524288;
pub const SYS_syscall: u32 = 0;
pub const SYS_exit: u32 = 1;
pub const SYS_fork: u32 = 2;
pub const SYS_read: u32 = 3;
pub const SYS_write: u32 = 4;
pub const SYS_open: u32 = 5;
pub const SYS_close: u32 = 6;
pub const SYS_wait4: u32 = 7;
pub const SYS_link: u32 = 9;
pub const SYS_unlink: u32 = 10;
pub const SYS_chdir: u32 = 12;
pub const SYS_fchdir: u32 = 13;
pub const SYS_mknod: u32 = 14;
pub const SYS_chmod: u32 = 15;
pub const SYS_chown: u32 = 16;
pub const SYS_getfsstat: u32 = 18;
pub const SYS_getpid: u32 = 20;
pub const SYS_setuid: u32 = 23;
pub const SYS_getuid: u32 = 24;
pub const SYS_geteuid: u32 = 25;
pub const SYS_ptrace: u32 = 26;
pub const SYS_recvmsg: u32 = 27;
pub const SYS_sendmsg: u32 = 28;
pub const SYS_recvfrom: u32 = 29;
pub const SYS_accept: u32 = 30;
pub const SYS_getpeername: u32 = 31;
pub const SYS_getsockname: u32 = 32;
pub const SYS_access: u32 = 33;
pub const SYS_chflags: u32 = 34;
pub const SYS_fchflags: u32 = 35;
pub const SYS_sync: u32 = 36;
pub const SYS_kill: u32 = 37;
pub const SYS_getppid: u32 = 39;
pub const SYS_dup: u32 = 41;
pub const SYS_pipe: u32 = 42;
pub const SYS_getegid: u32 = 43;
pub const SYS_sigaction: u32 = 46;
pub const SYS_getgid: u32 = 47;
pub const SYS_sigprocmask: u32 = 48;
pub const SYS_getlogin: u32 = 49;
pub const SYS_setlogin: u32 = 50;
pub const SYS_acct: u32 = 51;
pub const SYS_sigpending: u32 = 52;
pub const SYS_sigaltstack: u32 = 53;
pub const SYS_ioctl: u32 = 54;
pub const SYS_reboot: u32 = 55;
pub const SYS_revoke: u32 = 56;
pub const SYS_symlink: u32 = 57;
pub const SYS_readlink: u32 = 58;
pub const SYS_execve: u32 = 59;
pub const SYS_umask: u32 = 60;
pub const SYS_chroot: u32 = 61;
pub const SYS_msync: u32 = 65;
pub const SYS_vfork: u32 = 66;
pub const SYS_munmap: u32 = 73;
pub const SYS_mprotect: u32 = 74;
pub const SYS_madvise: u32 = 75;
pub const SYS_mincore: u32 = 78;
pub const SYS_getgroups: u32 = 79;
pub const SYS_setgroups: u32 = 80;
pub const SYS_getpgrp: u32 = 81;
pub const SYS_setpgid: u32 = 82;
pub const SYS_setitimer: u32 = 83;
pub const SYS_swapon: u32 = 85;
pub const SYS_getitimer: u32 = 86;
pub const SYS_getdtablesize: u32 = 89;
pub const SYS_dup2: u32 = 90;
pub const SYS_fcntl: u32 = 92;
pub const SYS_select: u32 = 93;
pub const SYS_fsync: u32 = 95;
pub const SYS_setpriority: u32 = 96;
pub const SYS_socket: u32 = 97;
pub const SYS_connect: u32 = 98;
pub const SYS_getpriority: u32 = 100;
pub const SYS_bind: u32 = 104;
pub const SYS_setsockopt: u32 = 105;
pub const SYS_listen: u32 = 106;
pub const SYS_sigsuspend: u32 = 111;
pub const SYS_gettimeofday: u32 = 116;
pub const SYS_getrusage: u32 = 117;
pub const SYS_getsockopt: u32 = 118;
pub const SYS_readv: u32 = 120;
pub const SYS_writev: u32 = 121;
pub const SYS_settimeofday: u32 = 122;
pub const SYS_fchown: u32 = 123;
pub const SYS_fchmod: u32 = 124;
pub const SYS_setreuid: u32 = 126;
pub const SYS_setregid: u32 = 127;
pub const SYS_rename: u32 = 128;
pub const SYS_flock: u32 = 131;
pub const SYS_mkfifo: u32 = 132;
pub const SYS_sendto: u32 = 133;
pub const SYS_shutdown: u32 = 134;
pub const SYS_socketpair: u32 = 135;
pub const SYS_mkdir: u32 = 136;
pub const SYS_rmdir: u32 = 137;
pub const SYS_utimes: u32 = 138;
pub const SYS_futimes: u32 = 139;
pub const SYS_adjtime: u32 = 140;
pub const SYS_gethostuuid: u32 = 142;
pub const SYS_setsid: u32 = 147;
pub const SYS_getpgid: u32 = 151;
pub const SYS_setprivexec: u32 = 152;
pub const SYS_pread: u32 = 153;
pub const SYS_pwrite: u32 = 154;
pub const SYS_nfssvc: u32 = 155;
pub const SYS_statfs: u32 = 157;
pub const SYS_fstatfs: u32 = 158;
pub const SYS_unmount: u32 = 159;
pub const SYS_getfh: u32 = 161;
pub const SYS_quotactl: u32 = 165;
pub const SYS_mount: u32 = 167;
pub const SYS_csops: u32 = 169;
pub const SYS_csops_audittoken: u32 = 170;
pub const SYS_waitid: u32 = 173;
pub const SYS_kdebug_typefilter: u32 = 177;
pub const SYS_kdebug_trace_string: u32 = 178;
pub const SYS_kdebug_trace64: u32 = 179;
pub const SYS_kdebug_trace: u32 = 180;
pub const SYS_setgid: u32 = 181;
pub const SYS_setegid: u32 = 182;
pub const SYS_seteuid: u32 = 183;
pub const SYS_sigreturn: u32 = 184;
pub const SYS_thread_selfcounts: u32 = 186;
pub const SYS_fdatasync: u32 = 187;
pub const SYS_stat: u32 = 188;
pub const SYS_fstat: u32 = 189;
pub const SYS_lstat: u32 = 190;
pub const SYS_pathconf: u32 = 191;
pub const SYS_fpathconf: u32 = 192;
pub const SYS_getrlimit: u32 = 194;
pub const SYS_setrlimit: u32 = 195;
pub const SYS_getdirentries: u32 = 196;
pub const SYS_mmap: u32 = 197;
pub const SYS_lseek: u32 = 199;
pub const SYS_truncate: u32 = 200;
pub const SYS_ftruncate: u32 = 201;
pub const SYS_sysctl: u32 = 202;
pub const SYS_mlock: u32 = 203;
pub const SYS_munlock: u32 = 204;
pub const SYS_undelete: u32 = 205;
pub const SYS_open_dprotected_np: u32 = 216;
pub const SYS_fsgetpath_ext: u32 = 217;
pub const SYS_openat_dprotected_np: u32 = 218;
pub const SYS_getattrlist: u32 = 220;
pub const SYS_setattrlist: u32 = 221;
pub const SYS_getdirentriesattr: u32 = 222;
pub const SYS_exchangedata: u32 = 223;
pub const SYS_searchfs: u32 = 225;
pub const SYS_delete: u32 = 226;
pub const SYS_copyfile: u32 = 227;
pub const SYS_fgetattrlist: u32 = 228;
pub const SYS_fsetattrlist: u32 = 229;
pub const SYS_poll: u32 = 230;
pub const SYS_getxattr: u32 = 234;
pub const SYS_fgetxattr: u32 = 235;
pub const SYS_setxattr: u32 = 236;
pub const SYS_fsetxattr: u32 = 237;
pub const SYS_removexattr: u32 = 238;
pub const SYS_fremovexattr: u32 = 239;
pub const SYS_listxattr: u32 = 240;
pub const SYS_flistxattr: u32 = 241;
pub const SYS_fsctl: u32 = 242;
pub const SYS_initgroups: u32 = 243;
pub const SYS_posix_spawn: u32 = 244;
pub const SYS_ffsctl: u32 = 245;
pub const SYS_fhopen: u32 = 248;
pub const SYS_minherit: u32 = 250;
pub const SYS_semsys: u32 = 251;
pub const SYS_msgsys: u32 = 252;
pub const SYS_shmsys: u32 = 253;
pub const SYS_semctl: u32 = 254;
pub const SYS_semget: u32 = 255;
pub const SYS_semop: u32 = 256;
pub const SYS_msgctl: u32 = 258;
pub const SYS_msgget: u32 = 259;
pub const SYS_msgsnd: u32 = 260;
pub const SYS_msgrcv: u32 = 261;
pub const SYS_shmat: u32 = 262;
pub const SYS_shmctl: u32 = 263;
pub const SYS_shmdt: u32 = 264;
pub const SYS_shmget: u32 = 265;
pub const SYS_shm_open: u32 = 266;
pub const SYS_shm_unlink: u32 = 267;
pub const SYS_sem_open: u32 = 268;
pub const SYS_sem_close: u32 = 269;
pub const SYS_sem_unlink: u32 = 270;
pub const SYS_sem_wait: u32 = 271;
pub const SYS_sem_trywait: u32 = 272;
pub const SYS_sem_post: u32 = 273;
pub const SYS_sysctlbyname: u32 = 274;
pub const SYS_open_extended: u32 = 277;
pub const SYS_umask_extended: u32 = 278;
pub const SYS_stat_extended: u32 = 279;
pub const SYS_lstat_extended: u32 = 280;
pub const SYS_fstat_extended: u32 = 281;
pub const SYS_chmod_extended: u32 = 282;
pub const SYS_fchmod_extended: u32 = 283;
pub const SYS_access_extended: u32 = 284;
pub const SYS_settid: u32 = 285;
pub const SYS_gettid: u32 = 286;
pub const SYS_setsgroups: u32 = 287;
pub const SYS_getsgroups: u32 = 288;
pub const SYS_setwgroups: u32 = 289;
pub const SYS_getwgroups: u32 = 290;
pub const SYS_mkfifo_extended: u32 = 291;
pub const SYS_mkdir_extended: u32 = 292;
pub const SYS_identitysvc: u32 = 293;
pub const SYS_shared_region_check_np: u32 = 294;
pub const SYS_vm_pressure_monitor: u32 = 296;
pub const SYS_psynch_rw_longrdlock: u32 = 297;
pub const SYS_psynch_rw_yieldwrlock: u32 = 298;
pub const SYS_psynch_rw_downgrade: u32 = 299;
pub const SYS_psynch_rw_upgrade: u32 = 300;
pub const SYS_psynch_mutexwait: u32 = 301;
pub const SYS_psynch_mutexdrop: u32 = 302;
pub const SYS_psynch_cvbroad: u32 = 303;
pub const SYS_psynch_cvsignal: u32 = 304;
pub const SYS_psynch_cvwait: u32 = 305;
pub const SYS_psynch_rw_rdlock: u32 = 306;
pub const SYS_psynch_rw_wrlock: u32 = 307;
pub const SYS_psynch_rw_unlock: u32 = 308;
pub const SYS_psynch_rw_unlock2: u32 = 309;
pub const SYS_getsid: u32 = 310;
pub const SYS_settid_with_pid: u32 = 311;
pub const SYS_psynch_cvclrprepost: u32 = 312;
pub const SYS_aio_fsync: u32 = 313;
pub const SYS_aio_return: u32 = 314;
pub const SYS_aio_suspend: u32 = 315;
pub const SYS_aio_cancel: u32 = 316;
pub const SYS_aio_error: u32 = 317;
pub const SYS_aio_read: u32 = 318;
pub const SYS_aio_write: u32 = 319;
pub const SYS_lio_listio: u32 = 320;
pub const SYS_iopolicysys: u32 = 322;
pub const SYS_process_policy: u32 = 323;
pub const SYS_mlockall: u32 = 324;
pub const SYS_munlockall: u32 = 325;
pub const SYS_issetugid: u32 = 327;
pub const SYS___pthread_kill: u32 = 328;
pub const SYS___pthread_sigmask: u32 = 329;
pub const SYS___sigwait: u32 = 330;
pub const SYS___disable_threadsignal: u32 = 331;
pub const SYS___pthread_markcancel: u32 = 332;
pub const SYS___pthread_canceled: u32 = 333;
pub const SYS___semwait_signal: u32 = 334;
pub const SYS_proc_info: u32 = 336;
pub const SYS_sendfile: u32 = 337;
pub const SYS_stat64: u32 = 338;
pub const SYS_fstat64: u32 = 339;
pub const SYS_lstat64: u32 = 340;
pub const SYS_stat64_extended: u32 = 341;
pub const SYS_lstat64_extended: u32 = 342;
pub const SYS_fstat64_extended: u32 = 343;
pub const SYS_getdirentries64: u32 = 344;
pub const SYS_statfs64: u32 = 345;
pub const SYS_fstatfs64: u32 = 346;
pub const SYS_getfsstat64: u32 = 347;
pub const SYS___pthread_chdir: u32 = 348;
pub const SYS___pthread_fchdir: u32 = 349;
pub const SYS_audit: u32 = 350;
pub const SYS_auditon: u32 = 351;
pub const SYS_getauid: u32 = 353;
pub const SYS_setauid: u32 = 354;
pub const SYS_getaudit_addr: u32 = 357;
pub const SYS_setaudit_addr: u32 = 358;
pub const SYS_auditctl: u32 = 359;
pub const SYS_bsdthread_create: u32 = 360;
pub const SYS_bsdthread_terminate: u32 = 361;
pub const SYS_kqueue: u32 = 362;
pub const SYS_kevent: u32 = 363;
pub const SYS_lchown: u32 = 364;
pub const SYS_bsdthread_register: u32 = 366;
pub const SYS_workq_open: u32 = 367;
pub const SYS_workq_kernreturn: u32 = 368;
pub const SYS_kevent64: u32 = 369;
pub const SYS_thread_selfid: u32 = 372;
pub const SYS_ledger: u32 = 373;
pub const SYS_kevent_qos: u32 = 374;
pub const SYS_kevent_id: u32 = 375;
pub const SYS___mac_execve: u32 = 380;
pub const SYS___mac_syscall: u32 = 381;
pub const SYS___mac_get_file: u32 = 382;
pub const SYS___mac_set_file: u32 = 383;
pub const SYS___mac_get_link: u32 = 384;
pub const SYS___mac_set_link: u32 = 385;
pub const SYS___mac_get_proc: u32 = 386;
pub const SYS___mac_set_proc: u32 = 387;
pub const SYS___mac_get_fd: u32 = 388;
pub const SYS___mac_set_fd: u32 = 389;
pub const SYS___mac_get_pid: u32 = 390;
pub const SYS_pselect: u32 = 394;
pub const SYS_pselect_nocancel: u32 = 395;
pub const SYS_read_nocancel: u32 = 396;
pub const SYS_write_nocancel: u32 = 397;
pub const SYS_open_nocancel: u32 = 398;
pub const SYS_close_nocancel: u32 = 399;
pub const SYS_wait4_nocancel: u32 = 400;
pub const SYS_recvmsg_nocancel: u32 = 401;
pub const SYS_sendmsg_nocancel: u32 = 402;
pub const SYS_recvfrom_nocancel: u32 = 403;
pub const SYS_accept_nocancel: u32 = 404;
pub const SYS_msync_nocancel: u32 = 405;
pub const SYS_fcntl_nocancel: u32 = 406;
pub const SYS_select_nocancel: u32 = 407;
pub const SYS_fsync_nocancel: u32 = 408;
pub const SYS_connect_nocancel: u32 = 409;
pub const SYS_sigsuspend_nocancel: u32 = 410;
pub const SYS_readv_nocancel: u32 = 411;
pub const SYS_writev_nocancel: u32 = 412;
pub const SYS_sendto_nocancel: u32 = 413;
pub const SYS_pread_nocancel: u32 = 414;
pub const SYS_pwrite_nocancel: u32 = 415;
pub const SYS_waitid_nocancel: u32 = 416;
pub const SYS_poll_nocancel: u32 = 417;
pub const SYS_msgsnd_nocancel: u32 = 418;
pub const SYS_msgrcv_nocancel: u32 = 419;
pub const SYS_sem_wait_nocancel: u32 = 420;
pub const SYS_aio_suspend_nocancel: u32 = 421;
pub const SYS___sigwait_nocancel: u32 = 422;
pub const SYS___semwait_signal_nocancel: u32 = 423;
pub const SYS___mac_mount: u32 = 424;
pub const SYS___mac_get_mount: u32 = 425;
pub const SYS___mac_getfsstat: u32 = 426;
pub const SYS_fsgetpath: u32 = 427;
pub const SYS_audit_session_self: u32 = 428;
pub const SYS_audit_session_join: u32 = 429;
pub const SYS_fileport_makeport: u32 = 430;
pub const SYS_fileport_makefd: u32 = 431;
pub const SYS_audit_session_port: u32 = 432;
pub const SYS_pid_suspend: u32 = 433;
pub const SYS_pid_resume: u32 = 434;
pub const SYS_pid_hibernate: u32 = 435;
pub const SYS_pid_shutdown_sockets: u32 = 436;
pub const SYS_kas_info: u32 = 439;
pub const SYS_memorystatus_control: u32 = 440;
pub const SYS_guarded_open_np: u32 = 441;
pub const SYS_guarded_close_np: u32 = 442;
pub const SYS_guarded_kqueue_np: u32 = 443;
pub const SYS_change_fdguard_np: u32 = 444;
pub const SYS_usrctl: u32 = 445;
pub const SYS_proc_rlimit_control: u32 = 446;
pub const SYS_connectx: u32 = 447;
pub const SYS_disconnectx: u32 = 448;
pub const SYS_peeloff: u32 = 449;
pub const SYS_socket_delegate: u32 = 450;
pub const SYS_telemetry: u32 = 451;
pub const SYS_proc_uuid_policy: u32 = 452;
pub const SYS_memorystatus_get_level: u32 = 453;
pub const SYS_system_override: u32 = 454;
pub const SYS_vfs_purge: u32 = 455;
pub const SYS_sfi_ctl: u32 = 456;
pub const SYS_sfi_pidctl: u32 = 457;
pub const SYS_coalition: u32 = 458;
pub const SYS_coalition_info: u32 = 459;
pub const SYS_necp_match_policy: u32 = 460;
pub const SYS_getattrlistbulk: u32 = 461;
pub const SYS_clonefileat: u32 = 462;
pub const SYS_openat: u32 = 463;
pub const SYS_openat_nocancel: u32 = 464;
pub const SYS_renameat: u32 = 465;
pub const SYS_faccessat: u32 = 466;
pub const SYS_fchmodat: u32 = 467;
pub const SYS_fchownat: u32 = 468;
pub const SYS_fstatat: u32 = 469;
pub const SYS_fstatat64: u32 = 470;
pub const SYS_linkat: u32 = 471;
pub const SYS_unlinkat: u32 = 472;
pub const SYS_readlinkat: u32 = 473;
pub const SYS_symlinkat: u32 = 474;
pub const SYS_mkdirat: u32 = 475;
pub const SYS_getattrlistat: u32 = 476;
pub const SYS_proc_trace_log: u32 = 477;
pub const SYS_bsdthread_ctl: u32 = 478;
pub const SYS_openbyid_np: u32 = 479;
pub const SYS_recvmsg_x: u32 = 480;
pub const SYS_sendmsg_x: u32 = 481;
pub const SYS_thread_selfusage: u32 = 482;
pub const SYS_csrctl: u32 = 483;
pub const SYS_guarded_open_dprotected_np: u32 = 484;
pub const SYS_guarded_write_np: u32 = 485;
pub const SYS_guarded_pwrite_np: u32 = 486;
pub const SYS_guarded_writev_np: u32 = 487;
pub const SYS_renameatx_np: u32 = 488;
pub const SYS_mremap_encrypted: u32 = 489;
pub const SYS_netagent_trigger: u32 = 490;
pub const SYS_stack_snapshot_with_config: u32 = 491;
pub const SYS_microstackshot: u32 = 492;
pub const SYS_grab_pgo_data: u32 = 493;
pub const SYS_persona: u32 = 494;
pub const SYS_mach_eventlink_signal: u32 = 496;
pub const SYS_mach_eventlink_wait_until: u32 = 497;
pub const SYS_mach_eventlink_signal_wait_until: u32 = 498;
pub const SYS_work_interval_ctl: u32 = 499;
pub const SYS_getentropy: u32 = 500;
pub const SYS_necp_open: u32 = 501;
pub const SYS_necp_client_action: u32 = 502;
pub const SYS___nexus_open: u32 = 503;
pub const SYS___nexus_register: u32 = 504;
pub const SYS___nexus_deregister: u32 = 505;
pub const SYS___nexus_create: u32 = 506;
pub const SYS___nexus_destroy: u32 = 507;
pub const SYS___nexus_get_opt: u32 = 508;
pub const SYS___nexus_set_opt: u32 = 509;
pub const SYS___channel_open: u32 = 510;
pub const SYS___channel_get_info: u32 = 511;
pub const SYS___channel_sync: u32 = 512;
pub const SYS___channel_get_opt: u32 = 513;
pub const SYS___channel_set_opt: u32 = 514;
pub const SYS_ulock_wait: u32 = 515;
pub const SYS_ulock_wake: u32 = 516;
pub const SYS_fclonefileat: u32 = 517;
pub const SYS_fs_snapshot: u32 = 518;
pub const SYS_register_uexc_handler: u32 = 519;
pub const SYS_terminate_with_payload: u32 = 520;
pub const SYS_abort_with_payload: u32 = 521;
pub const SYS_necp_session_open: u32 = 522;
pub const SYS_necp_session_action: u32 = 523;
pub const SYS_setattrlistat: u32 = 524;
pub const SYS_net_qos_guideline: u32 = 525;
pub const SYS_fmount: u32 = 526;
pub const SYS_ntp_adjtime: u32 = 527;
pub const SYS_ntp_gettime: u32 = 528;
pub const SYS_os_fault_with_payload: u32 = 529;
pub const SYS_kqueue_workloop_ctl: u32 = 530;
pub const SYS___mach_bridge_remote_time: u32 = 531;
pub const SYS_coalition_ledger: u32 = 532;
pub const SYS_log_data: u32 = 533;
pub const SYS_memorystatus_available_memory: u32 = 534;
pub const SYS_objc_bp_assist_cfg_np: u32 = 535;
pub const SYS_shared_region_map_and_slide_2_np: u32 = 536;
pub const SYS_pivot_root: u32 = 537;
pub const SYS_task_inspect_for_pid: u32 = 538;
pub const SYS_task_read_for_pid: u32 = 539;
pub const SYS_preadv: u32 = 540;
pub const SYS_pwritev: u32 = 541;
pub const SYS_preadv_nocancel: u32 = 542;
pub const SYS_pwritev_nocancel: u32 = 543;
pub const SYS_ulock_wait2: u32 = 544;
pub const SYS_proc_info_extended_id: u32 = 545;
pub const SYS_tracker_action: u32 = 546;
pub const SYS_debug_syscall_reject: u32 = 547;
pub const SYS_debug_syscall_reject_config: u32 = 548;
pub const SYS_graftdmg: u32 = 549;
pub const SYS_map_with_linking_np: u32 = 550;
pub const SYS_freadlink: u32 = 551;
pub const SYS_record_system_event: u32 = 552;
pub const SYS_mkfifoat: u32 = 553;
pub const SYS_mknodat: u32 = 554;
pub const SYS_ungraftdmg: u32 = 555;
pub const SYS_MAXSYSCALL: u32 = 556;
pub const SYS_invalid: u32 = 63;
pub const TR_BREADHIT: u32 = 0;
pub const TR_BREADMISS: u32 = 1;
pub const TR_BWRITE: u32 = 2;
pub const TR_BREADHITRA: u32 = 3;
pub const TR_BREADMISSRA: u32 = 4;
pub const TR_XFODMISS: u32 = 5;
pub const TR_XFODHIT: u32 = 6;
pub const TR_BRELSE: u32 = 7;
pub const TR_BREALLOC: u32 = 8;
pub const TR_MALL: u32 = 10;
pub const TR_INTRANS: u32 = 20;
pub const TR_EINTRANS: u32 = 21;
pub const TR_FRECLAIM: u32 = 22;
pub const TR_RECLAIM: u32 = 23;
pub const TR_XSFREC: u32 = 24;
pub const TR_XIFREC: u32 = 25;
pub const TR_WAITMEM: u32 = 26;
pub const TR_EWAITMEM: u32 = 27;
pub const TR_ZFOD: u32 = 28;
pub const TR_EXFOD: u32 = 29;
pub const TR_VRFOD: u32 = 30;
pub const TR_CACHEFOD: u32 = 31;
pub const TR_SWAPIN: u32 = 32;
pub const TR_PGINDONE: u32 = 33;
pub const TR_SWAPIO: u32 = 34;
pub const TR_VADVISE: u32 = 40;
pub const TR_STAMP: u32 = 45;
pub const TR_NFLAGS: u32 = 100;
pub const TRCSIZ: u32 = 4096;
pub const VTRACE: u32 = 115;
pub const VTR_DISABLE: u32 = 0;
pub const VTR_ENABLE: u32 = 1;
pub const VTR_VALUE: u32 = 2;
pub const VTR_UALARM: u32 = 3;
pub const VTR_STAMP: u32 = 4;
pub const TS_SO_OLOWAT: u32 = 1;
pub const TS_ASYNC: u32 = 2;
pub const TS_BUSY: u32 = 4;
pub const TS_CARR_ON: u32 = 8;
pub const TS_FLUSH: u32 = 16;
pub const TS_ISOPEN: u32 = 32;
pub const TS_TBLOCK: u32 = 64;
pub const TS_TIMEOUT: u32 = 128;
pub const TS_TTSTOP: u32 = 256;
pub const TS_XCLUDE: u32 = 1024;
pub const TS_BKSL: u32 = 2048;
pub const TS_CNTTB: u32 = 4096;
pub const TS_ERASE: u32 = 8192;
pub const TS_LNCH: u32 = 16384;
pub const TS_TYPEN: u32 = 32768;
pub const TS_LOCAL: u32 = 63488;
pub const TS_CAN_BYPASS_L_RINT: u32 = 65536;
pub const TS_CONNECTED: u32 = 131072;
pub const TS_SNOOP: u32 = 262144;
pub const TS_SO_OCOMPLETE: u32 = 524288;
pub const TS_ZOMBIE: u32 = 1048576;
pub const TS_CAR_OFLOW: u32 = 2097152;
pub const TS_IOCTL_NOT_OK: u32 = 16777216;
pub const TS_REVOKE: u32 = 33554432;
pub const ORDINARY: u32 = 0;
pub const CONTROL: u32 = 1;
pub const BACKSPACE: u32 = 2;
pub const NEWLINE: u32 = 3;
pub const TAB: u32 = 4;
pub const VTAB: u32 = 5;
pub const RETURN: u32 = 6;
pub const DMSET: u32 = 0;
pub const DMBIS: u32 = 1;
pub const DMBIC: u32 = 2;
pub const DMGET: u32 = 3;
pub const TTY_CHARMASK: u32 = 255;
pub const TTY_QUOTE: u32 = 256;
pub const TTY_ERRORMASK: u32 = 4278190080;
pub const TTY_FE: u32 = 16777216;
pub const TTY_PE: u32 = 33554432;
pub const TTY_OE: u32 = 67108864;
pub const TTY_BI: u32 = 134217728;
pub const VPRINT: u32 = 64;
pub const VPLOT: u32 = 128;
pub const VPRINTPLOT: u32 = 256;
pub const HAVE_VT_LOCKERFS: u32 = 1;
pub const VNODE_READ: u32 = 1;
pub const VNODE_WRITE: u32 = 2;
pub const VNODE_BLOCKMAP_NO_TRACK: u32 = 4;
pub const VNODE_CLUSTER_VERIFY: u32 = 8;
pub const PREALLOCATE: u32 = 1;
pub const ALLOCATECONTIG: u32 = 2;
pub const ALLOCATEALL: u32 = 4;
pub const ALLOCATEPERSIST: u32 = 8;
pub const ALLOCATEFROMPEOF: u32 = 16;
pub const ALLOCATEFROMVOL: u32 = 32;
pub const VNOVAL: i32 = -1;
pub const IOCS_BUFFER_NUM_SIZE_BUCKETS: u32 = 10;
pub const IOCS_BUFFER_MAX_BUCKET: u32 = 9;
pub const IOCS_BUFFER_NUM_COMPRESSION_BUCKETS: u32 = 7;
pub const IOCS_BLOCK_NUM_SIZE_BUCKETS: u32 = 16;
pub const IOCS_SBE_PATH_LEN: u32 = 128;
pub const IOCS_PATH_START_BYTES_TO_COPY: u32 = 108;
pub const IOCS_PATH_END_BYTES_TO_COPY: u32 = 20;
pub const IOCS_SYSCTL_LIVE: u32 = 1;
pub const IOCS_SYSCTL_STORE_BUFFER_RD_ONLY: u32 = 2;
pub const IOCS_SYSCTL_STORE_BUFFER_MARK: u32 = 4;
pub const _PATH_DEFPATH: &[u8; 14usize] = b"/usr/bin:/bin\0";
pub const _PATH_STDPATH: &[u8; 30usize] = b"/usr/bin:/bin:/usr/sbin:/sbin\0";
pub const _PATH_BSHELL: &[u8; 8usize] = b"/bin/sh\0";
pub const _PATH_CONSOLE: &[u8; 13usize] = b"/dev/console\0";
pub const _PATH_CSHELL: &[u8; 9usize] = b"/bin/csh\0";
pub const _PATH_DEFTAPE: &[u8; 11usize] = b"/dev/nrst0\0";
pub const _PATH_DEVDB: &[u8; 16usize] = b"/var/run/dev.db\0";
pub const _PATH_DEVNULL: &[u8; 10usize] = b"/dev/null\0";
pub const _PATH_DRUM: &[u8; 10usize] = b"/dev/drum\0";
pub const _PATH_FSIRAND: &[u8; 14usize] = b"/sbin/fsirand\0";
pub const _PATH_KMEM: &[u8; 10usize] = b"/dev/kmem\0";
pub const _PATH_KVMDB: &[u8; 15usize] = b"/var/db/kvm.db\0";
pub const _PATH_LOCALE: &[u8; 18usize] = b"/usr/share/locale\0";
pub const _PATH_MAILDIR: &[u8; 10usize] = b"/var/mail\0";
pub const _PATH_MAN: &[u8; 15usize] = b"/usr/share/man\0";
pub const _PATH_MEM: &[u8; 9usize] = b"/dev/mem\0";
pub const _PATH_NOLOGIN: &[u8; 13usize] = b"/etc/nologin\0";
pub const _PATH_RSH: &[u8; 13usize] = b"/usr/bin/rsh\0";
pub const _PATH_SENDMAIL: &[u8; 19usize] = b"/usr/sbin/sendmail\0";
pub const _PATH_SHELLS: &[u8; 12usize] = b"/etc/shells\0";
pub const _PATH_TTY: &[u8; 9usize] = b"/dev/tty\0";
pub const _PATH_UNIX: &[u8; 6usize] = b"/mach\0";
pub const _PATH_VI: &[u8; 12usize] = b"/usr/bin/vi\0";
pub const _PATH_DEV: &[u8; 6usize] = b"/dev/\0";
pub const _PATH_TMP: &[u8; 6usize] = b"/tmp/\0";
pub const _PATH_UUCPLOCK: &[u8; 17usize] = b"/var/spool/lock/\0";
pub const _PATH_VARDB: &[u8; 9usize] = b"/var/db/\0";
pub const _PATH_VARRUN: &[u8; 10usize] = b"/var/run/\0";
pub const _PATH_VARTMP: &[u8; 10usize] = b"/var/tmp/\0";
pub const EX_OK: u32 = 0;
pub const EX__BASE: u32 = 64;
pub const EX_USAGE: u32 = 64;
pub const EX_DATAERR: u32 = 65;
pub const EX_NOINPUT: u32 = 66;
pub const EX_NOUSER: u32 = 67;
pub const EX_NOHOST: u32 = 68;
pub const EX_UNAVAILABLE: u32 = 69;
pub const EX_SOFTWARE: u32 = 70;
pub const EX_OSERR: u32 = 71;
pub const EX_OSFILE: u32 = 72;
pub const EX_CANTCREAT: u32 = 73;
pub const EX_IOERR: u32 = 74;
pub const EX_TEMPFAIL: u32 = 75;
pub const EX_PROTOCOL: u32 = 76;
pub const EX_NOPERM: u32 = 77;
pub const EX_CONFIG: u32 = 78;
pub const EX__MAX: u32 = 78;
pub const MH_MAGIC: u32 = 4277009102;
pub const MH_CIGAM: u32 = 3472551422;
pub const MH_MAGIC_64: u32 = 4277009103;
pub const MH_CIGAM_64: u32 = 3489328638;
pub const MH_OBJECT: u32 = 1;
pub const MH_EXECUTE: u32 = 2;
pub const MH_FVMLIB: u32 = 3;
pub const MH_CORE: u32 = 4;
pub const MH_PRELOAD: u32 = 5;
pub const MH_DYLIB: u32 = 6;
pub const MH_DYLINKER: u32 = 7;
pub const MH_BUNDLE: u32 = 8;
pub const MH_DYLIB_STUB: u32 = 9;
pub const MH_DSYM: u32 = 10;
pub const MH_KEXT_BUNDLE: u32 = 11;
pub const MH_FILESET: u32 = 12;
pub const MH_GPU_EXECUTE: u32 = 13;
pub const MH_GPU_DYLIB: u32 = 14;
pub const MH_NOUNDEFS: u32 = 1;
pub const MH_INCRLINK: u32 = 2;
pub const MH_DYLDLINK: u32 = 4;
pub const MH_BINDATLOAD: u32 = 8;
pub const MH_PREBOUND: u32 = 16;
pub const MH_SPLIT_SEGS: u32 = 32;
pub const MH_LAZY_INIT: u32 = 64;
pub const MH_TWOLEVEL: u32 = 128;
pub const MH_FORCE_FLAT: u32 = 256;
pub const MH_NOMULTIDEFS: u32 = 512;
pub const MH_NOFIXPREBINDING: u32 = 1024;
pub const MH_PREBINDABLE: u32 = 2048;
pub const MH_ALLMODSBOUND: u32 = 4096;
pub const MH_SUBSECTIONS_VIA_SYMBOLS: u32 = 8192;
pub const MH_CANONICAL: u32 = 16384;
pub const MH_WEAK_DEFINES: u32 = 32768;
pub const MH_BINDS_TO_WEAK: u32 = 65536;
pub const MH_ALLOW_STACK_EXECUTION: u32 = 131072;
pub const MH_ROOT_SAFE: u32 = 262144;
pub const MH_SETUID_SAFE: u32 = 524288;
pub const MH_NO_REEXPORTED_DYLIBS: u32 = 1048576;
pub const MH_PIE: u32 = 2097152;
pub const MH_DEAD_STRIPPABLE_DYLIB: u32 = 4194304;
pub const MH_HAS_TLV_DESCRIPTORS: u32 = 8388608;
pub const MH_NO_HEAP_EXECUTION: u32 = 16777216;
pub const MH_APP_EXTENSION_SAFE: u32 = 33554432;
pub const MH_NLIST_OUTOFSYNC_WITH_DYLDINFO: u32 = 67108864;
pub const MH_SIM_SUPPORT: u32 = 134217728;
pub const MH_DYLIB_IN_CACHE: u32 = 2147483648;
pub const LC_REQ_DYLD: u32 = 2147483648;
pub const LC_SEGMENT: u32 = 1;
pub const LC_SYMTAB: u32 = 2;
pub const LC_SYMSEG: u32 = 3;
pub const LC_THREAD: u32 = 4;
pub const LC_UNIXTHREAD: u32 = 5;
pub const LC_LOADFVMLIB: u32 = 6;
pub const LC_IDFVMLIB: u32 = 7;
pub const LC_IDENT: u32 = 8;
pub const LC_FVMFILE: u32 = 9;
pub const LC_PREPAGE: u32 = 10;
pub const LC_DYSYMTAB: u32 = 11;
pub const LC_LOAD_DYLIB: u32 = 12;
pub const LC_ID_DYLIB: u32 = 13;
pub const LC_LOAD_DYLINKER: u32 = 14;
pub const LC_ID_DYLINKER: u32 = 15;
pub const LC_PREBOUND_DYLIB: u32 = 16;
pub const LC_ROUTINES: u32 = 17;
pub const LC_SUB_FRAMEWORK: u32 = 18;
pub const LC_SUB_UMBRELLA: u32 = 19;
pub const LC_SUB_CLIENT: u32 = 20;
pub const LC_SUB_LIBRARY: u32 = 21;
pub const LC_TWOLEVEL_HINTS: u32 = 22;
pub const LC_PREBIND_CKSUM: u32 = 23;
pub const LC_LOAD_WEAK_DYLIB: u32 = 2147483672;
pub const LC_SEGMENT_64: u32 = 25;
pub const LC_ROUTINES_64: u32 = 26;
pub const LC_UUID: u32 = 27;
pub const LC_RPATH: u32 = 2147483676;
pub const LC_CODE_SIGNATURE: u32 = 29;
pub const LC_SEGMENT_SPLIT_INFO: u32 = 30;
pub const LC_REEXPORT_DYLIB: u32 = 2147483679;
pub const LC_LAZY_LOAD_DYLIB: u32 = 32;
pub const LC_ENCRYPTION_INFO: u32 = 33;
pub const LC_DYLD_INFO: u32 = 34;
pub const LC_DYLD_INFO_ONLY: u32 = 2147483682;
pub const LC_LOAD_UPWARD_DYLIB: u32 = 2147483683;
pub const LC_VERSION_MIN_MACOSX: u32 = 36;
pub const LC_VERSION_MIN_IPHONEOS: u32 = 37;
pub const LC_FUNCTION_STARTS: u32 = 38;
pub const LC_DYLD_ENVIRONMENT: u32 = 39;
pub const LC_MAIN: u32 = 2147483688;
pub const LC_DATA_IN_CODE: u32 = 41;
pub const LC_SOURCE_VERSION: u32 = 42;
pub const LC_DYLIB_CODE_SIGN_DRS: u32 = 43;
pub const LC_ENCRYPTION_INFO_64: u32 = 44;
pub const LC_LINKER_OPTION: u32 = 45;
pub const LC_LINKER_OPTIMIZATION_HINT: u32 = 46;
pub const LC_VERSION_MIN_TVOS: u32 = 47;
pub const LC_VERSION_MIN_WATCHOS: u32 = 48;
pub const LC_NOTE: u32 = 49;
pub const LC_BUILD_VERSION: u32 = 50;
pub const LC_DYLD_EXPORTS_TRIE: u32 = 2147483699;
pub const LC_DYLD_CHAINED_FIXUPS: u32 = 2147483700;
pub const LC_FILESET_ENTRY: u32 = 2147483701;
pub const SG_HIGHVM: u32 = 1;
pub const SG_FVMLIB: u32 = 2;
pub const SG_NORELOC: u32 = 4;
pub const SG_PROTECTED_VERSION_1: u32 = 8;
pub const SG_READ_ONLY: u32 = 16;
pub const SECTION_TYPE: u32 = 255;
pub const SECTION_ATTRIBUTES: u32 = 4294967040;
pub const S_REGULAR: u32 = 0;
pub const S_ZEROFILL: u32 = 1;
pub const S_CSTRING_LITERALS: u32 = 2;
pub const S_4BYTE_LITERALS: u32 = 3;
pub const S_8BYTE_LITERALS: u32 = 4;
pub const S_LITERAL_POINTERS: u32 = 5;
pub const S_NON_LAZY_SYMBOL_POINTERS: u32 = 6;
pub const S_LAZY_SYMBOL_POINTERS: u32 = 7;
pub const S_SYMBOL_STUBS: u32 = 8;
pub const S_MOD_INIT_FUNC_POINTERS: u32 = 9;
pub const S_MOD_TERM_FUNC_POINTERS: u32 = 10;
pub const S_COALESCED: u32 = 11;
pub const S_GB_ZEROFILL: u32 = 12;
pub const S_INTERPOSING: u32 = 13;
pub const S_16BYTE_LITERALS: u32 = 14;
pub const S_DTRACE_DOF: u32 = 15;
pub const S_LAZY_DYLIB_SYMBOL_POINTERS: u32 = 16;
pub const S_THREAD_LOCAL_REGULAR: u32 = 17;
pub const S_THREAD_LOCAL_ZEROFILL: u32 = 18;
pub const S_THREAD_LOCAL_VARIABLES: u32 = 19;
pub const S_THREAD_LOCAL_VARIABLE_POINTERS: u32 = 20;
pub const S_THREAD_LOCAL_INIT_FUNCTION_POINTERS: u32 = 21;
pub const S_INIT_FUNC_OFFSETS: u32 = 22;
pub const SECTION_ATTRIBUTES_USR: u32 = 4278190080;
pub const S_ATTR_PURE_INSTRUCTIONS: u32 = 2147483648;
pub const S_ATTR_NO_TOC: u32 = 1073741824;
pub const S_ATTR_STRIP_STATIC_SYMS: u32 = 536870912;
pub const S_ATTR_NO_DEAD_STRIP: u32 = 268435456;
pub const S_ATTR_LIVE_SUPPORT: u32 = 134217728;
pub const S_ATTR_SELF_MODIFYING_CODE: u32 = 67108864;
pub const S_ATTR_DEBUG: u32 = 33554432;
pub const SECTION_ATTRIBUTES_SYS: u32 = 16776960;
pub const S_ATTR_SOME_INSTRUCTIONS: u32 = 1024;
pub const S_ATTR_EXT_RELOC: u32 = 512;
pub const S_ATTR_LOC_RELOC: u32 = 256;
pub const SEG_PAGEZERO: &[u8; 11usize] = b"__PAGEZERO\0";
pub const SEG_TEXT: &[u8; 7usize] = b"__TEXT\0";
pub const SECT_TEXT: &[u8; 7usize] = b"__text\0";
pub const SECT_FVMLIB_INIT0: &[u8; 15usize] = b"__fvmlib_init0\0";
pub const SECT_FVMLIB_INIT1: &[u8; 15usize] = b"__fvmlib_init1\0";
pub const SEG_DATA: &[u8; 7usize] = b"__DATA\0";
pub const SECT_DATA: &[u8; 7usize] = b"__data\0";
pub const SECT_BSS: &[u8; 6usize] = b"__bss\0";
pub const SECT_COMMON: &[u8; 9usize] = b"__common\0";
pub const SEG_OBJC: &[u8; 7usize] = b"__OBJC\0";
pub const SECT_OBJC_SYMBOLS: &[u8; 15usize] = b"__symbol_table\0";
pub const SECT_OBJC_MODULES: &[u8; 14usize] = b"__module_info\0";
pub const SECT_OBJC_STRINGS: &[u8; 16usize] = b"__selector_strs\0";
pub const SECT_OBJC_REFS: &[u8; 16usize] = b"__selector_refs\0";
pub const SEG_ICON: &[u8; 7usize] = b"__ICON\0";
pub const SECT_ICON_HEADER: &[u8; 9usize] = b"__header\0";
pub const SECT_ICON_TIFF: &[u8; 7usize] = b"__tiff\0";
pub const SEG_LINKEDIT: &[u8; 11usize] = b"__LINKEDIT\0";
pub const SEG_UNIXSTACK: &[u8; 12usize] = b"__UNIXSTACK\0";
pub const SEG_IMPORT: &[u8; 9usize] = b"__IMPORT\0";
pub const INDIRECT_SYMBOL_LOCAL: u32 = 2147483648;
pub const INDIRECT_SYMBOL_ABS: u32 = 1073741824;
pub const PLATFORM_UNKNOWN: u32 = 0;
pub const PLATFORM_ANY: u32 = 4294967295;
pub const PLATFORM_MACOS: u32 = 1;
pub const PLATFORM_IOS: u32 = 2;
pub const PLATFORM_TVOS: u32 = 3;
pub const PLATFORM_WATCHOS: u32 = 4;
pub const PLATFORM_BRIDGEOS: u32 = 5;
pub const PLATFORM_MACCATALYST: u32 = 6;
pub const PLATFORM_IOSSIMULATOR: u32 = 7;
pub const PLATFORM_TVOSSIMULATOR: u32 = 8;
pub const PLATFORM_WATCHOSSIMULATOR: u32 = 9;
pub const PLATFORM_DRIVERKIT: u32 = 10;
pub const PLATFORM_FIRMWARE: u32 = 13;
pub const PLATFORM_SEPOS: u32 = 14;
pub const TOOL_CLANG: u32 = 1;
pub const TOOL_SWIFT: u32 = 2;
pub const TOOL_LD: u32 = 3;
pub const TOOL_LLD: u32 = 4;
pub const TOOL_METAL: u32 = 1024;
pub const TOOL_AIRLLD: u32 = 1025;
pub const TOOL_AIRNT: u32 = 1026;
pub const TOOL_AIRNT_PLUGIN: u32 = 1027;
pub const TOOL_AIRPACK: u32 = 1028;
pub const TOOL_GPUARCHIVER: u32 = 1031;
pub const TOOL_METAL_FRAMEWORK: u32 = 1032;
pub const REBASE_TYPE_POINTER: u32 = 1;
pub const REBASE_TYPE_TEXT_ABSOLUTE32: u32 = 2;
pub const REBASE_TYPE_TEXT_PCREL32: u32 = 3;
pub const REBASE_OPCODE_MASK: u32 = 240;
pub const REBASE_IMMEDIATE_MASK: u32 = 15;
pub const REBASE_OPCODE_DONE: u32 = 0;
pub const REBASE_OPCODE_SET_TYPE_IMM: u32 = 16;
pub const REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u32 = 32;
pub const REBASE_OPCODE_ADD_ADDR_ULEB: u32 = 48;
pub const REBASE_OPCODE_ADD_ADDR_IMM_SCALED: u32 = 64;
pub const REBASE_OPCODE_DO_REBASE_IMM_TIMES: u32 = 80;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES: u32 = 96;
pub const REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: u32 = 112;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB: u32 = 128;
pub const BIND_TYPE_POINTER: u32 = 1;
pub const BIND_TYPE_TEXT_ABSOLUTE32: u32 = 2;
pub const BIND_TYPE_TEXT_PCREL32: u32 = 3;
pub const BIND_SPECIAL_DYLIB_SELF: u32 = 0;
pub const BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: i32 = -1;
pub const BIND_SPECIAL_DYLIB_FLAT_LOOKUP: i32 = -2;
pub const BIND_SPECIAL_DYLIB_WEAK_LOOKUP: i32 = -3;
pub const BIND_SYMBOL_FLAGS_WEAK_IMPORT: u32 = 1;
pub const BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: u32 = 8;
pub const BIND_OPCODE_MASK: u32 = 240;
pub const BIND_IMMEDIATE_MASK: u32 = 15;
pub const BIND_OPCODE_DONE: u32 = 0;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: u32 = 16;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: u32 = 32;
pub const BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: u32 = 48;
pub const BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: u32 = 64;
pub const BIND_OPCODE_SET_TYPE_IMM: u32 = 80;
pub const BIND_OPCODE_SET_ADDEND_SLEB: u32 = 96;
pub const BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u32 = 112;
pub const BIND_OPCODE_ADD_ADDR_ULEB: u32 = 128;
pub const BIND_OPCODE_DO_BIND: u32 = 144;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: u32 = 160;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: u32 = 176;
pub const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: u32 = 192;
pub const BIND_OPCODE_THREADED: u32 = 208;
pub const BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB: u32 = 0;
pub const BIND_SUBOPCODE_THREADED_APPLY: u32 = 1;
pub const EXPORT_SYMBOL_FLAGS_KIND_MASK: u32 = 3;
pub const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: u32 = 0;
pub const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: u32 = 1;
pub const EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: u32 = 2;
pub const EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION: u32 = 4;
pub const EXPORT_SYMBOL_FLAGS_REEXPORT: u32 = 8;
pub const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: u32 = 16;
pub const EXPORT_SYMBOL_FLAGS_STATIC_RESOLVER: u32 = 32;
pub const DICE_KIND_DATA: u32 = 1;
pub const DICE_KIND_JUMP_TABLE8: u32 = 2;
pub const DICE_KIND_JUMP_TABLE16: u32 = 3;
pub const DICE_KIND_JUMP_TABLE32: u32 = 4;
pub const DICE_KIND_ABS_JUMP_TABLE32: u32 = 5;
pub const NSLINKMODULE_OPTION_NONE: u32 = 0;
pub const NSLINKMODULE_OPTION_BINDNOW: u32 = 1;
pub const NSLINKMODULE_OPTION_PRIVATE: u32 = 2;
pub const NSLINKMODULE_OPTION_RETURN_ON_ERROR: u32 = 4;
pub const NSLINKMODULE_OPTION_DONT_CALL_MOD_INIT_ROUTINES: u32 = 8;
pub const NSLINKMODULE_OPTION_TRAILING_PHYS_NAME: u32 = 16;
pub const NSUNLINKMODULE_OPTION_NONE: u32 = 0;
pub const NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED: u32 = 1;
pub const NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES: u32 = 2;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_BIND: u32 = 0;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_NOW: u32 = 1;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_FULLY: u32 = 2;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR: u32 = 4;
pub const NSADDIMAGE_OPTION_NONE: u32 = 0;
pub const NSADDIMAGE_OPTION_RETURN_ON_ERROR: u32 = 1;
pub const NSADDIMAGE_OPTION_WITH_SEARCHING: u32 = 2;
pub const NSADDIMAGE_OPTION_RETURN_ONLY_IF_LOADED: u32 = 4;
pub const NSADDIMAGE_OPTION_MATCH_FILENAME_BY_INSTALLNAME: u32 = 8;
pub const UNWIND_SECTION_VERSION: u32 = 1;
pub const UNWIND_SECOND_LEVEL_REGULAR: u32 = 2;
pub const UNWIND_SECOND_LEVEL_COMPRESSED: u32 = 3;
pub const FAT_MAGIC: u32 = 3405691582;
pub const FAT_CIGAM: u32 = 3199925962;
pub const FAT_MAGIC_64: u32 = 3405691583;
pub const FAT_CIGAM_64: u32 = 3216703178;
pub const _MH_EXECUTE_SYM: &[u8; 20usize] = b"__mh_execute_header\0";
pub const MH_EXECUTE_SYM: &[u8; 19usize] = b"_mh_execute_header\0";
pub const _MH_BUNDLE_SYM: &[u8; 19usize] = b"__mh_bundle_header\0";
pub const MH_BUNDLE_SYM: &[u8; 18usize] = b"_mh_bundle_header\0";
pub const _MH_DYLIB_SYM: &[u8; 18usize] = b"__mh_dylib_header\0";
pub const MH_DYLIB_SYM: &[u8; 17usize] = b"_mh_dylib_header\0";
pub const _MH_DYLINKER_SYM: &[u8; 21usize] = b"__mh_dylinker_header\0";
pub const MH_DYLINKER_SYM: &[u8; 20usize] = b"_mh_dylinker_header\0";
pub const N_STAB: u32 = 224;
pub const N_PEXT: u32 = 16;
pub const N_TYPE: u32 = 14;
pub const N_EXT: u32 = 1;
pub const N_UNDF: u32 = 0;
pub const N_ABS: u32 = 2;
pub const N_SECT: u32 = 14;
pub const N_PBUD: u32 = 12;
pub const N_INDR: u32 = 10;
pub const NO_SECT: u32 = 0;
pub const MAX_SECT: u32 = 255;
pub const REFERENCE_TYPE: u32 = 7;
pub const REFERENCE_FLAG_UNDEFINED_NON_LAZY: u32 = 0;
pub const REFERENCE_FLAG_UNDEFINED_LAZY: u32 = 1;
pub const REFERENCE_FLAG_DEFINED: u32 = 2;
pub const REFERENCE_FLAG_PRIVATE_DEFINED: u32 = 3;
pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY: u32 = 4;
pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY: u32 = 5;
pub const REFERENCED_DYNAMICALLY: u32 = 16;
pub const SELF_LIBRARY_ORDINAL: u32 = 0;
pub const MAX_LIBRARY_ORDINAL: u32 = 253;
pub const DYNAMIC_LOOKUP_ORDINAL: u32 = 254;
pub const EXECUTABLE_ORDINAL: u32 = 255;
pub const N_NO_DEAD_STRIP: u32 = 32;
pub const N_DESC_DISCARDED: u32 = 32;
pub const N_WEAK_REF: u32 = 64;
pub const N_WEAK_DEF: u32 = 128;
pub const N_REF_TO_WEAK: u32 = 128;
pub const N_ARM_THUMB_DEF: u32 = 8;
pub const N_SYMBOL_RESOLVER: u32 = 256;
pub const N_ALT_ENTRY: u32 = 512;
pub const N_COLD_FUNC: u32 = 1024;
pub const SYMDEF: &[u8; 10usize] = b"__.SYMDEF\0";
pub const SYMDEF_SORTED: &[u8; 17usize] = b"__.SYMDEF SORTED\0";
pub const SYMDEF_64: &[u8; 13usize] = b"__.SYMDEF_64\0";
pub const SYMDEF_64_SORTED: &[u8; 20usize] = b"__.SYMDEF_64 SORTED\0";
pub const R_ABS: u32 = 0;
pub const R_SCATTERED: u32 = 2147483648;
pub const N_GSYM: u32 = 32;
pub const N_FNAME: u32 = 34;
pub const N_FUN: u32 = 36;
pub const N_STSYM: u32 = 38;
pub const N_LCSYM: u32 = 40;
pub const N_BNSYM: u32 = 46;
pub const N_AST: u32 = 50;
pub const N_OPT: u32 = 60;
pub const N_RSYM: u32 = 64;
pub const N_SLINE: u32 = 68;
pub const N_ENSYM: u32 = 78;
pub const N_SSYM: u32 = 96;
pub const N_SO: u32 = 100;
pub const N_OSO: u32 = 102;
pub const N_LSYM: u32 = 128;
pub const N_BINCL: u32 = 130;
pub const N_SOL: u32 = 132;
pub const N_PARAMS: u32 = 134;
pub const N_VERSION: u32 = 136;
pub const N_OLEVEL: u32 = 138;
pub const N_PSYM: u32 = 160;
pub const N_EINCL: u32 = 162;
pub const N_ENTRY: u32 = 164;
pub const N_LBRAC: u32 = 192;
pub const N_EXCL: u32 = 194;
pub const N_RBRAC: u32 = 224;
pub const N_BCOMM: u32 = 226;
pub const N_ECOMM: u32 = 228;
pub const N_ECOML: u32 = 232;
pub const N_LENG: u32 = 254;
pub const N_PC: u32 = 48;
pub const OBJC_API_VERSION: u32 = 2;
pub const OBJC_NO_GC: u32 = 1;
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: u32 = 1;
pub const OBJC_OLD_DISPATCH_PROTOTYPES: u32 = 0;
pub const OBJC_BOOL_IS_BOOL: u32 = 0;
pub const OBJC_BOOL_IS_CHAR: u32 = 1;
pub const NSIntegerMax: u64 = 9223372036854775807;
pub const NSIntegerMin: i64 = -9223372036854775808;
pub const NSUIntegerMax: i32 = -1;
pub const NSINTEGER_DEFINED: u32 = 1;
pub const OBJC_GETCLASSHOOK_DEFINED: u32 = 1;
pub const OBJC_ADDLOADIMAGEFUNC_DEFINED: u32 = 1;
pub const OBJC_SETHOOK_LAZYCLASSNAMER_DEFINED: u32 = 1;
pub const OBJC_REALIZECLASSFROMSWIFT_DEFINED: u32 = 1;
pub const _C_ID: u8 = 64u8;
pub const _C_CLASS: u8 = 35u8;
pub const _C_SEL: u8 = 58u8;
pub const _C_CHR: u8 = 99u8;
pub const _C_UCHR: u8 = 67u8;
pub const _C_SHT: u8 = 115u8;
pub const _C_USHT: u8 = 83u8;
pub const _C_INT: u8 = 105u8;
pub const _C_UINT: u8 = 73u8;
pub const _C_LNG: u8 = 108u8;
pub const _C_ULNG: u8 = 76u8;
pub const _C_LNG_LNG: u8 = 113u8;
pub const _C_ULNG_LNG: u8 = 81u8;
pub const _C_INT128: u8 = 116u8;
pub const _C_UINT128: u8 = 84u8;
pub const _C_FLT: u8 = 102u8;
pub const _C_DBL: u8 = 100u8;
pub const _C_LNG_DBL: u8 = 68u8;
pub const _C_BFLD: u8 = 98u8;
pub const _C_BOOL: u8 = 66u8;
pub const _C_VOID: u8 = 118u8;
pub const _C_UNDEF: u8 = 63u8;
pub const _C_PTR: u8 = 94u8;
pub const _C_CHARPTR: u8 = 42u8;
pub const _C_ATOM: u8 = 37u8;
pub const _C_ARY_B: u8 = 91u8;
pub const _C_ARY_E: u8 = 93u8;
pub const _C_UNION_B: u8 = 40u8;
pub const _C_UNION_E: u8 = 41u8;
pub const _C_STRUCT_B: u8 = 123u8;
pub const _C_STRUCT_E: u8 = 125u8;
pub const _C_VECTOR: u8 = 33u8;
pub const _C_COMPLEX: u8 = 106u8;
pub const _C_ATOMIC: u8 = 65u8;
pub const _C_CONST: u8 = 114u8;
pub const _C_IN: u8 = 110u8;
pub const _C_INOUT: u8 = 78u8;
pub const _C_OUT: u8 = 111u8;
pub const _C_BYCOPY: u8 = 79u8;
pub const _C_BYREF: u8 = 82u8;
pub const _C_ONEWAY: u8 = 86u8;
pub const _C_GNUREGISTER: u8 = 43u8;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 1;
pub const OS_OBJECT_USE_OBJC: u32 = 1;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const __COREFOUNDATION_COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFBAG__: u32 = 1;
pub const __COREFOUNDATION_CFBINARYHEAP__: u32 = 1;
pub const __COREFOUNDATION_CFBITVECTOR__: u32 = 1;
pub const __COREFOUNDATION_CFBYTEORDER__: u32 = 1;
pub const CF_USE_OSBYTEORDER_H: u32 = 1;
pub const __COREFOUNDATION_CFCALENDAR__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFTIMEZONE__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const __COREFOUNDATION_CFCGTYPES__: u32 = 1;
pub const CGFLOAT_IS_DOUBLE: u32 = 1;
pub const CGFLOAT_DEFINED: u32 = 1;
pub const CGVECTOR_DEFINED: u32 = 1;
pub const __COREFOUNDATION_CFDATEFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBERFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFPREFERENCES__: u32 = 1;
pub const __COREFOUNDATION_CFPROPERTYLIST__: u32 = 1;
pub const __COREFOUNDATION_CFSTREAM__: u32 = 1;
pub const __COREFOUNDATION_CFURL__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const __COREFOUNDATION_CFSOCKET__: u32 = 1;
pub const __COREFOUNDATION_CFSET__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__: u32 = 1;
pub const __COREFOUNDATION_CFTREE__: u32 = 1;
pub const __COREFOUNDATION_CFURLACCESS__: u32 = 1;
pub const __COREFOUNDATION_CFUUID__: u32 = 1;
pub const __COREFOUNDATION_CFUTILITIES__: u32 = 1;
pub const __COREFOUNDATION_CFBUNDLE__: u32 = 1;
pub const __COREFOUNDATION_CFMESSAGEPORT__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGIN__: u32 = 1;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE: u32 = 1;
pub const __COREFOUNDATION_CFMACHPORT__: u32 = 1;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFURLENUMERATOR__: u32 = 1;
pub const __COREFOUNDATION_CFFILESECURITY__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__: u32 = 1;
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__: u32 = 1;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__: u32 = 1;
pub const __COREFOUNDATION_CFXMLNODE__: u32 = 1;
pub const __CFXMLNode_DEPRECATION_MSG: &[u8; 83usize] =
    b"CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFXMLPARSER__: u32 = 1;
pub const __CFXMLParser_DEPRECATION_MSG: &[u8; 85usize] =
    b"CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFPLUGINCOM__: u32 = 1;
pub const SEVERITY_SUCCESS: u32 = 0;
pub const SEVERITY_ERROR: u32 = 1;
pub const kCacheFunctionPrepareForExecution: u32 = 1;
pub const kCacheFunctionFlushDcache: u32 = 2;
pub const kOSReturnSuccess: u32 = 0;
pub const OSTYPES_K64_REV: u32 = 2;
pub const kOSBundleCompatibleVersionKey: &[u8; 26usize] = b"OSBundleCompatibleVersion\0";
pub const kOSBundleEnableKextLoggingKey: &[u8; 26usize] = b"OSBundleEnableKextLogging\0";
pub const kOSBundleIsInterfaceKey: &[u8; 20usize] = b"OSBundleIsInterface\0";
pub const kOSBundleLibrariesKey: &[u8; 18usize] = b"OSBundleLibraries\0";
pub const kOSBundleRequiredKey: &[u8; 17usize] = b"OSBundleRequired\0";
pub const kOSBundleRequireExplicitLoadKey: &[u8; 28usize] = b"OSBundleRequireExplicitLoad\0";
pub const kOSBundleAllowUserLoadKey: &[u8; 22usize] = b"OSBundleAllowUserLoad\0";
pub const kOSBundleAllowUserTerminateKey: &[u8; 27usize] = b"OSBundleAllowUserTerminate\0";
pub const kOSKernelResourceKey: &[u8; 17usize] = b"OSKernelResource\0";
pub const kOSKextVariantOverrideKey: &[u8; 22usize] = b"OSKextVariantOverride\0";
pub const kIOKitPersonalitiesKey: &[u8; 19usize] = b"IOKitPersonalities\0";
pub const kIOPersonalityPublisherKey: &[u8; 23usize] = b"IOPersonalityPublisher\0";
pub const kOSMutableSegmentCopy: &[u8; 21usize] = b"OSMutableSegmentCopy\0";
pub const kOSBundleDebugLevelKey: &[u8; 19usize] = b"OSBundleDebugLevel\0";
pub const kOSBundleSharedExecutableIdentifierKey: &[u8; 35usize] =
    b"OSBundleSharedExecutableIdentifier\0";
pub const kOSKextKernelIdentifier: &[u8; 11usize] = b"__kernel__\0";
pub const kOSKextBundlePackageTypeKext: &[u8; 5usize] = b"KEXT\0";
pub const kOSKextBundlePackageTypeDriverKit: &[u8; 5usize] = b"DEXT\0";
pub const kOSBundleRequiredRoot: &[u8; 5usize] = b"Root\0";
pub const kOSBundleRequiredLocalRoot: &[u8; 11usize] = b"Local-Root\0";
pub const kOSBundleRequiredNetworkRoot: &[u8; 13usize] = b"Network-Root\0";
pub const kOSBundleRequiredSafeBoot: &[u8; 10usize] = b"Safe Boot\0";
pub const kOSBundleRequiredConsole: &[u8; 8usize] = b"Console\0";
pub const kOSBundleRequiredDriverKit: &[u8; 10usize] = b"DriverKit\0";
pub const kIOReturnSuccess: u32 = 0;
pub const IOKIT: u32 = 1;
pub const PRIIOByteCount: &[u8; 2usize] = b"u\0";
pub const IOPhysSize: u32 = 32;
pub const kIOKitBuildVersionKey: &[u8; 18usize] = b"IOKitBuildVersion\0";
pub const kIOKitDiagnosticsKey: &[u8; 17usize] = b"IOKitDiagnostics\0";
pub const kIORegistryPlanesKey: &[u8; 17usize] = b"IORegistryPlanes\0";
pub const kIOCatalogueKey: &[u8; 12usize] = b"IOCatalogue\0";
pub const kIOServicePlane: &[u8; 10usize] = b"IOService\0";
pub const kIOPowerPlane: &[u8; 8usize] = b"IOPower\0";
pub const kIODeviceTreePlane: &[u8; 13usize] = b"IODeviceTree\0";
pub const kIOAudioPlane: &[u8; 8usize] = b"IOAudio\0";
pub const kIOFireWirePlane: &[u8; 11usize] = b"IOFireWire\0";
pub const kIOUSBPlane: &[u8; 6usize] = b"IOUSB\0";
pub const kIORegistryEntryIDKey: &[u8; 18usize] = b"IORegistryEntryID\0";
pub const kIORegistryEntryPropertyKeysKey: &[u8; 28usize] = b"IORegistryEntryPropertyKeys\0";
pub const kIORegistryEntryAllowableSetPropertiesKey: &[u8; 38usize] =
    b"IORegistryEntryAllowableSetProperties\0";
pub const kIORegistryEntryDefaultLockingSetPropertiesKey: &[u8; 43usize] =
    b"IORegistryEntryDefaultLockingSetProperties\0";
pub const kIOServiceClass: &[u8; 10usize] = b"IOService\0";
pub const kIOResourcesClass: &[u8; 12usize] = b"IOResources\0";
pub const kIOClassKey: &[u8; 8usize] = b"IOClass\0";
pub const kIOProbeScoreKey: &[u8; 13usize] = b"IOProbeScore\0";
pub const kIOKitDebugKey: &[u8; 11usize] = b"IOKitDebug\0";
pub const kIOUserClassKey: &[u8; 12usize] = b"IOUserClass\0";
pub const kIOUserClassesKey: &[u8; 14usize] = b"IOUserClasses\0";
pub const kIOSupportedPropertiesKey: &[u8; 22usize] = b"IOSupportedProperties\0";
pub const kIOUserServicePropertiesKey: &[u8; 24usize] = b"IOUserServiceProperties\0";
pub const kIOProviderClassKey: &[u8; 16usize] = b"IOProviderClass\0";
pub const kIONameMatchKey: &[u8; 12usize] = b"IONameMatch\0";
pub const kIOPropertyMatchKey: &[u8; 16usize] = b"IOPropertyMatch\0";
pub const kIOPropertyExistsMatchKey: &[u8; 22usize] = b"IOPropertyExistsMatch\0";
pub const kIOPathMatchKey: &[u8; 12usize] = b"IOPathMatch\0";
pub const kIOLocationMatchKey: &[u8; 16usize] = b"IOLocationMatch\0";
pub const kIOParentMatchKey: &[u8; 14usize] = b"IOParentMatch\0";
pub const kIOResourceMatchKey: &[u8; 16usize] = b"IOResourceMatch\0";
pub const kIOResourceMatchedKey: &[u8; 18usize] = b"IOResourceMatched\0";
pub const kIOMatchedServiceCountKey: &[u8; 27usize] = b"IOMatchedServiceCountMatch\0";
pub const kIONameMatchedKey: &[u8; 14usize] = b"IONameMatched\0";
pub const kIOMatchCategoryKey: &[u8; 16usize] = b"IOMatchCategory\0";
pub const kIODefaultMatchCategoryKey: &[u8; 23usize] = b"IODefaultMatchCategory\0";
pub const kIOMatchedPersonalityKey: &[u8; 21usize] = b"IOMatchedPersonality\0";
pub const kIORematchPersonalityKey: &[u8; 21usize] = b"IORematchPersonality\0";
pub const kIORematchCountKey: &[u8; 15usize] = b"IORematchCount\0";
pub const kIODEXTMatchCountKey: &[u8; 17usize] = b"IODEXTMatchCount\0";
pub const kIOUserClientEntitlementsKey: &[u8; 25usize] = b"IOUserClientEntitlements\0";
pub const kIOServiceDEXTEntitlementsKey: &[u8; 26usize] = b"IOServiceDEXTEntitlements\0";
pub const kIODriverKitEntitlementKey: &[u8; 30usize] = b"com.apple.developer.driverkit\0";
pub const kIODriverKitUserClientEntitlementsKey: &[u8; 48usize] =
    b"com.apple.developer.driverkit.userclient-access\0";
pub const kIODriverKitRequiredEntitlementsKey: &[u8; 42usize] =
    b"com.apple.private.driverkit.driver-access\0";
pub const kIODriverKitTestDriverEntitlementKey: &[u8; 40usize] =
    b"com.apple.private.driverkit.test-driver\0";
pub const kIODriverKitUserClientEntitlementAllowAnyKey: &[u8; 58usize] =
    b"com.apple.developer.driverkit.allow-any-userclient-access\0";
pub const kIODriverKitUserClientEntitlementAdministratorKey: &[u8; 44usize] =
    b"com.apple.developer.driverkit.administrator\0";
pub const kIODriverKitUserClientEntitlementCommunicatesWithDriversKey: &[u8; 56usize] =
    b"com.apple.developer.driverkit.communicates-with-drivers\0";
pub const kIODriverKitUserClientEntitlementAllowThirdPartyUserClientsKey: &[u8; 60usize] =
    b"com.apple.developer.driverkit.allow-third-party-userclients\0";
pub const kIODriverKitUSBTransportEntitlementKey: &[u8; 44usize] =
    b"com.apple.developer.driverkit.transport.usb\0";
pub const kIODriverKitHIDTransportEntitlementKey: &[u8; 44usize] =
    b"com.apple.developer.driverkit.transport.hid\0";
pub const kIODriverKitHIDFamilyDeviceEntitlementKey: &[u8; 48usize] =
    b"com.apple.developer.driverkit.family.hid.device\0";
pub const kIODriverKitHIDFamilyEventServiceEntitlementKey: &[u8; 54usize] =
    b"com.apple.developer.driverkit.family.hid.eventservice\0";
pub const kIODriverKitTransportBuiltinEntitlementKey: &[u8; 38usize] =
    b"com.apple.developer.driverkit.builtin\0";
pub const kIONVRAMReadAccessKey: &[u8; 42usize] = b"com.apple.private.iokit.nvram-read-access\0";
pub const kIONVRAMWriteAccessKey: &[u8; 43usize] = b"com.apple.private.iokit.nvram-write-access\0";
pub const kIOResourcesSetPropertyKey: &[u8; 48usize] =
    b"com.apple.private.iokit.ioresources.setproperty\0";
pub const kIONVRAMSystemAllowKey: &[u8; 43usize] = b"com.apple.private.iokit.system-nvram-allow\0";
pub const kIOMatchDeferKey: &[u8; 13usize] = b"IOMatchDefer\0";
pub const kIOAllCPUInitializedKey: &[u8; 20usize] = b"IOAllCPUInitialized\0";
pub const kIOUserClientClassKey: &[u8; 18usize] = b"IOUserClientClass\0";
pub const kIOMapperIDKey: &[u8; 11usize] = b"IOMapperID\0";
pub const kIOUserClientCrossEndianKey: &[u8; 24usize] = b"IOUserClientCrossEndian\0";
pub const kIOUserClientCrossEndianCompatibleKey: &[u8; 34usize] =
    b"IOUserClientCrossEndianCompatible\0";
pub const kIOUserClientSharedInstanceKey: &[u8; 27usize] = b"IOUserClientSharedInstance\0";
pub const kIOUserClientDefaultLockingKey: &[u8; 27usize] = b"IOUserClientDefaultLocking\0";
pub const kIOUserClientDefaultLockingSetPropertiesKey: &[u8; 40usize] =
    b"IOUserClientDefaultLockingSetProperties\0";
pub const kIOUserClientDefaultLockingSingleThreadExternalMethodKey: &[u8; 53usize] =
    b"IOUserClientDefaultLockingSingleThreadExternalMethod\0";
pub const kIOUserClientCreatorKey: &[u8; 20usize] = b"IOUserClientCreator\0";
pub const kIOUserServerCDHashKey: &[u8; 19usize] = b"IOUserServerCDHash\0";
pub const kIOUserUserClientKey: &[u8; 17usize] = b"IOUserUserClient\0";
pub const kIOUserServerOneProcessKey: &[u8; 23usize] = b"IOUserServerOneProcess\0";
pub const kIOUserServerPreserveUserspaceRebootKey: &[u8; 36usize] =
    b"IOUserServerPreserveUserspaceReboot\0";
pub const kIOPublishNotification: &[u8; 17usize] = b"IOServicePublish\0";
pub const kIOFirstPublishNotification: &[u8; 22usize] = b"IOServiceFirstPublish\0";
pub const kIOMatchedNotification: &[u8; 17usize] = b"IOServiceMatched\0";
pub const kIOFirstMatchNotification: &[u8; 20usize] = b"IOServiceFirstMatch\0";
pub const kIOTerminatedNotification: &[u8; 19usize] = b"IOServiceTerminate\0";
pub const kIOWillTerminateNotification: &[u8; 23usize] = b"IOServiceWillTerminate\0";
pub const kIOGeneralInterest: &[u8; 18usize] = b"IOGeneralInterest\0";
pub const kIOBusyInterest: &[u8; 15usize] = b"IOBusyInterest\0";
pub const kIOAppPowerStateInterest: &[u8; 24usize] = b"IOAppPowerStateInterest\0";
pub const kIOPriorityPowerStateInterest: &[u8; 29usize] = b"IOPriorityPowerStateInterest\0";
pub const kIOPlatformDeviceMessageKey: &[u8; 24usize] = b"IOPlatformDeviceMessage\0";
pub const kIOCFPlugInTypesKey: &[u8; 16usize] = b"IOCFPlugInTypes\0";
pub const kIOCompatibilityMatchKey: &[u8; 21usize] = b"IOCompatibilityMatch\0";
pub const kIOCompatibilityPropertiesKey: &[u8; 26usize] = b"IOCompatibilityProperties\0";
pub const kIOPathKey: &[u8; 7usize] = b"IOPath\0";
pub const kIOCommandPoolSizeKey: &[u8; 18usize] = b"IOCommandPoolSize\0";
pub const kIOMaximumPriorityCountKey: &[u8; 23usize] = b"IOMaximumPriorityCount\0";
pub const kIOMaximumBlockCountReadKey: &[u8; 24usize] = b"IOMaximumBlockCountRead\0";
pub const kIOMaximumBlockCountWriteKey: &[u8; 25usize] = b"IOMaximumBlockCountWrite\0";
pub const kIOMaximumByteCountReadKey: &[u8; 23usize] = b"IOMaximumByteCountRead\0";
pub const kIOMaximumByteCountWriteKey: &[u8; 24usize] = b"IOMaximumByteCountWrite\0";
pub const kIOMaximumSegmentCountReadKey: &[u8; 26usize] = b"IOMaximumSegmentCountRead\0";
pub const kIOMaximumSegmentCountWriteKey: &[u8; 27usize] = b"IOMaximumSegmentCountWrite\0";
pub const kIOMaximumSegmentByteCountReadKey: &[u8; 30usize] = b"IOMaximumSegmentByteCountRead\0";
pub const kIOMaximumSegmentByteCountWriteKey: &[u8; 31usize] = b"IOMaximumSegmentByteCountWrite\0";
pub const kIOMinimumSegmentAlignmentByteCountKey: &[u8; 35usize] =
    b"IOMinimumSegmentAlignmentByteCount\0";
pub const kIOMaximumSegmentAddressableBitCountKey: &[u8; 36usize] =
    b"IOMaximumSegmentAddressableBitCount\0";
pub const kIOMinimumSaturationByteCountKey: &[u8; 29usize] = b"IOMinimumSaturationByteCount\0";
pub const kIOMaximumSwapWriteKey: &[u8; 19usize] = b"IOMaximumSwapWrite\0";
pub const kIOIconKey: &[u8; 7usize] = b"IOIcon\0";
pub const kIOBundleResourceFileKey: &[u8; 21usize] = b"IOBundleResourceFile\0";
pub const kIOBusBadgeKey: &[u8; 11usize] = b"IOBusBadge\0";
pub const kIODeviceIconKey: &[u8; 13usize] = b"IODeviceIcon\0";
pub const kIOPlatformSerialNumberKey: &[u8; 23usize] = b"IOPlatformSerialNumber\0";
pub const kIOPlatformUUIDKey: &[u8; 15usize] = b"IOPlatformUUID\0";
pub const kIONVRAMBootArgsKey: &[u8; 10usize] = b"boot-args\0";
pub const kIONVRAMDeletePropertyKey: &[u8; 24usize] = b"IONVRAM-DELETE-PROPERTY\0";
pub const kIONVRAMSyncNowPropertyKey: &[u8; 25usize] = b"IONVRAM-SYNCNOW-PROPERTY\0";
pub const kIONVRAMActivateCSRConfigPropertyKey: &[u8; 24usize] = b"IONVRAM-ARMCSR-PROPERTY\0";
pub const kIODTNVRAMPanicInfoKey: &[u8; 16usize] = b"aapl,panic-info\0";
pub const kIOBootDeviceKey: &[u8; 13usize] = b"IOBootDevice\0";
pub const kIOBootDevicePathKey: &[u8; 17usize] = b"IOBootDevicePath\0";
pub const kIOBootDeviceSizeKey: &[u8; 17usize] = b"IOBootDeviceSize\0";
pub const kOSBuildVersionKey: &[u8; 17usize] = b"OS Build Version\0";
pub const kIOStateNotificationItemCreateKey: &[u8; 41usize] =
    b"com.apple.iokit.statenotification.create\0";
pub const kIOStateNotificationItemSetKey: &[u8; 38usize] =
    b"com.apple.iokit.statenotification.set\0";
pub const kIOStateNotificationItemCopyKey: &[u8; 39usize] =
    b"com.apple.iokit.statenotification.copy\0";
pub const kIOStateNotificationNameKey: &[u8; 39usize] = b"com.apple.iokit.statenotification.name\0";
pub const kIOStateNotificationEntitlementSetKey: &[u8; 50usize] =
    b"com.apple.iokit.statenotification.entitlement-set\0";
pub const kIOStateNotificationEntitlementGetKey: &[u8; 50usize] =
    b"com.apple.iokit.statenotification.entitlement-get\0";
pub const kIOSystemStateClamshellKey: &[u8; 29usize] = b"com.apple.iokit.pm.clamshell\0";
pub const kIOSystemStateSleepDescriptionKey: &[u8; 36usize] =
    b"com.apple.iokit.pm.sleepdescription\0";
pub const kIOSystemStateSleepDescriptionReasonKey: &[u8; 31usize] =
    b"com.apple.iokit.pm.sleepreason\0";
pub const kIOSystemStateSleepDescriptionHibernateStateKey: &[u8; 34usize] =
    b"com.apple.iokit.pm.hibernatestate\0";
pub const kIOSystemStateWakeDescriptionKey: &[u8; 35usize] =
    b"com.apple.iokit.pm.wakedescription\0";
pub const kIOSystemStateWakeDescriptionWakeReasonKey: &[u8; 30usize] =
    b"com.apple.iokit.pm.wakereason\0";
pub const kIOSystemStateHaltDescriptionKey: &[u8; 35usize] =
    b"com.apple.iokit.pm.haltdescription\0";
pub const kIOSystemStateHaltDescriptionHaltStateKey: &[u8; 29usize] =
    b"com.apple.iokit.pm.haltstate\0";
pub const kIOSystemStatePowerSourceDescriptionKey: &[u8; 42usize] =
    b"com.apple.iokit.pm.powersourcedescription\0";
pub const kIOSystemStatePowerSourceDescriptionACAttachedKey: &[u8; 30usize] =
    b"com.apple.iokit.pm.acattached\0";
pub const kIOBSDKey: &[u8; 6usize] = b"IOBSD\0";
pub const kIOBSDNameKey: &[u8; 9usize] = b"BSD Name\0";
pub const kIOBSDNamesKey: &[u8; 10usize] = b"BSD Names\0";
pub const kIOBSDMajorKey: &[u8; 10usize] = b"BSD Major\0";
pub const kIOBSDMinorKey: &[u8; 10usize] = b"BSD Minor\0";
pub const kIOBSDUnitKey: &[u8; 9usize] = b"BSD Unit\0";
pub const kIOUserServerClassKey: &[u8; 13usize] = b"IOUserServer\0";
pub const kIOUserServerNameKey: &[u8; 17usize] = b"IOUserServerName\0";
pub const kIOUserServerTagKey: &[u8; 16usize] = b"IOUserServerTag\0";
pub const kIOAudioDeviceClassName: &[u8; 14usize] = b"IOAudioDevice\0";
pub const kIOAudioEngineClassName: &[u8; 14usize] = b"IOAudioEngine\0";
pub const kIOAudioStreamClassName: &[u8; 14usize] = b"IOAudioStream\0";
pub const kIOAudioPortClassName: &[u8; 12usize] = b"IOAudioPort\0";
pub const kIOAudioControlClassName: &[u8; 15usize] = b"IOAudioControl\0";
pub const kIOAudioSampleRateKey: &[u8; 18usize] = b"IOAudioSampleRate\0";
pub const kIOAudioSampleRateWholeNumberKey: &[u8; 29usize] = b"IOAudioSampleRateWholeNumber\0";
pub const kIOAudioSampleRateFractionKey: &[u8; 26usize] = b"IOAudioSampleRateFraction\0";
pub const kIOAudioDeviceNameKey: &[u8; 18usize] = b"IOAudioDeviceName\0";
pub const kIOAudioDeviceShortNameKey: &[u8; 23usize] = b"IOAudioDeviceShortName\0";
pub const kIOAudioDeviceManufacturerNameKey: &[u8; 30usize] = b"IOAudioDeviceManufacturerName\0";
pub const kIOAudioDeviceLocalizedBundleKey: &[u8; 29usize] = b"IOAudioDeviceLocalizedBundle\0";
pub const kIOAudioDeviceTransportTypeKey: &[u8; 27usize] = b"IOAudioDeviceTransportType\0";
pub const kIOAudioDeviceConfigurationAppKey: &[u8; 38usize] =
    b"IOAudioDeviceConfigurationApplication\0";
pub const kIOAudioDeviceCanBeDefaults: &[u8; 27usize] = b"IOAudioDeviceCanBeDefaults\0";
pub const kIOAudioDeviceModelIDKey: &[u8; 21usize] = b"IOAudioDeviceModelID\0";
pub const kIOAudioDeviceIconNameKey: &[u8; 22usize] = b"IOAudioDeviceIconName\0";
pub const kIOAudioDeviceIconTypeKey: &[u8; 22usize] = b"IOAudioDeviceIconType\0";
pub const kIOAudioDeviceIconSubDirKey: &[u8; 24usize] = b"IOAudioDeviceIconSubDir\0";
pub const kIOAudioEngineStateKey: &[u8; 19usize] = b"IOAudioEngineState\0";
pub const kIOAudioEngineOutputSampleLatencyKey: &[u8; 33usize] =
    b"IOAudioEngineOutputSampleLatency\0";
pub const kIOAudioStreamSampleLatencyKey: &[u8; 27usize] = b"IOAudioStreamSampleLatency\0";
pub const kIOAudioEngineInputSampleLatencyKey: &[u8; 32usize] =
    b"IOAudioEngineInputSampleLatency\0";
pub const kIOAudioEngineSampleOffsetKey: &[u8; 26usize] = b"IOAudioEngineSampleOffset\0";
pub const kIOAudioEngineInputSampleOffsetKey: &[u8; 31usize] = b"IOAudioEngineInputSampleOffset\0";
pub const kIOAudioEngineNumSampleFramesPerBufferKey: &[u8; 38usize] =
    b"IOAudioEngineNumSampleFramesPerBuffer\0";
pub const kIOAudioEngineCoreAudioPlugInKey: &[u8; 29usize] = b"IOAudioEngineCoreAudioPlugIn\0";
pub const kIOAudioEngineNumActiveUserClientsKey: &[u8; 34usize] =
    b"IOAudioEngineNumActiveUserClients\0";
pub const kIOAudioEngineUserClientActiveKey: &[u8; 30usize] = b"IOAudioEngineUserClientActive\0";
pub const kIOAudioEngineGlobalUniqueIDKey: &[u8; 28usize] = b"IOAudioEngineGlobalUniqueID\0";
pub const kIOAudioEngineDescriptionKey: &[u8; 25usize] = b"IOAudioEngineDescription\0";
pub const kIOAudioEngineClockIsStableKey: &[u8; 27usize] = b"IOAudioEngineClockIsStable\0";
pub const kIOAudioEngineClockDomainKey: &[u8; 25usize] = b"IOAudioEngineClockDomain\0";
pub const kIOAudioEngineIsHiddenKey: &[u8; 22usize] = b"IOAudioEngineIsHidden\0";
pub const kIOAudioEngineOutputAutoRouteKey: &[u8; 12usize] = b"NoAutoRoute\0";
pub const kIOAudioEngineUseHiResSampleIntervalKey: &[u8; 36usize] =
    b"IOAudioEngineUseHiResSampleInterval\0";
pub const kIOAudioEngineFullChannelNamesKey: &[u8; 26usize] = b"IOAudioEngineChannelNames\0";
pub const kIOAudioEngineFullChannelCategoryNamesKey: &[u8; 34usize] =
    b"IOAudioEngineChannelCategoryNames\0";
pub const kIOAudioEngineFullChannelNumberNamesKey: &[u8; 32usize] =
    b"IOAudioEngineChannelNumberNames\0";
pub const kIOAudioEngineFullChannelNameKeyInputFormat: &[u8; 15usize] = b"InputChannel%u\0";
pub const kIOAudioEngineFullChannelNameKeyOutputFormat: &[u8; 16usize] = b"OutputChannel%u\0";
pub const kIOAudioEngineFlavorKey: &[u8; 20usize] = b"IOAudioEngineFlavor\0";
pub const kIOAudioEngineAlwaysLoadCoreAudioPlugInKey: &[u8; 39usize] =
    b"IOAudioEngineAlwaysLoadCoreAudioPlugIn\0";
pub const kIOAudioEngineInputChannelLayoutKey: &[u8; 32usize] =
    b"IOAudioEngineInputChannelLayout\0";
pub const kIOAudioEngineOutputChannelLayoutKey: &[u8; 33usize] =
    b"IOAudioEngineOutputChannelLayout\0";
pub const kIOAudioEngineDisableClockBoundsCheck: &[u8; 37usize] =
    b"IOAudioEngineDisableClockBoundsCheck\0";
pub const kIOAudioStreamIDKey: &[u8; 16usize] = b"IOAudioStreamID\0";
pub const kIOAudioStreamDescriptionKey: &[u8; 25usize] = b"IOAudioStreamDescription\0";
pub const kIOAudioStreamNumClientsKey: &[u8; 24usize] = b"IOAudioStreamNumClients\0";
pub const kIOAudioStreamDirectionKey: &[u8; 23usize] = b"IOAudioStreamDirection\0";
pub const kIOAudioStreamStartingChannelIDKey: &[u8; 31usize] = b"IOAudioStreamStartingChannelID\0";
pub const kIOAudioStreamStartingChannelNumberKey: &[u8; 35usize] =
    b"IOAudioStreamStartingChannelNumber\0";
pub const kIOAudioStreamAvailableKey: &[u8; 23usize] = b"IOAudioStreamAvailable\0";
pub const kIOAudioStreamFormatKey: &[u8; 20usize] = b"IOAudioStreamFormat\0";
pub const kIOAudioStreamAvailableFormatsKey: &[u8; 30usize] = b"IOAudioStreamAvailableFormats\0";
pub const kIOAudioStreamNumChannelsKey: &[u8; 25usize] = b"IOAudioStreamNumChannels\0";
pub const kIOAudioStreamSampleFormatKey: &[u8; 26usize] = b"IOAudioStreamSampleFormat\0";
pub const kIOAudioStreamNumericRepresentationKey: &[u8; 35usize] =
    b"IOAudioStreamNumericRepresentation\0";
pub const kIOAudioStreamFormatFlagsKey: &[u8; 25usize] = b"IOAudioStreamFormatFlags\0";
pub const kIOAudioStreamFramesPerPacketKey: &[u8; 29usize] = b"IOAudioStreamFramesPerPacket\0";
pub const kIOAudioStreamBytesPerPacketKey: &[u8; 28usize] = b"IOAudioStreamBytesPerPacket\0";
pub const kIOAudioStreamBitDepthKey: &[u8; 22usize] = b"IOAudioStreamBitDepth\0";
pub const kIOAudioStreamBitWidthKey: &[u8; 22usize] = b"IOAudioStreamBitWidth\0";
pub const kIOAudioStreamAlignmentKey: &[u8; 23usize] = b"IOAudioStreamAlignment\0";
pub const kIOAudioStreamByteOrderKey: &[u8; 23usize] = b"IOAudioStreamByteOrder\0";
pub const kIOAudioStreamIsMixableKey: &[u8; 23usize] = b"IOAudioStreamIsMixable\0";
pub const kIOAudioStreamMinimumSampleRateKey: &[u8; 31usize] = b"IOAudioStreamMinimumSampleRate\0";
pub const kIOAudioStreamMaximumSampleRateKey: &[u8; 31usize] = b"IOAudioStreamMaximumSampleRate\0";
pub const kIOAudioStreamDriverTagKey: &[u8; 23usize] = b"IOAudioStreamDriverTag\0";
pub const kIOAudioStreamTerminalTypeKey: &[u8; 26usize] = b"IOAudioStreamTerminalType\0";
pub const kIOAudioPortTypeKey: &[u8; 16usize] = b"IOAudioPortType\0";
pub const kIOAudioPortSubTypeKey: &[u8; 19usize] = b"IOAudioPortSubType\0";
pub const kIOAudioPortNameKey: &[u8; 16usize] = b"IOAudioPortName\0";
pub const kIOAudioControlTypeKey: &[u8; 19usize] = b"IOAudioControlType\0";
pub const kIOAudioControlSubTypeKey: &[u8; 22usize] = b"IOAudioControlSubType\0";
pub const kIOAudioControlUsageKey: &[u8; 20usize] = b"IOAudioControlUsage\0";
pub const kIOAudioControlIDKey: &[u8; 17usize] = b"IOAudioControlID\0";
pub const kIOAudioControlChannelIDKey: &[u8; 24usize] = b"IOAudioControlChannelID\0";
pub const kIOAudioControlChannelNumberKey: &[u8; 28usize] = b"IOAudioControlChannelNumber\0";
pub const kIOAudioControlCoreAudioPropertyIDKey: &[u8; 34usize] =
    b"IOAudioControlCoreAudioPropertyID\0";
pub const kIOAudioControlChannelNameKey: &[u8; 26usize] = b"IOAudioControlChannelName\0";
pub const kIOAudioControlChannelNameAll: &[u8; 13usize] = b"All Channels\0";
pub const kIOAudioControlChannelNameLeft: &[u8; 5usize] = b"Left\0";
pub const kIOAudioControlChannelNameRight: &[u8; 6usize] = b"Right\0";
pub const kIOAudioControlChannelNameCenter: &[u8; 7usize] = b"Center\0";
pub const kIOAudioControlChannelNameLeftRear: &[u8; 9usize] = b"LeftRear\0";
pub const kIOAudioControlChannelNameRightRear: &[u8; 10usize] = b"RightRear\0";
pub const kIOAudioControlChannelNameSub: &[u8; 4usize] = b"Sub\0";
pub const kIOAudioControlChannelNameFrontLeftCenter: &[u8; 16usize] = b"FrontLeftCenter\0";
pub const kIOAudioControlChannelNameFrontRightCenter: &[u8; 17usize] = b"FrontRightCenter\0";
pub const kIOAudioControlChannelNameRearCenter: &[u8; 11usize] = b"RearCenter\0";
pub const kIOAudioControlChannelNameSurroundLeft: &[u8; 13usize] = b"SurroundLeft\0";
pub const kIOAudioControlChannelNameSurroundRight: &[u8; 14usize] = b"SurroundRight\0";
pub const kIOAudioControlValueKey: &[u8; 20usize] = b"IOAudioControlValue\0";
pub const kIOAudioControlValueIsReadOnlyKey: &[u8; 30usize] = b"IOAudioControlValueIsReadOnly\0";
pub const kIOAudioLevelControlMinValueKey: &[u8; 28usize] = b"IOAudioLevelControlMinValue\0";
pub const kIOAudioLevelControlMaxValueKey: &[u8; 28usize] = b"IOAudioLevelControlMaxValue\0";
pub const kIOAudioLevelControlMinDBKey: &[u8; 25usize] = b"IOAudioLevelControlMinDB\0";
pub const kIOAudioLevelControlMaxDBKey: &[u8; 25usize] = b"IOAudioLevelControlMaxDB\0";
pub const kIOAudioLevelControlRangesKey: &[u8; 26usize] = b"IOAudioLevelControlRanges\0";
pub const kIOAudioLevelControlUseLinearScale: &[u8; 34usize] =
    b"IOAudioLevelControlUseLinearScale\0";
pub const kIOAudioSelectorControlAvailableSelectionsKey: &[u8; 42usize] =
    b"IOAudioSelectorControlAvailableSelections\0";
pub const kIOAudioSelectorControlSelectionValueKey: &[u8; 37usize] =
    b"IOAudioSelectorControlSelectionValue\0";
pub const kIOAudioSelectorControlSelectionDescriptionKey: &[u8; 46usize] =
    b"IOAudioSelectorControlSelectionDescriptionKey\0";
pub const kIOAudioSelectorControlTransportValueKey: &[u8; 37usize] =
    b"IOAudioSelectorControlTransportValue\0";
pub const kIOAudioSelectorControlClockSourceKey: &[u8; 37usize] =
    b"IOAudioSelectorControlClockSourceKey\0";
pub const kIOAudioEngineNumCalls: u32 = 6;
pub const kIOAudioEngineCurrentStatusStructVersion: u32 = 2;
pub const kFormatExtensionInvalidVersion: u32 = 0;
pub const kFormatExtensionCurrentVersion: u32 = 1;
pub const kStreamDataDescriptorInvalidVersion: u32 = 0;
pub const kStreamDataDescriptorCurrentVersion: u32 = 1;
pub const kIOAudioControlNumCalls: u32 = 2;
pub const kNoIdleAudioPowerDown: i32 = -1;
pub const kIOAudioChannelLabel_Discrete_field_ba: u32 = 16;
pub const kAVCAllOpcodes: u32 = 255;
pub const kAVCAllSubunitsAndUnit: u32 = 238;
pub const kAVCMaxNumPlugs: u32 = 31;
pub const kAVCAnyAvailableIsochPlug: u32 = 127;
pub const kAVCAnyAvailableExternalPlug: u32 = 255;
pub const kAVCAnyAvailableSubunitPlug: u32 = 255;
pub const kAVCMultiplePlugs: u32 = 253;
pub const kAVCInvalidPlug: u32 = 254;
pub const kAVCUnitAddress: u32 = 255;
pub const kAVCPlugSignalFormatNTSCDV: u32 = 2147483648;
pub const kAVCPlugSignalFormatPalDV: u32 = 2155872256;
pub const kAVCPlugSignalFormatMPEGTS: u32 = 2684354560;
pub const kBroadcastChannelInitialValues: u32 = 2147483679;
pub const kBroadcastChannelValidMask: u32 = 1073741824;
pub const kFireWireCommandUserFlagsMask: u32 = 65535;
pub const kFWUserCommandSubmitWithCopyMaxBufferBytes: u32 = 32;
pub const kIOAcceleratorClassName: &[u8; 14usize] = b"IOAccelerator\0";
pub const IOGA_COMPAT: u32 = 1;
pub const IOACCEL_TYPES_REV: u32 = 12;
pub const kCurrentGraphicsInterfaceVersion: u32 = 1;
pub const kCurrentGraphicsInterfaceRevision: u32 = 2;
pub const kIOAccelTypesKey: &[u8; 13usize] = b"IOAccelTypes\0";
pub const kIOAccelIndexKey: &[u8; 13usize] = b"IOAccelIndex\0";
pub const kIOAccelRevisionKey: &[u8; 16usize] = b"IOAccelRevision\0";
pub const IOGRAPHICSTYPES_REV: u32 = 76;
pub const IO1BitIndexedPixels: &[u8; 2usize] = b"P\0";
pub const IO2BitIndexedPixels: &[u8; 3usize] = b"PP\0";
pub const IO4BitIndexedPixels: &[u8; 5usize] = b"PPPP\0";
pub const IO8BitIndexedPixels: &[u8; 9usize] = b"PPPPPPPP\0";
pub const IO16BitDirectPixels: &[u8; 17usize] = b"-RRRRRGGGGGBBBBB\0";
pub const IO32BitDirectPixels: &[u8; 33usize] = b"--------RRRRRRRRGGGGGGGGBBBBBBBB\0";
pub const kIO30BitDirectPixels: &[u8; 33usize] = b"--RRRRRRRRRRGGGGGGGGGGBBBBBBBBBB\0";
pub const kIO64BitDirectPixels: &[u8; 13usize] = b"-16R16G16B16\0";
pub const kIO16BitFloatPixels: &[u8; 16usize] = b"-16FR16FG16FB16\0";
pub const kIO32BitFloatPixels: &[u8; 16usize] = b"-32FR32FG32FB32\0";
pub const IOYUV422Pixels: &[u8; 7usize] = b"Y4U2V2\0";
pub const IO8BitOverlayPixels: &[u8; 3usize] = b"O8\0";
pub const IOPagedPixels: &[u8; 6usize] = b"Page1\0";
pub const IO_SampleTypeAlpha: u8 = 65u8;
pub const IO_SampleTypeSkip: u8 = 45u8;
pub const kIOFBSetGammaSyncNotSpecified: i32 = -1;
pub const kIOFBSetGammaSyncNoSync: u32 = 0;
pub const kIOFBSetGammaSyncVerticalBlankSync: u32 = 1;
pub const kIODisplayAttributesKey: &[u8; 20usize] = b"IODisplayAttributes\0";
pub const kIODisplaySupportsUnderscanKey: &[u8; 27usize] = b"IODisplaySupportsUnderscan\0";
pub const kIODisplaySupportsBasicAudioKey: &[u8; 28usize] = b"IODisplaySupportsBasicAudio\0";
pub const kIODisplaySupportsYCbCr444Key: &[u8; 26usize] = b"IODisplaySupportsYCbCr444\0";
pub const kIODisplaySupportsYCbCr422Key: &[u8; 26usize] = b"IODisplaySupportsYCbCr422\0";
pub const kIODisplaySelectedColorModeKey: &[u8; 5usize] = b"cmod\0";
pub const IO_DISPLAY_CAN_FILL: u32 = 64;
pub const IO_DISPLAY_CAN_BLIT: u32 = 32;
pub const IO_24BPP_TRANSFER_TABLE_SIZE: u32 = 256;
pub const IO_15BPP_TRANSFER_TABLE_SIZE: u32 = 256;
pub const IO_8BPP_TRANSFER_TABLE_SIZE: u32 = 256;
pub const IO_12BPP_TRANSFER_TABLE_SIZE: u32 = 256;
pub const IO_2BPP_TRANSFER_TABLE_SIZE: u32 = 256;
pub const STDFB_BM256_TO_BM38_MAP_SIZE: u32 = 256;
pub const STDFB_BM38_TO_BM256_MAP_SIZE: u32 = 256;
pub const STDFB_4BPS_TO_5BPS_MAP_SIZE: u32 = 16;
pub const STDFB_5BPS_TO_4BPS_MAP_SIZE: u32 = 32;
pub const kIOFramebufferInfoKey: &[u8; 25usize] = b"IOFramebufferInformation\0";
pub const kIOFBWidthKey: &[u8; 10usize] = b"IOFBWidth\0";
pub const kIOFBHeightKey: &[u8; 11usize] = b"IOFBHeight\0";
pub const kIOFBRefreshRateKey: &[u8; 16usize] = b"IOFBRefreshRate\0";
pub const kIOFBFlagsKey: &[u8; 10usize] = b"IOFBFlags\0";
pub const kIOFBBytesPerRowKey: &[u8; 16usize] = b"IOFBBytesPerRow\0";
pub const kIOFBBytesPerPlaneKey: &[u8; 18usize] = b"IOFBBytesPerPlane\0";
pub const kIOFBBitsPerPixelKey: &[u8; 17usize] = b"IOFBBitsPerPixel\0";
pub const kIOFBComponentCountKey: &[u8; 19usize] = b"IOFBComponentCount\0";
pub const kIOFBBitsPerComponentKey: &[u8; 21usize] = b"IOFBBitsPerComponent\0";
pub const kIOFBDetailedTimingsKey: &[u8; 20usize] = b"IOFBDetailedTimings\0";
pub const kIOFBTimingRangeKey: &[u8; 16usize] = b"IOFBTimingRange\0";
pub const kIOFBScalerInfoKey: &[u8; 15usize] = b"IOFBScalerInfo\0";
pub const kIOFBCursorInfoKey: &[u8; 15usize] = b"IOFBCursorInfo\0";
pub const kIOFBHDMIDongleROMKey: &[u8; 18usize] = b"IOFBHDMIDongleROM\0";
pub const kIOFBHostAccessFlagsKey: &[u8; 20usize] = b"IOFBHostAccessFlags\0";
pub const kIOFBMemorySizeKey: &[u8; 15usize] = b"IOFBMemorySize\0";
pub const kIOFBNeedsRefreshKey: &[u8; 17usize] = b"IOFBNeedsRefresh\0";
pub const kIOFBProbeOptionsKey: &[u8; 17usize] = b"IOFBProbeOptions\0";
pub const kIOFBGammaWidthKey: &[u8; 15usize] = b"IOFBGammaWidth\0";
pub const kIOFBGammaCountKey: &[u8; 15usize] = b"IOFBGammaCount\0";
pub const kIOFBCLUTDeferKey: &[u8; 14usize] = b"IOFBCLUTDefer\0";
pub const kIOFBDisplayPortConfigurationDataKey: &[u8; 15usize] = b"dpcd-registers\0";
pub const kIOHibernatePreviewActiveKey: &[u8; 25usize] = b"IOHibernatePreviewActive\0";
pub const kIOHibernateEFIGfxStatusKey: &[u8; 24usize] = b"IOHibernateEFIGfxStatus\0";
pub const kIOFBAVSignalTypeKey: &[u8; 15usize] = b"av-signal-type\0";
pub const kIOFBConfigKey: &[u8; 11usize] = b"IOFBConfig\0";
pub const kIOFBModesKey: &[u8; 10usize] = b"IOFBModes\0";
pub const kIOFBModeIDKey: &[u8; 3usize] = b"ID\0";
pub const kIOFBModeDMKey: &[u8; 3usize] = b"DM\0";
pub const kIOFBModeTMKey: &[u8; 3usize] = b"TM\0";
pub const kIOFBModeAIDKey: &[u8; 4usize] = b"AID\0";
pub const kIOFBModeDFKey: &[u8; 3usize] = b"DF\0";
pub const kIOFBModePIKey: &[u8; 3usize] = b"PI\0";
pub const kIODisplayEDIDKey: &[u8; 14usize] = b"IODisplayEDID\0";
pub const kIODisplayEDIDOriginalKey: &[u8; 22usize] = b"IODisplayEDIDOriginal\0";
pub const kIODisplayLocationKey: &[u8; 18usize] = b"IODisplayLocation\0";
pub const kIODisplayConnectFlagsKey: &[u8; 22usize] = b"IODisplayConnectFlags\0";
pub const kIODisplayHasBacklightKey: &[u8; 22usize] = b"IODisplayHasBacklight\0";
pub const kIODisplayIsDigitalKey: &[u8; 19usize] = b"IODisplayIsDigital\0";
pub const kDisplayBundleKey: &[u8; 14usize] = b"DisplayBundle\0";
pub const kAppleDisplayTypeKey: &[u8; 17usize] = b"AppleDisplayType\0";
pub const kAppleSenseKey: &[u8; 11usize] = b"AppleSense\0";
pub const kIODisplayMCCSVersionKey: &[u8; 21usize] = b"IODisplayMCCSVersion\0";
pub const kIODisplayTechnologyTypeKey: &[u8; 24usize] = b"IODisplayTechnologyType\0";
pub const kIODisplayUsageTimeKey: &[u8; 19usize] = b"IODisplayUsageTime\0";
pub const kIODisplayFirmwareLevelKey: &[u8; 23usize] = b"IODisplayFirmwareLevel\0";
pub const kDisplayVendorID: &[u8; 16usize] = b"DisplayVendorID\0";
pub const kDisplayProductID: &[u8; 17usize] = b"DisplayProductID\0";
pub const kDisplaySerialNumber: &[u8; 20usize] = b"DisplaySerialNumber\0";
pub const kDisplaySerialString: &[u8; 20usize] = b"DisplaySerialString\0";
pub const kDisplayWeekOfManufacture: &[u8; 23usize] = b"DisplayWeekManufacture\0";
pub const kDisplayYearOfManufacture: &[u8; 23usize] = b"DisplayYearManufacture\0";
pub const kDisplayProductName: &[u8; 19usize] = b"DisplayProductName\0";
pub const kDisplayWhitePointX: &[u8; 19usize] = b"DisplayWhitePointX\0";
pub const kDisplayWhitePointY: &[u8; 19usize] = b"DisplayWhitePointY\0";
pub const kDisplayRedPointX: &[u8; 17usize] = b"DisplayRedPointX\0";
pub const kDisplayRedPointY: &[u8; 17usize] = b"DisplayRedPointY\0";
pub const kDisplayGreenPointX: &[u8; 19usize] = b"DisplayGreenPointX\0";
pub const kDisplayGreenPointY: &[u8; 19usize] = b"DisplayGreenPointY\0";
pub const kDisplayBluePointX: &[u8; 18usize] = b"DisplayBluePointX\0";
pub const kDisplayBluePointY: &[u8; 18usize] = b"DisplayBluePointY\0";
pub const kDisplayWhiteGamma: &[u8; 18usize] = b"DisplayWhiteGamma\0";
pub const kDisplayRedGamma: &[u8; 16usize] = b"DisplayRedGamma\0";
pub const kDisplayGreenGamma: &[u8; 18usize] = b"DisplayGreenGamma\0";
pub const kDisplayBlueGamma: &[u8; 17usize] = b"DisplayBlueGamma\0";
pub const kDisplayGammaChannels: &[u8; 21usize] = b"DisplayGammaChannels\0";
pub const kDisplayGammaEntryCount: &[u8; 23usize] = b"DisplayGammaEntryCount\0";
pub const kDisplayGammaEntrySize: &[u8; 22usize] = b"DisplayGammaEntrySize\0";
pub const kDisplayGammaTable: &[u8; 18usize] = b"DisplayGammaTable\0";
pub const kDisplayBrightnessAffectsGamma: &[u8; 30usize] = b"DisplayBrightnessAffectsGamma\0";
pub const kDisplayViewAngleAffectsGamma: &[u8; 29usize] = b"DisplayViewAngleAffectsGamma\0";
pub const kDisplayCSProfile: &[u8; 17usize] = b"DisplayCSProfile\0";
pub const kDisplayHorizontalImageSize: &[u8; 27usize] = b"DisplayHorizontalImageSize\0";
pub const kDisplayVerticalImageSize: &[u8; 25usize] = b"DisplayVerticalImageSize\0";
pub const kDisplayFixedPixelFormat: &[u8; 24usize] = b"DisplayFixedPixelFormat\0";
pub const kDisplaySubPixelLayout: &[u8; 22usize] = b"DisplaySubPixelLayout\0";
pub const kDisplaySubPixelConfiguration: &[u8; 29usize] = b"DisplaySubPixelConfiguration\0";
pub const kDisplaySubPixelShape: &[u8; 21usize] = b"DisplaySubPixelShape\0";
pub const kIODisplayOverrideMatchingKey: &[u8; 26usize] = b"IODisplayOverrideMatching\0";
pub const kIODisplayParametersKey: &[u8; 20usize] = b"IODisplayParameters\0";
pub const kIODisplayGUIDKey: &[u8; 14usize] = b"IODisplayGUID\0";
pub const kIODisplayValueKey: &[u8; 6usize] = b"value\0";
pub const kIODisplayMinValueKey: &[u8; 4usize] = b"min\0";
pub const kIODisplayMaxValueKey: &[u8; 4usize] = b"max\0";
pub const kIODisplayBrightnessProbeKey: &[u8; 17usize] = b"brightness-probe\0";
pub const kIODisplayLinearBrightnessProbeKey: &[u8; 24usize] = b"linear-brightness-probe\0";
pub const kIODisplayBrightnessKey: &[u8; 11usize] = b"brightness\0";
pub const kIODisplayLinearBrightnessKey: &[u8; 18usize] = b"linear-brightness\0";
pub const kIODisplayUsableLinearBrightnessKey: &[u8; 25usize] = b"usable-linear-brightness\0";
pub const kIODisplayBrightnessFadeKey: &[u8; 16usize] = b"brightness-fade\0";
pub const kIODisplayContrastKey: &[u8; 9usize] = b"contrast\0";
pub const kIODisplayHorizontalPositionKey: &[u8; 20usize] = b"horizontal-position\0";
pub const kIODisplayHorizontalSizeKey: &[u8; 16usize] = b"horizontal-size\0";
pub const kIODisplayVerticalPositionKey: &[u8; 18usize] = b"vertical-position\0";
pub const kIODisplayVerticalSizeKey: &[u8; 14usize] = b"vertical-size\0";
pub const kIODisplayTrapezoidKey: &[u8; 10usize] = b"trapezoid\0";
pub const kIODisplayPincushionKey: &[u8; 11usize] = b"pincushion\0";
pub const kIODisplayParallelogramKey: &[u8; 14usize] = b"parallelogram\0";
pub const kIODisplayRotationKey: &[u8; 9usize] = b"rotation\0";
pub const kIODisplayTheatreModeKey: &[u8; 13usize] = b"theatre-mode\0";
pub const kIODisplayTheatreModeWindowKey: &[u8; 20usize] = b"theatre-mode-window\0";
pub const kIODisplayOverscanKey: &[u8; 5usize] = b"oscn\0";
pub const kIODisplayVideoBestKey: &[u8; 5usize] = b"vbst\0";
pub const kIODisplaySpeakerVolumeKey: &[u8; 15usize] = b"speaker-volume\0";
pub const kIODisplaySpeakerSelectKey: &[u8; 15usize] = b"speaker-select\0";
pub const kIODisplayMicrophoneVolumeKey: &[u8; 18usize] = b"microphone-volume\0";
pub const kIODisplayAmbientLightSensorKey: &[u8; 21usize] = b"ambient-light-sensor\0";
pub const kIODisplayAudioMuteAndScreenBlankKey: &[u8; 28usize] = b"audio-mute-and-screen-blank\0";
pub const kIODisplayAudioTrebleKey: &[u8; 13usize] = b"audio-treble\0";
pub const kIODisplayAudioBassKey: &[u8; 11usize] = b"audio-bass\0";
pub const kIODisplayAudioBalanceLRKey: &[u8; 17usize] = b"audio-balance-LR\0";
pub const kIODisplayAudioProcessorModeKey: &[u8; 21usize] = b"audio-processor-mode\0";
pub const kIODisplayPowerModeKey: &[u8; 11usize] = b"power-mode\0";
pub const kIODisplayManufacturerSpecificKey: &[u8; 22usize] = b"manufacturer-specific\0";
pub const kIODisplayPowerStateKey: &[u8; 5usize] = b"dsyp\0";
pub const kIODisplayControllerIDKey: &[u8; 22usize] = b"IODisplayControllerID\0";
pub const kIODisplayCapabilityStringKey: &[u8; 26usize] = b"IODisplayCapabilityString\0";
pub const kIODisplayRedGammaScaleKey: &[u8; 5usize] = b"rgsc\0";
pub const kIODisplayGreenGammaScaleKey: &[u8; 5usize] = b"ggsc\0";
pub const kIODisplayBlueGammaScaleKey: &[u8; 5usize] = b"bgsc\0";
pub const kIODisplayGammaScaleKey: &[u8; 5usize] = b"gsc \0";
pub const kIODisplayParametersCommitKey: &[u8; 7usize] = b"commit\0";
pub const kIODisplayParametersDefaultKey: &[u8; 9usize] = b"defaults\0";
pub const kIODisplayParametersFlushKey: &[u8; 6usize] = b"flush\0";
pub const EVENT_SYSTEM_VERSION: u32 = 2;
pub const NX_MAXMOUSESCALINGS: u32 = 20;
pub const NX_EVS_INFO_MAX: u32 = 1024;
pub const NX_EVS_DEVICE_MAX: u32 = 16;
pub const NX_EVS_DEVICE_INTERFACE_OTHER: u32 = 0;
pub const NX_EVS_DEVICE_INTERFACE_NeXT: u32 = 1;
pub const NX_EVS_DEVICE_INTERFACE_ADB: u32 = 2;
pub const NX_EVS_DEVICE_INTERFACE_ACE: u32 = 3;
pub const NX_EVS_DEVICE_INTERFACE_SERIAL_ACE: u32 = 4;
pub const NX_EVS_DEVICE_INTERFACE_BUS_ACE: u32 = 5;
pub const NX_EVS_DEVICE_INTERFACE_HIL: u32 = 6;
pub const NX_EVS_DEVICE_INTERFACE_TYPE5: u32 = 7;
pub const NUM_SUPPORTED_INTERFACES: u32 = 8;
pub const NX_EVS_DEVICE_TYPE_OTHER: u32 = 0;
pub const NX_EVS_DEVICE_TYPE_KEYBOARD: u32 = 1;
pub const NX_EVS_DEVICE_TYPE_MOUSE: u32 = 2;
pub const NX_EVS_DEVICE_TYPE_TABLET: u32 = 3;
pub const __OLD_NX_EVS_DEVICE_INFO: u32 = 1;
pub const NX_EVS_DEVICE_INFO: &[u8; 20usize] = b"Evs_EventDeviceInfo\0";
pub const EV_SCREEN_MIN_BRIGHTNESS: u32 = 0;
pub const EV_SCREEN_MAX_BRIGHTNESS: u32 = 64;
pub const EV_TICK_TIME: u32 = 16;
pub const EV_TICKS_PER_SEC: u32 = 62;
pub const EV_RB: u32 = 1;
pub const EV_LB: u32 = 4;
pub const EV_MOUSEBUTTONMASK: u32 = 5;
pub const EV_MINPRESSURE: u32 = 0;
pub const EV_MAXPRESSURE: u32 = 255;
pub const EV_CURSOR_WIDTH: u32 = 16;
pub const EV_CURSOR_HEIGHT: u32 = 16;
pub const kAppleOnboardGUID: u64 = 436849163854938112;
pub const CURSORWIDTH: u32 = 16;
pub const CURSORHEIGHT: u32 = 16;
pub const IOFRAMEBUFFER_CONFORMSTO: &[u8; 14usize] = b"IOFramebuffer\0";
pub const _NXSIZE_: u32 = 1;
pub const NX_NULLEVENT: u32 = 0;
pub const NX_LMOUSEDOWN: u32 = 1;
pub const NX_LMOUSEUP: u32 = 2;
pub const NX_RMOUSEDOWN: u32 = 3;
pub const NX_RMOUSEUP: u32 = 4;
pub const NX_MOUSEMOVED: u32 = 5;
pub const NX_LMOUSEDRAGGED: u32 = 6;
pub const NX_RMOUSEDRAGGED: u32 = 7;
pub const NX_MOUSEENTERED: u32 = 8;
pub const NX_MOUSEEXITED: u32 = 9;
pub const NX_OMOUSEDOWN: u32 = 25;
pub const NX_OMOUSEUP: u32 = 26;
pub const NX_OMOUSEDRAGGED: u32 = 27;
pub const NX_KEYDOWN: u32 = 10;
pub const NX_KEYUP: u32 = 11;
pub const NX_FLAGSCHANGED: u32 = 12;
pub const NX_KITDEFINED: u32 = 13;
pub const NX_SYSDEFINED: u32 = 14;
pub const NX_APPDEFINED: u32 = 15;
pub const NX_SCROLLWHEELMOVED: u32 = 22;
pub const NX_ZOOM: u32 = 28;
pub const NX_TABLETPOINTER: u32 = 23;
pub const NX_TABLETPROXIMITY: u32 = 24;
pub const NX_FIRSTEVENT: u32 = 0;
pub const NX_LASTEVENT: u32 = 28;
pub const NX_NUMPROCS: u32 = 29;
pub const NX_NULLEVENTMASK: u32 = 1;
pub const NX_LMOUSEDOWNMASK: u32 = 2;
pub const NX_LMOUSEUPMASK: u32 = 4;
pub const NX_RMOUSEDOWNMASK: u32 = 8;
pub const NX_RMOUSEUPMASK: u32 = 16;
pub const NX_OMOUSEDOWNMASK: u32 = 33554432;
pub const NX_OMOUSEUPMASK: u32 = 67108864;
pub const NX_MOUSEMOVEDMASK: u32 = 32;
pub const NX_LMOUSEDRAGGEDMASK: u32 = 64;
pub const NX_RMOUSEDRAGGEDMASK: u32 = 128;
pub const NX_OMOUSEDRAGGEDMASK: u32 = 134217728;
pub const NX_MOUSEENTEREDMASK: u32 = 256;
pub const NX_MOUSEEXITEDMASK: u32 = 512;
pub const NX_KEYDOWNMASK: u32 = 1024;
pub const NX_KEYUPMASK: u32 = 2048;
pub const NX_FLAGSCHANGEDMASK: u32 = 4096;
pub const NX_KITDEFINEDMASK: u32 = 8192;
pub const NX_SYSDEFINEDMASK: u32 = 16384;
pub const NX_APPDEFINEDMASK: u32 = 32768;
pub const NX_SCROLLWHEELMOVEDMASK: u32 = 4194304;
pub const NX_ZOOMMASK: u32 = 268435456;
pub const NX_TABLETPOINTERMASK: u32 = 8388608;
pub const NX_TABLETPROXIMITYMASK: u32 = 16777216;
pub const NX_ALLEVENTS: i32 = -1;
pub const NX_SUBTYPE_DEFAULT: u32 = 0;
pub const NX_SUBTYPE_TABLET_POINT: u32 = 1;
pub const NX_SUBTYPE_TABLET_PROXIMITY: u32 = 2;
pub const NX_SUBTYPE_MOUSE_TOUCH: u32 = 3;
pub const NX_SUBTYPE_POWER_KEY: u32 = 1;
pub const NX_SUBTYPE_AUX_MOUSE_BUTTONS: u32 = 7;
pub const NX_SUBTYPE_AUX_CONTROL_BUTTONS: u32 = 8;
pub const NX_SUBTYPE_EJECT_KEY: u32 = 10;
pub const NX_SUBTYPE_SLEEP_EVENT: u32 = 11;
pub const NX_SUBTYPE_RESTART_EVENT: u32 = 12;
pub const NX_SUBTYPE_SHUTDOWN_EVENT: u32 = 13;
pub const NX_SUBTYPE_MENU: u32 = 16;
pub const NX_SUBTYPE_ACCESSIBILITY: u32 = 17;
pub const NX_SUBTYPE_STICKYKEYS_ON: u32 = 100;
pub const NX_SUBTYPE_STICKYKEYS_OFF: u32 = 101;
pub const NX_SUBTYPE_STICKYKEYS_SHIFT: u32 = 102;
pub const NX_SUBTYPE_STICKYKEYS_CONTROL: u32 = 103;
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE: u32 = 104;
pub const NX_SUBTYPE_STICKYKEYS_COMMAND: u32 = 105;
pub const NX_SUBTYPE_STICKYKEYS_RELEASE: u32 = 106;
pub const NX_SUBTYPE_STICKYKEYS_TOGGLEMOUSEDRIVING: u32 = 107;
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_DOWN: u32 = 110;
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_DOWN: u32 = 111;
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_DOWN: u32 = 112;
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_DOWN: u32 = 113;
pub const NX_SUBTYPE_STICKYKEYS_FN_DOWN: u32 = 114;
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_LOCK: u32 = 120;
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_LOCK: u32 = 121;
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_LOCK: u32 = 122;
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_LOCK: u32 = 123;
pub const NX_SUBTYPE_STICKYKEYS_FN_LOCK: u32 = 124;
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_UP: u32 = 130;
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_UP: u32 = 131;
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_UP: u32 = 132;
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_UP: u32 = 133;
pub const NX_SUBTYPE_STICKYKEYS_FN_UP: u32 = 134;
pub const NX_SUBTYPE_SLOWKEYS_START: u32 = 200;
pub const NX_SUBTYPE_SLOWKEYS_ABORT: u32 = 201;
pub const NX_SUBTYPE_SLOWKEYS_END: u32 = 202;
pub const NX_SUBTYPE_HIDPARAMETER_MODIFIED: u32 = 210;
pub const NX_ALPHASHIFTMASK: u32 = 65536;
pub const NX_SHIFTMASK: u32 = 131072;
pub const NX_CONTROLMASK: u32 = 262144;
pub const NX_ALTERNATEMASK: u32 = 524288;
pub const NX_COMMANDMASK: u32 = 1048576;
pub const NX_NUMERICPADMASK: u32 = 2097152;
pub const NX_HELPMASK: u32 = 4194304;
pub const NX_SECONDARYFNMASK: u32 = 8388608;
pub const NX_ALPHASHIFT_STATELESS_MASK: u32 = 16777216;
pub const NX_DEVICELCTLKEYMASK: u32 = 1;
pub const NX_DEVICELSHIFTKEYMASK: u32 = 2;
pub const NX_DEVICERSHIFTKEYMASK: u32 = 4;
pub const NX_DEVICELCMDKEYMASK: u32 = 8;
pub const NX_DEVICERCMDKEYMASK: u32 = 16;
pub const NX_DEVICELALTKEYMASK: u32 = 32;
pub const NX_DEVICERALTKEYMASK: u32 = 64;
pub const NX_DEVICE_ALPHASHIFT_STATELESS_MASK: u32 = 128;
pub const NX_DEVICERCTLKEYMASK: u32 = 8192;
pub const NX_STYLUSPROXIMITYMASK: u32 = 128;
pub const NX_NONCOALSESCEDMASK: u32 = 256;
pub const NX_ASCIISET: u32 = 0;
pub const NX_SYMBOLSET: u32 = 1;
pub const NX_DINGBATSSET: u32 = 2;
pub const NX_TABLET_BUTTON_PENTIPMASK: u32 = 1;
pub const NX_TABLET_BUTTON_PENLOWERSIDEMASK: u32 = 2;
pub const NX_TABLET_BUTTON_PENUPPERSIDEMASK: u32 = 4;
pub const NX_TABLET_CAPABILITY_DEVICEIDMASK: u32 = 1;
pub const NX_TABLET_CAPABILITY_ABSXMASK: u32 = 2;
pub const NX_TABLET_CAPABILITY_ABSYMASK: u32 = 4;
pub const NX_TABLET_CAPABILITY_VENDOR1MASK: u32 = 8;
pub const NX_TABLET_CAPABILITY_VENDOR2MASK: u32 = 16;
pub const NX_TABLET_CAPABILITY_VENDOR3MASK: u32 = 32;
pub const NX_TABLET_CAPABILITY_BUTTONSMASK: u32 = 64;
pub const NX_TABLET_CAPABILITY_TILTXMASK: u32 = 128;
pub const NX_TABLET_CAPABILITY_TILTYMASK: u32 = 256;
pub const NX_TABLET_CAPABILITY_ABSZMASK: u32 = 512;
pub const NX_TABLET_CAPABILITY_PRESSUREMASK: u32 = 1024;
pub const NX_TABLET_CAPABILITY_TANGENTIALPRESSUREMASK: u32 = 2048;
pub const NX_TABLET_CAPABILITY_ORIENTINFOMASK: u32 = 4096;
pub const NX_TABLET_CAPABILITY_ROTATIONMASK: u32 = 8192;
pub const NX_TABLET_POINTER_UNKNOWN: u32 = 0;
pub const NX_TABLET_POINTER_PEN: u32 = 1;
pub const NX_TABLET_POINTER_CURSOR: u32 = 2;
pub const NX_TABLET_POINTER_ERASER: u32 = 3;
pub const kNXEventDataVersion: u32 = 2;
pub const kNXEventVersion: u32 = 2;
pub const NX_NOWINDOW: i32 = -1;
pub const NX_BYTYPE: u32 = 0;
pub const NX_BROADCAST: u32 = 1;
pub const NX_TOPWINDOW: u32 = 2;
pub const NX_FIRSTWINDOW: u32 = 3;
pub const NX_MOUSEWINDOW: u32 = 4;
pub const NX_NEXTWINDOW: u32 = 5;
pub const NX_LASTLEFT: u32 = 6;
pub const NX_LASTRIGHT: u32 = 7;
pub const NX_LASTKEY: u32 = 8;
pub const NX_EXPLICIT: u32 = 9;
pub const NX_TRANSMIT: u32 = 10;
pub const NX_BYPSCONTEXT: u32 = 11;
pub const NX_WAKEMASK: u32 = 100668446;
pub const NX_UNDIMMASK: u32 = 264249342;
pub const NX_EVENT_EXTENSION_LOCATION_INVALID: u32 = 1;
pub const NX_EVENT_EXTENSION_LOCATION_TYPE_FLOAT: u32 = 2;
pub const NX_EVENT_EXTENSION_LOCATION_DEVICE_SCALED: u32 = 4;
pub const NX_EVENT_EXTENSION_MOUSE_DELTA_TYPE_FLOAT: u32 = 8;
pub const NX_EVENT_EXTENSION_AUDIT_TOKEN: u32 = 16;
pub const kIOHIDPointerAccelerationKey: &[u8; 23usize] = b"HIDPointerAcceleration\0";
pub const kIOHIDPointerAccelerationTypeKey: &[u8; 27usize] = b"HIDPointerAccelerationType\0";
pub const kIOHIDMouseScrollAccelerationKey: &[u8; 27usize] = b"HIDMouseScrollAcceleration\0";
pub const kIOHIDMouseAccelerationTypeKey: &[u8; 21usize] = b"HIDMouseAcceleration\0";
pub const kIOHIDScrollAccelerationKey: &[u8; 22usize] = b"HIDScrollAcceleration\0";
pub const kIOHIDScrollAccelerationTypeKey: &[u8; 26usize] = b"HIDScrollAccelerationType\0";
pub const kIOHIDDigitizerTipThresholdKey: &[u8; 22usize] = b"DigitizerTipThreshold\0";
pub const kIOHIDSurfaceDimensionsKey: &[u8; 18usize] = b"SurfaceDimensions\0";
pub const kIOHIDWidthKey: &[u8; 6usize] = b"Width\0";
pub const kIOHIDHeightKey: &[u8; 7usize] = b"Height\0";
pub const kIOHIDEventDriverHandlesReport: &[u8; 30usize] = b"IOHIDEventDriverHandlesReport\0";
pub const kIOHIDMouseAccelerationType: &[u8; 21usize] = b"HIDMouseAcceleration\0";
pub const kIOHIDPointerButtonMode: &[u8; 21usize] = b"HIDPointerButtonMode\0";
pub const kIOHIDPointerButtonModeKey: &[u8; 21usize] = b"HIDPointerButtonMode\0";
pub const kIOHIDUserKeyUsageMapKey: &[u8; 15usize] = b"UserKeyMapping\0";
pub const kIOHIDKeyboardCapsLockDelayOverride: &[u8; 22usize] = b"CapsLockDelayOverride\0";
pub const kIOHIDKeyboardCapsLockDelayOverrideKey: &[u8; 22usize] = b"CapsLockDelayOverride\0";
pub const kIOHIDServiceEjectDelayKey: &[u8; 11usize] = b"EjectDelay\0";
pub const kIOHIDServiceLockKeyDelayKey: &[u8; 13usize] = b"LockKeyDelay\0";
pub const kIOHIDServiceInitialKeyRepeatDelayKey: &[u8; 20usize] = b"HIDInitialKeyRepeat\0";
pub const kIOHIDServiceKeyRepeatDelayKey: &[u8; 13usize] = b"HIDKeyRepeat\0";
pub const kIOHIDIdleTimeMicrosecondsKey: &[u8; 24usize] = b"HIDIdleTimeMicroseconds\0";
pub const kIOHIDServiceCapsLockStateKey: &[u8; 17usize] = b"HIDCapsLockState\0";
pub const _NeXT_MACH_EVENT_DRIVER_: u32 = 1;
pub const kIOHIDKindKey: &[u8; 8usize] = b"HIDKind\0";
pub const kIOHIDInterfaceIDKey: &[u8; 15usize] = b"HIDInterfaceID\0";
pub const kIOHIDSubinterfaceIDKey: &[u8; 18usize] = b"HIDSubinterfaceID\0";
pub const kIOHIDOriginalSubinterfaceIDKey: &[u8; 26usize] = b"HIDOriginalSubinterfaceID\0";
pub const kIOHIDParametersKey: &[u8; 14usize] = b"HIDParameters\0";
pub const kIOHIDVirtualHIDevice: &[u8; 17usize] = b"HIDVirtualDevice\0";
pub const kIOHIDKeyRepeatKey: &[u8; 13usize] = b"HIDKeyRepeat\0";
pub const kIOHIDInitialKeyRepeatKey: &[u8; 20usize] = b"HIDInitialKeyRepeat\0";
pub const kIOHIDKeyMappingKey: &[u8; 14usize] = b"HIDKeyMapping\0";
pub const kIOHIDResetKeyboardKey: &[u8; 17usize] = b"HIDResetKeyboard\0";
pub const kIOHIDKeyboardModifierMappingPairsKey: &[u8; 32usize] =
    b"HIDKeyboardModifierMappingPairs\0";
pub const kIOHIDKeyboardModifierMappingSrcKey: &[u8; 30usize] = b"HIDKeyboardModifierMappingSrc\0";
pub const kIOHIDKeyboardModifierMappingDstKey: &[u8; 30usize] = b"HIDKeyboardModifierMappingDst\0";
pub const kIOHIDKeyboardCapsLockDoesLockKey: &[u8; 28usize] = b"HIDKeyboardCapsLockDoesLock\0";
pub const kIOHIDKeyboardSupportsF12EjectKey: &[u8; 28usize] = b"HIDKeyboardSupportsF12Eject\0";
pub const kIOHIDKeyboardSupportedModifiersKey: &[u8; 30usize] = b"HIDKeyboardSupportedModifiers\0";
pub const kIOHIDKeyboardGlobalModifiersKey: &[u8; 27usize] = b"HIDKeyboardGlobalModifiers\0";
pub const kIOHIDServiceGlobalModifiersUsageKey: &[u8; 31usize] =
    b"HIDServiceGlobalModifiersUsage\0";
pub const kIOHIDPointerResolutionKey: &[u8; 21usize] = b"HIDPointerResolution\0";
pub const kIOHIDResetPointerKey: &[u8; 16usize] = b"HIDResetPointer\0";
pub const kIOHIDPointerConvertAbsoluteKey: &[u8; 26usize] = b"HIDPointerConvertAbsolute\0";
pub const kIOHIDPointerContactToMoveKey: &[u8; 24usize] = b"HIDPointerContactToMove\0";
pub const kIOHIDPointerPressureToClickKey: &[u8; 26usize] = b"HIDPointerPressureToClick\0";
pub const kIOHIDPointerButtonCountKey: &[u8; 22usize] = b"HIDPointerButtonCount\0";
pub const kIOHIDPointerAccelerationSettingsKey: &[u8; 31usize] =
    b"HIDPointerAccelerationSettings\0";
pub const kIOHIDPointerAccelerationTableKey: &[u8; 28usize] = b"HIDPointerAccelerationTable\0";
pub const kIOHIDPointerAccelerationMultiplierKey: &[u8; 33usize] =
    b"HIDPointerAccelerationMultiplier\0";
pub const kIOHIDScrollResetKey: &[u8; 15usize] = b"HIDScrollReset\0";
pub const kIOHIDScrollResolutionKey: &[u8; 20usize] = b"HIDScrollResolution\0";
pub const kIOHIDScrollReportRateKey: &[u8; 20usize] = b"HIDScrollReportRate\0";
pub const kIOHIDScrollAccelerationTableKey: &[u8; 27usize] = b"HIDScrollAccelerationTable\0";
pub const kIOHIDScrollResolutionXKey: &[u8; 21usize] = b"HIDScrollResolutionX\0";
pub const kIOHIDScrollResolutionYKey: &[u8; 21usize] = b"HIDScrollResolutionY\0";
pub const kIOHIDScrollResolutionZKey: &[u8; 21usize] = b"HIDScrollResolutionZ\0";
pub const kIOHIDScrollAccelerationTableXKey: &[u8; 28usize] = b"HIDScrollAccelerationTableX\0";
pub const kIOHIDScrollAccelerationTableYKey: &[u8; 28usize] = b"HIDScrollAccelerationTableY\0";
pub const kIOHIDScrollAccelerationTableZKey: &[u8; 28usize] = b"HIDScrollAccelerationTableZ\0";
pub const kIOHIDScrollMouseButtonKey: &[u8; 21usize] = b"HIDScrollMouseButton\0";
pub const kIOHIDScrollZoomModifierMaskKey: &[u8; 26usize] = b"HIDScrollZoomModifierMask\0";
pub const kIOHIDTrackpadScrollAccelerationKey: &[u8; 30usize] = b"HIDTrackpadScrollAcceleration\0";
pub const kIOHIDTrackpadAccelerationType: &[u8; 24usize] = b"HIDTrackpadAcceleration\0";
pub const kIOHIDClickTimeKey: &[u8; 13usize] = b"HIDClickTime\0";
pub const kIOHIDClickSpaceKey: &[u8; 14usize] = b"HIDClickSpace\0";
pub const kIOHIDWaitCursorFrameIntervalKey: &[u8; 27usize] = b"HIDWaitCursorFrameInterval\0";
pub const kIOHIDAutoDimThresholdKey: &[u8; 20usize] = b"HIDAutoDimThreshold\0";
pub const kIOHIDAutoDimStateKey: &[u8; 16usize] = b"HIDAutoDimState\0";
pub const kIOHIDAutoDimTimeKey: &[u8; 15usize] = b"HIDAutoDimTime\0";
pub const kIOHIDIdleTimeKey: &[u8; 12usize] = b"HIDIdleTime\0";
pub const kIOHIDBrightnessKey: &[u8; 14usize] = b"HIDBrightness\0";
pub const kIOHIDAutoDimBrightnessKey: &[u8; 21usize] = b"HIDAutoDimBrightness\0";
pub const kIOHIDFKeyModeKey: &[u8; 12usize] = b"HIDFKeyMode\0";
pub const kIOHIDStickyKeysDisabledKey: &[u8; 22usize] = b"HIDStickyKeysDisabled\0";
pub const kIOHIDStickyKeysOnKey: &[u8; 16usize] = b"HIDStickyKeysOn\0";
pub const kIOHIDStickyKeysShiftTogglesKey: &[u8; 26usize] = b"HIDStickyKeysShiftToggles\0";
pub const kIOHIDResetStickyKeyNotification: &[u8; 30usize] = b"HIDResetStickyKeyNotification\0";
pub const kIOHIDMouseKeysOptionTogglesKey: &[u8; 26usize] = b"HIDMouseKeysOptionToggles\0";
pub const kIOHIDSlowKeysDelayKey: &[u8; 17usize] = b"HIDSlowKeysDelay\0";
pub const kIOHIDF12EjectDelayKey: &[u8; 17usize] = b"HIDF12EjectDelay\0";
pub const kIOHIDMouseKeysOnKey: &[u8; 15usize] = b"HIDMouseKeysOn\0";
pub const kIOHIDUseKeyswitchKey: &[u8; 16usize] = b"HIDUseKeyswitch\0";
pub const kIOHIDDisallowRemappingOfPrimaryClickKey: &[u8; 35usize] =
    b"HIDDisallowRemappingOfPrimaryClick\0";
pub const kIOHIDMouseKeysEnablesVirtualNumPadKey: &[u8; 33usize] =
    b"HIDMouseKeysEnablesVirtualNumPad\0";
pub const kIOHIDResetLEDsKey: &[u8; 13usize] = b"HIDResetLEDs\0";
pub const kHIDAccelParametricCurvesKey: &[u8; 15usize] = b"HIDAccelCurves\0";
pub const kHIDPointerReportRateKey: &[u8; 21usize] = b"HIDPointerReportRate\0";
pub const kHIDTrackingAccelParametricCurvesKey: &[u8; 23usize] = b"HIDTrackingAccelCurves\0";
pub const kHIDScrollAccelParametricCurvesKey: &[u8; 21usize] = b"HIDScrollAccelCurves\0";
pub const kHIDAccelParametricCurvesDebugKey: &[u8; 20usize] = b"HIDAccelCurvesDebug\0";
pub const kHIDScrollAccelParametricCurvesDebugKey: &[u8; 26usize] = b"HIDScrollAccelCurvesDebug\0";
pub const kHIDAccelGainLinearKey: &[u8; 19usize] = b"HIDAccelGainLinear\0";
pub const kHIDAccelGainParabolicKey: &[u8; 22usize] = b"HIDAccelGainParabolic\0";
pub const kHIDAccelGainCubicKey: &[u8; 18usize] = b"HIDAccelGainCubic\0";
pub const kHIDAccelGainQuarticKey: &[u8; 20usize] = b"HIDAccelGainQuartic\0";
pub const kHIDAccelTangentSpeedLinearKey: &[u8; 27usize] = b"HIDAccelTangentSpeedLinear\0";
pub const kHIDAccelTangentSpeedParabolicRootKey: &[u8; 34usize] =
    b"HIDAccelTangentSpeedParabolicRoot\0";
pub const kHIDAccelTangentSpeedCubicRootKey: &[u8; 30usize] = b"HIDAccelTangentSpeedCubicRoot\0";
pub const kHIDAccelTangentSpeedQuarticRootKey: &[u8; 32usize] =
    b"HIDAccelTangentSpeedQuarticRoot\0";
pub const kHIDAccelIndexKey: &[u8; 14usize] = b"HIDAccelIndex\0";
pub const kIOHIDScrollCountMaxTimeDeltaBetweenKey: &[u8; 34usize] =
    b"HIDScrollCountMaxTimeDeltaBetween\0";
pub const kIOHIDScrollCountMaxTimeDeltaToSustainKey: &[u8; 36usize] =
    b"HIDScrollCountMaxTimeDeltaToSustain\0";
pub const kIOHIDScrollCountMinDeltaToStartKey: &[u8; 30usize] = b"HIDScrollCountMinDeltaToStart\0";
pub const kIOHIDScrollCountMinDeltaToSustainKey: &[u8; 32usize] =
    b"HIDScrollCountMinDeltaToSustain\0";
pub const kIOHIDScrollCountIgnoreMomentumScrollsKey: &[u8; 36usize] =
    b"HIDScrollCountIgnoreMomentumScrolls\0";
pub const kIOHIDScrollCountMouseCanResetKey: &[u8; 28usize] = b"HIDScrollCountMouseCanReset\0";
pub const kIOHIDScrollCountMaxKey: &[u8; 18usize] = b"HIDScrollCountMax\0";
pub const kIOHIDScrollCountAccelerationFactorKey: &[u8; 33usize] =
    b"HIDScrollCountAccelerationFactor\0";
pub const kIOHIDScrollCountZeroKey: &[u8; 19usize] = b"HIDScrollCountZero\0";
pub const kIOHIDScrollCountBootDefaultKey: &[u8; 26usize] = b"HIDScrollCountBootDefault\0";
pub const kIOHIDScrollCountResetKey: &[u8; 20usize] = b"HIDScrollCountReset\0";
pub const kIOHIDActivityUserIdleKey: &[u8; 22usize] = b"IOHIDActivityUserIdle\0";
pub const EVSIOSB: &[u8; 14usize] = b"HIDBrightness\0";
pub const EVSIOSB_SIZE: u32 = 1;
pub const EVSIOSADB: &[u8; 21usize] = b"HIDAutoDimBrightness\0";
pub const EVSIOSADB_SIZE: u32 = 1;
pub const EVSIOINFO: &[u8; 20usize] = b"Evs_EventDeviceInfo\0";
pub const EVSIOSKR: &[u8; 13usize] = b"HIDKeyRepeat\0";
pub const EVSIOSIKR: &[u8; 20usize] = b"HIDInitialKeyRepeat\0";
pub const EVSIORKBD: &[u8; 17usize] = b"HIDResetKeyboard\0";
pub const EVSIORKBD_SIZE: u32 = 1;
pub const EVSIOCKML: &[u8; 14usize] = b"HIDKeyMapping\0";
pub const EVSIOCKML_SIZE: u32 = 1;
pub const EVSIOSKM: &[u8; 14usize] = b"HIDKeyMapping\0";
pub const EVSIOSKM_SIZE: u32 = 4096;
pub const EVSIOCKM: &[u8; 14usize] = b"HIDKeyMapping\0";
pub const EVSIOCKM_SIZE: u32 = 4096;
pub const EVSIOSMS: &[u8; 23usize] = b"HIDPointerAcceleration\0";
pub const EVSIOSMS_SIZE: u32 = 1;
pub const EVSIOCMS: &[u8; 23usize] = b"HIDPointerAcceleration\0";
pub const EVSIOCMS_SIZE: u32 = 1;
pub const EVSIOSCT: &[u8; 13usize] = b"HIDClickTime\0";
pub const EVSIOSCS: &[u8; 14usize] = b"HIDClickSpace\0";
pub const EVSIOSADT: &[u8; 20usize] = b"HIDAutoDimThreshold\0";
pub const EVSIOSADS: &[u8; 16usize] = b"HIDAutoDimState\0";
pub const EVSIOSADS_SIZE: u32 = 1;
pub const EVSIORMS: &[u8; 16usize] = b"HIDResetPointer\0";
pub const EVSIORMS_SIZE: u32 = 1;
pub const EVSIOCCT: &[u8; 13usize] = b"HIDClickTime\0";
pub const EVSIOCADT: &[u8; 20usize] = b"HIDAutoDimThreshold\0";
pub const EVSIOGDADT: &[u8; 15usize] = b"HIDAutoDimTime\0";
pub const EVSIOIDLE: &[u8; 12usize] = b"HIDIdleTime\0";
pub const EVSIOCCS: &[u8; 14usize] = b"HIDClickSpace\0";
pub const EVSIOCADS: &[u8; 16usize] = b"HIDAutoDimState\0";
pub const EVSIOCADS_SIZE: u32 = 1;
pub const kIOHIDDeviceDefaultAsyncRequestTimeout: u32 = 1000;
pub const kIOHIDDeviceMinAsyncRequestTimeout: u32 = 50;
pub const kIOHIDDeviceMaxAsyncRequestTimeout: u32 = 1200000;
pub const kIOHIDTransportKey: &[u8; 10usize] = b"Transport\0";
pub const kIOHIDVendorIDKey: &[u8; 9usize] = b"VendorID\0";
pub const kIOHIDProductIDKey: &[u8; 10usize] = b"ProductID\0";
pub const kIOHIDVersionNumberKey: &[u8; 14usize] = b"VersionNumber\0";
pub const kIOHIDManufacturerKey: &[u8; 13usize] = b"Manufacturer\0";
pub const kIOHIDProductKey: &[u8; 8usize] = b"Product\0";
pub const kIOHIDSerialNumberKey: &[u8; 13usize] = b"SerialNumber\0";
pub const kIOHIDCountryCodeKey: &[u8; 12usize] = b"CountryCode\0";
pub const kIOHIDLocationIDKey: &[u8; 11usize] = b"LocationID\0";
pub const kIOHIDDeviceUsagePairsKey: &[u8; 17usize] = b"DeviceUsagePairs\0";
pub const kIOHIDDeviceUsageKey: &[u8; 12usize] = b"DeviceUsage\0";
pub const kIOHIDDeviceUsagePageKey: &[u8; 16usize] = b"DeviceUsagePage\0";
pub const kIOHIDPrimaryUsageKey: &[u8; 13usize] = b"PrimaryUsage\0";
pub const kIOHIDPrimaryUsagePageKey: &[u8; 17usize] = b"PrimaryUsagePage\0";
pub const kIOHIDMaxInputReportSizeKey: &[u8; 19usize] = b"MaxInputReportSize\0";
pub const kIOHIDMaxOutputReportSizeKey: &[u8; 20usize] = b"MaxOutputReportSize\0";
pub const kIOHIDMaxFeatureReportSizeKey: &[u8; 21usize] = b"MaxFeatureReportSize\0";
pub const kIOHIDReportIntervalKey: &[u8; 15usize] = b"ReportInterval\0";
pub const kIOHIDBatchIntervalKey: &[u8; 14usize] = b"BatchInterval\0";
pub const kIOHIDRequestTimeoutKey: &[u8; 15usize] = b"RequestTimeout\0";
pub const kIOHIDReportDescriptorKey: &[u8; 17usize] = b"ReportDescriptor\0";
pub const kIOHIDBuiltInKey: &[u8; 9usize] = b"Built-In\0";
pub const kIOHIDPhysicalDeviceUniqueIDKey: &[u8; 23usize] = b"PhysicalDeviceUniqueID\0";
pub const kIOHIDDeviceKey: &[u8; 12usize] = b"IOHIDDevice\0";
pub const kIOHIDVendorIDSourceKey: &[u8; 15usize] = b"VendorIDSource\0";
pub const kIOHIDStandardTypeKey: &[u8; 13usize] = b"StandardType\0";
pub const kIOHIDSampleIntervalKey: &[u8; 15usize] = b"SampleInterval\0";
pub const kIOHIDResetKey: &[u8; 6usize] = b"Reset\0";
pub const kIOHIDKeyboardLanguageKey: &[u8; 17usize] = b"KeyboardLanguage\0";
pub const kIOHIDAltHandlerIdKey: &[u8; 15usize] = b"alt_handler_id\0";
pub const kIOHIDDisplayIntegratedKey: &[u8; 18usize] = b"DisplayIntegrated\0";
pub const kIOHIDProductIDMaskKey: &[u8; 14usize] = b"ProductIDMask\0";
pub const kIOHIDProductIDArrayKey: &[u8; 15usize] = b"ProductIDArray\0";
pub const kIOHIDPowerOnDelayNSKey: &[u8; 18usize] = b"HIDPowerOnDelayNS\0";
pub const kIOHIDCategoryKey: &[u8; 9usize] = b"Category\0";
pub const kIOHIDMaxResponseLatencyKey: &[u8; 19usize] = b"MaxResponseLatency\0";
pub const kIOHIDUniqueIDKey: &[u8; 9usize] = b"UniqueID\0";
pub const kIOHIDModelNumberKey: &[u8; 12usize] = b"ModelNumber\0";
pub const kIOHIDTransportUSBValue: &[u8; 4usize] = b"USB\0";
pub const kIOHIDTransportBluetoothValue: &[u8; 10usize] = b"Bluetooth\0";
pub const kIOHIDTransportBluetoothLowEnergyValue: &[u8; 19usize] = b"BluetoothLowEnergy\0";
pub const kIOHIDTransportAIDBValue: &[u8; 4usize] = b"AID\0";
pub const kIOHIDTransportI2CValue: &[u8; 4usize] = b"I2C\0";
pub const kIOHIDTransportSPIValue: &[u8; 4usize] = b"SPI\0";
pub const kIOHIDTransportSerialValue: &[u8; 7usize] = b"Serial\0";
pub const kIOHIDTransportIAPValue: &[u8; 4usize] = b"iAP\0";
pub const kIOHIDTransportAirPlayValue: &[u8; 8usize] = b"AirPlay\0";
pub const kIOHIDTransportSPUValue: &[u8; 4usize] = b"SPU\0";
pub const kIOHIDTransportBTAACPValue: &[u8; 8usize] = b"BT-AACP\0";
pub const kIOHIDCategoryAutomotiveValue: &[u8; 11usize] = b"Automotive\0";
pub const kIOHIDElementKey: &[u8; 9usize] = b"Elements\0";
pub const kIOHIDElementCookieKey: &[u8; 14usize] = b"ElementCookie\0";
pub const kIOHIDElementTypeKey: &[u8; 5usize] = b"Type\0";
pub const kIOHIDElementCollectionTypeKey: &[u8; 15usize] = b"CollectionType\0";
pub const kIOHIDElementUsageKey: &[u8; 6usize] = b"Usage\0";
pub const kIOHIDElementUsagePageKey: &[u8; 10usize] = b"UsagePage\0";
pub const kIOHIDElementMinKey: &[u8; 4usize] = b"Min\0";
pub const kIOHIDElementMaxKey: &[u8; 4usize] = b"Max\0";
pub const kIOHIDElementScaledMinKey: &[u8; 10usize] = b"ScaledMin\0";
pub const kIOHIDElementScaledMaxKey: &[u8; 10usize] = b"ScaledMax\0";
pub const kIOHIDElementSizeKey: &[u8; 5usize] = b"Size\0";
pub const kIOHIDElementReportSizeKey: &[u8; 11usize] = b"ReportSize\0";
pub const kIOHIDElementReportCountKey: &[u8; 12usize] = b"ReportCount\0";
pub const kIOHIDElementReportIDKey: &[u8; 9usize] = b"ReportID\0";
pub const kIOHIDElementIsArrayKey: &[u8; 8usize] = b"IsArray\0";
pub const kIOHIDElementIsRelativeKey: &[u8; 11usize] = b"IsRelative\0";
pub const kIOHIDElementIsWrappingKey: &[u8; 11usize] = b"IsWrapping\0";
pub const kIOHIDElementIsNonLinearKey: &[u8; 12usize] = b"IsNonLinear\0";
pub const kIOHIDElementHasPreferredStateKey: &[u8; 18usize] = b"HasPreferredState\0";
pub const kIOHIDElementHasNullStateKey: &[u8; 13usize] = b"HasNullState\0";
pub const kIOHIDElementFlagsKey: &[u8; 6usize] = b"Flags\0";
pub const kIOHIDElementUnitKey: &[u8; 5usize] = b"Unit\0";
pub const kIOHIDElementUnitExponentKey: &[u8; 13usize] = b"UnitExponent\0";
pub const kIOHIDElementNameKey: &[u8; 5usize] = b"Name\0";
pub const kIOHIDElementValueLocationKey: &[u8; 14usize] = b"ValueLocation\0";
pub const kIOHIDElementDuplicateIndexKey: &[u8; 15usize] = b"DuplicateIndex\0";
pub const kIOHIDElementParentCollectionKey: &[u8; 17usize] = b"ParentCollection\0";
pub const kIOHIDElementVariableSizeKey: &[u8; 13usize] = b"VariableSize\0";
pub const kIOHIDElementVendorSpecificKey: &[u8; 15usize] = b"VendorSpecific\0";
pub const kIOHIDElementCookieMinKey: &[u8; 17usize] = b"ElementCookieMin\0";
pub const kIOHIDElementCookieMaxKey: &[u8; 17usize] = b"ElementCookieMax\0";
pub const kIOHIDElementUsageMinKey: &[u8; 9usize] = b"UsageMin\0";
pub const kIOHIDElementUsageMaxKey: &[u8; 9usize] = b"UsageMax\0";
pub const kIOHIDElementCalibrationMinKey: &[u8; 15usize] = b"CalibrationMin\0";
pub const kIOHIDElementCalibrationMaxKey: &[u8; 15usize] = b"CalibrationMax\0";
pub const kIOHIDElementCalibrationSaturationMinKey: &[u8; 25usize] = b"CalibrationSaturationMin\0";
pub const kIOHIDElementCalibrationSaturationMaxKey: &[u8; 25usize] = b"CalibrationSaturationMax\0";
pub const kIOHIDElementCalibrationDeadZoneMinKey: &[u8; 23usize] = b"CalibrationDeadZoneMin\0";
pub const kIOHIDElementCalibrationDeadZoneMaxKey: &[u8; 23usize] = b"CalibrationDeadZoneMax\0";
pub const kIOHIDElementCalibrationGranularityKey: &[u8; 23usize] = b"CalibrationGranularity\0";
pub const kIOHIDKeyboardSupportsEscKey: &[u8; 26usize] = b"HIDKeyboardSupportsEscKey\0";
pub const kIOHIDDigitizerGestureCharacterStateKey: &[u8; 31usize] =
    b"DigitizerCharacterGestureState\0";
pub const kIOHIDKeyboardCapsLockDelay: &[u8; 14usize] = b"CapsLockDelay\0";
pub const kIOHIDKeyboardEjectDelay: &[u8; 11usize] = b"EjectDelay\0";
pub const kFnFunctionUsageMapKey: &[u8; 19usize] = b"FnFunctionUsageMap\0";
pub const kFnKeyboardUsageMapKey: &[u8; 19usize] = b"FnKeyboardUsageMap\0";
pub const kNumLockKeyboardUsageMapKey: &[u8; 24usize] = b"NumLockKeyboardUsageMap\0";
pub const kKeyboardUsageMapKey: &[u8; 17usize] = b"KeyboardUsageMap\0";
pub const kIOHIDDeviceOpenedByEventSystemKey: &[u8; 26usize] = b"DeviceOpenedByEventSystem\0";
pub const kIOHIDDeviceSuspendKey: &[u8; 19usize] = b"IOHIDDeviceSuspend\0";
pub const kIOHIDMaxReportBufferCountKey: &[u8; 21usize] = b"MaxReportBufferCount\0";
pub const kIOHIDReportBufferEntrySizeKey: &[u8; 22usize] = b"ReportBufferEntrySize\0";
pub const kIOHIDSensorPropertyReportIntervalKey: &[u8; 15usize] = b"ReportInterval\0";
pub const kIOHIDSensorPropertySampleIntervalKey: &[u8; 15usize] = b"SampleInterval\0";
pub const kIOHIDSensorPropertyBatchIntervalKey: &[u8; 14usize] = b"BatchInterval\0";
pub const kIOHIDSensorPropertyReportLatencyKey: &[u8; 14usize] = b"BatchInterval\0";
pub const kIOHIDSensorPropertyMaxFIFOEventsKey: &[u8; 14usize] = b"MaxFIFOEvents\0";
pub const kIOHIDDigitizerSurfaceSwitchKey: &[u8; 23usize] = b"DigitizerSurfaceSwitch\0";
pub const kIOHIDPointerAccelerationSupportKey: &[u8; 31usize] = b"HIDSupportsPointerAcceleration\0";
pub const kIOHIDScrollAccelerationSupportKey: &[u8; 30usize] = b"HIDSupportsScrollAcceleration\0";
pub const kIOHIDKeyboardLayoutValueKey: &[u8; 23usize] = b"HIDKeyboardLayoutValue\0";
pub const MINPRESSURE: u32 = 0;
pub const MAXPRESSURE: u32 = 255;
pub const LLEQSIZE: u32 = 240;
pub const EV_AUDIO_MIN_VOLUME: u32 = 0;
pub const EV_AUDIO_MAX_VOLUME: u32 = 64;
pub const kIOHIDSystemClass: &[u8; 12usize] = b"IOHIDSystem\0";
pub const kIOHIKeyboardClass: &[u8; 13usize] = b"IOHIKeyboard\0";
pub const kIOHIPointingClass: &[u8; 13usize] = b"IOHIPointing\0";
pub const IOHIDSYSTEM_CONFORMSTO: &[u8; 12usize] = b"IOHIDSystem\0";
pub const kIOHIDCurrentShmemVersion: u32 = 4;
pub const kIOHIDLastCompatibleShmemVersion: u32 = 3;
pub const HIDPostEventDeprecatedMsg : & [u8 ; 144usize] = b"Use CGSEventTap for posting HID events, IOHIDUserDevice for simulating HID device, IOPMAssertionDeclareUserActivity for reporting user activity\0" ;
pub const NX_NUMKEYCODES: u32 = 256;
pub const NX_NUMSEQUENCES: u32 = 128;
pub const NX_NUMMODIFIERS: u32 = 16;
pub const NX_BYTE_CODES: u32 = 0;
pub const NX_WHICHMODMASK: u32 = 15;
pub const NX_MODMASK: u32 = 16;
pub const NX_CHARGENMASK: u32 = 32;
pub const NX_SPECIALKEYMASK: u32 = 64;
pub const NX_KEYSTATEMASK: u32 = 128;
pub const NX_NOSPECIALKEY: u32 = 65535;
pub const NX_KEYTYPE_SOUND_UP: u32 = 0;
pub const NX_KEYTYPE_SOUND_DOWN: u32 = 1;
pub const NX_KEYTYPE_BRIGHTNESS_UP: u32 = 2;
pub const NX_KEYTYPE_BRIGHTNESS_DOWN: u32 = 3;
pub const NX_KEYTYPE_CAPS_LOCK: u32 = 4;
pub const NX_KEYTYPE_HELP: u32 = 5;
pub const NX_POWER_KEY: u32 = 6;
pub const NX_KEYTYPE_MUTE: u32 = 7;
pub const NX_UP_ARROW_KEY: u32 = 8;
pub const NX_DOWN_ARROW_KEY: u32 = 9;
pub const NX_KEYTYPE_NUM_LOCK: u32 = 10;
pub const NX_KEYTYPE_CONTRAST_UP: u32 = 11;
pub const NX_KEYTYPE_CONTRAST_DOWN: u32 = 12;
pub const NX_KEYTYPE_LAUNCH_PANEL: u32 = 13;
pub const NX_KEYTYPE_EJECT: u32 = 14;
pub const NX_KEYTYPE_VIDMIRROR: u32 = 15;
pub const NX_KEYTYPE_PLAY: u32 = 16;
pub const NX_KEYTYPE_NEXT: u32 = 17;
pub const NX_KEYTYPE_PREVIOUS: u32 = 18;
pub const NX_KEYTYPE_FAST: u32 = 19;
pub const NX_KEYTYPE_REWIND: u32 = 20;
pub const NX_KEYTYPE_ILLUMINATION_UP: u32 = 21;
pub const NX_KEYTYPE_ILLUMINATION_DOWN: u32 = 22;
pub const NX_KEYTYPE_ILLUMINATION_TOGGLE: u32 = 23;
pub const NX_NUMSPECIALKEYS: u32 = 24;
pub const NX_NUM_SCANNED_SPECIALKEYS: u32 = 24;
pub const NX_KEYTYPE_MENU: u32 = 25;
pub const NX_SPECIALKEY_POST_MASK: u32 = 16771279;
pub const NX_MODIFIERKEY_ALPHALOCK: u32 = 0;
pub const NX_MODIFIERKEY_SHIFT: u32 = 1;
pub const NX_MODIFIERKEY_CONTROL: u32 = 2;
pub const NX_MODIFIERKEY_ALTERNATE: u32 = 3;
pub const NX_MODIFIERKEY_COMMAND: u32 = 4;
pub const NX_MODIFIERKEY_NUMERICPAD: u32 = 5;
pub const NX_MODIFIERKEY_HELP: u32 = 6;
pub const NX_MODIFIERKEY_SECONDARYFN: u32 = 7;
pub const NX_MODIFIERKEY_NUMLOCK: u32 = 8;
pub const NX_MODIFIERKEY_RSHIFT: u32 = 9;
pub const NX_MODIFIERKEY_RCONTROL: u32 = 10;
pub const NX_MODIFIERKEY_RALTERNATE: u32 = 11;
pub const NX_MODIFIERKEY_RCOMMAND: u32 = 12;
pub const NX_MODIFIERKEY_ALPHALOCK_STATELESS: u32 = 13;
pub const NX_MODIFIERKEY_LAST_KEY: u32 = 13;
pub const kIOI2CInterfaceClassName: &[u8; 15usize] = b"IOI2CInterface\0";
pub const kIOI2CInterfaceIDKey: &[u8; 17usize] = b"IOI2CInterfaceID\0";
pub const kIOI2CBusTypeKey: &[u8; 13usize] = b"IOI2CBusType\0";
pub const kIOI2CTransactionTypesKey: &[u8; 22usize] = b"IOI2CTransactionTypes\0";
pub const kIOI2CSupportedCommFlagsKey: &[u8; 24usize] = b"IOI2CSupportedCommFlags\0";
pub const kIOFBI2CInterfaceInfoKey: &[u8; 21usize] = b"IOFBI2CInterfaceInfo\0";
pub const kIOFBI2CInterfaceIDsKey: &[u8; 20usize] = b"IOFBI2CInterfaceIDs\0";
pub const kIONetworkControllerClass: &[u8; 20usize] = b"IONetworkController\0";
pub const kIOVendor: &[u8; 9usize] = b"IOVendor\0";
pub const kIOModel: &[u8; 8usize] = b"IOModel\0";
pub const kIORevision: &[u8; 11usize] = b"IORevision\0";
pub const kIOFeatures: &[u8; 11usize] = b"IOFeatures\0";
pub const kIOMediumDictionary: &[u8; 19usize] = b"IOMediumDictionary\0";
pub const kIODefaultMedium: &[u8; 16usize] = b"IODefaultMedium\0";
pub const kIOSelectedMedium: &[u8; 17usize] = b"IOSelectedMedium\0";
pub const kIOActiveMedium: &[u8; 15usize] = b"IOActiveMedium\0";
pub const kIOLinkSpeed: &[u8; 12usize] = b"IOLinkSpeed\0";
pub const kIOLinkStatus: &[u8; 13usize] = b"IOLinkStatus\0";
pub const kIOLinkData: &[u8; 11usize] = b"IOLinkData\0";
pub const kIOPacketFilters: &[u8; 16usize] = b"IOPacketFilters\0";
pub const kIOMACAddress: &[u8; 13usize] = b"IOMACAddress\0";
pub const kIOMaxPacketSize: &[u8; 16usize] = b"IOMaxPacketSize\0";
pub const kIOMinPacketSize: &[u8; 16usize] = b"IOMinPacketSize\0";
pub const kIONetworkFilterGroup: &[u8; 21usize] = b"IONetworkFilterGroup\0";
pub const kIOEthernetControllerClass: &[u8; 21usize] = b"IOEthernetController\0";
pub const kIOEthernetAddressSize: u32 = 6;
pub const kIOEthernetMaxPacketSize: u32 = 1518;
pub const kIOEthernetMinPacketSize: u32 = 64;
pub const kIOEthernetCRCSize: u32 = 4;
pub const kIOEthernetWakeOnLANFilterGroup: &[u8; 31usize] = b"IOEthernetWakeOnLANFilterGroup\0";
pub const kIOEthernetDisabledWakeOnLANFilterGroup: &[u8; 39usize] =
    b"IOEthernetDisabledWakeOnLANFilterGroup\0";
pub const kIONetworkDataBytes: &[u8; 5usize] = b"Data\0";
pub const kIONetworkDataAccessTypes: &[u8; 13usize] = b"Access Types\0";
pub const kIONetworkDataSize: &[u8; 5usize] = b"Size\0";
pub const kIONetworkStackUserCommandKey: &[u8; 26usize] = b"IONetworkStackUserCommand\0";
pub const kIONetworkStackUserCommand: &[u8; 26usize] = b"IONetworkStackUserCommand\0";
pub const kIOEthernetInterfaceClass: &[u8; 20usize] = b"IOEthernetInterface\0";
pub const kIOActivePacketFilters: &[u8; 22usize] = b"IOActivePacketFilters\0";
pub const kIORequiredPacketFilters: &[u8; 24usize] = b"IORequiredPacketFilters\0";
pub const kIOMulticastAddressList: &[u8; 23usize] = b"IOMulticastAddressList\0";
pub const kIOMulticastFilterData: &[u8; 23usize] = b"IOMulticastAddressList\0";
pub const kIONetworkInterfaceClass: &[u8; 19usize] = b"IONetworkInterface\0";
pub const kIONetworkData: &[u8; 14usize] = b"IONetworkData\0";
pub const kIOInterfaceType: &[u8; 16usize] = b"IOInterfaceType\0";
pub const kIOMaxTransferUnit: &[u8; 18usize] = b"IOMaxTransferUnit\0";
pub const kIOMediaAddressLength: &[u8; 21usize] = b"IOMediaAddressLength\0";
pub const kIOMediaHeaderLength: &[u8; 20usize] = b"IOMediaHeaderLength\0";
pub const kIOInterfaceFlags: &[u8; 17usize] = b"IOInterfaceFlags\0";
pub const kIOInterfaceExtraFlags: &[u8; 22usize] = b"IOInterfaceExtraFlags\0";
pub const kIOInterfaceUnit: &[u8; 16usize] = b"IOInterfaceUnit\0";
pub const kIOInterfaceState: &[u8; 17usize] = b"IOInterfaceState\0";
pub const kIOInterfaceNamePrefix: &[u8; 22usize] = b"IOInterfaceNamePrefix\0";
pub const kIOPrimaryInterface: &[u8; 19usize] = b"IOPrimaryInterface\0";
pub const kIOBuiltin: &[u8; 10usize] = b"IOBuiltin\0";
pub const kIOLocation: &[u8; 11usize] = b"IOLocation\0";
pub const kIONetworkNoBSDAttachKey: &[u8; 21usize] = b"IONetworkNoBSDAttach\0";
pub const kIONetworkStatsKey: &[u8; 18usize] = b"IONetworkStatsKey\0";
pub const kIOOutputQueueStatsKey: &[u8; 22usize] = b"IOOutputQueueStatsKey\0";
pub const kIOEthernetStatsKey: &[u8; 19usize] = b"IOEthernetStatsKey\0";
pub const kIOMediumType: &[u8; 5usize] = b"Type\0";
pub const kIOMediumFlags: &[u8; 6usize] = b"Flags\0";
pub const kIOMediumSpeed: &[u8; 6usize] = b"Speed\0";
pub const kIOMediumIndex: &[u8; 6usize] = b"Index\0";
pub const kIOMediumSubTypeMask: u32 = 983071;
pub const kIOMediumNetworkTypeMask: u32 = 224;
pub const kIOMediumOptionsMask: u32 = 65280;
pub const kIOMediumCommonOptionsMask: u32 = 267386880;
pub const kIOMediumInstanceShift: u32 = 28;
pub const kIOMediumInstanceMask: u32 = 4026531840;
pub const kIONetworkUserClientTypeID: u32 = 4278190081;
pub const kIONUCType: u32 = 4278190081;
pub const kIOPSPowerAdapterIDKey: &[u8; 10usize] = b"AdapterID\0";
pub const kIOPSPowerAdapterWattsKey: &[u8; 6usize] = b"Watts\0";
pub const kIOPSPowerAdapterRevisionKey: &[u8; 16usize] = b"AdapterRevision\0";
pub const kIOPSPowerAdapterSerialNumberKey: &[u8; 13usize] = b"SerialNumber\0";
pub const kIOPSPowerAdapterFamilyKey: &[u8; 11usize] = b"FamilyCode\0";
pub const kIOPSPowerAdapterCurrentKey: &[u8; 8usize] = b"Current\0";
pub const kIOPSPowerAdapterSourceKey: &[u8; 7usize] = b"Source\0";
pub const kIOPSUPSManagementClaimed: &[u8; 33usize] = b"/IOKit/UPSPowerManagementClaimed\0";
pub const kIOPSLowWarnLevelKey: &[u8; 15usize] = b"Low Warn Level\0";
pub const kIOPSDeadWarnLevelKey: &[u8; 15usize] = b"Shutdown Level\0";
pub const kIOPSDynamicStorePath: &[u8; 20usize] = b"/IOKit/PowerSources\0";
pub const kIOPSCommandDelayedRemovePowerKey: &[u8; 21usize] = b"Delayed Remove Power\0";
pub const kIOPSCommandEnableAudibleAlarmKey: &[u8; 21usize] = b"Enable Audible Alarm\0";
pub const kIOPSCommandStartupDelayKey: &[u8; 14usize] = b"Startup Delay\0";
pub const kIOPSCommandSetCurrentLimitKey: &[u8; 18usize] = b"Set Current Limit\0";
pub const kIOPSCommandSetRequiredVoltageKey: &[u8; 21usize] = b"Set Required Voltage\0";
pub const kIOPSCommandSendCurrentStateOfCharge: &[u8; 29usize] = b"Send Current State of Charge\0";
pub const kIOPSCommandSendCurrentTemperature: &[u8; 25usize] = b"Send Current Temperature\0";
pub const kIOPSPowerSourceIDKey: &[u8; 16usize] = b"Power Source ID\0";
pub const kIOPSPowerSourceStateKey: &[u8; 19usize] = b"Power Source State\0";
pub const kIOPSCurrentCapacityKey: &[u8; 17usize] = b"Current Capacity\0";
pub const kIOPSMaxCapacityKey: &[u8; 13usize] = b"Max Capacity\0";
pub const kIOPSDesignCapacityKey: &[u8; 15usize] = b"DesignCapacity\0";
pub const kIOPSNominalCapacityKey: &[u8; 17usize] = b"Nominal Capacity\0";
pub const kIOPSTimeToEmptyKey: &[u8; 14usize] = b"Time to Empty\0";
pub const kIOPSTimeToFullChargeKey: &[u8; 20usize] = b"Time to Full Charge\0";
pub const kIOPSIsChargingKey: &[u8; 12usize] = b"Is Charging\0";
pub const kIOPSInternalFailureKey: &[u8; 17usize] = b"Internal Failure\0";
pub const kIOPSIsPresentKey: &[u8; 11usize] = b"Is Present\0";
pub const kIOPSVoltageKey: &[u8; 8usize] = b"Voltage\0";
pub const kIOPSCurrentKey: &[u8; 8usize] = b"Current\0";
pub const kIOPSTemperatureKey: &[u8; 12usize] = b"Temperature\0";
pub const kIOPSNameKey: &[u8; 5usize] = b"Name\0";
pub const kIOPSTypeKey: &[u8; 5usize] = b"Type\0";
pub const kIOPSTransportTypeKey: &[u8; 15usize] = b"Transport Type\0";
pub const kIOPSVendorIDKey: &[u8; 10usize] = b"Vendor ID\0";
pub const kIOPSProductIDKey: &[u8; 11usize] = b"Product ID\0";
pub const kIOPSVendorDataKey: &[u8; 21usize] = b"Vendor Specific Data\0";
pub const kIOPSBatteryHealthKey: &[u8; 14usize] = b"BatteryHealth\0";
pub const kIOPSBatteryHealthConditionKey: &[u8; 23usize] = b"BatteryHealthCondition\0";
pub const kIOPSBatteryFailureModesKey: &[u8; 20usize] = b"BatteryFailureModes\0";
pub const kIOPSHealthConfidenceKey: &[u8; 17usize] = b"HealthConfidence\0";
pub const kIOPSMaxErrKey: &[u8; 7usize] = b"MaxErr\0";
pub const kIOPSIsChargedKey: &[u8; 11usize] = b"Is Charged\0";
pub const kIOPSIsFinishingChargeKey: &[u8; 20usize] = b"Is Finishing Charge\0";
pub const kIOPSHardwareSerialNumberKey: &[u8; 23usize] = b"Hardware Serial Number\0";
pub const kIOPSSerialTransportType: &[u8; 7usize] = b"Serial\0";
pub const kIOPSUSBTransportType: &[u8; 4usize] = b"USB\0";
pub const kIOPSNetworkTransportType: &[u8; 9usize] = b"Ethernet\0";
pub const kIOPSInternalType: &[u8; 9usize] = b"Internal\0";
pub const kIOPSInternalBatteryType: &[u8; 16usize] = b"InternalBattery\0";
pub const kIOPSUPSType: &[u8; 4usize] = b"UPS\0";
pub const kIOPSOffLineValue: &[u8; 9usize] = b"Off Line\0";
pub const kIOPSACPowerValue: &[u8; 9usize] = b"AC Power\0";
pub const kIOPSBatteryPowerValue: &[u8; 14usize] = b"Battery Power\0";
pub const kIOPSPoorValue: &[u8; 5usize] = b"Poor\0";
pub const kIOPSFairValue: &[u8; 5usize] = b"Fair\0";
pub const kIOPSGoodValue: &[u8; 5usize] = b"Good\0";
pub const kIOPSCheckBatteryValue: &[u8; 14usize] = b"Check Battery\0";
pub const kIOPSPermanentFailureValue: &[u8; 26usize] = b"Permanent Battery Failure\0";
pub const kIOPSFailureExternalInput: &[u8; 29usize] = b"Externally Indicated Failure\0";
pub const kIOPSFailureSafetyOverVoltage: &[u8; 20usize] = b"Safety Over-Voltage\0";
pub const kIOPSFailureChargeOverTemp: &[u8; 24usize] = b"Charge Over-Temperature\0";
pub const kIOPSFailureDischargeOverTemp: &[u8; 27usize] = b"Discharge Over-Temperature\0";
pub const kIOPSFailureCellImbalance: &[u8; 15usize] = b"Cell Imbalance\0";
pub const kIOPSFailureChargeFET: &[u8; 11usize] = b"Charge FET\0";
pub const kIOPSFailureDischargeFET: &[u8; 14usize] = b"Discharge FET\0";
pub const kIOPSFailureDataFlushFault: &[u8; 17usize] = b"Data Flush Fault\0";
pub const kIOPSFailurePermanentAFEComms: &[u8; 20usize] = b"Permanent AFE Comms\0";
pub const kIOPSFailurePeriodicAFEComms: &[u8; 19usize] = b"Periodic AFE Comms\0";
pub const kIOPSFailureChargeOverCurrent: &[u8; 20usize] = b"Charge Over-Current\0";
pub const kIOPSFailureDischargeOverCurrent: &[u8; 23usize] = b"Discharge Over-Current\0";
pub const kIOPSFailureOpenThermistor: &[u8; 16usize] = b"Open Thermistor\0";
pub const kIOPSFailureFuseBlown: &[u8; 11usize] = b"Fuse Blown\0";
pub const kIOPSNotifyLowBattery: &[u8; 41usize] = b"com.apple.system.powersources.lowbattery\0";
pub const kIOPSNotifyTimeRemaining: &[u8; 44usize] =
    b"com.apple.system.powersources.timeremaining\0";
pub const kIOPSTimeRemainingNotificationKey: &[u8; 44usize] =
    b"com.apple.system.powersources.timeremaining\0";
pub const kIOPSNotifyPowerSource: &[u8; 37usize] = b"com.apple.system.powersources.source\0";
pub const kIOPSNotifyAttach: &[u8; 37usize] = b"com.apple.system.powersources.attach\0";
pub const kIOPSNotifyAnyPowerSource: &[u8; 30usize] = b"com.apple.system.powersources\0";
pub const kIOPMUPSPowerKey: &[u8; 10usize] = b"UPS Power\0";
pub const kIOPMBatteryPowerKey: &[u8; 14usize] = b"Battery Power\0";
pub const kIOPMACPowerKey: &[u8; 9usize] = b"AC Power\0";
pub const kAppleClamshellStateKey: &[u8; 20usize] = b"AppleClamshellState\0";
pub const kAppleClamshellCausesSleepKey: &[u8; 26usize] = b"AppleClamshellCausesSleep\0";
pub const kIOPMSleepWakeUUIDKey: &[u8; 14usize] = b"SleepWakeUUID\0";
pub const kIOPMBootSessionUUIDKey: &[u8; 16usize] = b"BootSessionUUID\0";
pub const kIOPMDeepSleepEnabledKey: &[u8; 16usize] = b"Standby Enabled\0";
pub const kIOPMDeepSleepDelayKey: &[u8; 14usize] = b"Standby Delay\0";
pub const kIOPMDeepSleepDelayHighKey: &[u8; 19usize] = b"High Standby Delay\0";
pub const kIOPMStandbyBatteryThresholdKey: &[u8; 26usize] = b"Standby Battery Threshold\0";
pub const kIOPMDestroyFVKeyOnStandbyKey: &[u8; 22usize] = b"DestroyFVKeyOnStandby\0";
pub const kIOPMResetPowerStateOnWakeKey: &[u8; 26usize] = b"IOPMResetPowerStateOnWake\0";
pub const kIOPMAssertionsDriverKey: &[u8; 19usize] = b"DriverPMAssertions\0";
pub const kIOPMAssertionsDriverDetailedKey: &[u8; 27usize] = b"DriverPMAssertionsDetailed\0";
pub const kIOPMDriverAssertionIDKey: &[u8; 3usize] = b"ID\0";
pub const kIOPMDriverAssertionCreatedTimeKey: &[u8; 12usize] = b"CreatedTime\0";
pub const kIOPMDriverAssertionModifiedTimeKey: &[u8; 13usize] = b"ModifiedTime\0";
pub const kIOPMDriverAssertionOwnerStringKey: &[u8; 6usize] = b"Owner\0";
pub const kIOPMDriverAssertionOwnerServiceKey: &[u8; 11usize] = b"ServicePtr\0";
pub const kIOPMDriverAssertionRegistryEntryIDKey: &[u8; 16usize] = b"RegistryEntryID\0";
pub const kIOPMDriverAssertionLevelKey: &[u8; 6usize] = b"Level\0";
pub const kIOPMDriverAssertionAssertedKey: &[u8; 11usize] = b"Assertions\0";
pub const kIOPMPSExternalConnectedKey: &[u8; 18usize] = b"ExternalConnected\0";
pub const kIOPMPSExternalChargeCapableKey: &[u8; 22usize] = b"ExternalChargeCapable\0";
pub const kIOPMPSBatteryInstalledKey: &[u8; 17usize] = b"BatteryInstalled\0";
pub const kIOPMPSIsChargingKey: &[u8; 11usize] = b"IsCharging\0";
pub const kIOPMFullyChargedKey: &[u8; 13usize] = b"FullyCharged\0";
pub const kIOPMPSAtWarnLevelKey: &[u8; 12usize] = b"AtWarnLevel\0";
pub const kIOPMPSAtCriticalLevelKey: &[u8; 16usize] = b"AtCriticalLevel\0";
pub const kIOPMPSCurrentCapacityKey: &[u8; 16usize] = b"CurrentCapacity\0";
pub const kIOPMPSMaxCapacityKey: &[u8; 12usize] = b"MaxCapacity\0";
pub const kIOPMPSDesignCapacityKey: &[u8; 15usize] = b"DesignCapacity\0";
pub const kIOPMPSTimeRemainingKey: &[u8; 14usize] = b"TimeRemaining\0";
pub const kIOPMPSAmperageKey: &[u8; 9usize] = b"Amperage\0";
pub const kIOPMPSVoltageKey: &[u8; 8usize] = b"Voltage\0";
pub const kIOPMPSCycleCountKey: &[u8; 11usize] = b"CycleCount\0";
pub const kIOPMPSMaxErrKey: &[u8; 7usize] = b"MaxErr\0";
pub const kIOPMPSAdapterInfoKey: &[u8; 12usize] = b"AdapterInfo\0";
pub const kIOPMPSLocationKey: &[u8; 9usize] = b"Location\0";
pub const kIOPMPSErrorConditionKey: &[u8; 15usize] = b"ErrorCondition\0";
pub const kIOPMPSManufacturerKey: &[u8; 13usize] = b"Manufacturer\0";
pub const kIOPMPSManufactureDateKey: &[u8; 16usize] = b"ManufactureDate\0";
pub const kIOPMPSModelKey: &[u8; 6usize] = b"Model\0";
pub const kIOPMPSSerialKey: &[u8; 7usize] = b"Serial\0";
pub const kIOPMDeviceNameKey: &[u8; 11usize] = b"DeviceName\0";
pub const kIOPMPSLegacyBatteryInfoKey: &[u8; 18usize] = b"LegacyBatteryInfo\0";
pub const kIOPMPSBatteryHealthKey: &[u8; 14usize] = b"BatteryHealth\0";
pub const kIOPMPSHealthConfidenceKey: &[u8; 17usize] = b"HealthConfidence\0";
pub const kIOPMPSCapacityEstimatedKey: &[u8; 18usize] = b"CapacityEstimated\0";
pub const kIOPMPSBatteryChargeStatusKey: &[u8; 13usize] = b"ChargeStatus\0";
pub const kIOPMPSBatteryTemperatureKey: &[u8; 12usize] = b"Temperature\0";
pub const kIOPMPSAdapterDetailsKey: &[u8; 15usize] = b"AdapterDetails\0";
pub const kIOPMPSChargerConfigurationKey: &[u8; 21usize] = b"ChargerConfiguration\0";
pub const kIOPMBatteryChargeStatusTooHot: &[u8; 16usize] = b"HighTemperature\0";
pub const kIOPMBatteryChargeStatusTooCold: &[u8; 15usize] = b"LowTemperature\0";
pub const kIOPMBatteryChargeStatusTooHotOrCold: &[u8; 21usize] = b"HighOrLowTemperature\0";
pub const kIOPMBatteryChargeStatusGradient: &[u8; 27usize] = b"BatteryTemperatureGradient\0";
pub const kIOPMPSAdapterDetailsIDKey: &[u8; 10usize] = b"AdapterID\0";
pub const kIOPMPSAdapterDetailsWattsKey: &[u8; 6usize] = b"Watts\0";
pub const kIOPMPSAdapterDetailsRevisionKey: &[u8; 16usize] = b"AdapterRevision\0";
pub const kIOPMPSAdapterDetailsSerialNumberKey: &[u8; 13usize] = b"SerialNumber\0";
pub const kIOPMPSAdapterDetailsFamilyKey: &[u8; 11usize] = b"FamilyCode\0";
pub const kIOPMPSAdapterDetailsAmperageKey: &[u8; 8usize] = b"Current\0";
pub const kIOPMPSAdapterDetailsDescriptionKey: &[u8; 12usize] = b"Description\0";
pub const kIOPMPSAdapterDetailsPMUConfigurationKey: &[u8; 17usize] = b"PMUConfiguration\0";
pub const kIOPMPSAdapterDetailsVoltage: &[u8; 15usize] = b"AdapterVoltage\0";
pub const kIOPMPSAdapterDetailsSourceIDKey: &[u8; 7usize] = b"Source\0";
pub const kIOPMPSAdapterDetailsErrorFlagsKey: &[u8; 11usize] = b"ErrorFlags\0";
pub const kIOPMPSAdapterDetailsSharedSourceKey: &[u8; 13usize] = b"SharedSource\0";
pub const kIOPMPSAdapterDetailsCloakedKey: &[u8; 14usize] = b"CloakedSource\0";
pub const kIOPMPSInvalidWakeSecondsKey: &[u8; 26usize] = b"BatteryInvalidWakeSeconds\0";
pub const kIOPMPSPostChargeWaitSecondsKey: &[u8; 22usize] = b"PostChargeWaitSeconds\0";
pub const kIOPMPSPostDishargeWaitSecondsKey: &[u8; 25usize] = b"PostDischargeWaitSeconds\0";
pub const kIOPMGraphicsPowerLimitsKey: &[u8; 22usize] = b"Graphics_Power_Limits\0";
pub const kIOPMGraphicsPowerLimitPerformanceKey: &[u8; 27usize] = b"Graphics_Power_Performance\0";
pub const kIOPMCPUPowerLimitsKey: &[u8; 17usize] = b"CPU_Power_Limits\0";
pub const kIOPMCPUPowerLimitProcessorSpeedKey: &[u8; 16usize] = b"CPU_Speed_Limit\0";
pub const kIOPMCPUPowerLimitProcessorCountKey: &[u8; 19usize] = b"CPU_Available_CPUs\0";
pub const kIOPMCPUPowerLimitSchedulerTimeKey: &[u8; 20usize] = b"CPU_Scheduler_Limit\0";
pub const kIOPMThermalLevelWarningKey: &[u8; 22usize] = b"Thermal_Level_Warning\0";
pub const kIOPMSettingWakeOnRingKey: &[u8; 19usize] = b"Wake On Modem Ring\0";
pub const kIOPMSettingRestartOnPowerLossKey: &[u8; 32usize] = b"Automatic Restart On Power Loss\0";
pub const kIOPMSettingWakeOnACChangeKey: &[u8; 18usize] = b"Wake On AC Change\0";
pub const kIOPMSettingSleepOnPowerButtonKey: &[u8; 22usize] = b"Sleep On Power Button\0";
pub const kIOPMSettingWakeOnClamshellKey: &[u8; 23usize] = b"Wake On Clamshell Open\0";
pub const kIOPMSettingReduceBrightnessKey: &[u8; 17usize] = b"ReduceBrightness\0";
pub const kIOPMSettingDisplaySleepUsesDimKey: &[u8; 23usize] = b"Display Sleep Uses Dim\0";
pub const kIOPMSettingTimeZoneOffsetKey: &[u8; 22usize] = b"TimeZoneOffsetSeconds\0";
pub const kIOPMSettingMobileMotionModuleKey: &[u8; 19usize] = b"MobileMotionModule\0";
pub const kIOPMSettingGraphicsSwitchKey: &[u8; 10usize] = b"GPUSwitch\0";
pub const kIOPMSettingProModeControl: &[u8; 15usize] = b"ProModeControl\0";
pub const kIOPMSettingProModeDefer: &[u8; 13usize] = b"ProModeDefer\0";
pub const kIOPMSettingAutoWakeSecondsKey: &[u8; 5usize] = b"wake\0";
pub const kIOPMSettingAutoWakeCalendarKey: &[u8; 19usize] = b"WakeByCalendarDate\0";
pub const kIOPMSettingAutoPowerSecondsKey: &[u8; 8usize] = b"poweron\0";
pub const kIOPMSettingAutoPowerCalendarKey: &[u8; 20usize] = b"PowerByCalendarDate\0";
pub const kIOPMSettingDebugWakeRelativeKey: &[u8; 20usize] = b"WakeRelativeToSleep\0";
pub const kIOPMSettingDebugPowerRelativeKey: &[u8; 24usize] = b"PowerRelativeToShutdown\0";
pub const kIOPMSettingMaintenanceWakeCalendarKey: &[u8; 28usize] = b"MaintenanceWakeCalendarDate\0";
pub const kIOREMSleepEnabledKey: &[u8; 16usize] = b"REMSleepEnabled\0";
pub const kIOBatteryInfoKey: &[u8; 14usize] = b"IOBatteryInfo\0";
pub const kIOBatteryCurrentChargeKey: &[u8; 8usize] = b"Current\0";
pub const kIOBatteryCapacityKey: &[u8; 9usize] = b"Capacity\0";
pub const kIOBatteryFlagsKey: &[u8; 6usize] = b"Flags\0";
pub const kIOBatteryVoltageKey: &[u8; 8usize] = b"Voltage\0";
pub const kIOBatteryAmperageKey: &[u8; 9usize] = b"Amperage\0";
pub const kIOBatteryCycleCountKey: &[u8; 12usize] = b"Cycle Count\0";
pub const IOPM_POWER_SOURCE_REV: u32 = 2;
pub const kIOPMAutoWake: &[u8; 5usize] = b"wake\0";
pub const kIOPMAutoPowerOn: &[u8; 8usize] = b"poweron\0";
pub const kIOPMAutoWakeOrPowerOn: &[u8; 12usize] = b"wakepoweron\0";
pub const kIOPMAutoSleep: &[u8; 6usize] = b"sleep\0";
pub const kIOPMAutoShutdown: &[u8; 9usize] = b"shutdown\0";
pub const kIOPMAutoRestart: &[u8; 8usize] = b"restart\0";
pub const kIOPMPowerEventTimeKey: &[u8; 5usize] = b"time\0";
pub const kIOPMPowerEventAppNameKey: &[u8; 12usize] = b"scheduledby\0";
pub const kIOPMPowerEventAppPIDKey: &[u8; 7usize] = b"appPID\0";
pub const kIOPMPowerEventTypeKey: &[u8; 10usize] = b"eventtype\0";
pub const kPMSetAggressiveness: u32 = 0;
pub const kPMGetAggressiveness: u32 = 1;
pub const kPMSleepSystem: u32 = 2;
pub const kPMAllowPowerChange: u32 = 3;
pub const kPMCancelPowerChange: u32 = 4;
pub const kPMShutdownSystem: u32 = 5;
pub const kPMRestartSystem: u32 = 6;
pub const kPMSleepSystemOptions: u32 = 7;
pub const kPMSetMaintenanceWakeCalendar: u32 = 8;
pub const kPMSetUserAssertionLevels: u32 = 9;
pub const kPMActivityTickle: u32 = 10;
pub const kPMGetSystemSleepType: u32 = 11;
pub const kPMSetClamshellSleepState: u32 = 12;
pub const kPMSleepWakeWatchdogEnable: u32 = 13;
pub const kPMSleepWakeDebugTrig: u32 = 14;
pub const kPMSetDisplayPowerOn: u32 = 15;
pub const kPMSetDisplayState: u32 = 16;
pub const kNumPMMethods: u32 = 17;
pub const kIOSystemLoadAdvisoryNotifyName: &[u8; 52usize] =
    b"com.apple.system.powermanagement.SystemLoadAdvisory\0";
pub const kIOPMCPUPowerNotificationKey: &[u8; 27usize] = b"com.apple.system.power.CPU\0";
pub const kIOPMThermalWarningNotificationKey: &[u8; 39usize] =
    b"com.apple.system.power.thermal_warning\0";
pub const kIOPropertyControllerCharacteristicsKey: &[u8; 27usize] = b"Controller Characteristics\0";
pub const kIOPropertySASAddressKey: &[u8; 12usize] = b"SAS Address\0";
pub const kIOPropertySCSIPortIdentifierKey: &[u8; 28usize] = b"Unique SCSI Port Identifier\0";
pub const kIOPropertyFibreChannelNodeWorldWideNameKey: &[u8; 21usize] = b"Node World Wide Name\0";
pub const kIOPropertyFibreChannelPortWorldWideNameKey: &[u8; 21usize] = b"Port World Wide Name\0";
pub const kIOPropertyFibreChannelAddressIdentifierKey: &[u8; 19usize] = b"Address Identifier\0";
pub const kIOPropertyFibreChannelALPAKey: &[u8; 6usize] = b"AL_PA\0";
pub const kIOPropertyPortStatusKey: &[u8; 12usize] = b"Port Status\0";
pub const kIOPropertyPortSpeedKey: &[u8; 11usize] = b"Port Speed\0";
pub const kIOPropertyPortTopologyKey: &[u8; 14usize] = b"Port Topology\0";
pub const kIOPropertyPortDescriptionKey: &[u8; 17usize] = b"Port Description\0";
pub const kIOPropertySCSIParallelSignalingTypeKey: &[u8; 29usize] =
    b"SCSI Parallel Signaling Type\0";
pub const kIOPropertyFibreChannelCableDescriptionKey: &[u8; 27usize] =
    b"Fibre Channel Cabling Type\0";
pub const kIOPropertyEncryptionTypeKey: &[u8; 16usize] = b"Encryption Type\0";
pub const kIOPropertyLowPowerModeKey: &[u8; 15usize] = b"Low Power Mode\0";
pub const kIOPropertyPortStatusLinkEstablishedKey: &[u8; 17usize] = b"Link Established\0";
pub const kIOPropertyPortStatusNoLinkEstablishedKey: &[u8; 20usize] = b"No Link Established\0";
pub const kIOPropertyPortStatusLinkFailedKey: &[u8; 12usize] = b"Link Failed\0";
pub const kIOPropertyPortSpeedAutomaticKey: &[u8; 10usize] = b"Automatic\0";
pub const kIOPropertyPortSpeed1GigabitKey: &[u8; 10usize] = b"1 Gigabit\0";
pub const kIOPropertyPortSpeed1_5GigabitKey: &[u8; 12usize] = b"1.5 Gigabit\0";
pub const kIOPropertyPortSpeed2GigabitKey: &[u8; 10usize] = b"2 Gigabit\0";
pub const kIOPropertyPortSpeed3GigabitKey: &[u8; 10usize] = b"3 Gigabit\0";
pub const kIOPropertyPortSpeed4GigabitKey: &[u8; 10usize] = b"4 Gigabit\0";
pub const kIOPropertyPortSpeed6GigabitKey: &[u8; 10usize] = b"6 Gigabit\0";
pub const kIOPropertyPortSpeed8GigabitKey: &[u8; 10usize] = b"8 Gigabit\0";
pub const kIOPropertyPortSpeed10GigabitKey: &[u8; 11usize] = b"10 Gigabit\0";
pub const kIOPropertyPortSpeed12GigabitKey: &[u8; 11usize] = b"12 Gigabit\0";
pub const kIOPropertyPortSpeed16GigabitKey: &[u8; 11usize] = b"16 Gigabit\0";
pub const kIOPropertyPortSpeed40GigabitKey: &[u8; 11usize] = b"40 Gigabit\0";
pub const kIOPropertyPortSpeedAutomatic1GigabitKey: &[u8; 22usize] = b"Automatic (1 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic1_5GigabitKey: &[u8; 24usize] = b"Automatic (1.5 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic2GigabitKey: &[u8; 22usize] = b"Automatic (2 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic3GigabitKey: &[u8; 22usize] = b"Automatic (3 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic4GigabitKey: &[u8; 22usize] = b"Automatic (4 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic6GigabitKey: &[u8; 22usize] = b"Automatic (6 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic8GigabitKey: &[u8; 22usize] = b"Automatic (8 Gigabit)\0";
pub const kIOPropertyPortSpeedAutomatic10GigabitKey: &[u8; 23usize] = b"Automatic (10 Gigabit)\0";
pub const kIOPropertyPortTopologyAutomaticKey: &[u8; 10usize] = b"Automatic\0";
pub const kIOPropertyPortTopologyNPortKey: &[u8; 7usize] = b"N_Port\0";
pub const kIOPropertyPortTopologyNLPortKey: &[u8; 8usize] = b"NL_Port\0";
pub const kIOPropertyPortTopologyAutomaticNPortKey: &[u8; 19usize] = b"Automatic (N_Port)\0";
pub const kIOPropertyPortTopologyAutomaticNLPortKey: &[u8; 20usize] = b"Automatic (NL_Port)\0";
pub const kIOPropertySCSIParallelSignalingTypeHVDKey: &[u8; 26usize] =
    b"High Voltage Differential\0";
pub const kIOPropertySCSIParallelSignalingTypeLVDKey: &[u8; 25usize] =
    b"Low Voltage Differential\0";
pub const kIOPropertySCSIParallelSignalingTypeSEKey: &[u8; 13usize] = b"Single Ended\0";
pub const kIOPropertyFibreChannelCableDescriptionCopperKey: &[u8; 7usize] = b"Copper\0";
pub const kIOPropertyFibreChannelCableDescriptionFiberOpticKey: &[u8; 12usize] = b"Fiber Optic\0";
pub const kIOPropertyAESCBCKey: &[u8; 8usize] = b"AES-CBC\0";
pub const kIOPropertyAESXTSKey: &[u8; 8usize] = b"AES-XTS\0";
pub const kIOPropertyAESXEXKey: &[u8; 8usize] = b"AES-XEX\0";
pub const kIOPropertyProtocolCharacteristicsKey: &[u8; 25usize] = b"Protocol Characteristics\0";
pub const kIOPropertySCSIInitiatorIdentifierKey: &[u8; 26usize] = b"SCSI Initiator Identifier\0";
pub const kIOPropertySCSIDomainIdentifierKey: &[u8; 23usize] = b"SCSI Domain Identifier\0";
pub const kIOPropertySCSITargetIdentifierKey: &[u8; 23usize] = b"SCSI Target Identifier\0";
pub const kIOPropertySCSILogicalUnitNumberKey: &[u8; 25usize] = b"SCSI Logical Unit Number\0";
pub const kIOPropertyPhysicalInterconnectTypeKey: &[u8; 22usize] = b"Physical Interconnect\0";
pub const kIOPropertyPhysicalInterconnectLocationKey: &[u8; 31usize] =
    b"Physical Interconnect Location\0";
pub const kIOPropertySCSIProtocolMultiInitKey: &[u8; 20usize] = b"Multiple Initiators\0";
pub const kIOPropertyInternalKey: &[u8; 9usize] = b"Internal\0";
pub const kIOPropertyExternalKey: &[u8; 9usize] = b"External\0";
pub const kIOPropertyInternalExternalKey: &[u8; 18usize] = b"Internal/External\0";
pub const kIOPropertyInterconnectFileKey: &[u8; 5usize] = b"File\0";
pub const kIOPropertyInterconnectRAMKey: &[u8; 4usize] = b"RAM\0";
pub const kIOPropertyPhysicalInterconnectTypeATA: &[u8; 4usize] = b"ATA\0";
pub const kIOPropertyPhysicalInterconnectTypeSerialATA: &[u8; 5usize] = b"SATA\0";
pub const kIOPropertyPhysicalInterconnectTypeSerialAttachedSCSI: &[u8; 4usize] = b"SAS\0";
pub const kIOPropertyPhysicalInterconnectTypeATAPI: &[u8; 6usize] = b"ATAPI\0";
pub const kIOPropertyPhysicalInterconnectTypeUSB: &[u8; 4usize] = b"USB\0";
pub const kIOPropertyPhysicalInterconnectTypeFireWire: &[u8; 9usize] = b"FireWire\0";
pub const kIOPropertyPhysicalInterconnectTypeSecureDigital: &[u8; 15usize] = b"Secure Digital\0";
pub const kIOPropertyPhysicalInterconnectTypeSCSIParallel: &[u8; 24usize] =
    b"SCSI Parallel Interface\0";
pub const kIOPropertyPhysicalInterconnectTypeFibreChannel: &[u8; 24usize] =
    b"Fibre Channel Interface\0";
pub const kIOPropertyPhysicalInterconnectTypeVirtual: &[u8; 18usize] = b"Virtual Interface\0";
pub const kIOPropertyPhysicalInterconnectTypePCI: &[u8; 4usize] = b"PCI\0";
pub const kIOPropertyPhysicalInterconnectTypePCIExpress: &[u8; 12usize] = b"PCI-Express\0";
pub const kIOPropertyPhysicalInterconnectTypeAppleFabric: &[u8; 13usize] = b"Apple Fabric\0";
pub const kIOPropertyDeviceCharacteristicsKey: &[u8; 23usize] = b"Device Characteristics\0";
pub const kIOPropertyVendorNameKey: &[u8; 12usize] = b"Vendor Name\0";
pub const kIOPropertyProductNameKey: &[u8; 13usize] = b"Product Name\0";
pub const kIOPropertyProductRevisionLevelKey: &[u8; 23usize] = b"Product Revision Level\0";
pub const kIOPropertyProductSerialNumberKey: &[u8; 14usize] = b"Serial Number\0";
pub const kIOPropertySupportedCDFeaturesKey: &[u8; 12usize] = b"CD Features\0";
pub const kIOPropertySupportedDVDFeaturesKey: &[u8; 13usize] = b"DVD Features\0";
pub const kIOPropertySupportedBDFeaturesKey: &[u8; 12usize] = b"BD Features\0";
pub const kIOPropertyRigidDiskGeometryKey: &[u8; 20usize] = b"Rigid Disk Geometry\0";
pub const kIOPropertySectorCountPerTrackKey: &[u8; 23usize] = b"Sector Count per Track\0";
pub const kIOPropertyHeadCountKey: &[u8; 11usize] = b"Head Count\0";
pub const kIOPropertyCylinderCountKey: &[u8; 15usize] = b"Cylinder Count\0";
pub const kIOPropertyBytesPerPhysicalSectorKey: &[u8; 26usize] = b"Bytes per Physical Sector\0";
pub const kIOPropertyPhysicalBlockSizeKey: &[u8; 20usize] = b"Physical Block Size\0";
pub const kIOPropertyLogicalBlockSizeKey: &[u8; 19usize] = b"Logical Block Size\0";
pub const kIOPropertyTargetDiskModeKey: &[u8; 17usize] = b"Target Disk Mode\0";
pub const kIOPropertyInvalidStartupDiskKey: &[u8; 21usize] = b"Invalid Startup Disk\0";
pub const kIOPropertyMediumTypeKey: &[u8; 12usize] = b"Medium Type\0";
pub const kIOPropertyMediumTypeRotationalKey: &[u8; 11usize] = b"Rotational\0";
pub const kIOPropertyMediumTypeSolidStateKey: &[u8; 12usize] = b"Solid State\0";
pub const kIOPropertyMediumRotationRateKey: &[u8; 14usize] = b"Rotation Rate\0";
pub const kIOMessageTrayStateChange: u32 = 1761607733;
pub const kIOMessageTrayStateHasChanged: u32 = 1761607733;
pub const kIOMessageMediaAccessChange: u32 = 1761607734;
pub const kIOPropertySupportedCDFeatures: &[u8; 12usize] = b"CD Features\0";
pub const kIOPropertySupportedDVDFeatures: &[u8; 13usize] = b"DVD Features\0";
pub const kIOPropertySupportedBDFeatures: &[u8; 12usize] = b"BD Features\0";
pub const kIOPropertyLowPowerPolling: &[u8; 18usize] = b"Low Power Polling\0";
pub const kINQUIRY_VERSION_DESCRIPTOR_MaxCount: u32 = 8;
pub const kIOPropertySCSIPeripheralDeviceType: &[u8; 23usize] = b"Peripheral Device Type\0";
pub const kIOPropertySCSIPeripheralDeviceTypeSize: u32 = 8;
pub const kIOPropertyTPGSInfo: &[u8; 17usize] = b"TPGS Information\0";
pub const kIOPropertyHiSup: &[u8; 25usize] = b"Hierarchical LUN Support\0";
pub const kIOPropertyTPGSInfoSize: u32 = 8;
pub const kIOPropertySCSIVendorIdentification: &[u8; 22usize] = b"Vendor Identification\0";
pub const kIOPropertySCSIProductIdentification: &[u8; 23usize] = b"Product Identification\0";
pub const kIOPropertySCSIProductRevisionLevel: &[u8; 23usize] = b"Product Revision Level\0";
pub const kIOPropertySCSIINQUIRYUnitSerialNumber: &[u8; 27usize] = b"INQUIRY Unit Serial Number\0";
pub const kIOPropertySCSIINQUIRYDeviceIdentification: &[u8; 30usize] =
    b"INQUIRY Device Identification\0";
pub const kIOPropertySCSIINQUIRYDeviceIdCodeSet: &[u8; 9usize] = b"Code Set\0";
pub const kIOPropertySCSIINQUIRYDeviceIdType: &[u8; 16usize] = b"Identifier Type\0";
pub const kIOPropertySCSIINQUIRYDeviceIdAssociation: &[u8; 12usize] = b"Association\0";
pub const kIOPropertySCSIINQUIRYDeviceIdentifier: &[u8; 11usize] = b"Identifier\0";
pub const kIOPropertySATVendorIdentification: &[u8; 26usize] = b"SAT Vendor Identification\0";
pub const kIOPropertySATProductIdentification: &[u8; 27usize] = b"SAT Product Identification\0";
pub const kIOPropertySATProductRevisonLevel: &[u8; 27usize] = b"SAT Product Revision Level\0";
pub const kSCSICmdFieldMask1Bit: u32 = 1;
pub const kSCSICmdFieldMask2Bit: u32 = 3;
pub const kSCSICmdFieldMask3Bit: u32 = 7;
pub const kSCSICmdFieldMask4Bit: u32 = 15;
pub const kSCSICmdFieldMask5Bit: u32 = 31;
pub const kSCSICmdFieldMask6Bit: u32 = 63;
pub const kSCSICmdFieldMask7Bit: u32 = 127;
pub const kSCSICmdFieldMask1Byte: u32 = 255;
pub const kSCSICmdFieldMask9Bit: u32 = 511;
pub const kSCSICmdFieldMask10Bit: u32 = 1023;
pub const kSCSICmdFieldMask11Bit: u32 = 2047;
pub const kSCSICmdFieldMask12Bit: u32 = 4095;
pub const kSCSICmdFieldMask13Bit: u32 = 8191;
pub const kSCSICmdFieldMask14Bit: u32 = 16383;
pub const kSCSICmdFieldMask15Bit: u32 = 32767;
pub const kSCSICmdFieldMask2Byte: u32 = 65535;
pub const kSCSICmdFieldMask17Bit: u32 = 131071;
pub const kSCSICmdFieldMask18Bit: u32 = 262143;
pub const kSCSICmdFieldMask19Bit: u32 = 524287;
pub const kSCSICmdFieldMask20Bit: u32 = 1048575;
pub const kSCSICmdFieldMask21Bit: u32 = 2097151;
pub const kSCSICmdFieldMask22Bit: u32 = 4194303;
pub const kSCSICmdFieldMask23Bit: u32 = 8388607;
pub const kSCSICmdFieldMask3Byte: u32 = 16777215;
pub const kSCSICmdFieldMask25Bit: u32 = 33554431;
pub const kSCSICmdFieldMask26Bit: u32 = 67108863;
pub const kSCSICmdFieldMask27Bit: u32 = 134217727;
pub const kSCSICmdFieldMask28Bit: u32 = 268435455;
pub const kSCSICmdFieldMask29Bit: u32 = 536870911;
pub const kSCSICmdFieldMask30Bit: u32 = 1073741823;
pub const kSCSICmdFieldMask31Bit: u32 = 2147483647;
pub const kSCSICmdFieldMask4Byte: u32 = 4294967295;
pub const kSCSICmdFieldMask33Bit: u64 = 8589934591;
pub const kSCSICmdFieldMask34Bit: u64 = 17179869183;
pub const kSCSICmdFieldMask35Bit: u64 = 34359738367;
pub const kSCSICmdFieldMask36Bit: u64 = 68719476735;
pub const kSCSICmdFieldMask37Bit: u64 = 137438953471;
pub const kSCSICmdFieldMask38Bit: u64 = 274877906943;
pub const kSCSICmdFieldMask39Bit: u64 = 549755813887;
pub const kSCSICmdFieldMask5Byte: u64 = 1099511627775;
pub const kSCSICmdFieldMask41Bit: u64 = 2199023255551;
pub const kSCSICmdFieldMask42Bit: u64 = 4398046511103;
pub const kSCSICmdFieldMask43Bit: u64 = 8796093022207;
pub const kSCSICmdFieldMask44Bit: u64 = 17592186044415;
pub const kSCSICmdFieldMask45Bit: u64 = 35184372088831;
pub const kSCSICmdFieldMask46Bit: u64 = 70368744177663;
pub const kSCSICmdFieldMask47Bit: u64 = 140737488355327;
pub const kSCSICmdFieldMask6Byte: u64 = 281474976710655;
pub const kSCSICmdFieldMask49Bit: u64 = 562949953421311;
pub const kSCSICmdFieldMask50Bit: u64 = 1125899906842623;
pub const kSCSICmdFieldMask51Bit: u64 = 2251799813685247;
pub const kSCSICmdFieldMask52Bit: u64 = 4503599627370495;
pub const kSCSICmdFieldMask53Bit: u64 = 9007199254740991;
pub const kSCSICmdFieldMask54Bit: u64 = 18014398509481983;
pub const kSCSICmdFieldMask55Bit: u64 = 36028797018963967;
pub const kSCSICmdFieldMask7Byte: u64 = 72057594037927935;
pub const kSCSICmdFieldMask57Bit: u64 = 144115188075855871;
pub const kSCSICmdFieldMask58Bit: u64 = 288230376151711743;
pub const kSCSICmdFieldMask59Bit: u64 = 576460752303423487;
pub const kSCSICmdFieldMask60Bit: u64 = 1152921504606846975;
pub const kSCSICmdFieldMask61Bit: u64 = 2305843009213693951;
pub const kSCSICmdFieldMask62Bit: u64 = 4611686018427387903;
pub const kSCSICmdFieldMask63Bit: u64 = 9223372036854775807;
pub const kSCSICmdFieldMask8Byte: i32 = -1;
pub const kREPORT_CAPACITY_MaximumLBA: u32 = 4294967295;
pub const kREPORT_CAPACITY_16_MaximumLBA: i32 = -1;
pub const kREPORT_LUNS_HeaderSize: u32 = 8;
pub const OLD_UUIDS: u32 = 1;
pub const kIOPropertySCSITaskUserClientInstanceGUID: &[u8; 24usize] = b"SCSITaskUserClient GUID\0";
pub const kIOPropertySCSITaskDeviceCategory: &[u8; 23usize] = b"SCSITaskDeviceCategory\0";
pub const kIOPropertySCSITaskUserClientDevice: &[u8; 25usize] = b"SCSITaskUserClientDevice\0";
pub const kIOPropertySCSITaskAuthoringDevice: &[u8; 24usize] = b"SCSITaskAuthoringDevice\0";
pub const kIOSerialBSDServiceValue: &[u8; 18usize] = b"IOSerialBSDClient\0";
pub const kIOSerialBSDTypeKey: &[u8; 22usize] = b"IOSerialBSDClientType\0";
pub const kIOSerialBSDAllTypes: &[u8; 15usize] = b"IOSerialStream\0";
pub const kIOSerialBSDModemType: &[u8; 15usize] = b"IOSerialStream\0";
pub const kIOSerialBSDRS232Type: &[u8; 15usize] = b"IOSerialStream\0";
pub const kIOTTYDeviceKey: &[u8; 12usize] = b"IOTTYDevice\0";
pub const kIOTTYBaseNameKey: &[u8; 14usize] = b"IOTTYBaseName\0";
pub const kIOTTYSuffixKey: &[u8; 12usize] = b"IOTTYSuffix\0";
pub const kIOCalloutDeviceKey: &[u8; 16usize] = b"IOCalloutDevice\0";
pub const kIODialinDeviceKey: &[u8; 15usize] = b"IODialinDevice\0";
pub const kIOTTYWaitForIdleKey: &[u8; 17usize] = b"IOTTYWaitForIdle\0";
pub const kIOAppleLabelSchemeClass: &[u8; 19usize] = b"IOAppleLabelScheme\0";
pub const AL_MAGIC: u32 = 16716;
pub const AL_TYPE_DEFAULT: u32 = 0;
pub const AL_FLAG_DEFAULT: u32 = 0;
pub const kDVDSpeedMin: u32 = 1350;
pub const kDVDSpeedMax: u32 = 65535;
pub const kIOApplePartitionSchemeClass: &[u8; 23usize] = b"IOApplePartitionScheme\0";
pub const DPISTRLEN: u32 = 32;
pub const BLOCK0_SIGNATURE: u32 = 17746;
pub const DPME_SIGNATURE: u32 = 20557;
pub const DPME_FLAGS_VALID: u32 = 1;
pub const DPME_FLAGS_ALLOCATED: u32 = 2;
pub const DPME_FLAGS_IN_USE: u32 = 4;
pub const DPME_FLAGS_BOOTABLE: u32 = 8;
pub const DPME_FLAGS_READABLE: u32 = 16;
pub const DPME_FLAGS_WRITABLE: u32 = 32;
pub const DPME_FLAGS_OS_PIC_CODE: u32 = 64;
pub const DPME_FLAGS_OS_SPECIFIC_2: u32 = 128;
pub const DPME_FLAGS_OS_SPECIFIC_1: u32 = 256;
pub const DPME_FLAGS_RESERVED_2: u32 = 4294966784;
pub const kBDSpeedMin: u32 = 4390;
pub const kBDSpeedMax: u32 = 65535;
pub const kIOBDBlockStorageDeviceClass: &[u8; 23usize] = b"IOBDBlockStorageDevice\0";
pub const kIOFDiskPartitionSchemeClass: &[u8; 23usize] = b"IOFDiskPartitionScheme\0";
pub const DISK_BOOTSZ: u32 = 446;
pub const DISK_NPART: u32 = 4;
pub const DISK_SIGNATURE: u32 = 43605;
pub const FDISK_PARTITION_TYPE_01: &[u8; 11usize] = b"DOS_FAT_12\0";
pub const FDISK_PARTITION_TYPE_04: &[u8; 13usize] = b"DOS_FAT_16_S\0";
pub const FDISK_PARTITION_TYPE_06: &[u8; 11usize] = b"DOS_FAT_16\0";
pub const FDISK_PARTITION_TYPE_07: &[u8; 13usize] = b"Windows_NTFS\0";
pub const FDISK_PARTITION_TYPE_0B: &[u8; 11usize] = b"DOS_FAT_32\0";
pub const FDISK_PARTITION_TYPE_0C: &[u8; 15usize] = b"Windows_FAT_32\0";
pub const FDISK_PARTITION_TYPE_0E: &[u8; 15usize] = b"Windows_FAT_16\0";
pub const FDISK_PARTITION_TYPE_42: &[u8; 12usize] = b"Windows_LDM\0";
pub const FDISK_PARTITION_TYPE_82: &[u8; 11usize] = b"Linux_Swap\0";
pub const FDISK_PARTITION_TYPE_83: &[u8; 6usize] = b"Linux\0";
pub const FDISK_PARTITION_TYPE_8E: &[u8; 10usize] = b"Linux_LVM\0";
pub const FDISK_PARTITION_TYPE_A5: &[u8; 8usize] = b"FreeBSD\0";
pub const FDISK_PARTITION_TYPE_A6: &[u8; 8usize] = b"OpenBSD\0";
pub const FDISK_PARTITION_TYPE_A7: &[u8; 19usize] = b"Apple_Rhapsody_UFS\0";
pub const FDISK_PARTITION_TYPE_A8: &[u8; 10usize] = b"Apple_UFS\0";
pub const FDISK_PARTITION_TYPE_A9: &[u8; 7usize] = b"NetBSD\0";
pub const FDISK_PARTITION_TYPE_AB: &[u8; 11usize] = b"Apple_Boot\0";
pub const FDISK_PARTITION_TYPE_AE: &[u8; 16usize] = b"Apple_Encrypted\0";
pub const FDISK_PARTITION_TYPE_AF: &[u8; 10usize] = b"Apple_HFS\0";
pub const FDISK_PARTITION_TYPE_FD: &[u8; 11usize] = b"Linux_RAID\0";
pub const kIOBDMediaClass: &[u8; 10usize] = b"IOBDMedia\0";
pub const kIOBDMediaTypeKey: &[u8; 5usize] = b"Type\0";
pub const kIOBDMediaTypeROM: &[u8; 7usize] = b"BD-ROM\0";
pub const kIOBDMediaTypeR: &[u8; 5usize] = b"BD-R\0";
pub const kIOBDMediaTypeRE: &[u8; 6usize] = b"BD-RE\0";
pub const kIOFilterSchemeClass: &[u8; 15usize] = b"IOFilterScheme\0";
pub const kIOPropertyBridgeCharacteristicsKey: &[u8; 23usize] = b"Bridge Characteristics\0";
pub const kIOPropertyBridgeVendorNameKey: &[u8; 19usize] = b"Bridge Vendor Name\0";
pub const kIOPropertyBridgeModelNameKey: &[u8; 18usize] = b"Bridge Model Name\0";
pub const kIOPropertyBridgeRevisionLevelKey: &[u8; 22usize] = b"Bridge Revision Level\0";
pub const kIOGUIDPartitionSchemeClass: &[u8; 22usize] = b"IOGUIDPartitionScheme\0";
pub const GPT_HDR_SIG: &[u8; 9usize] = b"EFI PART\0";
pub const GPT_HDR_REVISION: u32 = 65536;
pub const GPT_ENT_ATTR_PLATFORM: u32 = 1;
pub const kIOGUIDPartitionSchemeUUIDKey: &[u8; 5usize] = b"UUID\0";
pub const kIOMediaGPTPartitionAttributesKey: &[u8; 15usize] = b"GPT Attributes\0";
pub const kIOBlockStorageDeviceClass: &[u8; 21usize] = b"IOBlockStorageDevice\0";
pub const kIOBlockStorageDeviceWriteCacheStateKey: &[u8; 16usize] = b"WriteCacheState\0";
pub const kIOMediaClass: &[u8; 8usize] = b"IOMedia\0";
pub const kIOMediaContentKey: &[u8; 8usize] = b"Content\0";
pub const kIOMediaContentHintKey: &[u8; 13usize] = b"Content Hint\0";
pub const kIOMediaEjectableKey: &[u8; 10usize] = b"Ejectable\0";
pub const kIOMediaLeafKey: &[u8; 5usize] = b"Leaf\0";
pub const kIOMediaOpenKey: &[u8; 5usize] = b"Open\0";
pub const kIOMediaPreferredBlockSizeKey: &[u8; 21usize] = b"Preferred Block Size\0";
pub const kIOMediaRemovableKey: &[u8; 10usize] = b"Removable\0";
pub const kIOMediaSizeKey: &[u8; 5usize] = b"Size\0";
pub const kIOMediaUUIDKey: &[u8; 5usize] = b"UUID\0";
pub const kIOMediaWholeKey: &[u8; 6usize] = b"Whole\0";
pub const kIOMediaWritableKey: &[u8; 9usize] = b"Writable\0";
pub const kIOMediaContentMaskKey: &[u8; 13usize] = b"Content Mask\0";
pub const kIOMediaIconKey: &[u8; 12usize] = b"IOMediaIcon\0";
pub const kIOMediaInvalidStartupDiskKey: &[u8; 21usize] = b"Invalid Startup Disk\0";
pub const kIOBlockStorageDriverClass: &[u8; 21usize] = b"IOBlockStorageDriver\0";
pub const kIOBlockStorageDriverStatisticsKey: &[u8; 11usize] = b"Statistics\0";
pub const kIOBlockStorageDriverStatisticsBytesReadKey: &[u8; 13usize] = b"Bytes (Read)\0";
pub const kIOBlockStorageDriverStatisticsBytesWrittenKey: &[u8; 14usize] = b"Bytes (Write)\0";
pub const kIOBlockStorageDriverStatisticsReadErrorsKey: &[u8; 14usize] = b"Errors (Read)\0";
pub const kIOBlockStorageDriverStatisticsWriteErrorsKey: &[u8; 15usize] = b"Errors (Write)\0";
pub const kIOBlockStorageDriverStatisticsLatentReadTimeKey: &[u8; 20usize] =
    b"Latency Time (Read)\0";
pub const kIOBlockStorageDriverStatisticsLatentWriteTimeKey: &[u8; 21usize] =
    b"Latency Time (Write)\0";
pub const kIOBlockStorageDriverStatisticsReadsKey: &[u8; 18usize] = b"Operations (Read)\0";
pub const kIOBlockStorageDriverStatisticsWritesKey: &[u8; 19usize] = b"Operations (Write)\0";
pub const kIOBlockStorageDriverStatisticsReadRetriesKey: &[u8; 15usize] = b"Retries (Read)\0";
pub const kIOBlockStorageDriverStatisticsWriteRetriesKey: &[u8; 16usize] = b"Retries (Write)\0";
pub const kIOBlockStorageDriverStatisticsTotalReadTimeKey: &[u8; 18usize] = b"Total Time (Read)\0";
pub const kIOBlockStorageDriverStatisticsTotalWriteTimeKey: &[u8; 19usize] =
    b"Total Time (Write)\0";
pub const kCDMCNMaxLength: u32 = 13;
pub const kCDISRCMaxLength: u32 = 12;
pub const kCDAudioStatusUnsupported: u32 = 0;
pub const kCDAudioStatusActive: u32 = 17;
pub const kCDAudioStatusPaused: u32 = 18;
pub const kCDAudioStatusSuccess: u32 = 19;
pub const kCDAudioStatusFailure: u32 = 20;
pub const kCDAudioStatusNone: u32 = 21;
pub const kCDSpeedMin: u32 = 176;
pub const kCDSpeedMax: u32 = 65535;
pub const kIOCDBlockStorageDeviceClass: &[u8; 23usize] = b"IOCDBlockStorageDevice\0";
pub const kIOPartitionSchemeClass: &[u8; 18usize] = b"IOPartitionScheme\0";
pub const kIOMediaBaseKey: &[u8; 5usize] = b"Base\0";
pub const kIOMediaLiveKey: &[u8; 5usize] = b"Live\0";
pub const kIOMediaPartitionIDKey: &[u8; 13usize] = b"Partition ID\0";
pub const kIOCDMediaClass: &[u8; 10usize] = b"IOCDMedia\0";
pub const kIOCDMediaTOCKey: &[u8; 4usize] = b"TOC\0";
pub const kIOCDMediaTypeKey: &[u8; 5usize] = b"Type\0";
pub const kIOCDMediaTypeROM: &[u8; 7usize] = b"CD-ROM\0";
pub const kIOCDMediaTypeR: &[u8; 5usize] = b"CD-R\0";
pub const kIOCDMediaTypeRW: &[u8; 6usize] = b"CD-RW\0";
pub const kIOStorageClass: &[u8; 10usize] = b"IOStorage\0";
pub const kIOStorageCategory: &[u8; 10usize] = b"IOStorage\0";
pub const kIOStorageFeaturesKey: &[u8; 18usize] = b"IOStorageFeatures\0";
pub const kIOStorageFeatureBarrier: &[u8; 8usize] = b"Barrier\0";
pub const kIOStorageFeatureForceUnitAccess: &[u8; 18usize] = b"Force Unit Access\0";
pub const kIOStorageFeaturePriority: &[u8; 9usize] = b"Priority\0";
pub const kIOStorageFeatureUnmap: &[u8; 6usize] = b"Unmap\0";
pub const kIOPropertyCardCharacteristicsKey: &[u8; 21usize] = b"Card Characteristics\0";
pub const kIOPropertySlotKey: &[u8; 5usize] = b"Slot\0";
pub const kIOProperty64BitKey: &[u8; 7usize] = b"64-bit\0";
pub const kIOPropertyClockDivisorKey: &[u8; 14usize] = b"Clock Divisor\0";
pub const kIOPropertyBaseFrequencyKey: &[u8; 15usize] = b"Base Frequency\0";
pub const kIOPropertyBusVoltageKey: &[u8; 12usize] = b"Bus Voltage\0";
pub const kIOPropertyBusWidthKey: &[u8; 10usize] = b"Bus Width\0";
pub const kIOPropertyCardPresentKey: &[u8; 13usize] = b"Card Present\0";
pub const kIOPropertyManufacturerIDKey: &[u8; 16usize] = b"Manufacturer ID\0";
pub const kIOPropertyApplicationIDKey: &[u8; 15usize] = b"Application ID\0";
pub const kIOPropertyManufacturingDateKey: &[u8; 19usize] = b"Manufacturing Date\0";
pub const kIOPropertySpeedClassKey: &[u8; 12usize] = b"Speed Class\0";
pub const kIOPropertySpecificationVersionKey: &[u8; 22usize] = b"Specification Version\0";
pub const kIOPropertyCardTypeKey: &[u8; 10usize] = b"Card Type\0";
pub const kIOPropertyCardTypeMMCKey: &[u8; 4usize] = b"MMC\0";
pub const kIOPropertyCardTypeSDSCKey: &[u8; 5usize] = b"SDSC\0";
pub const kIOPropertyCardTypeSDHCKey: &[u8; 5usize] = b"SDHC\0";
pub const kIOPropertyCardTypeSDXCKey: &[u8; 5usize] = b"SDXC\0";
pub const kIOCDPartitionSchemeClass: &[u8; 20usize] = b"IOCDPartitionScheme\0";
pub const kIOMediaSessionIDKey: &[u8; 11usize] = b"Session ID\0";
pub const kIODVDBlockStorageDeviceClass: &[u8; 24usize] = b"IODVDBlockStorageDevice\0";
pub const kIODVDMediaClass: &[u8; 11usize] = b"IODVDMedia\0";
pub const kIODVDMediaTypeKey: &[u8; 5usize] = b"Type\0";
pub const kIODVDMediaTypeROM: &[u8; 8usize] = b"DVD-ROM\0";
pub const kIODVDMediaTypeR: &[u8; 6usize] = b"DVD-R\0";
pub const kIODVDMediaTypeRW: &[u8; 7usize] = b"DVD-RW\0";
pub const kIODVDMediaTypePlusR: &[u8; 6usize] = b"DVD+R\0";
pub const kIODVDMediaTypePlusRW: &[u8; 7usize] = b"DVD+RW\0";
pub const kIODVDMediaTypeRAM: &[u8; 8usize] = b"DVD-RAM\0";
pub const kIODVDMediaTypeHDROM: &[u8; 11usize] = b"HD DVD-ROM\0";
pub const kIODVDMediaTypeHDR: &[u8; 9usize] = b"HD DVD-R\0";
pub const kIODVDMediaTypeHDRW: &[u8; 10usize] = b"HD DVD-RW\0";
pub const kIODVDMediaTypeHDRAM: &[u8; 11usize] = b"HD DVD-RAM\0";
pub const kIOPropertySMARTCapableKey: &[u8; 14usize] = b"SMART Capable\0";
pub const kIOATASupportedFeaturesKey: &[u8; 13usize] = b"ATA Features\0";
pub const kIOStreamBufferIDInvalid: i32 = -1;
pub const kIOUSB30Bitrate5Gbps: u64 = 5000000000;
pub const kIOUSB30Bitrate10Gbps: u64 = 10000000000;
pub const kIOUSB32Bitrate20Gbps: u64 = 20000000000;
pub const kIOUSBTransportDextEntitlement: &[u8; 44usize] =
    b"com.apple.developer.driverkit.transport.usb\0";
pub const kIOUSBHostVMEntitlement: &[u8; 27usize] = b"com.apple.vm.device-access\0";
pub const kIOUSBHostControllerInterfaceEntitlement: &[u8; 50usize] =
    b"com.apple.developer.usb.host-controller-interface\0";
pub const kIOUSBBillboardEntitlement: &[u8; 34usize] = b"com.apple.developer.usb.billboard\0";
pub const kUSBHostMatchingPropertySpeed: &[u8; 9usize] = b"USBSpeed\0";
pub const kUSBHostMatchingPropertyPortType: &[u8; 12usize] = b"USBPortType\0";
pub const kUSBHostMatchingPropertyVendorID: &[u8; 9usize] = b"idVendor\0";
pub const kUSBHostMatchingPropertyProductID: &[u8; 10usize] = b"idProduct\0";
pub const kUSBHostMatchingPropertyProductIDMask: &[u8; 14usize] = b"idProductMask\0";
pub const kUSBHostMatchingPropertyProductIDArray: &[u8; 15usize] = b"idProductArray\0";
pub const kUSBHostMatchingPropertyDeviceClass: &[u8; 13usize] = b"bDeviceClass\0";
pub const kUSBHostMatchingPropertyDeviceSubClass: &[u8; 16usize] = b"bDeviceSubClass\0";
pub const kUSBHostMatchingPropertyDeviceProtocol: &[u8; 16usize] = b"bDeviceProtocol\0";
pub const kUSBHostMatchingPropertyDeviceReleaseNumber: &[u8; 10usize] = b"bcdDevice\0";
pub const kUSBHostMatchingPropertyConfigurationValue: &[u8; 20usize] = b"bConfigurationValue\0";
pub const kUSBHostMatchingPropertyInterfaceClass: &[u8; 16usize] = b"bInterfaceClass\0";
pub const kUSBHostMatchingPropertyInterfaceSubClass: &[u8; 19usize] = b"bInterfaceSubClass\0";
pub const kUSBHostMatchingPropertyInterfaceProtocol: &[u8; 19usize] = b"bInterfaceProtocol\0";
pub const kUSBHostMatchingPropertyInterfaceNumber: &[u8; 17usize] = b"bInterfaceNumber\0";
pub const kUSBHostPropertyLocationID: &[u8; 11usize] = b"locationID\0";
pub const kUSBHostPropertyDebugOptions: &[u8; 17usize] = b"kUSBDebugOptions\0";
pub const kUSBHostPropertyWakePowerSupply: &[u8; 20usize] = b"kUSBWakePowerSupply\0";
pub const kUSBHostPropertySleepPowerSupply: &[u8; 21usize] = b"kUSBSleepPowerSupply\0";
pub const kUSBHostPropertyWakePortCurrentLimit: &[u8; 25usize] = b"kUSBWakePortCurrentLimit\0";
pub const kUSBHostPropertySleepPortCurrentLimit: &[u8; 26usize] = b"kUSBSleepPortCurrentLimit\0";
pub const kUSBHostPropertyFailedRemoteWake: &[u8; 21usize] = b"kUSBFailedRemoteWake\0";
pub const kUSBHostPropertyBusCurrentPoolID: &[u8; 20usize] = b"UsbBusCurrentPoolID\0";
pub const kUSBHostPropertySmcBusCurrentPoolID: &[u8; 23usize] = b"UsbSmcBusCurrentPoolID\0";
pub const kUSBHostPropertyForcePower: &[u8; 14usize] = b"UsbForcePower\0";
pub const kUSBHostPropertyForceLinkSpeed: &[u8; 13usize] = b"UsbLinkSpeed\0";
pub const kUSBHostPropertyForceHardwareException: &[u8; 21usize] = b"UsbHardwareException\0";
pub const kUSBHostPropertyAllowSoftRetry: &[u8; 18usize] = b"UsbAllowSoftRetry\0";
pub const kUSBHostUserClientPropertyOwningTaskName: &[u8; 28usize] =
    b"UsbUserClientOwningTaskName\0";
pub const kUSBHostUserClientPropertyEntitlementRequired: &[u8; 33usize] =
    b"UsbUserClientEntitlementRequired\0";
pub const kUSBHostUserClientPropertyEnableReset: &[u8; 25usize] = b"UsbUserClientEnableReset\0";
pub const kUSBHostUserClientPropertyEnableDataToggleReset: &[u8; 35usize] =
    b"UsbUserClientEnableDataToggleReset\0";
pub const kUSBHostDevicePropertyVendorString: &[u8; 17usize] = b"kUSBVendorString\0";
pub const kUSBHostDevicePropertySerialNumberString: &[u8; 23usize] = b"kUSBSerialNumberString\0";
pub const kUSBHostDevicePropertyContainerID: &[u8; 16usize] = b"kUSBContainerID\0";
pub const kUSBHostDevicePropertyFailedRequestedPower: &[u8; 25usize] =
    b"kUSBFailedRequestedPower\0";
pub const kUSBHostDevicePropertyResumeRecoveryTime: &[u8; 23usize] = b"kUSBResumeRecoveryTime\0";
pub const kUSBHostDevicePropertyPreferredConfiguration: &[u8; 27usize] =
    b"kUSBPreferredConfiguration\0";
pub const kUSBHostDevicePropertyPreferredRecoveryConfiguration: &[u8; 35usize] =
    b"kUSBPreferredRecoveryConfiguration\0";
pub const kUSBHostDevicePropertyCurrentConfiguration: &[u8; 25usize] =
    b"kUSBCurrentConfiguration\0";
pub const kUSBHostDevicePropertyRemoteWakeOverride: &[u8; 23usize] = b"kUSBRemoteWakeOverride\0";
pub const kUSBHostDevicePropertyConfigurationDescriptorOverride: &[u8; 36usize] =
    b"kUSBConfigurationDescriptorOverride\0";
pub const kUSBHostDevicePropertyDeviceDescriptorOverride: &[u8; 29usize] =
    b"kUSBDeviceDescriptorOverride\0";
pub const kUSBHostDevicePropertyConfigurationCurrentOverride: &[u8; 33usize] =
    b"kUSBConfigurationCurrentOverride\0";
pub const kUSBHostDevicePropertyResetDurationOverride: &[u8; 26usize] =
    b"kUSBResetDurationOverride\0";
pub const kUSBHostDevicePropertyDesiredChargingCurrent: &[u8; 27usize] =
    b"kUSBDesiredChargingCurrent\0";
pub const kUSBHostDevicePropertyDescriptorOverride: &[u8; 23usize] = b"kUSBDescriptorOverride\0";
pub const kUSBHostDescriptorOverrideVendorStringIndex: &[u8; 39usize] =
    b"UsbDescriptorOverrideVendorStringIndex\0";
pub const kUSBHostDescriptorOverrideProductStringIndex: &[u8; 40usize] =
    b"UsbDescriptorOverrideProductStringIndex\0";
pub const kUSBHostDescriptorOverrideSerialNumberStringIndex: &[u8; 45usize] =
    b"UsbDescriptorOverrideSerialNumberStringIndex\0";
pub const kUSBHostDevicePropertyDeviceECID: &[u8; 15usize] = b"kUSBDeviceECID\0";
pub const kUSBHostDevicePropertyEnableLPM: &[u8; 23usize] = b"UsbLinkPowerManagement\0";
pub const kUSBHostDevicePropertyDisablePortLPM: &[u8; 29usize] = b"kUSBHostDeviceDisablePortLPM\0";
pub const kUSBHostDevicePropertyStreamsSupported: &[u8; 20usize] = b"UsbStreamsSupported\0";
pub const kUSBHostDevicePropertyEnumerationState: &[u8; 20usize] = b"UsbEnumerationState\0";
pub const kUSBHostDevicePropertySignature: &[u8; 19usize] = b"UsbDeviceSignature\0";
pub const kUSBHostDevicePropertyTunnel: &[u8; 10usize] = b"UsbTunnel\0";
pub const kUSBHostBillboardDevicePropertyNumberOfAlternateModes: &[u8; 24usize] =
    b"bNumberOfAlternateModes\0";
pub const kUSBHostBillboardDevicePropertyPreferredAlternateMode: &[u8; 24usize] =
    b"bPreferredAlternateMode\0";
pub const kUSBHostBillboardDevicePropertyVCONNPower: &[u8; 11usize] = b"VCONNPower\0";
pub const kUSBHostBillboardDevicePropertyConfigured: &[u8; 13usize] = b"bmConfigured\0";
pub const kUSBHostBillboardDevicePropertyAdditionalFailureInfo: &[u8; 22usize] =
    b"bAdditonalFailureInfo\0";
pub const kUSBHostBillboardDevicePropertyBcdVersion: &[u8; 11usize] = b"BcdVersion\0";
pub const kUSBHostBillboardDevicePropertySVID: &[u8; 6usize] = b"wSVID\0";
pub const kUSBHostBillboardDevicePropertyAlternateMode: &[u8; 15usize] = b"bAlternateMode\0";
pub const kUSBHostBillboardDevicePropertyAlternateModeStringIndex: &[u8; 21usize] =
    b"iAlternateModeString\0";
pub const kUSBHostBillboardDevicePropertyAlternateModeString: &[u8; 20usize] =
    b"AlternateModeString\0";
pub const kUSBHostBillboardDevicePropertyAddtionalInfoURLIndex: &[u8; 18usize] =
    b"iAddtionalInfoURL\0";
pub const kUSBHostBillboardDevicePropertyAddtionalInfoURL: &[u8; 17usize] = b"AddtionalInfoURL\0";
pub const kUSBHostBillboardDevicePropertydwAlternateModeVdo: &[u8; 19usize] =
    b"dwAlternateModeVdo\0";
pub const kUSBHostInterfacePropertyAlternateSetting: &[u8; 18usize] = b"bAlternateSetting\0";
pub const kUSBHostPortPropertyStatus: &[u8; 12usize] = b"port-status\0";
pub const kUSBHostPortPropertyOvercurrent: &[u8; 23usize] = b"UsbHostPortOvercurrent\0";
pub const kUSBHostPortPropertyPortNumber: &[u8; 5usize] = b"port\0";
pub const kUSBHostPortPropertyRemovable: &[u8; 10usize] = b"removable\0";
pub const kUSBHostPortPropertyTestMode: &[u8; 13usize] = b"kUSBTestMode\0";
pub const kUSBHostPortPropertyUsb3ComplianceMode: &[u8; 39usize] =
    b"kUSBHostPortPropertyUsb3ComplianceMode\0";
pub const kUSBHostPortPropertySimulateInterrupt: &[u8; 22usize] = b"kUSBSimulateInterrupt\0";
pub const kUSBHostPortPropertyBusCurrentAllocation: &[u8; 25usize] = b"kUSBBusCurrentAllocation\0";
pub const kUSBHostPortPropertyBusCurrentSleepAllocation: &[u8; 30usize] =
    b"kUSBBusCurrentSleepAllocation\0";
pub const kUSBHostPortPropertyConnectable: &[u8; 15usize] = b"UsbConnectable\0";
pub const kUSBHostPortPropertyConnectorType: &[u8; 13usize] = b"UsbConnector\0";
pub const kUSBHostPortPropertyMux: &[u8; 7usize] = b"UsbMux\0";
pub const kUSBHostPortPropertyCompanionIndex: &[u8; 19usize] = b"kUSBCompanionIndex\0";
pub const kUSBHostPortPropertyDisconnectInterval: &[u8; 23usize] = b"kUSBDisconnectInterval\0";
pub const kUSBHostPortPropertyUsbCPortNumber: &[u8; 15usize] = b"UsbCPortNumber\0";
pub const kUSBHostPortPropertyCompanionPortNumber: &[u8; 23usize] = b"UsbCompanionPortNumber\0";
pub const kUSBHostPortPropertyPowerSource: &[u8; 15usize] = b"UsbPowerSource\0";
pub const kUSBHostPortPropertyUSB3Mode: &[u8; 9usize] = b"Usb3Mode\0";
pub const kUSBHostPortPropertyExternalDeviceResetController: &[u8; 42usize] =
    b"kUSBHostPortExternalDeviceResetController\0";
pub const kUSBHostPortPropertyExternalDevicePowerController: &[u8; 42usize] =
    b"kUSBHostPortExternalDevicePowerController\0";
pub const kUSBHostPortPropertyCardReader: &[u8; 31usize] = b"kUSBHostPortPropertyCardReader\0";
pub const kUSBHostPortPropertyCardReaderValidateDescriptors: &[u8; 50usize] =
    b"kUSBHostPortPropertyCardReaderValidateDescriptors\0";
pub const kUSBHostPortPropertyLinkSpeedLimit: &[u8; 26usize] = b"UsbHostPortLinkSpeedLimit\0";
pub const kUSBHostHubPropertyPowerSupply: &[u8; 19usize] = b"kUSBHubPowerSupply\0";
pub const kUSBHostHubPropertyIdlePolicy: &[u8; 18usize] = b"kUSBHubIdlePolicy\0";
pub const kUSBHostHubPropertyStartupDelay: &[u8; 20usize] = b"kUSBHubStartupDelay\0";
pub const kUSBHostHubPropertyPortSequenceDelay: &[u8; 25usize] = b"kUSBHubPortSequenceDelay\0";
pub const kUSBHostHubPropertyHubPowerSupplyType: &[u8; 23usize] = b"kUSBHubPowerSupplyType\0";
pub const kUSBHostControllerPropertyIsochronousRequiresContiguous: &[u8; 34usize] =
    b"kUSBIsochronousRequiresContiguous\0";
pub const kUSBHostControllerPropertySleepSupported: &[u8; 19usize] = b"kUSBSleepSupported\0";
pub const kUSBHostControllerPropertyRTD3Supported: &[u8; 17usize] = b"UsbRTD3Supported\0";
pub const kUSBHostControllerPropertyMuxEnabled: &[u8; 15usize] = b"kUSBMuxEnabled\0";
pub const kUSBHostControllerPropertyCompanion: &[u8; 14usize] = b"kUSBCompanion\0";
pub const kUSBHostControllerPropertyLowSpeedCompanion: &[u8; 22usize] = b"kUSBLowSpeedCompanion\0";
pub const kUSBHostControllerPropertyFullSpeedCompanion: &[u8; 23usize] =
    b"kUSBFullSpeedCompanion\0";
pub const kUSBHostControllerPropertyHighSpeedCompanion: &[u8; 23usize] =
    b"kUSBHighSpeedCompanion\0";
pub const kUSBHostControllerPropertySuperSpeedCompanion: &[u8; 24usize] =
    b"kUSBSuperSpeedCompanion\0";
pub const kUSBHostControllerPropertyRevision: &[u8; 9usize] = b"Revision\0";
pub const kUSBHostControllerPropertyCompanionControllerName: &[u8; 27usize] =
    b"UsbCompanionControllerName\0";
pub const kUSBHostControllerPropertyDisableWakeSources: &[u8; 36usize] =
    b"UsbHostControllerDisableWakeSources\0";
pub const kUSBHostControllerPropertyPersistFullSpeedIsochronous: &[u8; 45usize] =
    b"UsbHostControllerPersistFullSpeedIsochronous\0";
pub const kUSBHostControllerPropertyDeferRegisterService: &[u8; 38usize] =
    b"UsbHostControllerDeferRegisterService\0";
pub const kUSBHostControllerPropertyStreamPolicy: &[u8; 30usize] =
    b"UsbHostControllerStreamPolicy\0";
pub const kUSBHostControllerPropertyUSB2LPMPolicy: &[u8; 31usize] =
    b"UsbHostControllerUSB2LPMPolicy\0";
pub const kUSBHostControllerPropertyUSB3LPMPolicy: &[u8; 31usize] =
    b"UsbHostControllerUSB3LPMPolicy\0";
pub const kUSBHostControllerPropertyUSB4LPMPolicy: &[u8; 31usize] =
    b"UsbHostControllerUSB4LPMPolicy\0";
pub const kUSBHostControllerPropertyTierLimit: &[u8; 27usize] = b"UsbHostControllerTierLimit\0";
pub const kUSBHostControllerPropertyInterruptRMBS: &[u8; 31usize] =
    b"UsbHostControllerInterruptRMBS\0";
pub const kUSBHostControllerPropertyIsochronousRMBS: &[u8; 33usize] =
    b"UsbHostControllerIsochronousRMBS\0";
pub const kIOUSBHostDeviceClassName: &[u8; 16usize] = b"IOUSBHostDevice\0";
pub const kIOUSBHostInterfaceClassName: &[u8; 19usize] = b"IOUSBHostInterface\0";
pub const kUSBHostDevicePropertyAddress: &[u8; 12usize] = b"kUSBAddress\0";
pub const kUSBHostDevicePropertyManufacturerStringIndex: &[u8; 14usize] = b"iManufacturer\0";
pub const kUSBHostDevicePropertySerialNumberStringIndex: &[u8; 14usize] = b"iSerialNumber\0";
pub const kUSBHostDevicePropertyProductStringIndex: &[u8; 9usize] = b"iProduct\0";
pub const kUSBHostDevicePropertyProductString: &[u8; 18usize] = b"kUSBProductString\0";
pub const kUSBHostDevicePropertyNumConfigs: &[u8; 19usize] = b"bNumConfigurations\0";
pub const kUSBHostDevicePropertyMaxPacketSize: &[u8; 16usize] = b"bMaxPacketSize0\0";
pub const kUSBHostDevicePropertyStandardVersion: &[u8; 7usize] = b"bcdUSB\0";
pub const kUSBHostInterfacePropertyStringIndex: &[u8; 11usize] = b"iInterface\0";
pub const kUSBHostInterfacePropertyString: &[u8; 11usize] = b"kUSBString\0";
pub const kUSBHostInterfacePropertyNumEndpoints: &[u8; 14usize] = b"bNumEndpoints\0";
pub const kAppleMaxPortCurrent: &[u8; 23usize] = b"AAPL,current-available\0";
pub const kAppleCurrentExtra: &[u8; 19usize] = b"AAPL,current-extra\0";
pub const kAppleMaxPortCurrentInSleep: &[u8; 31usize] = b"AAPL,max-port-current-in-sleep\0";
pub const kAppleCurrentExtraInSleep: &[u8; 28usize] = b"AAPL,current-extra-in-sleep\0";
pub const kAppleExternalConnectorBitmap: &[u8; 29usize] = b"AAPL,ExternalConnectorBitmap\0";
pub const kUSBBillboardVConnNoPowerReq: u32 = 15;
pub const kUSBDeviceClass: &[u8; 13usize] = b"bDeviceClass\0";
pub const kUSBDeviceSubClass: &[u8; 16usize] = b"bDeviceSubClass\0";
pub const kUSBDeviceProtocol: &[u8; 16usize] = b"bDeviceProtocol\0";
pub const kUSBDeviceMaxPacketSize: &[u8; 16usize] = b"bMaxPacketSize0\0";
pub const kUSBVendorID: &[u8; 9usize] = b"idVendor\0";
pub const kUSBVendorName: &[u8; 9usize] = b"idVendor\0";
pub const kUSBProductID: &[u8; 10usize] = b"idProduct\0";
pub const kUSBProductName: &[u8; 10usize] = b"idProduct\0";
pub const kUSBDeviceReleaseNumber: &[u8; 10usize] = b"bcdDevice\0";
pub const kUSBManufacturerStringIndex: &[u8; 14usize] = b"iManufacturer\0";
pub const kUSBProductStringIndex: &[u8; 9usize] = b"iProduct\0";
pub const kUSBSerialNumberStringIndex: &[u8; 14usize] = b"iSerialNumber\0";
pub const kUSBDeviceNumConfigs: &[u8; 19usize] = b"bNumConfigurations\0";
pub const kUSBInterfaceNumber: &[u8; 17usize] = b"bInterfaceNumber\0";
pub const kUSBAlternateSetting: &[u8; 18usize] = b"bAlternateSetting\0";
pub const kUSBNumEndpoints: &[u8; 14usize] = b"bNumEndpoints\0";
pub const kUSBInterfaceClass: &[u8; 16usize] = b"bInterfaceClass\0";
pub const kUSBInterfaceSubClass: &[u8; 19usize] = b"bInterfaceSubClass\0";
pub const kUSBInterfaceProtocol: &[u8; 19usize] = b"bInterfaceProtocol\0";
pub const kUSBInterfaceStringIndex: &[u8; 11usize] = b"iInterface\0";
pub const kUSBConfigurationValue: &[u8; 20usize] = b"bConfigurationValue\0";
pub const kUSBInterfaceString: &[u8; 11usize] = b"kUSBString\0";
pub const kUSB1284DeviceID: &[u8; 15usize] = b"1284 Device ID\0";
pub const kUSBCompatibilityMatch: &[u8; 22usize] = b"USBCompatibilityMatch\0";
pub const kUSBStandardVersion: &[u8; 7usize] = b"bcdUSB\0";
pub const kUSBSpecReleaseNumber: &[u8; 7usize] = b"bcdUSB\0";
pub const kUSBContainerID: &[u8; 16usize] = b"kUSBContainerID\0";
pub const kUSBProductString: &[u8; 18usize] = b"kUSBProductString\0";
pub const kUSBVendorString: &[u8; 17usize] = b"kUSBVendorString\0";
pub const kUSBSerialNumberString: &[u8; 23usize] = b"kUSBSerialNumberString\0";
pub const kCallInterfaceOpenWithGate: &[u8; 27usize] = b"kCallInterfaceOpenWithGate\0";
pub const kUSBDevicePropertyBusPowerAvailable: &[u8; 20usize] = b"Bus Power Available\0";
pub const kUSBDevicePropertyLocationID: &[u8; 11usize] = b"locationID\0";
pub const kUSBProductIDMask: &[u8; 14usize] = b"idProductMask\0";
pub const kUSBProductIdsArrayName: &[u8; 15usize] = b"idProductArray\0";
pub const kUSBSuspendPort: &[u8; 13usize] = b"kSuspendPort\0";
pub const kUSBExpressCardCantWake: &[u8; 20usize] = b"ExpressCardCantWake\0";
pub const kUSBDeviceResumeRecoveryTime: &[u8; 23usize] = b"kUSBResumeRecoveryTime\0";
pub const kUSBOutOfSpecMPSOK: &[u8; 19usize] = b"Out of spec MPS OK\0";
pub const kOverrideIfAtLocationID: &[u8; 23usize] = b"OverrideIfAtLocationID\0";
pub const kUSBDeviceCurrentConfiguration: &[u8; 25usize] = b"kUSBCurrentConfiguration\0";
pub const kUSBDeviceRemoteWakeOverride: &[u8; 23usize] = b"kUSBRemoteWakeOverride\0";
pub const kUSBDeviceConfigurationCurrentOverride: &[u8; 33usize] =
    b"kUSBConfigurationCurrentOverride\0";
pub const kUSBDeviceResetDurationOverride: &[u8; 26usize] = b"kUSBResetDurationOverride\0";
pub const kUSBDeviceFailedRequestedPower: &[u8; 25usize] = b"kUSBFailedRequestedPower\0";
pub const kUSBPropertyRemovable: &[u8; 10usize] = b"removable\0";
pub const kUSBPropertyTestMode: &[u8; 13usize] = b"kUSBTestMode\0";
pub const kUSBPropertyDebugLevel: &[u8; 17usize] = b"kUSBDebugOptions\0";
pub const kUSBHubPropertyPowerSupply: &[u8; 19usize] = b"kUSBHubPowerSupply\0";
pub const kUSBControllerSleepSupported: &[u8; 19usize] = b"kUSBSleepSupported\0";
pub const kUSBPortPropertyBusCurrentAllocation: &[u8; 25usize] = b"kUSBBusCurrentAllocation\0";
pub const kUSBPreferredInterface: &[u8; 20usize] = b"Preferred Interface\0";
pub const kUSBPreferredInterfacePriority: &[u8; 9usize] = b"priority\0";
pub const kOverrideAllowLowPower: &[u8; 23usize] = b"kOverrideAllowLowPower\0";
pub const kUSBUserClientEntitlementRequired: &[u8; 33usize] = b"UsbUserClientEntitlementRequired\0";
pub const kUSBDevicePropertySpeed: &[u8; 13usize] = b"Device Speed\0";
pub const kUSBDevicePropertyAddress: &[u8; 12usize] = b"kUSBAddress\0";
pub const kUSBPreferredConfiguration: &[u8; 27usize] = b"kUSBPreferredConfiguration\0";
pub const kUSBControllerNeedsContiguousMemoryForIsoch: &[u8; 34usize] =
    b"kUSBIsochronousRequiresContiguous\0";
pub const kUSBHubDontAllowLowPower: &[u8; 18usize] = b"kUSBHubIdlePolicy\0";
pub const kConfigurationDescriptorOverride: &[u8; 36usize] =
    b"kUSBConfigurationDescriptorOverride\0";
pub const kAppleRevocableExtraCurrent: &[u8; 29usize] = b"AAPL,revocable-extra-current\0";
pub const kAppleExternalSuperSpeedPorts: &[u8; 21usize] = b"AAPL,ExternalSSPorts\0";
pub const kAppleUnconnectedSuperSpeedPorts: &[u8; 24usize] = b"AAPL,UnconnectedSSPorts\0";
pub const kAppleAcpiRootHubDepth: &[u8; 20usize] = b"AAPL,root-hub-depth\0";
pub const kAppleStandardPortCurrentInSleep: &[u8; 36usize] =
    b"AAPL,standard-port-current-in-sleep\0";
pub const kAppleInternalUSBDevice: &[u8; 21usize] = b"AAPL,device-internal\0";
pub const kUSBBusID: &[u8; 12usize] = b"AAPL,bus-id\0";
pub const kApplePowerSupply: &[u8; 18usize] = b"AAPL,power-supply\0";
pub const kAppleCurrentAvailable: &[u8; 23usize] = b"AAPL,current-available\0";
pub const kAppleCurrentInSleep: &[u8; 22usize] = b"AAPL,current-in-sleep\0";
pub const kApplePortCurrentInSleep: &[u8; 27usize] = b"AAPL,port-current-in-sleep\0";
pub const kOverrideAttachedToCPU: &[u8; 23usize] = b"kOverrideAttachedToCPU\0";
pub const kEHCIIsochMaxBusStall: u32 = 25000;
pub const kXHCIIsochMaxBusStall: u32 = 25000;
pub const kOHCIIsochMaxBusStall: u32 = 25000;
pub const kUHCIIsochMaxBusStall: u32 = 10000;
pub const kMaxBusStall10uS: u32 = 10000;
pub const kMaxBusStall25uS: u32 = 25000;
pub const kIOUSBDeviceClassName: &[u8; 12usize] = b"IOUSBDevice\0";
pub const kIOUSBInterfaceClassName: &[u8; 15usize] = b"IOUSBInterface\0";
pub const CG_HDR_BT_2100: u32 = 1;
pub const kCGNumReservedWindowLevels: u32 = 16;
pub const kCGNumReservedBaseWindowLevels: u32 = 5;
pub const kCGDisplayFadeReservationInvalidToken: u32 = 0;
pub const kCGDisplayBlendNormal: f64 = 0.0;
pub const kCGDisplayBlendSolidColor: f64 = 1.0;
pub const kCGMouseDownEventMaskingDeadSwitchTimeout: f64 = 60.0;
pub const kCGNotifyEventTapAdded: &[u8; 37usize] = b"com.apple.coregraphics.eventTapAdded\0";
pub const kCGNotifyEventTapRemoved: &[u8; 39usize] = b"com.apple.coregraphics.eventTapRemoved\0";
pub const kCGNotifyGUIConsoleSessionChanged: &[u8; 48usize] =
    b"com.apple.coregraphics.GUIConsoleSessionChanged\0";
pub const kCGNotifyGUISessionUserChanged: &[u8; 45usize] =
    b"com.apple.coregraphics.GUISessionUserChanged\0";
pub type max_align_t = u128;
extern "C" {
    pub fn cacosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexp(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clog(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabsf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cabs(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cabsl(arg1: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cpowf(arg1: __BindgenComplex<f32>, arg2: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpow(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>)
        -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrt(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cargf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn carg(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cargl(arg1: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cimagf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cimag(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cimagl(arg1: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn conjf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn conj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn conjl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cproj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn crealf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn creal(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creall(arg1: __BindgenComplex<f64>) -> u128;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _copyfile_state {
    _unused: [u8; 0],
}
pub type copyfile_state_t = *mut _copyfile_state;
pub type copyfile_flags_t = u32;
extern "C" {
    pub fn copyfile(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        state: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcopyfile(
        from_fd: ::std::os::raw::c_int,
        to_fd: ::std::os::raw::c_int,
        arg1: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_free(arg1: copyfile_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_alloc() -> copyfile_state_t;
}
extern "C" {
    pub fn copyfile_state_get(
        s: copyfile_state_t,
        flag: u32,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_set(
        s: copyfile_state_t,
        flag: u32,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type copyfile_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: copyfile_state_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn err(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn errc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn verrc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn errx(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verrx(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn warn(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarn(arg1: *const ::std::os::raw::c_char, arg2: *mut __va_list_tag);
}
extern "C" {
    pub fn warnc(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnc(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn warnx(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnx(arg1: *const ::std::os::raw::c_char, arg2: *mut __va_list_tag);
}
extern "C" {
    pub fn err_set_file(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn err_set_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn err_set_exit_b(arg1: *mut ::std::os::raw::c_void);
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fenv_t {
    pub __control: ::std::os::raw::c_ushort,
    pub __status: ::std::os::raw::c_ushort,
    pub __mxcsr: ::std::os::raw::c_uint,
    pub __reserved: [::std::os::raw::c_char; 8usize],
}
pub type fexcept_t = ::std::os::raw::c_ushort;
extern "C" {
    pub static _FE_DFL_ENV: fenv_t;
}
extern "C" {
    pub static _FE_DFL_DISABLE_SSE_DENORMS_ENV: fenv_t;
}
extern "C" {
    pub fn feclearexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetexceptflag(
        arg1: *mut fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feraiseexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetexceptflag(
        arg1: *const fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fetestexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetround() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetround(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetenv(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feholdexcept(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feupdateenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    pub fn __inff() -> f32;
}
extern "C" {
    pub fn __inf() -> f64;
}
extern "C" {
    pub fn __infl() -> u128;
}
extern "C" {
    pub fn __nan() -> f32;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
extern "C" {
    pub fn readpassphrase(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn longjmperror();
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
pub type ucontext_t = __darwin_ucontext;
pub type pid_t = __darwin_pid_t;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type pthread_t = __darwin_pthread_t;
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type rsize_t = ::std::os::raw::c_ulong;
pub const memory_order_memory_order_relaxed: memory_order = 0;
pub const memory_order_memory_order_consume: memory_order = 1;
pub const memory_order_memory_order_acquire: memory_order = 2;
pub const memory_order_memory_order_release: memory_order = 3;
pub const memory_order_memory_order_acq_rel: memory_order = 4;
pub const memory_order_memory_order_seq_cst: memory_order = 5;
pub type memory_order = ::std::os::raw::c_uint;
extern "C" {
    pub fn atomic_thread_fence(arg1: memory_order);
}
extern "C" {
    pub fn atomic_signal_fence(arg1: memory_order);
}
pub type atomic_bool = u8;
pub type atomic_char = u8;
pub type atomic_schar = u8;
pub type atomic_uchar = u8;
pub type atomic_short = u16;
pub type atomic_ushort = u16;
pub type atomic_int = u32;
pub type atomic_uint = u32;
pub type atomic_long = u64;
pub type atomic_ulong = u64;
pub type atomic_llong = u64;
pub type atomic_ullong = u64;
pub type atomic_char16_t = u16;
pub type atomic_char32_t = u32;
pub type atomic_wchar_t = u32;
pub type atomic_int_least8_t = u8;
pub type atomic_uint_least8_t = u8;
pub type atomic_int_least16_t = u16;
pub type atomic_uint_least16_t = u16;
pub type atomic_int_least32_t = u32;
pub type atomic_uint_least32_t = u32;
pub type atomic_int_least64_t = u64;
pub type atomic_uint_least64_t = u64;
pub type atomic_int_fast8_t = u8;
pub type atomic_uint_fast8_t = u8;
pub type atomic_int_fast16_t = u16;
pub type atomic_uint_fast16_t = u16;
pub type atomic_int_fast32_t = u32;
pub type atomic_uint_fast32_t = u32;
pub type atomic_int_fast64_t = u64;
pub type atomic_uint_fast64_t = u64;
pub type atomic_intptr_t = u64;
pub type atomic_uintptr_t = u64;
pub type atomic_size_t = u64;
pub type atomic_ptrdiff_t = u64;
pub type atomic_intmax_t = u64;
pub type atomic_uintmax_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic_flag {
    pub _Value: atomic_bool,
}
extern "C" {
    pub fn atomic_flag_test_and_set(arg1: *mut atomic_flag) -> bool;
}
extern "C" {
    pub fn atomic_flag_test_and_set_explicit(arg1: *mut atomic_flag, arg2: memory_order) -> bool;
}
extern "C" {
    pub fn atomic_flag_clear(arg1: *mut atomic_flag);
}
extern "C" {
    pub fn atomic_flag_clear_explicit(arg1: *mut atomic_flag, arg2: memory_order);
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type id_t = __darwin_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub __bindgen_anon_1: wait__bindgen_ty_1,
    pub __bindgen_anon_2: wait__bindgen_ty_2,
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type _Argument_type_is_not_arithmetic = ::std::os::raw::c_void;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
extern "C" {
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
pub type uuid_t = __darwin_uuid_t;
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_compare(
        uu1: *mut ::std::os::raw::c_uchar,
        uu2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_is_null(uu: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(
        in_: *mut ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_unparse(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_lower(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_upper(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
extern "C" {
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type tcflag_t = ::std::os::raw::c_ulong;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 20usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
extern "C" {
    pub fn cfgetispeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetospeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetispeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetospeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(arg1: ::std::os::raw::c_int, arg2: *mut termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsendbreak(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(arg1: *mut termios);
}
extern "C" {
    pub fn cfsetspeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn login(arg1: *mut utmp);
}
extern "C" {
    pub fn login_tty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logwtmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn opendev(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut termios,
        arg5: *mut winsize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fparseln(
        arg1: *mut FILE,
        arg2: *mut usize,
        arg3: *mut usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn forkpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut termios,
        arg4: *mut winsize,
    ) -> pid_t;
}
extern "C" {
    pub fn pidlock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttylock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyunlock(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyaction(
        tty: *mut ::std::os::raw::c_char,
        act: *mut ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttymsg(
        arg1: *mut iovec,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlog {
    pub ll_time: time_t,
    pub ll_line: [::std::os::raw::c_char; 8usize],
    pub ll_host: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmp {
    pub ut_line: [::std::os::raw::c_char; 8usize],
    pub ut_name: [::std::os::raw::c_char; 8usize],
    pub ut_host: [::std::os::raw::c_char; 16usize],
    pub ut_time: ::std::os::raw::c_long,
}
pub type mbstate_t = __darwin_mbstate_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int, arg3: *mut FILE)
        -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const ::std::os::raw::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t, arg3: *mut mbstate_t)
        -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut wchar_t, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
pub type wctrans_t = __darwin_wctrans_t;
extern "C" {
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(arg1: *const ::std::os::raw::c_char) -> wctrans_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
extern "C" {
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _c_locale: locale_t;
}
extern "C" {
    pub fn duplocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn localeconv_l(arg1: locale_t) -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn querylocale(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn ___runetype_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune_l(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctype_t;
}
extern "C" {
    pub fn strtoimax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn fprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> f64;
}
extern "C" {
    pub fn atoi_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mblen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtod_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtouq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasestr_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn btowc_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_l(
        arg1: *mut wchar_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: locale_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn fputws_l(arg1: *const wchar_t, arg2: *mut FILE, arg3: locale_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn getwchar_l(arg1: locale_t) -> wint_t;
}
extern "C" {
    pub fn mbrlen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit_l(arg1: *const mbstate_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn putwchar_l(arg1: wchar_t, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn swprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc_l(arg1: wint_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn vfwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime_l(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstol_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswidth_l(arg1: *const wchar_t, arg2: usize, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob_l(arg1: wint_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth_l(arg1: wchar_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> u128;
}
extern "C" {
    pub fn wcstoll_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn fgetwln_l(arg1: *mut FILE, arg2: *mut usize, arg3: locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn nextwctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn towctrans_l(arg1: wint_t, arg2: wctrans_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctrans_t;
}
pub type nl_item = __darwin_nl_item;
extern "C" {
    pub fn nl_langinfo_l(arg1: nl_item, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
pub type regoff_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: usize,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
extern "C" {
    pub fn regcomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regncomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp_l(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec_l(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
        arg6: locale_t,
    ) -> ::std::os::raw::c_int;
}
pub type xattr_operation_intent_t = ::std::os::raw::c_uint;
pub type xattr_flags_t = u64;
extern "C" {
    pub fn xattr_preserve_for_intent(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_operation_intent_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xattr_name_with_flags(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_flags_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_name_without_flags(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_flags_from_name(arg1: *const ::std::os::raw::c_char) -> xattr_flags_t;
}
extern "C" {
    pub fn xattr_intent_with_flags(
        arg1: xattr_operation_intent_t,
        arg2: xattr_flags_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aiocb {
    pub aio_fildes: ::std::os::raw::c_int,
    pub aio_offset: off_t,
    pub aio_buf: *mut ::std::os::raw::c_void,
    pub aio_nbytes: usize,
    pub aio_reqprio: ::std::os::raw::c_int,
    pub aio_sigevent: sigevent,
    pub aio_lio_opcode: ::std::os::raw::c_int,
}
extern "C" {
    pub fn aio_cancel(fd: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_error(aiocbp: *const aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_fsync(op: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_read(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_return(aiocbp: *mut aiocb) -> isize;
}
extern "C" {
    pub fn aio_suspend(
        aiocblist: *const *const aiocb,
        nent: ::std::os::raw::c_int,
        timeoutp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_write(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lio_listio(
        mode: ::std::os::raw::c_int,
        aiocblist: *const *mut aiocb,
        nent: ::std::os::raw::c_int,
        sigp: *mut sigevent,
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opendir$INODE64"]
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_readdir$INODE64"]
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    #[link_name = "\u{1}_readdir_r$INODE64"]
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewinddir$INODE64"]
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    #[link_name = "\u{1}_seekdir$INODE64"]
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_telldir$INODE64"]
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fdopendir$INODE64"]
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_alphasort$INODE64"]
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir$INODE64"]
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir_b$INODE64"]
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___opendir2$INODE64"]
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
pub type Dl_info = dl_info;
extern "C" {
    pub fn dladdr(arg1: *const ::std::os::raw::c_void, arg2: *mut Dl_info)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dlopen(
        __path: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlopen_preflight(__path: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
pub type fspecread_t = fspecread;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmtmsg(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fnmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat$INODE64"]
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat$INODE64"]
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat$INODE64"]
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatat$INODE64"]
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx_np$INODE64"]
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx_np$INODE64"]
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx_np$INODE64"]
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatx64_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstatx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTW {
    pub base: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ftw$INODE64"]
    pub fn ftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nftw$INODE64"]
    pub fn nftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
                arg4: *mut FTW,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glob_t {
    pub __bindgen_anon_1: glob_t__bindgen_ty_1,
    pub gl_pathc: usize,
    pub gl_matchc: ::std::os::raw::c_int,
    pub gl_offs: usize,
    pub gl_flags: ::std::os::raw::c_int,
    pub gl_pathv: *mut *mut ::std::os::raw::c_char,
    pub gl_closedir: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub gl_readdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut dirent,
    >,
    pub gl_opendir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_lstat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_stat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union glob_t__bindgen_ty_1 {
    pub gl_errfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_errblk: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_glob$INODE64"]
    pub fn glob(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_glob_b$INODE64"]
    pub fn glob_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn globfree(arg1: *mut glob_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn getgrgid(arg1: gid_t) -> *mut group;
}
extern "C" {
    pub fn getgrnam(arg1: *const ::std::os::raw::c_char) -> *mut group;
}
extern "C" {
    pub fn getgrgid_r(
        arg1: gid_t,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrent() -> *mut group;
}
extern "C" {
    pub fn setgrent();
}
extern "C" {
    pub fn endgrent();
}
extern "C" {
    pub fn group_from_gid(arg1: gid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getgruuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut group;
}
extern "C" {
    pub fn getgruuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgrfile(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setgroupent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _libiconv_version: ::std::os::raw::c_int;
}
pub type iconv_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn iconv_open(
        __tocode: *const ::std::os::raw::c_char,
        __fromcode: *const ::std::os::raw::c_char,
    ) -> iconv_t;
}
extern "C" {
    pub fn iconv(
        __cd: iconv_t,
        __inbuf: *mut *mut ::std::os::raw::c_char,
        __inbytesleft: *mut usize,
        __outbuf: *mut *mut ::std::os::raw::c_char,
        __outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn iconv_close(_cd: iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconvctl(
        cd: iconv_t,
        request: ::std::os::raw::c_int,
        argument: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type iconv_unicode_char_hook = ::std::option::Option<
    unsafe extern "C" fn(uc: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void),
>;
pub type iconv_wide_char_hook =
    ::std::option::Option<unsafe extern "C" fn(wc: wchar_t, data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_hooks {
    pub uc_hook: iconv_unicode_char_hook,
    pub wc_hook: iconv_wide_char_hook,
    pub data: *mut ::std::os::raw::c_void,
}
pub type iconv_unicode_mb_to_uc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_uint,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_unicode_uc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: ::std::os::raw::c_uint,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_mb_to_wc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const wchar_t,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_wc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: wchar_t,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_fallbacks {
    pub mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback,
    pub uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback,
    pub mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback,
    pub wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback,
    pub data: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn iconvlist(
        do_one: ::std::option::Option<
            unsafe extern "C" fn(
                namescount: ::std::os::raw::c_uint,
                names: *const *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn iconv_canonicalize(name: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libiconv_set_relocation_prefix(
        orig_prefix: *const ::std::os::raw::c_char,
        curr_prefix: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_dstaddr: *mut sockaddr,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmaddrs {
    pub ifma_next: *mut ifmaddrs,
    pub ifma_name: *mut sockaddr,
    pub ifma_addr: *mut sockaddr,
    pub ifma_lladdr: *mut sockaddr,
}
extern "C" {
    pub fn getifaddrs(arg1: *mut *mut ifaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifaddrs(arg1: *mut ifaddrs);
}
extern "C" {
    pub fn getifmaddrs(arg1: *mut *mut ifmaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifmaddrs(arg1: *mut ifmaddrs);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nl_langinfo(arg1: nl_item) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct datum {
    pub dptr: *mut ::std::os::raw::c_void,
    pub dsize: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBM {
    pub __opaque: [::std::os::raw::c_char; 68usize],
}
extern "C" {
    pub fn dbm_clearerr(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_close(arg1: *mut DBM);
}
extern "C" {
    pub fn dbm_delete(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_dirfno(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_error(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_fetch(arg1: *mut DBM, arg2: datum) -> datum;
}
extern "C" {
    pub fn dbm_firstkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_forder(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dbm_nextkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mode_t,
    ) -> *mut DBM;
}
extern "C" {
    pub fn dbm_store(
        arg1: *mut DBM,
        arg2: datum,
        arg3: datum,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub sdl_len: u_char,
    pub sdl_family: u_char,
    pub sdl_index: u_short,
    pub sdl_type: u_char,
    pub sdl_nlen: u_char,
    pub sdl_alen: u_char,
    pub sdl_slen: u_char,
    pub sdl_data: [::std::os::raw::c_char; 12usize],
}
extern "C" {
    pub fn link_addr(arg1: *const ::std::os::raw::c_char, arg2: *mut sockaddr_dl);
}
extern "C" {
    pub fn link_ntoa(arg1: *const sockaddr_dl) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_event_data {
    pub if_family: u_int32_t,
    pub if_unit: u_int32_t,
    pub if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval32 {
    pub tv_sec: __int32_t,
    pub tv_usec: __int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_data {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int32_t,
    pub ifi_ipackets: u_int32_t,
    pub ifi_ierrors: u_int32_t,
    pub ifi_opackets: u_int32_t,
    pub ifi_oerrors: u_int32_t,
    pub ifi_collisions: u_int32_t,
    pub ifi_ibytes: u_int32_t,
    pub ifi_obytes: u_int32_t,
    pub ifi_imcasts: u_int32_t,
    pub ifi_omcasts: u_int32_t,
    pub ifi_iqdrops: u_int32_t,
    pub ifi_noproto: u_int32_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
    pub ifi_unused2: u_int32_t,
    pub ifi_hwassist: u_int32_t,
    pub ifi_reserved1: u_int32_t,
    pub ifi_reserved2: u_int32_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct if_data64 {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int64_t,
    pub ifi_ipackets: u_int64_t,
    pub ifi_ierrors: u_int64_t,
    pub ifi_opackets: u_int64_t,
    pub ifi_oerrors: u_int64_t,
    pub ifi_collisions: u_int64_t,
    pub ifi_ibytes: u_int64_t,
    pub ifi_obytes: u_int64_t,
    pub ifi_imcasts: u_int64_t,
    pub ifi_omcasts: u_int64_t,
    pub ifi_iqdrops: u_int64_t,
    pub ifi_noproto: u_int64_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifqueue {
    pub ifq_head: *mut ::std::os::raw::c_void,
    pub ifq_tail: *mut ::std::os::raw::c_void,
    pub ifq_len: ::std::os::raw::c_int,
    pub ifq_maxlen: ::std::os::raw::c_int,
    pub ifq_drops: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_clonereq {
    pub ifcr_total: ::std::os::raw::c_int,
    pub ifcr_count: ::std::os::raw::c_int,
    pub ifcr_buffer: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr {
    pub ifm_msglen: ::std::os::raw::c_ushort,
    pub ifm_version: ::std::os::raw::c_uchar,
    pub ifm_type: ::std::os::raw::c_uchar,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: ::std::os::raw::c_ushort,
    pub ifm_data: if_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifa_msghdr {
    pub ifam_msglen: ::std::os::raw::c_ushort,
    pub ifam_version: ::std::os::raw::c_uchar,
    pub ifam_type: ::std::os::raw::c_uchar,
    pub ifam_addrs: ::std::os::raw::c_int,
    pub ifam_flags: ::std::os::raw::c_int,
    pub ifam_index: ::std::os::raw::c_ushort,
    pub ifam_metric: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr {
    pub ifmam_msglen: ::std::os::raw::c_ushort,
    pub ifmam_version: ::std::os::raw::c_uchar,
    pub ifmam_type: ::std::os::raw::c_uchar,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr2 {
    pub ifm_msglen: u_short,
    pub ifm_version: u_char,
    pub ifm_type: u_char,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: u_short,
    pub ifm_snd_len: ::std::os::raw::c_int,
    pub ifm_snd_maxlen: ::std::os::raw::c_int,
    pub ifm_snd_drops: ::std::os::raw::c_int,
    pub ifm_timer: ::std::os::raw::c_int,
    pub ifm_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr2 {
    pub ifmam_msglen: u_short,
    pub ifmam_version: u_char,
    pub ifmam_type: u_char,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: u_short,
    pub ifmam_refcount: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifdevmtu {
    pub ifdm_current: ::std::os::raw::c_int,
    pub ifdm_min: ::std::os::raw::c_int,
    pub ifdm_max: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifkpi {
    pub __bindgen_anon_1: ifkpi__bindgen_ty_1,
    pub ifk_module_id: ::std::os::raw::c_uint,
    pub ifk_type: ::std::os::raw::c_uint,
    pub ifk_data: ifkpi__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifkpi__bindgen_ty_1 {
    pub ifk_ptr: *mut ::std::os::raw::c_void,
    pub ifk_value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub __bindgen_anon_1: ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_phys: ::std::os::raw::c_int,
    pub ifru_media: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_devmtu: ifdevmtu,
    pub ifru_kpi: ifkpi,
    pub ifru_wake_flags: u_int32_t,
    pub ifru_route_refcnt: u_int32_t,
    pub ifru_cap: [::std::os::raw::c_int; 2usize],
    pub ifru_functional_type: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr,
    pub ifra_broadaddr: sockaddr,
    pub ifra_mask: sockaddr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rslvmulti_req {
    pub sa: *mut sockaddr,
    pub llsa: *mut *mut sockaddr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifmediareq {
    pub ifm_name: [::std::os::raw::c_char; 16usize],
    pub ifm_current: ::std::os::raw::c_int,
    pub ifm_mask: ::std::os::raw::c_int,
    pub ifm_status: ::std::os::raw::c_int,
    pub ifm_active: ::std::os::raw::c_int,
    pub ifm_count: ::std::os::raw::c_int,
    pub ifm_ulist: *mut ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifdrv {
    pub ifd_name: [::std::os::raw::c_char; 16usize],
    pub ifd_cmd: ::std::os::raw::c_ulong,
    pub ifd_len: usize,
    pub ifd_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifstat {
    pub ifs_name: [::std::os::raw::c_char; 16usize],
    pub ascii: [::std::os::raw::c_char; 801usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub __bindgen_anon_1: ifconf__bindgen_ty_1,
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: caddr_t,
    pub ifcu_req: *mut ifreq,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_dl_proto_data {
    pub link_data: net_event_data,
    pub proto_family: u_int32_t,
    pub proto_remaining_count: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_nameindex {
    pub if_index: ::std::os::raw::c_uint,
    pub if_name: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn if_nametoindex(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn if_indextoname(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn if_nameindex() -> *mut if_nameindex;
}
extern "C" {
    pub fn if_freenameindex(arg1: *mut if_nameindex);
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
impl tcphdr {
    #[inline]
    pub fn th_x2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: ::std::os::raw::c_uint,
        th_off: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u32 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u32 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
    pub tcpi_txretransmitpackets: u_int64_t,
}
impl tcp_connection_info {
    #[inline]
    pub fn tcpi_tfo_cookie_req(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_loss(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_loss(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_acked(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_acked(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_req_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_invalid(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_invalid(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_wrong(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_wrong(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_no_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_no_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_heuristics_disable(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_heuristics_disable(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_send_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_send_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_recv_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_recv_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_onebyte_proxy(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_onebyte_proxy(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pad2(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set___pad2(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_tfo_cookie_req: u_int32_t,
        tcpi_tfo_cookie_rcv: u_int32_t,
        tcpi_tfo_syn_loss: u_int32_t,
        tcpi_tfo_syn_data_sent: u_int32_t,
        tcpi_tfo_syn_data_acked: u_int32_t,
        tcpi_tfo_syn_data_rcv: u_int32_t,
        tcpi_tfo_cookie_req_rcv: u_int32_t,
        tcpi_tfo_cookie_sent: u_int32_t,
        tcpi_tfo_cookie_invalid: u_int32_t,
        tcpi_tfo_cookie_wrong: u_int32_t,
        tcpi_tfo_no_cookie_rcv: u_int32_t,
        tcpi_tfo_heuristics_disable: u_int32_t,
        tcpi_tfo_send_blackhole: u_int32_t,
        tcpi_tfo_recv_blackhole: u_int32_t,
        tcpi_tfo_onebyte_proxy: u_int32_t,
        __pad2: u_int32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcpi_tfo_cookie_req: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req) };
            tcpi_tfo_cookie_req as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcpi_tfo_cookie_rcv: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_rcv) };
            tcpi_tfo_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tcpi_tfo_syn_loss: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_syn_loss) };
            tcpi_tfo_syn_loss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tcpi_tfo_syn_data_sent: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_sent) };
            tcpi_tfo_syn_data_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tcpi_tfo_syn_data_acked: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_acked) };
            tcpi_tfo_syn_data_acked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tcpi_tfo_syn_data_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_rcv) };
            tcpi_tfo_syn_data_rcv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tcpi_tfo_cookie_req_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req_rcv) };
            tcpi_tfo_cookie_req_rcv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tcpi_tfo_cookie_sent: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_sent) };
            tcpi_tfo_cookie_sent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_tfo_cookie_invalid: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_invalid) };
            tcpi_tfo_cookie_invalid as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tcpi_tfo_cookie_wrong: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_wrong) };
            tcpi_tfo_cookie_wrong as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tcpi_tfo_no_cookie_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_no_cookie_rcv) };
            tcpi_tfo_no_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tcpi_tfo_heuristics_disable: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_heuristics_disable) };
            tcpi_tfo_heuristics_disable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tcpi_tfo_send_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_send_blackhole) };
            tcpi_tfo_send_blackhole as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tcpi_tfo_recv_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_recv_blackhole) };
            tcpi_tfo_recv_blackhole as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tcpi_tfo_onebyte_proxy: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_onebyte_proxy) };
            tcpi_tfo_onebyte_proxy as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let __pad2: u32 = unsafe { ::std::mem::transmute(__pad2) };
            __pad2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __nl_cat_d {
    pub __data: *mut ::std::os::raw::c_void,
    pub __size: ::std::os::raw::c_int,
}
pub type nl_catd = *mut __nl_cat_d;
extern "C" {
    pub fn catopen(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> nl_catd;
}
extern "C" {
    pub fn catgets(
        arg1: nl_catd,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn catclose(arg1: nl_catd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
pub type nfds_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn poll(
        arg1: *mut pollfd,
        arg2: nfds_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_yield_np();
}
extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
pub type posix_spawnattr_t = *mut ::std::os::raw::c_void;
pub type posix_spawn_file_actions_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn posix_spawn(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnp(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addclose(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_adddup2(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addopen(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_destroy(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_init(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_destroy(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigdefault(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getflags(
        arg1: *const posix_spawnattr_t,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getpgroup(
        arg1: *const posix_spawnattr_t,
        arg2: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigmask(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_init(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigdefault(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setflags(
        arg1: *mut posix_spawnattr_t,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setpgroup(
        arg1: *mut posix_spawnattr_t,
        arg2: pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigmask(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
    pub flags: u32,
    pub mpl: mach_port_limits_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type x86_avx512_state32_t = __darwin_i386_avx512_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_thread_full_state64_t = __darwin_x86_thread_full_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_avx512_state64_t = __darwin_x86_avx512_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
pub type x86_pagein_state_t = __x86_pagein_state;
pub type x86_instruction_state_t = __x86_instruction_state;
pub type last_branch_state_t = __last_branch_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_thread_state {
    pub __bindgen_anon_1: x86_thread_state__bindgen_ty_1,
    pub tsh: x86_state_hdr_t,
    pub uts: x86_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_thread_state__bindgen_ty_1 {
    pub ts32: x86_thread_state32_t,
    pub ts64: x86_thread_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_float_state {
    pub __bindgen_anon_1: x86_float_state__bindgen_ty_1,
    pub fsh: x86_state_hdr_t,
    pub ufs: x86_float_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_float_state__bindgen_ty_1 {
    pub fs32: x86_float_state32_t,
    pub fs64: x86_float_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_exception_state {
    pub __bindgen_anon_1: x86_exception_state__bindgen_ty_1,
    pub esh: x86_state_hdr_t,
    pub ues: x86_exception_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_exception_state__bindgen_ty_1 {
    pub es32: x86_exception_state32_t,
    pub es64: x86_exception_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_debug_state {
    pub __bindgen_anon_1: x86_debug_state__bindgen_ty_1,
    pub dsh: x86_state_hdr_t,
    pub uds: x86_debug_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_debug_state__bindgen_ty_1 {
    pub ds32: x86_debug_state32_t,
    pub ds64: x86_debug_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx_state {
    pub __bindgen_anon_1: x86_avx_state__bindgen_ty_1,
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx_state__bindgen_ty_1 {
    pub as32: x86_avx_state32_t,
    pub as64: x86_avx_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx512_state {
    pub __bindgen_anon_1: x86_avx512_state__bindgen_ty_1,
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx512_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx512_state__bindgen_ty_1 {
    pub as32: x86_avx512_state32_t,
    pub as64: x86_avx512_state64_t,
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
pub type x86_avx512_state_t = x86_avx512_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
extern "C" {
    pub fn posix_spawnattr_getbinpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getarchpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setauditsessionport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setbinpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setarchpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setexceptionports_np(
        arg1: *mut posix_spawnattr_t,
        arg2: exception_mask_t,
        arg3: mach_port_t,
        arg4: exception_behavior_t,
        arg5: thread_state_flavor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setspecialport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setnosmt_np(attr: *const posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_csm_np(
        attr: *const posix_spawnattr_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addinherit_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addfchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_qos_class_np(
        __attr: *mut posix_spawnattr_t,
        __qos_class: qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_get_qos_class_np(
        __attr: *const posix_spawnattr_t,
        __qos_class: *mut qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pthread_mutex_enable_legacy_mode();
}
extern "C" {
    pub fn pthread_create_from_mach_thread(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regcomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regerror(
        arg1: ::std::os::raw::c_int,
        arg2: *const regex_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> usize;
}
extern "C" {
    pub fn regexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regfree(arg1: *mut regex_t);
}
extern "C" {
    pub fn regncomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regnexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwncomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
pub type ENTRY = entry;
pub const ACTION_FIND: ACTION = 0;
pub const ACTION_ENTER: ACTION = 1;
pub type ACTION = ::std::os::raw::c_uint;
pub const VISIT_preorder: VISIT = 0;
pub const VISIT_postorder: VISIT = 1;
pub const VISIT_endorder: VISIT = 2;
pub const VISIT_leaf: VISIT = 3;
pub type VISIT = ::std::os::raw::c_uint;
extern "C" {
    pub fn hcreate(arg1: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdestroy();
}
extern "C" {
    pub fn hsearch(arg1: ENTRY, arg2: ACTION) -> *mut ENTRY;
}
extern "C" {
    pub fn insque(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn remque(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn tdelete(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn twalk(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: VISIT,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
pub type sem_t = ::std::os::raw::c_int;
extern "C" {
    pub fn sem_close(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_destroy(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_getvalue(
        arg1: *mut sem_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_init(
        arg1: *mut sem_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> *mut sem_t;
}
extern "C" {
    pub fn sem_post(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_trywait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_wait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kevent {
    pub ident: usize,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: isize,
    pub udata: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kevent64_s {
    pub ident: u64,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: i64,
    pub udata: u64,
    pub ext: [u64; 2usize],
}
pub const eNoteReapDeprecated: _bindgen_ty_1 = 268435456;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const eNoteExitReparentedDeprecated: _bindgen_ty_2 = 524288;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist {
    pub slh_first: *mut knote,
}
extern "C" {
    pub fn kqueue() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent,
        nevents: ::std::os::raw::c_int,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent64(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent64_s,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent64_s,
        nevents: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgrp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ident {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct extern_proc {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1,
    pub p_un: extern_proc__bindgen_ty_1,
    pub p_vmspace: *mut vmspace,
    pub p_sigacts: *mut sigacts,
    pub p_flag: ::std::os::raw::c_int,
    pub p_stat: ::std::os::raw::c_char,
    pub p_pid: pid_t,
    pub p_oppid: pid_t,
    pub p_dupfd: ::std::os::raw::c_int,
    pub user_stack: caddr_t,
    pub exit_thread: *mut ::std::os::raw::c_void,
    pub p_debugger: ::std::os::raw::c_int,
    pub sigwait: boolean_t,
    pub p_estcpu: u_int,
    pub p_cpticks: ::std::os::raw::c_int,
    pub p_pctcpu: fixpt_t,
    pub p_wchan: *mut ::std::os::raw::c_void,
    pub p_wmesg: *mut ::std::os::raw::c_char,
    pub p_swtime: u_int,
    pub p_slptime: u_int,
    pub p_realtimer: itimerval,
    pub p_rtime: timeval,
    pub p_uticks: u_quad_t,
    pub p_sticks: u_quad_t,
    pub p_iticks: u_quad_t,
    pub p_traceflag: ::std::os::raw::c_int,
    pub p_tracep: *mut vnode,
    pub p_siglist: ::std::os::raw::c_int,
    pub p_textvp: *mut vnode,
    pub p_holdcnt: ::std::os::raw::c_int,
    pub p_sigmask: sigset_t,
    pub p_sigignore: sigset_t,
    pub p_sigcatch: sigset_t,
    pub p_priority: u_char,
    pub p_usrpri: u_char,
    pub p_nice: ::std::os::raw::c_char,
    pub p_comm: [::std::os::raw::c_char; 17usize],
    pub p_pgrp: *mut pgrp,
    pub p_addr: *mut user,
    pub p_xstat: u_short,
    pub p_acflag: u_short,
    pub p_ru: *mut rusage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union extern_proc__bindgen_ty_1 {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub p_st1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub __p_starttime: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extern_proc__bindgen_ty_1__bindgen_ty_1 {
    pub __p_forw: *mut proc_,
    pub __p_back: *mut proc_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct label {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pseminfo {
    pub psem_flags: ::std::os::raw::c_uint,
    pub psem_usecount: ::std::os::raw::c_uint,
    pub psem_mode: mode_t,
    pub psem_uid: uid_t,
    pub psem_gid: gid_t,
    pub psem_name: [::std::os::raw::c_char; 32usize],
    pub psem_semobject: *mut ::std::os::raw::c_void,
    pub psem_label: *mut label,
    pub psem_creator_pid: pid_t,
    pub psem_creator_uniqueid: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
    pub uid: uid_t,
    pub gid: gid_t,
    pub cuid: uid_t,
    pub cgid: gid_t,
    pub mode: mode_t,
    pub _seq: ::std::os::raw::c_ushort,
    pub _key: key_t,
}
extern "C" {
    pub fn ftok(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> key_t;
}
extern "C" {
    pub fn mlockall(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlockall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mprotect(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msync(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munmap(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mincore(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn minherit(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type msgqnum_t = ::std::os::raw::c_ulong;
pub type msglen_t = ::std::os::raw::c_ulong;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msqid_ds_new {
    pub msg_perm: ipc_perm,
    pub msg_first: __int32_t,
    pub msg_last: __int32_t,
    pub msg_cbytes: msglen_t,
    pub msg_qnum: msgqnum_t,
    pub msg_qbytes: msglen_t,
    pub msg_lspid: pid_t,
    pub msg_lrpid: pid_t,
    pub msg_stime: time_t,
    pub msg_pad1: __int32_t,
    pub msg_rtime: time_t,
    pub msg_pad2: __int32_t,
    pub msg_ctime: time_t,
    pub msg_pad3: __int32_t,
    pub msg_pad4: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg {
    pub msg_next: *mut msg,
    pub msg_type: ::std::os::raw::c_long,
    pub msg_ts: ::std::os::raw::c_ushort,
    pub msg_spot: ::std::os::raw::c_short,
    pub label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mymsg {
    pub mtype: ::std::os::raw::c_long,
    pub mtext: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msginfo {
    pub msgmax: ::std::os::raw::c_int,
    pub msgmni: ::std::os::raw::c_int,
    pub msgmnb: ::std::os::raw::c_int,
    pub msgtql: ::std::os::raw::c_int,
    pub msgssz: ::std::os::raw::c_int,
    pub msgseg: ::std::os::raw::c_int,
}
extern "C" {
    pub fn msgsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __msqid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgget(arg1: key_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgrcv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn msgsnd(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __semid_ds_new {
    pub sem_perm: ipc_perm,
    pub sem_base: __int32_t,
    pub sem_nsems: ::std::os::raw::c_ushort,
    pub sem_otime: time_t,
    pub sem_pad1: __int32_t,
    pub sem_ctime: time_t,
    pub sem_pad2: __int32_t,
    pub sem_pad3: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem {
    pub semval: ::std::os::raw::c_ushort,
    pub sempid: pid_t,
    pub semncnt: ::std::os::raw::c_ushort,
    pub semzcnt: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sembuf {
    pub sem_num: ::std::os::raw::c_ushort,
    pub sem_op: ::std::os::raw::c_short,
    pub sem_flg: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union semun {
    pub val: ::std::os::raw::c_int,
    pub buf: *mut __semid_ds_new,
    pub array: *mut ::std::os::raw::c_ushort,
}
pub type semun_t = semun;
extern "C" {
    pub fn semsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semget(
        arg1: key_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semop(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sembuf,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
pub type shmatt_t = ::std::os::raw::c_ushort;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __shmid_ds_new {
    pub shm_perm: ipc_perm,
    pub shm_segsz: usize,
    pub shm_lpid: pid_t,
    pub shm_cpid: pid_t,
    pub shm_nattch: shmatt_t,
    pub shm_atime: time_t,
    pub shm_dtime: time_t,
    pub shm_ctime: time_t,
    pub shm_internal: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn shmsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn shmctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __shmid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmdt(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmget(arg1: key_t, arg2: usize, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshminfo {
    pub pshm_flags: ::std::os::raw::c_uint,
    pub pshm_usecount: ::std::os::raw::c_uint,
    pub pshm_length: off_t,
    pub pshm_mode: mode_t,
    pub pshm_uid: uid_t,
    pub pshm_gid: gid_t,
    pub pshm_name: [::std::os::raw::c_char; 32usize],
    pub pshm_memobject: *mut ::std::os::raw::c_void,
    pub pshm_label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: fsblkcnt_t,
    pub f_bfree: fsblkcnt_t,
    pub f_bavail: fsblkcnt_t,
    pub f_files: fsfilcnt_t,
    pub f_ffree: fsfilcnt_t,
    pub f_favail: fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
}
extern "C" {
    pub fn fstatvfs(arg1: ::std::os::raw::c_int, arg2: *mut statvfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statvfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
extern "C" {
    pub fn times(arg1: *mut tms) -> clock_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
pub type fsobj_id_t = fsobj_id;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct secure_boot_cryptex_args {
    pub sbc_version: u_int32_t,
    pub sbc_4cc: u_int32_t,
    pub sbc_authentic_manifest_fd: ::std::os::raw::c_int,
    pub sbc_user_manifest_fd: ::std::os::raw::c_int,
    pub sbc_payload_fd: ::std::os::raw::c_int,
    pub sbc_flags: u_int64_t,
}
pub type secure_boot_cryptex_args_t = secure_boot_cryptex_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union graft_args {
    pub max_size: [u_int8_t; 512usize],
    pub sbc_args: secure_boot_cryptex_args_t,
}
pub type graftdmg_args_un = graft_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext64 {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext64,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext64: *mut __darwin_mcontext64,
}
pub type ucontext64_t = __darwin_ucontext64;
pub const uio_rw_UIO_READ: uio_rw = 0;
pub const uio_rw_UIO_WRITE: uio_rw = 1;
pub type uio_rw = ::std::os::raw::c_uint;
extern "C" {
    pub fn readv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_len: ::std::os::raw::c_uchar,
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utsname {
    pub sysname: [::std::os::raw::c_char; 256usize],
    pub nodename: [::std::os::raw::c_char; 256usize],
    pub release: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub machine: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn uname(arg1: *mut utsname) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn fgetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn setxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn removexattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fremovexattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listxattr(
        path: *const ::std::os::raw::c_char,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn flistxattr(
        fd: ::std::os::raw::c_int,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_syslog$DARWIN_EXTSN"]
    pub fn syslog(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn ulimit(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
extern "C" {
    pub fn utime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmpx {
    pub ut_user: [::std::os::raw::c_char; 256usize],
    pub ut_id: [::std::os::raw::c_char; 4usize],
    pub ut_line: [::std::os::raw::c_char; 32usize],
    pub ut_pid: pid_t,
    pub ut_type: ::std::os::raw::c_short,
    pub ut_tv: timeval,
    pub ut_host: [::std::os::raw::c_char; 256usize],
    pub ut_pad: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlogx {
    pub ll_tv: timeval,
    pub ll_line: [::std::os::raw::c_char; 32usize],
    pub ll_host: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn endutxent();
}
extern "C" {
    pub fn endutxent_wtmp();
}
extern "C" {
    pub fn getlastlogx(arg1: uid_t, arg2: *mut lastlogx) -> *mut lastlogx;
}
extern "C" {
    pub fn getlastlogxbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut lastlogx,
    ) -> *mut lastlogx;
}
extern "C" {
    pub fn getutmp(arg1: *const utmpx, arg2: *mut utmp);
}
extern "C" {
    pub fn getutmpx(arg1: *const utmp, arg2: *mut utmpx);
}
extern "C" {
    pub fn getutxent() -> *mut utmpx;
}
extern "C" {
    pub fn getutxent_wtmp() -> *mut utmpx;
}
extern "C" {
    pub fn getutxid(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn getutxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn pututxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn setutxent();
}
extern "C" {
    pub fn setutxent_wtmp(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn utmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wtmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wordexp_t {
    pub we_wordc: usize,
    pub we_wordv: *mut *mut ::std::os::raw::c_char,
    pub we_offs: usize,
}
extern "C" {
    pub fn wordexp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut wordexp_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wordfree(arg1: *mut wordexp_t);
}
pub type bpf_int32 = i32;
pub type bpf_u_int32 = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
    pub bf_len: u_int,
    pub bf_insns: *mut bpf_insn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_stat {
    pub bs_recv: u_int,
    pub bs_drop: u_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_version {
    pub bv_major: u_short,
    pub bv_minor: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_hdr {
    pub bh_tstamp: timeval32,
    pub bh_caplen: bpf_u_int32,
    pub bh_datalen: bpf_u_int32,
    pub bh_hdrlen: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
    pub code: u_short,
    pub jt: u_char,
    pub jf: u_char,
    pub k: bpf_u_int32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dltlist {
    pub __bindgen_anon_1: bpf_dltlist__bindgen_ty_1,
    pub bfl_len: u_int32_t,
    pub bfl_u: bpf_dltlist__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union bpf_dltlist__bindgen_ty_1 {
    pub bflu_list: *mut u_int32_t,
    pub bflu_pad: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_header {
    pub ether_dhost: [u_char; 6usize],
    pub ether_shost: [u_char; 6usize],
    pub ether_type: u_short,
}
pub type ether_header_t = ether_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_addr {
    pub octet: [u_char; 6usize],
}
pub type ether_addr_t = ether_addr;
extern "C" {
    pub fn ether_hostton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_line(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_ntoa(arg1: *const ether_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ether_aton(arg1: *const ::std::os::raw::c_char) -> *mut ether_addr;
}
extern "C" {
    pub fn ether_ntohost(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ether_addr,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arphdr {
    pub ar_hrd: u_short,
    pub ar_pro: u_short,
    pub ar_hln: u_char,
    pub ar_pln: u_char,
    pub ar_op: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arpreq {
    pub arp_pa: sockaddr,
    pub arp_ha: sockaddr,
    pub arp_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arpstat {
    pub txrequests: u32,
    pub txreplies: u32,
    pub txannounces: u32,
    pub rxrequests: u32,
    pub rxreplies: u32,
    pub received: u32,
    pub txconflicts: u32,
    pub invalidreqs: u32,
    pub reqnobufs: u32,
    pub dropped: u32,
    pub purged: u32,
    pub timeouts: u32,
    pub dupips: u32,
    pub inuse: u32,
    pub txurequests: u32,
    pub held: u32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct llc {
    pub __bindgen_anon_1: llc__bindgen_ty_1,
    pub llc_dsap: u_int8_t,
    pub llc_ssap: u_int8_t,
    pub llc_un: llc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union llc__bindgen_ty_1 {
    pub __bindgen_anon_1: llc__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: llc__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: llc__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: llc__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: llc__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: llc__bindgen_ty_1__bindgen_ty_6,
    pub type_u: llc__bindgen_ty_1__bindgen_ty_1,
    pub type_i: llc__bindgen_ty_1__bindgen_ty_2,
    pub type_s: llc__bindgen_ty_1__bindgen_ty_3,
    pub type_frmr: llc__bindgen_ty_1__bindgen_ty_4,
    pub type_snap: llc__bindgen_ty_1__bindgen_ty_5,
    pub type_raw: llc__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_1 {
    pub control: u_int8_t,
    pub format_id: u_int8_t,
    pub class_id: u_int8_t,
    pub window_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_2 {
    pub num_snd_x2: u_int8_t,
    pub num_rcv_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_3 {
    pub control: u_int8_t,
    pub num_rcv_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_4 {
    pub control: u_int8_t,
    pub frmr_rej_pdu0: u_int8_t,
    pub frmr_rej_pdu1: u_int8_t,
    pub frmr_control: u_int8_t,
    pub frmr_control_ext: u_int8_t,
    pub frmr_cause: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_5 {
    pub control: u_int8_t,
    pub org_code: [u_int8_t; 3usize],
    pub ether_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_6 {
    pub control: u_int8_t,
    pub control_ext: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct frmrinfo {
    pub frmr_rej_pdu0: u_int8_t,
    pub frmr_rej_pdu1: u_int8_t,
    pub frmr_control: u_int8_t,
    pub frmr_control_ext: u_int8_t,
    pub frmr_cause: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmedia_description {
    pub ifmt_word: ::std::os::raw::c_int,
    pub ifmt_string: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmibdata {
    pub ifmd_name: [::std::os::raw::c_char; 16usize],
    pub ifmd_pcount: ::std::os::raw::c_uint,
    pub ifmd_flags: ::std::os::raw::c_uint,
    pub ifmd_snd_len: ::std::os::raw::c_uint,
    pub ifmd_snd_maxlen: ::std::os::raw::c_uint,
    pub ifmd_snd_drops: ::std::os::raw::c_uint,
    pub ifmd_filler: [::std::os::raw::c_uint; 4usize],
    pub ifmd_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifs_iso_8802_3 {
    pub dot3StatsAlignmentErrors: u_int32_t,
    pub dot3StatsFCSErrors: u_int32_t,
    pub dot3StatsSingleCollisionFrames: u_int32_t,
    pub dot3StatsMultipleCollisionFrames: u_int32_t,
    pub dot3StatsSQETestErrors: u_int32_t,
    pub dot3StatsDeferredTransmissions: u_int32_t,
    pub dot3StatsLateCollisions: u_int32_t,
    pub dot3StatsExcessiveCollisions: u_int32_t,
    pub dot3StatsInternalMacTransmitErrors: u_int32_t,
    pub dot3StatsCarrierSenseErrors: u_int32_t,
    pub dot3StatsFrameTooLongs: u_int32_t,
    pub dot3StatsInternalMacReceiveErrors: u_int32_t,
    pub dot3StatsEtherChipSet: u_int32_t,
    pub dot3StatsMissedFrames: u_int32_t,
    pub dot3StatsCollFrequencies: [u_int32_t; 16usize],
    pub dot3Compliance: u_int32_t,
}
pub const dot3Vendors_dot3VendorAMD: dot3Vendors = 1;
pub const dot3Vendors_dot3VendorIntel: dot3Vendors = 2;
pub const dot3Vendors_dot3VendorNational: dot3Vendors = 4;
pub const dot3Vendors_dot3VendorFujitsu: dot3Vendors = 5;
pub const dot3Vendors_dot3VendorDigital: dot3Vendors = 6;
pub const dot3Vendors_dot3VendorWesternDigital: dot3Vendors = 7;
pub type dot3Vendors = ::std::os::raw::c_uint;
pub const dot3ChipSetAMD7990: _bindgen_ty_3 = 1;
pub const dot3ChipSetAMD79900: _bindgen_ty_3 = 2;
pub const dot3ChipSetAMD79C940: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const dot3ChipSetIntel82586: _bindgen_ty_4 = 1;
pub const dot3ChipSetIntel82596: _bindgen_ty_4 = 2;
pub const dot3ChipSetIntel82557: _bindgen_ty_4 = 3;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const dot3ChipSetNational8390: _bindgen_ty_5 = 1;
pub const dot3ChipSetNationalSonic: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const dot3ChipSetFujitsu86950: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const dot3ChipSetDigitalDC21040: _bindgen_ty_7 = 1;
pub const dot3ChipSetDigitalDC21140: _bindgen_ty_7 = 2;
pub const dot3ChipSetDigitalDC21041: _bindgen_ty_7 = 3;
pub const dot3ChipSetDigitalDC21140A: _bindgen_ty_7 = 4;
pub const dot3ChipSetDigitalDC21142: _bindgen_ty_7 = 5;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const dot3ChipSetWesternDigital83C690: _bindgen_ty_8 = 1;
pub const dot3ChipSetWesternDigital83C790: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_family_id {
    pub iffmid_len: u_int32_t,
    pub iffmid_id: u_int32_t,
    pub iffmid_str: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utun_stats_param {
    pub utsp_packets: u_int64_t,
    pub utsp_bytes: u_int64_t,
    pub utsp_errors: u_int64_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_cellular_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_min_queue_size: u_int32_t,
    pub ul_avg_queue_size: u_int32_t,
    pub ul_max_queue_size: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub config_inactivity_time: u_int32_t,
    pub config_backoff_time: u_int32_t,
    pub mss_recommended: u_int16_t,
    pub reserved_1: u_int16_t,
    pub reserved_2: u_int32_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
    pub reserved_5: u_int64_t,
    pub reserved_6: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_cellular_status {
    pub if_cell_u: if_cellular_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_cellular_status__bindgen_ty_1 {
    pub if_status_v1: if_cellular_status_v1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_wifi_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_error_rate: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub dl_min_latency: u_int32_t,
    pub dl_effective_latency: u_int32_t,
    pub dl_max_latency: u_int32_t,
    pub dl_error_rate: u_int32_t,
    pub config_frequency: u_int32_t,
    pub config_multicast_rate: u_int32_t,
    pub scan_count: u_int32_t,
    pub scan_duration: u_int32_t,
    pub reserved_1: u_int64_t,
    pub reserved_2: u_int64_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_wifi_status {
    pub if_wifi_u: if_wifi_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_wifi_status__bindgen_ty_1 {
    pub if_status_v1: if_wifi_status_v1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_link_status {
    pub __bindgen_anon_1: if_link_status__bindgen_ty_1,
    pub ifsr_version: u_int32_t,
    pub ifsr_len: u_int32_t,
    pub ifsr_u: if_link_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_link_status__bindgen_ty_1 {
    pub ifsr_cell: if_cellular_status,
    pub ifsr_wifi: if_wifi_status,
}
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_1:
    ifnet_interface_advisory_version = 1;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_2:
    ifnet_interface_advisory_version = 2;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_CURRENT:
    ifnet_interface_advisory_version = 2;
pub type ifnet_interface_advisory_version = u8;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_TX:
    ifnet_interface_advisory_direction = 1;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_RX:
    ifnet_interface_advisory_direction = 2;
pub type ifnet_interface_advisory_direction = u8;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_WIFI:
    ifnet_interface_advisory_interface_type = 1;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_CELL:
    ifnet_interface_advisory_interface_type = 2;
pub type ifnet_interface_advisory_interface_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_header {
    pub version: ifnet_interface_advisory_version,
    pub direction: ifnet_interface_advisory_direction,
    pub interface_type: ifnet_interface_advisory_interface_type,
    pub reserved: u8,
}
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_UP:
    ifnet_interface_advisory_rate_trend = 2147483647;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_DOWN:
    ifnet_interface_advisory_rate_trend = -2147483648;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_NEUTRAL:
    ifnet_interface_advisory_rate_trend = 0;
pub type ifnet_interface_advisory_rate_trend = i32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_capacity {
    pub rate_trend_suggestion: ifnet_interface_advisory_rate_trend,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
}
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_NOT_AVAIL:
    ifnet_interface_advisory_wifi_freq_band = 0;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_24GHZ:
    ifnet_interface_advisory_wifi_freq_band = 1;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_5GHZ:
    ifnet_interface_advisory_wifi_freq_band = 2;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_6GHZ:
    ifnet_interface_advisory_wifi_freq_band = 3;
pub type ifnet_interface_advisory_wifi_freq_band = u8;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_wifi_context {
    pub frequency_band: ifnet_interface_advisory_wifi_freq_band,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
    pub radio_coex: u8,
    pub wlan_duty_cycle: u16,
    pub wifi_observed_tx_bitrate: [u32; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_cell_context {
    pub radio_access_technology: u8,
    pub reference_signal_level: i16,
    pub signal_level: i16,
    pub signal_quality: i8,
    pub uplink_bler: u8,
    pub downlink_bler: u8,
    pub bandwidth_limitation_indication: u8,
    pub cdrx_state: u8,
    pub cdrx_cycle: u16,
    pub estimated_outage_period: u16,
    pub outage_state: u8,
    pub __pad: u8,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1 {
    pub version: u8,
    pub direction: u8,
    pub _reserved: u16,
    pub rate_trend_suggestion: i32,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
    pub frequency_band: u8,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub header: ifnet_interface_advisory_header,
    pub capacity: ifnet_interface_advisory_capacity,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub wifi_context: ifnet_interface_advisory_wifi_context,
    pub cell_context: ifnet_interface_advisory_cell_context,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_descriptor_common {
    pub itd_type: u8,
    pub _reserved: u8,
    pub itd_len: u16,
    pub itd_flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_ip_addr {
    pub __bindgen_anon_1: ifnet_ip_addr__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union ifnet_ip_addr__bindgen_ty_1 {
    pub addr8: [u8; 16usize],
    pub addr16: [u16; 8usize],
    pub addr32: [u32; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ifnet_traffic_descriptor_inet {
    pub inet_common: ifnet_traffic_descriptor_common,
    pub inet_mask: u8,
    pub inet_ipver: u8,
    pub inet_proto: u8,
    pub _reserved: u8,
    pub inet_laddr: ifnet_ip_addr,
    pub inet_raddr: ifnet_ip_addr,
    pub inet_lport: u16,
    pub inet_rport: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action {
    pub ra_type: u8,
    pub _reserved: u8,
    pub ra_len: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action_steer {
    pub ras_common: ifnet_traffic_rule_action,
    pub ras_qset_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_nke {
    pub nke_handle: ::std::os::raw::c_uint,
    pub nke_where: ::std::os::raw::c_uint,
    pub nke_flags: ::std::os::raw::c_int,
    pub reserved: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ndrv {
    pub snd_len: ::std::os::raw::c_uchar,
    pub snd_family: ::std::os::raw::c_uchar,
    pub snd_name: [::std::os::raw::c_uchar; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ndrv_demux_desc {
    pub __bindgen_anon_1: ndrv_demux_desc__bindgen_ty_1,
    pub type_: u_int16_t,
    pub length: u_int16_t,
    pub data: ndrv_demux_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ndrv_demux_desc__bindgen_ty_1 {
    pub ether_type: u_int16_t,
    pub sap: [u_int8_t; 3usize],
    pub snap: [u_int8_t; 5usize],
    pub other: [u_int8_t; 28usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndrv_protocol_desc {
    pub version: u_int32_t,
    pub protocol_family: u_int32_t,
    pub demux_count: u_int32_t,
    pub demux_list: *mut ndrv_demux_desc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_msg {
    pub sadb_msg_version: u_int8_t,
    pub sadb_msg_type: u_int8_t,
    pub sadb_msg_errno: u_int8_t,
    pub sadb_msg_satype: u_int8_t,
    pub sadb_msg_len: u_int16_t,
    pub sadb_msg_reserved: u_int16_t,
    pub sadb_msg_seq: u_int32_t,
    pub sadb_msg_pid: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ext {
    pub sadb_ext_len: u_int16_t,
    pub sadb_ext_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sa {
    pub sadb_sa_len: u_int16_t,
    pub sadb_sa_exttype: u_int16_t,
    pub sadb_sa_spi: u_int32_t,
    pub sadb_sa_replay: u_int8_t,
    pub sadb_sa_state: u_int8_t,
    pub sadb_sa_auth: u_int8_t,
    pub sadb_sa_encrypt: u_int8_t,
    pub sadb_sa_flags: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_lifetime {
    pub sadb_lifetime_len: u_int16_t,
    pub sadb_lifetime_exttype: u_int16_t,
    pub sadb_lifetime_allocations: u_int32_t,
    pub sadb_lifetime_bytes: u_int64_t,
    pub sadb_lifetime_addtime: u_int64_t,
    pub sadb_lifetime_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_address {
    pub sadb_address_len: u_int16_t,
    pub sadb_address_exttype: u_int16_t,
    pub sadb_address_proto: u_int8_t,
    pub sadb_address_prefixlen: u_int8_t,
    pub sadb_address_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_key {
    pub sadb_key_len: u_int16_t,
    pub sadb_key_exttype: u_int16_t,
    pub sadb_key_bits: u_int16_t,
    pub sadb_key_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ident {
    pub sadb_ident_len: u_int16_t,
    pub sadb_ident_exttype: u_int16_t,
    pub sadb_ident_type: u_int16_t,
    pub sadb_ident_reserved: u_int16_t,
    pub sadb_ident_id: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sens {
    pub sadb_sens_len: u_int16_t,
    pub sadb_sens_exttype: u_int16_t,
    pub sadb_sens_dpd: u_int32_t,
    pub sadb_sens_sens_level: u_int8_t,
    pub sadb_sens_sens_len: u_int8_t,
    pub sadb_sens_integ_level: u_int8_t,
    pub sadb_sens_integ_len: u_int8_t,
    pub sadb_sens_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_prop {
    pub sadb_prop_len: u_int16_t,
    pub sadb_prop_exttype: u_int16_t,
    pub sadb_prop_replay: u_int8_t,
    pub sadb_prop_reserved: [u_int8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_comb {
    pub sadb_comb_auth: u_int8_t,
    pub sadb_comb_encrypt: u_int8_t,
    pub sadb_comb_flags: u_int16_t,
    pub sadb_comb_auth_minbits: u_int16_t,
    pub sadb_comb_auth_maxbits: u_int16_t,
    pub sadb_comb_encrypt_minbits: u_int16_t,
    pub sadb_comb_encrypt_maxbits: u_int16_t,
    pub sadb_comb_reserved: u_int32_t,
    pub sadb_comb_soft_allocations: u_int32_t,
    pub sadb_comb_hard_allocations: u_int32_t,
    pub sadb_comb_soft_bytes: u_int64_t,
    pub sadb_comb_hard_bytes: u_int64_t,
    pub sadb_comb_soft_addtime: u_int64_t,
    pub sadb_comb_hard_addtime: u_int64_t,
    pub sadb_comb_soft_usetime: u_int64_t,
    pub sadb_comb_hard_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_supported {
    pub sadb_supported_len: u_int16_t,
    pub sadb_supported_exttype: u_int16_t,
    pub sadb_supported_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_alg {
    pub sadb_alg_id: u_int8_t,
    pub sadb_alg_ivlen: u_int8_t,
    pub sadb_alg_minbits: u_int16_t,
    pub sadb_alg_maxbits: u_int16_t,
    pub sadb_alg_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_spirange {
    pub sadb_spirange_len: u_int16_t,
    pub sadb_spirange_exttype: u_int16_t,
    pub sadb_spirange_min: u_int32_t,
    pub sadb_spirange_max: u_int32_t,
    pub sadb_spirange_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_kmprivate {
    pub sadb_x_kmprivate_len: u_int16_t,
    pub sadb_x_kmprivate_exttype: u_int16_t,
    pub sadb_x_kmprivate_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sadb_x_sa2 {
    pub __bindgen_anon_1: sadb_x_sa2__bindgen_ty_1,
    pub __bindgen_anon_2: sadb_x_sa2__bindgen_ty_2,
    pub sadb_x_sa2_len: u_int16_t,
    pub sadb_x_sa2_exttype: u_int16_t,
    pub sadb_x_sa2_mode: u_int8_t,
    pub sadb_x_sa2_sequence: u_int32_t,
    pub sadb_x_sa2_reqid: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_1 {
    pub sadb_x_sa2_reserved1: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_2 {
    pub sadb_x_sa2_reserved2: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_policy {
    pub sadb_x_policy_len: u_int16_t,
    pub sadb_x_policy_exttype: u_int16_t,
    pub sadb_x_policy_type: u_int16_t,
    pub sadb_x_policy_dir: u_int8_t,
    pub sadb_x_policy_reserved: u_int8_t,
    pub sadb_x_policy_id: u_int32_t,
    pub sadb_x_policy_reserved2: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_ipsecrequest {
    pub sadb_x_ipsecrequest_len: u_int16_t,
    pub sadb_x_ipsecrequest_proto: u_int16_t,
    pub sadb_x_ipsecrequest_mode: u_int8_t,
    pub sadb_x_ipsecrequest_level: u_int8_t,
    pub sadb_x_ipsecrequest_reqid: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_session_id {
    pub sadb_session_id_len: u_int16_t,
    pub sadb_session_id_exttype: u_int16_t,
    pub sadb_session_id_v: [u_int64_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sastat {
    pub spi: u_int32_t,
    pub created: u_int32_t,
    pub lft_c: sadb_lifetime,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sastat {
    pub sadb_sastat_len: u_int16_t,
    pub sadb_sastat_exttype: u_int16_t,
    pub sadb_sastat_dir: u_int32_t,
    pub sadb_sastat_reserved: u_int32_t,
    pub sadb_sastat_list_len: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_metrics {
    pub rmx_locks: u_int32_t,
    pub rmx_mtu: u_int32_t,
    pub rmx_hopcount: u_int32_t,
    pub rmx_expire: i32,
    pub rmx_recvpipe: u_int32_t,
    pub rmx_sendpipe: u_int32_t,
    pub rmx_ssthresh: u_int32_t,
    pub rmx_rtt: u_int32_t,
    pub rmx_rttvar: u_int32_t,
    pub rmx_pksent: u_int32_t,
    pub rmx_state: u_int32_t,
    pub rmx_filler: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtstat {
    pub rts_badredirect: ::std::os::raw::c_short,
    pub rts_dynamic: ::std::os::raw::c_short,
    pub rts_newgateway: ::std::os::raw::c_short,
    pub rts_unreach: ::std::os::raw::c_short,
    pub rts_wildcard: ::std::os::raw::c_short,
    pub rts_badrtgwroute: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_pid: pid_t,
    pub rtm_seq: ::std::os::raw::c_int,
    pub rtm_errno: ::std::os::raw::c_int,
    pub rtm_use: ::std::os::raw::c_int,
    pub rtm_inits: u_int32_t,
    pub rtm_rmx: rt_metrics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr2 {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_refcnt: i32,
    pub rtm_parentflags: ::std::os::raw::c_int,
    pub rtm_reserved: ::std::os::raw::c_int,
    pub rtm_use: ::std::os::raw::c_int,
    pub rtm_inits: u_int32_t,
    pub rtm_rmx: rt_metrics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_addrinfo {
    pub rti_addrs: ::std::os::raw::c_int,
    pub rti_info: [*mut sockaddr; 8usize],
}
pub type n_short = __uint16_t;
pub type n_long = __uint32_t;
pub type n_time = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ip_tos: u_char,
    pub ip_len: u_short,
    pub ip_id: u_short,
    pub ip_off: u_short,
    pub ip_ttl: u_char,
    pub ip_p: u_char,
    pub ip_sum: u_short,
    pub ip_src: in_addr,
    pub ip_dst: in_addr,
}
impl ip {
    #[inline]
    pub fn ip_hl(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_hl(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_v(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_v(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ip_hl: u_int, ip_v: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ip_hl: u32 = unsafe { ::std::mem::transmute(ip_hl) };
            ip_hl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ip_v: u32 = unsafe { ::std::mem::transmute(ip_v) };
            ip_v as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_timestamp {
    pub ipt_code: u_char,
    pub ipt_len: u_char,
    pub ipt_ptr: u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ipt_timestamp: ip_timestamp_ipt_timestamp,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip_timestamp_ipt_timestamp {
    pub ipt_time: [n_long; 1usize],
    pub ipt_ta: [ip_timestamp_ipt_timestamp_ipt_ta; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_timestamp_ipt_timestamp_ipt_ta {
    pub ipt_addr: in_addr,
    pub ipt_time: n_long,
}
impl ip_timestamp {
    #[inline]
    pub fn ipt_flg(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_flg(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ipt_oflw(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_oflw(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ipt_flg: u_int, ipt_oflw: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ipt_flg: u32 = unsafe { ::std::mem::transmute(ipt_flg) };
            ipt_flg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ipt_oflw: u32 = unsafe { ::std::mem::transmute(ipt_oflw) };
            ipt_oflw as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udphdr {
    pub uh_sport: u_short,
    pub uh_dport: u_short,
    pub uh_ulen: u_short,
    pub uh_sum: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bootp {
    pub bp_op: u_char,
    pub bp_htype: u_char,
    pub bp_hlen: u_char,
    pub bp_hops: u_char,
    pub bp_xid: u_int32_t,
    pub bp_secs: u_short,
    pub bp_unused: u_short,
    pub bp_ciaddr: in_addr,
    pub bp_yiaddr: in_addr,
    pub bp_siaddr: in_addr,
    pub bp_giaddr: in_addr,
    pub bp_chaddr: [u_char; 16usize],
    pub bp_sname: [u_char; 64usize],
    pub bp_file: [u_char; 128usize],
    pub bp_vend: [u_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vend {
    pub v_magic: [u_char; 4usize],
    pub v_flags: u_int32_t,
    pub v_unused: [u_char; 56usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nextvend {
    pub __bindgen_anon_1: nextvend__bindgen_ty_1,
    pub nv_magic: [u_char; 4usize],
    pub nv_version: u_char,
    pub nv_U: nextvend__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nextvend__bindgen_ty_1 {
    pub __bindgen_anon_1: nextvend__bindgen_ty_1__bindgen_ty_1,
    pub NV0: [u_char; 58usize],
    pub NV1: nextvend__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nextvend__bindgen_ty_1__bindgen_ty_1 {
    pub NV1_opcode: u_char,
    pub NV1_xid: u_char,
    pub NV1_text: [u_char; 55usize],
    pub NV1_null: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bootp_packet {
    pub bp_ip: ip,
    pub bp_udp: udphdr,
    pub bp_bootp: bootp,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_hdr {
    pub __bindgen_anon_1: icmp6_hdr__bindgen_ty_1,
    pub icmp6_type: u_int8_t,
    pub icmp6_code: u_int8_t,
    pub icmp6_cksum: u_int16_t,
    pub icmp6_dataun: icmp6_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp6_hdr__bindgen_ty_1 {
    pub icmp6_un_data32: [u_int32_t; 1usize],
    pub icmp6_un_data16: [u_int16_t; 2usize],
    pub icmp6_un_data8: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mld_hdr {
    pub mld_icmp6_hdr: icmp6_hdr,
    pub mld_addr: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_solicit {
    pub nd_rs_hdr: icmp6_hdr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_advert {
    pub nd_ra_hdr: icmp6_hdr,
    pub nd_ra_reachable: u_int32_t,
    pub nd_ra_retransmit: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_solicit {
    pub nd_ns_hdr: icmp6_hdr,
    pub nd_ns_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_advert {
    pub nd_na_hdr: icmp6_hdr,
    pub nd_na_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_redirect {
    pub nd_rd_hdr: icmp6_hdr,
    pub nd_rd_target: in6_addr,
    pub nd_rd_dst: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_hdr {
    pub nd_opt_type: u_int8_t,
    pub nd_opt_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_prefix_info {
    pub nd_opt_pi_type: u_int8_t,
    pub nd_opt_pi_len: u_int8_t,
    pub nd_opt_pi_prefix_len: u_int8_t,
    pub nd_opt_pi_flags_reserved: u_int8_t,
    pub nd_opt_pi_valid_time: u_int32_t,
    pub nd_opt_pi_preferred_time: u_int32_t,
    pub nd_opt_pi_reserved2: u_int32_t,
    pub nd_opt_pi_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_nonce {
    pub nd_opt_nonce_type: u_int8_t,
    pub nd_opt_nonce_len: u_int8_t,
    pub nd_opt_nonce: [u_int8_t; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_rd_hdr {
    pub nd_opt_rh_type: u_int8_t,
    pub nd_opt_rh_len: u_int8_t,
    pub nd_opt_rh_reserved1: u_int16_t,
    pub nd_opt_rh_reserved2: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_mtu {
    pub nd_opt_mtu_type: u_int8_t,
    pub nd_opt_mtu_len: u_int8_t,
    pub nd_opt_mtu_reserved: u_int16_t,
    pub nd_opt_mtu_mtu: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_route_info {
    pub nd_opt_rti_type: u_int8_t,
    pub nd_opt_rti_len: u_int8_t,
    pub nd_opt_rti_prefixlen: u_int8_t,
    pub nd_opt_rti_flags: u_int8_t,
    pub nd_opt_rti_lifetime: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_rdnss {
    pub nd_opt_rdnss_type: u_int8_t,
    pub nd_opt_rdnss_len: u_int8_t,
    pub nd_opt_rdnss_reserved: u_int16_t,
    pub nd_opt_rdnss_lifetime: u_int32_t,
    pub nd_opt_rdnss_addr: [in6_addr; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_dnssl {
    pub nd_opt_dnssl_type: u_int8_t,
    pub nd_opt_dnssl_len: u_int8_t,
    pub nd_opt_dnssl_reserved: u_int16_t,
    pub nd_opt_dnssl_lifetime: u_int32_t,
    pub nd_opt_dnssl_domains: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_pref64 {
    pub nd_opt_pref64_type: u_int8_t,
    pub nd_opt_pref64_len: u_int8_t,
    pub nd_opt_pref64_scaled_lifetime_plc: u_int16_t,
    pub nd_opt_pref64_prefix: [u_int32_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_namelookup {
    pub icmp6_nl_hdr: icmp6_hdr,
    pub icmp6_nl_nonce: [u_int8_t; 8usize],
    pub icmp6_nl_ttl: i32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_nodeinfo {
    pub icmp6_ni_hdr: icmp6_hdr,
    pub icmp6_ni_nonce: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ni_reply_fqdn {
    pub ni_fqdn_ttl: u_int32_t,
    pub ni_fqdn_namelen: u_int8_t,
    pub ni_fqdn_name: [u_int8_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_router_renum {
    pub rr_hdr: icmp6_hdr,
    pub rr_segnum: u_int8_t,
    pub rr_flags: u_int8_t,
    pub rr_maxdelay: u_int16_t,
    pub rr_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_match {
    pub rpm_code: u_int8_t,
    pub rpm_len: u_int8_t,
    pub rpm_ordinal: u_int8_t,
    pub rpm_matchlen: u_int8_t,
    pub rpm_minlen: u_int8_t,
    pub rpm_maxlen: u_int8_t,
    pub rpm_reserved: u_int16_t,
    pub rpm_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_use {
    pub rpu_uselen: u_int8_t,
    pub rpu_keeplen: u_int8_t,
    pub rpu_ramask: u_int8_t,
    pub rpu_raflags: u_int8_t,
    pub rpu_vltime: u_int32_t,
    pub rpu_pltime: u_int32_t,
    pub rpu_flags: u_int32_t,
    pub rpu_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_result {
    pub rrr_flags: u_int16_t,
    pub rrr_ordinal: u_int8_t,
    pub rrr_matchedlen: u_int8_t,
    pub rrr_ifid: u_int32_t,
    pub rrr_prefix: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_filter {
    pub icmp6_filt: [u_int32_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6errstat {
    pub icp6errs_dst_unreach_noroute: u_quad_t,
    pub icp6errs_dst_unreach_admin: u_quad_t,
    pub icp6errs_dst_unreach_beyondscope: u_quad_t,
    pub icp6errs_dst_unreach_addr: u_quad_t,
    pub icp6errs_dst_unreach_noport: u_quad_t,
    pub icp6errs_packet_too_big: u_quad_t,
    pub icp6errs_time_exceed_transit: u_quad_t,
    pub icp6errs_time_exceed_reassembly: u_quad_t,
    pub icp6errs_paramprob_header: u_quad_t,
    pub icp6errs_paramprob_nextheader: u_quad_t,
    pub icp6errs_paramprob_option: u_quad_t,
    pub icp6errs_redirect: u_quad_t,
    pub icp6errs_unknown: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6stat {
    pub icp6s_error: u_quad_t,
    pub icp6s_canterror: u_quad_t,
    pub icp6s_toofreq: u_quad_t,
    pub icp6s_outhist: [u_quad_t; 256usize],
    pub icp6s_badcode: u_quad_t,
    pub icp6s_tooshort: u_quad_t,
    pub icp6s_checksum: u_quad_t,
    pub icp6s_badlen: u_quad_t,
    pub icp6s_reflect: u_quad_t,
    pub icp6s_inhist: [u_quad_t; 256usize],
    pub icp6s_nd_toomanyopt: u_quad_t,
    pub icp6s_outerrhist: icmp6errstat,
    pub icp6s_pmtuchg: u_quad_t,
    pub icp6s_nd_badopt: u_quad_t,
    pub icp6s_badns: u_quad_t,
    pub icp6s_badna: u_quad_t,
    pub icp6s_badrs: u_quad_t,
    pub icp6s_badra: u_quad_t,
    pub icp6s_badredirect: u_quad_t,
    pub icp6s_rfc6980_drop: u_quad_t,
    pub icp6s_badpkttoobig: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp_ra_addr {
    pub ira_addr: u_int32_t,
    pub ira_preference: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct icmp {
    pub __bindgen_anon_1: icmp__bindgen_ty_1,
    pub __bindgen_anon_2: icmp__bindgen_ty_2,
    pub icmp_type: u_char,
    pub icmp_code: u_char,
    pub icmp_cksum: u_short,
    pub icmp_hun: icmp__bindgen_ty_1,
    pub icmp_dun: icmp__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_1 {
    pub ih_pptr: u_char,
    pub ih_gwaddr: in_addr,
    pub ih_idseq: icmp__bindgen_ty_1_ih_idseq,
    pub ih_void: ::std::os::raw::c_int,
    pub ih_pmtu: icmp__bindgen_ty_1_ih_pmtu,
    pub ih_rtradv: icmp__bindgen_ty_1_ih_rtradv,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_idseq {
    pub icd_id: n_short,
    pub icd_seq: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_pmtu {
    pub ipm_void: n_short,
    pub ipm_nextmtu: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_rtradv {
    pub irt_num_addrs: u_char,
    pub irt_wpa: u_char,
    pub irt_lifetime: u_int16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_2 {
    pub id_ts: icmp__bindgen_ty_2_id_ts,
    pub id_ip: icmp__bindgen_ty_2_id_ip,
    pub id_radv: icmp_ra_addr,
    pub id_mask: u_int32_t,
    pub id_data: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ts {
    pub its_otime: n_time,
    pub its_rtime: n_time,
    pub its_ttime: n_time,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ip {
    pub idi_ip: ip,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmpstat {
    pub icps_error: u_int32_t,
    pub icps_oldshort: u_int32_t,
    pub icps_oldicmp: u_int32_t,
    pub icps_outhist: [u_int32_t; 41usize],
    pub icps_badcode: u_int32_t,
    pub icps_tooshort: u_int32_t,
    pub icps_checksum: u_int32_t,
    pub icps_badlen: u_int32_t,
    pub icps_reflect: u_int32_t,
    pub icps_inhist: [u_int32_t; 41usize],
    pub icps_bmcastecho: u_int32_t,
    pub icps_bmcasttstamp: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_arp {
    pub ea_hdr: arphdr,
    pub arp_sha: [u_char; 6usize],
    pub arp_spa: [u_char; 4usize],
    pub arp_tha: [u_char; 6usize],
    pub arp_tpa: [u_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_inarp {
    pub sin_len: u_char,
    pub sin_family: u_char,
    pub sin_port: u_short,
    pub sin_addr: in_addr,
    pub sin_srcaddr: in_addr,
    pub sin_tos: u_short,
    pub sin_other: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp {
    pub igmp_type: u_char,
    pub igmp_code: u_char,
    pub igmp_cksum: u_short,
    pub igmp_group: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpv3 {
    pub igmp_type: u_char,
    pub igmp_code: u_char,
    pub igmp_cksum: u_short,
    pub igmp_group: in_addr,
    pub igmp_misc: u_char,
    pub igmp_qqi: u_char,
    pub igmp_numsrc: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp_grouprec {
    pub ig_type: u_char,
    pub ig_datalen: u_char,
    pub ig_numsrc: u_short,
    pub ig_group: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp_report {
    pub ir_type: u_char,
    pub ir_rsv1: u_char,
    pub ir_cksum: u_short,
    pub ir_rsv2: u_short,
    pub ir_numgrps: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpstat_v3 {
    pub igps_version: u32,
    pub igps_len: u32,
    pub igps_rcv_total: u64,
    pub igps_rcv_tooshort: u64,
    pub igps_rcv_badttl: u64,
    pub igps_rcv_badsum: u64,
    pub igps_rcv_v1v2_queries: u64,
    pub igps_rcv_v3_queries: u64,
    pub igps_rcv_badqueries: u64,
    pub igps_rcv_gen_queries: u64,
    pub igps_rcv_group_queries: u64,
    pub igps_rcv_gsr_queries: u64,
    pub igps_drop_gsr_queries: u64,
    pub igps_rcv_reports: u64,
    pub igps_rcv_badreports: u64,
    pub igps_rcv_ourreports: u64,
    pub igps_rcv_nora: u64,
    pub igps_snd_reports: u64,
    pub __igps_pad: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpstat {
    pub igps_rcv_total: u_int,
    pub igps_rcv_tooshort: u_int,
    pub igps_rcv_badsum: u_int,
    pub igps_rcv_queries: u_int,
    pub igps_rcv_badqueries: u_int,
    pub igps_rcv_reports: u_int,
    pub igps_rcv_badreports: u_int,
    pub igps_rcv_ourreports: u_int,
    pub igps_snd_reports: u_int,
}
pub type so_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsockbuf {
    pub sb_cc: u_int32_t,
    pub sb_hiwat: u_int32_t,
    pub sb_mbcnt: u_int32_t,
    pub sb_mbmax: u_int32_t,
    pub sb_lowat: i32,
    pub sb_flags: ::std::os::raw::c_short,
    pub sb_timeo: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsocket {
    pub xso_len: u_int32_t,
    pub xso_so: u_int32_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int32_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xsocket64 {
    pub xso_len: u_int32_t,
    pub xso_so: u_int64_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int64_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
pub const so_tracker_action_SO_TRACKER_ACTION_INVALID: so_tracker_action = 0;
pub const so_tracker_action_SO_TRACKER_ACTION_ADD: so_tracker_action = 1;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_BY_APP: so_tracker_action = 2;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_ALL: so_tracker_action = 3;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_MAX: so_tracker_action = 4;
pub type so_tracker_action = ::std::os::raw::c_uint;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_INVALID: so_tracker_attribute = 0;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS_FAMILY: so_tracker_attribute = 1;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS: so_tracker_attribute = 2;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_APP_UUID: so_tracker_attribute = 3;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN: so_tracker_attribute = 4;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN_OWNER: so_tracker_attribute = 5;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_FLAGS: so_tracker_attribute = 6;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DUMP_ENTRY: so_tracker_attribute = 7;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MEMORY_USED: so_tracker_attribute = 8;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MAX: so_tracker_attribute = 9;
pub type so_tracker_attribute = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracker_action(
        action: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
    ) -> ::std::os::raw::c_int;
}
pub type inp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr_4in6 {
    pub ia46_pad32: [u_int32_t; 3usize],
    pub ia46_addr4: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _inpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbport {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_pktopts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_moptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbpolicy {
    _unused: [u8; 0],
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct inpcb {
    pub __bindgen_anon_1: inpcb__bindgen_ty_1,
    pub __bindgen_anon_2: inpcb__bindgen_ty_2,
    pub __bindgen_anon_3: inpcb__bindgen_ty_3,
    pub __bindgen_anon_4: inpcb__bindgen_ty_4,
    pub __bindgen_anon_5: inpcb__bindgen_ty_5,
    pub inp_hash: _inpcb_list_entry,
    pub reserved1: in_addr,
    pub reserved2: in_addr,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: _inpcb_list_entry,
    pub inp_ppcb: u_int32_t,
    pub inp_pcbinfo: u_int32_t,
    pub inp_socket: u_int32_t,
    pub nat_owner: u_char,
    pub nat_cookie: u_int32_t,
    pub inp_portlist: _inpcb_list_entry,
    pub inp_phd: u_int32_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: inpcb__bindgen_ty_1,
    pub inp_dependladdr: inpcb__bindgen_ty_2,
    pub inp_dependroute: inpcb__bindgen_ty_3,
    pub inp_depend4: inpcb__bindgen_ty_4,
    pub inp_depend6: inpcb__bindgen_ty_5,
    pub hash_element: ::std::os::raw::c_int,
    pub inp_saved_ppcb: u_int32_t,
    pub inp_sp: u_int32_t,
    pub reserved: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_3 {
    pub inp4_route: [u_char; 20usize],
    pub inp6_route: [u_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_4 {
    pub inp4_ip_tos: u_char,
    pub inp4_options: u_int32_t,
    pub inp4_moptions: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_5 {
    pub inp6_options: u_int32_t,
    pub inp6_hlim: u_int8_t,
    pub unused_uint8_1: u_int8_t,
    pub unused_uint16_1: ushort,
    pub inp6_outputopts: u_int32_t,
    pub inp6_moptions: u_int32_t,
    pub inp6_icmp6filt: u_int32_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb {
    pub xi_len: u_int32_t,
    pub xi_inp: inpcb,
    pub xi_socket: xsocket,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct inpcb64_list_entry {
    pub le_next: u_int64_t,
    pub le_prev: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb64 {
    pub __bindgen_anon_1: xinpcb64__bindgen_ty_1,
    pub __bindgen_anon_2: xinpcb64__bindgen_ty_2,
    pub __bindgen_anon_3: xinpcb64__bindgen_ty_3,
    pub __bindgen_anon_4: xinpcb64__bindgen_ty_4,
    pub xi_len: u_int64_t,
    pub xi_inpp: u_int64_t,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: inpcb64_list_entry,
    pub inp_ppcb: u_int64_t,
    pub inp_pcbinfo: u_int64_t,
    pub inp_portlist: inpcb64_list_entry,
    pub inp_phd: u_int64_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: xinpcb64__bindgen_ty_1,
    pub inp_dependladdr: xinpcb64__bindgen_ty_2,
    pub inp_depend4: xinpcb64__bindgen_ty_3,
    pub inp_depend6: xinpcb64__bindgen_ty_4,
    pub xi_socket: xsocket64,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xinpcb64__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xinpcb64__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xinpcb64__bindgen_ty_3 {
    pub inp4_ip_tos: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xinpcb64__bindgen_ty_4 {
    pub inp6_hlim: u_int8_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xinpgen {
    pub xig_len: u_int32_t,
    pub xig_count: u_int,
    pub xig_gen: inp_gen_t,
    pub xig_sogen: so_gen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_sys {
    pub ss_len: u_char,
    pub ss_family: u_char,
    pub ss_sysaddr: u_int16_t,
    pub ss_reserved: [u_int32_t; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_event_msg {
    pub total_size: u_int32_t,
    pub vendor_code: u_int32_t,
    pub kev_class: u_int32_t,
    pub kev_subclass: u_int32_t,
    pub id: u_int32_t,
    pub event_code: u_int32_t,
    pub event_data: [u_int32_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_request {
    pub vendor_code: u_int32_t,
    pub kev_class: u_int32_t,
    pub kev_subclass: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_vendor_code {
    pub vendor_code: u_int32_t,
    pub vendor_string: [::std::os::raw::c_char; 200usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_aliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr_in,
    pub ifra_broadaddr: sockaddr_in,
    pub ifra_mask: sockaddr_in,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_data {
    pub link_data: net_event_data,
    pub ia_addr: in_addr,
    pub ia_net: u_int32_t,
    pub ia_netmask: u_int32_t,
    pub ia_subnet: u_int32_t,
    pub ia_subnetmask: u_int32_t,
    pub ia_netbroadcast: in_addr,
    pub ia_dstaddr: in_addr,
}
#[repr(C)]
#[derive(Debug)]
pub struct kev_in_collision {
    pub link_data: net_event_data,
    pub ia_ipaddr: in_addr,
    pub hw_len: u_char,
    pub hw_addr: __IncompleteArrayField<u_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_arpfailure {
    pub link_data: net_event_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_arpalive {
    pub link_data: net_event_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_portinuse {
    pub port: u_int16_t,
    pub req_pid: u_int32_t,
    pub reserved: [u_int32_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_addrlifetime {
    pub ia6t_expire: time_t,
    pub ia6t_preferred: time_t,
    pub ia6t_vltime: u_int32_t,
    pub ia6t_pltime: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addrpolicy {
    pub addr: sockaddr_in6,
    pub addrmask: sockaddr_in6,
    pub preced: ::std::os::raw::c_int,
    pub label: ::std::os::raw::c_int,
    pub use_: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_ifstat {
    pub ifs6_in_receive: u_quad_t,
    pub ifs6_in_hdrerr: u_quad_t,
    pub ifs6_in_toobig: u_quad_t,
    pub ifs6_in_noroute: u_quad_t,
    pub ifs6_in_addrerr: u_quad_t,
    pub ifs6_in_protounknown: u_quad_t,
    pub ifs6_in_truncated: u_quad_t,
    pub ifs6_in_discard: u_quad_t,
    pub ifs6_in_deliver: u_quad_t,
    pub ifs6_out_forward: u_quad_t,
    pub ifs6_out_request: u_quad_t,
    pub ifs6_out_discard: u_quad_t,
    pub ifs6_out_fragok: u_quad_t,
    pub ifs6_out_fragfail: u_quad_t,
    pub ifs6_out_fragcreat: u_quad_t,
    pub ifs6_reass_reqd: u_quad_t,
    pub ifs6_reass_ok: u_quad_t,
    pub ifs6_atmfrag_rcvd: u_quad_t,
    pub ifs6_reass_fail: u_quad_t,
    pub ifs6_in_mcast: u_quad_t,
    pub ifs6_out_mcast: u_quad_t,
    pub ifs6_cantfoward_icmp6: u_quad_t,
    pub ifs6_addr_expiry_cnt: u_quad_t,
    pub ifs6_pfx_expiry_cnt: u_quad_t,
    pub ifs6_defrtr_expiry_cnt: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_ifstat {
    pub ifs6_in_msg: u_quad_t,
    pub ifs6_in_error: u_quad_t,
    pub ifs6_in_dstunreach: u_quad_t,
    pub ifs6_in_adminprohib: u_quad_t,
    pub ifs6_in_timeexceed: u_quad_t,
    pub ifs6_in_paramprob: u_quad_t,
    pub ifs6_in_pkttoobig: u_quad_t,
    pub ifs6_in_echo: u_quad_t,
    pub ifs6_in_echoreply: u_quad_t,
    pub ifs6_in_routersolicit: u_quad_t,
    pub ifs6_in_routeradvert: u_quad_t,
    pub ifs6_in_neighborsolicit: u_quad_t,
    pub ifs6_in_neighboradvert: u_quad_t,
    pub ifs6_in_redirect: u_quad_t,
    pub ifs6_in_mldquery: u_quad_t,
    pub ifs6_in_mldreport: u_quad_t,
    pub ifs6_in_mlddone: u_quad_t,
    pub ifs6_out_msg: u_quad_t,
    pub ifs6_out_error: u_quad_t,
    pub ifs6_out_dstunreach: u_quad_t,
    pub ifs6_out_adminprohib: u_quad_t,
    pub ifs6_out_timeexceed: u_quad_t,
    pub ifs6_out_paramprob: u_quad_t,
    pub ifs6_out_pkttoobig: u_quad_t,
    pub ifs6_out_echo: u_quad_t,
    pub ifs6_out_echoreply: u_quad_t,
    pub ifs6_out_routersolicit: u_quad_t,
    pub ifs6_out_routeradvert: u_quad_t,
    pub ifs6_out_neighborsolicit: u_quad_t,
    pub ifs6_out_neighboradvert: u_quad_t,
    pub ifs6_out_redirect: u_quad_t,
    pub ifs6_out_mldquery: u_quad_t,
    pub ifs6_out_mldreport: u_quad_t,
    pub ifs6_out_mlddone: u_quad_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_ifreq {
    pub __bindgen_anon_1: in6_ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: in6_ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr_in6,
    pub ifru_dstaddr: sockaddr_in6,
    pub ifru_flags: ::std::os::raw::c_int,
    pub ifru_flags6: ::std::os::raw::c_int,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_lifetime: in6_addrlifetime,
    pub ifru_stat: in6_ifstat,
    pub ifru_icmp6stat: icmp6_ifstat,
    pub ifru_scope_id: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_aliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr_in6,
    pub ifra_broadaddr: sockaddr_in6,
    pub ifra_prefixmask: sockaddr_in6,
    pub ifra_flags: ::std::os::raw::c_int,
    pub ifra_lifetime: in6_addrlifetime,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags {
    pub prf_ra: in6_prflags_prf_ra,
    pub prf_reserved1: u_char,
    pub prf_reserved2: u_short,
    pub prf_rr: in6_prflags_prf_rr,
    pub prf_reserved3: u_char,
    pub prf_reserved4: u_short,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags_prf_ra {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_prflags_prf_ra {
    #[inline]
    pub fn onlink(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlink(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autonomous(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autonomous(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        onlink: u_char,
        autonomous: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let onlink: u8 = unsafe { ::std::mem::transmute(onlink) };
            onlink as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autonomous: u8 = unsafe { ::std::mem::transmute(autonomous) };
            autonomous as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags_prf_rr {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_prflags_prf_rr {
    #[inline]
    pub fn decrvalid(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrvalid(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn decrprefd(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrprefd(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        decrvalid: u_char,
        decrprefd: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let decrvalid: u8 = unsafe { ::std::mem::transmute(decrvalid) };
            decrvalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let decrprefd: u8 = unsafe { ::std::mem::transmute(decrprefd) };
            decrprefd as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_prefixreq {
    pub ipr_name: [::std::os::raw::c_char; 16usize],
    pub ipr_origin: u_char,
    pub ipr_plen: u_char,
    pub ipr_vltime: u_int32_t,
    pub ipr_pltime: u_int32_t,
    pub ipr_flags: in6_prflags,
    pub ipr_prefix: sockaddr_in6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_rrenumreq {
    pub irr_name: [::std::os::raw::c_char; 16usize],
    pub irr_origin: u_char,
    pub irr_m_len: u_char,
    pub irr_m_minlen: u_char,
    pub irr_m_maxlen: u_char,
    pub irr_u_uselen: u_char,
    pub irr_u_keeplen: u_char,
    pub irr_raflagmask: in6_rrenumreq_irr_raflagmask,
    pub irr_vltime: u_int32_t,
    pub irr_pltime: u_int32_t,
    pub irr_flags: in6_prflags,
    pub irr_matchprefix: sockaddr_in6,
    pub irr_useprefix: sockaddr_in6,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_rrenumreq_irr_raflagmask {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_rrenumreq_irr_raflagmask {
    #[inline]
    pub fn onlink(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlink(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autonomous(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autonomous(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        onlink: u_char,
        autonomous: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let onlink: u8 = unsafe { ::std::mem::transmute(onlink) };
            onlink as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autonomous: u8 = unsafe { ::std::mem::transmute(autonomous) };
            autonomous as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in6_addrlifetime {
    pub ia6t_expire: u_int32_t,
    pub ia6t_preferred: u_int32_t,
    pub ia6t_vltime: u_int32_t,
    pub ia6t_pltime: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kev_in6_data {
    pub link_data: net_event_data,
    pub ia_addr: sockaddr_in6,
    pub ia_net: sockaddr_in6,
    pub ia_dstaddr: sockaddr_in6,
    pub ia_prefixmask: sockaddr_in6,
    pub ia_plen: u_int32_t,
    pub ia6_flags: u_int32_t,
    pub ia_lifetime: kev_in6_addrlifetime,
    pub ia_mac: [u8; 6usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ip6_hdr {
    pub __bindgen_anon_1: ip6_hdr__bindgen_ty_1,
    pub ip6_ctlun: ip6_hdr__bindgen_ty_1,
    pub ip6_src: in6_addr,
    pub ip6_dst: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip6_hdr__bindgen_ty_1 {
    pub ip6_un1: ip6_hdr__bindgen_ty_1_ip6_hdrctl,
    pub ip6_un2_vfc: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hdr__bindgen_ty_1_ip6_hdrctl {
    pub ip6_un1_flow: u_int32_t,
    pub ip6_un1_plen: u_int16_t,
    pub ip6_un1_nxt: u_int8_t,
    pub ip6_un1_hlim: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_ext {
    pub ip6e_nxt: u_int8_t,
    pub ip6e_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hbh {
    pub ip6h_nxt: u_int8_t,
    pub ip6h_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_dest {
    pub ip6d_nxt: u_int8_t,
    pub ip6d_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt {
    pub ip6o_type: u_int8_t,
    pub ip6o_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_jumbo {
    pub ip6oj_type: u_int8_t,
    pub ip6oj_len: u_int8_t,
    pub ip6oj_jumbo_len: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_nsap {
    pub ip6on_type: u_int8_t,
    pub ip6on_len: u_int8_t,
    pub ip6on_src_nsap_len: u_int8_t,
    pub ip6on_dst_nsap_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_tunnel {
    pub ip6ot_type: u_int8_t,
    pub ip6ot_len: u_int8_t,
    pub ip6ot_encap_limit: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_router {
    pub ip6or_type: u_int8_t,
    pub ip6or_len: u_int8_t,
    pub ip6or_value: [u_int8_t; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr {
    pub ip6r_nxt: u_int8_t,
    pub ip6r_len: u_int8_t,
    pub ip6r_type: u_int8_t,
    pub ip6r_segleft: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr0 {
    pub ip6r0_nxt: u_int8_t,
    pub ip6r0_len: u_int8_t,
    pub ip6r0_type: u_int8_t,
    pub ip6r0_segleft: u_int8_t,
    pub ip6r0_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_frag {
    pub ip6f_nxt: u_int8_t,
    pub ip6f_reserved: u_int8_t,
    pub ip6f_offlg: u_int16_t,
    pub ip6f_ident: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipovly {
    pub ih_x1: [u_char; 9usize],
    pub ih_pr: u_char,
    pub ih_len: u_short,
    pub ih_src: in_addr,
    pub ih_dst: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipstat {
    pub ips_total: u_int32_t,
    pub ips_badsum: u_int32_t,
    pub ips_tooshort: u_int32_t,
    pub ips_toosmall: u_int32_t,
    pub ips_badhlen: u_int32_t,
    pub ips_badlen: u_int32_t,
    pub ips_fragments: u_int32_t,
    pub ips_fragdropped: u_int32_t,
    pub ips_fragtimeout: u_int32_t,
    pub ips_forward: u_int32_t,
    pub ips_fastforward: u_int32_t,
    pub ips_cantforward: u_int32_t,
    pub ips_redirectsent: u_int32_t,
    pub ips_noproto: u_int32_t,
    pub ips_delivered: u_int32_t,
    pub ips_localout: u_int32_t,
    pub ips_odropped: u_int32_t,
    pub ips_reassembled: u_int32_t,
    pub ips_fragmented: u_int32_t,
    pub ips_ofragments: u_int32_t,
    pub ips_cantfrag: u_int32_t,
    pub ips_badoptions: u_int32_t,
    pub ips_noroute: u_int32_t,
    pub ips_badvers: u_int32_t,
    pub ips_rawout: u_int32_t,
    pub ips_toolong: u_int32_t,
    pub ips_notmember: u_int32_t,
    pub ips_nogif: u_int32_t,
    pub ips_badaddr: u_int32_t,
    pub ips_pktdropcntrl: u_int32_t,
    pub ips_rcv_swcsum: u_int32_t,
    pub ips_rcv_swcsum_bytes: u_int32_t,
    pub ips_snd_swcsum: u_int32_t,
    pub ips_snd_swcsum_bytes: u_int32_t,
    pub ips_adj: u_int32_t,
    pub ips_adj_hwcsum_clr: u_int32_t,
    pub ips_rxc_collisions: u_int32_t,
    pub ips_rxc_chained: u_int32_t,
    pub ips_rxc_notchain: u_int32_t,
    pub ips_rxc_chainsz_gt2: u_int32_t,
    pub ips_rxc_chainsz_gt4: u_int32_t,
    pub ips_rxc_notlist: u_int32_t,
    pub ips_raw_sappend_fail: u_int32_t,
    pub ips_necp_policy_drop: u_int32_t,
    pub ips_rcv_if_weak_match: u_int32_t,
    pub ips_rcv_if_no_match: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_linklocal_stat {
    pub iplls_in_total: u_int32_t,
    pub iplls_in_badttl: u_int32_t,
    pub iplls_out_total: u_int32_t,
    pub iplls_out_badttl: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tseg_qent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsegqe_head {
    pub lh_first: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpcb {
    pub t_segq: tsegqe_head,
    pub t_dupacks: ::std::os::raw::c_int,
    pub unused: u_int32_t,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_inpcb: u_int32_t,
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat {
    pub tcps_connattempt: u_int32_t,
    pub tcps_accepts: u_int32_t,
    pub tcps_connects: u_int32_t,
    pub tcps_drops: u_int32_t,
    pub tcps_conndrops: u_int32_t,
    pub tcps_closed: u_int32_t,
    pub tcps_segstimed: u_int32_t,
    pub tcps_rttupdated: u_int32_t,
    pub tcps_delack: u_int32_t,
    pub tcps_timeoutdrop: u_int32_t,
    pub tcps_rexmttimeo: u_int32_t,
    pub tcps_persisttimeo: u_int32_t,
    pub tcps_keeptimeo: u_int32_t,
    pub tcps_keepprobe: u_int32_t,
    pub tcps_keepdrops: u_int32_t,
    pub tcps_sndtotal: u_int32_t,
    pub tcps_sndpack: u_int32_t,
    pub tcps_sndbyte: u_int32_t,
    pub tcps_sndrexmitpack: u_int32_t,
    pub tcps_sndrexmitbyte: u_int32_t,
    pub tcps_sndacks: u_int32_t,
    pub tcps_sndprobe: u_int32_t,
    pub tcps_sndurg: u_int32_t,
    pub tcps_sndwinup: u_int32_t,
    pub tcps_sndctrl: u_int32_t,
    pub tcps_rcvtotal: u_int32_t,
    pub tcps_rcvpack: u_int32_t,
    pub tcps_rcvbyte: u_int32_t,
    pub tcps_rcvbadsum: u_int32_t,
    pub tcps_rcvbadoff: u_int32_t,
    pub tcps_rcvmemdrop: u_int32_t,
    pub tcps_rcvshort: u_int32_t,
    pub tcps_rcvduppack: u_int32_t,
    pub tcps_rcvdupbyte: u_int32_t,
    pub tcps_rcvpartduppack: u_int32_t,
    pub tcps_rcvpartdupbyte: u_int32_t,
    pub tcps_rcvoopack: u_int32_t,
    pub tcps_rcvoobyte: u_int32_t,
    pub tcps_rcvpackafterwin: u_int32_t,
    pub tcps_rcvbyteafterwin: u_int32_t,
    pub tcps_rcvafterclose: u_int32_t,
    pub tcps_rcvwinprobe: u_int32_t,
    pub tcps_rcvdupack: u_int32_t,
    pub tcps_rcvacktoomuch: u_int32_t,
    pub tcps_rcvackpack: u_int32_t,
    pub tcps_rcvackbyte: u_int32_t,
    pub tcps_rcvwinupd: u_int32_t,
    pub tcps_pawsdrop: u_int32_t,
    pub tcps_predack: u_int32_t,
    pub tcps_preddat: u_int32_t,
    pub tcps_pcbcachemiss: u_int32_t,
    pub tcps_cachedrtt: u_int32_t,
    pub tcps_cachedrttvar: u_int32_t,
    pub tcps_cachedssthresh: u_int32_t,
    pub tcps_usedrtt: u_int32_t,
    pub tcps_usedrttvar: u_int32_t,
    pub tcps_usedssthresh: u_int32_t,
    pub tcps_persistdrop: u_int32_t,
    pub tcps_badsyn: u_int32_t,
    pub tcps_mturesent: u_int32_t,
    pub tcps_listendrop: u_int32_t,
    pub tcps_synchallenge: u_int32_t,
    pub tcps_rstchallenge: u_int32_t,
    pub tcps_minmssdrops: u_int32_t,
    pub tcps_sndrexmitbad: u_int32_t,
    pub tcps_badrst: u_int32_t,
    pub tcps_sc_added: u_int32_t,
    pub tcps_sc_retransmitted: u_int32_t,
    pub tcps_sc_dupsyn: u_int32_t,
    pub tcps_sc_dropped: u_int32_t,
    pub tcps_sc_completed: u_int32_t,
    pub tcps_sc_bucketoverflow: u_int32_t,
    pub tcps_sc_cacheoverflow: u_int32_t,
    pub tcps_sc_reset: u_int32_t,
    pub tcps_sc_stale: u_int32_t,
    pub tcps_sc_aborted: u_int32_t,
    pub tcps_sc_badack: u_int32_t,
    pub tcps_sc_unreach: u_int32_t,
    pub tcps_sc_zonefail: u_int32_t,
    pub tcps_sc_sendcookie: u_int32_t,
    pub tcps_sc_recvcookie: u_int32_t,
    pub tcps_hc_added: u_int32_t,
    pub tcps_hc_bucketoverflow: u_int32_t,
    pub tcps_sack_recovery_episode: u_int32_t,
    pub tcps_sack_rexmits: u_int32_t,
    pub tcps_sack_rexmit_bytes: u_int32_t,
    pub tcps_sack_rcv_blocks: u_int32_t,
    pub tcps_sack_send_blocks: u_int32_t,
    pub tcps_sack_sboverflow: u_int32_t,
    pub tcps_bg_rcvtotal: u_int32_t,
    pub tcps_rxtfindrop: u_int32_t,
    pub tcps_fcholdpacket: u_int32_t,
    pub tcps_limited_txt: u_int32_t,
    pub tcps_early_rexmt: u_int32_t,
    pub tcps_sack_ackadv: u_int32_t,
    pub tcps_rcv_swcsum: u_int32_t,
    pub tcps_rcv_swcsum_bytes: u_int32_t,
    pub tcps_rcv6_swcsum: u_int32_t,
    pub tcps_rcv6_swcsum_bytes: u_int32_t,
    pub tcps_snd_swcsum: u_int32_t,
    pub tcps_snd_swcsum_bytes: u_int32_t,
    pub tcps_snd6_swcsum: u_int32_t,
    pub tcps_snd6_swcsum_bytes: u_int32_t,
    pub tcps_unused_1: u_int32_t,
    pub tcps_unused_2: u_int32_t,
    pub tcps_unused_3: u_int32_t,
    pub tcps_invalid_mpcap: u_int32_t,
    pub tcps_invalid_joins: u_int32_t,
    pub tcps_mpcap_fallback: u_int32_t,
    pub tcps_join_fallback: u_int32_t,
    pub tcps_estab_fallback: u_int32_t,
    pub tcps_invalid_opt: u_int32_t,
    pub tcps_mp_outofwin: u_int32_t,
    pub tcps_mp_reducedwin: u_int32_t,
    pub tcps_mp_badcsum: u_int32_t,
    pub tcps_mp_oodata: u_int32_t,
    pub tcps_mp_switches: u_int32_t,
    pub tcps_mp_rcvtotal: u_int32_t,
    pub tcps_mp_rcvbytes: u_int32_t,
    pub tcps_mp_sndpacks: u_int32_t,
    pub tcps_mp_sndbytes: u_int32_t,
    pub tcps_join_rxmts: u_int32_t,
    pub tcps_tailloss_rto: u_int32_t,
    pub tcps_reordered_pkts: u_int32_t,
    pub tcps_recovered_pkts: u_int32_t,
    pub tcps_pto: u_int32_t,
    pub tcps_rto_after_pto: u_int32_t,
    pub tcps_tlp_recovery: u_int32_t,
    pub tcps_tlp_recoverlastpkt: u_int32_t,
    pub tcps_ecn_client_success: u_int32_t,
    pub tcps_ecn_recv_ece: u_int32_t,
    pub tcps_ecn_sent_ece: u_int32_t,
    pub tcps_detect_reordering: u_int32_t,
    pub tcps_delay_recovery: u_int32_t,
    pub tcps_avoid_rxmt: u_int32_t,
    pub tcps_unnecessary_rxmt: u_int32_t,
    pub tcps_nostretchack: u_int32_t,
    pub tcps_rescue_rxmt: u_int32_t,
    pub tcps_pto_in_recovery: u_int32_t,
    pub tcps_pmtudbh_reverted: u_int32_t,
    pub tcps_dsack_disable: u_int32_t,
    pub tcps_dsack_ackloss: u_int32_t,
    pub tcps_dsack_badrexmt: u_int32_t,
    pub tcps_dsack_sent: u_int32_t,
    pub tcps_dsack_recvd: u_int32_t,
    pub tcps_dsack_recvd_old: u_int32_t,
    pub tcps_mp_sel_symtomsd: u_int32_t,
    pub tcps_mp_sel_rtt: u_int32_t,
    pub tcps_mp_sel_rto: u_int32_t,
    pub tcps_mp_sel_peer: u_int32_t,
    pub tcps_mp_num_probes: u_int32_t,
    pub tcps_mp_verdowngrade: u_int32_t,
    pub tcps_drop_after_sleep: u_int32_t,
    pub tcps_probe_if: u_int32_t,
    pub tcps_probe_if_conflict: u_int32_t,
    pub tcps_ecn_client_setup: u_int32_t,
    pub tcps_ecn_server_setup: u_int32_t,
    pub tcps_ecn_server_success: u_int32_t,
    pub tcps_ecn_ace_syn_not_ect: u_int32_t,
    pub tcps_ecn_ace_syn_ect1: u_int32_t,
    pub tcps_ecn_ace_syn_ect0: u_int32_t,
    pub tcps_ecn_ace_syn_ce: u_int32_t,
    pub tcps_ecn_lost_synack: u_int32_t,
    pub tcps_ecn_lost_syn: u_int32_t,
    pub tcps_ecn_not_supported: u_int32_t,
    pub tcps_ecn_recv_ce: u_int32_t,
    pub tcps_ecn_ace_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ece: u_int32_t,
    pub tcps_ecn_conn_plnoce: u_int32_t,
    pub tcps_ecn_conn_pl_ce: u_int32_t,
    pub tcps_ecn_conn_nopl_ce: u_int32_t,
    pub tcps_ecn_fallback_synloss: u_int32_t,
    pub tcps_ecn_fallback_reorder: u_int32_t,
    pub tcps_ecn_fallback_ce: u_int32_t,
    pub tcps_tfo_syn_data_rcv: u_int32_t,
    pub tcps_tfo_cookie_req_rcv: u_int32_t,
    pub tcps_tfo_cookie_sent: u_int32_t,
    pub tcps_tfo_cookie_invalid: u_int32_t,
    pub tcps_tfo_cookie_req: u_int32_t,
    pub tcps_tfo_cookie_rcv: u_int32_t,
    pub tcps_tfo_syn_data_sent: u_int32_t,
    pub tcps_tfo_syn_data_acked: u_int32_t,
    pub tcps_tfo_syn_loss: u_int32_t,
    pub tcps_tfo_blackhole: u_int32_t,
    pub tcps_tfo_cookie_wrong: u_int32_t,
    pub tcps_tfo_no_cookie_rcv: u_int32_t,
    pub tcps_tfo_heuristics_disable: u_int32_t,
    pub tcps_tfo_sndblackhole: u_int32_t,
    pub tcps_mss_to_default: u_int32_t,
    pub tcps_mss_to_medium: u_int32_t,
    pub tcps_mss_to_low: u_int32_t,
    pub tcps_ecn_fallback_droprst: u_int32_t,
    pub tcps_ecn_fallback_droprxmt: u_int32_t,
    pub tcps_ecn_fallback_synrst: u_int32_t,
    pub tcps_mptcp_rcvmemdrop: u_int32_t,
    pub tcps_mptcp_rcvduppack: u_int32_t,
    pub tcps_mptcp_rcvpackafterwin: u_int32_t,
    pub tcps_timer_drift_le_1_ms: u_int32_t,
    pub tcps_timer_drift_le_10_ms: u_int32_t,
    pub tcps_timer_drift_le_20_ms: u_int32_t,
    pub tcps_timer_drift_le_50_ms: u_int32_t,
    pub tcps_timer_drift_le_100_ms: u_int32_t,
    pub tcps_timer_drift_le_200_ms: u_int32_t,
    pub tcps_timer_drift_le_500_ms: u_int32_t,
    pub tcps_timer_drift_le_1000_ms: u_int32_t,
    pub tcps_timer_drift_gt_1000_ms: u_int32_t,
    pub tcps_mptcp_handover_attempt: u_int32_t,
    pub tcps_mptcp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_fp_handover_attempt: u_int32_t,
    pub tcps_mptcp_fp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_fp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_fp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_interactive_success: u_int32_t,
    pub tcps_mptcp_aggregate_success: u_int32_t,
    pub tcps_mptcp_fp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_fp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_fp_interactive_success: u_int32_t,
    pub tcps_mptcp_fp_aggregate_success: u_int32_t,
    pub tcps_mptcp_handover_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_wifi_from_cell: u_int32_t,
    pub tcps_mptcp_interactive_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_cell_bytes: u_int64_t,
    pub tcps_mptcp_interactive_cell_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_cell_bytes: u_int64_t,
    pub tcps_mptcp_handover_all_bytes: u_int64_t,
    pub tcps_mptcp_interactive_all_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_all_bytes: u_int64_t,
    pub tcps_mptcp_back_to_wifi: u_int32_t,
    pub tcps_mptcp_wifi_proxy: u_int32_t,
    pub tcps_mptcp_cell_proxy: u_int32_t,
    pub tcps_ka_offload_drops: u_int32_t,
    pub tcps_mptcp_triggered_cell: u_int32_t,
    pub tcps_fin_timeout_drops: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat_local {
    pub badformat: u_int64_t,
    pub unspecv6: u_int64_t,
    pub synfin: u_int64_t,
    pub badformatipsec: u_int64_t,
    pub noconnnolist: u_int64_t,
    pub noconnlist: u_int64_t,
    pub listbadsyn: u_int64_t,
    pub icmp6unreach: u_int64_t,
    pub deprecate6: u_int64_t,
    pub ooopacket: u_int64_t,
    pub rstinsynrcv: u_int64_t,
    pub dospacket: u_int64_t,
    pub cleanup: u_int64_t,
    pub synwindow: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb {
    pub xt_len: u_int32_t,
    pub xt_inp: inpcb,
    pub xt_tp: tcpcb,
    pub xt_socket: xsocket,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb64 {
    pub xt_len: u_int32_t,
    pub xt_inpcb: xinpcb64,
    pub t_segq: u_int64_t,
    pub t_dupacks: ::std::os::raw::c_int,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpiphdr {
    pub ti_i: ipovly,
    pub ti_t: tcphdr,
}
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
pub type au_ctlmode_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
pub type au_session_t = au_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: usize,
    pub op_type: ::std::os::raw::c_uchar,
}
pub type au_expire_after_t = au_expire_after;
pub type token_t = au_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
pub type au_evclass_map_t = au_evclass_map;
extern "C" {
    pub fn audit(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditon(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditctl(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit_addr(
        arg1: *mut auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit_addr(
        arg1: *const auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_session_self() -> mach_port_name_t;
}
extern "C" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_session_port(
        asid: au_asid_t,
        portname: *mut mach_port_name_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cred {
    _unused: [u8; 0],
}
pub type kauth_cred_t = *mut ucred;
pub type posix_cred_t = *mut posix_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vmspace {
    pub dummy: i32,
    pub dummy2: caddr_t,
    pub dummy3: [i32; 5usize],
    pub dummy4: [caddr_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlname {
    pub ctl_name: *mut ::std::os::raw::c_char,
    pub ctl_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcred {
    pub pc_lock: [::std::os::raw::c_char; 72usize],
    pub pc_ucred: *mut ucred,
    pub p_ruid: uid_t,
    pub p_svuid: uid_t,
    pub p_rgid: gid_t,
    pub p_svgid: gid_t,
    pub p_refcnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ucred {
    pub cr_ref: i32,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinfo_proc {
    pub kp_proc: extern_proc,
    pub kp_eproc: kinfo_proc_eproc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kinfo_proc_eproc {
    pub e_paddr: *mut proc_,
    pub e_sess: *mut session,
    pub e_pcred: _pcred,
    pub e_ucred: _ucred,
    pub e_vm: vmspace,
    pub e_ppid: pid_t,
    pub e_pgid: pid_t,
    pub e_jobc: ::std::os::raw::c_short,
    pub e_tdev: dev_t,
    pub e_tpgid: pid_t,
    pub e_tsess: *mut session,
    pub e_wmesg: [::std::os::raw::c_char; 8usize],
    pub e_xsize: segsz_t,
    pub e_xrssize: ::std::os::raw::c_short,
    pub e_xccount: ::std::os::raw::c_short,
    pub e_xswrss: ::std::os::raw::c_short,
    pub e_flag: i32,
    pub e_login: [::std::os::raw::c_char; 12usize],
    pub e_spare: [i32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsw_usage {
    pub xsu_total: u_int64_t,
    pub xsu_avail: u_int64_t,
    pub xsu_used: u_int64_t,
    pub xsu_pagesize: u_int32_t,
    pub xsu_encrypted: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loadavg {
    pub ldavg: [fixpt_t; 3usize],
    pub fscale: ::std::os::raw::c_long,
}
extern "C" {
    pub static mut averunnable: loadavg;
}
extern "C" {
    pub fn sysctl(
        arg1: *mut ::std::os::raw::c_int,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut ::std::os::raw::c_void,
        arg6: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlnametomib(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udpiphdr {
    pub ui_i: ipovly,
    pub ui_u: udphdr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udpstat {
    pub udps_ipackets: u_int32_t,
    pub udps_hdrops: u_int32_t,
    pub udps_badsum: u_int32_t,
    pub udps_badlen: u_int32_t,
    pub udps_noport: u_int32_t,
    pub udps_noportbcast: u_int32_t,
    pub udps_fullsock: u_int32_t,
    pub udpps_pcbcachemiss: u_int32_t,
    pub udpps_pcbhashmiss: u_int32_t,
    pub udps_opackets: u_int32_t,
    pub udps_fastout: u_int32_t,
    pub udps_nosum: u_int32_t,
    pub udps_noportmcast: u_int32_t,
    pub udps_filtermcast: u_int32_t,
    pub udps_rcv_swcsum: u_int32_t,
    pub udps_rcv_swcsum_bytes: u_int32_t,
    pub udps_rcv6_swcsum: u_int32_t,
    pub udps_rcv6_swcsum_bytes: u_int32_t,
    pub udps_snd_swcsum: u_int32_t,
    pub udps_snd_swcsum_bytes: u_int32_t,
    pub udps_snd6_swcsum: u_int32_t,
    pub udps_snd6_swcsum_bytes: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 1024usize];
pub type nspace_name_t = [::std::os::raw::c_char; 1024usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type bank_action_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_persona_info {
    pub unique_pid: u64,
    pub pid: i32,
    pub flags: u32,
    pub pidversion: u32,
    pub persona_id: u32,
    pub uid: u32,
    pub gid: u32,
    pub macho_uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_token {
    pub originator: proc_persona_info,
    pub proximate: proc_persona_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_modify_info {
    pub persona_id: u32,
    pub unique_pid: u64,
}
extern "C" {
    pub fn _NSGetArgv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetArgc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _NSGetEnviron() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetProgname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetMachExecuteHeader() -> *mut mach_header_64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
extern "C" {
    pub fn getopt_long(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt_long_only(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_9 = 0;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_10 = 0;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_11 = 1;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_12 = 1061109567;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_13 = 0;
pub const bold: _bindgen_ty_13 = 1;
pub const italic: _bindgen_ty_13 = 2;
pub const underline: _bindgen_ty_13 = 4;
pub const outline: _bindgen_ty_13 = 8;
pub const shadow: _bindgen_ty_13 = 16;
pub const condense: _bindgen_ty_13 = 32;
pub const extend: _bindgen_ty_13 = 64;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
pub const developStage: _bindgen_ty_14 = 32;
pub const alphaStage: _bindgen_ty_14 = 64;
pub const betaStage: _bindgen_ty_14 = 96;
pub const finalStage: _bindgen_ty_14 = 128;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
pub const OSUnknownByteOrder: _bindgen_ty_15 = 0;
pub const OSLittleEndian: _bindgen_ty_15 = 1;
pub const OSBigEndian: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
}
extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
}
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
}
extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
}
pub type sync_policy_t = ::std::os::raw::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(
        target_task: task_read_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_generate_corpse(
        task: task_read_t,
        corpse_task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_register(
        target_task: task_read_t,
        notify: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_create_identity_token(task: task_t, token: *mut task_id_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_identity_token_get_task_port(
        token: task_id_token_t,
        flavor: task_flavor_t,
        task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_deregister(
        target_task: task_read_t,
        notify: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_sync_upcall(task: task_t, port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_set_corpse_forking_behavior(
        task: task_t,
        behavior: task_corpse_forking_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_async_upcall_propagation(
        task: task_t,
        port: mach_port_t,
        qos: ::std::os::raw::c_int,
        iotier: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_kcdata_object_64(
        task: task_t,
        kcdata_object: kcdata_object_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub notify: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_corpse_forking_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub qos: ::std::os::raw::c_int,
    pub iotier: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub kcdata_object: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_dyld_process_info_notify_register:
        __Request__task_dyld_process_info_notify_register_t,
    pub Request_task_create_identity_token: __Request__task_create_identity_token_t,
    pub Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    pub Request_task_dyld_process_info_notify_deregister:
        __Request__task_dyld_process_info_notify_deregister_t,
    pub Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    pub Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    pub Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
    pub Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t,
    pub Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_dyld_process_info_notify_register:
        __Reply__task_dyld_process_info_notify_register_t,
    pub Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    pub Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    pub Reply_task_dyld_process_info_notify_deregister:
        __Reply__task_dyld_process_info_notify_deregister_t,
    pub Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    pub Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    pub Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
    pub Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t,
    pub Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t,
}
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    pub Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    pub Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
}
extern "C" {
    pub fn vm_region(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_read_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_read_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    pub Request_vm_remap_new: __Request__vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    pub Reply_vm_remap_new: __Reply__vm_remap_new_t,
}
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_main(host: host_t, io_main: *mut io_main_t) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_main_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_main: __Request__host_get_io_main_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_main_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_main: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_main: __Reply__host_get_io_main_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
}
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mach_error(str_: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type string_t = *const ::std::os::raw::c_char;
extern "C" {
    pub fn clock_get_time(
        clock_serv: clock_serv_t,
        cur_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_get_attributes(
        clock_serv: clock_serv_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_alarm(
        clock_serv: clock_serv_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
        alarm_port: clock_reply_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_time_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub alarm_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_subsystem {
    pub Request_clock_get_time: __Request__clock_get_time_t,
    pub Request_clock_get_attributes: __Request__clock_get_attributes_t,
    pub Request_clock_alarm: __Request__clock_alarm_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub cur_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_subsystem {
    pub Reply_clock_get_time: __Reply__clock_get_time_t,
    pub Reply_clock_get_attributes: __Reply__clock_get_attributes_t,
    pub Reply_clock_alarm: __Reply__clock_alarm_t,
}
extern "C" {
    pub fn clock_alarm_reply(
        alarm_port: clock_reply_t,
        alarm_portPoly: mach_msg_type_name_t,
        alarm_code: kern_return_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub alarm_code: kern_return_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_reply_subsystem {
    pub Request_clock_alarm_reply: __Request__clock_alarm_reply_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_reply_subsystem {
    pub Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t,
}
extern "C" {
    pub fn exception_raise(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state(
        exception_port: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state_identity(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__exc_subsystem {
    pub Request_exception_raise: __Request__exception_raise_t,
    pub Request_exception_raise_state: __Request__exception_raise_state_t,
    pub Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__exc_subsystem {
    pub Reply_exception_raise: __Reply__exception_raise_t,
    pub Reply_exception_raise_state: __Reply__exception_raise_state_t,
    pub Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
pub type mach_timebase_info_t = *mut mach_timebase_info;
pub type mach_timebase_info_data_t = mach_timebase_info;
extern "C" {
    pub fn mach_timebase_info(info: mach_timebase_info_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_wait_until(deadline: u64) -> kern_return_t;
}
extern "C" {
    pub fn mach_absolute_time() -> u64;
}
extern "C" {
    pub fn mach_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_vm_allocate(
        target: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_deallocate(
        target: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_protect(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_inherit(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut mach_vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_write(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_copy(
        target_task: vm_map_t,
        source_address: mach_vm_address_t,
        size: mach_vm_size_t,
        dest_address: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_overwrite(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: mach_vm_address_t,
        outsize: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_msync(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_behavior_set(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_map(
        target_task: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_machine_attribute(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_query(
        target_map: vm_map_read_t,
        offset: mach_vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_handle: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_purgable_control(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_info(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        flavor: vm_page_info_flavor_t,
        info: vm_page_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_range_query(
        target_map: vm_map_read_t,
        address: mach_vm_offset_t,
        size: mach_vm_size_t,
        dispositions: mach_vm_address_t,
        dispositions_count: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: mach_vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub dest_address: mach_vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub data: mach_vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: mach_vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_page_info_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_offset_t,
    pub size: mach_vm_size_t,
    pub dispositions: mach_vm_address_t,
    pub dispositions_count: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_vm_subsystem {
    pub Request_mach_vm_allocate: __Request__mach_vm_allocate_t,
    pub Request_mach_vm_deallocate: __Request__mach_vm_deallocate_t,
    pub Request_mach_vm_protect: __Request__mach_vm_protect_t,
    pub Request_mach_vm_inherit: __Request__mach_vm_inherit_t,
    pub Request_mach_vm_read: __Request__mach_vm_read_t,
    pub Request_mach_vm_read_list: __Request__mach_vm_read_list_t,
    pub Request_mach_vm_write: __Request__mach_vm_write_t,
    pub Request_mach_vm_copy: __Request__mach_vm_copy_t,
    pub Request_mach_vm_read_overwrite: __Request__mach_vm_read_overwrite_t,
    pub Request_mach_vm_msync: __Request__mach_vm_msync_t,
    pub Request_mach_vm_behavior_set: __Request__mach_vm_behavior_set_t,
    pub Request_mach_vm_map: __Request__mach_vm_map_t,
    pub Request_mach_vm_machine_attribute: __Request__mach_vm_machine_attribute_t,
    pub Request_mach_vm_remap: __Request__mach_vm_remap_t,
    pub Request_mach_vm_page_query: __Request__mach_vm_page_query_t,
    pub Request_mach_vm_region_recurse: __Request__mach_vm_region_recurse_t,
    pub Request_mach_vm_region: __Request__mach_vm_region_t,
    pub Request__mach_make_memory_entry: __Request___mach_make_memory_entry_t,
    pub Request_mach_vm_purgable_control: __Request__mach_vm_purgable_control_t,
    pub Request_mach_vm_page_info: __Request__mach_vm_page_info_t,
    pub Request_mach_vm_page_range_query: __Request__mach_vm_page_range_query_t,
    pub Request_mach_vm_remap_new: __Request__mach_vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: mach_vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 32usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dispositions_count: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_vm_subsystem {
    pub Reply_mach_vm_allocate: __Reply__mach_vm_allocate_t,
    pub Reply_mach_vm_deallocate: __Reply__mach_vm_deallocate_t,
    pub Reply_mach_vm_protect: __Reply__mach_vm_protect_t,
    pub Reply_mach_vm_inherit: __Reply__mach_vm_inherit_t,
    pub Reply_mach_vm_read: __Reply__mach_vm_read_t,
    pub Reply_mach_vm_read_list: __Reply__mach_vm_read_list_t,
    pub Reply_mach_vm_write: __Reply__mach_vm_write_t,
    pub Reply_mach_vm_copy: __Reply__mach_vm_copy_t,
    pub Reply_mach_vm_read_overwrite: __Reply__mach_vm_read_overwrite_t,
    pub Reply_mach_vm_msync: __Reply__mach_vm_msync_t,
    pub Reply_mach_vm_behavior_set: __Reply__mach_vm_behavior_set_t,
    pub Reply_mach_vm_map: __Reply__mach_vm_map_t,
    pub Reply_mach_vm_machine_attribute: __Reply__mach_vm_machine_attribute_t,
    pub Reply_mach_vm_remap: __Reply__mach_vm_remap_t,
    pub Reply_mach_vm_page_query: __Reply__mach_vm_page_query_t,
    pub Reply_mach_vm_region_recurse: __Reply__mach_vm_region_recurse_t,
    pub Reply_mach_vm_region: __Reply__mach_vm_region_t,
    pub Reply__mach_make_memory_entry: __Reply___mach_make_memory_entry_t,
    pub Reply_mach_vm_purgable_control: __Reply__mach_vm_purgable_control_t,
    pub Reply_mach_vm_page_info: __Reply__mach_vm_page_info_t,
    pub Reply_mach_vm_page_range_query: __Reply__mach_vm_page_range_query_t,
    pub Reply_mach_vm_remap_new: __Reply__mach_vm_remap_new_t,
}
extern "C" {
    pub fn mach_voucher_extract_attr_content(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        content: mach_voucher_attr_content_t,
        contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipeCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_all_attr_recipes(
        voucher: ipc_voucher_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_attr_command(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        command: mach_voucher_attr_command_t,
        in_content: mach_voucher_attr_content_t,
        in_contentCnt: mach_msg_type_number_t,
        out_content: mach_voucher_attr_content_t,
        out_contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_debug_info(
        task: ipc_space_read_t,
        voucher_name: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub recipeCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_command_t,
    pub in_contentCnt: mach_msg_type_number_t,
    pub in_content: [u8; 4096usize],
    pub out_contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub voucher_name: mach_port_name_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_voucher_subsystem {
    pub Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t,
    pub Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t,
    pub Request_mach_voucher_extract_all_attr_recipes:
        __Request__mach_voucher_extract_all_attr_recipes_t,
    pub Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t,
    pub Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub contentCnt: mach_msg_type_number_t,
    pub content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipeCnt: mach_msg_type_number_t,
    pub recipe: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_contentCnt: mach_msg_type_number_t,
    pub out_content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_voucher_subsystem {
    pub Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t,
    pub Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t,
    pub Reply_mach_voucher_extract_all_attr_recipes:
        __Reply__mach_voucher_extract_all_attr_recipes_t,
    pub Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t,
    pub Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t,
}
extern "C" {
    pub fn mach_memory_entry_purgable_control(
        mem_entry: mem_entry_name_port_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_access_tracking(
        mem_entry: mem_entry_name_port_t,
        access_tracking: *mut ::std::os::raw::c_int,
        access_tracking_reads: *mut u32,
        access_tracking_writes: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_ownership(
        mem_entry: mem_entry_name_port_t,
        owner: task_t,
        ledger_tag: ::std::os::raw::c_int,
        ledger_flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub access_tracking: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub owner: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledger_tag: ::std::os::raw::c_int,
    pub ledger_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__memory_entry_subsystem {
    pub Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t,
    pub Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t,
    pub Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub access_tracking: ::std::os::raw::c_int,
    pub access_tracking_reads: u32,
    pub access_tracking_writes: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__memory_entry_subsystem {
    pub Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t,
    pub Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t,
    pub Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct port_obj_tentry {
    pub pos_value: *mut ::std::os::raw::c_void,
    pub pos_type: ::std::os::raw::c_int,
}
extern "C" {
    pub fn port_obj_init(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut port_obj_table: *mut port_obj_tentry;
}
extern "C" {
    pub static mut port_obj_table_size: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_mapping_np {
    pub sfm_address: mach_vm_address_t,
    pub sfm_size: mach_vm_size_t,
    pub sfm_file_offset: mach_vm_offset_t,
    pub sfm_max_prot: vm_prot_t,
    pub sfm_init_prot: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_mapping_slide_np {
    pub sms_address: mach_vm_address_t,
    pub sms_size: mach_vm_size_t,
    pub sms_file_offset: mach_vm_offset_t,
    pub sms_slide_size: user_addr_t,
    pub sms_slide_start: user_addr_t,
    pub sms_max_prot: vm_prot_t,
    pub sms_init_prot: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_np {
    pub sf_fd: ::std::os::raw::c_int,
    pub sf_mappings_count: u32,
    pub sf_slide: u32,
}
extern "C" {
    pub fn shared_region_check_np(startaddress: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shared_region_map_np(
        fd: ::std::os::raw::c_int,
        mappingCount: u32,
        mappings: *const shared_file_mapping_np,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shared_region_slide_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thread_get_register_pointer_values(
        thread: thread_t,
        sp: *mut usize,
        length: *mut usize,
        values: *mut usize,
    ) -> kern_return_t;
}
pub type io_buf_ptr_t = *mut ::std::os::raw::c_char;
pub type io_name_t = [::std::os::raw::c_char; 128usize];
pub type io_string_t = [::std::os::raw::c_char; 512usize];
pub type io_string_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_struct_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_user_scalar_t = u64;
pub type io_user_reference_t = u64;
pub type io_scalar_inband_t = [io_user_scalar_t; 16usize];
pub type io_async_ref_t = [io_user_reference_t; 8usize];
pub type io_scalar_inband64_t = [io_user_scalar_t; 16usize];
pub type io_async_ref64_t = [io_user_reference_t; 8usize];
pub type io_object_t = mach_port_t;
extern "C" {
    pub static mut main_device_port: mach_port_t;
}
pub type OSAtomic_int64_aligned64_t = i64;
extern "C" {
    pub fn OSAtomicAdd32(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd32Barrier(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicIncrement32(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicIncrement32Barrier(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicDecrement32(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicDecrement32Barrier(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd64(__theAmount: i64, __theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicAdd64Barrier(
        __theAmount: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> i64;
}
extern "C" {
    pub fn OSAtomicIncrement64(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicIncrement64Barrier(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicDecrement64(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicDecrement64Barrier(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicOr32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32(__oldValue: i32, __newValue: i32, __theValue: *mut i32)
        -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32Barrier(
        __oldValue: i32,
        __newValue: i32,
        __theValue: *mut i32,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtr(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtrBarrier(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapInt(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapIntBarrier(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLong(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLongBarrier(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64Barrier(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSet(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSetBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClear(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClearBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void)
        -> bool;
}
extern "C" {
    pub fn OSMemoryBarrier();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_16 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: *mut ::std::os::raw::c_void,
    pub opaque3: ::std::os::raw::c_int,
}
pub type OSFifoQueueHead = _bindgen_ty_16;
extern "C" {
    pub fn OSAtomicFifoEnqueue(
        __list: *mut OSFifoQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicFifoDequeue(
        __list: *mut OSFifoQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type OSSpinLock = i32;
extern "C" {
    pub fn OSSpinLockTry(__lock: *mut OSSpinLock) -> bool;
}
extern "C" {
    pub fn OSSpinLockLock(__lock: *mut OSSpinLock);
}
extern "C" {
    pub fn OSSpinLockUnlock(__lock: *mut OSSpinLock);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_17 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: ::std::os::raw::c_long,
}
pub type OSQueueHead = _bindgen_ty_17;
extern "C" {
    pub fn OSAtomicEnqueue(
        __list: *mut OSQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicDequeue(
        __list: *mut OSQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_unfair_lock_s {
    pub _os_unfair_lock_opaque: u32,
}
pub type os_unfair_lock = os_unfair_lock_s;
pub type os_unfair_lock_t = *mut os_unfair_lock_s;
extern "C" {
    pub fn os_unfair_lock_lock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_trylock(lock: os_unfair_lock_t) -> bool;
}
extern "C" {
    pub fn os_unfair_lock_unlock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_assert_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_unfair_lock_assert_not_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_proc_available_memory() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *const ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            num_items: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub valloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(zone: *mut _malloc_zone_t)>,
    pub zone_name: *const ::std::os::raw::c_char,
    pub batch_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            size: usize,
            results: *mut *mut ::std::os::raw::c_void,
            num_requested: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub batch_free: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            to_be_freed: *mut *mut ::std::os::raw::c_void,
            num_to_be_freed: ::std::os::raw::c_uint,
        ),
    >,
    pub introspect: *mut malloc_introspection_t,
    pub version: ::std::os::raw::c_uint,
    pub memalign: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            alignment: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_definite_size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ),
    >,
    pub pressure_relief: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, goal: usize) -> usize,
    >,
    pub claimed_address: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
        ) -> boolean_t,
    >,
    pub try_free_default: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_default_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_create_zone(
        start_size: vm_size_t,
        flags: ::std::os::raw::c_uint,
    ) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_destroy_zone(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_malloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_calloc(
        zone: *mut malloc_zone_t,
        num_items: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_valloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_free(zone: *mut malloc_zone_t, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_from_ptr(ptr: *const ::std::os::raw::c_void) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_size(ptr: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn malloc_good_size(size: usize) -> usize;
}
extern "C" {
    pub fn malloc_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_batch_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        results: *mut *mut ::std::os::raw::c_void,
        num_requested: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn malloc_zone_batch_free(
        zone: *mut malloc_zone_t,
        to_be_freed: *mut *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn malloc_default_purgeable_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_make_purgeable(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_make_nonpurgeable(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc_zone_register(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_unregister(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_set_zone_name(zone: *mut malloc_zone_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn malloc_get_zone_name(zone: *mut malloc_zone_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn malloc_zone_pressure_relief(zone: *mut malloc_zone_t, goal: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_range_t {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_statistics_t {
    pub blocks_in_use: ::std::os::raw::c_uint,
    pub size_in_use: usize,
    pub max_size_in_use: usize,
    pub size_allocated: usize,
}
pub type memory_reader_t = ::std::option::Option<
    unsafe extern "C" fn(
        remote_task: task_t,
        remote_address: vm_address_t,
        size: vm_size_t,
        local_memory: *mut *mut ::std::os::raw::c_void,
    ) -> kern_return_t,
>;
pub type vm_range_recorder_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: task_t,
        arg2: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_uint,
        arg3: *mut vm_range_t,
        arg4: ::std::os::raw::c_uint,
    ),
>;
pub type print_task_printer_t =
    ::std::option::Option<unsafe extern "C" fn(fmt: *const ::std::os::raw::c_char, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_introspection_t {
    pub enumerator: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            arg1: *mut ::std::os::raw::c_void,
            type_mask: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            recorder: vm_range_recorder_t,
        ) -> kern_return_t,
    >,
    pub good_size:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, size: usize) -> usize>,
    pub check: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub print:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, verbose: boolean_t)>,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void),
    >,
    pub force_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub force_unlock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub statistics: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t),
    >,
    pub zone_locked:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub enable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub disable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub discharge: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void),
    >,
    pub enumerate_discharged_pointers: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut malloc_zone_t,
            report_discharged: *mut ::std::os::raw::c_void,
        ),
    >,
    pub reinit_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub print_task: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            level: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            printer: print_task_printer_t,
        ),
    >,
    pub task_statistics: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            stats: *mut malloc_statistics_t,
        ),
    >,
}
extern "C" {
    pub fn malloc_printf(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn malloc_get_all_zones(
        task: task_t,
        reader: memory_reader_t,
        addresses: *mut *mut vm_address_t,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn malloc_zone_print_ptr_info(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_check(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_print(zone: *mut malloc_zone_t, verbose: boolean_t);
}
extern "C" {
    pub fn malloc_zone_statistics(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t);
}
extern "C" {
    pub fn malloc_zone_log(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstats {
    pub bytes_total: usize,
    pub chunks_used: usize,
    pub bytes_used: usize,
    pub chunks_free: usize,
    pub bytes_free: usize,
}
extern "C" {
    pub fn mstats() -> mstats;
}
extern "C" {
    pub fn malloc_zone_enable_discharge_checking(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_disable_discharge_checking(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_discharge(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_enumerate_discharged_pointers(
        zone: *mut malloc_zone_t,
        report_discharged: *mut ::std::os::raw::c_void,
    );
}
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
pub const NXByteOrder_NX_UnknownByteOrder: NXByteOrder = 0;
pub const NXByteOrder_NX_LittleEndian: NXByteOrder = 1;
pub const NXByteOrder_NX_BigEndian: NXByteOrder = 2;
pub type NXByteOrder = ::std::os::raw::c_uint;
pub type fasttrap_instr_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fasttrap_machtp {
    pub ftmt_instr: [u8; 15usize],
    pub ftmt_size: u8,
    pub ftmt_ripmode: u8,
    pub ftmt_modrm: u8,
    pub ftmt_type: u8,
    pub ftmt_code: u8,
    pub ftmt_base: u8,
    pub ftmt_index: u8,
    pub ftmt_scale: u8,
    pub ftmt_segment: u8,
    pub ftmt_dest: user_addr_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl fasttrap_machtp {
    #[inline]
    pub fn ftmt_installed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ftmt_installed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ftmt_retired(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ftmt_retired(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ftmt_installed: u8,
        ftmt_retired: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ftmt_installed: u8 = unsafe { ::std::mem::transmute(ftmt_installed) };
            ftmt_installed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ftmt_retired: u8 = unsafe { ::std::mem::transmute(ftmt_retired) };
            ftmt_retired as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type fasttrap_machtp_t = fasttrap_machtp;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ldt_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn i386_get_ldt(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ldt_entry,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i386_set_ldt(
        arg1: ::std::os::raw::c_int,
        arg2: *const ldt_entry,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub fn au_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_write(d: ::std::os::raw::c_int, m: *mut token_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close(
        d: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
        event: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close_buffer(
        d: ::std::os::raw::c_int,
        event: ::std::os::raw::c_short,
        buffer: *mut u_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close_token(
        tok: *mut token_t,
        buffer: *mut u_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_to_file(file: *const ::std::os::raw::c_char, tm: timeval) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_ex_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
        aia: *mut auditinfo_addr,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header64_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header_ex(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header64(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_ex(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_me() -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u32,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg32(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u32,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg64(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u64,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_data(
        unit_print: ::std::os::raw::c_char,
        unit_type: ::std::os::raw::c_char,
        unit_count: ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exit(retval: ::std::os::raw::c_int, err: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_groups(groups: *mut ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_newgroups(n: u16, groups: *mut gid_t) -> *mut token_t;
}
extern "C" {
    pub fn au_to_in_addr(internet_addr: *mut in_addr) -> *mut token_t;
}
extern "C" {
    pub fn au_to_in_addr_ex(internet_addr: *mut in6_addr) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ip(ip: *mut ip) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ipc(type_: ::std::os::raw::c_char, id: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ipc_perm(perm: *mut ipc_perm) -> *mut token_t;
}
extern "C" {
    pub fn au_to_iport(iport: u16) -> *mut token_t;
}
extern "C" {
    pub fn au_to_opaque(data: *const ::std::os::raw::c_char, bytes: u16) -> *mut token_t;
}
extern "C" {
    pub fn au_to_path(path: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process32(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process64(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process32_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process64_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return(status: ::std::os::raw::c_char, ret: u32) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return32(status: ::std::os::raw::c_char, ret: u32) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return64(status: ::std::os::raw::c_char, ret: u64) -> *mut token_t;
}
extern "C" {
    pub fn au_to_seq(audit_count: ::std::os::raw::c_long) -> *mut token_t;
}
extern "C" {
    pub fn au_to_socket_ex(
        so_domain: u_short,
        so_type: u_short,
        sa_local: *mut sockaddr,
        sa_remote: *mut sockaddr,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet(so: *mut sockaddr_in) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet32(so: *mut sockaddr_in) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet128(so: *mut sockaddr_in6) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_unix(so: *mut sockaddr_un) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject32(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject64(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject32_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject64_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exec_args(argv: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exec_env(envp: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_certificate_hash(hash: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_krb5_principal(principal: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_text(text: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_kevent(kev: *mut kevent) -> *mut token_t;
}
extern "C" {
    pub fn au_to_trailer(rec_size: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_zonename(zonename: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_identity(
        signer_type: u32,
        signing_id: *const ::std::os::raw::c_char,
        signing_id_trunc: u_char,
        team_id: *const ::std::os::raw::c_char,
        team_id_trunc: u_char,
        cdhash: *mut u8,
        cdhash_len: u16,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_bsm_to_domain(
        bsm_domain: u_short,
        local_domainp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_errno(
        bsm_error: u_char,
        errorp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_fcntl_cmd(
        bsm_fcntl_cmd: u_short,
        local_fcntl_cmdp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_socket_type(
        bsm_socket_type: u_short,
        local_socket_typep: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_domain_to_bsm(local_domain: ::std::os::raw::c_int) -> u_short;
}
extern "C" {
    pub fn au_errno_to_bsm(local_errno: ::std::os::raw::c_int) -> u_char;
}
extern "C" {
    pub fn au_fcntl_cmd_to_bsm(local_fcntl_command: ::std::os::raw::c_int) -> u_short;
}
extern "C" {
    pub fn au_socket_type_to_bsm(local_socket_type: ::std::os::raw::c_int) -> u_short;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_event_ent {
    pub ae_number: au_event_t,
    pub ae_name: *mut ::std::os::raw::c_char,
    pub ae_desc: *mut ::std::os::raw::c_char,
    pub ae_class: au_class_t,
}
pub type au_event_ent_t = au_event_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_class_ent {
    pub ac_name: *mut ::std::os::raw::c_char,
    pub ac_class: au_class_t,
    pub ac_desc: *mut ::std::os::raw::c_char,
}
pub type au_class_ent_t = au_class_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_user_ent {
    pub au_name: *mut ::std::os::raw::c_char,
    pub au_always: au_mask_t,
    pub au_never: au_mask_t,
}
pub type au_user_ent_t = au_user_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid32 {
    pub port: u_int32_t,
    pub addr: u_int32_t,
}
pub type au_tid32_t = au_tid32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid64 {
    pub port: u_int64_t,
    pub addr: u_int32_t,
}
pub type au_tid64_t = au_tid64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tidaddr32 {
    pub port: u_int32_t,
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
pub type au_tidaddr32_t = au_tidaddr32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tidaddr64 {
    pub port: u_int64_t,
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
pub type au_tidaddr64_t = au_tidaddr64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arg32_t {
    pub no: u_char,
    pub val: u_int32_t,
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arg64_t {
    pub no: u_char,
    pub val: u_int64_t,
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arb_t {
    pub howtopr: u_char,
    pub bu: u_char,
    pub uc: u_char,
    pub data: *mut u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_attr32_t {
    pub mode: u_int32_t,
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub fsid: u_int32_t,
    pub nid: u_int64_t,
    pub dev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_attr64_t {
    pub mode: u_int32_t,
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub fsid: u_int32_t,
    pub nid: u_int64_t,
    pub dev: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_execarg_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_execenv_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_cert_hash_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_krb5_principal_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_exit_t {
    pub status: u_int32_t,
    pub ret: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_file_t {
    pub s: u_int32_t,
    pub ms: u_int32_t,
    pub len: u_int16_t,
    pub name: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_groups_t {
    pub no: u_int16_t,
    pub list: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header32_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub s: u_int32_t,
    pub ms: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header32_ex_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub ad_type: u_int32_t,
    pub addr: [u_int32_t; 4usize],
    pub s: u_int32_t,
    pub ms: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header64_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub s: u_int64_t,
    pub ms: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header64_ex_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub ad_type: u_int32_t,
    pub addr: [u_int32_t; 4usize],
    pub s: u_int64_t,
    pub ms: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_inaddr_t {
    pub addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_inaddr_ex_t {
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ip_t {
    pub version: u_char,
    pub tos: u_char,
    pub len: u_int16_t,
    pub id: u_int16_t,
    pub offset: u_int16_t,
    pub ttl: u_char,
    pub prot: u_char,
    pub chksm: u_int16_t,
    pub src: u_int32_t,
    pub dest: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ipc_t {
    pub type_: u_char,
    pub id: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ipcperm_t {
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub puid: u_int32_t,
    pub pgid: u_int32_t,
    pub mode: u_int32_t,
    pub seq: u_int32_t,
    pub key: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_iport_t {
    pub port: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_opaque_t {
    pub size: u_int16_t,
    pub data: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_path_t {
    pub len: u_int16_t,
    pub path: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc32_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc64_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc32ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc64ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ret32_t {
    pub status: u_char,
    pub ret: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ret64_t {
    pub err: u_char,
    pub val: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_seq_t {
    pub seqno: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socket_t {
    pub type_: u_int16_t,
    pub l_port: u_int16_t,
    pub l_addr: u_int32_t,
    pub r_port: u_int16_t,
    pub r_addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socket_ex32_t {
    pub domain: u_int16_t,
    pub type_: u_int16_t,
    pub atype: u_int16_t,
    pub l_port: u_int16_t,
    pub l_addr: [u_int32_t; 4usize],
    pub r_port: u_int32_t,
    pub r_addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketinet_ex32_t {
    pub family: u_int16_t,
    pub port: u_int16_t,
    pub addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketinet32_t {
    pub family: u_int16_t,
    pub port: u_int16_t,
    pub addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketunix_t {
    pub family: u_int16_t,
    pub path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject32_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject64_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject32ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject64ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_text_t {
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_zonename_t {
    pub len: u_int16_t,
    pub zonename: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_kevent_t {
    pub ident: u_int32_t,
    pub filter: u_int16_t,
    pub flags: u_int16_t,
    pub fflags: u_int32_t,
    pub data: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_invalid_t {
    pub length: u_int16_t,
    pub data: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_identity_t {
    pub signer_type: u_int32_t,
    pub signing_id_len: u_int16_t,
    pub signing_id: *mut ::std::os::raw::c_char,
    pub signing_id_truncated: u_char,
    pub team_id_len: u_int16_t,
    pub team_id: *mut ::std::os::raw::c_char,
    pub team_id_truncated: u_char,
    pub cdhash_len: u_int16_t,
    pub cdhash: *mut u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_trailer_t {
    pub magic: u_int16_t,
    pub count: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tokenstr {
    pub __bindgen_anon_1: tokenstr__bindgen_ty_1,
    pub id: u_char,
    pub data: *mut u_char,
    pub len: usize,
    pub tt: tokenstr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tokenstr__bindgen_ty_1 {
    pub arg32: au_arg32_t,
    pub arg64: au_arg64_t,
    pub arb: au_arb_t,
    pub attr32: au_attr32_t,
    pub attr64: au_attr64_t,
    pub execarg: au_execarg_t,
    pub execenv: au_execenv_t,
    pub exit: au_exit_t,
    pub file: au_file_t,
    pub grps: au_groups_t,
    pub hdr32: au_header32_t,
    pub hdr32_ex: au_header32_ex_t,
    pub hdr64: au_header64_t,
    pub hdr64_ex: au_header64_ex_t,
    pub inaddr: au_inaddr_t,
    pub inaddr_ex: au_inaddr_ex_t,
    pub ip: au_ip_t,
    pub ipc: au_ipc_t,
    pub ipcperm: au_ipcperm_t,
    pub iport: au_iport_t,
    pub opaque: au_opaque_t,
    pub path: au_path_t,
    pub proc32: au_proc32_t,
    pub proc32_ex: au_proc32ex_t,
    pub proc64: au_proc64_t,
    pub proc64_ex: au_proc64ex_t,
    pub ret32: au_ret32_t,
    pub ret64: au_ret64_t,
    pub seq: au_seq_t,
    pub socket: au_socket_t,
    pub socket_ex32: au_socket_ex32_t,
    pub sockinet_ex32: au_socketinet_ex32_t,
    pub sockunix: au_socketunix_t,
    pub subj32: au_subject32_t,
    pub subj32_ex: au_subject32ex_t,
    pub subj64: au_subject64_t,
    pub subj64_ex: au_subject64ex_t,
    pub text: au_text_t,
    pub kevent: au_kevent_t,
    pub invalid: au_invalid_t,
    pub trail: au_trailer_t,
    pub zonename: au_zonename_t,
    pub cert_hash: au_cert_hash_t,
    pub krb5_principal: au_krb5_principal_t,
    pub identity: au_identity_t,
}
pub type tokenstr_t = tokenstr;
extern "C" {
    pub fn audit_submit(
        au_event: ::std::os::raw::c_short,
        auid: au_id_t,
        status: ::std::os::raw::c_char,
        reterr: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauclass();
}
extern "C" {
    pub fn endauclass();
}
extern "C" {
    pub fn getauclassent() -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassent_r(class_int: *mut au_class_ent_t) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnam(name: *const ::std::os::raw::c_char) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnam_r(
        class_int: *mut au_class_ent_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnum(class_number: au_class_t) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnum_r(
        class_int: *mut au_class_ent_t,
        class_number: au_class_t,
    ) -> *mut au_class_ent;
}
extern "C" {
    pub fn setac();
}
extern "C" {
    pub fn endac();
}
extern "C" {
    pub fn getacdir(
        name: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacmin(min_val: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacfilesz(size_val: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacflg(
        auditstr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacna(
        auditstr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacpol(auditstr: *mut ::std::os::raw::c_char, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacsflagsmask(
        which: *const ::std::os::raw::c_char,
        auditstr: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getachost(auditstr: *mut ::std::os::raw::c_char, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacexpire(
        andflg: *mut ::std::os::raw::c_int,
        age: *mut time_t,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauditflagsbin(
        auditstr: *mut ::std::os::raw::c_char,
        masks: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauditflagschar(
        auditstr: *mut ::std::os::raw::c_char,
        masks: *mut au_mask_t,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_preselect(
        event: au_event_t,
        mask_p: *mut au_mask_t,
        sorf: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_poltostr(
        policy: ::std::os::raw::c_int,
        maxsize: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn au_strtopol(
        polstr: *const ::std::os::raw::c_char,
        policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sflagstostr(flags: u64, maxsize: usize, buf: *mut ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn au_strtosflags(
        sflagsstr: *const ::std::os::raw::c_char,
        flags: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauevent();
}
extern "C" {
    pub fn endauevent();
}
extern "C" {
    pub fn getauevent() -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevent_r(e: *mut au_event_ent) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnam(name: *const ::std::os::raw::c_char) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnam_r(
        e: *mut au_event_ent,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnum(event_number: au_event_t) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnum_r(e: *mut au_event_ent, event_number: au_event_t) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnonam(event_name: *const ::std::os::raw::c_char) -> *mut au_event_t;
}
extern "C" {
    pub fn getauevnonam_r(
        ev: *mut au_event_t,
        event_name: *const ::std::os::raw::c_char,
    ) -> *mut au_event_t;
}
extern "C" {
    pub fn setauuser();
}
extern "C" {
    pub fn endauuser();
}
extern "C" {
    pub fn getauuserent() -> *mut au_user_ent;
}
extern "C" {
    pub fn getauuserent_r(u: *mut au_user_ent) -> *mut au_user_ent;
}
extern "C" {
    pub fn getauusernam(name: *const ::std::os::raw::c_char) -> *mut au_user_ent;
}
extern "C" {
    pub fn getauusernam_r(
        u: *mut au_user_ent,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_user_ent;
}
extern "C" {
    pub fn au_user_mask(
        username: *mut ::std::os::raw::c_char,
        mask_p: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfauditflags(
        usremask: *mut au_mask_t,
        usrdmask: *mut au_mask_t,
        lastmask: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_read_rec(fp: *mut FILE, buf: *mut *mut u_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_fetch_tok(
        tok: *mut tokenstr_t,
        buf: *mut u_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_print_tok(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        raw: ::std::os::raw::c_char,
        sfrm: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn au_print_flags_tok(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn au_print_tok_xml(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        raw: ::std::os::raw::c_char,
        sfrm: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn au_print_xml_header(outfp: *mut FILE);
}
extern "C" {
    pub fn au_print_xml_footer(outfp: *mut FILE);
}
extern "C" {
    pub fn au_strerror(bsm_error: u_char) -> *const ::std::os::raw::c_char;
}
pub const kAUNoErr: _bindgen_ty_18 = 0;
pub const kAUBadParamErr: _bindgen_ty_18 = -66049;
pub const kAUStatErr: _bindgen_ty_18 = -66048;
pub const kAUSysctlErr: _bindgen_ty_18 = -66047;
pub const kAUOpenErr: _bindgen_ty_18 = -66046;
pub const kAUMakeSubjectTokErr: _bindgen_ty_18 = -66045;
pub const kAUWriteSubjectTokErr: _bindgen_ty_18 = -66044;
pub const kAUWriteCallerTokErr: _bindgen_ty_18 = -66043;
pub const kAUMakeReturnTokErr: _bindgen_ty_18 = -66042;
pub const kAUWriteReturnTokErr: _bindgen_ty_18 = -66041;
pub const kAUCloseErr: _bindgen_ty_18 = -66040;
pub const kAUMakeTextTokErr: _bindgen_ty_18 = -66039;
pub const kAULastErr: _bindgen_ty_18 = -66038;
pub type _bindgen_ty_18 = ::std::os::raw::c_int;
extern "C" {
    pub fn au_free_token(tok: *mut token_t);
}
extern "C" {
    pub fn au_get_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_notify_initialize() -> u32;
}
extern "C" {
    pub fn au_notify_terminate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cannot_audit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_terminal_id_ex(tid: *mut au_tid_addr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_terminal_id(tid: *mut au_tid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write(
        event_code: ::std::os::raw::c_short,
        subject: *mut token_t,
        misctok: *mut token_t,
        retval: ::std::os::raw::c_char,
        errcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success_ex(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success_self(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_ex(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_self(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_na_ex(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        euid: uid_t,
        egid: gid_t,
        pid: pid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_na(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        euid: uid_t,
        egid: gid_t,
        pid: pid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_token_to_au32(
        atoken: audit_token_t,
        auidp: *mut uid_t,
        euidp: *mut uid_t,
        egidp: *mut gid_t,
        ruidp: *mut uid_t,
        rgidp: *mut gid_t,
        pidp: *mut pid_t,
        asidp: *mut au_asid_t,
        tidp: *mut au_tid_t,
    );
}
extern "C" {
    pub fn audit_token_to_auid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_euid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_egid(atoken: audit_token_t) -> gid_t;
}
extern "C" {
    pub fn audit_token_to_ruid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_rgid(atoken: audit_token_t) -> gid_t;
}
extern "C" {
    pub fn audit_token_to_pid(atoken: audit_token_t) -> pid_t;
}
extern "C" {
    pub fn audit_token_to_asid(atoken: audit_token_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_token_to_pidversion(atoken: audit_token_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_car(path: *mut ::std::os::raw::c_char, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_class(evc_map: *mut au_evclass_map_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_class(evc_map: *mut au_evclass_map_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_cond(cond: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_cond(cond: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_cwd(path: *mut ::std::os::raw::c_char, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_fsize(fstat: *mut au_fstat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_fsize(fstat: *mut au_fstat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_kmask(kmask: *mut au_mask_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_kmask(kmask: *mut au_mask_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_kaudit(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_kaudit(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_pmask(api: *mut auditpinfo_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_pinfo(api: *mut auditpinfo_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_pinfo_addr(apia: *mut auditpinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_policy(policy: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_policy(policy: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_qctrl(qctrl: *mut au_qctrl_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_qctrl(qctrl: *mut au_qctrl_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sflags(flags: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_sflags(flags: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sflags_mask(
        which: *const ::std::os::raw::c_char,
        mask: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_sflags_mask(
        which: *const ::std::os::raw::c_char,
        mask: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sinfo_addr(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_stat(stats: *mut au_stat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_stat(stats: *mut au_stat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_send_trigger(trigger: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_ctlmode(mode: *mut au_ctlmode_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_expire_after(
        expire: *mut au_expire_after_t,
        sz: usize,
    ) -> ::std::os::raw::c_int;
}
pub type audit_filter_attach_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type audit_filter_reinit_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type audit_filter_record_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        ts: *mut timespec,
        token_count: ::std::os::raw::c_int,
        tok: *const tokenstr_t,
    ),
>;
pub type audit_filter_rawrecord_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        ts: *mut timespec,
        data: *mut ::std::os::raw::c_void,
        len: u_int,
    ),
>;
pub type audit_filter_detach_t =
    ::std::option::Option<unsafe extern "C" fn(instance: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token {
    pub __bindgen_anon_1: au_token__bindgen_ty_1,
    pub t_data: *mut u_char,
    pub len: usize,
    pub tokens: au_token__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token__bindgen_ty_1 {
    pub tqe_next: *mut au_token,
    pub tqe_prev: *mut *mut au_token,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record {
    pub __bindgen_anon_1: au_record__bindgen_ty_1,
    pub __bindgen_anon_2: au_record__bindgen_ty_2,
    pub used: ::std::os::raw::c_char,
    pub desc: ::std::os::raw::c_int,
    pub token_q: au_record__bindgen_ty_1,
    pub data: *mut u_char,
    pub len: usize,
    pub au_rec_q: au_record__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record__bindgen_ty_1 {
    pub tqh_first: *mut au_token,
    pub tqh_last: *mut *mut au_token,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record__bindgen_ty_2 {
    pub le_next: *mut au_record,
    pub le_prev: *mut *mut au_record,
}
pub type au_record_t = au_record;
pub const audit_session_flags_AU_SESSION_FLAG_IS_INITIAL: audit_session_flags = 1;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_GRAPHIC_ACCESS: audit_session_flags = 16;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_TTY: audit_session_flags = 32;
pub const audit_session_flags_AU_SESSION_FLAG_IS_REMOTE: audit_session_flags = 4096;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_CONSOLE_ACCESS: audit_session_flags = 8192;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_AUTHENTICATED: audit_session_flags = 16384;
pub type audit_session_flags = ::std::os::raw::c_uint;
pub const au_sdev_open_flags_AU_SDEVF_NONBLOCK: au_sdev_open_flags = 1;
pub const au_sdev_open_flags_AU_SDEVF_ALLSESSIONS: au_sdev_open_flags = 65536;
pub type au_sdev_open_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_sdev_handle {
    pub ash_fp: *mut FILE,
    pub ash_buf: *mut u_char,
    pub ash_reclen: ::std::os::raw::c_int,
    pub ash_bytesread: ::std::os::raw::c_int,
}
pub type au_sdev_handle_t = au_sdev_handle;
extern "C" {
    pub fn au_sdev_open(flags: ::std::os::raw::c_int) -> *mut au_sdev_handle_t;
}
extern "C" {
    pub fn au_sdev_close(ash: *mut au_sdev_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sdev_fd(ash: *mut au_sdev_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sdev_read_aia(
        ash: *mut au_sdev_handle_t,
        event: *mut ::std::os::raw::c_int,
        aia_p: *mut auditinfo_addr_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSUniStr255 {
    pub length: u_int16_t,
    pub unicode: [u_int16_t; 255usize],
}
pub type ConstHFSUniStr255Param = *const HFSUniStr255;
pub const kHFSSigWord: _bindgen_ty_19 = 16964;
pub const kHFSPlusSigWord: _bindgen_ty_19 = 18475;
pub const kHFSXSigWord: _bindgen_ty_19 = 18520;
pub const kHFSPlusVersion: _bindgen_ty_19 = 4;
pub const kHFSXVersion: _bindgen_ty_19 = 5;
pub const kHFSPlusMountVersion: _bindgen_ty_19 = 825241136;
pub const kHFSJMountVersion: _bindgen_ty_19 = 1212568394;
pub const kFSKMountVersion: _bindgen_ty_19 = 1179863841;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const kHardLinkFileType: _bindgen_ty_20 = 1751936619;
pub const kHFSPlusCreator: _bindgen_ty_20 = 1751544619;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const kSymLinkFileType: _bindgen_ty_21 = 1936485995;
pub const kSymLinkCreator: _bindgen_ty_21 = 1919443312;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const kHFSMaxVolumeNameChars: _bindgen_ty_22 = 27;
pub const kHFSMaxFileNameChars: _bindgen_ty_22 = 31;
pub const kHFSPlusMaxFileNameChars: _bindgen_ty_22 = 255;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSExtentKey {
    pub keyLength: u_int8_t,
    pub forkType: u_int8_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusExtentKey {
    pub keyLength: u_int16_t,
    pub forkType: u_int8_t,
    pub pad: u_int8_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int32_t,
}
pub const kHFSExtentDensity: _bindgen_ty_23 = 3;
pub const kHFSPlusExtentDensity: _bindgen_ty_23 = 8;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSExtentDescriptor {
    pub startBlock: u_int16_t,
    pub blockCount: u_int16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusExtentDescriptor {
    pub startBlock: u_int32_t,
    pub blockCount: u_int32_t,
}
pub type HFSExtentRecord = [HFSExtentDescriptor; 3usize];
pub type HFSPlusExtentRecord = [HFSPlusExtentDescriptor; 8usize];
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrFileInfo {
    pub __bindgen_anon_1: FndrFileInfo__bindgen_ty_1,
    pub fdType: u_int32_t,
    pub fdCreator: u_int32_t,
    pub fdFlags: u_int16_t,
    pub fdLocation: FndrFileInfo__bindgen_ty_1,
    pub opaque: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrFileInfo__bindgen_ty_1 {
    pub v: i16,
    pub h: i16,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo {
    pub __bindgen_anon_1: FndrDirInfo__bindgen_ty_1,
    pub __bindgen_anon_2: FndrDirInfo__bindgen_ty_2,
    pub frRect: FndrDirInfo__bindgen_ty_1,
    pub frFlags: ::std::os::raw::c_ushort,
    pub frLocation: FndrDirInfo__bindgen_ty_2,
    pub opaque: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo__bindgen_ty_1 {
    pub top: i16,
    pub left: i16,
    pub bottom: i16,
    pub right: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo__bindgen_ty_2 {
    pub v: u_int16_t,
    pub h: u_int16_t,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrOpaqueInfo {
    pub _bindgen_opaque_blob: [u16; 8usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrExtendedDirInfo {
    pub document_id: u_int32_t,
    pub date_added: u_int32_t,
    pub extended_flags: u_int16_t,
    pub reserved3: u_int16_t,
    pub write_gen_counter: u_int32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrExtendedFileInfo {
    pub document_id: u_int32_t,
    pub date_added: u_int32_t,
    pub extended_flags: u_int16_t,
    pub reserved2: u_int16_t,
    pub write_gen_counter: u_int32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusForkData {
    pub logicalSize: u_int64_t,
    pub clumpSize: u_int32_t,
    pub totalBlocks: u_int32_t,
    pub extents: HFSPlusExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct HFSPlusBSDInfo {
    pub __bindgen_anon_1: HFSPlusBSDInfo__bindgen_ty_1,
    pub ownerID: u_int32_t,
    pub groupID: u_int32_t,
    pub adminFlags: u_int8_t,
    pub ownerFlags: u_int8_t,
    pub fileMode: u_int16_t,
    pub special: HFSPlusBSDInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HFSPlusBSDInfo__bindgen_ty_1 {
    pub iNodeNum: u_int32_t,
    pub linkCount: u_int32_t,
    pub rawDevice: u_int32_t,
}
pub const kHFSRootParentID: _bindgen_ty_24 = 1;
pub const kHFSRootFolderID: _bindgen_ty_24 = 2;
pub const kHFSExtentsFileID: _bindgen_ty_24 = 3;
pub const kHFSCatalogFileID: _bindgen_ty_24 = 4;
pub const kHFSBadBlockFileID: _bindgen_ty_24 = 5;
pub const kHFSAllocationFileID: _bindgen_ty_24 = 6;
pub const kHFSStartupFileID: _bindgen_ty_24 = 7;
pub const kHFSAttributesFileID: _bindgen_ty_24 = 8;
pub const kHFSAttributeDataFileID: _bindgen_ty_24 = 13;
pub const kHFSRepairCatalogFileID: _bindgen_ty_24 = 14;
pub const kHFSBogusExtentFileID: _bindgen_ty_24 = 15;
pub const kHFSFirstUserCatalogNodeID: _bindgen_ty_24 = 16;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSCatalogKey {
    pub keyLength: u_int8_t,
    pub reserved: u_int8_t,
    pub parentID: u_int32_t,
    pub nodeName: [u_int8_t; 32usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusCatalogKey {
    pub keyLength: u_int16_t,
    pub parentID: u_int32_t,
    pub nodeName: HFSUniStr255,
}
pub const kHFSFolderRecord: _bindgen_ty_25 = 256;
pub const kHFSFileRecord: _bindgen_ty_25 = 512;
pub const kHFSFolderThreadRecord: _bindgen_ty_25 = 768;
pub const kHFSFileThreadRecord: _bindgen_ty_25 = 1024;
pub const kHFSPlusFolderRecord: _bindgen_ty_25 = 1;
pub const kHFSPlusFileRecord: _bindgen_ty_25 = 2;
pub const kHFSPlusFolderThreadRecord: _bindgen_ty_25 = 3;
pub const kHFSPlusFileThreadRecord: _bindgen_ty_25 = 4;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const kHFSFileLockedBit: _bindgen_ty_26 = 0;
pub const kHFSFileLockedMask: _bindgen_ty_26 = 1;
pub const kHFSThreadExistsBit: _bindgen_ty_26 = 1;
pub const kHFSThreadExistsMask: _bindgen_ty_26 = 2;
pub const kHFSHasAttributesBit: _bindgen_ty_26 = 2;
pub const kHFSHasAttributesMask: _bindgen_ty_26 = 4;
pub const kHFSHasSecurityBit: _bindgen_ty_26 = 3;
pub const kHFSHasSecurityMask: _bindgen_ty_26 = 8;
pub const kHFSHasFolderCountBit: _bindgen_ty_26 = 4;
pub const kHFSHasFolderCountMask: _bindgen_ty_26 = 16;
pub const kHFSHasLinkChainBit: _bindgen_ty_26 = 5;
pub const kHFSHasLinkChainMask: _bindgen_ty_26 = 32;
pub const kHFSHasChildLinkBit: _bindgen_ty_26 = 6;
pub const kHFSHasChildLinkMask: _bindgen_ty_26 = 64;
pub const kHFSHasDateAddedBit: _bindgen_ty_26 = 7;
pub const kHFSHasDateAddedMask: _bindgen_ty_26 = 128;
pub const kHFSFastDevPinnedBit: _bindgen_ty_26 = 8;
pub const kHFSFastDevPinnedMask: _bindgen_ty_26 = 256;
pub const kHFSDoNotFastDevPinBit: _bindgen_ty_26 = 9;
pub const kHFSDoNotFastDevPinMask: _bindgen_ty_26 = 512;
pub const kHFSFastDevCandidateBit: _bindgen_ty_26 = 10;
pub const kHFSFastDevCandidateMask: _bindgen_ty_26 = 1024;
pub const kHFSAutoCandidateBit: _bindgen_ty_26 = 11;
pub const kHFSAutoCandidateMask: _bindgen_ty_26 = 2048;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(2))]
pub struct HFSCatalogFolder {
    pub _bindgen_opaque_blob: [u16; 35usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSPlusCatalogFolder {
    pub _bindgen_opaque_blob: [u16; 44usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSCatalogFile {
    pub _bindgen_opaque_blob: [u16; 51usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSPlusCatalogFile {
    pub _bindgen_opaque_blob: [u16; 124usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSCatalogThread {
    pub recordType: i16,
    pub reserved: [i32; 2usize],
    pub parentID: u_int32_t,
    pub nodeName: [u_int8_t; 32usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusCatalogThread {
    pub recordType: i16,
    pub reserved: i16,
    pub parentID: u_int32_t,
    pub nodeName: HFSUniStr255,
}
pub const kHFSPlusAttrInlineData: _bindgen_ty_27 = 16;
pub const kHFSPlusAttrForkData: _bindgen_ty_27 = 32;
pub const kHFSPlusAttrExtents: _bindgen_ty_27 = 48;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrForkData {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub theFork: HFSPlusForkData,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrExtents {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub extents: HFSPlusExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrData {
    pub recordType: u_int32_t,
    pub reserved: [u_int32_t; 2usize],
    pub attrSize: u_int32_t,
    pub attrData: [u_int8_t; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrInlineData {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub logicalSize: u_int32_t,
    pub userData: [u_int8_t; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HFSPlusAttrRecord {
    pub recordType: u_int32_t,
    pub inlineData: HFSPlusAttrInlineData,
    pub attrData: HFSPlusAttrData,
    pub forkData: HFSPlusAttrForkData,
    pub overflowExtents: HFSPlusAttrExtents,
}
pub const kHFSMaxAttrNameLen: _bindgen_ty_28 = 127;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrKey {
    pub keyLength: u_int16_t,
    pub pad: u_int16_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int32_t,
    pub attrNameLen: u_int16_t,
    pub attrName: [u_int16_t; 127usize],
}
pub const kHFSPlusExtentKeyMaximumLength: _bindgen_ty_29 = 10;
pub const kHFSExtentKeyMaximumLength: _bindgen_ty_29 = 7;
pub const kHFSPlusCatalogKeyMaximumLength: _bindgen_ty_29 = 516;
pub const kHFSPlusCatalogKeyMinimumLength: _bindgen_ty_29 = 6;
pub const kHFSCatalogKeyMaximumLength: _bindgen_ty_29 = 37;
pub const kHFSCatalogKeyMinimumLength: _bindgen_ty_29 = 6;
pub const kHFSPlusCatalogMinNodeSize: _bindgen_ty_29 = 4096;
pub const kHFSPlusExtentMinNodeSize: _bindgen_ty_29 = 512;
pub const kHFSPlusAttrMinNodeSize: _bindgen_ty_29 = 4096;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const kHFSVolumeHardwareLockBit: _bindgen_ty_30 = 7;
pub const kHFSVolumeUnmountedBit: _bindgen_ty_30 = 8;
pub const kHFSVolumeSparedBlocksBit: _bindgen_ty_30 = 9;
pub const kHFSVolumeNoCacheRequiredBit: _bindgen_ty_30 = 10;
pub const kHFSBootVolumeInconsistentBit: _bindgen_ty_30 = 11;
pub const kHFSCatalogNodeIDsReusedBit: _bindgen_ty_30 = 12;
pub const kHFSVolumeJournaledBit: _bindgen_ty_30 = 13;
pub const kHFSVolumeInconsistentBit: _bindgen_ty_30 = 14;
pub const kHFSVolumeSoftwareLockBit: _bindgen_ty_30 = 15;
pub const kHFSUnusedNodeFixBit: _bindgen_ty_30 = 31;
pub const kHFSContentProtectionBit: _bindgen_ty_30 = 30;
pub const kHFSVolumeHardwareLockMask: _bindgen_ty_30 = 128;
pub const kHFSVolumeUnmountedMask: _bindgen_ty_30 = 256;
pub const kHFSVolumeSparedBlocksMask: _bindgen_ty_30 = 512;
pub const kHFSVolumeNoCacheRequiredMask: _bindgen_ty_30 = 1024;
pub const kHFSBootVolumeInconsistentMask: _bindgen_ty_30 = 2048;
pub const kHFSCatalogNodeIDsReusedMask: _bindgen_ty_30 = 4096;
pub const kHFSVolumeJournaledMask: _bindgen_ty_30 = 8192;
pub const kHFSVolumeInconsistentMask: _bindgen_ty_30 = 16384;
pub const kHFSVolumeSoftwareLockMask: _bindgen_ty_30 = 32768;
pub const kHFSContentProtectionMask: _bindgen_ty_30 = 1073741824;
pub const kHFSUnusedNodeFixMask: _bindgen_ty_30 = 2147483648;
pub const kHFSMDBAttributesMask: _bindgen_ty_30 = 33664;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const kHFSUnusedNodesFixDate: _bindgen_ty_31 = 3320784000;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSMasterDirectoryBlock {
    pub drSigWord: u_int16_t,
    pub drCrDate: u_int32_t,
    pub drLsMod: u_int32_t,
    pub drAtrb: u_int16_t,
    pub drNmFls: u_int16_t,
    pub drVBMSt: u_int16_t,
    pub drAllocPtr: u_int16_t,
    pub drNmAlBlks: u_int16_t,
    pub drAlBlkSiz: u_int32_t,
    pub drClpSiz: u_int32_t,
    pub drAlBlSt: u_int16_t,
    pub drNxtCNID: u_int32_t,
    pub drFreeBks: u_int16_t,
    pub drVN: [u_int8_t; 28usize],
    pub drVolBkUp: u_int32_t,
    pub drVSeqNum: u_int16_t,
    pub drWrCnt: u_int32_t,
    pub drXTClpSiz: u_int32_t,
    pub drCTClpSiz: u_int32_t,
    pub drNmRtDirs: u_int16_t,
    pub drFilCnt: u_int32_t,
    pub drDirCnt: u_int32_t,
    pub drFndrInfo: [u_int32_t; 8usize],
    pub drEmbedSigWord: u_int16_t,
    pub drEmbedExtent: HFSExtentDescriptor,
    pub drXTFlSize: u_int32_t,
    pub drXTExtRec: HFSExtentRecord,
    pub drCTFlSize: u_int32_t,
    pub drCTExtRec: HFSExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusVolumeHeader {
    pub signature: u_int16_t,
    pub version: u_int16_t,
    pub attributes: u_int32_t,
    pub lastMountedVersion: u_int32_t,
    pub journalInfoBlock: u_int32_t,
    pub createDate: u_int32_t,
    pub modifyDate: u_int32_t,
    pub backupDate: u_int32_t,
    pub checkedDate: u_int32_t,
    pub fileCount: u_int32_t,
    pub folderCount: u_int32_t,
    pub blockSize: u_int32_t,
    pub totalBlocks: u_int32_t,
    pub freeBlocks: u_int32_t,
    pub nextAllocation: u_int32_t,
    pub rsrcClumpSize: u_int32_t,
    pub dataClumpSize: u_int32_t,
    pub nextCatalogID: u_int32_t,
    pub writeCount: u_int32_t,
    pub encodingsBitmap: u_int64_t,
    pub finderInfo: [u_int8_t; 32usize],
    pub allocationFile: HFSPlusForkData,
    pub extentsFile: HFSPlusForkData,
    pub catalogFile: HFSPlusForkData,
    pub attributesFile: HFSPlusForkData,
    pub startupFile: HFSPlusForkData,
}
pub const BTreeKeyLimits_kMaxKeyLength: BTreeKeyLimits = 520;
pub type BTreeKeyLimits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union BTreeKey {
    pub length8: u_int8_t,
    pub length16: u_int16_t,
    pub rawData: [u_int8_t; 522usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BTNodeDescriptor {
    pub fLink: u_int32_t,
    pub bLink: u_int32_t,
    pub kind: i8,
    pub height: u_int8_t,
    pub numRecords: u_int16_t,
    pub reserved: u_int16_t,
}
pub const kBTLeafNode: _bindgen_ty_32 = -1;
pub const kBTIndexNode: _bindgen_ty_32 = 0;
pub const kBTHeaderNode: _bindgen_ty_32 = 1;
pub const kBTMapNode: _bindgen_ty_32 = 2;
pub type _bindgen_ty_32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BTHeaderRec {
    pub treeDepth: u_int16_t,
    pub rootNode: u_int32_t,
    pub leafRecords: u_int32_t,
    pub firstLeafNode: u_int32_t,
    pub lastLeafNode: u_int32_t,
    pub nodeSize: u_int16_t,
    pub maxKeyLength: u_int16_t,
    pub totalNodes: u_int32_t,
    pub freeNodes: u_int32_t,
    pub reserved1: u_int16_t,
    pub clumpSize: u_int32_t,
    pub btreeType: u_int8_t,
    pub keyCompareType: u_int8_t,
    pub attributes: u_int32_t,
    pub reserved3: [u_int32_t; 16usize],
}
pub const kBTBadCloseMask: _bindgen_ty_33 = 1;
pub const kBTBigKeysMask: _bindgen_ty_33 = 2;
pub const kBTVariableIndexKeysMask: _bindgen_ty_33 = 4;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const kHFSCaseFolding: _bindgen_ty_34 = 207;
pub const kHFSBinaryCompare: _bindgen_ty_34 = 188;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct JournalInfoBlock {
    pub flags: u_int32_t,
    pub device_signature: [u_int32_t; 8usize],
    pub offset: u_int64_t,
    pub size: u_int64_t,
    pub ext_jnl_uuid: uuid_string_t,
    pub machine_serial_num: [::std::os::raw::c_char; 48usize],
    pub reserved: [::std::os::raw::c_char; 43usize],
}
pub const kJIJournalInFSMask: _bindgen_ty_35 = 1;
pub const kJIJournalOnOtherDeviceMask: _bindgen_ty_35 = 2;
pub const kJIJournalNeedInitMask: _bindgen_ty_35 = 4;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub type text_encoding_t = u_int32_t;
pub type fsobj_type_t = u_int32_t;
pub type fsobj_tag_t = u_int32_t;
pub type fsfile_type_t = u_int32_t;
pub type fsvolid_t = u_int32_t;
pub type attrgroup_t = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrlist {
    pub bitmapcount: u_short,
    pub reserved: u_int16_t,
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_set {
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
pub type attribute_set_t = attribute_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrreference {
    pub attr_dataoffset: i32,
    pub attr_length: u_int32_t,
}
pub type attrreference_t = attrreference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diskextent {
    pub startblock: u_int32_t,
    pub blockcount: u_int32_t,
}
pub type extentrecord = [diskextent; 8usize];
pub type vol_capabilities_set_t = [u_int32_t; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_capabilities_attr {
    pub capabilities: vol_capabilities_set_t,
    pub valid: vol_capabilities_set_t,
}
pub type vol_capabilities_attr_t = vol_capabilities_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_attributes_attr {
    pub validattr: attribute_set_t,
    pub nativeattr: attribute_set_t,
}
pub type vol_attributes_attr_t = vol_attributes_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    pub returnattrs: *mut attrlist,
    pub returnbuffer: *mut ::std::os::raw::c_void,
    pub returnbuffersize: usize,
    pub maxmatches: u_long,
    pub timelimit: timeval,
    pub searchparams1: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams1: usize,
    pub searchparams2: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams2: usize,
    pub searchattrs: attrlist,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    pub ss_union_flags: u32,
    pub ss_union_layer: u32,
    pub ss_fsstate: [u_char; 548usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs64 {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vfsstatfs {
    pub f_bsize: u32,
    pub f_iosize: usize,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_bused: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_flags: u64,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_fssubtype: u32,
    pub f_reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount {
    _unused: [u8; 0],
}
pub type mount_t = *mut mount;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode {
    _unused: [u8; 0],
}
pub type vnode_t = *mut vnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsconf {
    pub vfc_reserved1: u32,
    pub vfc_name: [::std::os::raw::c_char; 15usize],
    pub vfc_typenum: ::std::os::raw::c_int,
    pub vfc_refcount: ::std::os::raw::c_int,
    pub vfc_flags: ::std::os::raw::c_int,
    pub vfc_reserved2: u32,
    pub vfc_reserved3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsidctl {
    pub vc_vers: ::std::os::raw::c_int,
    pub vc_fsid: fsid_t,
    pub vc_ptr: *mut ::std::os::raw::c_void,
    pub vc_len: usize,
    pub vc_spare: [u_int32_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsquery {
    pub vq_flags: u_int32_t,
    pub vq_spare: [u_int32_t; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_server {
    pub vs_minutes: i32,
    pub vs_server_name: [u_int8_t; 768usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct netfs_status {
    pub ns_status: u_int32_t,
    pub ns_mountopts: [::std::os::raw::c_char; 512usize],
    pub ns_waittime: u32,
    pub ns_threadcount: u32,
    pub ns_threadids: __IncompleteArrayField<u64>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fhandle {
    pub fh_len: ::std::os::raw::c_uint,
    pub fh_data: [::std::os::raw::c_uchar; 128usize],
}
pub type fhandle_t = fhandle;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_BOOT: graftdmg_type_t = 1;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_PREBOOT: graftdmg_type_t = 2;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_DOWNLEVEL: graftdmg_type_t = 3;
pub type graftdmg_type_t = u32;
extern "C" {
    pub fn fhopen(arg1: *const fhandle, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatfs$INODE64"]
    pub fn fstatfs(arg1: ::std::os::raw::c_int, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatfs64(arg1: ::std::os::raw::c_int, arg2: *mut statfs64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfh(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fhandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getfsstat$INODE64"]
    pub fn getfsstat(
        arg1: *mut statfs,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfsstat64(
        arg1: *mut statfs64,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmntinfo$INODE64"]
    pub fn getmntinfo(arg1: *mut *mut statfs, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmntinfo_r_np$INODE64"]
    pub fn getmntinfo_r_np(
        arg1: *mut *mut statfs,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo64(
        arg1: *mut *mut statfs64,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statfs$INODE64"]
    pub fn statfs(arg1: *const ::std::os::raw::c_char, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statfs64(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statfs64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvfsbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut vfsconf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hfs_mount_args {
    pub fspec: *mut ::std::os::raw::c_char,
    pub hfs_uid: uid_t,
    pub hfs_gid: gid_t,
    pub hfs_mask: mode_t,
    pub hfs_encoding: u_int32_t,
    pub hfs_timezone: timezone,
    pub flags: ::std::os::raw::c_int,
    pub journal_tbuffer_size: ::std::os::raw::c_int,
    pub journal_flags: ::std::os::raw::c_int,
    pub journal_disable: ::std::os::raw::c_int,
}
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn unctrl(arg1: chtype) -> *mut ::std::os::raw::c_char;
}
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st {
    _unused: [u8; 0],
}
pub type WINDOW = _win_st;
pub type attr_t = chtype;
extern "C" {
    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_get(
        arg1: *mut attr_t,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baudrate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgdset(arg1: chtype);
}
extern "C" {
    pub fn border(
        arg1: chtype,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_box"]
    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color() -> bool;
}
extern "C" {
    pub fn cbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chgat(
        arg1: ::std::os::raw::c_int,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtobot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtoeol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_set(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copywin(
        arg1: *const WINDOW,
        arg2: *mut WINDOW,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delscreen(arg1: *mut SCREEN);
}
extern "C" {
    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn derwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn doupdate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn echo() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erase() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter();
}
extern "C" {
    pub fn flash() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors() -> bool;
}
extern "C" {
    pub fn has_ic() -> bool;
}
extern "C" {
    pub fn has_il() -> bool;
}
extern "C" {
    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idcok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn immedok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn inch() -> chtype;
}
extern "C" {
    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initscr() -> *mut WINDOW;
}
extern "C" {
    pub fn init_color(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin() -> bool;
}
extern "C" {
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
}
extern "C" {
    pub fn keyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_move"]
    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvchgat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: attr_t,
        arg5: ::std::os::raw::c_short,
        arg6: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvcur(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvdelch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvderwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> chtype;
}
extern "C" {
    pub fn mvinchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvprintw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvscanw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: attr_t,
        arg6: ::std::os::raw::c_short,
        arg7: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwdelch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> chtype;
}
extern "C" {
    pub fn mvwinchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwprintw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwscanw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut FILE,
    ) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn nl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush();
}
extern "C" {
    pub fn noraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pnoutrefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush();
}
extern "C" {
    pub fn raw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ripoffline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WINDOW,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanw(arg1: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_dump(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setscrreg(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
}
extern "C" {
    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr() -> attr_t;
}
extern "C" {
    pub fn slk_attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standout() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standend() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subpad(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn subwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs() -> chtype;
}
extern "C" {
    pub fn termname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timeout(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn touchline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env(arg1: bool);
}
extern "C" {
    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs(
        arg1: chtype,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_printw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_scanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchnstr(
        arg1: *mut WINDOW,
        arg2: *const chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_get(
        arg1: *mut WINDOW,
        arg2: *mut attr_t,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_on(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_off(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_set(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
}
extern "C" {
    pub fn wborder(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
        arg9: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: attr_t,
        arg4: ::std::os::raw::c_short,
        arg5: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcolor_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcursyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winch(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn winchnstr(
        arg1: *mut WINDOW,
        arg2: *mut chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmove(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wredrawln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsetscrreg(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsyncdown(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wsyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wtouchln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wvline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetflag(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm(arg1: *mut ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
pub type NCURSES_WINDOW_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_SCREEN_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn is_term_resized(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn keybound(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curses_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn assume_default_colors(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_defined(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resize_term(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_screen(
        arg1: *mut SCREEN,
        arg2: NCURSES_SCREEN_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_window(
        arg1: *mut WINDOW,
        arg2: NCURSES_WINDOW_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wresize(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter();
}
extern "C" {
    pub fn wgetparent(arg1: *const WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn is_cleared(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idcok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idlok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_immedok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_keypad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_leaveok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_nodelay(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_notimeout(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_scrollok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_syncok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn wgetscrreg(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
extern "C" {
    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn wenclose(
        arg1: *const WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn mouseinterval(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmouse_trafo(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: bool,
    ) -> bool;
}
extern "C" {
    pub fn mouse_trafo(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: bool,
    ) -> bool;
}
extern "C" {
    pub fn mcprint(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ah {
    pub ah_nxt: u_int8_t,
    pub ah_len: u_int8_t,
    pub ah_reserve: u_int16_t,
    pub ah_spi: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newah {
    pub ah_nxt: u_int8_t,
    pub ah_len: u_int8_t,
    pub ah_reserve: u_int16_t,
    pub ah_spi: u_int32_t,
    pub ah_seq: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp {
    pub esp_spi: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newesp {
    pub esp_spi: u_int32_t,
    pub esp_seq: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esptail {
    pub esp_padlen: u_int8_t,
    pub esp_nxt: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsecstat {
    pub in_success: u_quad_t,
    pub in_polvio: u_quad_t,
    pub in_nosa: u_quad_t,
    pub in_inval: u_quad_t,
    pub in_nomem: u_quad_t,
    pub in_badspi: u_quad_t,
    pub in_ahreplay: u_quad_t,
    pub in_espreplay: u_quad_t,
    pub in_ahauthsucc: u_quad_t,
    pub in_ahauthfail: u_quad_t,
    pub in_espauthsucc: u_quad_t,
    pub in_espauthfail: u_quad_t,
    pub in_esphist: [u_quad_t; 256usize],
    pub in_ahhist: [u_quad_t; 256usize],
    pub in_comphist: [u_quad_t; 256usize],
    pub out_success: u_quad_t,
    pub out_polvio: u_quad_t,
    pub out_nosa: u_quad_t,
    pub out_inval: u_quad_t,
    pub out_nomem: u_quad_t,
    pub out_noroute: u_quad_t,
    pub out_esphist: [u_quad_t; 256usize],
    pub out_ahhist: [u_quad_t; 256usize],
    pub out_comphist: [u_quad_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_info {
    pub wake_pkt: [u_int8_t; 100usize],
    pub wake_uuid: uuid_string_t,
    pub wake_pkt_spi: u_int32_t,
    pub wake_pkt_seq: u_int32_t,
    pub wake_pkt_len: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_event_data {
    pub wake_uuid: uuid_string_t,
}
extern "C" {
    pub fn ipsec_set_policy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> caddr_t;
}
extern "C" {
    pub fn ipsec_get_policylen(arg1: caddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipsec_dump_policy(
        arg1: caddr_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipsec_strerror() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcomp {
    pub comp_nxt: u_int8_t,
    pub comp_flags: u_int8_t,
    pub comp_cpi: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rip6stat {
    pub rip6s_ipackets: u_quad_t,
    pub rip6s_isum: u_quad_t,
    pub rip6s_badsum: u_quad_t,
    pub rip6s_nosock: u_quad_t,
    pub rip6s_nosockmcast: u_quad_t,
    pub rip6s_fullsock: u_quad_t,
    pub rip6s_opackets: u_quad_t,
}
pub type comp_t = u_int16_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acct {
    pub ac_comm: [::std::os::raw::c_char; 10usize],
    pub ac_utime: comp_t,
    pub ac_stime: comp_t,
    pub ac_etime: comp_t,
    pub ac_btime: u_int32_t,
    pub ac_uid: uid_t,
    pub ac_gid: gid_t,
    pub ac_mem: u_int16_t,
    pub ac_io: comp_t,
    pub ac_tty: dev_t,
    pub ac_flag: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
pub type daddr64_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf {
    _unused: [u8; 0],
}
pub type buf_t = *mut buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file {
    _unused: [u8; 0],
}
pub type file_t = *mut file;
pub type proc_t = *mut proc_;
pub type proc_ident_t = *mut proc_ident;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uio {
    _unused: [u8; 0],
}
pub type uio_t = *mut uio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_context {
    _unused: [u8; 0],
}
pub type vfs_context_t = *mut vfs_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfstable {
    _unused: [u8; 0],
}
pub type vfstable_t = *mut vfstable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifnet {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pkthdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __socket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockopt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifaddr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifmultiaddr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifnet_filter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __rtentry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __if_clone {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __bufattr {
    _unused: [u8; 0],
}
pub type ifnet_t = *mut __ifnet;
pub type mbuf_t = *mut __mbuf;
pub type pkthdr_t = *mut __pkthdr;
pub type socket_t = *mut __socket;
pub type sockopt_t = *mut __sockopt;
pub type ifaddr_t = *mut __ifaddr;
pub type ifmultiaddr_t = *mut __ifmultiaddr;
pub type interface_filter_t = *mut __ifnet_filter;
pub type route_t = *mut __rtentry;
pub type if_clone_t = *mut __if_clone;
pub type bufattr_t = *mut __bufattr;
pub type kauth_action_t = ::std::os::raw::c_int;
extern "C" {
    pub fn buf_markaged(bp: buf_t);
}
extern "C" {
    pub fn buf_markinvalid(bp: buf_t);
}
extern "C" {
    pub fn buf_markdelayed(bp: buf_t);
}
extern "C" {
    pub fn buf_markclean(arg1: buf_t);
}
extern "C" {
    pub fn buf_markeintr(bp: buf_t);
}
extern "C" {
    pub fn buf_markfua(bp: buf_t);
}
extern "C" {
    pub fn buf_fua(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_valid(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_fromcache(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_upl(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_uploffset(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_rcred(bp: buf_t) -> kauth_cred_t;
}
extern "C" {
    pub fn buf_wcred(bp: buf_t) -> kauth_cred_t;
}
extern "C" {
    pub fn buf_proc(bp: buf_t) -> proc_t;
}
extern "C" {
    pub fn buf_dirtyoff(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_dirtyend(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setdirtyoff(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_setdirtyend(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_error(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_seterror(bp: buf_t, arg1: errno_t);
}
extern "C" {
    pub fn buf_setflags(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_clearflags(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_flags(bp: buf_t) -> i32;
}
extern "C" {
    pub fn buf_reset(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_map(bp: buf_t, io_addr: *mut caddr_t) -> errno_t;
}
extern "C" {
    pub fn buf_map_range(bp: buf_t, io_addr: *mut caddr_t) -> errno_t;
}
extern "C" {
    pub fn buf_unmap(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_unmap_range(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_setdrvdata(bp: buf_t, drvdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn buf_drvdata(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_setfsprivate(bp: buf_t, fsprivate: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn buf_fsprivate(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_blkno(bp: buf_t) -> daddr64_t;
}
extern "C" {
    pub fn buf_lblkno(bp: buf_t) -> daddr64_t;
}
extern "C" {
    pub fn buf_lblksize(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setblkno(bp: buf_t, blkno: daddr64_t);
}
extern "C" {
    pub fn buf_setlblkno(bp: buf_t, lblkno: daddr64_t);
}
extern "C" {
    pub fn buf_setlblksize(bp: buf_t, lblksize: u32);
}
extern "C" {
    pub fn buf_count(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_size(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_resid(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setcount(bp: buf_t, bcount: u32);
}
extern "C" {
    pub fn buf_setsize(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_setresid(bp: buf_t, resid: u32);
}
extern "C" {
    pub fn buf_setdataptr(bp: buf_t, data: usize);
}
extern "C" {
    pub fn buf_dataptr(bp: buf_t) -> usize;
}
extern "C" {
    pub fn buf_vnode(bp: buf_t) -> vnode_t;
}
extern "C" {
    pub fn buf_setvnode(bp: buf_t, vp: vnode_t);
}
extern "C" {
    pub fn buf_device(bp: buf_t) -> dev_t;
}
extern "C" {
    pub fn buf_setdevice(bp: buf_t, vp: vnode_t) -> errno_t;
}
extern "C" {
    pub fn buf_strategy(devvp: vnode_t, ap: *mut ::std::os::raw::c_void) -> errno_t;
}
extern "C" {
    pub fn buf_invalblkno(vp: vnode_t, lblkno: daddr64_t, flags: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn buf_callback(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_setcallback(
        bp: buf_t,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        transaction: *mut ::std::os::raw::c_void,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_setupl(bp: buf_t, upl: upl_t, offset: u32) -> errno_t;
}
extern "C" {
    pub fn buf_clone(
        bp: buf_t,
        io_offset: ::std::os::raw::c_int,
        io_size: ::std::os::raw::c_int,
        iodone: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_create_shadow(
        bp: buf_t,
        force_copy: boolean_t,
        external_storage: usize,
        iodone: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_shadow(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_alloc(vp: vnode_t) -> buf_t;
}
extern "C" {
    pub fn buf_free(bp: buf_t);
}
extern "C" {
    pub fn buf_invalidateblks(
        vp: vnode_t,
        flags: ::std::os::raw::c_int,
        slpflag: ::std::os::raw::c_int,
        slptimeo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_flushdirtyblks(
        vp: vnode_t,
        wait: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn buf_iterate(
        vp: vnode_t,
        callout: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: buf_t,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        flags: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn buf_clear(bp: buf_t);
}
extern "C" {
    pub fn buf_bawrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_bdwrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_bwrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_biodone(bp: buf_t);
}
extern "C" {
    pub fn buf_biowait(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_brelse(bp: buf_t);
}
extern "C" {
    pub fn buf_bread(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_breadn(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        rablks: *mut daddr64_t,
        rasizes: *mut ::std::os::raw::c_int,
        nrablks: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_meta_bread(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_meta_breadn(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        rablks: *mut daddr64_t,
        rasizes: *mut ::std::os::raw::c_int,
        nrablks: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn minphys(bp: buf_t) -> u_int;
}
extern "C" {
    pub fn physio(
        f_strategy: ::std::option::Option<unsafe extern "C" fn(arg1: buf_t)>,
        bp: buf_t,
        dev: dev_t,
        flags: ::std::os::raw::c_int,
        f_minphys: ::std::option::Option<unsafe extern "C" fn(arg1: buf_t) -> u_int>,
        uio: *mut uio,
        blocksize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_getblk(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        slpflag: ::std::os::raw::c_int,
        slptimeo: ::std::os::raw::c_int,
        operation: ::std::os::raw::c_int,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_geteblk(size: ::std::os::raw::c_int) -> buf_t;
}
extern "C" {
    pub fn buf_clear_redundancy_flags(bp: buf_t, flags: u32);
}
extern "C" {
    pub fn buf_redundancy_flags(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_set_redundancy_flags(bp: buf_t, flags: u32);
}
extern "C" {
    pub fn buf_attr(bp: buf_t) -> bufattr_t;
}
extern "C" {
    pub fn buf_markstatic(bp: buf_t);
}
extern "C" {
    pub fn buf_static(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufattr_markioscheduled(bap: bufattr_t);
}
extern "C" {
    pub fn bufattr_ioscheduled(bap: bufattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufattr_markexpeditedmeta(bap: bufattr_t);
}
extern "C" {
    pub fn bufattr_expeditedmeta(bap: bufattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_extent_t {
    pub offset: u64,
    pub length: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_firmware_path_t {
    pub path: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_format_capacity_t {
    pub blockCount: u64,
    pub blockSize: u32,
    pub reserved0096: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_format_capacities_t {
    pub capacities: *mut dk_format_capacity_t,
    pub capacitiesCount: u32,
    pub reserved0096: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_synchronize_t {
    pub offset: u64,
    pub length: u64,
    pub options: u32,
    pub reserved0160: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_unmap_t {
    pub extents: *mut dk_extent_t,
    pub extentsCount: u32,
    pub options: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_corestorage_info_t {
    pub flags: u64,
    pub hotfile_size: u64,
    pub hibernate_minsize: u64,
    pub swapfile_pinning: u64,
    pub padding: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_provision_extent_t {
    pub offset: u64,
    pub length: u64,
    pub provisionType: u8,
    pub reserved: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_provision_status_t {
    pub offset: u64,
    pub length: u64,
    pub options: u64,
    pub reserved: u32,
    pub extentsCount: u32,
    pub extents: *mut dk_provision_extent_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_error_description_t {
    pub options: u64,
    pub reserved: u64,
    pub description_size: u64,
    pub description: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eventreq {
    pub er_type: ::std::os::raw::c_int,
    pub er_handle: ::std::os::raw::c_int,
    pub er_data: *mut ::std::os::raw::c_void,
    pub er_rcnt: ::std::os::raw::c_int,
    pub er_wcnt: ::std::os::raw::c_int,
    pub er_ecnt: ::std::os::raw::c_int,
    pub er_eventbits: ::std::os::raw::c_int,
}
pub type er_t = *mut eventreq;
extern "C" {
    pub fn modwatch(arg1: er_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn watchevent(arg1: er_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waitevent(arg1: er_t, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonhdr {
    pub lpc: u32,
    pub hpc: u32,
    pub ncnt: u32,
    pub version: i32,
    pub profrate: i32,
    pub spare: [i32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonhdr_64 {
    pub lpc: u64,
    pub hpc: u64,
    pub ncnt: u32,
    pub version: i32,
    pub profrate: i32,
    pub spare: [i32; 3usize],
}
pub type gmonhdr_t = gmonhdr_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tostruct {
    pub selfpc: u32,
    pub count: i32,
    pub link: u16,
    pub order: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tostruct_64 {
    pub selfpc: u64,
    pub count: i32,
    pub link: u16,
    pub order: u16,
}
pub type tostruct_t = tostruct_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc {
    pub raw_frompc: u32,
    pub raw_selfpc: u32,
    pub raw_count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_64 {
    pub raw_frompc: u64,
    pub raw_selfpc: u64,
    pub raw_count: i32,
}
pub type rawarc_t = rawarc_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonparam {
    pub state: ::std::os::raw::c_int,
    pub kcount: *mut u_short,
    pub kcountsize: u_long,
    pub froms: *mut u_short,
    pub fromssize: u_long,
    pub tos: *mut tostruct_t,
    pub tossize: u_long,
    pub tolimit: ::std::os::raw::c_long,
    pub lowpc: u_long,
    pub highpc: u_long,
    pub textsize: u_long,
    pub hashfraction: u_long,
}
extern "C" {
    pub static mut _gmonparam: gmonparam;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmon_data {
    pub type_: u32,
    pub size: u32,
}
pub type gmon_data_t = gmon_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_order {
    pub raw_frompc: u32,
    pub raw_selfpc: u32,
    pub raw_count: u32,
    pub raw_order: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_order_64 {
    pub raw_frompc: u64,
    pub raw_selfpc: u64,
    pub raw_count: u32,
    pub raw_order: u32,
}
pub type rawarc_order_t = rawarc_order_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttychars {
    pub tc_erase: ::std::os::raw::c_char,
    pub tc_kill: ::std::os::raw::c_char,
    pub tc_intrc: ::std::os::raw::c_char,
    pub tc_quitc: ::std::os::raw::c_char,
    pub tc_startc: ::std::os::raw::c_char,
    pub tc_stopc: ::std::os::raw::c_char,
    pub tc_eofc: ::std::os::raw::c_char,
    pub tc_brkc: ::std::os::raw::c_char,
    pub tc_suspc: ::std::os::raw::c_char,
    pub tc_dsuspc: ::std::os::raw::c_char,
    pub tc_rprntc: ::std::os::raw::c_char,
    pub tc_flushc: ::std::os::raw::c_char,
    pub tc_werasc: ::std::os::raw::c_char,
    pub tc_lnextc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tchars {
    pub t_intrc: ::std::os::raw::c_char,
    pub t_quitc: ::std::os::raw::c_char,
    pub t_startc: ::std::os::raw::c_char,
    pub t_stopc: ::std::os::raw::c_char,
    pub t_eofc: ::std::os::raw::c_char,
    pub t_brkc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltchars {
    pub t_suspc: ::std::os::raw::c_char,
    pub t_dsuspc: ::std::os::raw::c_char,
    pub t_rprntc: ::std::os::raw::c_char,
    pub t_flushc: ::std::os::raw::c_char,
    pub t_werasc: ::std::os::raw::c_char,
    pub t_lnextc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgttyb {
    pub sg_ispeed: ::std::os::raw::c_char,
    pub sg_ospeed: ::std::os::raw::c_char,
    pub sg_erase: ::std::os::raw::c_char,
    pub sg_kill: ::std::os::raw::c_char,
    pub sg_flags: ::std::os::raw::c_short,
}
extern "C" {
    pub fn kdebug_signpost(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_start(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_end(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_event_data {
    pub ctl_id: u_int32_t,
    pub ctl_unit: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_info {
    pub ctl_id: u_int32_t,
    pub ctl_name: [::std::os::raw::c_char; 96usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ctl {
    pub sc_len: u_char,
    pub sc_family: u_char,
    pub ss_sysaddr: u_int16_t,
    pub sc_id: u_int32_t,
    pub sc_unit: u_int32_t,
    pub sc_reserved: [u_int32_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbstat {
    pub m_mbufs: u_int32_t,
    pub m_clusters: u_int32_t,
    pub m_spare: u_int32_t,
    pub m_clfree: u_int32_t,
    pub m_drops: u_int32_t,
    pub m_wait: u_int32_t,
    pub m_drain: u_int32_t,
    pub m_mtypes: [u_short; 256usize],
    pub m_mcfail: u_int32_t,
    pub m_mpfail: u_int32_t,
    pub m_msize: u_int32_t,
    pub m_mclbytes: u_int32_t,
    pub m_minclsize: u_int32_t,
    pub m_mlen: u_int32_t,
    pub m_mhlen: u_int32_t,
    pub m_bigclusters: u_int32_t,
    pub m_bigclfree: u_int32_t,
    pub m_bigmclbytes: u_int32_t,
    pub m_forcedefunct: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ombstat {
    pub m_mbufs: u_int32_t,
    pub m_clusters: u_int32_t,
    pub m_spare: u_int32_t,
    pub m_clfree: u_int32_t,
    pub m_drops: u_int32_t,
    pub m_wait: u_int32_t,
    pub m_drain: u_int32_t,
    pub m_mtypes: [u_short; 256usize],
    pub m_mcfail: u_int32_t,
    pub m_mpfail: u_int32_t,
    pub m_msize: u_int32_t,
    pub m_mclbytes: u_int32_t,
    pub m_minclsize: u_int32_t,
    pub m_mlen: u_int32_t,
    pub m_mhlen: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mb_class_stat {
    pub mbcl_cname: [::std::os::raw::c_char; 16usize],
    pub mbcl_size: u_int32_t,
    pub mbcl_total: u_int32_t,
    pub mbcl_active: u_int32_t,
    pub mbcl_infree: u_int32_t,
    pub mbcl_slab_cnt: u_int32_t,
    pub mbcl_pad: u_int32_t,
    pub mbcl_alloc_cnt: u_int64_t,
    pub mbcl_free_cnt: u_int64_t,
    pub mbcl_notified: u_int64_t,
    pub mbcl_purge_cnt: u_int64_t,
    pub mbcl_fail_cnt: u_int64_t,
    pub mbcl_ctotal: u_int32_t,
    pub mbcl_release_cnt: u_int32_t,
    pub mbcl_mc_state: u_int32_t,
    pub mbcl_mc_cached: u_int32_t,
    pub mbcl_mc_waiter_cnt: u_int32_t,
    pub mbcl_mc_wretry_cnt: u_int32_t,
    pub mbcl_mc_nwretry_cnt: u_int32_t,
    pub mbcl_peak_reported: u_int32_t,
    pub mbcl_reserved: [u_int32_t; 7usize],
}
pub type mb_class_stat_t = mb_class_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mb_stat {
    pub mbs_cnt: u_int32_t,
    pub mbs_pad: u_int32_t,
    pub mbs_class: [mb_class_stat_t; 1usize],
}
pub type mb_stat_t = mb_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgbuf {
    pub msg_magic: ::std::os::raw::c_int,
    pub msg_size: ::std::os::raw::c_int,
    pub msg_bufx: ::std::os::raw::c_int,
    pub msg_bufr: ::std::os::raw::c_int,
    pub msg_bufc: *mut ::std::os::raw::c_char,
}
pub type netaddr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct np_uid_t {
    pub np_uid_high: ::std::os::raw::c_long,
    pub np_uid_low: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network_port_t {
    pub np_receiver: netaddr_t,
    pub np_owner: netaddr_t,
    pub np_puid: np_uid_t,
    pub np_sid: np_uid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipebuf {
    pub cnt: u_int,
    pub in_: u_int,
    pub out: u_int,
    pub size: u_int,
    pub buffer: caddr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_bsdinfo {
    pub pbi_flags: u32,
    pub pbi_status: u32,
    pub pbi_xstatus: u32,
    pub pbi_pid: u32,
    pub pbi_ppid: u32,
    pub pbi_uid: uid_t,
    pub pbi_gid: gid_t,
    pub pbi_ruid: uid_t,
    pub pbi_rgid: gid_t,
    pub pbi_svuid: uid_t,
    pub pbi_svgid: gid_t,
    pub rfu_1: u32,
    pub pbi_comm: [::std::os::raw::c_char; 16usize],
    pub pbi_name: [::std::os::raw::c_char; 32usize],
    pub pbi_nfiles: u32,
    pub pbi_pgid: u32,
    pub pbi_pjobc: u32,
    pub e_tdev: u32,
    pub e_tpgid: u32,
    pub pbi_nice: i32,
    pub pbi_start_tvsec: u64,
    pub pbi_start_tvusec: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_bsdshortinfo {
    pub pbsi_pid: u32,
    pub pbsi_ppid: u32,
    pub pbsi_pgid: u32,
    pub pbsi_status: u32,
    pub pbsi_comm: [::std::os::raw::c_char; 16usize],
    pub pbsi_flags: u32,
    pub pbsi_uid: uid_t,
    pub pbsi_gid: gid_t,
    pub pbsi_ruid: uid_t,
    pub pbsi_rgid: gid_t,
    pub pbsi_svuid: uid_t,
    pub pbsi_svgid: gid_t,
    pub pbsi_rfu: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_taskinfo {
    pub pti_virtual_size: u64,
    pub pti_resident_size: u64,
    pub pti_total_user: u64,
    pub pti_total_system: u64,
    pub pti_threads_user: u64,
    pub pti_threads_system: u64,
    pub pti_policy: i32,
    pub pti_faults: i32,
    pub pti_pageins: i32,
    pub pti_cow_faults: i32,
    pub pti_messages_sent: i32,
    pub pti_messages_received: i32,
    pub pti_syscalls_mach: i32,
    pub pti_syscalls_unix: i32,
    pub pti_csw: i32,
    pub pti_threadnum: i32,
    pub pti_numrunning: i32,
    pub pti_priority: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_taskallinfo {
    pub pbsd: proc_bsdinfo,
    pub ptinfo: proc_taskinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_threadinfo {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regioninfo {
    pub pri_protection: u32,
    pub pri_max_protection: u32,
    pub pri_inheritance: u32,
    pub pri_flags: u32,
    pub pri_offset: u64,
    pub pri_behavior: u32,
    pub pri_user_wired_count: u32,
    pub pri_user_tag: u32,
    pub pri_pages_resident: u32,
    pub pri_pages_shared_now_private: u32,
    pub pri_pages_swapped_out: u32,
    pub pri_pages_dirtied: u32,
    pub pri_ref_count: u32,
    pub pri_shadow_depth: u32,
    pub pri_share_mode: u32,
    pub pri_private_pages_resident: u32,
    pub pri_shared_pages_resident: u32,
    pub pri_obj_id: u32,
    pub pri_depth: u32,
    pub pri_address: u64,
    pub pri_size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_workqueueinfo {
    pub pwq_nthreads: u32,
    pub pwq_runthreads: u32,
    pub pwq_blockedthreads: u32,
    pub pwq_state: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fileinfo {
    pub fi_openflags: u32,
    pub fi_status: u32,
    pub fi_offset: off_t,
    pub fi_type: i32,
    pub fi_guardflags: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct proc_exitreasonbasicinfo {
    pub beri_namespace: u32,
    pub beri_code: u64,
    pub beri_flags: u64,
    pub beri_reason_buf_size: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct proc_exitreasoninfo {
    pub eri_namespace: u32,
    pub eri_code: u64,
    pub eri_flags: u64,
    pub eri_reason_buf_size: u32,
    pub eri_kcd_buf: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vinfo_stat {
    pub vst_dev: u32,
    pub vst_mode: u16,
    pub vst_nlink: u16,
    pub vst_ino: u64,
    pub vst_uid: uid_t,
    pub vst_gid: gid_t,
    pub vst_atime: i64,
    pub vst_atimensec: i64,
    pub vst_mtime: i64,
    pub vst_mtimensec: i64,
    pub vst_ctime: i64,
    pub vst_ctimensec: i64,
    pub vst_birthtime: i64,
    pub vst_birthtimensec: i64,
    pub vst_size: off_t,
    pub vst_blocks: i64,
    pub vst_blksize: i32,
    pub vst_flags: u32,
    pub vst_gen: u32,
    pub vst_rdev: u32,
    pub vst_qspare: [i64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_info {
    pub vi_stat: vinfo_stat,
    pub vi_type: ::std::os::raw::c_int,
    pub vi_pad: ::std::os::raw::c_int,
    pub vi_fsid: fsid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_info_path {
    pub vip_vi: vnode_info,
    pub vip_path: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_fdinfo {
    pub pfi: proc_fileinfo,
    pub pvi: vnode_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_fdinfowithpath {
    pub pfi: proc_fileinfo,
    pub pvip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regionwithpathinfo {
    pub prp_prinfo: proc_regioninfo,
    pub prp_vip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regionpath {
    pub prpo_addr: u64,
    pub prpo_regionlength: u64,
    pub prpo_path: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_vnodepathinfo {
    pub pvi_cdir: vnode_info_path,
    pub pvi_rdir: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_threadwithpathinfo {
    pub pt: proc_threadinfo,
    pub pvip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in4in6_addr {
    pub i46a_pad32: [u_int32_t; 3usize],
    pub i46a_addr4: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_sockinfo {
    pub __bindgen_anon_1: in_sockinfo__bindgen_ty_1,
    pub __bindgen_anon_2: in_sockinfo__bindgen_ty_2,
    pub __bindgen_anon_3: in_sockinfo__bindgen_ty_3,
    pub __bindgen_anon_4: in_sockinfo__bindgen_ty_4,
    pub insi_fport: ::std::os::raw::c_int,
    pub insi_lport: ::std::os::raw::c_int,
    pub insi_gencnt: u64,
    pub insi_flags: u32,
    pub insi_flow: u32,
    pub insi_vflag: u8,
    pub insi_ip_ttl: u8,
    pub rfu_1: u32,
    pub insi_faddr: in_sockinfo__bindgen_ty_1,
    pub insi_laddr: in_sockinfo__bindgen_ty_2,
    pub insi_v4: in_sockinfo__bindgen_ty_3,
    pub insi_v6: in_sockinfo__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_sockinfo__bindgen_ty_1 {
    pub ina_46: in4in6_addr,
    pub ina_6: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_sockinfo__bindgen_ty_2 {
    pub ina_46: in4in6_addr,
    pub ina_6: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_sockinfo__bindgen_ty_3 {
    pub in4_tos: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_sockinfo__bindgen_ty_4 {
    pub in6_hlim: u8,
    pub in6_cksum: ::std::os::raw::c_int,
    pub in6_ifindex: u_short,
    pub in6_hops: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_sockinfo {
    pub tcpsi_ini: in_sockinfo,
    pub tcpsi_state: ::std::os::raw::c_int,
    pub tcpsi_timer: [::std::os::raw::c_int; 4usize],
    pub tcpsi_mss: ::std::os::raw::c_int,
    pub tcpsi_flags: u32,
    pub rfu_1: u32,
    pub tcpsi_tp: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct un_sockinfo {
    pub __bindgen_anon_1: un_sockinfo__bindgen_ty_1,
    pub __bindgen_anon_2: un_sockinfo__bindgen_ty_2,
    pub unsi_conn_so: u64,
    pub unsi_conn_pcb: u64,
    pub unsi_addr: un_sockinfo__bindgen_ty_1,
    pub unsi_caddr: un_sockinfo__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sockinfo__bindgen_ty_1 {
    pub ua_sun: sockaddr_un,
    pub ua_dummy: [::std::os::raw::c_char; 255usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sockinfo__bindgen_ty_2 {
    pub ua_sun: sockaddr_un,
    pub ua_dummy: [::std::os::raw::c_char; 255usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndrv_info {
    pub ndrvsi_if_family: u32,
    pub ndrvsi_if_unit: u32,
    pub ndrvsi_if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_event_info {
    pub kesi_vendor_code_filter: u32,
    pub kesi_class_filter: u32,
    pub kesi_subclass_filter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_ctl_info {
    pub kcsi_id: u32,
    pub kcsi_reg_unit: u32,
    pub kcsi_flags: u32,
    pub kcsi_recvbufsize: u32,
    pub kcsi_sendbufsize: u32,
    pub kcsi_unit: u32,
    pub kcsi_name: [::std::os::raw::c_char; 96usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsock_sockinfo {
    pub local_cid: u32,
    pub local_port: u32,
    pub remote_cid: u32,
    pub remote_port: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockbuf_info {
    pub sbi_cc: u32,
    pub sbi_hiwat: u32,
    pub sbi_mbcnt: u32,
    pub sbi_mbmax: u32,
    pub sbi_lowat: u32,
    pub sbi_flags: ::std::os::raw::c_short,
    pub sbi_timeo: ::std::os::raw::c_short,
}
pub const SOCKINFO_GENERIC: _bindgen_ty_36 = 0;
pub const SOCKINFO_IN: _bindgen_ty_36 = 1;
pub const SOCKINFO_TCP: _bindgen_ty_36 = 2;
pub const SOCKINFO_UN: _bindgen_ty_36 = 3;
pub const SOCKINFO_NDRV: _bindgen_ty_36 = 4;
pub const SOCKINFO_KERN_EVENT: _bindgen_ty_36 = 5;
pub const SOCKINFO_KERN_CTL: _bindgen_ty_36 = 6;
pub const SOCKINFO_VSOCK: _bindgen_ty_36 = 7;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_info {
    pub __bindgen_anon_1: socket_info__bindgen_ty_1,
    pub soi_stat: vinfo_stat,
    pub soi_so: u64,
    pub soi_pcb: u64,
    pub soi_type: ::std::os::raw::c_int,
    pub soi_protocol: ::std::os::raw::c_int,
    pub soi_family: ::std::os::raw::c_int,
    pub soi_options: ::std::os::raw::c_short,
    pub soi_linger: ::std::os::raw::c_short,
    pub soi_state: ::std::os::raw::c_short,
    pub soi_qlen: ::std::os::raw::c_short,
    pub soi_incqlen: ::std::os::raw::c_short,
    pub soi_qlimit: ::std::os::raw::c_short,
    pub soi_timeo: ::std::os::raw::c_short,
    pub soi_error: u_short,
    pub soi_oobmark: u32,
    pub soi_rcv: sockbuf_info,
    pub soi_snd: sockbuf_info,
    pub soi_kind: ::std::os::raw::c_int,
    pub rfu_1: u32,
    pub soi_proto: socket_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union socket_info__bindgen_ty_1 {
    pub pri_in: in_sockinfo,
    pub pri_tcp: tcp_sockinfo,
    pub pri_un: un_sockinfo,
    pub pri_ndrv: ndrv_info,
    pub pri_kern_event: kern_event_info,
    pub pri_kern_ctl: kern_ctl_info,
    pub pri_vsock: vsock_sockinfo,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_fdinfo {
    pub pfi: proc_fileinfo,
    pub psi: socket_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psem_info {
    pub psem_stat: vinfo_stat,
    pub psem_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psem_fdinfo {
    pub pfi: proc_fileinfo,
    pub pseminfo: psem_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshm_info {
    pub pshm_stat: vinfo_stat,
    pub pshm_mappaddr: u64,
    pub pshm_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshm_fdinfo {
    pub pfi: proc_fileinfo,
    pub pshminfo: pshm_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_info {
    pub pipe_stat: vinfo_stat,
    pub pipe_handle: u64,
    pub pipe_peerhandle: u64,
    pub pipe_status: ::std::os::raw::c_int,
    pub rfu_1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_fdinfo {
    pub pfi: proc_fileinfo,
    pub pipeinfo: pipe_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_info {
    pub kq_stat: vinfo_stat,
    pub kq_state: u32,
    pub rfu_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_dyninfo {
    pub kqdi_info: kqueue_info,
    pub kqdi_servicer: u64,
    pub kqdi_owner: u64,
    pub kqdi_sync_waiters: u32,
    pub kqdi_sync_waiter_qos: u8,
    pub kqdi_async_qos: u8,
    pub kqdi_request_state: u16,
    pub kqdi_events_qos: u8,
    pub kqdi_pri: u8,
    pub kqdi_pol: u8,
    pub kqdi_cpupercent: u8,
    pub _kqdi_reserved0: [u8; 4usize],
    pub _kqdi_reserved1: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_fdinfo {
    pub pfi: proc_fileinfo,
    pub kqueueinfo: kqueue_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct appletalk_info {
    pub atalk_stat: vinfo_stat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct appletalk_fdinfo {
    pub pfi: proc_fileinfo,
    pub appletalkinfo: appletalk_info,
}
pub type proc_info_udata_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fdinfo {
    pub proc_fd: i32,
    pub proc_fdtype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fileportinfo {
    pub proc_fileport: u32,
    pub proc_fdtype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_channel_info {
    pub chi_instance: uuid_t,
    pub chi_port: u32,
    pub chi_type: u32,
    pub chi_flags: u32,
    pub rfu_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_fdinfo {
    pub pfi: proc_fileinfo,
    pub channelinfo: proc_channel_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqfilehdr {
    pub dqh_magic: u_int32_t,
    pub dqh_version: u_int32_t,
    pub dqh_maxentries: u_int32_t,
    pub dqh_entrycnt: u_int32_t,
    pub dqh_flags: u_int32_t,
    pub dqh_chktime: u_int32_t,
    pub dqh_btime: u_int32_t,
    pub dqh_itime: u_int32_t,
    pub dqh_string: [::std::os::raw::c_char; 16usize],
    pub dqh_spare: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqblk {
    pub dqb_bhardlimit: u_int64_t,
    pub dqb_bsoftlimit: u_int64_t,
    pub dqb_curbytes: u_int64_t,
    pub dqb_ihardlimit: u_int32_t,
    pub dqb_isoftlimit: u_int32_t,
    pub dqb_curinodes: u_int32_t,
    pub dqb_btime: u_int32_t,
    pub dqb_itime: u_int32_t,
    pub dqb_id: u_int32_t,
    pub dqb_spare: [u_int32_t; 4usize],
}
extern "C" {
    pub fn quotactl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: caddr_t,
    ) -> ::std::os::raw::c_int;
}
pub type rbto_compare_nodes_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type rbto_compare_key_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree_ops_t {
    pub rbto_compare_nodes: rbto_compare_nodes_fn,
    pub rbto_compare_key: rbto_compare_key_fn,
    pub rbto_node_offset: usize,
    pub rbto_context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub opaque: [*mut ::std::os::raw::c_void; 3usize],
}
pub type rb_node_t = rb_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree {
    pub opaque: [*mut ::std::os::raw::c_void; 8usize],
}
pub type rb_tree_t = rb_tree;
extern "C" {
    pub fn rb_tree_init(arg1: *mut rb_tree_t, arg2: *const rb_tree_ops_t);
}
extern "C" {
    pub fn rb_tree_insert_node(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_geq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_leq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_remove_node(arg1: *mut rb_tree_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rb_tree_iterate(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_count(arg1: *mut rb_tree_t) -> usize;
}
extern "C" {
    pub fn usrctl(flags: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot_np(
        howto: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pstats {
    pub p_ru: rusage,
    pub p_cru: rusage,
    pub p_prof: pstats_uprof,
    pub ps_start: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pstats_uprof {
    pub pr_next: *mut pstats_uprof,
    pub pr_base: caddr_t,
    pub pr_size: u_int32_t,
    pub pr_off: u_int32_t,
    pub pr_scale: u_int32_t,
    pub pr_addr: u_int32_t,
    pub pr_ticks: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbuf {
    pub s_buf: *mut ::std::os::raw::c_char,
    pub s_unused: *mut ::std::os::raw::c_void,
    pub s_size: ::std::os::raw::c_int,
    pub s_len: ::std::os::raw::c_int,
    pub s_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeb {
    pub time: time_t,
    pub millitm: ::std::os::raw::c_ushort,
    pub timezone: ::std::os::raw::c_short,
    pub dstflag: ::std::os::raw::c_short,
}
extern "C" {
    pub fn ftime(arg1: *mut timeb) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct speedtab {
    pub sp_speed: ::std::os::raw::c_int,
    pub sp_code: ::std::os::raw::c_int,
}
pub type unp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _unpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xunpgen {
    pub xug_len: u_int32_t,
    pub xug_count: u_int,
    pub xug_gen: unp_gen_t,
    pub xug_sogen: so_gen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waitq_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user {}
pub const vtype_VNON: vtype = 0;
pub const vtype_VREG: vtype = 1;
pub const vtype_VDIR: vtype = 2;
pub const vtype_VBLK: vtype = 3;
pub const vtype_VCHR: vtype = 4;
pub const vtype_VLNK: vtype = 5;
pub const vtype_VSOCK: vtype = 6;
pub const vtype_VFIFO: vtype = 7;
pub const vtype_VBAD: vtype = 8;
pub const vtype_VSTR: vtype = 9;
pub const vtype_VCPLX: vtype = 10;
pub type vtype = ::std::os::raw::c_uint;
pub const vtagtype_VT_NON: vtagtype = 0;
pub const vtagtype_VT_UFS: vtagtype = 1;
pub const vtagtype_VT_NFS: vtagtype = 2;
pub const vtagtype_VT_MFS: vtagtype = 3;
pub const vtagtype_VT_MSDOSFS: vtagtype = 4;
pub const vtagtype_VT_LFS: vtagtype = 5;
pub const vtagtype_VT_LOFS: vtagtype = 6;
pub const vtagtype_VT_FDESC: vtagtype = 7;
pub const vtagtype_VT_PORTAL: vtagtype = 8;
pub const vtagtype_VT_NULL: vtagtype = 9;
pub const vtagtype_VT_UMAP: vtagtype = 10;
pub const vtagtype_VT_KERNFS: vtagtype = 11;
pub const vtagtype_VT_PROCFS: vtagtype = 12;
pub const vtagtype_VT_AFS: vtagtype = 13;
pub const vtagtype_VT_ISOFS: vtagtype = 14;
pub const vtagtype_VT_MOCKFS: vtagtype = 15;
pub const vtagtype_VT_HFS: vtagtype = 16;
pub const vtagtype_VT_ZFS: vtagtype = 17;
pub const vtagtype_VT_DEVFS: vtagtype = 18;
pub const vtagtype_VT_WEBDAV: vtagtype = 19;
pub const vtagtype_VT_UDF: vtagtype = 20;
pub const vtagtype_VT_AFP: vtagtype = 21;
pub const vtagtype_VT_CDDA: vtagtype = 22;
pub const vtagtype_VT_CIFS: vtagtype = 23;
pub const vtagtype_VT_OTHER: vtagtype = 24;
pub const vtagtype_VT_APFS: vtagtype = 25;
pub const vtagtype_VT_LOCKERFS: vtagtype = 26;
pub const vtagtype_VT_BINDFS: vtagtype = 27;
pub type vtagtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_compression_stats {
    pub uncompressed_size: u64,
    pub compressed_size: u64,
    pub buffer_size_compression_dist: [[u32; 7usize]; 10usize],
    pub block_compressed_size_dist: [u32; 16usize],
}
pub type io_compression_stats_t = *mut io_compression_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iocs_store_buffer_entry {
    pub path_name: [::std::os::raw::c_char; 128usize],
    pub iocs: io_compression_stats,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qelem {
    pub q_forw: *mut qelem,
    pub q_back: *mut qelem,
    pub q_data: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn map_fd(
        fd: ::std::os::raw::c_int,
        offset: vm_offset_t,
        addr: *mut vm_offset_t,
        find_space: boolean_t,
        numbytes: vm_size_t,
    ) -> kern_return_t;
}
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_sel_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_objc_class_ro_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_uint;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header {
    pub magic: u32,
    pub cputype: i32,
    pub cpusubtype: i32,
    pub filetype: u32,
    pub ncmds: u32,
    pub sizeofcmds: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header_64 {
    pub magic: u32,
    pub cputype: i32,
    pub cpusubtype: i32,
    pub filetype: u32,
    pub ncmds: u32,
    pub sizeofcmds: u32,
    pub flags: u32,
    pub reserved: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct load_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lc_str {
    pub offset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segment_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: u32,
    pub vmsize: u32,
    pub fileoff: u32,
    pub filesize: u32,
    pub maxprot: i32,
    pub initprot: i32,
    pub nsects: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segment_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: u64,
    pub vmsize: u64,
    pub fileoff: u64,
    pub filesize: u64,
    pub maxprot: i32,
    pub initprot: i32,
    pub nsects: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct section {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: u32,
    pub size: u32,
    pub offset: u32,
    pub align: u32,
    pub reloff: u32,
    pub nreloc: u32,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct section_64 {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: u64,
    pub size: u64,
    pub offset: u32,
    pub align: u32,
    pub reloff: u32,
    pub nreloc: u32,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmlib {
    pub name: lc_str,
    pub minor_version: u32,
    pub header_addr: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmlib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub fvmlib: fvmlib,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylib {
    pub name: lc_str,
    pub timestamp: u32,
    pub current_version: u32,
    pub compatibility_version: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub dylib: dylib,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_framework_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub umbrella: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_client_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub client: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_umbrella_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub sub_umbrella: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_library_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub sub_library: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prebound_dylib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
    pub nmodules: u32,
    pub linked_modules: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylinker_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routines_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub init_address: u32,
    pub init_module: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
    pub reserved4: u32,
    pub reserved5: u32,
    pub reserved6: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routines_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub init_address: u64,
    pub init_module: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
    pub reserved6: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symtab_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub symoff: u32,
    pub nsyms: u32,
    pub stroff: u32,
    pub strsize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dysymtab_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub iundefsym: u32,
    pub nundefsym: u32,
    pub tocoff: u32,
    pub ntoc: u32,
    pub modtaboff: u32,
    pub nmodtab: u32,
    pub extrefsymoff: u32,
    pub nextrefsyms: u32,
    pub indirectsymoff: u32,
    pub nindirectsyms: u32,
    pub extreloff: u32,
    pub nextrel: u32,
    pub locreloff: u32,
    pub nlocrel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_table_of_contents {
    pub symbol_index: u32,
    pub module_index: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_module {
    pub module_name: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub irefsym: u32,
    pub nrefsym: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextrel: u32,
    pub nextrel: u32,
    pub iinit_iterm: u32,
    pub ninit_nterm: u32,
    pub objc_module_info_addr: u32,
    pub objc_module_info_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_module_64 {
    pub module_name: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub irefsym: u32,
    pub nrefsym: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextrel: u32,
    pub nextrel: u32,
    pub iinit_iterm: u32,
    pub ninit_nterm: u32,
    pub objc_module_info_size: u32,
    pub objc_module_info_addr: u64,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct dylib_reference {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dylib_reference {
    #[inline]
    pub fn isym(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_isym(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isym: u32, flags: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let isym: u32 = unsafe { ::std::mem::transmute(isym) };
            isym as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twolevel_hints_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub offset: u32,
    pub nhints: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct twolevel_hint {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl twolevel_hint {
    #[inline]
    pub fn isub_image(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_isub_image(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn itoc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_itoc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isub_image: u32, itoc: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let isub_image: u32 = unsafe { ::std::mem::transmute(isub_image) };
            isub_image as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let itoc: u32 = unsafe { ::std::mem::transmute(itoc) };
            itoc as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prebind_cksum_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cksum: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uuid_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rpath_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub path: lc_str,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linkedit_data_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub dataoff: u32,
    pub datasize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encryption_info_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cryptoff: u32,
    pub cryptsize: u32,
    pub cryptid: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encryption_info_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cryptoff: u32,
    pub cryptsize: u32,
    pub cryptid: u32,
    pub pad: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct version_min_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub version: u32,
    pub sdk: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct build_version_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub platform: u32,
    pub minos: u32,
    pub sdk: u32,
    pub ntools: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct build_tool_version {
    pub tool: u32,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_info_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub rebase_off: u32,
    pub rebase_size: u32,
    pub bind_off: u32,
    pub bind_size: u32,
    pub weak_bind_off: u32,
    pub weak_bind_size: u32,
    pub lazy_bind_off: u32,
    pub lazy_bind_size: u32,
    pub export_off: u32,
    pub export_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linker_option_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symseg_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub offset: u32,
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ident_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmfile_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
    pub header_addr: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry_point_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub entryoff: u64,
    pub stacksize: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct source_version_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub version: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data_in_code_entry {
    pub offset: u32,
    pub length: u16,
    pub kind: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlv_descriptor {
    pub thunk: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut tlv_descriptor) -> *mut ::std::os::raw::c_void,
    >,
    pub key: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct note_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub data_owner: [::std::os::raw::c_char; 16usize],
    pub offset: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fileset_entry_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub vmaddr: u64,
    pub fileoff: u64,
    pub entry_id: lc_str,
    pub reserved: u32,
}
extern "C" {
    pub fn _dyld_image_count() -> u32;
}
extern "C" {
    pub fn _dyld_get_image_header(image_index: u32) -> *const mach_header;
}
extern "C" {
    pub fn _dyld_get_image_vmaddr_slide(image_index: u32) -> isize;
}
extern "C" {
    pub fn _dyld_get_image_name(image_index: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dyld_register_func_for_add_image(
        func: ::std::option::Option<
            unsafe extern "C" fn(mh: *const mach_header, vmaddr_slide: isize),
        >,
    );
}
extern "C" {
    pub fn _dyld_register_func_for_remove_image(
        func: ::std::option::Option<
            unsafe extern "C" fn(mh: *const mach_header, vmaddr_slide: isize),
        >,
    );
}
extern "C" {
    pub fn NSVersionOfRunTimeLibrary(libraryName: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn NSVersionOfLinkTimeLibrary(libraryName: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn _NSGetExecutablePath(
        buf: *mut ::std::os::raw::c_char,
        bufsize: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tlv_atexit(
        termFunc: ::std::option::Option<unsafe extern "C" fn(objAddr: *mut ::std::os::raw::c_void)>,
        objAddr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _tlv_bootstrap();
}
extern "C" {
    pub fn _dyld_shared_cache_contains_path(path: *const ::std::os::raw::c_char) -> bool;
}
pub const DYLD_BOOL_FALSE: DYLD_BOOL = 0;
pub const DYLD_BOOL_TRUE: DYLD_BOOL = 1;
pub type DYLD_BOOL = ::std::os::raw::c_uint;
pub const NSObjectFileImageReturnCode_NSObjectFileImageFailure: NSObjectFileImageReturnCode = 0;
pub const NSObjectFileImageReturnCode_NSObjectFileImageSuccess: NSObjectFileImageReturnCode = 1;
pub const NSObjectFileImageReturnCode_NSObjectFileImageInappropriateFile:
    NSObjectFileImageReturnCode = 2;
pub const NSObjectFileImageReturnCode_NSObjectFileImageArch: NSObjectFileImageReturnCode = 3;
pub const NSObjectFileImageReturnCode_NSObjectFileImageFormat: NSObjectFileImageReturnCode = 4;
pub const NSObjectFileImageReturnCode_NSObjectFileImageAccess: NSObjectFileImageReturnCode = 5;
pub type NSObjectFileImageReturnCode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NSObjectFileImage {
    _unused: [u8; 0],
}
pub type NSObjectFileImage = *mut __NSObjectFileImage;
extern "C" {
    pub fn NSCreateObjectFileImageFromFile(
        pathName: *const ::std::os::raw::c_char,
        objectFileImage: *mut NSObjectFileImage,
    ) -> NSObjectFileImageReturnCode;
}
extern "C" {
    pub fn NSCreateObjectFileImageFromMemory(
        address: *const ::std::os::raw::c_void,
        size: usize,
        objectFileImage: *mut NSObjectFileImage,
    ) -> NSObjectFileImageReturnCode;
}
extern "C" {
    pub fn NSDestroyObjectFileImage(objectFileImage: NSObjectFileImage) -> bool;
}
extern "C" {
    pub fn NSSymbolDefinitionCountInObjectFileImage(objectFileImage: NSObjectFileImage) -> u32;
}
extern "C" {
    pub fn NSSymbolDefinitionNameInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        ordinal: u32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSSymbolReferenceCountInObjectFileImage(objectFileImage: NSObjectFileImage) -> u32;
}
extern "C" {
    pub fn NSSymbolReferenceNameInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        ordinal: u32,
        tentative_definition: *mut bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSIsSymbolDefinedInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        symbolName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NSGetSectionDataInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        segmentName: *const ::std::os::raw::c_char,
        sectionName: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NSModule {
    _unused: [u8; 0],
}
pub type NSModule = *mut __NSModule;
extern "C" {
    pub fn NSNameOfModule(m: NSModule) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSLibraryNameForModule(m: NSModule) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSLinkModule(
        objectFileImage: NSObjectFileImage,
        moduleName: *const ::std::os::raw::c_char,
        options: u32,
    ) -> NSModule;
}
extern "C" {
    pub fn NSUnLinkModule(module: NSModule, options: u32) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NSSymbol {
    _unused: [u8; 0],
}
pub type NSSymbol = *mut __NSSymbol;
extern "C" {
    pub fn NSIsSymbolNameDefined(symbolName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn NSIsSymbolNameDefinedWithHint(
        symbolName: *const ::std::os::raw::c_char,
        libraryNameHint: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NSIsSymbolNameDefinedInImage(
        image: *const mach_header,
        symbolName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NSLookupAndBindSymbol(symbolName: *const ::std::os::raw::c_char) -> NSSymbol;
}
extern "C" {
    pub fn NSLookupAndBindSymbolWithHint(
        symbolName: *const ::std::os::raw::c_char,
        libraryNameHint: *const ::std::os::raw::c_char,
    ) -> NSSymbol;
}
extern "C" {
    pub fn NSLookupSymbolInModule(
        module: NSModule,
        symbolName: *const ::std::os::raw::c_char,
    ) -> NSSymbol;
}
extern "C" {
    pub fn NSLookupSymbolInImage(
        image: *const mach_header,
        symbolName: *const ::std::os::raw::c_char,
        options: u32,
    ) -> NSSymbol;
}
extern "C" {
    pub fn NSNameOfSymbol(symbol: NSSymbol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSAddressOfSymbol(symbol: NSSymbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSModuleForSymbol(symbol: NSSymbol) -> NSModule;
}
pub const NSLinkEditErrors_NSLinkEditFileAccessError: NSLinkEditErrors = 0;
pub const NSLinkEditErrors_NSLinkEditFileFormatError: NSLinkEditErrors = 1;
pub const NSLinkEditErrors_NSLinkEditMachResourceError: NSLinkEditErrors = 2;
pub const NSLinkEditErrors_NSLinkEditUnixResourceError: NSLinkEditErrors = 3;
pub const NSLinkEditErrors_NSLinkEditOtherError: NSLinkEditErrors = 4;
pub const NSLinkEditErrors_NSLinkEditWarningError: NSLinkEditErrors = 5;
pub const NSLinkEditErrors_NSLinkEditMultiplyDefinedError: NSLinkEditErrors = 6;
pub const NSLinkEditErrors_NSLinkEditUndefinedError: NSLinkEditErrors = 7;
pub type NSLinkEditErrors = ::std::os::raw::c_uint;
pub const NSOtherErrorNumbers_NSOtherErrorRelocation: NSOtherErrorNumbers = 0;
pub const NSOtherErrorNumbers_NSOtherErrorLazyBind: NSOtherErrorNumbers = 1;
pub const NSOtherErrorNumbers_NSOtherErrorIndrLoop: NSOtherErrorNumbers = 2;
pub const NSOtherErrorNumbers_NSOtherErrorLazyInit: NSOtherErrorNumbers = 3;
pub const NSOtherErrorNumbers_NSOtherErrorInvalidArgs: NSOtherErrorNumbers = 4;
pub type NSOtherErrorNumbers = ::std::os::raw::c_uint;
extern "C" {
    pub fn NSLinkEditError(
        c: *mut NSLinkEditErrors,
        errorNumber: *mut ::std::os::raw::c_int,
        fileName: *mut *const ::std::os::raw::c_char,
        errorString: *mut *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSLinkEditErrorHandlers {
    pub undefined:
        ::std::option::Option<unsafe extern "C" fn(symbolName: *const ::std::os::raw::c_char)>,
    pub multiple: ::std::option::Option<
        unsafe extern "C" fn(s: NSSymbol, oldModule: NSModule, newModule: NSModule) -> NSModule,
    >,
    pub linkEdit: ::std::option::Option<
        unsafe extern "C" fn(
            errorClass: NSLinkEditErrors,
            errorNumber: ::std::os::raw::c_int,
            fileName: *const ::std::os::raw::c_char,
            errorString: *const ::std::os::raw::c_char,
        ),
    >,
}
extern "C" {
    pub fn NSInstallLinkEditErrorHandlers(handlers: *const NSLinkEditErrorHandlers);
}
extern "C" {
    pub fn NSAddLibrary(pathName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn NSAddLibraryWithSearching(pathName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn NSAddImage(
        image_name: *const ::std::os::raw::c_char,
        options: u32,
    ) -> *const mach_header;
}
extern "C" {
    pub fn _dyld_present() -> bool;
}
extern "C" {
    pub fn _dyld_launched_prebound() -> bool;
}
extern "C" {
    pub fn _dyld_all_twolevel_modules_prebound() -> bool;
}
extern "C" {
    pub fn _dyld_bind_fully_image_containing_address(
        address: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn _dyld_image_containing_address(address: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn _dyld_lookup_and_bind(
        symbol_name: *const ::std::os::raw::c_char,
        address: *mut *mut ::std::os::raw::c_void,
        module: *mut NSModule,
    );
}
extern "C" {
    pub fn _dyld_lookup_and_bind_with_hint(
        symbol_name: *const ::std::os::raw::c_char,
        library_name_hint: *const ::std::os::raw::c_char,
        address: *mut *mut ::std::os::raw::c_void,
        module: *mut NSModule,
    );
}
extern "C" {
    pub fn _dyld_lookup_and_bind_fully(
        symbol_name: *const ::std::os::raw::c_char,
        address: *mut *mut ::std::os::raw::c_void,
        module: *mut NSModule,
    );
}
extern "C" {
    pub fn _dyld_get_image_header_containing_address(
        address: *const ::std::os::raw::c_void,
    ) -> *const mach_header;
}
pub type compact_unwind_encoding_t = u32;
pub const UNWIND_IS_NOT_FUNCTION_START: _bindgen_ty_37 = 2147483648;
pub const UNWIND_HAS_LSDA: _bindgen_ty_37 = 1073741824;
pub const UNWIND_PERSONALITY_MASK: _bindgen_ty_37 = 805306368;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub const UNWIND_X86_MODE_MASK: _bindgen_ty_38 = 251658240;
pub const UNWIND_X86_MODE_EBP_FRAME: _bindgen_ty_38 = 16777216;
pub const UNWIND_X86_MODE_STACK_IMMD: _bindgen_ty_38 = 33554432;
pub const UNWIND_X86_MODE_STACK_IND: _bindgen_ty_38 = 50331648;
pub const UNWIND_X86_MODE_DWARF: _bindgen_ty_38 = 67108864;
pub const UNWIND_X86_EBP_FRAME_REGISTERS: _bindgen_ty_38 = 32767;
pub const UNWIND_X86_EBP_FRAME_OFFSET: _bindgen_ty_38 = 16711680;
pub const UNWIND_X86_FRAMELESS_STACK_SIZE: _bindgen_ty_38 = 16711680;
pub const UNWIND_X86_FRAMELESS_STACK_ADJUST: _bindgen_ty_38 = 57344;
pub const UNWIND_X86_FRAMELESS_STACK_REG_COUNT: _bindgen_ty_38 = 7168;
pub const UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION: _bindgen_ty_38 = 1023;
pub const UNWIND_X86_DWARF_SECTION_OFFSET: _bindgen_ty_38 = 16777215;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
pub const UNWIND_X86_REG_NONE: _bindgen_ty_39 = 0;
pub const UNWIND_X86_REG_EBX: _bindgen_ty_39 = 1;
pub const UNWIND_X86_REG_ECX: _bindgen_ty_39 = 2;
pub const UNWIND_X86_REG_EDX: _bindgen_ty_39 = 3;
pub const UNWIND_X86_REG_EDI: _bindgen_ty_39 = 4;
pub const UNWIND_X86_REG_ESI: _bindgen_ty_39 = 5;
pub const UNWIND_X86_REG_EBP: _bindgen_ty_39 = 6;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const UNWIND_X86_64_MODE_MASK: _bindgen_ty_40 = 251658240;
pub const UNWIND_X86_64_MODE_RBP_FRAME: _bindgen_ty_40 = 16777216;
pub const UNWIND_X86_64_MODE_STACK_IMMD: _bindgen_ty_40 = 33554432;
pub const UNWIND_X86_64_MODE_STACK_IND: _bindgen_ty_40 = 50331648;
pub const UNWIND_X86_64_MODE_DWARF: _bindgen_ty_40 = 67108864;
pub const UNWIND_X86_64_RBP_FRAME_REGISTERS: _bindgen_ty_40 = 32767;
pub const UNWIND_X86_64_RBP_FRAME_OFFSET: _bindgen_ty_40 = 16711680;
pub const UNWIND_X86_64_FRAMELESS_STACK_SIZE: _bindgen_ty_40 = 16711680;
pub const UNWIND_X86_64_FRAMELESS_STACK_ADJUST: _bindgen_ty_40 = 57344;
pub const UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT: _bindgen_ty_40 = 7168;
pub const UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION: _bindgen_ty_40 = 1023;
pub const UNWIND_X86_64_DWARF_SECTION_OFFSET: _bindgen_ty_40 = 16777215;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const UNWIND_X86_64_REG_NONE: _bindgen_ty_41 = 0;
pub const UNWIND_X86_64_REG_RBX: _bindgen_ty_41 = 1;
pub const UNWIND_X86_64_REG_R12: _bindgen_ty_41 = 2;
pub const UNWIND_X86_64_REG_R13: _bindgen_ty_41 = 3;
pub const UNWIND_X86_64_REG_R14: _bindgen_ty_41 = 4;
pub const UNWIND_X86_64_REG_R15: _bindgen_ty_41 = 5;
pub const UNWIND_X86_64_REG_RBP: _bindgen_ty_41 = 6;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const UNWIND_ARM64_MODE_MASK: _bindgen_ty_42 = 251658240;
pub const UNWIND_ARM64_MODE_FRAMELESS: _bindgen_ty_42 = 33554432;
pub const UNWIND_ARM64_MODE_DWARF: _bindgen_ty_42 = 50331648;
pub const UNWIND_ARM64_MODE_FRAME: _bindgen_ty_42 = 67108864;
pub const UNWIND_ARM64_FRAME_X19_X20_PAIR: _bindgen_ty_42 = 1;
pub const UNWIND_ARM64_FRAME_X21_X22_PAIR: _bindgen_ty_42 = 2;
pub const UNWIND_ARM64_FRAME_X23_X24_PAIR: _bindgen_ty_42 = 4;
pub const UNWIND_ARM64_FRAME_X25_X26_PAIR: _bindgen_ty_42 = 8;
pub const UNWIND_ARM64_FRAME_X27_X28_PAIR: _bindgen_ty_42 = 16;
pub const UNWIND_ARM64_FRAME_D8_D9_PAIR: _bindgen_ty_42 = 256;
pub const UNWIND_ARM64_FRAME_D10_D11_PAIR: _bindgen_ty_42 = 512;
pub const UNWIND_ARM64_FRAME_D12_D13_PAIR: _bindgen_ty_42 = 1024;
pub const UNWIND_ARM64_FRAME_D14_D15_PAIR: _bindgen_ty_42 = 2048;
pub const UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK: _bindgen_ty_42 = 16773120;
pub const UNWIND_ARM64_DWARF_SECTION_OFFSET: _bindgen_ty_42 = 16777215;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const UNWIND_ARM_MODE_MASK: _bindgen_ty_43 = 251658240;
pub const UNWIND_ARM_MODE_FRAME: _bindgen_ty_43 = 16777216;
pub const UNWIND_ARM_MODE_FRAME_D: _bindgen_ty_43 = 33554432;
pub const UNWIND_ARM_MODE_DWARF: _bindgen_ty_43 = 67108864;
pub const UNWIND_ARM_FRAME_STACK_ADJUST_MASK: _bindgen_ty_43 = 12582912;
pub const UNWIND_ARM_FRAME_FIRST_PUSH_R4: _bindgen_ty_43 = 1;
pub const UNWIND_ARM_FRAME_FIRST_PUSH_R5: _bindgen_ty_43 = 2;
pub const UNWIND_ARM_FRAME_FIRST_PUSH_R6: _bindgen_ty_43 = 4;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R8: _bindgen_ty_43 = 8;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R9: _bindgen_ty_43 = 16;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R10: _bindgen_ty_43 = 32;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R11: _bindgen_ty_43 = 64;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R12: _bindgen_ty_43 = 128;
pub const UNWIND_ARM_FRAME_D_REG_COUNT_MASK: _bindgen_ty_43 = 1792;
pub const UNWIND_ARM_DWARF_SECTION_OFFSET: _bindgen_ty_43 = 16777215;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_section_header {
    pub version: u32,
    pub commonEncodingsArraySectionOffset: u32,
    pub commonEncodingsArrayCount: u32,
    pub personalityArraySectionOffset: u32,
    pub personalityArrayCount: u32,
    pub indexSectionOffset: u32,
    pub indexCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_section_header_index_entry {
    pub functionOffset: u32,
    pub secondLevelPagesSectionOffset: u32,
    pub lsdaIndexArraySectionOffset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_section_header_lsda_index_entry {
    pub functionOffset: u32,
    pub lsdaOffset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_regular_second_level_entry {
    pub functionOffset: u32,
    pub encoding: compact_unwind_encoding_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_regular_second_level_page_header {
    pub kind: u32,
    pub entryPageOffset: u16,
    pub entryCount: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_compressed_second_level_page_header {
    pub kind: u32,
    pub entryPageOffset: u16,
    pub entryCount: u16,
    pub encodingsPageOffset: u16,
    pub encodingsCount: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXArchInfo {
    pub name: *const ::std::os::raw::c_char,
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub byteorder: NXByteOrder,
    pub description: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn NXGetAllArchInfos() -> *const NXArchInfo;
}
extern "C" {
    pub fn NXGetLocalArchInfo() -> *const NXArchInfo;
}
extern "C" {
    pub fn NXGetArchInfoFromName(name: *const ::std::os::raw::c_char) -> *const NXArchInfo;
}
extern "C" {
    pub fn NXGetArchInfoFromCpuType(
        cputype: cpu_type_t,
        cpusubtype: cpu_subtype_t,
    ) -> *const NXArchInfo;
}
extern "C" {
    pub fn NXFreeArchInfo(x: *const NXArchInfo);
}
extern "C" {
    pub fn NXFindBestFatArch(
        cputype: cpu_type_t,
        cpusubtype: cpu_subtype_t,
        fat_archs: *mut fat_arch,
        nfat_archs: u32,
    ) -> *mut fat_arch;
}
extern "C" {
    pub fn NXFindBestFatArch_64(
        cputype: cpu_type_t,
        cpusubtype: cpu_subtype_t,
        fat_archs64: *mut fat_arch_64,
        nfat_archs: u32,
    ) -> *mut fat_arch_64;
}
extern "C" {
    pub fn NXCombineCpuSubtypes(
        cputype: cpu_type_t,
        cpusubtype1: cpu_subtype_t,
        cpusubtype2: cpu_subtype_t,
    ) -> cpu_subtype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fat_header {
    pub magic: u32,
    pub nfat_arch: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fat_arch {
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub offset: u32,
    pub size: u32,
    pub align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fat_arch_64 {
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub offset: u64,
    pub size: u64,
    pub align: u32,
    pub reserved: u32,
}
extern "C" {
    pub fn getsectdata(
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsectdatafromFramework(
        FrameworkName: *const ::std::os::raw::c_char,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_end() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_etext() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_edata() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getsectbyname(
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
    ) -> *const section_64;
}
extern "C" {
    pub fn getsectiondata(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut u8;
}
extern "C" {
    pub fn getsegbyname(segname: *const ::std::os::raw::c_char) -> *const segment_command_64;
}
extern "C" {
    pub fn getsegmentdata(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut u8;
}
extern "C" {
    pub fn getsectdatafromheader(
        mhp: *const mach_header,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsectbynamefromheader(
        mhp: *const mach_header,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
    ) -> *const section;
}
extern "C" {
    pub fn getsectbynamefromheaderwithswap(
        mhp: *mut mach_header,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        fSwap: ::std::os::raw::c_int,
    ) -> *const section;
}
extern "C" {
    pub fn getsectdatafromheader_64(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsectbynamefromheader_64(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
    ) -> *const section_64;
}
extern "C" {
    pub fn getsectbynamefromheaderwithswap_64(
        mhp: *mut mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        fSwap: ::std::os::raw::c_int,
    ) -> *const section;
}
extern "C" {
    pub static _mh_execute_header: mach_header_64;
}
extern "C" {
    pub static _mh_bundle_header: mach_header_64;
}
extern "C" {
    pub static _mh_dylib_header: mach_header_64;
}
extern "C" {
    pub static _mh_dylinker_header: mach_header_64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nlist {
    pub n_un: nlist__bindgen_ty_1,
    pub n_type: u8,
    pub n_sect: u8,
    pub n_desc: i16,
    pub n_value: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nlist__bindgen_ty_1 {
    pub n_strx: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nlist_64 {
    pub n_un: nlist_64__bindgen_ty_1,
    pub n_type: u8,
    pub n_sect: u8,
    pub n_desc: u16,
    pub n_value: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nlist_64__bindgen_ty_1 {
    pub n_strx: u32,
}
extern "C" {
    pub fn nlist(
        filename: *const ::std::os::raw::c_char,
        list: *mut nlist,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ranlib {
    pub ran_un: ranlib__bindgen_ty_1,
    pub ran_off: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ranlib__bindgen_ty_1 {
    pub ran_strx: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ranlib_64 {
    pub ran_un: ranlib_64__bindgen_ty_1,
    pub ran_off: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ranlib_64__bindgen_ty_1 {
    pub ran_strx: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct relocation_info {
    pub r_address: i32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl relocation_info {
    #[inline]
    pub fn r_symbolnum(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_r_symbolnum(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn r_pcrel(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_pcrel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn r_length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_r_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn r_extern(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_extern(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn r_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_r_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        r_symbolnum: u32,
        r_pcrel: u32,
        r_length: u32,
        r_extern: u32,
        r_type: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let r_symbolnum: u32 = unsafe { ::std::mem::transmute(r_symbolnum) };
            r_symbolnum as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let r_pcrel: u32 = unsafe { ::std::mem::transmute(r_pcrel) };
            r_pcrel as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let r_length: u32 = unsafe { ::std::mem::transmute(r_length) };
            r_length as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let r_extern: u32 = unsafe { ::std::mem::transmute(r_extern) };
            r_extern as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let r_type: u32 = unsafe { ::std::mem::transmute(r_type) };
            r_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scattered_relocation_info {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub r_value: i32,
}
impl scattered_relocation_info {
    #[inline]
    pub fn r_address(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_r_address(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn r_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_r_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn r_length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_r_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn r_pcrel(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_pcrel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn r_scattered(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_scattered(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        r_address: u32,
        r_type: u32,
        r_length: u32,
        r_pcrel: u32,
        r_scattered: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let r_address: u32 = unsafe { ::std::mem::transmute(r_address) };
            r_address as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let r_type: u32 = unsafe { ::std::mem::transmute(r_type) };
            r_type as u64
        });
        __bindgen_bitfield_unit.set(28usize, 2u8, {
            let r_length: u32 = unsafe { ::std::mem::transmute(r_length) };
            r_length as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let r_pcrel: u32 = unsafe { ::std::mem::transmute(r_pcrel) };
            r_pcrel as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let r_scattered: u32 = unsafe { ::std::mem::transmute(r_scattered) };
            r_scattered as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const reloc_type_generic_GENERIC_RELOC_VANILLA: reloc_type_generic = 0;
pub const reloc_type_generic_GENERIC_RELOC_PAIR: reloc_type_generic = 1;
pub const reloc_type_generic_GENERIC_RELOC_SECTDIFF: reloc_type_generic = 2;
pub const reloc_type_generic_GENERIC_RELOC_PB_LA_PTR: reloc_type_generic = 3;
pub const reloc_type_generic_GENERIC_RELOC_LOCAL_SECTDIFF: reloc_type_generic = 4;
pub const reloc_type_generic_GENERIC_RELOC_TLV: reloc_type_generic = 5;
pub type reloc_type_generic = ::std::os::raw::c_uint;
extern "C" {
    pub fn swap_fat_header(fat_header: *mut fat_header, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_fat_arch(fat_archs: *mut fat_arch, nfat_arch: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_fat_arch_64(
        fat_archs64: *mut fat_arch_64,
        nfat_arch: u32,
        target_byte_order: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_mach_header(mh: *mut mach_header, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_mach_header_64(mh: *mut mach_header_64, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_load_command(lc: *mut load_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_segment_command(sg: *mut segment_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_segment_command_64(sg: *mut segment_command_64, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_section(s: *mut section, nsects: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_section_64(s: *mut section_64, nsects: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_symtab_command(st: *mut symtab_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_dysymtab_command(dyst: *mut dysymtab_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_symseg_command(ss: *mut symseg_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_fvmlib_command(fl: *mut fvmlib_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_dylib_command(dl: *mut dylib_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_sub_framework_command(
        sub: *mut sub_framework_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_sub_umbrella_command(usub: *mut sub_umbrella_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_sub_library_command(lsub: *mut sub_library_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_sub_client_command(csub: *mut sub_client_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_prebound_dylib_command(
        pbdylib: *mut prebound_dylib_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylinker_command(dyld: *mut dylinker_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_fvmfile_command(ff: *mut fvmfile_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_thread_command(ut: *mut thread_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_ident_command(ident: *mut ident_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_routines_command(r_cmd: *mut routines_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_routines_command_64(r_cmd: *mut routines_command_64, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_twolevel_hints_command(
        hints_cmd: *mut twolevel_hints_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_prebind_cksum_command(
        cksum_cmd: *mut prebind_cksum_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_uuid_command(uuid_cmd: *mut uuid_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_linkedit_data_command(ld: *mut linkedit_data_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_version_min_command(
        ver_cmd: *mut version_min_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_rpath_command(rpath_cmd: *mut rpath_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_encryption_command(ec: *mut encryption_info_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_encryption_command_64(
        ec: *mut encryption_info_command_64,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_linker_option_command(lo: *mut linker_option_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_dyld_info_command(ed: *mut dyld_info_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_entry_point_command(ep: *mut entry_point_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_source_version_command(
        sv: *mut source_version_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_note_command(nc: *mut note_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_build_version_command(bv: *mut build_version_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_build_tool_version(
        bt: *mut build_tool_version,
        ntools: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_twolevel_hint(hints: *mut twolevel_hint, nhints: u32, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_fileset_entry_command(lc: *mut fileset_entry_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_nlist(symbols: *mut nlist, nsymbols: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_nlist_64(symbols: *mut nlist_64, nsymbols: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_ranlib(ranlibs: *mut ranlib, nranlibs: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_ranlib_64(ranlibs: *mut ranlib_64, nranlibs: u64, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_relocation_info(
        relocs: *mut relocation_info,
        nrelocs: u32,
        target_byte_order: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_indirect_symbols(
        indirect_symbols: *mut u32,
        nindirect_symbols: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylib_reference(
        refs: *mut dylib_reference,
        nrefs: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylib_module(mods: *mut dylib_module, nmods: u32, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_dylib_module_64(
        mods: *mut dylib_module_64,
        nmods: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylib_table_of_contents(
        tocs: *mut dylib_table_of_contents,
        ntocs: u32,
        target_byte_sex: NXByteOrder,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Class(pub id);
impl std::ops::Deref for Class {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Class {}
impl Class {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Class), alloc) })
    }
}
impl IClass for Class {}
pub trait IClass: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_object {
    pub isa: Class,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = ::std::os::raw::c_schar;
pub type objc_zone_t = *mut _malloc_zone_t;
extern "C" {
    pub fn sel_getName(sel: objc::runtime::Sel) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_registerName(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sel_isMapped(sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn sel_getUid(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
pub type objc_objectptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn objc_retainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedPointer(obj: id) -> objc_objectptr_t;
}
pub type NSInteger = ::std::os::raw::c_long;
pub type NSUInteger = ::std::os::raw::c_ulong;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSString(pub id);
impl std::ops::Deref for NSString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSString {}
impl NSString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSString), alloc) })
    }
}
impl INSString for NSString {}
pub trait INSString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMethodSignature(pub id);
impl std::ops::Deref for NSMethodSignature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMethodSignature {}
impl NSMethodSignature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMethodSignature), alloc) })
    }
}
impl INSMethodSignature for NSMethodSignature {}
pub trait INSMethodSignature: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInvocation(pub id);
impl std::ops::Deref for NSInvocation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocation {}
impl NSInvocation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInvocation), alloc) })
    }
}
impl INSInvocation for NSInvocation {}
pub trait INSInvocation: Sized + std::ops::Deref {}
pub trait PNSObject: Sized + std::ops::Deref {
    unsafe fn isEqual_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqual: object)
    }
    unsafe fn class(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, class)
    }
    unsafe fn self_(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, self)
    }
    unsafe fn performSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performSelector: aSelector)
    }
    unsafe fn performSelector_withObject_(&self, aSelector: objc::runtime::Sel, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object)
    }
    unsafe fn performSelector_withObject_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object1: id,
        object2: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object1 withObject : object2)
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxy)
    }
    unsafe fn isKindOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isKindOfClass: aClass)
    }
    unsafe fn isMemberOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMemberOfClass: aClass)
    }
    unsafe fn conformsToProtocol_(&self, aProtocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, conformsToProtocol: aProtocol)
    }
    unsafe fn respondsToSelector_(&self, aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, respondsToSelector: aSelector)
    }
    unsafe fn retain(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retain)
    }
    unsafe fn release(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, release)
    }
    unsafe fn autorelease(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autorelease)
    }
    unsafe fn retainCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainCount)
    }
    unsafe fn zone(&self) -> *mut _NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zone)
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hash)
    }
    unsafe fn superclass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, superclass)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSZone {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSObject(pub id);
impl std::ops::Deref for NSObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSObject {}
impl NSObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSObject), alloc) })
    }
}
impl PNSObject for NSObject {}
impl INSObject for NSObject {}
pub trait INSObject: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn copy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copy)
    }
    unsafe fn mutableCopy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopy)
    }
    unsafe fn methodForSelector_(&self, aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodForSelector: aSelector)
    }
    unsafe fn doesNotRecognizeSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesNotRecognizeSelector: aSelector)
    }
    unsafe fn forwardingTargetForSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardingTargetForSelector: aSelector)
    }
    unsafe fn forwardInvocation_(&self, anInvocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardInvocation: anInvocation)
    }
    unsafe fn methodSignatureForSelector_(&self, aSelector: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignatureForSelector: aSelector)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn load()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), load)
    }
    unsafe fn initialize()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), initialize)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), new)
    }
    unsafe fn allocWithZone_(zone: *mut _NSZone) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), allocWithZone: zone)
    }
    unsafe fn alloc() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), alloc)
    }
    unsafe fn copyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), copyWithZone: zone)
    }
    unsafe fn mutableCopyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), mutableCopyWithZone: zone)
    }
    unsafe fn instancesRespondToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instancesRespondToSelector: aSelector)
    }
    unsafe fn conformsToProtocol_(protocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), conformsToProtocol: protocol)
    }
    unsafe fn instanceMethodForSelector_(aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instanceMethodForSelector: aSelector)
    }
    unsafe fn instanceMethodSignatureForSelector_(
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSObject),
            instanceMethodSignatureForSelector: aSelector
        )
    }
    unsafe fn isSubclassOfClass_(aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), isSubclassOfClass: aClass)
    }
    unsafe fn resolveClassMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveClassMethod: sel)
    }
    unsafe fn resolveInstanceMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveInstanceMethod: sel)
    }
    unsafe fn hash() -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), hash)
    }
    unsafe fn superclass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), superclass)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), class)
    }
    unsafe fn description() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), description)
    }
    unsafe fn debugDescription() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method {
    _unused: [u8; 0],
}
pub type Method = *mut objc_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_ivar {
    _unused: [u8; 0],
}
pub type Ivar = *mut objc_ivar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_category {
    _unused: [u8; 0],
}
pub type Category = *mut objc_category;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property {
    _unused: [u8; 0],
}
pub type objc_property_t = *mut objc_property;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_description {
    pub name: objc::runtime::Sel,
    pub types: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property_attribute_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn object_copy(obj: id, size: usize) -> id;
}
extern "C" {
    pub fn object_dispose(obj: id) -> id;
}
extern "C" {
    pub fn object_getClass(obj: id) -> Class;
}
extern "C" {
    pub fn object_setClass(obj: id, cls: Class) -> Class;
}
extern "C" {
    pub fn object_isClass(obj: id) -> BOOL;
}
extern "C" {
    pub fn object_getIvar(obj: id, ivar: Ivar) -> id;
}
extern "C" {
    pub fn object_setIvar(obj: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setIvarWithStrongDefault(obj: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_setInstanceVariableWithStrongDefault(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_getInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        outValue: *mut *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn objc_getClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_getMetaClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_lookUpClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn objc_getRequiredClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn objc_getClassList(
        buffer: Class,
        bufferCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_copyClassList(outCount: *mut ::std::os::raw::c_uint) -> Class;
}
extern "C" {
    pub fn objc_enumerateClasses(
        image: *const ::std::os::raw::c_void,
        namePrefix: *const ::std::os::raw::c_char,
        conformingTo: Protocol,
        subclassing: Class,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn class_getName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_isMetaClass(cls: Class) -> BOOL;
}
extern "C" {
    pub fn class_getSuperclass(cls: Class) -> Class;
}
extern "C" {
    pub fn class_setSuperclass(cls: Class, newSuper: Class) -> Class;
}
extern "C" {
    pub fn class_getVersion(cls: Class) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_setVersion(cls: Class, version: ::std::os::raw::c_int);
}
extern "C" {
    pub fn class_getInstanceSize(cls: Class) -> usize;
}
extern "C" {
    pub fn class_getInstanceVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_getClassVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_copyIvarList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Ivar;
}
extern "C" {
    pub fn class_getInstanceMethod(cls: Class, name: objc::runtime::Sel) -> Method;
}
extern "C" {
    pub fn class_getClassMethod(cls: Class, name: objc::runtime::Sel) -> Method;
}
extern "C" {
    pub fn class_getMethodImplementation(cls: Class, name: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_getMethodImplementation_stret(cls: Class, name: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_respondsToSelector(cls: Class, sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn class_copyMethodList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Method;
}
extern "C" {
    pub fn class_conformsToProtocol(cls: Class, protocol: Protocol) -> BOOL;
}
extern "C" {
    pub fn class_copyProtocolList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut Protocol;
}
extern "C" {
    pub fn class_getProperty(cls: Class, name: *const ::std::os::raw::c_char) -> objc_property_t;
}
extern "C" {
    pub fn class_copyPropertyList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn class_getIvarLayout(cls: Class) -> *const u8;
}
extern "C" {
    pub fn class_getWeakIvarLayout(cls: Class) -> *const u8;
}
extern "C" {
    pub fn class_addMethod(
        cls: Class,
        name: objc::runtime::Sel,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceMethod(
        cls: Class,
        name: objc::runtime::Sel,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> IMP;
}
extern "C" {
    pub fn class_addIvar(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        size: usize,
        alignment: u8,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_addProtocol(cls: Class, protocol: Protocol) -> BOOL;
}
extern "C" {
    pub fn class_addProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn class_setIvarLayout(cls: Class, layout: *const u8);
}
extern "C" {
    pub fn class_setWeakIvarLayout(cls: Class, layout: *const u8);
}
extern "C" {
    pub fn objc_getFutureClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn class_createInstance(cls: Class, extraBytes: usize) -> id;
}
extern "C" {
    pub fn objc_constructInstance(cls: Class, bytes: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_destructInstance(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_allocateClassPair(
        superclass: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_registerClassPair(cls: Class);
}
extern "C" {
    pub fn objc_duplicateClass(
        original: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_disposeClassPair(cls: Class);
}
extern "C" {
    pub fn method_getName(m: Method) -> objc::runtime::Sel;
}
extern "C" {
    pub fn method_getImplementation(m: Method) -> IMP;
}
extern "C" {
    pub fn method_getTypeEncoding(m: Method) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_getNumberOfArguments(m: Method) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn method_copyReturnType(m: Method) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_copyArgumentType(
        m: Method,
        index: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_getReturnType(m: Method, dst: *mut ::std::os::raw::c_char, dst_len: usize);
}
extern "C" {
    pub fn method_getArgumentType(
        m: Method,
        index: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_char,
        dst_len: usize,
    );
}
extern "C" {
    pub fn method_getDescription(m: Method) -> *mut objc_method_description;
}
extern "C" {
    pub fn method_setImplementation(m: Method, imp: IMP) -> IMP;
}
extern "C" {
    pub fn method_exchangeImplementations(m1: Method, m2: Method);
}
extern "C" {
    pub fn ivar_getName(v: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getTypeEncoding(v: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getOffset(v: Ivar) -> isize;
}
extern "C" {
    pub fn property_getName(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_getAttributes(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_copyAttributeList(
        property: objc_property_t,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_attribute_t;
}
extern "C" {
    pub fn property_copyAttributeValue(
        property: objc_property_t,
        attributeName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_getProtocol(name: *const ::std::os::raw::c_char) -> Protocol;
}
extern "C" {
    pub fn objc_copyProtocolList(outCount: *mut ::std::os::raw::c_uint) -> *mut Protocol;
}
extern "C" {
    pub fn protocol_conformsToProtocol(proto: Protocol, other: Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_isEqual(proto: Protocol, other: Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_getName(proto: Protocol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn protocol_getMethodDescription(
        proto: Protocol,
        aSel: objc::runtime::Sel,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    ) -> objc_method_description;
}
extern "C" {
    pub fn protocol_copyMethodDescriptionList(
        proto: Protocol,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_method_description;
}
extern "C" {
    pub fn protocol_getProperty(
        proto: Protocol,
        name: *const ::std::os::raw::c_char,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList2(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyProtocolList(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut Protocol;
}
extern "C" {
    pub fn objc_allocateProtocol(name: *const ::std::os::raw::c_char) -> Protocol;
}
extern "C" {
    pub fn objc_registerProtocol(proto: Protocol);
}
extern "C" {
    pub fn protocol_addMethodDescription(
        proto: Protocol,
        name: objc::runtime::Sel,
        types: *const ::std::os::raw::c_char,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    );
}
extern "C" {
    pub fn protocol_addProtocol(proto: Protocol, addition: Protocol);
}
extern "C" {
    pub fn protocol_addProperty(
        proto: Protocol,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    );
}
extern "C" {
    pub fn objc_copyImageNames(
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_getImageName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_copyClassNamesForImage(
        image: *const ::std::os::raw::c_char,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_isEqual(lhs: objc::runtime::Sel, rhs: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn objc_enumerationMutation(obj: id);
}
extern "C" {
    pub fn objc_setEnumerationMutationHandler(
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: id)>,
    );
}
extern "C" {
    pub fn objc_setForwardHandler(
        fwd: *mut ::std::os::raw::c_void,
        fwd_stret: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn imp_implementationWithBlock(block: id) -> IMP;
}
extern "C" {
    pub fn imp_getBlock(anImp: IMP) -> id;
}
extern "C" {
    pub fn imp_removeBlock(anImp: IMP) -> BOOL;
}
extern "C" {
    pub fn objc_loadWeak(location: *mut id) -> id;
}
extern "C" {
    pub fn objc_storeWeak(location: *mut id, obj: id) -> id;
}
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_ASSIGN: objc_AssociationPolicy = 0;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_RETAIN_NONATOMIC: objc_AssociationPolicy = 1;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_COPY_NONATOMIC: objc_AssociationPolicy = 3;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_RETAIN: objc_AssociationPolicy = 769;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_COPY: objc_AssociationPolicy = 771;
pub type objc_AssociationPolicy = usize;
extern "C" {
    pub fn objc_setAssociatedObject(
        object: id,
        key: *const ::std::os::raw::c_void,
        value: id,
        policy: objc_AssociationPolicy,
    );
}
extern "C" {
    pub fn objc_getAssociatedObject(object: id, key: *const ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_removeAssociatedObjects(object: id);
}
pub type objc_hook_getImageName = ::std::option::Option<
    unsafe extern "C" fn(cls: Class, outImageName: *mut *const ::std::os::raw::c_char) -> BOOL,
>;
extern "C" {
    pub fn objc_setHook_getImageName(
        newValue: objc_hook_getImageName,
        outOldValue: *mut objc_hook_getImageName,
    );
}
pub type objc_hook_getClass = ::std::option::Option<
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char, outClass: Class) -> BOOL,
>;
extern "C" {
    pub fn objc_setHook_getClass(
        newValue: objc_hook_getClass,
        outOldValue: *mut objc_hook_getClass,
    );
}
pub type objc_func_loadImage =
    ::std::option::Option<unsafe extern "C" fn(header: *const mach_header)>;
extern "C" {
    pub fn objc_addLoadImageFunc(func: objc_func_loadImage);
}
pub type objc_hook_lazyClassNamer =
    ::std::option::Option<unsafe extern "C" fn(cls: Class) -> *const ::std::os::raw::c_char>;
extern "C" {
    pub fn objc_setHook_lazyClassNamer(
        newValue: objc_hook_lazyClassNamer,
        oldOutValue: *mut objc_hook_lazyClassNamer,
    );
}
pub type _objc_swiftMetadataInitializer = ::std::option::Option<
    unsafe extern "C" fn(cls: Class, arg: *mut ::std::os::raw::c_void) -> Class,
>;
extern "C" {
    pub fn _objc_realizeClassFromSwift(
        cls: Class,
        previously: *mut ::std::os::raw::c_void,
    ) -> Class;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_list {
    _unused: [u8; 0],
}
extern "C" {
    pub fn class_lookupMethod(cls: Class, sel: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_respondsToMethod(cls: Class, sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn _objc_flush_caches(cls: Class);
}
extern "C" {
    pub fn object_copyFromZone(anObject: id, nBytes: usize, z: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn class_createInstanceFromZone(
        arg1: Class,
        idxIvars: usize,
        z: *mut ::std::os::raw::c_void,
    ) -> id;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_super {
    pub receiver: id,
    pub super_class: Class,
}
extern "C" {
    pub fn objc_msgSend();
}
extern "C" {
    pub fn objc_msgSendSuper();
}
extern "C" {
    pub fn objc_msgSend_stret();
}
extern "C" {
    pub fn objc_msgSendSuper_stret();
}
extern "C" {
    pub fn objc_msgSend_fpret();
}
extern "C" {
    pub fn objc_msgSend_fp2ret();
}
extern "C" {
    pub fn method_invoke();
}
extern "C" {
    pub fn method_invoke_stret();
}
extern "C" {
    pub fn _objc_msgForward();
}
extern "C" {
    pub fn _objc_msgForward_stret();
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Protocol(pub id);
impl std::ops::Deref for Protocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Protocol {}
impl Protocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Protocol), alloc) })
    }
}
impl INSObject for Protocol {}
impl PNSObject for Protocol {}
impl From<Protocol> for NSObject {
    fn from(child: Protocol) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for Protocol {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<Protocol, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(Protocol)) };
        if is_kind_of {
            Ok(Protocol(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to Protocol")
        }
    }
}
impl IProtocol for Protocol {}
pub trait IProtocol: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXHashTablePrototype {
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            data: *const ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub isEqual: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            data1: *const ::std::os::raw::c_void,
            data2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub style: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXHashTable {
    pub prototype: *const NXHashTablePrototype,
    pub count: ::std::os::raw::c_uint,
    pub nbBuckets: ::std::os::raw::c_uint,
    pub buckets: *mut ::std::os::raw::c_void,
    pub info: *const ::std::os::raw::c_void,
}
extern "C" {
    pub fn NXCreateHashTableFromZone(
        prototype: NXHashTablePrototype,
        capacity: ::std::os::raw::c_uint,
        info: *const ::std::os::raw::c_void,
        z: *mut ::std::os::raw::c_void,
    ) -> *mut NXHashTable;
}
extern "C" {
    pub fn NXCreateHashTable(
        prototype: NXHashTablePrototype,
        capacity: ::std::os::raw::c_uint,
        info: *const ::std::os::raw::c_void,
    ) -> *mut NXHashTable;
}
extern "C" {
    pub fn NXFreeHashTable(table: *mut NXHashTable);
}
extern "C" {
    pub fn NXEmptyHashTable(table: *mut NXHashTable);
}
extern "C" {
    pub fn NXResetHashTable(table: *mut NXHashTable);
}
extern "C" {
    pub fn NXCompareHashTables(table1: *mut NXHashTable, table2: *mut NXHashTable) -> BOOL;
}
extern "C" {
    pub fn NXCopyHashTable(table: *mut NXHashTable) -> *mut NXHashTable;
}
extern "C" {
    pub fn NXCountHashTable(table: *mut NXHashTable) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn NXHashMember(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXHashGet(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NXHashInsert(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NXHashInsertIfAbsent(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NXHashRemove(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXHashState {
    pub i: ::std::os::raw::c_int,
    pub j: ::std::os::raw::c_int,
}
extern "C" {
    pub fn NXInitHashState(table: *mut NXHashTable) -> NXHashState;
}
extern "C" {
    pub fn NXNextHashState(
        table: *mut NXHashTable,
        state: *mut NXHashState,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXPtrHash(
        info: *const ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn NXStrHash(
        info: *const ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn NXPtrIsEqual(
        info: *const ::std::os::raw::c_void,
        data1: *const ::std::os::raw::c_void,
        data2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXStrIsEqual(
        info: *const ::std::os::raw::c_void,
        data1: *const ::std::os::raw::c_void,
        data2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXNoEffectFree(info: *const ::std::os::raw::c_void, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn NXReallyFree(info: *const ::std::os::raw::c_void, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub static NXPtrPrototype: NXHashTablePrototype;
}
extern "C" {
    pub static NXStrPrototype: NXHashTablePrototype;
}
extern "C" {
    pub static NXPtrStructKeyPrototype: NXHashTablePrototype;
}
extern "C" {
    pub static NXStrStructKeyPrototype: NXHashTablePrototype;
}
pub const OBJC_RATIO_COLLECTION: _bindgen_ty_44 = 0;
pub const OBJC_GENERATIONAL_COLLECTION: _bindgen_ty_44 = 1;
pub const OBJC_FULL_COLLECTION: _bindgen_ty_44 = 2;
pub const OBJC_EXHAUSTIVE_COLLECTION: _bindgen_ty_44 = 3;
pub const OBJC_COLLECT_IF_NEEDED: _bindgen_ty_44 = 8;
pub const OBJC_WAIT_UNTIL_DONE: _bindgen_ty_44 = 16;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const OBJC_CLEAR_RESIDENT_STACK: _bindgen_ty_45 = 1;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub type objc_exception_preprocessor =
    ::std::option::Option<unsafe extern "C" fn(exception: id) -> id>;
pub type objc_exception_matcher = ::std::option::Option<
    unsafe extern "C" fn(catch_type: Class, exception: id) -> ::std::os::raw::c_int,
>;
pub type objc_uncaught_exception_handler =
    ::std::option::Option<unsafe extern "C" fn(exception: id)>;
pub type objc_exception_handler =
    ::std::option::Option<unsafe extern "C" fn(unused: id, context: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn objc_exception_throw(exception: id) -> !;
}
extern "C" {
    pub fn objc_exception_rethrow() -> !;
}
extern "C" {
    pub fn objc_begin_catch(exc_buf: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_end_catch();
}
extern "C" {
    pub fn objc_terminate() -> !;
}
extern "C" {
    pub fn objc_setExceptionPreprocessor(
        fn_: objc_exception_preprocessor,
    ) -> objc_exception_preprocessor;
}
extern "C" {
    pub fn objc_setExceptionMatcher(fn_: objc_exception_matcher) -> objc_exception_matcher;
}
extern "C" {
    pub fn objc_setUncaughtExceptionHandler(
        fn_: objc_uncaught_exception_handler,
    ) -> objc_uncaught_exception_handler;
}
extern "C" {
    pub fn objc_addExceptionHandler(
        fn_: objc_exception_handler,
        context: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn objc_removeExceptionHandler(token: usize);
}
extern "C" {
    pub fn objc_sync_enter(obj: id) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_sync_exit(obj: id) -> ::std::os::raw::c_int;
}
pub const OBJC_SYNC_SUCCESS: _bindgen_ty_46 = 0;
pub const OBJC_SYNC_NOT_OWNING_THREAD_ERROR: _bindgen_ty_46 = -1;
pub type _bindgen_ty_46 = ::std::os::raw::c_int;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_object(pub id);
impl std::ops::Deref for OS_object {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_object {}
impl OS_object {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_object), alloc) })
    }
}
impl INSObject for OS_object {}
impl PNSObject for OS_object {}
impl From<OS_object> for NSObject {
    fn from(child: OS_object) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_object {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_object, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_object)) };
        if is_kind_of {
            Ok(OS_object(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_object")
        }
    }
}
impl IOS_object for OS_object {}
pub trait IOS_object: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
extern "C" {
    pub fn os_retain(object: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup(pub id);
impl std::ops::Deref for OS_os_workgroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup {}
impl OS_os_workgroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup), alloc) })
    }
}
impl IOS_object for OS_os_workgroup {}
impl From<OS_os_workgroup> for OS_object {
    fn from(child: OS_os_workgroup) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl INSObject for OS_os_workgroup {}
impl PNSObject for OS_os_workgroup {}
impl From<OS_os_workgroup> for NSObject {
    fn from(child: OS_os_workgroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl IOS_os_workgroup for OS_os_workgroup {}
pub trait IOS_os_workgroup: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_t = OS_os_workgroup;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
extern "C" {
    pub fn os_workgroup_copy_port(
        wg: OS_os_workgroup,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: OS_os_workgroup,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
extern "C" {
    pub fn os_workgroup_join(
        wg: OS_os_workgroup,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_leave(wg: OS_os_workgroup, token: os_workgroup_join_token_t);
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: OS_os_workgroup,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: OS_os_workgroup,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_workgroup_cancel(wg: OS_os_workgroup);
}
extern "C" {
    pub fn os_workgroup_testcancel(wg: OS_os_workgroup) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t = *mut os_workgroup_max_parallel_threads_attr_s;
extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: OS_os_workgroup,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_interval: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_interval(pub id);
impl std::ops::Deref for OS_os_workgroup_interval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_interval {}
impl OS_os_workgroup_interval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_interval), alloc) })
    }
}
impl POS_os_workgroup_interval for OS_os_workgroup_interval {}
impl IOS_os_workgroup for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_interval) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_object for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_object {
    fn from(child: OS_os_workgroup_interval) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl INSObject for OS_os_workgroup_interval {}
impl PNSObject for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for NSObject {
    fn from(child: OS_os_workgroup_interval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_os_workgroup_interval for OS_os_workgroup_interval {}
pub trait IOS_os_workgroup_interval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_interval_t = OS_os_workgroup;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t = *mut os_workgroup_interval_data_opaque_s;
extern "C" {
    pub fn os_workgroup_interval_start(
        wg: OS_os_workgroup,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_update(
        wg: OS_os_workgroup,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: OS_os_workgroup,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_parallel: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_parallel(pub id);
impl std::ops::Deref for OS_os_workgroup_parallel {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_parallel {}
impl OS_os_workgroup_parallel {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_parallel), alloc) })
    }
}
impl POS_os_workgroup_parallel for OS_os_workgroup_parallel {}
impl IOS_os_workgroup for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_parallel) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_object for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_object {
    fn from(child: OS_os_workgroup_parallel) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl INSObject for OS_os_workgroup_parallel {}
impl PNSObject for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for NSObject {
    fn from(child: OS_os_workgroup_parallel) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_os_workgroup_parallel for OS_os_workgroup_parallel {}
pub trait IOS_os_workgroup_parallel: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_parallel_t = OS_os_workgroup;
extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: _bindgen_ty_47 = 18446744073709551614;
pub type _bindgen_ty_47 = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
extern "C" {
    pub fn dispatch_walltime(when: *const timespec, delta: i64) -> dispatch_time_t;
}
pub trait POS_dispatch_object: Sized + std::ops::Deref {}
pub type dispatch_object_t = NSObject;
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub use self::qos_class_t as dispatch_qos_class_t;
extern "C" {
    pub fn dispatch_retain(object: NSObject);
}
extern "C" {
    pub fn dispatch_release(object: NSObject);
}
extern "C" {
    pub fn dispatch_get_context(object: NSObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_set_context(object: NSObject, context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_set_finalizer_f(object: NSObject, finalizer: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_activate(object: NSObject);
}
extern "C" {
    pub fn dispatch_suspend(object: NSObject);
}
extern "C" {
    pub fn dispatch_resume(object: NSObject);
}
extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dispatch_wait(object: *mut ::std::os::raw::c_void, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
extern "C" {
    pub fn dispatch_debug(object: NSObject, message: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dispatch_debugv(
        object: NSObject,
        message: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
pub trait POS_dispatch_queue: Sized + std::ops::Deref {}
pub type dispatch_queue_t = NSObject;
pub trait POS_dispatch_queue_global: Sized + std::ops::Deref {}
pub type dispatch_queue_global_t = NSObject;
pub trait POS_dispatch_queue_serial: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_t = NSObject;
pub trait POS_dispatch_queue_main: Sized + std::ops::Deref {}
pub type dispatch_queue_main_t = NSObject;
pub trait POS_dispatch_queue_concurrent: Sized + std::ops::Deref {}
pub type dispatch_queue_concurrent_t = NSObject;
extern "C" {
    pub fn dispatch_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_apply(iterations: usize, queue: NSObject, block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, iteration: usize),
        >,
    );
}
extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}
pub trait POS_dispatch_queue_attr: Sized + std::ops::Deref {}
pub type dispatch_queue_attr_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(attr: NSObject) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT:
    dispatch_autorelease_frequency_t = 0;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:
    dispatch_autorelease_frequency_t = 1;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER:
    dispatch_autorelease_frequency_t = 2;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_queue_create_with_target$V2"]
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
        target: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_get_label(queue: NSObject) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: NSObject,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
extern "C" {
    pub fn dispatch_set_target_queue(object: NSObject, queue: NSObject);
}
extern "C" {
    pub fn dispatch_main() -> !;
}
extern "C" {
    pub fn dispatch_after(when: dispatch_time_t, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_get_specific(key: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue$V2"]
    pub fn dispatch_assert_queue(queue: NSObject);
}
extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: NSObject);
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue_not$V2"]
    pub fn dispatch_assert_queue_not(queue: NSObject);
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER: dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED: dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT: dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS: dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS: dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS: dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub trait POS_dispatch_source: Sized + std::ops::Deref {}
pub type dispatch_source_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: NSObject,
    ) -> dispatch_source_t;
}
extern "C" {
    pub fn dispatch_source_set_event_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_event_handler_f(source: NSObject, handler: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(source: NSObject, handler: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_source_cancel(source: NSObject);
}
extern "C" {
    pub fn dispatch_source_testcancel(source: NSObject) -> isize;
}
extern "C" {
    pub fn dispatch_source_get_handle(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_mask(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_data(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_merge_data(source: NSObject, value: usize);
}
extern "C" {
    pub fn dispatch_source_set_timer(
        source: NSObject,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
pub trait POS_dispatch_group: Sized + std::ops::Deref {}
pub type dispatch_group_t = NSObject;
extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
extern "C" {
    pub fn dispatch_group_async(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_group_async_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_wait(group: NSObject, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_group_notify(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_group_notify_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_enter(group: NSObject);
}
extern "C" {
    pub fn dispatch_group_leave(group: NSObject);
}
pub trait POS_dispatch_semaphore: Sized + std::ops::Deref {}
pub type dispatch_semaphore_t = NSObject;
extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
extern "C" {
    pub fn dispatch_semaphore_wait(dsema: NSObject, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_semaphore_signal(dsema: NSObject) -> isize;
}
pub type dispatch_once_t = isize;
extern "C" {
    pub fn dispatch_once(predicate: *mut dispatch_once_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub trait POS_dispatch_data: Sized + std::ops::Deref {}
pub type dispatch_data_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_data_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: NSObject,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_get_size(data: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_data_create_map(
        data: NSObject,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_concat(data1: NSObject, data2: NSObject) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_subrange(
        data: NSObject,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_data_apply(data: NSObject, applier: dispatch_data_applier_t) -> bool;
}
extern "C" {
    pub fn dispatch_data_copy_region(
        data: NSObject,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: NSObject,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub trait POS_dispatch_io: Sized + std::ops::Deref {}
pub type dispatch_io_t = NSObject;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: NSObject,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_io_read(
        channel: NSObject,
        offset: off_t,
        length: usize,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
extern "C" {
    pub fn dispatch_io_write(
        channel: NSObject,
        offset: off_t,
        data: NSObject,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_close(channel: NSObject, flags: dispatch_io_close_flags_t);
}
extern "C" {
    pub fn dispatch_io_barrier(channel: NSObject, barrier: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_io_get_descriptor(channel: NSObject) -> dispatch_fd_t;
}
extern "C" {
    pub fn dispatch_io_set_high_water(channel: NSObject, high_water: usize);
}
extern "C" {
    pub fn dispatch_io_set_low_water(channel: NSObject, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_set_interval(
        channel: NSObject,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub trait POS_dispatch_workloop: Sized + std::ops::Deref {}
pub type dispatch_workloop_t = NSObject;
extern "C" {
    pub fn dispatch_workloop_create(label: *const ::std::os::raw::c_char) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    );
}
extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(workloop: NSObject, workgroup: OS_os_workgroup);
}
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSArray(pub id);
impl std::ops::Deref for NSArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArray {}
impl NSArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSArray), alloc) })
    }
}
impl INSArray for NSArray {}
pub trait INSArray: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedString(pub id);
impl std::ops::Deref for NSAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedString {}
impl NSAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedString), alloc) })
    }
}
impl INSAttributedString for NSAttributedString {}
pub trait INSAttributedString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNull(pub id);
impl std::ops::Deref for NSNull {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNull {}
impl NSNull {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNull), alloc) })
    }
}
impl INSNull for NSNull {}
pub trait INSNull: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCharacterSet(pub id);
impl std::ops::Deref for NSCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCharacterSet {}
impl NSCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCharacterSet), alloc) })
    }
}
impl INSCharacterSet for NSCharacterSet {}
pub trait INSCharacterSet: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSData(pub id);
impl std::ops::Deref for NSData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSData {}
impl NSData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSData), alloc) })
    }
}
impl INSData for NSData {}
pub trait INSData: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDate(pub id);
impl std::ops::Deref for NSDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDate {}
impl NSDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDate), alloc) })
    }
}
impl INSDate for NSDate {}
pub trait INSDate: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTimeZone(pub id);
impl std::ops::Deref for NSTimeZone {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimeZone {}
impl NSTimeZone {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTimeZone), alloc) })
    }
}
impl INSTimeZone for NSTimeZone {}
pub trait INSTimeZone: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDictionary(pub id);
impl std::ops::Deref for NSDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDictionary {}
impl NSDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDictionary), alloc) })
    }
}
impl INSDictionary for NSDictionary {}
pub trait INSDictionary: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSError(pub id);
impl std::ops::Deref for NSError {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSError {}
impl NSError {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSError), alloc) })
    }
}
impl INSError for NSError {}
pub trait INSError: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLocale(pub id);
impl std::ops::Deref for NSLocale {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLocale {}
impl NSLocale {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLocale), alloc) })
    }
}
impl INSLocale for NSLocale {}
pub trait INSLocale: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNumber(pub id);
impl std::ops::Deref for NSNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumber {}
impl NSNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNumber), alloc) })
    }
}
impl INSNumber for NSNumber {}
pub trait INSNumber: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSet(pub id);
impl std::ops::Deref for NSSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSet {}
impl NSSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSet), alloc) })
    }
}
impl INSSet for NSSet {}
pub trait INSSet: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURL(pub id);
impl std::ops::Deref for NSURL {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURL {}
impl NSURL {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURL), alloc) })
    }
}
impl INSURL for NSURL {}
pub trait INSURL: Sized + std::ops::Deref {}
extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult_kCFCompareLessThan: CFComparisonResult = -1;
pub const CFComparisonResult_kCFCompareEqualTo: CFComparisonResult = 0;
pub const CFComparisonResult_kCFCompareGreaterThan: CFComparisonResult = 1;
pub type CFComparisonResult = CFIndex;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, info: *mut ::std::os::raw::c_void),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}
extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFBagRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFBagReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFBagCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFBagEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFBagHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
extern "C" {
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}
extern "C" {
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}
pub type CFBagApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBag {
    _unused: [u8; 0],
}
pub type CFBagRef = *const __CFBag;
pub type CFMutableBagRef = *mut __CFBag;
extern "C" {
    pub fn CFBagGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theBag: CFBagRef,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
}
extern "C" {
    pub fn CFBagGetCountOfValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValue(
        theBag: CFBagRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBagGetValueIfPresent(
        theBag: CFBagRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValues(theBag: CFBagRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagApplyFunction(
        theBag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBagAddValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagSetValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: CFAllocatorRef,
            ptr: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(allocator: CFAllocatorRef, ptr: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            ptr1: *const ::std::os::raw::c_void,
            ptr2: *const ::std::os::raw::c_void,
            context: *mut ::std::os::raw::c_void,
        ) -> CFComparisonResult,
    >,
}
extern "C" {
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}
pub type CFBinaryHeapApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(val: *const ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBinaryHeap {
    _unused: [u8; 0],
}
pub type CFBinaryHeapRef = *mut __CFBinaryHeap;
extern "C" {
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBinaryHeapCallBacks,
        compareContext: *const CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapGetCountOfValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapContainsValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}
extern "C" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
pub type CFBit = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBitVector {
    _unused: [u8; 0],
}
pub type CFBitVectorRef = *const __CFBitVector;
pub type CFMutableBitVectorRef = *mut __CFBitVector;
extern "C" {
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        numBits: CFIndex,
    ) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}
extern "C" {
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}
extern "C" {
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut UInt8);
}
extern "C" {
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}
extern "C" {
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
pub const __CFByteOrder_CFByteOrderUnknown: __CFByteOrder = 0;
pub const __CFByteOrder_CFByteOrderLittleEndian: __CFByteOrder = 1;
pub const __CFByteOrder_CFByteOrderBigEndian: __CFByteOrder = 2;
pub type __CFByteOrder = ::std::os::raw::c_uint;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat32 {
    pub v: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat64 {
    pub v: u64,
}
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDrop:
    CFNotificationSuspensionBehavior = 1;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorCoalesce:
    CFNotificationSuspensionBehavior = 2;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorHold:
    CFNotificationSuspensionBehavior = 3;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDeliverImmediately:
    CFNotificationSuspensionBehavior = 4;
pub type CFNotificationSuspensionBehavior = CFIndex;
extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: _bindgen_ty_48 = 1;
pub const kCFNotificationPostToAllSessions: _bindgen_ty_48 = 2;
pub type _bindgen_ty_48 = CFOptionFlags;
extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionUnknown: CFLocaleLanguageDirection =
    0;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionLeftToRight:
    CFLocaleLanguageDirection = 1;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionRightToLeft:
    CFLocaleLanguageDirection = 2;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionTopToBottom:
    CFLocaleLanguageDirection = 3;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionBottomToTop:
    CFLocaleLanguageDirection = 4;
pub type CFLocaleLanguageDirection = CFIndex;
extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
}
extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) -> CFDateRef;
}
extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
pub const CFGregorianUnitFlags_kCFGregorianUnitsYears: CFGregorianUnitFlags = 1;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMonths: CFGregorianUnitFlags = 2;
pub const CFGregorianUnitFlags_kCFGregorianUnitsDays: CFGregorianUnitFlags = 4;
pub const CFGregorianUnitFlags_kCFGregorianUnitsHours: CFGregorianUnitFlags = 8;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMinutes: CFGregorianUnitFlags = 16;
pub const CFGregorianUnitFlags_kCFGregorianUnitsSeconds: CFGregorianUnitFlags = 32;
pub const CFGregorianUnitFlags_kCFGregorianAllUnits: CFGregorianUnitFlags = 16777215;
pub type CFGregorianUnitFlags = CFOptionFlags;
extern "C" {
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) -> Boolean;
}
extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef)
        -> CFGregorianDate;
}
extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
extern "C" {
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: *mut UInt8);
}
extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
extern "C" {
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex);
}
extern "C" {
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8, length: CFIndex);
}
extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub const CFDataSearchFlags_kCFDataSearchBackwards: CFDataSearchFlags = 1;
pub const CFDataSearchFlags_kCFDataSearchAnchored: CFDataSearchFlags = 2;
pub type CFDataSearchFlags = CFOptionFlags;
extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetControl: CFCharacterSetPredefinedSet = 1;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespace: CFCharacterSetPredefinedSet = 2;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespaceAndNewline:
    CFCharacterSetPredefinedSet = 3;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecimalDigit: CFCharacterSetPredefinedSet = 4;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLetter: CFCharacterSetPredefinedSet = 5;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLowercaseLetter: CFCharacterSetPredefinedSet =
    6;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetUppercaseLetter: CFCharacterSetPredefinedSet =
    7;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNonBase: CFCharacterSetPredefinedSet = 8;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecomposable: CFCharacterSetPredefinedSet = 9;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetAlphaNumeric: CFCharacterSetPredefinedSet = 10;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetPunctuation: CFCharacterSetPredefinedSet = 11;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetCapitalizedLetter:
    CFCharacterSetPredefinedSet = 13;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetSymbol: CFCharacterSetPredefinedSet = 14;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNewline: CFCharacterSetPredefinedSet = 15;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetIllegal: CFCharacterSetPredefinedSet = 12;
pub type CFCharacterSetPredefinedSet = CFIndex;
extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange);
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef);
}
extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
pub type CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings_kCFStringEncodingMacRoman: CFStringBuiltInEncodings = 0;
pub const CFStringBuiltInEncodings_kCFStringEncodingWindowsLatin1: CFStringBuiltInEncodings = 1280;
pub const CFStringBuiltInEncodings_kCFStringEncodingISOLatin1: CFStringBuiltInEncodings = 513;
pub const CFStringBuiltInEncodings_kCFStringEncodingNextStepLatin: CFStringBuiltInEncodings = 2817;
pub const CFStringBuiltInEncodings_kCFStringEncodingASCII: CFStringBuiltInEncodings = 1536;
pub const CFStringBuiltInEncodings_kCFStringEncodingUnicode: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF8: CFStringBuiltInEncodings = 134217984;
pub const CFStringBuiltInEncodings_kCFStringEncodingNonLossyASCII: CFStringBuiltInEncodings = 3071;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16BE: CFStringBuiltInEncodings = 268435712;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16LE: CFStringBuiltInEncodings = 335544576;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32: CFStringBuiltInEncodings = 201326848;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32BE: CFStringBuiltInEncodings = 402653440;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32LE: CFStringBuiltInEncodings = 469762304;
pub type CFStringBuiltInEncodings = CFStringEncoding;
extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        errorPtr: *mut CFErrorRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
        errorPtr: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) -> UniChar;
}
extern "C" {
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: *mut UniChar);
}
extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetFastestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub const CFStringCompareFlags_kCFCompareCaseInsensitive: CFStringCompareFlags = 1;
pub const CFStringCompareFlags_kCFCompareBackwards: CFStringCompareFlags = 4;
pub const CFStringCompareFlags_kCFCompareAnchored: CFStringCompareFlags = 8;
pub const CFStringCompareFlags_kCFCompareNonliteral: CFStringCompareFlags = 16;
pub const CFStringCompareFlags_kCFCompareLocalized: CFStringCompareFlags = 32;
pub const CFStringCompareFlags_kCFCompareNumerically: CFStringCompareFlags = 64;
pub const CFStringCompareFlags_kCFCompareDiacriticInsensitive: CFStringCompareFlags = 128;
pub const CFStringCompareFlags_kCFCompareWidthInsensitive: CFStringCompareFlags = 256;
pub const CFStringCompareFlags_kCFCompareForcedOrdering: CFStringCompareFlags = 512;
pub type CFStringCompareFlags = CFOptionFlags;
extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
extern "C" {
    pub fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef);
}
extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn CFStringInsert(str_: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef);
}
extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
extern "C" {
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
extern "C" {
    pub fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef);
}
pub const CFStringNormalizationForm_kCFStringNormalizationFormD: CFStringNormalizationForm = 0;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKD: CFStringNormalizationForm = 1;
pub const CFStringNormalizationForm_kCFStringNormalizationFormC: CFStringNormalizationForm = 2;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKC: CFStringNormalizationForm = 3;
pub type CFStringNormalizationForm = CFIndex;
extern "C" {
    pub fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm);
}
extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) -> UInt32;
}
extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
extern "C" {
    pub fn __CFStringMakeConstantString(cStr: *const ::std::os::raw::c_char) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneResetSystem();
}
extern "C" {
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}
extern "C" {
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}
extern "C" {
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        tryAbbrev: Boolean,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}
extern "C" {
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}
extern "C" {
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleStandard: CFTimeZoneNameStyle = 0;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortStandard: CFTimeZoneNameStyle = 1;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleDaylightSaving: CFTimeZoneNameStyle = 2;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortDaylightSaving: CFTimeZoneNameStyle = 3;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleGeneric: CFTimeZoneNameStyle = 4;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortGeneric: CFTimeZoneNameStyle = 5;
pub type CFTimeZoneNameStyle = CFIndex;
extern "C" {
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCalendar {
    _unused: [u8; 0],
}
pub type CFCalendarRef = *mut __CFCalendar;
extern "C" {
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
}
extern "C" {
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
}
extern "C" {
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
}
pub const CFCalendarUnit_kCFCalendarUnitEra: CFCalendarUnit = 2;
pub const CFCalendarUnit_kCFCalendarUnitYear: CFCalendarUnit = 4;
pub const CFCalendarUnit_kCFCalendarUnitMonth: CFCalendarUnit = 8;
pub const CFCalendarUnit_kCFCalendarUnitDay: CFCalendarUnit = 16;
pub const CFCalendarUnit_kCFCalendarUnitHour: CFCalendarUnit = 32;
pub const CFCalendarUnit_kCFCalendarUnitMinute: CFCalendarUnit = 64;
pub const CFCalendarUnit_kCFCalendarUnitSecond: CFCalendarUnit = 128;
pub const CFCalendarUnit_kCFCalendarUnitWeek: CFCalendarUnit = 256;
pub const CFCalendarUnit_kCFCalendarUnitWeekday: CFCalendarUnit = 512;
pub const CFCalendarUnit_kCFCalendarUnitWeekdayOrdinal: CFCalendarUnit = 1024;
pub const CFCalendarUnit_kCFCalendarUnitQuarter: CFCalendarUnit = 2048;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfMonth: CFCalendarUnit = 4096;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfYear: CFCalendarUnit = 8192;
pub const CFCalendarUnit_kCFCalendarUnitYearForWeekOfYear: CFCalendarUnit = 16384;
pub type CFCalendarUnit = CFOptionFlags;
extern "C" {
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarComposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarDecomposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub const kCFCalendarComponentsWrap: _bindgen_ty_49 = 1;
pub type _bindgen_ty_49 = CFOptionFlags;
extern "C" {
    pub fn CFCalendarAddComponents(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarGetComponentDifference(
        calendar: CFCalendarRef,
        startingAT: CFAbsoluteTime,
        resultAT: CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub type CGFloat = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPoint {
    pub x: CGFloat,
    pub y: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGSize {
    pub width: CGFloat,
    pub height: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGVector {
    pub dx: CGFloat,
    pub dy: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGRect {
    pub origin: CGPoint,
    pub size: CGSize,
}
pub const CGRectEdge_CGRectMinXEdge: CGRectEdge = 0;
pub const CGRectEdge_CGRectMinYEdge: CGRectEdge = 1;
pub const CGRectEdge_CGRectMaxXEdge: CGRectEdge = 2;
pub const CGRectEdge_CGRectMaxYEdge: CGRectEdge = 3;
pub type CGRectEdge = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransform {
    pub a: CGFloat,
    pub b: CGFloat,
    pub c: CGFloat,
    pub d: CGFloat,
    pub tx: CGFloat,
    pub ty: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransformComponents {
    pub scale: CGSize,
    pub horizontalShear: CGFloat,
    pub rotation: CGFloat,
    pub translation: CGVector,
}
pub type CFDateFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDateFormatter {
    _unused: [u8; 0],
}
pub type CFDateFormatterRef = *mut __CFDateFormatter;
extern "C" {
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}
pub const CFDateFormatterStyle_kCFDateFormatterNoStyle: CFDateFormatterStyle = 0;
pub const CFDateFormatterStyle_kCFDateFormatterShortStyle: CFDateFormatterStyle = 1;
pub const CFDateFormatterStyle_kCFDateFormatterMediumStyle: CFDateFormatterStyle = 2;
pub const CFDateFormatterStyle_kCFDateFormatterLongStyle: CFDateFormatterStyle = 3;
pub const CFDateFormatterStyle_kCFDateFormatterFullStyle: CFDateFormatterStyle = 4;
pub type CFDateFormatterStyle = CFIndex;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithYear: CFISO8601DateFormatOptions = 1;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithMonth: CFISO8601DateFormatOptions = 2;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithWeekOfYear:
    CFISO8601DateFormatOptions = 4;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDay: CFISO8601DateFormatOptions = 16;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTime: CFISO8601DateFormatOptions = 32;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTimeZone: CFISO8601DateFormatOptions =
    64;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithSpaceBetweenDateAndTime:
    CFISO8601DateFormatOptions = 128;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDashSeparatorInDate:
    CFISO8601DateFormatOptions = 256;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTime:
    CFISO8601DateFormatOptions = 512;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTimeZone:
    CFISO8601DateFormatOptions = 1024;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFractionalSeconds:
    CFISO8601DateFormatOptions = 2048;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullDate: CFISO8601DateFormatOptions =
    275;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullTime: CFISO8601DateFormatOptions =
    1632;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithInternetDateTime:
    CFISO8601DateFormatOptions = 1907;
pub type CFISO8601DateFormatOptions = CFOptionFlags;
extern "C" {
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        formatOptions: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        dateStyle: CFDateFormatterStyle,
        timeStyle: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}
extern "C" {
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBoolean {
    _unused: [u8; 0],
}
pub type CFBooleanRef = *const __CFBoolean;
extern "C" {
    pub static kCFBooleanTrue: CFBooleanRef;
}
extern "C" {
    pub static kCFBooleanFalse: CFBooleanRef;
}
extern "C" {
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}
pub const CFNumberType_kCFNumberSInt8Type: CFNumberType = 1;
pub const CFNumberType_kCFNumberSInt16Type: CFNumberType = 2;
pub const CFNumberType_kCFNumberSInt32Type: CFNumberType = 3;
pub const CFNumberType_kCFNumberSInt64Type: CFNumberType = 4;
pub const CFNumberType_kCFNumberFloat32Type: CFNumberType = 5;
pub const CFNumberType_kCFNumberFloat64Type: CFNumberType = 6;
pub const CFNumberType_kCFNumberCharType: CFNumberType = 7;
pub const CFNumberType_kCFNumberShortType: CFNumberType = 8;
pub const CFNumberType_kCFNumberIntType: CFNumberType = 9;
pub const CFNumberType_kCFNumberLongType: CFNumberType = 10;
pub const CFNumberType_kCFNumberLongLongType: CFNumberType = 11;
pub const CFNumberType_kCFNumberFloatType: CFNumberType = 12;
pub const CFNumberType_kCFNumberDoubleType: CFNumberType = 13;
pub const CFNumberType_kCFNumberCFIndexType: CFNumberType = 14;
pub const CFNumberType_kCFNumberNSIntegerType: CFNumberType = 15;
pub const CFNumberType_kCFNumberCGFloatType: CFNumberType = 16;
pub const CFNumberType_kCFNumberMaxType: CFNumberType = 16;
pub type CFNumberType = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumber {
    _unused: [u8; 0],
}
pub type CFNumberRef = *const __CFNumber;
extern "C" {
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNaN: CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        theType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}
extern "C" {
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}
extern "C" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}
extern "C" {
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        theType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberCompare(
        number: CFNumberRef,
        otherNumber: CFNumberRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
pub type CFNumberFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumberFormatter {
    _unused: [u8; 0],
}
pub type CFNumberFormatterRef = *mut __CFNumberFormatter;
extern "C" {
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}
pub const CFNumberFormatterStyle_kCFNumberFormatterNoStyle: CFNumberFormatterStyle = 0;
pub const CFNumberFormatterStyle_kCFNumberFormatterDecimalStyle: CFNumberFormatterStyle = 1;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyStyle: CFNumberFormatterStyle = 2;
pub const CFNumberFormatterStyle_kCFNumberFormatterPercentStyle: CFNumberFormatterStyle = 3;
pub const CFNumberFormatterStyle_kCFNumberFormatterScientificStyle: CFNumberFormatterStyle = 4;
pub const CFNumberFormatterStyle_kCFNumberFormatterSpellOutStyle: CFNumberFormatterStyle = 5;
pub const CFNumberFormatterStyle_kCFNumberFormatterOrdinalStyle: CFNumberFormatterStyle = 6;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyISOCodeStyle: CFNumberFormatterStyle = 8;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyPluralStyle: CFNumberFormatterStyle = 9;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyAccountingStyle: CFNumberFormatterStyle =
    10;
pub type CFNumberFormatterStyle = CFIndex;
extern "C" {
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}
extern "C" {
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}
extern "C" {
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        numberType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub const CFNumberFormatterOptionFlags_kCFNumberFormatterParseIntegersOnly:
    CFNumberFormatterOptionFlags = 1;
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
extern "C" {
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        numberType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundCeiling:
    CFNumberFormatterRoundingMode = 0;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundFloor:
    CFNumberFormatterRoundingMode = 1;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundDown: CFNumberFormatterRoundingMode =
    2;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundUp: CFNumberFormatterRoundingMode =
    3;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfEven:
    CFNumberFormatterRoundingMode = 4;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfDown:
    CFNumberFormatterRoundingMode = 5;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfUp:
    CFNumberFormatterRoundingMode = 6;
pub type CFNumberFormatterRoundingMode = CFIndex;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforePrefix:
    CFNumberFormatterPadPosition = 0;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterPrefix:
    CFNumberFormatterPadPosition = 1;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforeSuffix:
    CFNumberFormatterPadPosition = 2;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterSuffix:
    CFNumberFormatterPadPosition = 3;
pub type CFNumberFormatterPadPosition = CFIndex;
extern "C" {
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currencyCode: CFStringRef,
        defaultFractionDigits: *mut i32,
        roundingIncrement: *mut f64,
    ) -> Boolean;
}
extern "C" {
    pub static kCFPreferencesAnyApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyUser: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentUser: CFStringRef;
}
extern "C" {
    pub fn CFPreferencesCopyAppValue(
        key: CFStringRef,
        applicationID: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesGetAppBooleanValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesGetAppIntegerValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPreferencesSetAppValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef);
}
extern "C" {
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        applicationID: CFStringRef,
        suiteID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFPreferencesSetValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSynchronize(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyApplicationList(
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesCopyKeyList(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) -> Boolean;
}
pub const CFURLPathStyle_kCFURLPOSIXPathStyle: CFURLPathStyle = 0;
pub const CFURLPathStyle_kCFURLHFSPathStyle: CFURLPathStyle = 1;
pub const CFURLPathStyle_kCFURLWindowsPathStyle: CFURLPathStyle = 2;
pub type CFURLPathStyle = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURL {
    _unused: [u8; 0],
}
pub type CFURLRef = *const __CFURL;
extern "C" {
    pub fn CFURLGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        URLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escapeWhitespace: Boolean,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        URLString: CFStringRef,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relativeURLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
        useCompatibilityMode: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolveAgainstBase: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) -> CFStringRef;
}
extern "C" {
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
}
extern "C" {
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyParameterString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyQueryString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef)
        -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        pathComponent: CFStringRef,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8, bufferLength: CFIndex) -> CFIndex;
}
pub const CFURLComponentType_kCFURLComponentScheme: CFURLComponentType = 1;
pub const CFURLComponentType_kCFURLComponentNetLocation: CFURLComponentType = 2;
pub const CFURLComponentType_kCFURLComponentPath: CFURLComponentType = 3;
pub const CFURLComponentType_kCFURLComponentResourceSpecifier: CFURLComponentType = 4;
pub const CFURLComponentType_kCFURLComponentUser: CFURLComponentType = 5;
pub const CFURLComponentType_kCFURLComponentPassword: CFURLComponentType = 6;
pub const CFURLComponentType_kCFURLComponentUserInfo: CFURLComponentType = 7;
pub const CFURLComponentType_kCFURLComponentHost: CFURLComponentType = 8;
pub const CFURLComponentType_kCFURLComponentPort: CFURLComponentType = 9;
pub const CFURLComponentType_kCFURLComponentParameterString: CFURLComponentType = 10;
pub const CFURLComponentType_kCFURLComponentQuery: CFURLComponentType = 11;
pub const CFURLComponentType_kCFURLComponentFragment: CFURLComponentType = 12;
pub type CFURLComponentType = CFIndex;
extern "C" {
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        rangeIncludingSeparators: *mut CFRange,
    ) -> CFRange;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        origString: CFStringRef,
        charsToLeaveEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveUnescaped: CFStringRef,
        legalURLCharactersToBeEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSRef {
    _unused: [u8; 0],
}
extern "C" {
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: *const FSRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut FSRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValueTypeRefPtr: *mut ::std::os::raw::c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyedPropertyValues: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}
extern "C" {
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}
extern "C" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}
extern "C" {
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
    );
}
extern "C" {
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub static kCFURLNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsDirectoryKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsVolumeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPackageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsApplicationKey: CFStringRef;
}
extern "C" {
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsHiddenKey: CFStringRef;
}
extern "C" {
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentAccessDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPurgeableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSparseKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLinkCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelNumberKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelColorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}
extern "C" {
    pub static kCFURLEffectiveIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCustomIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsReadableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsWritableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTagNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCanonicalPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}
extern "C" {
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsAliasFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionNone: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionComplete: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationMinimalBookmarkMask:
    CFURLBookmarkCreationOptions = 512;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSuitableForBookmarkFile:
    CFURLBookmarkCreationOptions = 1024;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithSecurityScope:
    CFURLBookmarkCreationOptions = 2048;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    CFURLBookmarkCreationOptions = 4096;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithoutImplicitSecurityScope:
    CFURLBookmarkCreationOptions = 536870912;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationPreferFileIDResolutionMask:
    CFURLBookmarkCreationOptions = 256;
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithSecurityScope:
    CFURLBookmarkResolutionOptions = 1024;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutImplicitStartAccessing:
    CFURLBookmarkResolutionOptions = 32768;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resourcePropertiesToInclude: CFArrayRef,
        relativeToURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relativeToURL: CFURLRef,
        resourcePropertiesToInclude: CFArrayRef,
        isStale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertiesToReturn: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertyKey: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        fileURL: CFURLRef,
        errorRef: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLWriteBookmarkDataToFile(
        bookmarkRef: CFDataRef,
        fileURL: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        errorRef: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocatorRef: CFAllocatorRef,
        aliasRecordDataRef: CFDataRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub const CFRunLoopRunResult_kCFRunLoopRunFinished: CFRunLoopRunResult = 1;
pub const CFRunLoopRunResult_kCFRunLoopRunStopped: CFRunLoopRunResult = 2;
pub const CFRunLoopRunResult_kCFRunLoopRunTimedOut: CFRunLoopRunResult = 3;
pub const CFRunLoopRunResult_kCFRunLoopRunHandledSource: CFRunLoopRunResult = 4;
pub type CFRunLoopRunResult = SInt32;
pub const CFRunLoopActivity_kCFRunLoopEntry: CFRunLoopActivity = 1;
pub const CFRunLoopActivity_kCFRunLoopBeforeTimers: CFRunLoopActivity = 2;
pub const CFRunLoopActivity_kCFRunLoopBeforeSources: CFRunLoopActivity = 4;
pub const CFRunLoopActivity_kCFRunLoopBeforeWaiting: CFRunLoopActivity = 32;
pub const CFRunLoopActivity_kCFRunLoopAfterWaiting: CFRunLoopActivity = 64;
pub const CFRunLoopActivity_kCFRunLoopExit: CFRunLoopActivity = 128;
pub const CFRunLoopActivity_kCFRunLoopAllActivities: CFRunLoopActivity = 268435455;
pub type CFRunLoopActivity = CFOptionFlags;
extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopRun();
}
extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(timer: CFRunLoopTimerRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime);
}
extern "C" {
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: *mut CFRunLoopTimerContext);
}
extern "C" {
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSocket {
    _unused: [u8; 0],
}
pub type CFSocketRef = *mut __CFSocket;
pub const CFSocketError_kCFSocketSuccess: CFSocketError = 0;
pub const CFSocketError_kCFSocketError: CFSocketError = -1;
pub const CFSocketError_kCFSocketTimeout: CFSocketError = -2;
pub type CFSocketError = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketSignature {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
pub const CFSocketCallBackType_kCFSocketNoCallBack: CFSocketCallBackType = 0;
pub const CFSocketCallBackType_kCFSocketReadCallBack: CFSocketCallBackType = 1;
pub const CFSocketCallBackType_kCFSocketAcceptCallBack: CFSocketCallBackType = 2;
pub const CFSocketCallBackType_kCFSocketDataCallBack: CFSocketCallBackType = 3;
pub const CFSocketCallBackType_kCFSocketConnectCallBack: CFSocketCallBackType = 4;
pub const CFSocketCallBackType_kCFSocketWriteCallBack: CFSocketCallBackType = 8;
pub type CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketAutomaticallyReenableReadCallBack: _bindgen_ty_50 = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: _bindgen_ty_50 = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: _bindgen_ty_50 = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: _bindgen_ty_50 = 8;
pub const kCFSocketLeaveErrors: _bindgen_ty_50 = 64;
pub const kCFSocketCloseOnInvalidate: _bindgen_ty_50 = 128;
pub type _bindgen_ty_50 = CFOptionFlags;
pub type CFSocketCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        s: CFSocketRef,
        type_: CFSocketCallBackType,
        address: CFDataRef,
        data: *const ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFSocketNativeHandle = ::std::os::raw::c_int;
extern "C" {
    pub fn CFSocketGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocolFamily: SInt32,
        socketType: SInt32,
        protocol: SInt32,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketInvalidate(s: CFSocketRef);
}
extern "C" {
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
}
extern "C" {
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
}
extern "C" {
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
}
extern "C" {
    pub fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *const CFSocketSignature,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketUnregister(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
extern "C" {
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
extern "C" {
    pub static kCFSocketCommandKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketNameKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketValueKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketResultKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketRegisterCommand: CFStringRef;
}
extern "C" {
    pub static kCFSocketRetrieveCommand: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamError {
    pub domain: CFIndex,
    pub error: SInt32,
}
pub type CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus_kCFStreamStatusNotOpen: CFStreamStatus = 0;
pub const CFStreamStatus_kCFStreamStatusOpening: CFStreamStatus = 1;
pub const CFStreamStatus_kCFStreamStatusOpen: CFStreamStatus = 2;
pub const CFStreamStatus_kCFStreamStatusReading: CFStreamStatus = 3;
pub const CFStreamStatus_kCFStreamStatusWriting: CFStreamStatus = 4;
pub const CFStreamStatus_kCFStreamStatusAtEnd: CFStreamStatus = 5;
pub const CFStreamStatus_kCFStreamStatusClosed: CFStreamStatus = 6;
pub const CFStreamStatus_kCFStreamStatusError: CFStreamStatus = 7;
pub type CFStreamStatus = CFIndex;
pub const CFStreamEventType_kCFStreamEventNone: CFStreamEventType = 0;
pub const CFStreamEventType_kCFStreamEventOpenCompleted: CFStreamEventType = 1;
pub const CFStreamEventType_kCFStreamEventHasBytesAvailable: CFStreamEventType = 2;
pub const CFStreamEventType_kCFStreamEventCanAcceptBytes: CFStreamEventType = 4;
pub const CFStreamEventType_kCFStreamEventErrorOccurred: CFStreamEventType = 8;
pub const CFStreamEventType_kCFStreamEventEndEncountered: CFStreamEventType = 16;
pub type CFStreamEventType = CFOptionFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
pub type CFReadStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFReadStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFWriteStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFWriteStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static mut kCFStreamPropertyDataWritten: CFStreamPropertyKey;
}
extern "C" {
    pub fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut UInt8,
        bufferCapacity: CFIndex,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        bufferAllocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        fileURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
        transferBufferSize: CFIndex,
    );
}
extern "C" {
    pub static mut kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
}
extern "C" {
    pub static kCFStreamErrorDomainSOCKS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxy: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyHost: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyPort: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSVersion: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion4: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion5: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSUser: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSPassword: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainSSL: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySocketSecurityLevel: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNone: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
}
extern "C" {
    pub fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: UInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *const CFSocketSignature,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamClose(stream: CFReadStreamRef);
}
extern "C" {
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef);
}
extern "C" {
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        maxBytesToRead: CFIndex,
        numBytesRead: *mut CFIndex,
    ) -> *const UInt8;
}
extern "C" {
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFReadStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFWriteStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: NSObject);
}
extern "C" {
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: NSObject);
}
extern "C" {
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) -> dispatch_queue_t;
}
extern "C" {
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) -> dispatch_queue_t;
}
pub const CFStreamErrorDomain_kCFStreamErrorDomainCustom: CFStreamErrorDomain = -1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainPOSIX: CFStreamErrorDomain = 1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainMacOSStatus: CFStreamErrorDomain = 2;
pub type CFStreamErrorDomain = CFIndex;
extern "C" {
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
}
extern "C" {
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
}
pub const CFPropertyListMutabilityOptions_kCFPropertyListImmutable:
    CFPropertyListMutabilityOptions = 0;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainers:
    CFPropertyListMutabilityOptions = 1;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainersAndLeaves:
    CFPropertyListMutabilityOptions = 2;
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
extern "C" {
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        mutabilityOption: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        mutabilityOption: CFOptionFlags,
    ) -> CFPropertyListRef;
}
pub const CFPropertyListFormat_kCFPropertyListOpenStepFormat: CFPropertyListFormat = 1;
pub const CFPropertyListFormat_kCFPropertyListXMLFormat_v1_0: CFPropertyListFormat = 100;
pub const CFPropertyListFormat_kCFPropertyListBinaryFormat_v1_0: CFPropertyListFormat = 200;
pub type CFPropertyListFormat = CFIndex;
extern "C" {
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}
extern "C" {
    pub fn CFPropertyListWriteToStream(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        mutabilityOption: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
pub const kCFPropertyListReadCorruptError: _bindgen_ty_51 = 3840;
pub const kCFPropertyListReadUnknownVersionError: _bindgen_ty_51 = 3841;
pub const kCFPropertyListReadStreamError: _bindgen_ty_51 = 3842;
pub const kCFPropertyListWriteStreamError: _bindgen_ty_51 = 3851;
pub type _bindgen_ty_51 = CFIndex;
extern "C" {
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListWrite(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type CFSetRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFSetReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFSetCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFSetEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFSetHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
extern "C" {
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}
extern "C" {
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}
pub type CFSetApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSet {
    _unused: [u8; 0],
}
pub type CFSetRef = *const __CFSet;
pub type CFMutableSetRef = *mut __CFSet;
extern "C" {
    pub fn CFSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theSet: CFSetRef,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
}
extern "C" {
    pub fn CFSetGetCountOfValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValue(
        theSet: CFSetRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFSetGetValueIfPresent(
        theSet: CFSetRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValues(theSet: CFSetRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetApplyFunction(
        theSet: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFSetAddValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetSetValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef);
}
pub const CFStringEncodings_kCFStringEncodingMacJapanese: CFStringEncodings = 1;
pub const CFStringEncodings_kCFStringEncodingMacChineseTrad: CFStringEncodings = 2;
pub const CFStringEncodings_kCFStringEncodingMacKorean: CFStringEncodings = 3;
pub const CFStringEncodings_kCFStringEncodingMacArabic: CFStringEncodings = 4;
pub const CFStringEncodings_kCFStringEncodingMacHebrew: CFStringEncodings = 5;
pub const CFStringEncodings_kCFStringEncodingMacGreek: CFStringEncodings = 6;
pub const CFStringEncodings_kCFStringEncodingMacCyrillic: CFStringEncodings = 7;
pub const CFStringEncodings_kCFStringEncodingMacDevanagari: CFStringEncodings = 9;
pub const CFStringEncodings_kCFStringEncodingMacGurmukhi: CFStringEncodings = 10;
pub const CFStringEncodings_kCFStringEncodingMacGujarati: CFStringEncodings = 11;
pub const CFStringEncodings_kCFStringEncodingMacOriya: CFStringEncodings = 12;
pub const CFStringEncodings_kCFStringEncodingMacBengali: CFStringEncodings = 13;
pub const CFStringEncodings_kCFStringEncodingMacTamil: CFStringEncodings = 14;
pub const CFStringEncodings_kCFStringEncodingMacTelugu: CFStringEncodings = 15;
pub const CFStringEncodings_kCFStringEncodingMacKannada: CFStringEncodings = 16;
pub const CFStringEncodings_kCFStringEncodingMacMalayalam: CFStringEncodings = 17;
pub const CFStringEncodings_kCFStringEncodingMacSinhalese: CFStringEncodings = 18;
pub const CFStringEncodings_kCFStringEncodingMacBurmese: CFStringEncodings = 19;
pub const CFStringEncodings_kCFStringEncodingMacKhmer: CFStringEncodings = 20;
pub const CFStringEncodings_kCFStringEncodingMacThai: CFStringEncodings = 21;
pub const CFStringEncodings_kCFStringEncodingMacLaotian: CFStringEncodings = 22;
pub const CFStringEncodings_kCFStringEncodingMacGeorgian: CFStringEncodings = 23;
pub const CFStringEncodings_kCFStringEncodingMacArmenian: CFStringEncodings = 24;
pub const CFStringEncodings_kCFStringEncodingMacChineseSimp: CFStringEncodings = 25;
pub const CFStringEncodings_kCFStringEncodingMacTibetan: CFStringEncodings = 26;
pub const CFStringEncodings_kCFStringEncodingMacMongolian: CFStringEncodings = 27;
pub const CFStringEncodings_kCFStringEncodingMacEthiopic: CFStringEncodings = 28;
pub const CFStringEncodings_kCFStringEncodingMacCentralEurRoman: CFStringEncodings = 29;
pub const CFStringEncodings_kCFStringEncodingMacVietnamese: CFStringEncodings = 30;
pub const CFStringEncodings_kCFStringEncodingMacExtArabic: CFStringEncodings = 31;
pub const CFStringEncodings_kCFStringEncodingMacSymbol: CFStringEncodings = 33;
pub const CFStringEncodings_kCFStringEncodingMacDingbats: CFStringEncodings = 34;
pub const CFStringEncodings_kCFStringEncodingMacTurkish: CFStringEncodings = 35;
pub const CFStringEncodings_kCFStringEncodingMacCroatian: CFStringEncodings = 36;
pub const CFStringEncodings_kCFStringEncodingMacIcelandic: CFStringEncodings = 37;
pub const CFStringEncodings_kCFStringEncodingMacRomanian: CFStringEncodings = 38;
pub const CFStringEncodings_kCFStringEncodingMacCeltic: CFStringEncodings = 39;
pub const CFStringEncodings_kCFStringEncodingMacGaelic: CFStringEncodings = 40;
pub const CFStringEncodings_kCFStringEncodingMacFarsi: CFStringEncodings = 140;
pub const CFStringEncodings_kCFStringEncodingMacUkrainian: CFStringEncodings = 152;
pub const CFStringEncodings_kCFStringEncodingMacInuit: CFStringEncodings = 236;
pub const CFStringEncodings_kCFStringEncodingMacVT100: CFStringEncodings = 252;
pub const CFStringEncodings_kCFStringEncodingMacHFS: CFStringEncodings = 255;
pub const CFStringEncodings_kCFStringEncodingISOLatin2: CFStringEncodings = 514;
pub const CFStringEncodings_kCFStringEncodingISOLatin3: CFStringEncodings = 515;
pub const CFStringEncodings_kCFStringEncodingISOLatin4: CFStringEncodings = 516;
pub const CFStringEncodings_kCFStringEncodingISOLatinCyrillic: CFStringEncodings = 517;
pub const CFStringEncodings_kCFStringEncodingISOLatinArabic: CFStringEncodings = 518;
pub const CFStringEncodings_kCFStringEncodingISOLatinGreek: CFStringEncodings = 519;
pub const CFStringEncodings_kCFStringEncodingISOLatinHebrew: CFStringEncodings = 520;
pub const CFStringEncodings_kCFStringEncodingISOLatin5: CFStringEncodings = 521;
pub const CFStringEncodings_kCFStringEncodingISOLatin6: CFStringEncodings = 522;
pub const CFStringEncodings_kCFStringEncodingISOLatinThai: CFStringEncodings = 523;
pub const CFStringEncodings_kCFStringEncodingISOLatin7: CFStringEncodings = 525;
pub const CFStringEncodings_kCFStringEncodingISOLatin8: CFStringEncodings = 526;
pub const CFStringEncodings_kCFStringEncodingISOLatin9: CFStringEncodings = 527;
pub const CFStringEncodings_kCFStringEncodingISOLatin10: CFStringEncodings = 528;
pub const CFStringEncodings_kCFStringEncodingDOSLatinUS: CFStringEncodings = 1024;
pub const CFStringEncodings_kCFStringEncodingDOSGreek: CFStringEncodings = 1029;
pub const CFStringEncodings_kCFStringEncodingDOSBalticRim: CFStringEncodings = 1030;
pub const CFStringEncodings_kCFStringEncodingDOSLatin1: CFStringEncodings = 1040;
pub const CFStringEncodings_kCFStringEncodingDOSGreek1: CFStringEncodings = 1041;
pub const CFStringEncodings_kCFStringEncodingDOSLatin2: CFStringEncodings = 1042;
pub const CFStringEncodings_kCFStringEncodingDOSCyrillic: CFStringEncodings = 1043;
pub const CFStringEncodings_kCFStringEncodingDOSTurkish: CFStringEncodings = 1044;
pub const CFStringEncodings_kCFStringEncodingDOSPortuguese: CFStringEncodings = 1045;
pub const CFStringEncodings_kCFStringEncodingDOSIcelandic: CFStringEncodings = 1046;
pub const CFStringEncodings_kCFStringEncodingDOSHebrew: CFStringEncodings = 1047;
pub const CFStringEncodings_kCFStringEncodingDOSCanadianFrench: CFStringEncodings = 1048;
pub const CFStringEncodings_kCFStringEncodingDOSArabic: CFStringEncodings = 1049;
pub const CFStringEncodings_kCFStringEncodingDOSNordic: CFStringEncodings = 1050;
pub const CFStringEncodings_kCFStringEncodingDOSRussian: CFStringEncodings = 1051;
pub const CFStringEncodings_kCFStringEncodingDOSGreek2: CFStringEncodings = 1052;
pub const CFStringEncodings_kCFStringEncodingDOSThai: CFStringEncodings = 1053;
pub const CFStringEncodings_kCFStringEncodingDOSJapanese: CFStringEncodings = 1056;
pub const CFStringEncodings_kCFStringEncodingDOSChineseSimplif: CFStringEncodings = 1057;
pub const CFStringEncodings_kCFStringEncodingDOSKorean: CFStringEncodings = 1058;
pub const CFStringEncodings_kCFStringEncodingDOSChineseTrad: CFStringEncodings = 1059;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin2: CFStringEncodings = 1281;
pub const CFStringEncodings_kCFStringEncodingWindowsCyrillic: CFStringEncodings = 1282;
pub const CFStringEncodings_kCFStringEncodingWindowsGreek: CFStringEncodings = 1283;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin5: CFStringEncodings = 1284;
pub const CFStringEncodings_kCFStringEncodingWindowsHebrew: CFStringEncodings = 1285;
pub const CFStringEncodings_kCFStringEncodingWindowsArabic: CFStringEncodings = 1286;
pub const CFStringEncodings_kCFStringEncodingWindowsBalticRim: CFStringEncodings = 1287;
pub const CFStringEncodings_kCFStringEncodingWindowsVietnamese: CFStringEncodings = 1288;
pub const CFStringEncodings_kCFStringEncodingWindowsKoreanJohab: CFStringEncodings = 1296;
pub const CFStringEncodings_kCFStringEncodingANSEL: CFStringEncodings = 1537;
pub const CFStringEncodings_kCFStringEncodingJIS_X0201_76: CFStringEncodings = 1568;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_83: CFStringEncodings = 1569;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_90: CFStringEncodings = 1570;
pub const CFStringEncodings_kCFStringEncodingJIS_X0212_90: CFStringEncodings = 1571;
pub const CFStringEncodings_kCFStringEncodingJIS_C6226_78: CFStringEncodings = 1572;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213: CFStringEncodings = 1576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_MenKuTen: CFStringEncodings = 1577;
pub const CFStringEncodings_kCFStringEncodingGB_2312_80: CFStringEncodings = 1584;
pub const CFStringEncodings_kCFStringEncodingGBK_95: CFStringEncodings = 1585;
pub const CFStringEncodings_kCFStringEncodingGB_18030_2000: CFStringEncodings = 1586;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_87: CFStringEncodings = 1600;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_92_Johab: CFStringEncodings = 1601;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P1: CFStringEncodings = 1617;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P2: CFStringEncodings = 1618;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P3: CFStringEncodings = 1619;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP: CFStringEncodings = 2080;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_2: CFStringEncodings = 2081;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_1: CFStringEncodings = 2082;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_3: CFStringEncodings = 2083;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN: CFStringEncodings = 2096;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN_EXT: CFStringEncodings = 2097;
pub const CFStringEncodings_kCFStringEncodingISO_2022_KR: CFStringEncodings = 2112;
pub const CFStringEncodings_kCFStringEncodingEUC_JP: CFStringEncodings = 2336;
pub const CFStringEncodings_kCFStringEncodingEUC_CN: CFStringEncodings = 2352;
pub const CFStringEncodings_kCFStringEncodingEUC_TW: CFStringEncodings = 2353;
pub const CFStringEncodings_kCFStringEncodingEUC_KR: CFStringEncodings = 2368;
pub const CFStringEncodings_kCFStringEncodingShiftJIS: CFStringEncodings = 2561;
pub const CFStringEncodings_kCFStringEncodingKOI8_R: CFStringEncodings = 2562;
pub const CFStringEncodings_kCFStringEncodingBig5: CFStringEncodings = 2563;
pub const CFStringEncodings_kCFStringEncodingMacRomanLatin1: CFStringEncodings = 2564;
pub const CFStringEncodings_kCFStringEncodingHZ_GB_2312: CFStringEncodings = 2565;
pub const CFStringEncodings_kCFStringEncodingBig5_HKSCS_1999: CFStringEncodings = 2566;
pub const CFStringEncodings_kCFStringEncodingVISCII: CFStringEncodings = 2567;
pub const CFStringEncodings_kCFStringEncodingKOI8_U: CFStringEncodings = 2568;
pub const CFStringEncodings_kCFStringEncodingBig5_E: CFStringEncodings = 2569;
pub const CFStringEncodings_kCFStringEncodingNextStepJapanese: CFStringEncodings = 2818;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_US: CFStringEncodings = 3073;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_CP037: CFStringEncodings = 3074;
pub const CFStringEncodings_kCFStringEncodingUTF7: CFStringEncodings = 67109120;
pub const CFStringEncodings_kCFStringEncodingUTF7_IMAP: CFStringEncodings = 2576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_00: CFStringEncodings = 1576;
pub type CFStringEncodings = CFIndex;
pub type CFTreeRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
pub type CFTreeApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTree {
    _unused: [u8; 0],
}
pub type CFTreeRef = *mut __CFTree;
extern "C" {
    pub fn CFTreeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *const CFTreeContext) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}
extern "C" {
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}
extern "C" {
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}
extern "C" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext);
}
extern "C" {
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32) -> Boolean;
}
extern "C" {
    pub fn CFURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
pub const CFURLError_kCFURLUnknownError: CFURLError = -10;
pub const CFURLError_kCFURLUnknownSchemeError: CFURLError = -11;
pub const CFURLError_kCFURLResourceNotFoundError: CFURLError = -12;
pub const CFURLError_kCFURLResourceAccessViolationError: CFURLError = -13;
pub const CFURLError_kCFURLRemoteHostUnavailableError: CFURLError = -14;
pub const CFURLError_kCFURLImproperArgumentsError: CFURLError = -15;
pub const CFURLError_kCFURLUnknownPropertyKeyError: CFURLError = -16;
pub const CFURLError_kCFURLPropertyKeyUnavailableError: CFURLError = -17;
pub const CFURLError_kCFURLTimeoutError: CFURLError = -18;
pub type CFURLError = CFIndex;
extern "C" {
    pub static kCFURLFileExists: CFStringRef;
}
extern "C" {
    pub static kCFURLFileDirectoryContents: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLength: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLastModificationTime: CFStringRef;
}
extern "C" {
    pub static kCFURLFilePOSIXMode: CFStringRef;
}
extern "C" {
    pub static kCFURLFileOwnerID: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusCode: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusLine: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUUID {
    _unused: [u8; 0],
}
pub type CFUUIDRef = *const __CFUUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFUUIDBytes {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
extern "C" {
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
}
extern "C" {
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
}
extern "C" {
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) -> CFUUIDRef;
}
extern "C" {
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBundle {
    _unused: [u8; 0],
}
pub type CFBundleRef = *mut __CFBundle;
pub type CFPlugInRef = *mut __CFBundle;
extern "C" {
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleNameKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleLocalizationsKey: CFStringRef;
}
extern "C" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directoryURL: CFURLRef,
        bundleType: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}
extern "C" {
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    );
}
extern "C" {
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
}
extern "C" {
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        tableName: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLInDirectory(
        bundleURL: CFURLRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundleURL: CFURLRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForPreferences(
        locArray: CFArrayRef,
        prefArray: CFArrayRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}
pub const kCFBundleExecutableArchitectureI386: _bindgen_ty_52 = 7;
pub const kCFBundleExecutableArchitecturePPC: _bindgen_ty_52 = 18;
pub const kCFBundleExecutableArchitectureX86_64: _bindgen_ty_52 = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: _bindgen_ty_52 = 16777234;
pub const kCFBundleExecutableArchitectureARM64: _bindgen_ty_52 = 16777228;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}
extern "C" {
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        functionName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        functionNames: CFArrayRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbolName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbolNames: CFArrayRef,
        stbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executableName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
}
extern "C" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}
pub type CFBundleRefNum = ::std::os::raw::c_int;
extern "C" {
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}
extern "C" {
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        refNum: *mut CFBundleRefNum,
        localizedRefNum: *mut CFBundleRefNum,
    ) -> SInt32;
}
extern "C" {
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMessagePort {
    _unused: [u8; 0],
}
pub type CFMessagePortRef = *mut __CFMessagePort;
pub const kCFMessagePortSuccess: _bindgen_ty_53 = 0;
pub const kCFMessagePortSendTimeout: _bindgen_ty_53 = -1;
pub const kCFMessagePortReceiveTimeout: _bindgen_ty_53 = -2;
pub const kCFMessagePortIsInvalid: _bindgen_ty_53 = -3;
pub const kCFMessagePortTransportError: _bindgen_ty_53 = -4;
pub const kCFMessagePortBecameInvalidError: _bindgen_ty_53 = -5;
pub type _bindgen_ty_53 = SInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFMessagePortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        local: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFMessagePortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(ms: CFMessagePortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}
extern "C" {
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}
extern "C" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}
extern "C" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}
extern "C" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        sendTimeout: CFTimeInterval,
        rcvTimeout: CFTimeInterval,
        replyMode: CFStringRef,
        returnData: *mut CFDataRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: NSObject);
}
extern "C" {
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInFactoriesKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInTypesKey: CFStringRef;
}
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInUnloadFunction = ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) -> CFPlugInRef;
}
extern "C" {
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean);
}
extern "C" {
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        typeUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factoryUUID: CFUUIDRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunction(
        factoryUUID: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factoryUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
        functionName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef);
}
extern "C" {
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFPlugInInstance {
    _unused: [u8; 0],
}
pub type CFPlugInInstanceRef = *mut __CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction = ::std::option::Option<
    unsafe extern "C" fn(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<unsafe extern "C" fn(instanceData: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFPlugInInstanceGetInstanceData(
        instance: CFPlugInInstanceRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instanceDataSize: CFIndex,
        deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction,
        factoryName: CFStringRef,
        getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMachPort {
    _unused: [u8; 0],
}
pub type CFMachPortRef = *mut __CFMachPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMachPortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFMachPortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        port: CFMachPortRef,
        msg: *mut ::std::os::raw::c_void,
        size: CFIndex,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFMachPortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(port: CFMachPortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMachPortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMachPortCreate(
        allocator: CFAllocatorRef,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortCreateWithPort(
        allocator: CFAllocatorRef,
        portNum: mach_port_t,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
}
extern "C" {
    pub fn CFMachPortGetContext(port: CFMachPortRef, context: *mut CFMachPortContext);
}
extern "C" {
    pub fn CFMachPortInvalidate(port: CFMachPortRef);
}
extern "C" {
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
}
extern "C" {
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
        -> CFMachPortInvalidationCallBack;
}
extern "C" {
    pub fn CFMachPortSetInvalidationCallBack(
        port: CFMachPortRef,
        callout: CFMachPortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMachPortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        port: CFMachPortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAttributedString {
    _unused: [u8; 0],
}
pub type CFAttributedStringRef = *const __CFAttributedString;
pub type CFMutableAttributedStringRef = *mut __CFAttributedString;
extern "C" {
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFAttributedStringGetAttributes(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        effectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttribute(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        effectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        aStr: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringReplaceString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringGetMutableString(
        aStr: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFAttributedStringSetAttributes(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clearOtherAttributes: Boolean,
    );
}
extern "C" {
    pub fn CFAttributedStringSetAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFAttributedStringRemoveAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringReplaceAttributedString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef);
}
extern "C" {
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURLEnumerator {
    _unused: [u8; 0],
}
pub type CFURLEnumeratorRef = *const __CFURLEnumerator;
extern "C" {
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
}
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDefaultBehavior: CFURLEnumeratorOptions = 0;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDescendRecursively: CFURLEnumeratorOptions = 1;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipInvisibles: CFURLEnumeratorOptions = 2;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateFileReferenceURLs: CFURLEnumeratorOptions =
    4;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipPackageContents: CFURLEnumeratorOptions = 8;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPreOrder:
    CFURLEnumeratorOptions = 16;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPostOrder:
    CFURLEnumeratorOptions = 32;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateRelativePathURLs: CFURLEnumeratorOptions =
    64;
pub type CFURLEnumeratorOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLEnumeratorCreateForDirectoryURL(
        alloc: CFAllocatorRef,
        directoryURL: CFURLRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
extern "C" {
    pub fn CFURLEnumeratorCreateForMountedVolumes(
        alloc: CFAllocatorRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
pub const CFURLEnumeratorResult_kCFURLEnumeratorSuccess: CFURLEnumeratorResult = 1;
pub const CFURLEnumeratorResult_kCFURLEnumeratorEnd: CFURLEnumeratorResult = 2;
pub const CFURLEnumeratorResult_kCFURLEnumeratorError: CFURLEnumeratorResult = 3;
pub const CFURLEnumeratorResult_kCFURLEnumeratorDirectoryPostOrderSuccess: CFURLEnumeratorResult =
    4;
pub type CFURLEnumeratorResult = CFIndex;
extern "C" {
    pub fn CFURLEnumeratorGetNextURL(
        enumerator: CFURLEnumeratorRef,
        url: *mut CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLEnumeratorResult;
}
extern "C" {
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef);
}
extern "C" {
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) -> CFIndex;
}
extern "C" {
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileSecurity {
    _unused: [u8; 0],
}
pub type CFFileSecurityRef = *mut __CFFileSecurity;
extern "C" {
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        fileSec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCopyOwnerUUID(
        fileSec: CFFileSecurityRef,
        ownerUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyGroupUUID(
        fileSec: CFFileSecurityRef,
        groupUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: *mut acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: *mut uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: *mut gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) -> Boolean;
}
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwner: CFFileSecurityClearOptions = 1;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroup: CFFileSecurityClearOptions = 2;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearMode: CFFileSecurityClearOptions = 4;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwnerUUID: CFFileSecurityClearOptions = 8;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroupUUID: CFFileSecurityClearOptions = 16;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearAccessControlList:
    CFFileSecurityClearOptions = 32;
pub type CFFileSecurityClearOptions = CFOptionFlags;
extern "C" {
    pub fn CFFileSecurityClearProperties(
        fileSec: CFFileSecurityRef,
        clearPropertyMask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFStringTokenizer {
    _unused: [u8; 0],
}
pub type CFStringTokenizerRef = *mut __CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: _bindgen_ty_54 = 0;
pub const kCFStringTokenizerUnitSentence: _bindgen_ty_54 = 1;
pub const kCFStringTokenizerUnitParagraph: _bindgen_ty_54 = 2;
pub const kCFStringTokenizerUnitLineBreak: _bindgen_ty_54 = 3;
pub const kCFStringTokenizerUnitWordBoundary: _bindgen_ty_54 = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: _bindgen_ty_54 = 65536;
pub const kCFStringTokenizerAttributeLanguage: _bindgen_ty_54 = 131072;
pub type _bindgen_ty_54 = CFOptionFlags;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNone: CFStringTokenizerTokenType = 0;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNormal: CFStringTokenizerTokenType = 1;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasSubTokensMask:
    CFStringTokenizerTokenType = 2;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasDerivedSubTokensMask:
    CFStringTokenizerTokenType = 4;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasHasNumbersMask:
    CFStringTokenizerTokenType = 8;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasNonLettersMask:
    CFStringTokenizerTokenType = 16;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenIsCJWordMask:
    CFStringTokenizerTokenType = 32;
pub type CFStringTokenizerTokenType = CFOptionFlags;
extern "C" {
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}
extern "C" {
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}
extern "C" {
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}
extern "C" {
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        maxRangeLength: CFIndex,
        derivedSubTokens: CFMutableArrayRef,
    ) -> CFIndex;
}
pub type CFFileDescriptorNativeDescriptor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileDescriptor {
    _unused: [u8; 0],
}
pub type CFFileDescriptorRef = *mut __CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: _bindgen_ty_55 = 1;
pub const kCFFileDescriptorWriteCallBack: _bindgen_ty_55 = 2;
pub type _bindgen_ty_55 = CFOptionFlags;
pub type CFFileDescriptorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        f: CFFileDescriptorRef,
        callBackTypes: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
extern "C" {
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        closeOnInvalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *const CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}
extern "C" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}
extern "C" {
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}
extern "C" {
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}
extern "C" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}
extern "C" {
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUserNotification {
    _unused: [u8; 0],
}
pub type CFUserNotificationRef = *mut __CFUserNotification;
pub type CFUserNotificationCallBack = ::std::option::Option<
    unsafe extern "C" fn(userNotification: CFUserNotificationRef, responseFlags: CFOptionFlags),
>;
extern "C" {
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUserNotificationCreate(
        allocator: CFAllocatorRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        error: *mut SInt32,
        dictionary: CFDictionaryRef,
    ) -> CFUserNotificationRef;
}
extern "C" {
    pub fn CFUserNotificationReceiveResponse(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationGetResponseValue(
        userNotification: CFUserNotificationRef,
        key: CFStringRef,
        idx: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFUserNotificationGetResponseDictionary(
        userNotification: CFUserNotificationRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFUserNotificationUpdate(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        dictionary: CFDictionaryRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCreateRunLoopSource(
        allocator: CFAllocatorRef,
        userNotification: CFUserNotificationRef,
        callout: CFUserNotificationCallBack,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFUserNotificationDisplayNotice(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationDisplayAlert(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
        alternateButtonTitle: CFStringRef,
        otherButtonTitle: CFStringRef,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
pub const kCFUserNotificationStopAlertLevel: _bindgen_ty_56 = 0;
pub const kCFUserNotificationNoteAlertLevel: _bindgen_ty_56 = 1;
pub const kCFUserNotificationCautionAlertLevel: _bindgen_ty_56 = 2;
pub const kCFUserNotificationPlainAlertLevel: _bindgen_ty_56 = 3;
pub type _bindgen_ty_56 = CFOptionFlags;
pub const kCFUserNotificationDefaultResponse: _bindgen_ty_57 = 0;
pub const kCFUserNotificationAlternateResponse: _bindgen_ty_57 = 1;
pub const kCFUserNotificationOtherResponse: _bindgen_ty_57 = 2;
pub const kCFUserNotificationCancelResponse: _bindgen_ty_57 = 3;
pub type _bindgen_ty_57 = CFOptionFlags;
pub const kCFUserNotificationNoDefaultButtonFlag: _bindgen_ty_58 = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: _bindgen_ty_58 = 64;
pub type _bindgen_ty_58 = CFOptionFlags;
extern "C" {
    pub static kCFUserNotificationIconURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertTopMostKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationKeyboardTypesKey: CFStringRef;
}
pub const kCFXMLNodeCurrentVersion: _bindgen_ty_59 = 1;
pub type _bindgen_ty_59 = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLNode {
    _unused: [u8; 0],
}
pub type CFXMLNodeRef = *const __CFXMLNode;
pub type CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocument: CFXMLNodeTypeCode = 1;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeElement: CFXMLNodeTypeCode = 2;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeAttribute: CFXMLNodeTypeCode = 3;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeProcessingInstruction: CFXMLNodeTypeCode = 4;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeComment: CFXMLNodeTypeCode = 5;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeText: CFXMLNodeTypeCode = 6;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeCDATASection: CFXMLNodeTypeCode = 7;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocumentFragment: CFXMLNodeTypeCode = 8;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeEntity: CFXMLNodeTypeCode = 9;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeEntityReference: CFXMLNodeTypeCode = 10;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocumentType: CFXMLNodeTypeCode = 11;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeWhitespace: CFXMLNodeTypeCode = 12;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeNotation: CFXMLNodeTypeCode = 13;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeElementTypeDeclaration: CFXMLNodeTypeCode = 14;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeAttributeListDeclaration: CFXMLNodeTypeCode = 15;
pub type CFXMLNodeTypeCode = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementInfo {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub _reserved: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLProcessingInstructionInfo {
    pub dataString: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentInfo {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLExternalID {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentTypeInfo {
    pub externalID: CFXMLExternalID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLNotationInfo {
    pub externalID: CFXMLExternalID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementTypeDeclarationInfo {
    pub contentDescription: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeDeclarationInfo {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeListDeclarationInfo {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParameter: CFXMLEntityTypeCode = 0;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParsedInternal: CFXMLEntityTypeCode = 1;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParsedExternal: CFXMLEntityTypeCode = 2;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeUnparsed: CFXMLEntityTypeCode = 3;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeCharacter: CFXMLEntityTypeCode = 4;
pub type CFXMLEntityTypeCode = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityInfo {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityReferenceInfo {
    pub entityType: CFXMLEntityTypeCode,
}
extern "C" {
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLNodeCreate(
        alloc: CFAllocatorRef,
        xmlType: CFXMLNodeTypeCode,
        dataString: CFStringRef,
        additionalInfoPtr: *const ::std::os::raw::c_void,
        version: CFIndex,
    ) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
}
extern "C" {
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) -> CFXMLNodeRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLParser {
    _unused: [u8; 0],
}
pub type CFXMLParserRef = *mut __CFXMLParser;
pub const CFXMLParserOptions_kCFXMLParserValidateDocument: CFXMLParserOptions = 1;
pub const CFXMLParserOptions_kCFXMLParserSkipMetaData: CFXMLParserOptions = 2;
pub const CFXMLParserOptions_kCFXMLParserReplacePhysicalEntities: CFXMLParserOptions = 4;
pub const CFXMLParserOptions_kCFXMLParserSkipWhitespace: CFXMLParserOptions = 8;
pub const CFXMLParserOptions_kCFXMLParserResolveExternalEntities: CFXMLParserOptions = 16;
pub const CFXMLParserOptions_kCFXMLParserAddImpliedAttributes: CFXMLParserOptions = 32;
pub const CFXMLParserOptions_kCFXMLParserAllOptions: CFXMLParserOptions = 16777215;
pub const CFXMLParserOptions_kCFXMLParserNoOptions: CFXMLParserOptions = 0;
pub type CFXMLParserOptions = CFOptionFlags;
pub const CFXMLParserStatusCode_kCFXMLStatusParseNotBegun: CFXMLParserStatusCode = -2;
pub const CFXMLParserStatusCode_kCFXMLStatusParseInProgress: CFXMLParserStatusCode = -1;
pub const CFXMLParserStatusCode_kCFXMLStatusParseSuccessful: CFXMLParserStatusCode = 0;
pub const CFXMLParserStatusCode_kCFXMLErrorUnexpectedEOF: CFXMLParserStatusCode = 1;
pub const CFXMLParserStatusCode_kCFXMLErrorUnknownEncoding: CFXMLParserStatusCode = 2;
pub const CFXMLParserStatusCode_kCFXMLErrorEncodingConversionFailure: CFXMLParserStatusCode = 3;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedProcessingInstruction: CFXMLParserStatusCode =
    4;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedDTD: CFXMLParserStatusCode = 5;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedName: CFXMLParserStatusCode = 6;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCDSect: CFXMLParserStatusCode = 7;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCloseTag: CFXMLParserStatusCode = 8;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedStartTag: CFXMLParserStatusCode = 9;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedDocument: CFXMLParserStatusCode = 10;
pub const CFXMLParserStatusCode_kCFXMLErrorElementlessDocument: CFXMLParserStatusCode = 11;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedComment: CFXMLParserStatusCode = 12;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCharacterReference: CFXMLParserStatusCode = 13;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedParsedCharacterData: CFXMLParserStatusCode = 14;
pub const CFXMLParserStatusCode_kCFXMLErrorNoData: CFXMLParserStatusCode = 15;
pub type CFXMLParserStatusCode = CFIndex;
pub type CFXMLParserCreateXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        nodeDesc: CFXMLNodeRef,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFXMLParserAddChildCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        parent: *mut ::std::os::raw::c_void,
        child: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserEndXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        xmlType: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserResolveExternalEntityCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        extID: *mut CFXMLExternalID,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFXMLParserHandleErrorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        error: CFXMLParserStatusCode,
        info: *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserCallBacks {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}
pub type CFXMLParserRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFXMLParserReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFXMLParserCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}
extern "C" {
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLParserCreate(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef, context: *mut CFXMLParserContext);
}
extern "C" {
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: *mut CFXMLParserCallBacks);
}
extern "C" {
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
}
extern "C" {
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) -> CFXMLParserStatusCode;
}
extern "C" {
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLParserAbort(
        parser: CFXMLParserRef,
        errorCode: CFXMLParserStatusCode,
        errorDescription: CFStringRef,
    );
}
extern "C" {
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
}
extern "C" {
    pub fn CFXMLTreeCreateFromData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateFromDataWithError(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        errorDict: *mut CFDictionaryRef,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) -> CFDataRef;
}
extern "C" {
    pub fn CFXMLCreateStringByEscapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLCreateStringByUnescapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorDescription: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLocation: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
}
pub type HRESULT = SInt32;
pub type ULONG = UInt32;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type REFIID = CFUUIDBytes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknownVTbl {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
}
extern "C" {
    pub fn sys_cache_control(
        function: ::std::os::raw::c_int,
        start: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sys_icache_invalidate(start: *mut ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn sys_dcache_flush(start: *mut ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn OSReportWithBacktrace(str_: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn OSBacktrace(
        bt: *mut *mut ::std::os::raw::c_void,
        maxAddrs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn OSPrintBacktrace();
}
extern "C" {
    pub fn OSKernelStackRemaining() -> vm_offset_t;
}
pub type OSReturn = kern_return_t;
pub type UInt = ::std::os::raw::c_uint;
pub type SInt = ::std::os::raw::c_int;
pub type OSKextLoadTag = u32;
pub type IOReturn = kern_return_t;
pub const kIODefaultMemoryType: _bindgen_ty_60 = 0;
pub type _bindgen_ty_60 = ::std::os::raw::c_uint;
pub const kIODefaultCache: _bindgen_ty_61 = 0;
pub const kIOInhibitCache: _bindgen_ty_61 = 1;
pub const kIOWriteThruCache: _bindgen_ty_61 = 2;
pub const kIOCopybackCache: _bindgen_ty_61 = 3;
pub const kIOWriteCombineCache: _bindgen_ty_61 = 4;
pub const kIOCopybackInnerCache: _bindgen_ty_61 = 5;
pub const kIOPostedWrite: _bindgen_ty_61 = 6;
pub const kIORealTimeCache: _bindgen_ty_61 = 7;
pub const kIOPostedReordered: _bindgen_ty_61 = 8;
pub const kIOPostedCombinedReordered: _bindgen_ty_61 = 9;
pub type _bindgen_ty_61 = ::std::os::raw::c_uint;
pub const kIOMapAnywhere: _bindgen_ty_62 = 1;
pub const kIOMapCacheMask: _bindgen_ty_62 = 3840;
pub const kIOMapCacheShift: _bindgen_ty_62 = 8;
pub const kIOMapDefaultCache: _bindgen_ty_62 = 0;
pub const kIOMapInhibitCache: _bindgen_ty_62 = 256;
pub const kIOMapWriteThruCache: _bindgen_ty_62 = 512;
pub const kIOMapCopybackCache: _bindgen_ty_62 = 768;
pub const kIOMapWriteCombineCache: _bindgen_ty_62 = 1024;
pub const kIOMapCopybackInnerCache: _bindgen_ty_62 = 1280;
pub const kIOMapPostedWrite: _bindgen_ty_62 = 1536;
pub const kIOMapRealTimeCache: _bindgen_ty_62 = 1792;
pub const kIOMapPostedReordered: _bindgen_ty_62 = 2048;
pub const kIOMapPostedCombinedReordered: _bindgen_ty_62 = 2304;
pub const kIOMapUserOptionsMask: _bindgen_ty_62 = 4095;
pub const kIOMapReadOnly: _bindgen_ty_62 = 4096;
pub const kIOMapStatic: _bindgen_ty_62 = 16777216;
pub const kIOMapReference: _bindgen_ty_62 = 33554432;
pub const kIOMapUnique: _bindgen_ty_62 = 67108864;
pub const kIOMapPrefault: _bindgen_ty_62 = 268435456;
pub const kIOMapOverwrite: _bindgen_ty_62 = 536870912;
pub const kIOMapGuardedMask: _bindgen_ty_62 = 3221225472;
pub const kIOMapGuardedSmall: _bindgen_ty_62 = 1073741824;
pub const kIOMapGuardedLarge: _bindgen_ty_62 = 2147483648;
pub type _bindgen_ty_62 = ::std::os::raw::c_uint;
pub type IOOptionBits = UInt32;
pub type IOFixed = SInt32;
pub type IOVersion = UInt32;
pub type IOItemCount = UInt32;
pub type IOCacheMode = UInt32;
pub type IOByteCount32 = UInt32;
pub type IOByteCount64 = UInt64;
pub type IOPhysicalAddress32 = UInt32;
pub type IOPhysicalAddress64 = UInt64;
pub type IOPhysicalLength32 = UInt32;
pub type IOPhysicalLength64 = UInt64;
pub type IOVirtualAddress = mach_vm_address_t;
pub type IOByteCount = IOByteCount32;
pub type IOLogicalAddress = IOVirtualAddress;
pub type IOPhysicalAddress = IOPhysicalAddress32;
pub type IOPhysicalLength = IOPhysicalLength32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOPhysicalRange {
    pub address: IOPhysicalAddress,
    pub length: IOByteCount,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOVirtualRange {
    pub address: IOVirtualAddress,
    pub length: IOByteCount,
}
pub type IOAddressRange = IOVirtualRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONamedValue {
    pub value: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
pub type IOAlignment = ::std::os::raw::c_uint;
pub type io_connect_t = io_object_t;
pub type io_enumerator_t = io_object_t;
pub type io_ident_t = io_object_t;
pub type io_iterator_t = io_object_t;
pub type io_registry_entry_t = io_object_t;
pub type io_service_t = io_object_t;
pub type uext_object_t = io_object_t;
pub const kNanosecondScale: _bindgen_ty_63 = 1;
pub const kMicrosecondScale: _bindgen_ty_63 = 1000;
pub const kMillisecondScale: _bindgen_ty_63 = 1000000;
pub const kSecondScale: _bindgen_ty_63 = 1000000000;
pub const kTickScale: _bindgen_ty_63 = 10000000;
pub type _bindgen_ty_63 = ::std::os::raw::c_uint;
pub const kIOConnectMethodVarOutputSize: _bindgen_ty_64 = -3;
pub type _bindgen_ty_64 = ::std::os::raw::c_int;
pub type IODeviceNumber = ::std::os::raw::c_uint;
pub const kIOMaxBusStall40usec: _bindgen_ty_65 = 40000;
pub const kIOMaxBusStall30usec: _bindgen_ty_65 = 30000;
pub const kIOMaxBusStall25usec: _bindgen_ty_65 = 25000;
pub const kIOMaxBusStall20usec: _bindgen_ty_65 = 20000;
pub const kIOMaxBusStall10usec: _bindgen_ty_65 = 10000;
pub const kIOMaxBusStall5usec: _bindgen_ty_65 = 5000;
pub const kIOMaxBusStallNone: _bindgen_ty_65 = 0;
pub type _bindgen_ty_65 = ::std::os::raw::c_uint;
pub const kFirstIOKitNotificationType: _bindgen_ty_66 = 100;
pub const kIOServicePublishNotificationType: _bindgen_ty_66 = 100;
pub const kIOServiceMatchedNotificationType: _bindgen_ty_66 = 101;
pub const kIOServiceTerminatedNotificationType: _bindgen_ty_66 = 102;
pub const kIOAsyncCompletionNotificationType: _bindgen_ty_66 = 150;
pub const kIOServiceMessageNotificationType: _bindgen_ty_66 = 160;
pub const kLastIOKitNotificationType: _bindgen_ty_66 = 199;
pub const kIOKitNoticationTypeMask: _bindgen_ty_66 = 4095;
pub const kIOKitNoticationTypeSizeAdjShift: _bindgen_ty_66 = 30;
pub const kIOKitNoticationMsgSizeMask: _bindgen_ty_66 = 3;
pub type _bindgen_ty_66 = ::std::os::raw::c_uint;
pub const kOSNotificationMessageID: _bindgen_ty_67 = 53;
pub const kOSAsyncCompleteMessageID: _bindgen_ty_67 = 57;
pub const kMaxAsyncArgs: _bindgen_ty_67 = 16;
pub type _bindgen_ty_67 = ::std::os::raw::c_uint;
pub const kIOAsyncReservedIndex: _bindgen_ty_68 = 0;
pub const kIOAsyncReservedCount: _bindgen_ty_68 = 1;
pub const kIOAsyncCalloutFuncIndex: _bindgen_ty_68 = 1;
pub const kIOAsyncCalloutRefconIndex: _bindgen_ty_68 = 2;
pub const kIOAsyncCalloutCount: _bindgen_ty_68 = 3;
pub const kIOMatchingCalloutFuncIndex: _bindgen_ty_68 = 1;
pub const kIOMatchingCalloutRefconIndex: _bindgen_ty_68 = 2;
pub const kIOMatchingCalloutCount: _bindgen_ty_68 = 3;
pub const kIOInterestCalloutFuncIndex: _bindgen_ty_68 = 1;
pub const kIOInterestCalloutRefconIndex: _bindgen_ty_68 = 2;
pub const kIOInterestCalloutServiceIndex: _bindgen_ty_68 = 3;
pub const kIOInterestCalloutCount: _bindgen_ty_68 = 4;
pub type _bindgen_ty_68 = ::std::os::raw::c_uint;
pub const kOSAsyncRef64Count: _bindgen_ty_69 = 8;
pub const kOSAsyncRef64Size: _bindgen_ty_69 = 64;
pub type _bindgen_ty_69 = ::std::os::raw::c_uint;
pub type OSAsyncReference64 = [io_user_reference_t; 8usize];
#[repr(C)]
#[derive(Debug)]
pub struct OSNotificationHeader64 {
    pub size: mach_msg_size_t,
    pub type_: natural_t,
    pub reference: OSAsyncReference64,
    pub content: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IOServiceInterestContent64 {
    pub messageType: natural_t,
    pub messageArgument: [io_user_reference_t; 1usize],
}
pub const kOSAsyncRefCount: _bindgen_ty_70 = 8;
pub const kOSAsyncRefSize: _bindgen_ty_70 = 32;
pub type _bindgen_ty_70 = ::std::os::raw::c_uint;
pub type OSAsyncReference = [natural_t; 8usize];
#[repr(C)]
#[derive(Debug)]
pub struct OSNotificationHeader {
    pub size: mach_msg_size_t,
    pub type_: natural_t,
    pub reference: OSAsyncReference,
    pub content: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IOServiceInterestContent {
    pub messageType: natural_t,
    pub messageArgument: [*mut ::std::os::raw::c_void; 1usize],
}
#[repr(C, packed(4))]
pub struct IOAsyncCompletionContent {
    pub result: IOReturn,
    pub args: __IncompleteArrayField<*mut ::std::os::raw::c_void>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONotificationPort {
    _unused: [u8; 0],
}
pub type IONotificationPortRef = *mut IONotificationPort;
pub type IOServiceMatchingCallback = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, iterator: io_iterator_t),
>;
pub type IOServiceInterestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        service: io_service_t,
        messageType: u32,
        messageArgument: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub static kIOMainPortDefault: mach_port_t;
}
extern "C" {
    pub fn IOMainPort(bootstrapPort: mach_port_t, mainPort: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub static kIOMasterPortDefault: mach_port_t;
}
extern "C" {
    pub fn IOMasterPort(bootstrapPort: mach_port_t, mainPort: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn IONotificationPortCreate(mainPort: mach_port_t) -> IONotificationPortRef;
}
extern "C" {
    pub fn IONotificationPortDestroy(notify: IONotificationPortRef);
}
extern "C" {
    pub fn IONotificationPortGetRunLoopSource(notify: IONotificationPortRef) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn IONotificationPortGetMachPort(notify: IONotificationPortRef) -> mach_port_t;
}
extern "C" {
    pub fn IONotificationPortSetImportanceReceiver(notify: IONotificationPortRef) -> kern_return_t;
}
extern "C" {
    pub fn IONotificationPortSetDispatchQueue(notify: IONotificationPortRef, queue: NSObject);
}
extern "C" {
    pub fn IODispatchCalloutFromMessage(
        unused: *mut ::std::os::raw::c_void,
        msg: *mut mach_msg_header_t,
        reference: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOCreateReceivePort(msgType: u32, recvPort: *mut mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectRelease(object: io_object_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectRetain(object: io_object_t) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectGetClass(
        object: io_object_t,
        className: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOObjectCopyClass(object: io_object_t) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectCopySuperclassForClass(classname: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectCopyBundleIdentifierForClass(classname: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn IOObjectConformsTo(
        object: io_object_t,
        className: *mut ::std::os::raw::c_char,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOObjectIsEqualTo(object: io_object_t, anObject: io_object_t) -> boolean_t;
}
extern "C" {
    pub fn IOObjectGetKernelRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOObjectGetUserRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOObjectGetRetainCount(object: io_object_t) -> u32;
}
extern "C" {
    pub fn IOIteratorNext(iterator: io_iterator_t) -> io_object_t;
}
extern "C" {
    pub fn IOIteratorReset(iterator: io_iterator_t);
}
extern "C" {
    pub fn IOIteratorIsValid(iterator: io_iterator_t) -> boolean_t;
}
extern "C" {
    pub fn IOServiceGetMatchingService(
        mainPort: mach_port_t,
        matching: CFDictionaryRef,
    ) -> io_service_t;
}
extern "C" {
    pub fn IOServiceGetMatchingServices(
        mainPort: mach_port_t,
        matching: CFDictionaryRef,
        existing: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddNotification(
        mainPort: mach_port_t,
        notificationType: *mut ::std::os::raw::c_char,
        matching: CFDictionaryRef,
        wakePort: mach_port_t,
        reference: usize,
        notification: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddMatchingNotification(
        notifyPort: IONotificationPortRef,
        notificationType: *mut ::std::os::raw::c_char,
        matching: CFDictionaryRef,
        callback: IOServiceMatchingCallback,
        refCon: *mut ::std::os::raw::c_void,
        notification: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceAddInterestNotification(
        notifyPort: IONotificationPortRef,
        service: io_service_t,
        interestType: *mut ::std::os::raw::c_char,
        callback: IOServiceInterestCallback,
        refCon: *mut ::std::os::raw::c_void,
        notification: *mut io_object_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceMatchPropertyTable(
        service: io_service_t,
        matching: CFDictionaryRef,
        matches: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceGetBusyState(service: io_service_t, busyState: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceWaitQuiet(
        service: io_service_t,
        waitTime: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitGetBusyState(mainPort: mach_port_t, busyState: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn IOKitWaitQuietWithOptions(
        mainPort: mach_port_t,
        waitTime: *mut mach_timespec_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOKitWaitQuiet(mainPort: mach_port_t, waitTime: *mut mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceOpen(
        service: io_service_t,
        owningTask: task_port_t,
        type_: u32,
        connect: *mut io_connect_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceRequestProbe(service: io_service_t, options: u32) -> kern_return_t;
}
pub const kIOServiceInteractionAllowed: _bindgen_ty_71 = 1;
pub type _bindgen_ty_71 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOServiceAuthorize(service: io_service_t, options: u32) -> kern_return_t;
}
extern "C" {
    pub fn IOServiceOpenAsFileDescriptor(
        service: io_service_t,
        oflag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn IOServiceClose(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectAddRef(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectRelease(connect: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectGetService(connect: io_connect_t, service: *mut io_service_t) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetNotificationPort(
        connect: io_connect_t,
        type_: u32,
        port: mach_port_t,
        reference: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectMapMemory(
        connect: io_connect_t,
        memoryType: u32,
        intoTask: task_port_t,
        atAddress: *mut mach_vm_address_t,
        ofSize: *mut mach_vm_size_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectMapMemory64(
        connect: io_connect_t,
        memoryType: u32,
        intoTask: task_port_t,
        atAddress: *mut mach_vm_address_t,
        ofSize: *mut mach_vm_size_t,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectUnmapMemory(
        connect: io_connect_t,
        memoryType: u32,
        fromTask: task_port_t,
        atAddress: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectUnmapMemory64(
        connect: io_connect_t,
        memoryType: u32,
        fromTask: task_port_t,
        atAddress: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetCFProperties(connect: io_connect_t, properties: CFTypeRef) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectSetCFProperty(
        connect: io_connect_t,
        propertyName: CFStringRef,
        property: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallMethod(
        connection: mach_port_t,
        selector: u32,
        input: *const u64,
        inputCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        output: *mut u64,
        outputCnt: *mut u32,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        input: *const u64,
        inputCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        output: *mut u64,
        outputCnt: *mut u32,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallStructMethod(
        connection: mach_port_t,
        selector: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncStructMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        inputStruct: *const ::std::os::raw::c_void,
        inputStructCnt: usize,
        outputStruct: *mut ::std::os::raw::c_void,
        outputStructCnt: *mut usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallScalarMethod(
        connection: mach_port_t,
        selector: u32,
        input: *const u64,
        inputCnt: u32,
        output: *mut u64,
        outputCnt: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectCallAsyncScalarMethod(
        connection: mach_port_t,
        selector: u32,
        wake_port: mach_port_t,
        reference: *mut u64,
        referenceCnt: u32,
        input: *const u64,
        inputCnt: u32,
        output: *mut u64,
        outputCnt: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap0(connect: io_connect_t, index: u32) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap1(connect: io_connect_t, index: u32, p1: usize) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap2(connect: io_connect_t, index: u32, p1: usize, p2: usize)
        -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap3(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap4(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap5(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
        p5: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectTrap6(
        connect: io_connect_t,
        index: u32,
        p1: usize,
        p2: usize,
        p3: usize,
        p4: usize,
        p5: usize,
        p6: usize,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOConnectAddClient(connect: io_connect_t, client: io_connect_t) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryGetRootEntry(mainPort: mach_port_t) -> io_registry_entry_t;
}
extern "C" {
    pub fn IORegistryEntryFromPath(
        mainPort: mach_port_t,
        path: *mut ::std::os::raw::c_char,
    ) -> io_registry_entry_t;
}
extern "C" {
    pub fn IORegistryEntryCopyFromPath(
        mainPort: mach_port_t,
        path: CFStringRef,
    ) -> io_registry_entry_t;
}
pub const kIORegistryIterateRecursively: _bindgen_ty_72 = 1;
pub const kIORegistryIterateParents: _bindgen_ty_72 = 2;
pub type _bindgen_ty_72 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IORegistryCreateIterator(
        mainPort: mach_port_t,
        plane: *mut ::std::os::raw::c_char,
        options: IOOptionBits,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        options: IOOptionBits,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryIteratorEnterEntry(iterator: io_iterator_t) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryIteratorExitEntry(iterator: io_iterator_t) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetName(
        entry: io_registry_entry_t,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetNameInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetLocationInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        location: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetPath(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        path: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCopyPath(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
    ) -> CFStringRef;
}
extern "C" {
    pub fn IORegistryEntryGetRegistryEntryID(
        entry: io_registry_entry_t,
        entryID: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateCFProperties(
        entry: io_registry_entry_t,
        properties: *mut CFMutableDictionaryRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryCreateCFProperty(
        entry: io_registry_entry_t,
        key: CFStringRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IORegistryEntrySearchCFProperty(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        key: CFStringRef,
        allocator: CFAllocatorRef,
        options: IOOptionBits,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IORegistryEntryGetProperty(
        entry: io_registry_entry_t,
        propertyName: *mut ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntrySetCFProperties(
        entry: io_registry_entry_t,
        properties: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntrySetCFProperty(
        entry: io_registry_entry_t,
        propertyName: CFStringRef,
        property: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetChildIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetChildEntry(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        child: *mut io_registry_entry_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetParentIterator(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        iterator: *mut io_iterator_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryGetParentEntry(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
        parent: *mut io_registry_entry_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IORegistryEntryInPlane(
        entry: io_registry_entry_t,
        plane: *mut ::std::os::raw::c_char,
    ) -> boolean_t;
}
extern "C" {
    pub fn IOServiceMatching(name: *const ::std::os::raw::c_char) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOServiceNameMatching(name: *const ::std::os::raw::c_char) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOBSDNameMatching(
        mainPort: mach_port_t,
        options: u32,
        bsdName: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOOpenFirmwarePathMatching(
        mainPort: mach_port_t,
        options: u32,
        path: *const ::std::os::raw::c_char,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IORegistryEntryIDMatching(entryID: u64) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn IOServiceOFPathToBSDName(
        mainPort: mach_port_t,
        openFirmwarePath: *mut ::std::os::raw::c_char,
        bsdName: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
pub type IOAsyncCallback0 = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, result: IOReturn),
>;
pub type IOAsyncCallback1 = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        arg0: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOAsyncCallback2 = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        arg0: *mut ::std::os::raw::c_void,
        arg1: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOAsyncCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        result: IOReturn,
        args: *mut *mut ::std::os::raw::c_void,
        numArgs: u32,
    ),
>;
extern "C" {
    pub fn OSGetNotificationFromMessage(
        msg: *mut mach_msg_header_t,
        index: u32,
        type_: *mut u32,
        reference: *mut usize,
        content: *mut *mut ::std::os::raw::c_void,
        size: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueSendData(
        mainPort: mach_port_t,
        flag: u32,
        buffer: *const ::std::os::raw::c_char,
        size: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueTerminate(
        mainPort: mach_port_t,
        flag: u32,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueGetData(
        mainPort: mach_port_t,
        flag: u32,
        buffer: *mut *mut ::std::os::raw::c_char,
        size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueModuleLoaded(
        mainPort: mach_port_t,
        name: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOCatalogueReset(mainPort: mach_port_t, flag: u32) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IODataQueueEntry {
    pub size: UInt32,
    pub data: [UInt8; 4usize],
}
pub type IODataQueueEntry = _IODataQueueEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IODataQueueMemory {
    pub queueSize: UInt32,
    pub head: UInt32,
    pub tail: UInt32,
    pub queue: [IODataQueueEntry; 1usize],
}
pub type IODataQueueMemory = _IODataQueueMemory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IODataQueueAppendix {
    pub version: UInt32,
    pub msgh: mach_msg_header_t,
}
pub type IODataQueueAppendix = _IODataQueueAppendix;
extern "C" {
    pub fn IODataQueueDataAvailable(dataQueue: *mut IODataQueueMemory) -> Boolean;
}
extern "C" {
    pub fn IODataQueuePeek(dataQueue: *mut IODataQueueMemory) -> *mut IODataQueueEntry;
}
extern "C" {
    pub fn IODataQueueDequeue(
        dataQueue: *mut IODataQueueMemory,
        data: *mut ::std::os::raw::c_void,
        dataSize: *mut u32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODataQueueWaitForAvailableData(
        dataQueue: *mut IODataQueueMemory,
        notificationPort: mach_port_t,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODataQueueAllocateNotificationPort() -> mach_port_t;
}
extern "C" {
    pub fn IODataQueueEnqueue(
        dataQueue: *mut IODataQueueMemory,
        data: *mut ::std::os::raw::c_void,
        dataSize: u32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODataQueueSetNotificationPort(
        dataQueue: *mut IODataQueueMemory,
        notifyPort: mach_port_t,
    ) -> IOReturn;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOCFPlugInInterfaceStruct {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub Probe: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            propertyTable: CFDictionaryRef,
            service: io_service_t,
            order: *mut SInt32,
        ) -> IOReturn,
    >,
    pub Start: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            propertyTable: CFDictionaryRef,
            service: io_service_t,
        ) -> IOReturn,
    >,
    pub Stop: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> IOReturn,
    >,
}
pub type IOCFPlugInInterface = IOCFPlugInInterfaceStruct;
extern "C" {
    pub fn IOCreatePlugInInterfaceForService(
        service: io_service_t,
        pluginType: CFUUIDRef,
        interfaceType: CFUUIDRef,
        theInterface: *mut *mut *mut IOCFPlugInInterface,
        theScore: *mut SInt32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IODestroyPlugInInterface(interface: *mut *mut IOCFPlugInInterface) -> kern_return_t;
}
pub const kIOCFSerializeToBinary: _bindgen_ty_73 = 1;
pub type _bindgen_ty_73 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOCFSerialize(object: CFTypeRef, options: CFOptionFlags) -> CFDataRef;
}
extern "C" {
    pub fn IOURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IOURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn IOURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut i32,
    ) -> Boolean;
}
pub const IOURLError_kIOURLUnknownError: IOURLError = -10;
pub const IOURLError_kIOURLUnknownSchemeError: IOURLError = -11;
pub const IOURLError_kIOURLResourceNotFoundError: IOURLError = -12;
pub const IOURLError_kIOURLResourceAccessViolationError: IOURLError = -13;
pub const IOURLError_kIOURLRemoteHostUnavailableError: IOURLError = -14;
pub const IOURLError_kIOURLImproperArgumentsError: IOURLError = -15;
pub const IOURLError_kIOURLUnknownPropertyKeyError: IOURLError = -16;
pub const IOURLError_kIOURLPropertyKeyUnavailableError: IOURLError = -17;
pub const IOURLError_kIOURLTimeoutError: IOURLError = -18;
pub type IOURLError = ::std::os::raw::c_int;
pub const kIOCatalogAddDrivers: _bindgen_ty_74 = 1;
pub const kIOCatalogAddDriversNoMatch: _bindgen_ty_74 = 2;
pub const kIOCatalogRemoveDrivers: _bindgen_ty_74 = 3;
pub const kIOCatalogRemoveDriversNoMatch: _bindgen_ty_74 = 4;
pub const kIOCatalogStartMatching__Removed: _bindgen_ty_74 = 5;
pub const kIOCatalogRemoveKernelLinker__Removed: _bindgen_ty_74 = 6;
pub const kIOCatalogKextdActive: _bindgen_ty_74 = 7;
pub const kIOCatalogKextdFinishedLaunching: _bindgen_ty_74 = 8;
pub const kIOCatalogResetDrivers: _bindgen_ty_74 = 9;
pub const kIOCatalogResetDriversNoMatch: _bindgen_ty_74 = 10;
pub type _bindgen_ty_74 = ::std::os::raw::c_uint;
pub const kIOCatalogGetContents: _bindgen_ty_75 = 1;
pub const kIOCatalogGetModuleDemandList: _bindgen_ty_75 = 2;
pub const kIOCatalogGetCacheMissList: _bindgen_ty_75 = 3;
pub const kIOCatalogGetROMMkextList: _bindgen_ty_75 = 4;
pub type _bindgen_ty_75 = ::std::os::raw::c_uint;
pub const kIOCatalogResetDefault: _bindgen_ty_76 = 1;
pub type _bindgen_ty_76 = ::std::os::raw::c_uint;
pub const kIOCatalogModuleUnload: _bindgen_ty_77 = 1;
pub const kIOCatalogModuleTerminate: _bindgen_ty_77 = 2;
pub const kIOCatalogServiceTerminate: _bindgen_ty_77 = 3;
pub type _bindgen_ty_77 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOCFUnserialize(
        buffer: *const ::std::os::raw::c_char,
        allocator: CFAllocatorRef,
        options: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IOCFUnserializeBinary(
        buffer: *const ::std::os::raw::c_char,
        bufferSize: usize,
        allocator: CFAllocatorRef,
        options: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IOCFUnserializeWithSize(
        buffer: *const ::std::os::raw::c_char,
        bufferSize: usize,
        allocator: CFAllocatorRef,
        options: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFTypeRef;
}
pub type IOMessage = UInt32;
pub type OSObjectRef = u64;
pub const kIORPCVersion190615: _bindgen_ty_78 = 1302509196;
pub const kIORPCVersion190615Reply: _bindgen_ty_78 = 1302509197;
pub type _bindgen_ty_78 = ::std::os::raw::c_uint;
pub const kIORPCMessageRemote: _bindgen_ty_79 = 1;
pub const kIORPCMessageLocalHost: _bindgen_ty_79 = 2;
pub const kIORPCMessageKernel: _bindgen_ty_79 = 4;
pub const kIORPCMessageOneway: _bindgen_ty_79 = 8;
pub const kIORPCMessageObjectRefs: _bindgen_ty_79 = 16;
pub const kIORPCMessageOnqueue: _bindgen_ty_79 = 32;
pub const kIORPCMessageError: _bindgen_ty_79 = 64;
pub const kIORPCMessageSimpleReply: _bindgen_ty_79 = 128;
pub type _bindgen_ty_79 = ::std::os::raw::c_uint;
pub const kIORPCMessageIDKernel: _bindgen_ty_80 = 9223372036854775808;
pub type _bindgen_ty_80 = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug)]
pub struct IORPCMessageMach {
    pub msgh: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: __IncompleteArrayField<mach_msg_port_descriptor_t>,
}
#[repr(C, packed(4))]
pub struct IORPCMessage {
    pub msgid: u64,
    pub flags: u64,
    pub objectRefs: u64,
    pub objects: __IncompleteArrayField<OSObjectRef>,
}
extern "C" {
    pub fn IORPCMessageFromMach(msg: *mut IORPCMessageMach, reply: bool) -> *mut IORPCMessage;
}
#[repr(C)]
#[derive(Debug)]
pub struct IORPCMessageErrorReturnContent {
    pub hdr: IORPCMessage,
    pub result: kern_return_t,
    pub pad: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct IORPCMessageErrorReturn {
    pub mach: IORPCMessageMach,
    pub content: IORPCMessageErrorReturnContent,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IORPC {
    pub message: *mut IORPCMessageMach,
    pub reply: *mut IORPCMessageMach,
    pub sendSize: u32,
    pub replySize: u32,
}
pub const kOSClassCanRemote: _bindgen_ty_81 = 1;
pub type _bindgen_ty_81 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct OSClassDescription {
    pub descriptionSize: u32,
    pub name: [::std::os::raw::c_char; 96usize],
    pub superName: [::std::os::raw::c_char; 96usize],
    pub methodOptionsSize: u32,
    pub methodOptionsOffset: u32,
    pub metaMethodOptionsSize: u32,
    pub metaMethodOptionsOffset: u32,
    pub queueNamesSize: u32,
    pub queueNamesOffset: u32,
    pub methodNamesSize: u32,
    pub methodNamesOffset: u32,
    pub metaMethodNamesSize: u32,
    pub metaMethodNamesOffset: u32,
    pub flags: u64,
    pub resv1: [u64; 8usize],
    pub methodOptions: __IncompleteArrayField<u64>,
    pub metaMethodOptions: __IncompleteArrayField<u64>,
    pub dispatchNames: __IncompleteArrayField<::std::os::raw::c_char>,
    pub methodNames: __IncompleteArrayField<::std::os::raw::c_char>,
    pub metaMethodNames: __IncompleteArrayField<::std::os::raw::c_char>,
}
pub const _IOAudioEngineMemory_kIOAudioStatusBuffer: _IOAudioEngineMemory = 0;
pub const _IOAudioEngineMemory_kIOAudioSampleBuffer: _IOAudioEngineMemory = 1;
pub const _IOAudioEngineMemory_kIOAudioMixBuffer: _IOAudioEngineMemory = 2;
pub const _IOAudioEngineMemory_kIOAudioBytesInInputBuffer: _IOAudioEngineMemory = 3;
pub const _IOAudioEngineMemory_kIOAudioBytesInOutputBuffer: _IOAudioEngineMemory = 4;
pub type _IOAudioEngineMemory = ::std::os::raw::c_uint;
pub use self::_IOAudioEngineMemory as IOAudioEngineMemory;
pub const _IOAudioEngineCalls_kIOAudioEngineCallRegisterClientBuffer: _IOAudioEngineCalls = 0;
pub const _IOAudioEngineCalls_kIOAudioEngineCallUnregisterClientBuffer: _IOAudioEngineCalls = 1;
pub const _IOAudioEngineCalls_kIOAudioEngineCallGetConnectionID: _IOAudioEngineCalls = 2;
pub const _IOAudioEngineCalls_kIOAudioEngineCallStart: _IOAudioEngineCalls = 3;
pub const _IOAudioEngineCalls_kIOAudioEngineCallStop: _IOAudioEngineCalls = 4;
pub const _IOAudioEngineCalls_kIOAudioEngineCallGetNearestStartTime: _IOAudioEngineCalls = 5;
pub type _IOAudioEngineCalls = ::std::os::raw::c_uint;
pub use self::_IOAudioEngineCalls as IOAudioEngineCalls;
pub const _IOAudioEngineTraps_kIOAudioEngineTrapPerformClientIO: _IOAudioEngineTraps = 0;
pub type _IOAudioEngineTraps = ::std::os::raw::c_uint;
pub use self::_IOAudioEngineTraps as IOAudioEngineTraps;
pub const _IOAudioEngineNotifications_kIOAudioEngineAllNotifications: _IOAudioEngineNotifications =
    0;
pub const _IOAudioEngineNotifications_kIOAudioEngineStreamFormatChangeNotification:
    _IOAudioEngineNotifications = 1;
pub const _IOAudioEngineNotifications_kIOAudioEngineChangeNotification:
    _IOAudioEngineNotifications = 2;
pub const _IOAudioEngineNotifications_kIOAudioEngineStartedNotification:
    _IOAudioEngineNotifications = 3;
pub const _IOAudioEngineNotifications_kIOAudioEngineStoppedNotification:
    _IOAudioEngineNotifications = 4;
pub const _IOAudioEngineNotifications_kIOAudioEnginePausedNotification:
    _IOAudioEngineNotifications = 5;
pub const _IOAudioEngineNotifications_kIOAudioEngineResumedNotification:
    _IOAudioEngineNotifications = 6;
pub type _IOAudioEngineNotifications = ::std::os::raw::c_uint;
pub use self::_IOAudioEngineNotifications as IOAudioEngineNotifications;
pub const _IOAudioEngineState_kIOAudioEngineStopped: _IOAudioEngineState = 0;
pub const _IOAudioEngineState_kIOAudioEngineRunning: _IOAudioEngineState = 1;
pub const _IOAudioEngineState_kIOAudioEnginePaused: _IOAudioEngineState = 2;
pub const _IOAudioEngineState_kIOAudioEngineResumed: _IOAudioEngineState = 3;
pub type _IOAudioEngineState = ::std::os::raw::c_uint;
pub use self::_IOAudioEngineState as IOAudioEngineState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioEngineStatus {
    pub fVersion: UInt32,
    pub fCurrentLoopCount: UInt32,
    pub fLastLoopTime: AbsoluteTime,
    pub fEraseHeadSampleFrame: UInt32,
}
pub type IOAudioEngineStatus = _IOAudioEngineStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioStreamFormat {
    pub fNumChannels: UInt32,
    pub fSampleFormat: UInt32,
    pub fNumericRepresentation: UInt32,
    pub fBitDepth: UInt8,
    pub fBitWidth: UInt8,
    pub fAlignment: UInt8,
    pub fByteOrder: UInt8,
    pub fIsMixable: UInt8,
    pub fDriverTag: UInt32,
}
pub type IOAudioStreamFormat = _IOAudioStreamFormat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioStreamFormatExtension {
    pub fVersion: UInt32,
    pub fFlags: UInt32,
    pub fFramesPerPacket: UInt32,
    pub fBytesPerPacket: UInt32,
}
pub type IOAudioStreamFormatExtension = _IOAudioStreamFormatExtension;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioBufferDataDescriptor {
    pub fActualDataByteSize: UInt32,
    pub fActualNumSampleFrames: UInt32,
    pub fTotalDataByteSize: UInt32,
    pub fNominalDataByteSize: UInt32,
    pub fData: [UInt8; 1usize],
}
pub type IOAudioBufferDataDescriptor = _IOAudioBufferDataDescriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioStreamDataDescriptor {
    pub fVersion: UInt32,
    pub fNumberOfStreams: UInt32,
    pub fStreamLength: [UInt32; 1usize],
}
pub type IOAudioStreamDataDescriptor = _IOAudioStreamDataDescriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioSampleIntervalDescriptor {
    pub sampleIntervalHi: UInt32,
    pub sampleIntervalLo: UInt32,
}
pub type IOAudioSampleIntervalDescriptor = _IOAudioSampleIntervalDescriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioSMPTETime {
    pub fSubframes: SInt16,
    pub fSubframeDivisor: SInt16,
    pub fCounter: UInt32,
    pub fType: UInt32,
    pub fFlags: UInt32,
    pub fHours: SInt16,
    pub fMinutes: SInt16,
    pub fSeconds: SInt16,
    pub fFrames: SInt16,
}
pub type IOAudioSMPTETime = _IOAudioSMPTETime;
pub const kIOAudioSMPTETimeType24: _bindgen_ty_82 = 0;
pub const kIOAudioSMPTETimeType25: _bindgen_ty_82 = 1;
pub const kIOAudioSMPTETimeType30Drop: _bindgen_ty_82 = 2;
pub const kIOAudioSMPTETimeType30: _bindgen_ty_82 = 3;
pub const kIOAudioSMPTETimeType2997: _bindgen_ty_82 = 4;
pub const kIOAudioSMPTETimeType2997Drop: _bindgen_ty_82 = 5;
pub const kIOAudioSMPTETimeType60: _bindgen_ty_82 = 6;
pub const kIOAudioSMPTETimeType5994: _bindgen_ty_82 = 7;
pub const kIOAudioSMPTETimeType60Drop: _bindgen_ty_82 = 8;
pub const kIOAudioSMPTETimeType5994Drop: _bindgen_ty_82 = 9;
pub const kIOAudioSMPTETimeType50: _bindgen_ty_82 = 10;
pub const kIOAudioSMPTETimeType2398: _bindgen_ty_82 = 11;
pub type _bindgen_ty_82 = ::std::os::raw::c_uint;
pub const kIOAudioSMPTETimeValid: _bindgen_ty_83 = 1;
pub const kIOAudioSMPTETimeRunning: _bindgen_ty_83 = 2;
pub type _bindgen_ty_83 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioTimeStamp {
    pub fSampleTime: UInt64,
    pub fHostTime: UInt64,
    pub fRateScalar: UInt64,
    pub fWordClockTime: UInt64,
    pub fSMPTETime: IOAudioSMPTETime,
    pub fFlags: UInt32,
    pub fReserved: UInt32,
}
pub type IOAudioTimeStamp = _IOAudioTimeStamp;
pub const kIOAudioTimeStampSampleTimeValid: _bindgen_ty_84 = 1;
pub const kIOAudioTimeStampHostTimeValid: _bindgen_ty_84 = 2;
pub const kIOAudioTimeStampRateScalarValid: _bindgen_ty_84 = 4;
pub const kIOAudioTimeStampWordClockTimeValid: _bindgen_ty_84 = 8;
pub const kIOAudioTimeStampSMPTETimeValid: _bindgen_ty_84 = 16;
pub type _bindgen_ty_84 = ::std::os::raw::c_uint;
pub const kIOAudioTimeStampSampleHostTimeValid: _bindgen_ty_85 = 3;
pub type _bindgen_ty_85 = ::std::os::raw::c_uint;
pub const _IOAudioStreamDirection_kIOAudioStreamDirectionOutput: _IOAudioStreamDirection = 0;
pub const _IOAudioStreamDirection_kIOAudioStreamDirectionInput: _IOAudioStreamDirection = 1;
pub type _IOAudioStreamDirection = ::std::os::raw::c_uint;
pub use self::_IOAudioStreamDirection as IOAudioStreamDirection;
pub const kIOAudioDeviceCanBeDefaultNothing: _bindgen_ty_86 = 0;
pub const kIOAudioDeviceCanBeDefaultInput: _bindgen_ty_86 = 1;
pub const kIOAudioDeviceCanBeDefaultOutput: _bindgen_ty_86 = 2;
pub const kIOAudioDeviceCanBeSystemOutput: _bindgen_ty_86 = 4;
pub type _bindgen_ty_86 = ::std::os::raw::c_uint;
pub const _IOAudioControlCalls_kIOAudioControlCallSetValue: _IOAudioControlCalls = 0;
pub const _IOAudioControlCalls_kIOAudioControlCallGetValue: _IOAudioControlCalls = 1;
pub type _IOAudioControlCalls = ::std::os::raw::c_uint;
pub use self::_IOAudioControlCalls as IOAudioControlCalls;
pub const _IOAudioControlNotifications_kIOAudioControlValueChangeNotification:
    _IOAudioControlNotifications = 0;
pub const _IOAudioControlNotifications_kIOAudioControlRangeChangeNotification:
    _IOAudioControlNotifications = 1;
pub type _IOAudioControlNotifications = ::std::os::raw::c_uint;
pub use self::_IOAudioControlNotifications as IOAudioControlNotifications;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioNotificationMessage {
    pub messageHeader: mach_msg_header_t,
    pub type_: UInt32,
    pub ref_: UInt32,
    pub sender: *mut ::std::os::raw::c_void,
}
pub type IOAudioNotificationMessage = _IOAudioNotificationMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOAudioSampleRate {
    pub whole: UInt32,
    pub fraction: UInt32,
}
pub type IOAudioSampleRate = _IOAudioSampleRate;
pub const kIOAudioPortTypeOutput: _bindgen_ty_87 = 1869968496;
pub const kIOAudioPortTypeInput: _bindgen_ty_87 = 1768845428;
pub const kIOAudioPortTypeMixer: _bindgen_ty_87 = 1835628658;
pub const kIOAudioPortTypePassThru: _bindgen_ty_87 = 1885434739;
pub const kIOAudioPortTypeProcessing: _bindgen_ty_87 = 1886547811;
pub type _bindgen_ty_87 = ::std::os::raw::c_uint;
pub const kIOAudioOutputPortSubTypeInternalSpeaker: _bindgen_ty_88 = 1769173099;
pub const kIOAudioOutputPortSubTypeExternalSpeaker: _bindgen_ty_88 = 1702064235;
pub const kIOAudioOutputPortSubTypeHeadphones: _bindgen_ty_88 = 1751412846;
pub const kIOAudioOutputPortSubTypeLine: _bindgen_ty_88 = 1818848869;
pub const kIOAudioOutputPortSubTypeSPDIF: _bindgen_ty_88 = 1936745574;
pub const kIOAudioInputPortSubTypeInternalMicrophone: _bindgen_ty_88 = 1768778083;
pub const kIOAudioInputPortSubTypeExternalMicrophone: _bindgen_ty_88 = 1701669219;
pub const kIOAudioInputPortSubTypeCD: _bindgen_ty_88 = 1667506208;
pub const kIOAudioInputPortSubTypeLine: _bindgen_ty_88 = 1818848869;
pub const kIOAudioInputPortSubTypeSPDIF: _bindgen_ty_88 = 1936745574;
pub type _bindgen_ty_88 = ::std::os::raw::c_uint;
pub const kIOAudioControlTypeLevel: _bindgen_ty_89 = 1818588780;
pub const kIOAudioControlTypeToggle: _bindgen_ty_89 = 1953458028;
pub const kIOAudioControlTypeJack: _bindgen_ty_89 = 1784767339;
pub const kIOAudioControlTypeSelector: _bindgen_ty_89 = 1936483188;
pub type _bindgen_ty_89 = ::std::os::raw::c_uint;
pub const kIOAudioLevelControlSubTypeVolume: _bindgen_ty_90 = 1986817381;
pub const kIOAudioLevelControlSubTypeLFEVolume: _bindgen_ty_90 = 1937072758;
pub const kIOAudioLevelControlSubTypePRAMVolume: _bindgen_ty_90 = 1886544237;
pub const kIOAudioToggleControlSubTypeMute: _bindgen_ty_90 = 1836414053;
pub const kIOAudioToggleControlSubTypeSolo: _bindgen_ty_90 = 1936682095;
pub const kIOAudioToggleControlSubTypeLFEMute: _bindgen_ty_90 = 1937072749;
pub const kIOAudioToggleControlSubTypeiSubAttach: _bindgen_ty_90 = 1635017576;
pub const kIOAudioToggleControlSubTypePhantomPower: _bindgen_ty_90 = 1885888878;
pub const kIOAudioToggleControlSubTypePhaseInvert: _bindgen_ty_90 = 1885893481;
pub const kIOAudioSelectorControlSubTypeOutput: _bindgen_ty_90 = 1869968496;
pub const kIOAudioSelectorControlSubTypeInput: _bindgen_ty_90 = 1768845428;
pub const kIOAudioSelectorControlSubTypeClockSource: _bindgen_ty_90 = 1668047723;
pub const kIOAudioSelectorControlSubTypeDestination: _bindgen_ty_90 = 1684370292;
pub const kIOAudioSelectorControlSubTypeChannelNominalLineLevel: _bindgen_ty_90 = 1852597622;
pub const kIOAudioSelectorControlSubTypeChannelLevelPlus4dBu: _bindgen_ty_90 = 878994037;
pub const kIOAudioSelectorControlSubTypeChannelLevelMinus10dBV: _bindgen_ty_90 = 825255010;
pub const kIOAudioSelectorControlSubTypeChannelLevelMinus20dBV: _bindgen_ty_90 = 842032226;
pub const kIOAudioSelectorControlSubTypeChannelLevelMicLevel: _bindgen_ty_90 = 1835623276;
pub const kIOAudioSelectorControlSubTypeChannelLevelInstrumentLevel: _bindgen_ty_90 = 1769174124;
pub const kIOAudioSelectorControlSubTypeChannelHighPassFilter: _bindgen_ty_90 = 1751740518;
pub type _bindgen_ty_90 = ::std::os::raw::c_uint;
pub const kIOAudioControlUsageOutput: _bindgen_ty_91 = 1869968496;
pub const kIOAudioControlUsageInput: _bindgen_ty_91 = 1768845428;
pub const kIOAudioControlUsagePassThru: _bindgen_ty_91 = 1885434739;
pub const kIOAudioControlUsageCoreAudioProperty: _bindgen_ty_91 = 1886547824;
pub type _bindgen_ty_91 = ::std::os::raw::c_uint;
pub const kIOAudioControlChannelNumberInactive: _bindgen_ty_92 = -1;
pub const kIOAudioControlChannelIDAll: _bindgen_ty_92 = 0;
pub const kIOAudioControlChannelIDDefaultLeft: _bindgen_ty_92 = 1;
pub const kIOAudioControlChannelIDDefaultRight: _bindgen_ty_92 = 2;
pub const kIOAudioControlChannelIDDefaultCenter: _bindgen_ty_92 = 3;
pub const kIOAudioControlChannelIDDefaultLeftRear: _bindgen_ty_92 = 4;
pub const kIOAudioControlChannelIDDefaultRightRear: _bindgen_ty_92 = 5;
pub const kIOAudioControlChannelIDDefaultSub: _bindgen_ty_92 = 6;
pub const kIOAudioControlChannelIDDefaultFrontLeftCenter: _bindgen_ty_92 = 7;
pub const kIOAudioControlChannelIDDefaultFrontRightCenter: _bindgen_ty_92 = 8;
pub const kIOAudioControlChannelIDDefaultRearCenter: _bindgen_ty_92 = 9;
pub const kIOAudioControlChannelIDDefaultSurroundLeft: _bindgen_ty_92 = 10;
pub const kIOAudioControlChannelIDDefaultSurroundRight: _bindgen_ty_92 = 11;
pub type _bindgen_ty_92 = ::std::os::raw::c_int;
pub const kIOAudioSelectorControlSelectionValueNone: _bindgen_ty_93 = 1852796517;
pub const kIOAudioSelectorControlSelectionValueInternalSpeaker: _bindgen_ty_93 = 1769173099;
pub const kIOAudioSelectorControlSelectionValueExternalSpeaker: _bindgen_ty_93 = 1702064235;
pub const kIOAudioSelectorControlSelectionValueHeadphones: _bindgen_ty_93 = 1751412846;
pub const kIOAudioSelectorControlSelectionValueInternalMicrophone: _bindgen_ty_93 = 1768778083;
pub const kIOAudioSelectorControlSelectionValueExternalMicrophone: _bindgen_ty_93 = 1701669219;
pub const kIOAudioSelectorControlSelectionValueCD: _bindgen_ty_93 = 1667506208;
pub const kIOAudioSelectorControlSelectionValueLine: _bindgen_ty_93 = 1818848869;
pub const kIOAudioSelectorControlSelectionValueSPDIF: _bindgen_ty_93 = 1936745574;
pub type _bindgen_ty_93 = ::std::os::raw::c_uint;
pub const kIOAudioStreamSampleFormatLinearPCM: _bindgen_ty_94 = 1819304813;
pub const kIOAudioStreamSampleFormatIEEEFloat: _bindgen_ty_94 = 1768252773;
pub const kIOAudioStreamSampleFormatALaw: _bindgen_ty_94 = 1634492791;
pub const kIOAudioStreamSampleFormatMuLaw: _bindgen_ty_94 = 1970037111;
pub const kIOAudioStreamSampleFormatMPEG: _bindgen_ty_94 = 1836082535;
pub const kIOAudioStreamSampleFormatAC3: _bindgen_ty_94 = 1633889587;
pub const kIOAudioStreamSampleFormat1937AC3: _bindgen_ty_94 = 1667326771;
pub const kIOAudioStreamSampleFormat1937MPEG1: _bindgen_ty_94 = 1836082993;
pub const kIOAudioStreamSampleFormat1937MPEG2: _bindgen_ty_94 = 1836082994;
pub const kIOAudioStreamSampleFormatTimeCode: _bindgen_ty_94 = 1953066341;
pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
pub const kIOAudioStreamNumericRepresentationSignedInt: _bindgen_ty_95 = 1936289396;
pub const kIOAudioStreamNumericRepresentationUnsignedInt: _bindgen_ty_95 = 1969843828;
pub const kIOAudioStreamNumericRepresentationIEEE754Float: _bindgen_ty_95 = 1718382452;
pub type _bindgen_ty_95 = ::std::os::raw::c_uint;
pub const kIOAudioClockSelectorTypeInternal: _bindgen_ty_96 = 1768846368;
pub const kIOAudioClockSelectorTypeExternal: _bindgen_ty_96 = 1702392864;
pub const kIOAudioClockSelectorTypeAESEBU: _bindgen_ty_96 = 1634951797;
pub const kIOAudioClockSelectorTypeTOSLink: _bindgen_ty_96 = 1953461100;
pub const kIOAudioClockSelectorTypeSPDIF: _bindgen_ty_96 = 1936745574;
pub const kIOAudioClockSelectorTypeADATOptical: _bindgen_ty_96 = 1633973359;
pub const kIOAudioClockSelectorTypeADAT9Pin: _bindgen_ty_96 = 1633973305;
pub const kIOAudioClockSelectorTypeSMPTE: _bindgen_ty_96 = 1936552052;
pub const kIOAudioClockSelectorTypeVideo: _bindgen_ty_96 = 1986291055;
pub const kIOAudioClockSelectorTypeControl: _bindgen_ty_96 = 1668182636;
pub const kIOAudioClockSelectorTypeOther: _bindgen_ty_96 = 1869899890;
pub type _bindgen_ty_96 = ::std::os::raw::c_uint;
pub const kIOAudioStreamAlignmentLowByte: _bindgen_ty_97 = 0;
pub const kIOAudioStreamAlignmentHighByte: _bindgen_ty_97 = 1;
pub type _bindgen_ty_97 = ::std::os::raw::c_uint;
pub const kIOAudioStreamByteOrderBigEndian: _bindgen_ty_98 = 0;
pub const kIOAudioStreamByteOrderLittleEndian: _bindgen_ty_98 = 1;
pub type _bindgen_ty_98 = ::std::os::raw::c_uint;
pub const kIOAudioLevelControlNegativeInfinity: _bindgen_ty_99 = 4294967295;
pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
pub const kIOAudioBuiltInSystemClockDomain: _bindgen_ty_100 = 7567731;
pub const kIOAudioNewClockDomain: _bindgen_ty_100 = 4294967295;
pub type _bindgen_ty_100 = ::std::os::raw::c_uint;
pub const kIOAudioDeviceTransportTypeBuiltIn: _bindgen_ty_101 = 1651274862;
pub const kIOAudioDeviceTransportTypePCI: _bindgen_ty_101 = 1885563168;
pub const kIOAudioDeviceTransportTypeUSB: _bindgen_ty_101 = 1970496032;
pub const kIOAudioDeviceTransportTypeFireWire: _bindgen_ty_101 = 825440564;
pub const kIOAudioDeviceTransportTypeNetwork: _bindgen_ty_101 = 1853126507;
pub const kIOAudioDeviceTransportTypeWireless: _bindgen_ty_101 = 2003987571;
pub const kIOAudioDeviceTransportTypeOther: _bindgen_ty_101 = 1869899890;
pub const kIOAudioDeviceTransportTypeBluetooth: _bindgen_ty_101 = 1651275109;
pub const kIOAudioDeviceTransportTypeVirtual: _bindgen_ty_101 = 1986622068;
pub const kIOAudioDeviceTransportTypeDisplayPort: _bindgen_ty_101 = 1685090932;
pub const kIOAudioDeviceTransportTypeHdmi: _bindgen_ty_101 = 1751412073;
pub const kIOAudioDeviceTransportTypeAVB: _bindgen_ty_101 = 1700886114;
pub const kIOAudioDeviceTransportTypeThunderbolt: _bindgen_ty_101 = 1953002862;
pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
pub const OUTPUT_NULL: _bindgen_ty_102 = 256;
pub const INPUT_NULL: _bindgen_ty_102 = 257;
pub type _bindgen_ty_102 = ::std::os::raw::c_uint;
pub const INPUT_UNDEFINED: _bindgen_ty_103 = 512;
pub const INPUT_MICROPHONE: _bindgen_ty_103 = 513;
pub const INPUT_DESKTOP_MICROPHONE: _bindgen_ty_103 = 514;
pub const INPUT_PERSONAL_MICROPHONE: _bindgen_ty_103 = 515;
pub const INPUT_OMNIDIRECTIONAL_MICROPHONE: _bindgen_ty_103 = 516;
pub const INPUT_MICROPHONE_ARRAY: _bindgen_ty_103 = 517;
pub const INPUT_PROCESSING_MICROPHONE_ARRAY: _bindgen_ty_103 = 518;
pub const INPUT_MODEM_AUDIO: _bindgen_ty_103 = 519;
pub type _bindgen_ty_103 = ::std::os::raw::c_uint;
pub const OUTPUT_UNDEFINED: _bindgen_ty_104 = 768;
pub const OUTPUT_SPEAKER: _bindgen_ty_104 = 769;
pub const OUTPUT_HEADPHONES: _bindgen_ty_104 = 770;
pub const OUTPUT_HEAD_MOUNTED_DISPLAY_AUDIO: _bindgen_ty_104 = 771;
pub const OUTPUT_DESKTOP_SPEAKER: _bindgen_ty_104 = 772;
pub const OUTPUT_ROOM_SPEAKER: _bindgen_ty_104 = 773;
pub const OUTPUT_COMMUNICATION_SPEAKER: _bindgen_ty_104 = 774;
pub const OUTPUT_LOW_FREQUENCY_EFFECTS_SPEAKER: _bindgen_ty_104 = 775;
pub type _bindgen_ty_104 = ::std::os::raw::c_uint;
pub const BIDIRECTIONAL_UNDEFINED: _bindgen_ty_105 = 1024;
pub const BIDIRECTIONAL_HANDSET: _bindgen_ty_105 = 1025;
pub const BIDIRECTIONAL_HEADSET: _bindgen_ty_105 = 1026;
pub const BIDIRECTIONAL_SPEAKERPHONE_NO_ECHO_REDX: _bindgen_ty_105 = 1027;
pub const BIDIRECTIONAL_ECHO_SUPPRESSING_SPEAKERPHONE: _bindgen_ty_105 = 1028;
pub const BIDIRECTIONAL_ECHO_CANCELING_SPEAKERPHONE: _bindgen_ty_105 = 1029;
pub type _bindgen_ty_105 = ::std::os::raw::c_uint;
pub const TELEPHONY_UNDEFINED: _bindgen_ty_106 = 1280;
pub const TELEPHONY_PHONE_LINE: _bindgen_ty_106 = 1281;
pub const TELEPHONY_TELEPHONE: _bindgen_ty_106 = 1282;
pub const TELEPHONY_DOWN_LINE_PHONE: _bindgen_ty_106 = 1283;
pub type _bindgen_ty_106 = ::std::os::raw::c_uint;
pub const EXTERNAL_UNDEFINED: _bindgen_ty_107 = 1536;
pub const EXTERNAL_ANALOG_CONNECTOR: _bindgen_ty_107 = 1537;
pub const EXTERNAL_DIGITAL_AUDIO_INTERFACE: _bindgen_ty_107 = 1538;
pub const EXTERNAL_LINE_CONNECTOR: _bindgen_ty_107 = 1539;
pub const EXTERNAL_LEGACY_AUDIO_CONNECTOR: _bindgen_ty_107 = 1540;
pub const EXTERNAL_SPDIF_INTERFACE: _bindgen_ty_107 = 1541;
pub const EXTERNAL_1394_DA_STREAM: _bindgen_ty_107 = 1542;
pub const EXTERNAL_1394_DV_STREAM_SOUNDTRACK: _bindgen_ty_107 = 1543;
pub const EXTERNAL_ADAT: _bindgen_ty_107 = 1544;
pub const EXTERNAL_TDIF: _bindgen_ty_107 = 1545;
pub const EXTERNAL_MADI: _bindgen_ty_107 = 1546;
pub type _bindgen_ty_107 = ::std::os::raw::c_uint;
pub const EMBEDDED_UNDEFINED: _bindgen_ty_108 = 1792;
pub const EMBEDDED_LEVEL_CALIBRATION_NOISE_SOURCE: _bindgen_ty_108 = 1793;
pub const EMBEDDED_EQUALIZATION_NOISE: _bindgen_ty_108 = 1794;
pub const EMBEDDED_CD_PLAYER: _bindgen_ty_108 = 1795;
pub const EMBEDDED_DAT: _bindgen_ty_108 = 1796;
pub const EMBEDDED_DCC: _bindgen_ty_108 = 1797;
pub const EMBEDDED_MINIDISK: _bindgen_ty_108 = 1798;
pub const EMBEDDED_ANALOG_TAPE: _bindgen_ty_108 = 1799;
pub const EMBEDDED_PHONOGRAPH: _bindgen_ty_108 = 1800;
pub const EMBEDDED_VCR_AUDIO: _bindgen_ty_108 = 1801;
pub const EMBEDDED_VIDEO_DISC_AUDIO: _bindgen_ty_108 = 1802;
pub const EMBEDDED_DVD_AUDIO: _bindgen_ty_108 = 1803;
pub const EMBEDDED_TV_TUNER_AUDIO: _bindgen_ty_108 = 1804;
pub const EMBEDDED_SATELLITE_RECEIVER_AUDIO: _bindgen_ty_108 = 1805;
pub const EMBEDDED_CABLE_TUNER_AUDIO: _bindgen_ty_108 = 1806;
pub const EMBEDDED_DSS_AUDIO: _bindgen_ty_108 = 1807;
pub const EMBEDDED_RADIO_RECEIVER: _bindgen_ty_108 = 1808;
pub const EMBEDDED_RADIO_TRANSMITTER: _bindgen_ty_108 = 1809;
pub const EMBEDDED_MULTITRACK_RECORDER: _bindgen_ty_108 = 1810;
pub const EMBEDDED_SYNTHESIZER: _bindgen_ty_108 = 1811;
pub type _bindgen_ty_108 = ::std::os::raw::c_uint;
pub const PROCESSOR_UNDEFINED: _bindgen_ty_109 = 2048;
pub const PROCESSOR_GENERAL: _bindgen_ty_109 = 2049;
pub type _bindgen_ty_109 = ::std::os::raw::c_uint;
pub const kIOAudioChannelLabel_Unknown: _bindgen_ty_110 = 4294967295;
pub const kIOAudioChannelLabel_Unused: _bindgen_ty_110 = 0;
pub const kIOAudioChannelLabel_UseCoordinates: _bindgen_ty_110 = 100;
pub const kIOAudioChannelLabel_Left: _bindgen_ty_110 = 1;
pub const kIOAudioChannelLabel_Right: _bindgen_ty_110 = 2;
pub const kIOAudioChannelLabel_Center: _bindgen_ty_110 = 3;
pub const kIOAudioChannelLabel_LFEScreen: _bindgen_ty_110 = 4;
pub const kIOAudioChannelLabel_LeftSurround: _bindgen_ty_110 = 5;
pub const kIOAudioChannelLabel_RightSurround: _bindgen_ty_110 = 6;
pub const kIOAudioChannelLabel_LeftCenter: _bindgen_ty_110 = 7;
pub const kIOAudioChannelLabel_RightCenter: _bindgen_ty_110 = 8;
pub const kIOAudioChannelLabel_CenterSurround: _bindgen_ty_110 = 9;
pub const kIOAudioChannelLabel_LeftSurroundDirect: _bindgen_ty_110 = 10;
pub const kIOAudioChannelLabel_RightSurroundDirect: _bindgen_ty_110 = 11;
pub const kIOAudioChannelLabel_TopCenterSurround: _bindgen_ty_110 = 12;
pub const kIOAudioChannelLabel_VerticalHeightLeft: _bindgen_ty_110 = 13;
pub const kIOAudioChannelLabel_VerticalHeightCenter: _bindgen_ty_110 = 14;
pub const kIOAudioChannelLabel_VerticalHeightRight: _bindgen_ty_110 = 15;
pub const kIOAudioChannelLabel_TopBackLeft: _bindgen_ty_110 = 16;
pub const kIOAudioChannelLabel_TopBackCenter: _bindgen_ty_110 = 17;
pub const kIOAudioChannelLabel_TopBackRight: _bindgen_ty_110 = 18;
pub const kIOAudioChannelLabel_RearSurroundLeft: _bindgen_ty_110 = 33;
pub const kIOAudioChannelLabel_RearSurroundRight: _bindgen_ty_110 = 34;
pub const kIOAudioChannelLabel_LeftWide: _bindgen_ty_110 = 35;
pub const kIOAudioChannelLabel_RightWide: _bindgen_ty_110 = 36;
pub const kIOAudioChannelLabel_LFE2: _bindgen_ty_110 = 37;
pub const kIOAudioChannelLabel_LeftTotal: _bindgen_ty_110 = 38;
pub const kIOAudioChannelLabel_RightTotal: _bindgen_ty_110 = 39;
pub const kIOAudioChannelLabel_HearingImpaired: _bindgen_ty_110 = 40;
pub const kIOAudioChannelLabel_Narration: _bindgen_ty_110 = 41;
pub const kIOAudioChannelLabel_Mono: _bindgen_ty_110 = 42;
pub const kIOAudioChannelLabel_DialogCentricMix: _bindgen_ty_110 = 43;
pub const kIOAudioChannelLabel_CenterSurroundDirect: _bindgen_ty_110 = 44;
pub const kIOAudioChannelLabel_Haptic: _bindgen_ty_110 = 45;
pub const kIOAudioChannelLabel_LeftTopFront: _bindgen_ty_110 = 13;
pub const kIOAudioChannelLabel_CenterTopFront: _bindgen_ty_110 = 14;
pub const kIOAudioChannelLabel_RightTopFront: _bindgen_ty_110 = 15;
pub const kIOAudioChannelLabel_LeftTopMiddle: _bindgen_ty_110 = 49;
pub const kIOAudioChannelLabel_CenterTopMiddle: _bindgen_ty_110 = 12;
pub const kIOAudioChannelLabel_RightTopMiddle: _bindgen_ty_110 = 51;
pub const kIOAudioChannelLabel_LeftTopRear: _bindgen_ty_110 = 52;
pub const kIOAudioChannelLabel_CenterTopRear: _bindgen_ty_110 = 53;
pub const kIOAudioChannelLabel_RightTopRear: _bindgen_ty_110 = 54;
pub const kIOAudioChannelLabel_Ambisonic_W: _bindgen_ty_110 = 200;
pub const kIOAudioChannelLabel_Ambisonic_X: _bindgen_ty_110 = 201;
pub const kIOAudioChannelLabel_Ambisonic_Y: _bindgen_ty_110 = 202;
pub const kIOAudioChannelLabel_Ambisonic_Z: _bindgen_ty_110 = 203;
pub const kIOAudioChannelLabel_MS_Mid: _bindgen_ty_110 = 204;
pub const kIOAudioChannelLabel_MS_Side: _bindgen_ty_110 = 205;
pub const kIOAudioChannelLabel_XY_X: _bindgen_ty_110 = 206;
pub const kIOAudioChannelLabel_XY_Y: _bindgen_ty_110 = 207;
pub const kIOAudioChannelLabel_HeadphonesLeft: _bindgen_ty_110 = 301;
pub const kIOAudioChannelLabel_HeadphonesRight: _bindgen_ty_110 = 302;
pub const kIOAudioChannelLabel_ClickTrack: _bindgen_ty_110 = 304;
pub const kIOAudioChannelLabel_ForeignLanguage: _bindgen_ty_110 = 305;
pub const kIOAudioChannelLabel_Discrete: _bindgen_ty_110 = 400;
pub const kIOAudioChannelLabel_Discrete_0: _bindgen_ty_110 = 65536;
pub const kIOAudioChannelLabel_Discrete_1: _bindgen_ty_110 = 65537;
pub const kIOAudioChannelLabel_Discrete_2: _bindgen_ty_110 = 65538;
pub const kIOAudioChannelLabel_Discrete_3: _bindgen_ty_110 = 65539;
pub const kIOAudioChannelLabel_Discrete_4: _bindgen_ty_110 = 65540;
pub const kIOAudioChannelLabel_Discrete_5: _bindgen_ty_110 = 65541;
pub const kIOAudioChannelLabel_Discrete_6: _bindgen_ty_110 = 65542;
pub const kIOAudioChannelLabel_Discrete_7: _bindgen_ty_110 = 65543;
pub const kIOAudioChannelLabel_Discrete_8: _bindgen_ty_110 = 65544;
pub const kIOAudioChannelLabel_Discrete_9: _bindgen_ty_110 = 65545;
pub const kIOAudioChannelLabel_Discrete_10: _bindgen_ty_110 = 65546;
pub const kIOAudioChannelLabel_Discrete_11: _bindgen_ty_110 = 65547;
pub const kIOAudioChannelLabel_Discrete_12: _bindgen_ty_110 = 65548;
pub const kIOAudioChannelLabel_Discrete_13: _bindgen_ty_110 = 65549;
pub const kIOAudioChannelLabel_Discrete_14: _bindgen_ty_110 = 65550;
pub const kIOAudioChannelLabel_Discrete_15: _bindgen_ty_110 = 65551;
pub const kIOAudioChannelLabel_Discrete_65535: _bindgen_ty_110 = 131071;
pub type _bindgen_ty_110 = ::std::os::raw::c_uint;
pub const IOAVCFrameFields_kAVCCommandResponse: IOAVCFrameFields = 0;
pub const IOAVCFrameFields_kAVCAddress: IOAVCFrameFields = 1;
pub const IOAVCFrameFields_kAVCOpcode: IOAVCFrameFields = 2;
pub const IOAVCFrameFields_kAVCOperand0: IOAVCFrameFields = 3;
pub const IOAVCFrameFields_kAVCOperand1: IOAVCFrameFields = 4;
pub const IOAVCFrameFields_kAVCOperand2: IOAVCFrameFields = 5;
pub const IOAVCFrameFields_kAVCOperand3: IOAVCFrameFields = 6;
pub const IOAVCFrameFields_kAVCOperand4: IOAVCFrameFields = 7;
pub const IOAVCFrameFields_kAVCOperand5: IOAVCFrameFields = 8;
pub const IOAVCFrameFields_kAVCOperand6: IOAVCFrameFields = 9;
pub const IOAVCFrameFields_kAVCOperand7: IOAVCFrameFields = 10;
pub const IOAVCFrameFields_kAVCOperand8: IOAVCFrameFields = 11;
pub type IOAVCFrameFields = ::std::os::raw::c_uint;
pub const IOAVCCommandResponse_kAVCControlCommand: IOAVCCommandResponse = 0;
pub const IOAVCCommandResponse_kAVCStatusInquiryCommand: IOAVCCommandResponse = 1;
pub const IOAVCCommandResponse_kAVCSpecificInquiryCommand: IOAVCCommandResponse = 2;
pub const IOAVCCommandResponse_kAVCNotifyCommand: IOAVCCommandResponse = 3;
pub const IOAVCCommandResponse_kAVCGeneralInquiryCommand: IOAVCCommandResponse = 4;
pub const IOAVCCommandResponse_kAVCNotImplementedStatus: IOAVCCommandResponse = 8;
pub const IOAVCCommandResponse_kAVCAcceptedStatus: IOAVCCommandResponse = 9;
pub const IOAVCCommandResponse_kAVCRejectedStatus: IOAVCCommandResponse = 10;
pub const IOAVCCommandResponse_kAVCInTransitionStatus: IOAVCCommandResponse = 11;
pub const IOAVCCommandResponse_kAVCImplementedStatus: IOAVCCommandResponse = 12;
pub const IOAVCCommandResponse_kAVCChangedStatus: IOAVCCommandResponse = 13;
pub const IOAVCCommandResponse_kAVCInterimStatus: IOAVCCommandResponse = 15;
pub type IOAVCCommandResponse = ::std::os::raw::c_uint;
pub const IOAVCOpcodes_kAVCPlugInfoOpcode: IOAVCOpcodes = 2;
pub const IOAVCOpcodes_kAVCOutputPlugSignalFormatOpcode: IOAVCOpcodes = 24;
pub const IOAVCOpcodes_kAVCInputPlugSignalFormatOpcode: IOAVCOpcodes = 25;
pub const IOAVCOpcodes_kAVCUnitInfoOpcode: IOAVCOpcodes = 48;
pub const IOAVCOpcodes_kAVCSubunitInfoOpcode: IOAVCOpcodes = 49;
pub const IOAVCOpcodes_kAVCConnectionsOpcode: IOAVCOpcodes = 34;
pub const IOAVCOpcodes_kAVCConnectOpcode: IOAVCOpcodes = 36;
pub const IOAVCOpcodes_kAVCDisconnectOpcode: IOAVCOpcodes = 37;
pub const IOAVCOpcodes_kAVCPowerOpcode: IOAVCOpcodes = 178;
pub const IOAVCOpcodes_kAVCSignalSourceOpcode: IOAVCOpcodes = 26;
pub const IOAVCOpcodes_kAVCVendorDependentOpcode: IOAVCOpcodes = 0;
pub const IOAVCOpcodes_kAVCOutputSignalModeOpcode: IOAVCOpcodes = 120;
pub const IOAVCOpcodes_kAVCInputSignalModeOpcode: IOAVCOpcodes = 121;
pub const IOAVCOpcodes_kAVCSignalModeSD525_60: IOAVCOpcodes = 0;
pub const IOAVCOpcodes_kAVCSignalModeSDL525_60: IOAVCOpcodes = 4;
pub const IOAVCOpcodes_kAVCSignalModeHD1125_60: IOAVCOpcodes = 8;
pub const IOAVCOpcodes_kAVCSignalModeSD625_50: IOAVCOpcodes = 128;
pub const IOAVCOpcodes_kAVCSignalModeSDL625_50: IOAVCOpcodes = 132;
pub const IOAVCOpcodes_kAVCSignalModeHD1250_50: IOAVCOpcodes = 136;
pub const IOAVCOpcodes_kAVCSignalModeDVCPro525_60: IOAVCOpcodes = 120;
pub const IOAVCOpcodes_kAVCSignalModeDVCPro625_50: IOAVCOpcodes = 248;
pub const IOAVCOpcodes_kAVCSignalModeDummyOperand: IOAVCOpcodes = 255;
pub const IOAVCOpcodes_kAVCSignalModeMask_50: IOAVCOpcodes = 128;
pub const IOAVCOpcodes_kAVCSignalModeMask_STYPE: IOAVCOpcodes = 124;
pub const IOAVCOpcodes_kAVCSignalModeMask_SDL: IOAVCOpcodes = 4;
pub const IOAVCOpcodes_kAVCSignalModeMask_DVCPro25: IOAVCOpcodes = 120;
pub type IOAVCOpcodes = ::std::os::raw::c_uint;
pub const IOAVCUnitTypes_kAVCVideoMonitor: IOAVCUnitTypes = 0;
pub const IOAVCUnitTypes_kAVCAudio: IOAVCUnitTypes = 1;
pub const IOAVCUnitTypes_kAVCPrinter: IOAVCUnitTypes = 2;
pub const IOAVCUnitTypes_kAVCDiskRecorder: IOAVCUnitTypes = 3;
pub const IOAVCUnitTypes_kAVCTapeRecorder: IOAVCUnitTypes = 4;
pub const IOAVCUnitTypes_kAVCTuner: IOAVCUnitTypes = 5;
pub const IOAVCUnitTypes_kAVCVideoCamera: IOAVCUnitTypes = 7;
pub const IOAVCUnitTypes_kAVCCameraStorage: IOAVCUnitTypes = 11;
pub const IOAVCUnitTypes_kAVCVendorUnique: IOAVCUnitTypes = 28;
pub const IOAVCUnitTypes_kAVCNumSubUnitTypes: IOAVCUnitTypes = 32;
pub type IOAVCUnitTypes = ::std::os::raw::c_uint;
pub const kFWAVCAsyncPlug0: _bindgen_ty_111 = 160;
pub const kFWAVCAsyncPlug1: _bindgen_ty_111 = 161;
pub const kFWAVCAsyncPlug2: _bindgen_ty_111 = 162;
pub const kFWAVCAsyncPlug3: _bindgen_ty_111 = 163;
pub const kFWAVCAsyncPlug4: _bindgen_ty_111 = 164;
pub const kFWAVCAsyncPlug5: _bindgen_ty_111 = 165;
pub const kFWAVCAsyncPlug6: _bindgen_ty_111 = 166;
pub const kFWAVCAsyncPlug7: _bindgen_ty_111 = 167;
pub const kFWAVCAsyncPlug8: _bindgen_ty_111 = 168;
pub const kFWAVCAsyncPlug9: _bindgen_ty_111 = 169;
pub const kFWAVCAsyncPlug10: _bindgen_ty_111 = 161;
pub const kFWAVCAsyncPlug11: _bindgen_ty_111 = 171;
pub const kFWAVCAsyncPlug12: _bindgen_ty_111 = 172;
pub const kFWAVCAsyncPlug13: _bindgen_ty_111 = 173;
pub const kFWAVCAsyncPlug14: _bindgen_ty_111 = 174;
pub const kFWAVCAsyncPlug15: _bindgen_ty_111 = 175;
pub const kFWAVCAsyncPlug16: _bindgen_ty_111 = 176;
pub const kFWAVCAsyncPlug17: _bindgen_ty_111 = 177;
pub const kFWAVCAsyncPlug18: _bindgen_ty_111 = 178;
pub const kFWAVCAsyncPlug19: _bindgen_ty_111 = 179;
pub const kFWAVCAsyncPlug20: _bindgen_ty_111 = 180;
pub const kFWAVCAsyncPlug21: _bindgen_ty_111 = 181;
pub const kFWAVCAsyncPlug22: _bindgen_ty_111 = 182;
pub const kFWAVCAsyncPlug23: _bindgen_ty_111 = 183;
pub const kFWAVCAsyncPlug24: _bindgen_ty_111 = 184;
pub const kFWAVCAsyncPlug25: _bindgen_ty_111 = 185;
pub const kFWAVCAsyncPlug26: _bindgen_ty_111 = 186;
pub const kFWAVCAsyncPlug27: _bindgen_ty_111 = 187;
pub const kFWAVCAsyncPlug28: _bindgen_ty_111 = 188;
pub const kFWAVCAsyncPlug29: _bindgen_ty_111 = 189;
pub const kFWAVCAsyncPlug30: _bindgen_ty_111 = 190;
pub const kFWAVCAsyncPlugAny: _bindgen_ty_111 = 191;
pub type _bindgen_ty_111 = ::std::os::raw::c_uint;
pub const kFWAVCStateBusSuspended: _bindgen_ty_112 = 0;
pub const kFWAVCStateBusResumed: _bindgen_ty_112 = 1;
pub const kFWAVCStatePlugReconnected: _bindgen_ty_112 = 2;
pub const kFWAVCStatePlugDisconnected: _bindgen_ty_112 = 3;
pub const kFWAVCStateDeviceRemoved: _bindgen_ty_112 = 4;
pub type _bindgen_ty_112 = ::std::os::raw::c_uint;
pub const kFWAVCConsumerMode_MORE: _bindgen_ty_113 = 1;
pub const kFWAVCConsumerMode_LAST: _bindgen_ty_113 = 4;
pub const kFWAVCConsumerMode_LESS: _bindgen_ty_113 = 5;
pub const kFWAVCConsumerMode_JUNK: _bindgen_ty_113 = 6;
pub const kFWAVCConsumerMode_LOST: _bindgen_ty_113 = 7;
pub type _bindgen_ty_113 = ::std::os::raw::c_uint;
pub const kFWAVCProducerMode_SEND: _bindgen_ty_114 = 5;
pub const kFWAVCProducerMode_TOSS: _bindgen_ty_114 = 7;
pub type _bindgen_ty_114 = ::std::os::raw::c_uint;
pub const IOFWAVCPlugTypes_IOFWAVCPlugSubunitSourceType: IOFWAVCPlugTypes = 0;
pub const IOFWAVCPlugTypes_IOFWAVCPlugSubunitDestType: IOFWAVCPlugTypes = 1;
pub const IOFWAVCPlugTypes_IOFWAVCPlugIsochInputType: IOFWAVCPlugTypes = 2;
pub const IOFWAVCPlugTypes_IOFWAVCPlugIsochOutputType: IOFWAVCPlugTypes = 3;
pub const IOFWAVCPlugTypes_IOFWAVCPlugAsynchInputType: IOFWAVCPlugTypes = 4;
pub const IOFWAVCPlugTypes_IOFWAVCPlugAsynchOutputType: IOFWAVCPlugTypes = 5;
pub const IOFWAVCPlugTypes_IOFWAVCPlugExternalInputType: IOFWAVCPlugTypes = 6;
pub const IOFWAVCPlugTypes_IOFWAVCPlugExternalOutputType: IOFWAVCPlugTypes = 7;
pub type IOFWAVCPlugTypes = ::std::os::raw::c_uint;
pub const IOFWAVCSubunitPlugMessages_kIOFWAVCSubunitPlugMsgConnected: IOFWAVCSubunitPlugMessages =
    0;
pub const IOFWAVCSubunitPlugMessages_kIOFWAVCSubunitPlugMsgDisconnected:
    IOFWAVCSubunitPlugMessages = 1;
pub const IOFWAVCSubunitPlugMessages_kIOFWAVCSubunitPlugMsgConnectedPlugModified:
    IOFWAVCSubunitPlugMessages = 2;
pub const IOFWAVCSubunitPlugMessages_kIOFWAVCSubunitPlugMsgSignalFormatModified:
    IOFWAVCSubunitPlugMessages = 3;
pub type IOFWAVCSubunitPlugMessages = ::std::os::raw::c_uint;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStatePendingRequest: IOFWAVCAsyncCommandState =
    0;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateRequestSent: IOFWAVCAsyncCommandState = 1;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateRequestFailed: IOFWAVCAsyncCommandState = 2;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateWaitingForResponse:
    IOFWAVCAsyncCommandState = 3;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateReceivedInterimResponse:
    IOFWAVCAsyncCommandState = 4;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateReceivedFinalResponse:
    IOFWAVCAsyncCommandState = 5;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateTimeOutBeforeResponse:
    IOFWAVCAsyncCommandState = 6;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateBusReset: IOFWAVCAsyncCommandState = 7;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateOutOfMemory: IOFWAVCAsyncCommandState = 8;
pub const IOFWAVCAsyncCommandState_kAVCAsyncCommandStateCanceled: IOFWAVCAsyncCommandState = 9;
pub type IOFWAVCAsyncCommandState = ::std::os::raw::c_uint;
pub const kFWResponseComplete: _bindgen_ty_115 = 0;
pub const kFWResponseConflictError: _bindgen_ty_115 = 4;
pub const kFWResponseDataError: _bindgen_ty_115 = 5;
pub const kFWResponseTypeError: _bindgen_ty_115 = 6;
pub const kFWResponseAddressError: _bindgen_ty_115 = 7;
pub const kFWResponseBusResetError: _bindgen_ty_115 = 16;
pub const kFWResponsePending: _bindgen_ty_115 = 17;
pub type _bindgen_ty_115 = ::std::os::raw::c_uint;
pub const kFWAckTimeout: _bindgen_ty_116 = -1;
pub const kFWAckComplete: _bindgen_ty_116 = 1;
pub const kFWAckPending: _bindgen_ty_116 = 2;
pub const kFWAckBusyX: _bindgen_ty_116 = 4;
pub const kFWAckBusyA: _bindgen_ty_116 = 5;
pub const kFWAckBusyB: _bindgen_ty_116 = 6;
pub const kFWAckDataError: _bindgen_ty_116 = 13;
pub const kFWAckTypeError: _bindgen_ty_116 = 14;
pub type _bindgen_ty_116 = ::std::os::raw::c_int;
pub const IOFWSpeed_kFWSpeed100MBit: IOFWSpeed = 0;
pub const IOFWSpeed_kFWSpeed200MBit: IOFWSpeed = 1;
pub const IOFWSpeed_kFWSpeed400MBit: IOFWSpeed = 2;
pub const IOFWSpeed_kFWSpeed800MBit: IOFWSpeed = 3;
pub const IOFWSpeed_kFWSpeedReserved: IOFWSpeed = 3;
pub const IOFWSpeed_kFWSpeedReserved1: IOFWSpeed = 7;
pub const IOFWSpeed_kFWSpeedUnknownMask: IOFWSpeed = 128;
pub const IOFWSpeed_kFWSpeedMaximum: IOFWSpeed = 2147483647;
pub const IOFWSpeed_kFWSpeedInvalid: IOFWSpeed = 2147483648;
pub type IOFWSpeed = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWAddressStruct {
    pub nodeID: UInt16,
    pub addressHi: UInt16,
    pub addressLo: UInt32,
}
pub type FWAddress = FWAddressStruct;
pub type FWAddressPtr = *mut FWAddressStruct;
pub const IOConfigKeyType_kConfigImmediateKeyType: IOConfigKeyType = 0;
pub const IOConfigKeyType_kConfigOffsetKeyType: IOConfigKeyType = 1;
pub const IOConfigKeyType_kConfigLeafKeyType: IOConfigKeyType = 2;
pub const IOConfigKeyType_kConfigDirectoryKeyType: IOConfigKeyType = 3;
pub const IOConfigKeyType_kInvalidConfigROMEntryType: IOConfigKeyType = 255;
pub type IOConfigKeyType = ::std::os::raw::c_uint;
pub const kConfigTextualDescriptorKey: _bindgen_ty_117 = 1;
pub const kConfigBusDependentInfoKey: _bindgen_ty_117 = 2;
pub const kConfigModuleVendorIdKey: _bindgen_ty_117 = 3;
pub const kConfigModuleHwVersionKey: _bindgen_ty_117 = 4;
pub const kConfigModuleSpecIdKey: _bindgen_ty_117 = 5;
pub const kConfigModuleSwVersionKey: _bindgen_ty_117 = 6;
pub const kConfigModuleDependentInfoKey: _bindgen_ty_117 = 7;
pub const kConfigNodeVendorIdKey: _bindgen_ty_117 = 8;
pub const kConfigNodeHwVersionKey: _bindgen_ty_117 = 9;
pub const kConfigNodeSpecIdKey: _bindgen_ty_117 = 10;
pub const kConfigNodeSwVersionKey: _bindgen_ty_117 = 11;
pub const kConfigNodeCapabilitiesKey: _bindgen_ty_117 = 12;
pub const kConfigNodeUniqueIdKey: _bindgen_ty_117 = 13;
pub const kConfigNodeUnitsExtentKey: _bindgen_ty_117 = 14;
pub const kConfigNodeMemoryExtentKey: _bindgen_ty_117 = 15;
pub const kConfigNodeDependentInfoKey: _bindgen_ty_117 = 16;
pub const kConfigUnitDirectoryKey: _bindgen_ty_117 = 17;
pub const kConfigUnitSpecIdKey: _bindgen_ty_117 = 18;
pub const kConfigUnitSwVersionKey: _bindgen_ty_117 = 19;
pub const kConfigUnitDependentInfoKey: _bindgen_ty_117 = 20;
pub const kConfigUnitLocationKey: _bindgen_ty_117 = 21;
pub const kConfigUnitPollMaskKey: _bindgen_ty_117 = 22;
pub const kConfigModelIdKey: _bindgen_ty_117 = 23;
pub const kConfigGenerationKey: _bindgen_ty_117 = 56;
pub const kConfigRootDirectoryKey: _bindgen_ty_117 = 65535;
pub type _bindgen_ty_117 = ::std::os::raw::c_uint;
pub const kConfigSBP2LUN: _bindgen_ty_118 = 20;
pub const kConfigSBP2Revision: _bindgen_ty_118 = 33;
pub const kConfigSBP2MAO: _bindgen_ty_118 = 84;
pub type _bindgen_ty_118 = ::std::os::raw::c_uint;
pub const kCSRStateUnitDepend: _bindgen_ty_119 = 4294901760;
pub const kCSRStateUnitDependPhase: _bindgen_ty_119 = 16;
pub const kCSRStateBusDepend: _bindgen_ty_119 = 65280;
pub const kCSRStateBusDependPhase: _bindgen_ty_119 = 8;
pub const kCSRStateLost: _bindgen_ty_119 = 128;
pub const kCSRStateDReq: _bindgen_ty_119 = 64;
pub const kCSRStateELog: _bindgen_ty_119 = 16;
pub const kCSRStateAtn: _bindgen_ty_119 = 8;
pub const kCSRStateOff: _bindgen_ty_119 = 4;
pub const kCSRStateState: _bindgen_ty_119 = 3;
pub const kCSRStateStatePhase: _bindgen_ty_119 = 0;
pub const kCSRStateStateRunning: _bindgen_ty_119 = 0;
pub const kCSRStateStateInitializing: _bindgen_ty_119 = 1;
pub const kCSRStateStateTesting: _bindgen_ty_119 = 2;
pub const kCSRStateStateDead: _bindgen_ty_119 = 3;
pub type _bindgen_ty_119 = ::std::os::raw::c_uint;
pub const kConfigBusInfoBlockLength: _bindgen_ty_120 = 4278190080;
pub const kConfigBusInfoBlockLengthPhase: _bindgen_ty_120 = 24;
pub const kConfigROMCRCLength: _bindgen_ty_120 = 16711680;
pub const kConfigROMCRCLengthPhase: _bindgen_ty_120 = 16;
pub const kConfigROMCRCValue: _bindgen_ty_120 = 65535;
pub const kConfigROMCRCValuePhase: _bindgen_ty_120 = 0;
pub const kConfigEntryKeyType: _bindgen_ty_120 = 3221225472;
pub const kConfigEntryKeyTypePhase: _bindgen_ty_120 = 30;
pub const kConfigEntryKeyValue: _bindgen_ty_120 = 1056964608;
pub const kConfigEntryKeyValuePhase: _bindgen_ty_120 = 24;
pub const kConfigEntryValue: _bindgen_ty_120 = 16777215;
pub const kConfigEntryValuePhase: _bindgen_ty_120 = 0;
pub const kConfigLeafDirLength: _bindgen_ty_120 = 4294901760;
pub const kConfigLeafDirLengthPhase: _bindgen_ty_120 = 16;
pub const kConfigLeafDirCRC: _bindgen_ty_120 = 65535;
pub const kConfigLeafDirCRCPhase: _bindgen_ty_120 = 0;
pub type _bindgen_ty_120 = ::std::os::raw::c_uint;
pub const IOCSRKeyType_kCSRImmediateKeyType: IOCSRKeyType = 0;
pub const IOCSRKeyType_kCSROffsetKeyType: IOCSRKeyType = 1;
pub const IOCSRKeyType_kCSRLeafKeyType: IOCSRKeyType = 2;
pub const IOCSRKeyType_kCSRDirectoryKeyType: IOCSRKeyType = 3;
pub const IOCSRKeyType_kInvalidCSRROMEntryType: IOCSRKeyType = 255;
pub type IOCSRKeyType = ::std::os::raw::c_uint;
pub const kCSRNodeID: _bindgen_ty_121 = 4294901760;
pub const kCSRNodeIDPhase: _bindgen_ty_121 = 16;
pub const kCSRInitialMemorySpaceBaseAddressHi: _bindgen_ty_121 = 0;
pub const kCSRInitialMemorySpaceBaseAddressLo: _bindgen_ty_121 = 0;
pub const kCSRPrivateSpaceBaseAddressHi: _bindgen_ty_121 = 65535;
pub const kCSRPrivateSpaceBaseAddressLo: _bindgen_ty_121 = 3758096384;
pub const kCSRRegisterSpaceBaseAddressHi: _bindgen_ty_121 = 65535;
pub const kCSRRegisterSpaceBaseAddressLo: _bindgen_ty_121 = 4026531840;
pub const kCSRCoreRegistersBaseAddress: _bindgen_ty_121 = 4026531840;
pub const kCSRStateClearAddress: _bindgen_ty_121 = 4026531840;
pub const kCSRStateSetAddress: _bindgen_ty_121 = 4026531844;
pub const kCSRNodeIDsAddress: _bindgen_ty_121 = 4026531848;
pub const kCSRResetStartAddress: _bindgen_ty_121 = 4026531852;
pub const kCSRIndirectAddressAddress: _bindgen_ty_121 = 4026531856;
pub const kCSRIndirectDataAddress: _bindgen_ty_121 = 4026531860;
pub const kCSRSplitTimeoutHiAddress: _bindgen_ty_121 = 4026531864;
pub const kCSRSplitTimeoutLoAddress: _bindgen_ty_121 = 4026531868;
pub const kCSRArgumentHiAddress: _bindgen_ty_121 = 4026531872;
pub const kCSRArgumentLoAddress: _bindgen_ty_121 = 4026531876;
pub const kCSRTestStartAddress: _bindgen_ty_121 = 4026531880;
pub const kCSRTestStatusAddress: _bindgen_ty_121 = 4026531884;
pub const kCSRUnitsBaseHiAddress: _bindgen_ty_121 = 4026531888;
pub const kCSRUnitsBaseLoAddress: _bindgen_ty_121 = 4026531892;
pub const kCSRUnitsBoundHiAddress: _bindgen_ty_121 = 4026531896;
pub const kCSRUnitsBoundLoAddress: _bindgen_ty_121 = 4026531900;
pub const kCSRMemoryBaseHiAddress: _bindgen_ty_121 = 4026531904;
pub const kCSRMemoryBaseLoAddress: _bindgen_ty_121 = 4026531908;
pub const kCSRMemoryBoundHiAddress: _bindgen_ty_121 = 4026531912;
pub const kCSRMemoryBoundLoAddress: _bindgen_ty_121 = 4026531916;
pub const kCSRInterruptTargetAddress: _bindgen_ty_121 = 4026531920;
pub const kCSRInterruptMaskAddress: _bindgen_ty_121 = 4026531924;
pub const kCSRClockValueHiAddress: _bindgen_ty_121 = 4026531928;
pub const kCSRClockValueMidAddress: _bindgen_ty_121 = 4026531932;
pub const kCSRClockTickPeriodMidAddress: _bindgen_ty_121 = 4026531936;
pub const kCSRClockTickPeriodLoAddress: _bindgen_ty_121 = 4026531940;
pub const kCSRClockStrobeArrivedHiAddress: _bindgen_ty_121 = 4026531944;
pub const kCSRClockStrobeArrivedMidAddress: _bindgen_ty_121 = 4026531948;
pub const kCSRClockInfo0Address: _bindgen_ty_121 = 4026531952;
pub const kCSRClockInfo1Address: _bindgen_ty_121 = 4026531956;
pub const kCSRClockInfo2Address: _bindgen_ty_121 = 4026531960;
pub const kCSRClockInfo3Address: _bindgen_ty_121 = 4026531964;
pub const kCSRMessageRequestAddress: _bindgen_ty_121 = 4026531968;
pub const kCSRMessageResponseAddress: _bindgen_ty_121 = 4026532032;
pub const kCSRErrorLogBufferAddress: _bindgen_ty_121 = 4026532224;
pub const kCSRBusDependentRegistersBaseAddress: _bindgen_ty_121 = 4026532352;
pub const kCSRBusyTimeout: _bindgen_ty_121 = 4026532368;
pub const kCSRBusManagerID: _bindgen_ty_121 = 4026532380;
pub const kCSRBandwidthAvailable: _bindgen_ty_121 = 4026532384;
pub const kCSRChannelsAvailable31_0: _bindgen_ty_121 = 4026532388;
pub const kCSRChannelsAvailable63_32: _bindgen_ty_121 = 4026532392;
pub const kCSRBroadcastChannel: _bindgen_ty_121 = 4026532404;
pub const kConfigROMBaseAddress: _bindgen_ty_121 = 4026532864;
pub const kConfigBIBHeaderAddress: _bindgen_ty_121 = 4026532864;
pub const kConfigBIBBusNameAddress: _bindgen_ty_121 = 4026532868;
pub const kPCRBaseAddress: _bindgen_ty_121 = 4026534144;
pub const kFCPCommandAddress: _bindgen_ty_121 = 4026534656;
pub const kFCPResponseAddress: _bindgen_ty_121 = 4026535168;
pub type _bindgen_ty_121 = ::std::os::raw::c_uint;
pub type CSRNodeUniqueID = UInt64;
pub const kFWCSRStateGone: _bindgen_ty_122 = 32768;
pub const kFWCSRStateLinkOff: _bindgen_ty_122 = 512;
pub const kFWCSRStateCMstr: _bindgen_ty_122 = 256;
pub type _bindgen_ty_122 = ::std::os::raw::c_uint;
pub const kFWAddressBusID: _bindgen_ty_123 = 4290772992;
pub const kFWAddressBusIDPhase: _bindgen_ty_123 = 22;
pub const kFWAddressNodeID: _bindgen_ty_123 = 4128768;
pub const kFWAddressNodeIDPhase: _bindgen_ty_123 = 16;
pub const kFWLocalBusID: _bindgen_ty_123 = 1023;
pub const kFWBroadcastNodeID: _bindgen_ty_123 = 63;
pub const kFWBadNodeID: _bindgen_ty_123 = 65535;
pub const kFWLocalBusAddress: _bindgen_ty_123 = -4194304;
pub const kFWBroadcastAddress: _bindgen_ty_123 = 4128768;
pub type _bindgen_ty_123 = ::std::os::raw::c_long;
pub const kFWBIBHeaderAddress: _bindgen_ty_124 = 4026532864;
pub const kFWBIBBusNameAddress: _bindgen_ty_124 = 4026532868;
pub const kFWBIBNodeCapabilitiesAddress: _bindgen_ty_124 = 4026532872;
pub const kFWBIBNodeUniqueIDHiAddress: _bindgen_ty_124 = 4026532876;
pub const kFWBIBNodeUniqueIDLoAddress: _bindgen_ty_124 = 4026532880;
pub const kFWBIBBusName: _bindgen_ty_124 = 825440564;
pub const kFWBIBIrmc: _bindgen_ty_124 = -2147483648;
pub const kFWBIBCmc: _bindgen_ty_124 = 1073741824;
pub const kFWBIBIsc: _bindgen_ty_124 = 536870912;
pub const kFWBIBBmc: _bindgen_ty_124 = 268435456;
pub const kFWBIBCycClkAcc: _bindgen_ty_124 = 16711680;
pub const kFWBIBCycClkAccPhase: _bindgen_ty_124 = 16;
pub const kFWBIBMaxRec: _bindgen_ty_124 = 61440;
pub const kFWBIBMaxRecPhase: _bindgen_ty_124 = 12;
pub const kFWBIBMaxROM: _bindgen_ty_124 = 3072;
pub const kFWBIBMaxROMPhase: _bindgen_ty_124 = 10;
pub const kFWBIBGeneration: _bindgen_ty_124 = 240;
pub const kFWBIBGenerationPhase: _bindgen_ty_124 = 4;
pub const kFWBIBLinkSpeed: _bindgen_ty_124 = 7;
pub const kFWBIBLinkSpeedPhase: _bindgen_ty_124 = 0;
pub type _bindgen_ty_124 = ::std::os::raw::c_long;
pub const kConfigUnitSpecAppleA27: _bindgen_ty_125 = 2599;
pub const kConfigUnitSpec1394TA1: _bindgen_ty_125 = 41005;
pub const kConfigUnitSWVersMacintosh10: _bindgen_ty_125 = 10;
pub const kConfigUnitSWVersIIDC100: _bindgen_ty_125 = 256;
pub const kConfigUnitSWVersIIDC101: _bindgen_ty_125 = 257;
pub const kConfigUnitSWVersIIDC102: _bindgen_ty_125 = 258;
pub type _bindgen_ty_125 = ::std::os::raw::c_uint;
pub const kFWIsochDataLength: _bindgen_ty_126 = 4294901760;
pub const kFWIsochDataLengthPhase: _bindgen_ty_126 = 16;
pub const kFWIsochTag: _bindgen_ty_126 = 49152;
pub const kFWIsochTagPhase: _bindgen_ty_126 = 14;
pub const kFWIsochChanNum: _bindgen_ty_126 = 16128;
pub const kFWIsochChanNumPhase: _bindgen_ty_126 = 8;
pub const kFWIsochTCode: _bindgen_ty_126 = 240;
pub const kFWIsochTCodePhase: _bindgen_ty_126 = 4;
pub const kFWIsochSy: _bindgen_ty_126 = 15;
pub const kFWIsochSyPhase: _bindgen_ty_126 = 0;
pub type _bindgen_ty_126 = ::std::os::raw::c_uint;
pub const IOFWIsochResourceFlags_kFWNeverMultiMode: IOFWIsochResourceFlags = 0;
pub const IOFWIsochResourceFlags_kFWAllowMultiMode: IOFWIsochResourceFlags = 1;
pub const IOFWIsochResourceFlags_kFWSuggestMultiMode: IOFWIsochResourceFlags = 2;
pub const IOFWIsochResourceFlags_kFWAlwaysMultiMode: IOFWIsochResourceFlags = 3;
pub const IOFWIsochResourceFlags_kFWDefaultIsochResourceFlags: IOFWIsochResourceFlags = 0;
pub type IOFWIsochResourceFlags = ::std::os::raw::c_uint;
pub const kFWIsochChannelDefaultFlags: _bindgen_ty_127 = 0;
pub const kFWIsochChannelDoNotResumeOnWake: _bindgen_ty_127 = 2;
pub type _bindgen_ty_127 = ::std::os::raw::c_uint;
pub const IOFWIsochPortOptions_kFWIsochPortDefaultOptions: IOFWIsochPortOptions = 0;
pub const IOFWIsochPortOptions_kFWIsochPortUseSeparateKernelThread: IOFWIsochPortOptions = 2;
pub const IOFWIsochPortOptions_kFWIsochEnableRobustness: IOFWIsochPortOptions = 4;
pub const IOFWIsochPortOptions_kFWIsochBigEndianUpdates: IOFWIsochPortOptions = 8;
pub const IOFWIsochPortOptions_kFWIsochRequireLastContext: IOFWIsochPortOptions = 16;
pub type IOFWIsochPortOptions = ::std::os::raw::c_uint;
pub const kFWDCLImmediateEvent: _bindgen_ty_128 = 0;
pub const kFWDCLCycleEvent: _bindgen_ty_128 = 1;
pub const kFWDCLSyBitsEvent: _bindgen_ty_128 = 2;
pub type _bindgen_ty_128 = ::std::os::raw::c_uint;
pub const IOFWDCLNotificationType_kFWDCLInvalidNotification: IOFWDCLNotificationType = 0;
pub const IOFWDCLNotificationType_kFWDCLUpdateNotification: IOFWDCLNotificationType = 1;
pub const IOFWDCLNotificationType_kFWDCLModifyNotification: IOFWDCLNotificationType = 2;
pub const IOFWDCLNotificationType_kFWNuDCLModifyNotification: IOFWDCLNotificationType = 3;
pub const IOFWDCLNotificationType_kFWNuDCLModifyJumpNotification: IOFWDCLNotificationType = 4;
pub const IOFWDCLNotificationType_kFWNuDCLUpdateNotification: IOFWDCLNotificationType = 5;
pub type IOFWDCLNotificationType = ::std::os::raw::c_uint;
pub const kFWDCLOpDynamicFlag: _bindgen_ty_129 = 65536;
pub const kFWDCLOpVendorDefinedFlag: _bindgen_ty_129 = 131072;
pub const kFWDCLOpFlagMask: _bindgen_ty_129 = 4294901760;
pub const kFWDCLOpFlagPhase: _bindgen_ty_129 = 16;
pub type _bindgen_ty_129 = ::std::os::raw::c_uint;
pub const kDCLInvalidOp: _bindgen_ty_130 = 0;
pub const kDCLSendPacketStartOp: _bindgen_ty_130 = 1;
pub const kDCLSendPacketOp: _bindgen_ty_130 = 3;
pub const kDCLSendBufferOp: _bindgen_ty_130 = 4;
pub const kDCLReceivePacketStartOp: _bindgen_ty_130 = 5;
pub const kDCLReceivePacketOp: _bindgen_ty_130 = 6;
pub const kDCLReceiveBufferOp: _bindgen_ty_130 = 7;
pub const kDCLCallProcOp: _bindgen_ty_130 = 8;
pub const kDCLLabelOp: _bindgen_ty_130 = 9;
pub const kDCLJumpOp: _bindgen_ty_130 = 10;
pub const kDCLSetTagSyncBitsOp: _bindgen_ty_130 = 11;
pub const kDCLUpdateDCLListOp: _bindgen_ty_130 = 12;
pub const kDCLTimeStampOp: _bindgen_ty_130 = 13;
pub const kDCLPtrTimeStampOp: _bindgen_ty_130 = 14;
pub const kDCLSkipCycleOp: _bindgen_ty_130 = 15;
pub const kDCLNuDCLLeaderOp: _bindgen_ty_130 = 20;
pub type _bindgen_ty_130 = ::std::os::raw::c_uint;
pub type DCLCallProcDataType = *mut ::std::os::raw::c_void;
pub type DCLCompilerDataType = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLCommandStruct {
    pub pNextDCLCommand: *mut DCLCommandStruct,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub operands: [UInt32; 1usize],
}
pub type DCLCommand = DCLCommandStruct;
pub type DCLCallCommandProc = ::std::option::Option<unsafe extern "C" fn(command: *mut DCLCommand)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLTransferPacketStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: UInt32,
}
pub type DCLTransferPacket = DCLTransferPacketStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLTransferBufferStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: UInt32,
    pub packetSize: UInt16,
    pub reserved: UInt16,
    pub bufferOffset: UInt32,
}
pub type DCLTransferBuffer = DCLTransferBufferStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLCallProcStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub proc_: DCLCallCommandProc,
    pub procData: DCLCallProcDataType,
}
pub type DCLCallProc = DCLCallProcStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLLabelStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
}
pub type DCLLabel = DCLLabelStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLJumpStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub pJumpDCLLabel: *mut DCLLabel,
}
pub type DCLJump = DCLJumpStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLSetTagSyncBitsStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub tagBits: UInt16,
    pub syncBits: UInt16,
}
pub type DCLSetTagSyncBits = DCLSetTagSyncBitsStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLUpdateDCLListStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub dclCommandList: *mut *mut DCLCommand,
    pub numDCLCommands: UInt32,
}
pub type DCLUpdateDCLList = DCLUpdateDCLListStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLTimeStampStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub timeStamp: UInt32,
}
pub type DCLTimeStamp = DCLTimeStampStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLPtrTimeStampStruct {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub timeStampPtr: *mut UInt32,
}
pub type DCLPtrTimeStamp = DCLPtrTimeStampStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DCLNuDCLLeader {
    pub pNextDCLCommand: *mut DCLCommand,
    pub compilerData: DCLCompilerDataType,
    pub opcode: UInt32,
    pub program: *mut ::std::os::raw::c_void,
}
pub type DCLCommandPtr = *mut DCLCommand;
pub type DCLTransferBufferPtr = *mut DCLTransferBuffer;
pub type DCLTransferPacketPtr = *mut DCLTransferPacket;
pub type DCLCallProcPtr = *mut DCLCallProc;
pub type DCLLabelPtr = *mut DCLLabel;
pub type DCLJumpPtr = *mut DCLJump;
pub type DCLSetTagSyncBitsPtr = *mut DCLSetTagSyncBits;
pub type DCLUpdateDCLListPtr = *mut DCLUpdateDCLList;
pub type DCLTimeStampPtr = *mut DCLTimeStamp;
pub type DCLPtrTimeStampPtr = *mut DCLPtrTimeStamp;
pub type DCLCallCommandProcPtr = DCLCallCommandProc;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLCommandStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub operands: [UInt32; 1usize],
}
pub type UserExportDCLCommand = UserExportDCLCommandStruct;
pub type UserExportDCLCallCommandProc =
    ::std::option::Option<unsafe extern "C" fn(command: *mut UserExportDCLCommand)>;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLTransferPacketStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub buffer: mach_vm_address_t,
    pub size: UInt32,
}
pub type UserExportDCLTransferPacket = UserExportDCLTransferPacketStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLTransferBufferStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub buffer: mach_vm_address_t,
    pub size: UInt32,
    pub packetSize: UInt16,
    pub reserved: UInt16,
    pub bufferOffset: UInt32,
}
pub type UserExportDCLTransferBuffer = UserExportDCLTransferBufferStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLCallProcStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub proc_: mach_vm_address_t,
    pub procData: u64,
}
pub type UserExportDCLCallProc = UserExportDCLCallProcStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLLabelStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
}
pub type UserExportDCLLabel = UserExportDCLLabelStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLJumpStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub pJumpDCLLabel: mach_vm_address_t,
}
pub type UserExportDCLJump = UserExportDCLJumpStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLSetTagSyncBitsStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub tagBits: UInt16,
    pub syncBits: UInt16,
}
pub type UserExportDCLSetTagSyncBits = UserExportDCLSetTagSyncBitsStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLUpdateDCLListStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub dclCommandList: mach_vm_address_t,
    pub numDCLCommands: UInt32,
}
pub type UserExportDCLUpdateDCLList = UserExportDCLUpdateDCLListStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLTimeStampStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub timeStamp: UInt32,
}
pub type UserExportDCLTimeStamp = UserExportDCLTimeStampStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLPtrTimeStampStruct {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub timeStampPtr: mach_vm_address_t,
}
pub type UserExportDCLPtrTimeStamp = UserExportDCLPtrTimeStampStruct;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UserExportDCLNuDCLLeader {
    pub pClientDCLStruct: mach_vm_address_t,
    pub pNextDCLCommand: mach_vm_address_t,
    pub compilerData: u64,
    pub opcode: UInt32,
    pub program: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NuDCL {
    _unused: [u8; 0],
}
pub type NuDCLRef = *mut __NuDCL;
pub type NuDCLSendPacketRef = NuDCLRef;
pub type NuDCLSkipCycleRef = NuDCLRef;
pub type NuDCLReceivePacketRef = NuDCLRef;
pub type NuDCLCallback =
    ::std::option::Option<unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, dcl: NuDCLRef)>;
pub const NuDCLFlags_kNuDCLDynamic: NuDCLFlags = 2;
pub const NuDCLFlags_kNuDCLUpdateBeforeCallback: NuDCLFlags = 4;
pub type NuDCLFlags = ::std::os::raw::c_uint;
pub type FWClientCommandID = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireSessionRefOpaqueStuct {
    _unused: [u8; 0],
}
pub type IOFireWireSessionRef = *mut IOFireWireSessionRefOpaqueStuct;
pub const kFWBusManagerArbitrationTimeoutDuration: _bindgen_ty_131 = 625;
pub type _bindgen_ty_131 = ::std::os::raw::c_uint;
pub const kFWMaxBusses: _bindgen_ty_132 = 1023;
pub const kFWMaxNodesPerBus: _bindgen_ty_132 = 63;
pub const kFWMaxNodeHops: _bindgen_ty_132 = 16;
pub type _bindgen_ty_132 = ::std::os::raw::c_uint;
pub const kIOFWDisablePhysicalAccess: _bindgen_ty_133 = 1;
pub const kIOFWDisableAllPhysicalAccess: _bindgen_ty_133 = 2;
pub const kIOFWEnableRetryOnAckD: _bindgen_ty_133 = 4;
pub const kIOFWLimitAsyncPacketSize: _bindgen_ty_133 = 8;
pub const kIOFWDisablePhyOnSleep: _bindgen_ty_133 = 16;
pub const kIOFWMustBeRoot: _bindgen_ty_133 = 32;
pub const kIOFWMustNotBeRoot: _bindgen_ty_133 = 64;
pub const kIOFWMustHaveGap63: _bindgen_ty_133 = 128;
pub type _bindgen_ty_133 = ::std::os::raw::c_uint;
pub const IOFWWriteFlags_kIOFWWriteFlagsNone: IOFWWriteFlags = 0;
pub const IOFWWriteFlags_kIOFWWriteFlagsDeferredNotify: IOFWWriteFlags = 1;
pub const IOFWWriteFlags_kIOFWWriteFastRetryOnBusy: IOFWWriteFlags = 2;
pub const IOFWWriteFlags_kIOFWWriteBlockRequest: IOFWWriteFlags = 4;
pub type IOFWWriteFlags = ::std::os::raw::c_uint;
pub const IOFWReadFlags_kIOFWReadFlagsNone: IOFWReadFlags = 0;
pub const IOFWReadFlags_kIOFWReadBlockRequest: IOFWReadFlags = 4;
pub const IOFWReadFlags_kIOFWReadPingTime: IOFWReadFlags = 8;
pub type IOFWReadFlags = ::std::os::raw::c_uint;
pub const IOFWSecurityMode_kIOFWSecurityModeNormal: IOFWSecurityMode = 0;
pub const IOFWSecurityMode_kIOFWSecurityModeSecure: IOFWSecurityMode = 1;
pub const IOFWSecurityMode_kIOFWSecurityModeSecurePermanent: IOFWSecurityMode = 2;
pub type IOFWSecurityMode = ::std::os::raw::c_uint;
pub const IOFWPhysicalAccessMode_kIOFWPhysicalAccessEnabled: IOFWPhysicalAccessMode = 0;
pub const IOFWPhysicalAccessMode_kIOFWPhysicalAccessDisabled: IOFWPhysicalAccessMode = 1;
pub const IOFWPhysicalAccessMode_kIOFWPhysicalAccessDisabledForGeneration: IOFWPhysicalAccessMode =
    2;
pub type IOFWPhysicalAccessMode = ::std::os::raw::c_uint;
pub const kIOFWSpecID_AAPL: _bindgen_ty_134 = 2599;
pub const kIOFWSWVers_KPF: _bindgen_ty_134 = 64;
pub type _bindgen_ty_134 = ::std::os::raw::c_uint;
pub type IOFWAVCMessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        type_: UInt32,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFWAVCRequestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        generation: UInt32,
        srcNodeID: UInt16,
        command: *const UInt8,
        cmdLen: UInt32,
        response: *mut UInt8,
        responseLen: *mut UInt32,
    ) -> IOReturn,
>;
pub type IOFWAVCPCRCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        generation: UInt32,
        nodeID: UInt16,
        plug: UInt32,
        oldVal: UInt32,
        newVal: UInt32,
    ),
>;
pub type IOFWAVCCommandHandlerCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        generation: UInt32,
        srcNodeID: UInt16,
        speed: IOFWSpeed,
        command: *const UInt8,
        cmdLen: UInt32,
    ) -> IOReturn,
>;
pub type IOFWAVCSubunitPlugHandlerCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        subunitTypeAndID: UInt32,
        plugType: IOFWAVCPlugTypes,
        plugNum: UInt32,
        plugMessage: IOFWAVCSubunitPlugMessages,
        messageParams: UInt32,
    ) -> IOReturn,
>;
pub type IOFireWireAVCLibProtocolInterface = _IOFireWireAVCLibProtocolInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOFireWireAVCLibAsynchronousCommand {
    pub cmdState: IOFWAVCAsyncCommandState,
    pub pRefCon: *mut ::std::os::raw::c_void,
    pub pCommandBuf: *mut UInt8,
    pub cmdLen: UInt32,
    pub pInterimResponseBuf: *mut UInt8,
    pub interimResponseLen: UInt32,
    pub pFinalResponseBuf: *mut UInt8,
    pub finalResponseLen: UInt32,
}
pub type IOFireWireAVCLibAsynchronousCommand = _IOFireWireAVCLibAsynchronousCommand;
pub type IOFireWireAVCLibAsynchronousCommandCallback = ::std::option::Option<
    unsafe extern "C" fn(
        pRefCon: *mut ::std::os::raw::c_void,
        pCommandObject: *mut IOFireWireAVCLibAsynchronousCommand,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireAVCLibUnitInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub open:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub openWithSessionRef: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            sessionRef: IOFireWireSessionRef,
        ) -> IOReturn,
    >,
    pub getSessionRef: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOFireWireSessionRef,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void)>,
    pub addCallbackDispatcherToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            cfRunLoopRef: CFRunLoopRef,
        ) -> IOReturn,
    >,
    pub removeCallbackDispatcherFromRunLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void)>,
    pub setMessageCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWAVCMessageCallback,
        ),
    >,
    pub AVCCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            command: *const UInt8,
            cmdLen: UInt32,
            response: *mut UInt8,
            responseLen: *mut UInt32,
        ) -> IOReturn,
    >,
    pub AVCCommandInGeneration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            busGeneration: UInt32,
            command: *const UInt8,
            cmdLen: UInt32,
            response: *mut UInt8,
            responseLen: *mut UInt32,
        ) -> IOReturn,
    >,
    pub getAncestorInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            object_class: *mut ::std::os::raw::c_char,
            pluginType: REFIID,
            iid: REFIID,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub getProtocolInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pluginType: REFIID,
            iid: REFIID,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub getAsyncConnectionPlugCounts: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            inputPlugCount: *mut UInt8,
            outputPlugCount: *mut UInt8,
        ) -> IOReturn,
    >,
    pub createConsumerPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            plugNumber: UInt8,
            iid: REFIID,
        ) -> *mut *mut IUnknownVTbl,
    >,
    pub updateAVCCommandTimeout:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub makeP2PInputConnection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            inputPlug: UInt32,
            chan: UInt32,
        ) -> IOReturn,
    >,
    pub breakP2PInputConnection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, inputPlug: UInt32) -> IOReturn,
    >,
    pub makeP2POutputConnection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            outputPlug: UInt32,
            chan: UInt32,
            speed: IOFWSpeed,
        ) -> IOReturn,
    >,
    pub breakP2POutputConnection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, outputPlug: UInt32) -> IOReturn,
    >,
    pub createAVCAsynchronousCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            command: *const UInt8,
            cmdLen: UInt32,
            completionCallback: IOFireWireAVCLibAsynchronousCommandCallback,
            pRefCon: *mut ::std::os::raw::c_void,
            ppCommandObject: *mut *mut IOFireWireAVCLibAsynchronousCommand,
        ) -> IOReturn,
    >,
    pub AVCAsynchronousCommandSubmit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pCommandObject: *mut IOFireWireAVCLibAsynchronousCommand,
        ) -> IOReturn,
    >,
    pub AVCAsynchronousCommandReinit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pCommandObject: *mut IOFireWireAVCLibAsynchronousCommand,
        ) -> IOReturn,
    >,
    pub AVCAsynchronousCommandCancel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pCommandObject: *mut IOFireWireAVCLibAsynchronousCommand,
        ) -> IOReturn,
    >,
    pub AVCAsynchronousCommandRelease: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pCommandObject: *mut IOFireWireAVCLibAsynchronousCommand,
        ) -> IOReturn,
    >,
    pub AVCAsynchronousCommandReinitWithCommandBytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pCommandObject: *mut IOFireWireAVCLibAsynchronousCommand,
            command: *const UInt8,
            cmdLen: UInt32,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOFireWireAVCLibProtocolInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub addCallbackDispatcherToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            cfRunLoopRef: CFRunLoopRef,
        ) -> IOReturn,
    >,
    pub removeCallbackDispatcherFromRunLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void)>,
    pub setMessageCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWAVCMessageCallback,
        ),
    >,
    pub setAVCRequestCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            subUnitType: UInt32,
            subUnitID: UInt32,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWAVCRequestCallback,
        ) -> IOReturn,
    >,
    pub allocateInputPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refcon: *mut ::std::os::raw::c_void,
            func: IOFWAVCPCRCallback,
            plug: *mut UInt32,
        ) -> IOReturn,
    >,
    pub freeInputPlug: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, plug: UInt32),
    >,
    pub readInputPlug: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, plug: UInt32) -> UInt32,
    >,
    pub updateInputPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            plug: UInt32,
            oldVal: UInt32,
            newVal: UInt32,
        ) -> IOReturn,
    >,
    pub allocateOutputPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refcon: *mut ::std::os::raw::c_void,
            func: IOFWAVCPCRCallback,
            plug: *mut UInt32,
        ) -> IOReturn,
    >,
    pub freeOutputPlug: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, plug: UInt32),
    >,
    pub readOutputPlug: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, plug: UInt32) -> UInt32,
    >,
    pub updateOutputPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            plug: UInt32,
            oldVal: UInt32,
            newVal: UInt32,
        ) -> IOReturn,
    >,
    pub readOutputMasterPlug:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> UInt32>,
    pub updateOutputMasterPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            oldVal: UInt32,
            newVal: UInt32,
        ) -> IOReturn,
    >,
    pub readInputMasterPlug:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> UInt32>,
    pub updateInputMasterPlug: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            oldVal: UInt32,
            newVal: UInt32,
        ) -> IOReturn,
    >,
    pub publishAVCUnitDirectory:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub installAVCCommandHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            subUnitTypeAndID: UInt32,
            opCode: UInt32,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWAVCCommandHandlerCallback,
        ) -> IOReturn,
    >,
    pub sendAVCResponse: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            generation: UInt32,
            nodeID: UInt16,
            response: *const ::std::os::raw::c_char,
            responseLen: UInt32,
        ) -> IOReturn,
    >,
    pub addSubunit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            subunitType: UInt32,
            numSourcePlugs: UInt32,
            numDestPlugs: UInt32,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWAVCSubunitPlugHandlerCallback,
            pSubunitTypeAndID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub setSubunitPlugSignalFormat: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            subunitTypeAndID: UInt32,
            plugType: IOFWAVCPlugTypes,
            plugNum: UInt32,
            signalFormat: UInt32,
        ) -> IOReturn,
    >,
    pub getSubunitPlugSignalFormat: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            subunitTypeAndID: UInt32,
            plugType: IOFWAVCPlugTypes,
            plugNum: UInt32,
            pSignalFormat: *mut UInt32,
        ) -> IOReturn,
    >,
    pub connectTargetPlugs: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            sourceSubunitTypeAndID: UInt32,
            sourcePlugType: IOFWAVCPlugTypes,
            pSourcePlugNum: *mut UInt32,
            destSubunitTypeAndID: UInt32,
            destPlugType: IOFWAVCPlugTypes,
            pDestPlugNum: *mut UInt32,
            lockConnection: bool,
            permConnection: bool,
        ) -> IOReturn,
    >,
    pub disconnectTargetPlugs: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            sourceSubunitTypeAndID: UInt32,
            sourcePlugType: IOFWAVCPlugTypes,
            sourcePlugNum: UInt32,
            destSubunitTypeAndID: UInt32,
            destPlugType: IOFWAVCPlugTypes,
            destPlugNum: UInt32,
        ) -> IOReturn,
    >,
    pub getTargetPlugConnection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            subunitTypeAndID: UInt32,
            plugType: IOFWAVCPlugTypes,
            plugNum: UInt32,
            pConnectedSubunitTypeAndID: *mut UInt32,
            pConnectedPlugType: *mut IOFWAVCPlugTypes,
            pConnectedPlugNum: *mut UInt32,
            pLockConnection: *mut bool,
            pPermConnection: *mut bool,
        ) -> IOReturn,
    >,
}
pub type IOFireWireAVCPortStateHandler =
    ::std::option::Option<unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, state: UInt32)>;
pub type IOFireWireAVCFrameStatusHandler = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, mode: UInt32, count: UInt32),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireAVCLibConsumerInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub setSubunit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, subunit: UInt8),
    >,
    pub setRemotePlug: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, plugNumber: UInt8),
    >,
    pub connectToRemotePlug:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub disconnectFromRemotePlug:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setFrameStatusHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refcon: *mut ::std::os::raw::c_void,
            handler: IOFireWireAVCFrameStatusHandler,
        ),
    >,
    pub frameProcessed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, mode: UInt32),
    >,
    pub setMaxPayloadSize: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, size: UInt32),
    >,
    pub setSegmentSize: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, size: UInt32) -> IOReturn,
    >,
    pub getSegmentSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> UInt32>,
    pub getSegmentBuffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char,
    >,
    pub setPortStateHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refcon: *mut ::std::os::raw::c_void,
            handler: IOFireWireAVCPortStateHandler,
        ),
    >,
    pub setPortFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: UInt32),
    >,
    pub clearPortFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: UInt32),
    >,
    pub getPortFlags:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> UInt32>,
}
pub type IOFireWireLibDeviceRef = *mut *mut IOFireWireDeviceInterface_t;
pub type IOFireWireLibUnitRef = IOFireWireLibDeviceRef;
pub type IOFireWireLibNubRef = IOFireWireLibDeviceRef;
pub type IOFireWireLibPseudoAddressSpaceRef = *mut *mut IOFireWirePseudoAddressSpaceInterface_t;
pub type IOFireWireLibPhysicalAddressSpaceRef = *mut *mut IOFireWirePhysicalAddressSpaceInterface_t;
pub type IOFireWireLibLocalUnitDirectoryRef = *mut *mut IOFireWireLocalUnitDirectoryInterface_t;
pub type IOFireWireLibConfigDirectoryRef = *mut *mut IOFireWireConfigDirectoryInterface_t;
pub type IOFireWireLibCommandRef = *mut *mut IOFireWireCommandInterface_t;
pub type IOFireWireLibReadCommandRef = *mut *mut IOFireWireReadCommandInterface_t;
pub type IOFireWireLibReadQuadletCommandRef = *mut *mut IOFireWireReadQuadletCommandInterface_t;
pub type IOFireWireLibWriteCommandRef = *mut *mut IOFireWireWriteCommandInterface_t;
pub type IOFireWireLibWriteQuadletCommandRef = *mut *mut IOFireWireWriteQuadletCommandInterface_t;
pub type IOFireWireLibCompareSwapCommandRef = *mut *mut IOFireWireCompareSwapCommandInterface_t;
pub type IOFireWireLibVectorCommandRef = *mut *mut IOFireWireLibVectorCommandInterface_t;
pub type IOFireWireLibPHYCommandRef = *mut *mut IOFireWirePHYCommandInterface_t;
pub type IOFireWireLibAsyncStreamCommandRef = *mut *mut IOFireWireAsyncStreamCommandInterface_t;
pub type IOFireWireLibCompareSwapCommandV3Ref =
    *mut *mut IOFireWireCompareSwapCommandInterface_v3_t;
pub type IOFireWireLibIRMAllocationRef = *mut *mut IOFireWireLibIRMAllocationInterface_t;
pub type IOFireWireLibIsochChannelRef = *mut *mut IOFireWireIsochChannelInterface_t;
pub type IOFireWireLibIsochPortRef = *mut *mut IOFireWireIsochPortInterface_t;
pub type IOFireWireLibRemoteIsochPortRef = *mut *mut IOFireWireRemoteIsochPortInterface_t;
pub type IOFireWireLibLocalIsochPortRef = *mut *mut IOFireWireLocalIsochPortInterface_t;
pub type IOFireWireLibDCLCommandPoolRef = *mut *mut IOFireWireDCLCommandPoolInterface_t;
pub type IOFireWireLibNuDCLPoolRef = *mut *mut IOFireWireNuDCLPoolInterface_t;
pub type IOFWAsyncStreamListenerInterfaceRef = *mut *mut IOFWAsyncStreamListenerInterface_t;
pub type IOFireWireLibPHYPacketListenerRef = *mut *mut IOFireWireLibPHYPacketListenerInterface_t;
pub type IOFireWirePseudoAddressSpaceReadHandler = ::std::option::Option<
    unsafe extern "C" fn(
        addressSpace: IOFireWireLibPseudoAddressSpaceRef,
        commandID: FWClientCommandID,
        packetLen: UInt32,
        packetOffset: UInt32,
        srcNodeID: UInt16,
        destAddressHi: UInt32,
        destAddressLo: UInt32,
        refCon: *mut ::std::os::raw::c_void,
    ) -> UInt32,
>;
pub type IOFireWirePseudoAddressSpaceSkippedPacketHandler = ::std::option::Option<
    unsafe extern "C" fn(
        addressSpace: IOFireWireLibPseudoAddressSpaceRef,
        commandID: FWClientCommandID,
        skippedPacketCount: UInt32,
    ),
>;
pub type IOFireWirePseudoAddressSpaceWriteHandler = ::std::option::Option<
    unsafe extern "C" fn(
        addressSpace: IOFireWireLibPseudoAddressSpaceRef,
        commandID: FWClientCommandID,
        packetLen: UInt32,
        packet: *mut ::std::os::raw::c_void,
        srcNodeID: UInt16,
        destAddressHi: UInt32,
        destAddressLo: UInt32,
        refCon: *mut ::std::os::raw::c_void,
    ) -> UInt32,
>;
pub type IOFireWireBusResetHandler = ::std::option::Option<
    unsafe extern "C" fn(interface: IOFireWireLibDeviceRef, commandID: FWClientCommandID),
>;
pub type IOFireWireBusResetDoneHandler = ::std::option::Option<
    unsafe extern "C" fn(interface: IOFireWireLibDeviceRef, commandID: FWClientCommandID),
>;
pub type IOFireWireLibCommandCallback = ::std::option::Option<
    unsafe extern "C" fn(refCon: *mut ::std::os::raw::c_void, completionStatus: IOReturn),
>;
pub type IOFireWireLibPHYPacketCallback = ::std::option::Option<
    unsafe extern "C" fn(
        listener: IOFireWireLibPHYPacketListenerRef,
        commandID: FWClientCommandID,
        data1: UInt32,
        data2: UInt32,
        refCon: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFireWireLibPHYPacketSkippedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        listener: IOFireWireLibPHYPacketListenerRef,
        commandID: FWClientCommandID,
        skippedPacketCount: UInt32,
        refCon: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFireWireLibIRMAllocationLostNotificationProc = ::std::option::Option<
    unsafe extern "C" fn(
        irmAllocation: IOFireWireLibIRMAllocationRef,
        refCon: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFWAsyncStreamListenerHandler = ::std::option::Option<
    unsafe extern "C" fn(
        listener: IOFWAsyncStreamListenerInterfaceRef,
        commandID: FWClientCommandID,
        size: UInt32,
        packet: *mut ::std::os::raw::c_void,
        refCon: *mut ::std::os::raw::c_void,
    ) -> UInt32,
>;
pub type IOFWAsyncStreamListenerSkippedPacketHandler = ::std::option::Option<
    unsafe extern "C" fn(
        listener: IOFWAsyncStreamListenerInterfaceRef,
        commandID: FWClientCommandID,
        skippedPacketCount: UInt32,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireDeviceInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub InterfaceIsInited:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> Boolean>,
    pub GetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> io_object_t>,
    pub Open:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> IOReturn>,
    pub OpenWithSessionRef: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            sessionRef: IOFireWireSessionRef,
        ) -> IOReturn,
    >,
    pub Close: ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef)>,
    pub NotificationIsOn:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> Boolean>,
    pub AddCallbackDispatcherToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, inRunLoop: CFRunLoopRef) -> IOReturn,
    >,
    pub RemoveCallbackDispatcherFromRunLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef)>,
    pub TurnOnNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> Boolean>,
    pub TurnOffNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef)>,
    pub SetBusResetHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            handler: IOFireWireBusResetHandler,
        ) -> IOFireWireBusResetHandler,
    >,
    pub SetBusResetDoneHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            handler: IOFireWireBusResetDoneHandler,
        ) -> IOFireWireBusResetDoneHandler,
    >,
    pub ClientCommandIsComplete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            commandID: FWClientCommandID,
            status: IOReturn,
        ),
    >,
    pub Read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            failOnReset: Boolean,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub ReadQuadlet: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            val: *mut UInt32,
            failOnReset: Boolean,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub Write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            buf: *const ::std::os::raw::c_void,
            size: *mut UInt32,
            failOnReset: Boolean,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub WriteQuadlet: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            val: UInt32,
            failOnReset: Boolean,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub CompareSwap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            cmpVal: UInt32,
            newVal: UInt32,
            failOnReset: Boolean,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub CreateReadCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub CreateReadQuadletCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            quads: *mut UInt32,
            numQuads: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub CreateWriteCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub CreateWriteQuadletCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            quads: *mut UInt32,
            numQuads: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub CreateCompareSwapCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            cmpVal: UInt32,
            newVal: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub BusReset:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> IOReturn>,
    pub GetCycleTime: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, outCycleTime: *mut UInt32) -> IOReturn,
    >,
    pub GetGenerationAndNodeID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            outGeneration: *mut UInt32,
            outNodeID: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetLocalNodeID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            outLocalNodeID: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetResetTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            outResetTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub CreateLocalUnitDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            iid: REFIID,
        ) -> IOFireWireLibLocalUnitDirectoryRef,
    >,
    pub GetConfigDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            iid: REFIID,
        ) -> IOFireWireLibConfigDirectoryRef,
    >,
    pub CreateConfigDirectoryWithIOObject: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inObject: io_object_t,
            iid: REFIID,
        ) -> IOFireWireLibConfigDirectoryRef,
    >,
    pub CreatePseudoAddressSpace: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inSize: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            inQueueBufferSize: UInt32,
            inBackingStore: *mut ::std::os::raw::c_void,
            inFlags: UInt32,
            iid: REFIID,
        ) -> IOFireWireLibPseudoAddressSpaceRef,
    >,
    pub CreatePhysicalAddressSpace: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inSize: UInt32,
            inBackingStore: *mut ::std::os::raw::c_void,
            inFlags: UInt32,
            iid: REFIID,
        ) -> IOFireWireLibPhysicalAddressSpaceRef,
    >,
    pub FireBugMsg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            msg: *const ::std::os::raw::c_char,
        ) -> IOReturn,
    >,
    pub AddIsochCallbackDispatcherToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, inRunLoop: CFRunLoopRef) -> IOReturn,
    >,
    pub CreateRemoteIsochPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inTalking: Boolean,
            iid: REFIID,
        ) -> IOFireWireLibRemoteIsochPortRef,
    >,
    pub CreateLocalIsochPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inTalking: Boolean,
            inDCLProgram: *mut DCLCommand,
            inStartEvent: UInt32,
            inStartState: UInt32,
            inStartMask: UInt32,
            inDCLProgramRanges: *mut IOVirtualRange,
            inDCLProgramRangeCount: UInt32,
            inBufferRanges: *mut IOVirtualRange,
            inBufferRangeCount: UInt32,
            iid: REFIID,
        ) -> IOFireWireLibLocalIsochPortRef,
    >,
    pub CreateIsochChannel: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            doIrm: Boolean,
            packetSize: UInt32,
            prefSpeed: IOFWSpeed,
            iid: REFIID,
        ) -> IOFireWireLibIsochChannelRef,
    >,
    pub CreateDCLCommandPool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            size: IOByteCount,
            iid: REFIID,
        ) -> IOFireWireLibDCLCommandPoolRef,
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> *mut ::std::os::raw::c_void,
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, refCon: *const ::std::os::raw::c_void),
    >,
    pub GetDebugProperty: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            interface: *mut ::std::os::raw::c_void,
            inPropertyName: CFStringRef,
            outPropertyType: *mut CFTypeID,
        ) -> CFTypeRef,
    >,
    pub PrintDCLProgram: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inProgram: *const DCLCommand,
            inLength: UInt32,
        ),
    >,
    pub CreateInitialUnitsPseudoAddressSpace: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inAddressLo: UInt32,
            inSize: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            inQueueBufferSize: UInt32,
            inBackingStore: *mut ::std::os::raw::c_void,
            inFlags: UInt32,
            iid: REFIID,
        ) -> IOFireWireLibPseudoAddressSpaceRef,
    >,
    pub AddCallbackDispatcherToRunLoopForMode: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inRunLoop: CFRunLoopRef,
            inRunLoopMode: CFStringRef,
        ) -> IOReturn,
    >,
    pub AddIsochCallbackDispatcherToRunLoopForMode: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inRunLoop: CFRunLoopRef,
            inRunLoopMode: CFStringRef,
        ) -> IOReturn,
    >,
    pub RemoveIsochCallbackDispatcherFromRunLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef)>,
    pub Seize: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, inFlags: IOOptionBits, ...) -> IOReturn,
    >,
    pub FireLog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> IOReturn,
    >,
    pub GetBusCycleTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            outBusTime: *mut UInt32,
            outCycleTime: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateCompareSwapCommand64: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            cmpVal: UInt64,
            newVal: UInt64,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub CompareSwap64: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            device: io_object_t,
            addr: *const FWAddress,
            expectedVal: *mut UInt32,
            newVal: *mut UInt32,
            oldVal: *mut UInt32,
            size: IOByteCount,
            failOnReset: Boolean,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub GetBusGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, outGeneration: *mut UInt32) -> IOReturn,
    >,
    pub GetLocalNodeIDWithGeneration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            checkGeneration: UInt32,
            outLocalNodeID: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetRemoteNodeID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            checkGeneration: UInt32,
            outRemoteNodeID: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetSpeedToNode: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            checkGeneration: UInt32,
            outSpeed: *mut IOFWSpeed,
        ) -> IOReturn,
    >,
    pub GetSpeedBetweenNodes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            checkGeneration: UInt32,
            srcNodeID: UInt16,
            destNodeID: UInt16,
            outSpeed: *mut IOFWSpeed,
        ) -> IOReturn,
    >,
    pub GetIRMNodeID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            checkGeneration: UInt32,
            outIRMNodeID: *mut UInt16,
        ) -> IOReturn,
    >,
    pub ClipMaxRec2K: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef, clipMaxRec: Boolean) -> IOReturn,
    >,
    pub CreateNuDCLPool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            capacity: UInt32,
            iid: REFIID,
        ) -> IOFireWireLibNuDCLPoolRef,
    >,
    pub GetSessionRef: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> IOFireWireSessionRef,
    >,
    pub CreateLocalIsochPortWithOptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            inTalking: Boolean,
            dclProgram: *mut DCLCommand,
            startEvent: UInt32,
            startState: UInt32,
            startMask: UInt32,
            dclProgramRanges: *mut IOVirtualRange,
            dclProgramRangeCount: UInt32,
            bufferRanges: *mut IOVirtualRange,
            bufferRangeCount: UInt32,
            options: IOFWIsochPortOptions,
            iid: REFIID,
        ) -> IOFireWireLibLocalIsochPortRef,
    >,
    pub CreateVectorCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            callback: IOFireWireLibCommandCallback,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibVectorCommandRef,
    >,
    pub AllocateIRMBandwidthInGeneration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            bandwidthUnits: UInt32,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub ReleaseIRMBandwidthInGeneration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            bandwidthUnits: UInt32,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub AllocateIRMChannelInGeneration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            isochChannel: UInt8,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub ReleaseIRMChannelInGeneration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            isochChannel: UInt8,
            generation: UInt32,
        ) -> IOReturn,
    >,
    pub CreateIRMAllocation: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            releaseIRMResourcesOnFree: Boolean,
            callback: IOFireWireLibIRMAllocationLostNotificationProc,
            pLostNotificationProcRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibIRMAllocationRef,
    >,
    pub CreateAsyncStreamListener: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            channel: UInt32,
            callback: IOFWAsyncStreamListenerHandler,
            inRefCon: *mut ::std::os::raw::c_void,
            inQueueBufferSize: UInt32,
            iid: REFIID,
        ) -> IOFWAsyncStreamListenerInterfaceRef,
    >,
    pub GetIsochAsyncPort:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibDeviceRef) -> mach_port_t>,
    pub CreatePHYCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            data1: UInt32,
            data2: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub CreatePHYPacketListener: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            queueCount: UInt32,
            iid: REFIID,
        ) -> IOFireWireLibPHYPacketListenerRef,
    >,
    pub CreateAsyncStreamCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            channel: UInt32,
            sync: UInt32,
            tag: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOFireWireLibCommandCallback,
            failOnReset: Boolean,
            generation: UInt32,
            inRefCon: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> IOFireWireLibCommandRef,
    >,
    pub GetCycleTimeAndUpTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDeviceRef,
            outCycleTime: *mut UInt32,
            outUpTime: *mut UInt64,
        ) -> IOReturn,
    >,
}
pub type IOFireWireDeviceInterface = IOFireWireDeviceInterface_t;
pub type IOFireWireUnitInterface = IOFireWireDeviceInterface_t;
pub type IOFireWireNubInterface = IOFireWireDeviceInterface_t;
pub const FWAddressSpaceFlags_kFWAddressSpaceNoFlags: FWAddressSpaceFlags = 0;
pub const FWAddressSpaceFlags_kFWAddressSpaceNoWriteAccess: FWAddressSpaceFlags = 1;
pub const FWAddressSpaceFlags_kFWAddressSpaceNoReadAccess: FWAddressSpaceFlags = 2;
pub const FWAddressSpaceFlags_kFWAddressSpaceAutoWriteReply: FWAddressSpaceFlags = 4;
pub const FWAddressSpaceFlags_kFWAddressSpaceAutoReadReply: FWAddressSpaceFlags = 8;
pub const FWAddressSpaceFlags_kFWAddressSpaceAutoCopyOnWrite: FWAddressSpaceFlags = 16;
pub const FWAddressSpaceFlags_kFWAddressSpaceShareIfExists: FWAddressSpaceFlags = 32;
pub const FWAddressSpaceFlags_kFWAddressSpaceExclusive: FWAddressSpaceFlags = 64;
pub type FWAddressSpaceFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWirePseudoAddressSpaceInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub SetWriteHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPseudoAddressSpaceRef,
            inWriter: IOFireWirePseudoAddressSpaceWriteHandler,
        ) -> IOFireWirePseudoAddressSpaceWriteHandler,
    >,
    pub SetReadHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPseudoAddressSpaceRef,
            inReader: IOFireWirePseudoAddressSpaceReadHandler,
        ) -> IOFireWirePseudoAddressSpaceReadHandler,
    >,
    pub SetSkippedPacketHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPseudoAddressSpaceRef,
            inHandler: IOFireWirePseudoAddressSpaceSkippedPacketHandler,
        ) -> IOFireWirePseudoAddressSpaceSkippedPacketHandler,
    >,
    pub NotificationIsOn: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPseudoAddressSpaceRef) -> Boolean,
    >,
    pub TurnOnNotification: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPseudoAddressSpaceRef) -> Boolean,
    >,
    pub TurnOffNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibPseudoAddressSpaceRef)>,
    pub ClientCommandIsComplete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPseudoAddressSpaceRef,
            commandID: FWClientCommandID,
            status: IOReturn,
        ),
    >,
    pub GetFWAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPseudoAddressSpaceRef, outAddr: *mut FWAddress),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPseudoAddressSpaceRef,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetBufferSize: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPseudoAddressSpaceRef) -> UInt32,
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPseudoAddressSpaceRef,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
pub type IOFireWirePseudoAddressSpaceInterface = IOFireWirePseudoAddressSpaceInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireLibIRMAllocationInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub setReleaseIRMResourcesOnFree: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIRMAllocationRef, doRelease: Boolean),
    >,
    pub allocateIsochResources: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIRMAllocationRef,
            isochChannel: UInt8,
            bandwidthUnits: UInt32,
        ) -> IOReturn,
    >,
    pub deallocateIsochResources: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIRMAllocationRef) -> IOReturn,
    >,
    pub areIsochResourcesAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIRMAllocationRef,
            pAllocatedIsochChannel: *mut UInt8,
            pAllocatedBandwidthUnits: *mut UInt32,
        ) -> Boolean,
    >,
    pub NotificationIsOn: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIRMAllocationRef) -> Boolean,
    >,
    pub TurnOnNotification: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIRMAllocationRef) -> Boolean,
    >,
    pub TurnOffNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIRMAllocationRef)>,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIRMAllocationRef,
            refCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIRMAllocationRef) -> *mut ::std::os::raw::c_void,
    >,
}
pub type IOFireWireLibIRMAllocationInterface = IOFireWireLibIRMAllocationInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireLocalUnitDirectoryInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub AddEntry_Ptr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalUnitDirectoryRef,
            key: ::std::os::raw::c_int,
            inBuffer: *mut ::std::os::raw::c_void,
            inLen: usize,
            inDesc: CFStringRef,
        ) -> IOReturn,
    >,
    pub AddEntry_UInt32: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalUnitDirectoryRef,
            key: ::std::os::raw::c_int,
            value: UInt32,
            inDesc: CFStringRef,
        ) -> IOReturn,
    >,
    pub AddEntry_FWAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalUnitDirectoryRef,
            key: ::std::os::raw::c_int,
            value: *const FWAddress,
            inDesc: CFStringRef,
        ) -> IOReturn,
    >,
    pub Publish: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibLocalUnitDirectoryRef) -> IOReturn,
    >,
    pub Unpublish: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibLocalUnitDirectoryRef) -> IOReturn,
    >,
}
pub type IOFireWireLocalUnitDirectoryInterface = IOFireWireLocalUnitDirectoryInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWirePhysicalAddressSpaceInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetPhysicalSegments: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPhysicalAddressSpaceRef,
            ioSegmentCount: *mut UInt32,
            outSegments: *mut IOByteCount,
            outAddresses: *mut IOPhysicalAddress,
        ),
    >,
    pub GetPhysicalSegment: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPhysicalAddressSpaceRef,
            offset: IOByteCount,
            length: *mut IOByteCount,
        ) -> IOPhysicalAddress,
    >,
    pub GetPhysicalAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPhysicalAddressSpaceRef) -> IOPhysicalAddress,
    >,
    pub GetFWAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPhysicalAddressSpaceRef, outAddr: *mut FWAddress),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPhysicalAddressSpaceRef,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetBufferSize: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPhysicalAddressSpaceRef) -> UInt32,
    >,
}
pub type IOFireWirePhysicalAddressSpaceInterface = IOFireWirePhysicalAddressSpaceInterface_t;
pub const kFWCommandNoFlags: _bindgen_ty_135 = 0;
pub const kFWCommandInterfaceForceNoCopy: _bindgen_ty_135 = 1;
pub const kFWCommandInterfaceForceCopyAlways: _bindgen_ty_135 = 2;
pub const kFWCommandInterfaceSyncExecute: _bindgen_ty_135 = 4;
pub const kFWCommandInterfaceAbsolute: _bindgen_ty_135 = 8;
pub const kFWVectorCommandInterfaceOrdered: _bindgen_ty_135 = 16;
pub const kFWCommandInterfaceForceBlockRequest: _bindgen_ty_135 = 32;
pub type _bindgen_ty_135 = ::std::os::raw::c_uint;
pub const kFWDontFailOnReset: _bindgen_ty_136 = 0;
pub const kFWFailOnReset: _bindgen_ty_136 = 1;
pub type _bindgen_ty_136 = ::std::os::raw::c_uint;
pub const kFireWireCommandUseCopy: _bindgen_ty_137 = 65536;
pub const kFireWireCommandAbsolute: _bindgen_ty_137 = 131072;
pub type _bindgen_ty_137 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            size: UInt32,
            buf: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            outSize: *mut UInt32,
            outBuf: *mut *mut ::std::os::raw::c_void,
        ),
    >,
    pub SetMaxPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            maxPacketSize: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, inFlags: UInt32),
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, duration: UInt32),
    >,
    pub SetMaxRetryCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef, count: UInt32)>,
    pub GetAckCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetResponseCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub SetMaxPacketSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, speed: IOFWSpeed),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> *mut ::std::os::raw::c_void,
    >,
}
pub type IOFireWireCommandInterface = IOFireWireCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireReadCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            size: UInt32,
            buf: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            outSize: *mut UInt32,
            outBuf: *mut *mut ::std::os::raw::c_void,
        ),
    >,
    pub SetMaxPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            maxPacketSize: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, inFlags: UInt32),
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, duration: UInt32),
    >,
    pub SetMaxRetryCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef, count: UInt32)>,
    pub GetAckCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetResponseCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub SetMaxPacketSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, speed: IOFWSpeed),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> *mut ::std::os::raw::c_void,
    >,
}
pub type IOFireWireReadCommandInterface = IOFireWireReadCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireWriteCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            size: UInt32,
            buf: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            outSize: *mut UInt32,
            outBuf: *mut *mut ::std::os::raw::c_void,
        ),
    >,
    pub SetMaxPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            maxPacketSize: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, inFlags: UInt32),
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, duration: UInt32),
    >,
    pub SetMaxRetryCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef, count: UInt32)>,
    pub GetAckCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetResponseCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub SetMaxPacketSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, speed: IOFWSpeed),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> *mut ::std::os::raw::c_void,
    >,
}
pub type IOFireWireWriteCommandInterface = IOFireWireWriteCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireCompareSwapCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetValues: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandRef,
            cmpVal: UInt32,
            newVal: UInt32,
        ),
    >,
    pub SetValues64: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandRef,
            cmpVal: UInt64,
            newVal: UInt64,
        ),
    >,
    pub DidLock: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCompareSwapCommandRef) -> Boolean,
    >,
    pub Locked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandRef,
            oldValue: *mut UInt32,
        ) -> IOReturn,
    >,
    pub Locked64: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandRef,
            oldValue: *mut UInt64,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCompareSwapCommandRef, inFlags: UInt32),
    >,
}
pub type IOFireWireCompareSwapCommandInterface = IOFireWireCompareSwapCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireCompareSwapCommandInterface_v3_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            size: UInt32,
            buf: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            outSize: *mut UInt32,
            outBuf: *mut *mut ::std::os::raw::c_void,
        ),
    >,
    pub SetMaxPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            maxPacketSize: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, inFlags: UInt32),
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, duration: UInt32),
    >,
    pub SetMaxRetryCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef, count: UInt32)>,
    pub GetAckCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetResponseCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub SetMaxPacketSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, speed: IOFWSpeed),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> *mut ::std::os::raw::c_void,
    >,
    pub SetValues: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandV3Ref,
            cmpVal: UInt32,
            newVal: UInt32,
        ),
    >,
    pub SetValues64: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandV3Ref,
            cmpVal: UInt64,
            newVal: UInt64,
        ),
    >,
    pub DidLock: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCompareSwapCommandV3Ref) -> Boolean,
    >,
    pub Locked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandV3Ref,
            oldValue: *mut UInt32,
        ) -> IOReturn,
    >,
    pub Locked64: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCompareSwapCommandV3Ref,
            oldValue: *mut UInt64,
        ) -> IOReturn,
    >,
}
pub type IOFireWireCompareSwapCommandInterface_v3 = IOFireWireCompareSwapCommandInterface_v3_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWirePHYCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            size: UInt32,
            buf: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            outSize: *mut UInt32,
            outBuf: *mut *mut ::std::os::raw::c_void,
        ),
    >,
    pub SetMaxPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            maxPacketSize: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, inFlags: UInt32),
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, duration: UInt32),
    >,
    pub SetMaxRetryCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef, count: UInt32)>,
    pub GetAckCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetResponseCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub SetMaxPacketSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, speed: IOFWSpeed),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> *mut ::std::os::raw::c_void,
    >,
    pub SetDataQuads: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPHYCommandRef, data1: UInt32, data2: UInt32),
    >,
}
pub type IOFireWirePHYCommandInterface = IOFireWirePHYCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireAsyncStreamCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            size: UInt32,
            buf: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            outSize: *mut UInt32,
            outBuf: *mut *mut ::std::os::raw::c_void,
        ),
    >,
    pub SetMaxPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            maxPacketSize: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, inFlags: UInt32),
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, duration: UInt32),
    >,
    pub SetMaxRetryCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef, count: UInt32)>,
    pub GetAckCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetResponseCode:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub SetMaxPacketSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, speed: IOFWSpeed),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> *mut ::std::os::raw::c_void,
    >,
    pub SetChannel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibAsyncStreamCommandRef, channel: UInt32),
    >,
    pub SetSyncBits: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibAsyncStreamCommandRef, sync: UInt16),
    >,
    pub SetTagBits: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibAsyncStreamCommandRef, tag: UInt16),
    >,
}
pub type IOFireWireAsyncStreamCommandInterface = IOFireWireAsyncStreamCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireReadQuadletCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetQuads: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibReadQuadletCommandRef,
            inQuads: *mut UInt32,
            inNumQuads: UInt32,
        ),
    >,
}
pub type IOFireWireReadQuadletCommandInterface = IOFireWireReadQuadletCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireWriteQuadletCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub GetStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub GetTransferredBytes:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> UInt32>,
    pub GetTargetAddress: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, outAddr: *mut FWAddress),
    >,
    pub SetTarget: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, addr: *const FWAddress),
    >,
    pub SetGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, generation: UInt32),
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, refCon: *mut ::std::os::raw::c_void),
    >,
    pub IsExecuting:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> Boolean>,
    pub Submit:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibCommandRef) -> IOReturn>,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub Cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibCommandRef, reason: IOReturn) -> IOReturn,
    >,
    pub SetQuads: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibWriteQuadletCommandRef,
            inQuads: *mut UInt32,
            inNumQuads: UInt32,
        ),
    >,
}
pub type IOFireWireWriteQuadletCommandInterface = IOFireWireWriteQuadletCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireConfigDirectoryInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub Update: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibConfigDirectoryRef, inOffset: UInt32) -> IOReturn,
    >,
    pub GetKeyType: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inKey: ::std::os::raw::c_int,
            outType: *mut IOConfigKeyType,
        ) -> IOReturn,
    >,
    pub GetKeyValue_UInt32: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inKey: ::std::os::raw::c_int,
            outValue: *mut UInt32,
            outText: *mut CFStringRef,
        ) -> IOReturn,
    >,
    pub GetKeyValue_Data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inKey: ::std::os::raw::c_int,
            outValue: *mut CFDataRef,
            outText: *mut CFStringRef,
        ) -> IOReturn,
    >,
    pub GetKeyValue_ConfigDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inKey: ::std::os::raw::c_int,
            outValue: *mut IOFireWireLibConfigDirectoryRef,
            iid: REFIID,
            outText: *mut CFStringRef,
        ) -> IOReturn,
    >,
    pub GetKeyOffset_FWAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inKey: ::std::os::raw::c_int,
            outValue: *mut FWAddress,
            text: *mut CFStringRef,
        ) -> IOReturn,
    >,
    pub GetIndexType: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            type_: *mut IOConfigKeyType,
        ) -> IOReturn,
    >,
    pub GetIndexKey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            key: *mut ::std::os::raw::c_int,
        ) -> IOReturn,
    >,
    pub GetIndexValue_UInt32: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            value: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIndexValue_Data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            value: *mut CFDataRef,
        ) -> IOReturn,
    >,
    pub GetIndexValue_String: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            outValue: *mut CFStringRef,
        ) -> IOReturn,
    >,
    pub GetIndexValue_ConfigDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            outValue: *mut IOFireWireLibConfigDirectoryRef,
            iid: REFIID,
        ) -> IOReturn,
    >,
    pub GetIndexOffset_FWAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            outValue: *mut FWAddress,
        ) -> IOReturn,
    >,
    pub GetIndexOffset_UInt32: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            outValue: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIndexEntry: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inIndex: ::std::os::raw::c_int,
            outValue: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetSubdirectories: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            outIterator: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub GetKeySubdirectories: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            inKey: ::std::os::raw::c_int,
            outIterator: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub GetType: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            outType: *mut ::std::os::raw::c_int,
        ) -> IOReturn,
    >,
    pub GetNumEntries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibConfigDirectoryRef,
            outNumEntries: *mut ::std::os::raw::c_int,
        ) -> IOReturn,
    >,
}
pub type IOFireWireConfigDirectoryInterface = IOFireWireConfigDirectoryInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireLibVectorCommandInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt32,
    pub revision: UInt32,
    pub Submit: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef) -> IOReturn,
    >,
    pub SubmitWithRefconAndCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            refCon: *mut ::std::os::raw::c_void,
            inCallback: IOFireWireLibCommandCallback,
        ) -> IOReturn,
    >,
    pub IsExecuting: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef) -> Boolean,
    >,
    pub SetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            inCallback: IOFireWireLibCommandCallback,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            refCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef) -> *mut ::std::os::raw::c_void,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef, inFlags: UInt32),
    >,
    pub GetFlags:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef) -> UInt32>,
    pub EnsureCapacity: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef, capacity: UInt32) -> IOReturn,
    >,
    pub AddCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            command: IOFireWireLibCommandRef,
        ),
    >,
    pub RemoveCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            command: IOFireWireLibCommandRef,
        ),
    >,
    pub InsertCommandAtIndex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            command: IOFireWireLibCommandRef,
            index: UInt32,
        ),
    >,
    pub GetCommandAtIndex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            index: UInt32,
        ) -> IOFireWireLibCommandRef,
    >,
    pub GetIndexOfCommand: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibVectorCommandRef,
            command: IOFireWireLibCommandRef,
        ) -> UInt32,
    >,
    pub RemoveCommandAtIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef, index: UInt32),
    >,
    pub RemoveAllCommands:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef)>,
    pub GetCommandCount:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibVectorCommandRef) -> UInt32>,
}
pub type IOFireWireLibVectorCommandInterface = IOFireWireLibVectorCommandInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireLibPHYPacketListenerInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub SetListenerCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPHYPacketListenerRef,
            inCallback: IOFireWireLibPHYPacketCallback,
        ),
    >,
    pub SetSkippedPacketCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPHYPacketListenerRef,
            inCallback: IOFireWireLibPHYPacketSkippedCallback,
        ),
    >,
    pub NotificationIsOn: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPHYPacketListenerRef) -> Boolean,
    >,
    pub TurnOnNotification: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPHYPacketListenerRef) -> IOReturn,
    >,
    pub TurnOffNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibPHYPacketListenerRef)>,
    pub ClientCommandIsComplete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPHYPacketListenerRef,
            commandID: FWClientCommandID,
        ),
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPHYPacketListenerRef,
            refcon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibPHYPacketListenerRef,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPHYPacketListenerRef, flags: UInt32),
    >,
    pub GetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibPHYPacketListenerRef) -> UInt32,
    >,
}
pub type IOFireWireLibPHYPacketListenerInterface = IOFireWireLibPHYPacketListenerInterface_t;
pub type IOFireWireIsochChannelForceStopHandler = ::std::option::Option<
    unsafe extern "C" fn(interface: IOFireWireLibIsochChannelRef, stopCondition: UInt32),
>;
pub type IOFireWireLibIsochPortCallback =
    ::std::option::Option<unsafe extern "C" fn(interface: IOFireWireLibIsochPortRef) -> IOReturn>;
pub type IOFireWireLibIsochPortAllocateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        interface: IOFireWireLibIsochPortRef,
        maxSpeed: IOFWSpeed,
        channel: UInt32,
    ) -> IOReturn,
>;
pub type IOFireWireLibIsochPortGetSupportedCallback = ::std::option::Option<
    unsafe extern "C" fn(
        interface: IOFireWireLibIsochPortRef,
        outMaxSpeed: *mut IOFWSpeed,
        outChanSupported: *mut UInt64,
    ) -> IOReturn,
>;
pub type IOFireWireLibIsochPortFinalizeCallback =
    ::std::option::Option<unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void) -> IOReturn>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireIsochPortInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub revision: UInt32,
    pub version: UInt32,
    pub GetSupported: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            maxSpeed: *mut IOFWSpeed,
            chanSupported: *mut UInt64,
        ) -> IOReturn,
    >,
    pub AllocatePort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            speed: IOFWSpeed,
            chan: UInt32,
        ) -> IOReturn,
    >,
    pub ReleasePort:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub Start:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub Stop:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            inRefCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> *mut ::std::os::raw::c_void,
    >,
}
pub type IOFireWireIsochPortInterface = IOFireWireIsochPortInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireRemoteIsochPortInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub revision: UInt32,
    pub version: UInt32,
    pub GetSupported: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            maxSpeed: *mut IOFWSpeed,
            chanSupported: *mut UInt64,
        ) -> IOReturn,
    >,
    pub AllocatePort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            speed: IOFWSpeed,
            chan: UInt32,
        ) -> IOReturn,
    >,
    pub ReleasePort:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub Start:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub Stop:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            inRefCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> *mut ::std::os::raw::c_void,
    >,
    pub SetGetSupportedHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibRemoteIsochPortRef,
            inHandler: IOFireWireLibIsochPortGetSupportedCallback,
        ) -> IOFireWireLibIsochPortGetSupportedCallback,
    >,
    pub SetAllocatePortHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibRemoteIsochPortRef,
            inHandler: IOFireWireLibIsochPortAllocateCallback,
        ) -> IOFireWireLibIsochPortAllocateCallback,
    >,
    pub SetReleasePortHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibRemoteIsochPortRef,
            inHandler: IOFireWireLibIsochPortCallback,
        ) -> IOFireWireLibIsochPortCallback,
    >,
    pub SetStartHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibRemoteIsochPortRef,
            inHandler: IOFireWireLibIsochPortCallback,
        ) -> IOFireWireLibIsochPortCallback,
    >,
    pub SetStopHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibRemoteIsochPortRef,
            inHandler: IOFireWireLibIsochPortCallback,
        ) -> IOFireWireLibIsochPortCallback,
    >,
}
pub type IOFireWireRemoteIsochPortInterface = IOFireWireRemoteIsochPortInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireLocalIsochPortInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub revision: UInt32,
    pub version: UInt32,
    pub GetSupported: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            maxSpeed: *mut IOFWSpeed,
            chanSupported: *mut UInt64,
        ) -> IOReturn,
    >,
    pub AllocatePort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            speed: IOFWSpeed,
            chan: UInt32,
        ) -> IOReturn,
    >,
    pub ReleasePort:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub Start:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub Stop:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> IOReturn>,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochPortRef,
            inRefCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochPortRef) -> *mut ::std::os::raw::c_void,
    >,
    pub ModifyJumpDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            inJump: *mut DCLJump,
            inLabel: *mut DCLLabel,
        ) -> IOReturn,
    >,
    pub PrintDCLProgram: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            inProgram: *const DCLCommand,
            inLength: UInt32,
        ),
    >,
    pub ModifyTransferPacketDCLSize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            inDCL: *mut DCLTransferPacket,
            size: IOByteCount,
        ) -> IOReturn,
    >,
    pub ModifyTransferPacketDCLBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            inDCL: *mut DCLTransferPacket,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ModifyTransferPacketDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            inDCL: *mut DCLTransferPacket,
            buffer: *mut ::std::os::raw::c_void,
            size: IOByteCount,
        ) -> IOReturn,
    >,
    pub SetFinalizeCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            finalizeCallback: IOFireWireLibIsochPortFinalizeCallback,
        ) -> IOReturn,
    >,
    pub SetResourceUsageFlags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            flags: IOFWIsochResourceFlags,
        ) -> IOReturn,
    >,
    pub Notify: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibLocalIsochPortRef,
            notificationType: IOFWDCLNotificationType,
            inDCLList: *mut *mut ::std::os::raw::c_void,
            numDCLs: UInt32,
        ) -> IOReturn,
    >,
}
pub type IOFireWireLocalIsochPortInterface = IOFireWireLocalIsochPortInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireIsochChannelInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub revision: UInt32,
    pub version: UInt32,
    pub SetTalker: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochChannelRef,
            talker: IOFireWireLibIsochPortRef,
        ) -> IOReturn,
    >,
    pub AddListener: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochChannelRef,
            listener: IOFireWireLibIsochPortRef,
        ) -> IOReturn,
    >,
    pub AllocateChannel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> IOReturn,
    >,
    pub ReleaseChannel: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> IOReturn,
    >,
    pub Start: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> IOReturn,
    >,
    pub Stop: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> IOReturn,
    >,
    pub SetChannelForceStopHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochChannelRef,
            stopProc: IOFireWireIsochChannelForceStopHandler,
        ) -> IOFireWireIsochChannelForceStopHandler,
    >,
    pub SetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochChannelRef,
            stopProcRefCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> *mut ::std::os::raw::c_void,
    >,
    pub NotificationIsOn:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> Boolean>,
    pub TurnOnNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef) -> Boolean>,
    pub TurnOffNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibIsochChannelRef)>,
    pub ClientCommandIsComplete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibIsochChannelRef,
            commandID: FWClientCommandID,
            status: IOReturn,
        ),
    >,
}
pub type IOFireWireIsochChannelInterface = IOFireWireIsochChannelInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireDCLCommandPoolInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub revision: UInt32,
    pub version: UInt32,
    pub Allocate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateWithOpcode: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            outDCL: *mut *mut DCLCommand,
            opcode: UInt32,
            ...
        ) -> IOReturn,
    >,
    pub AllocateTransferPacketDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inOpcode: UInt32,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateTransferBufferDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inOpcode: UInt32,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
            inPacketSize: IOByteCount,
            inBufferOffset: UInt32,
        ) -> *mut DCLCommand,
    >,
    pub AllocateSendPacketStartDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateSendPacketWithHeaderStartDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateSendBufferDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
            inPacketSize: IOByteCount,
            inBufferOffset: UInt32,
        ) -> *mut DCLCommand,
    >,
    pub AllocateSendPacketDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateReceivePacketStartDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateReceivePacketDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
        ) -> *mut DCLCommand,
    >,
    pub AllocateReceiveBufferDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inBuffer: *mut ::std::os::raw::c_void,
            inSize: IOByteCount,
            inPacketSize: IOByteCount,
            inBufferOffset: UInt32,
        ) -> *mut DCLCommand,
    >,
    pub AllocateCallProcDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inProc: DCLCallCommandProc,
            inProcData: DCLCallProcDataType,
        ) -> *mut DCLCommand,
    >,
    pub AllocateLabelDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
        ) -> *mut DCLCommand,
    >,
    pub AllocateJumpDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            pInJumpDCLLabel: *mut DCLLabel,
        ) -> *mut DCLCommand,
    >,
    pub AllocateSetTagSyncBitsDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inTagBits: UInt16,
            inSyncBits: UInt16,
        ) -> *mut DCLCommand,
    >,
    pub AllocateUpdateDCLListDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inDCLCommandList: *mut *mut DCLCommand,
            inNumCommands: UInt32,
        ) -> *mut DCLCommand,
    >,
    pub AllocatePtrTimeStampDCL: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibDCLCommandPoolRef,
            inDCL: *mut DCLCommand,
            inTimeStampPtr: *mut UInt32,
        ) -> *mut DCLCommand,
    >,
    pub Free: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDCLCommandPoolRef, inDCL: *mut DCLCommand),
    >,
    pub GetSize: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDCLCommandPoolRef) -> IOByteCount,
    >,
    pub SetSize: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDCLCommandPoolRef, inSize: IOByteCount) -> Boolean,
    >,
    pub GetBytesRemaining: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibDCLCommandPoolRef) -> IOByteCount,
    >,
}
pub type IOFireWireDCLCommandPoolInterface = IOFireWireDCLCommandPoolInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireNuDCLPoolInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub revision: UInt32,
    pub version: UInt32,
    pub GetProgram: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibNuDCLPoolRef) -> *mut DCLCommand,
    >,
    pub GetDCLs:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibNuDCLPoolRef) -> CFArrayRef>,
    pub PrintProgram: ::std::option::Option<unsafe extern "C" fn(self_: IOFireWireLibNuDCLPoolRef)>,
    pub PrintDCL: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef)>,
    pub SetCurrentTagAndSync: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibNuDCLPoolRef, tag: UInt8, sync: UInt8),
    >,
    pub AllocateSendPacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibNuDCLPoolRef,
            saveBag: CFMutableSetRef,
            numBuffers: UInt32,
            buffers: *mut IOVirtualRange,
        ) -> NuDCLSendPacketRef,
    >,
    pub AllocateSendPacket_v: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibNuDCLPoolRef,
            saveBag: CFMutableSetRef,
            firstRange: *mut IOVirtualRange,
            ...
        ) -> NuDCLSendPacketRef,
    >,
    pub AllocateSkipCycle: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibNuDCLPoolRef) -> NuDCLSkipCycleRef,
    >,
    pub AllocateReceivePacket: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibNuDCLPoolRef,
            saveBag: CFMutableSetRef,
            headerBytes: UInt8,
            numBuffers: UInt32,
            buffers: *mut IOVirtualRange,
        ) -> NuDCLReceivePacketRef,
    >,
    pub AllocateReceivePacket_v: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFireWireLibNuDCLPoolRef,
            saveBag: CFMutableSetRef,
            headerBytes: UInt8,
            firstRange: *mut IOVirtualRange,
            ...
        ) -> NuDCLReceivePacketRef,
    >,
    pub FindDCLNextDCL: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFireWireLibNuDCLPoolRef, dcl: NuDCLRef) -> NuDCLRef,
    >,
    pub SetDCLBranch:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, branchDCL: NuDCLRef) -> IOReturn>,
    pub GetDCLBranch: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> NuDCLRef>,
    pub SetDCLTimeStampPtr: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, timeStampPtr: *mut UInt32) -> IOReturn,
    >,
    pub GetDCLTimeStampPtr:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> *mut UInt32>,
    pub SetDCLStatusPtr: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, statusPtr: *mut UInt32) -> IOReturn,
    >,
    pub GetDCLStatusPtr: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> *mut UInt32>,
    pub AppendDCLRanges: ::std::option::Option<
        unsafe extern "C" fn(
            dcl: NuDCLRef,
            numRanges: UInt32,
            range: *mut IOVirtualRange,
        ) -> IOReturn,
    >,
    pub SetDCLRanges: ::std::option::Option<
        unsafe extern "C" fn(
            dcl: NuDCLRef,
            numRanges: UInt32,
            ranges: *mut IOVirtualRange,
        ) -> IOReturn,
    >,
    pub SetDCLRanges_v: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, firstRange: *mut IOVirtualRange, ...) -> IOReturn,
    >,
    pub GetDCLRanges: ::std::option::Option<
        unsafe extern "C" fn(
            dcl: NuDCLRef,
            maxRanges: UInt32,
            outRanges: *mut IOVirtualRange,
        ) -> UInt32,
    >,
    pub CountDCLRanges: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> UInt32>,
    pub GetDCLSpan: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, spanRange: *mut IOVirtualRange) -> IOReturn,
    >,
    pub GetDCLSize: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> IOByteCount>,
    pub SetDCLCallback: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, callback: NuDCLCallback) -> IOReturn,
    >,
    pub GetDCLCallback: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> NuDCLCallback>,
    pub SetDCLUserHeaderPtr: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, headerPtr: *mut UInt32, mask: *mut UInt32) -> IOReturn,
    >,
    pub GetDCLUserHeaderPtr:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> *mut UInt32>,
    pub GetUserHeaderMaskPtr:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> *mut UInt32>,
    pub SetDCLRefcon: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, refcon: *mut ::std::os::raw::c_void),
    >,
    pub GetDCLRefcon:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> *mut ::std::os::raw::c_void>,
    pub AppendDCLUpdateList:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, updateDCL: NuDCLRef) -> IOReturn>,
    pub SetDCLUpdateList:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, dclList: CFSetRef) -> IOReturn>,
    pub CopyDCLUpdateList: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> CFSetRef>,
    pub RemoveDCLUpdateList: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> IOReturn>,
    pub SetDCLWaitControl:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, wait: Boolean) -> IOReturn>,
    pub SetDCLFlags: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, flags: UInt32)>,
    pub GetDCLFlags: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> UInt32>,
    pub SetDCLSkipBranch: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, skipCycleDCL: NuDCLRef) -> IOReturn,
    >,
    pub GetDCLSkipBranch: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> NuDCLRef>,
    pub SetDCLSkipCallback: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, callback: NuDCLCallback) -> IOReturn,
    >,
    pub GetDCLSkipCallback:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> NuDCLCallback>,
    pub SetDCLSkipRefcon: ::std::option::Option<
        unsafe extern "C" fn(dcl: NuDCLRef, refcon: *mut ::std::os::raw::c_void) -> IOReturn,
    >,
    pub GetDCLSkipRefcon:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> *mut ::std::os::raw::c_void>,
    pub SetDCLSyncBits:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, syncBits: UInt8) -> IOReturn>,
    pub GetDCLSyncBits: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> UInt8>,
    pub SetDCLTagBits:
        ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef, tagBits: UInt8) -> IOReturn>,
    pub GetDCLTagBits: ::std::option::Option<unsafe extern "C" fn(dcl: NuDCLRef) -> UInt8>,
}
pub type IOFireWireNuDCLPoolInterface = IOFireWireNuDCLPoolInterface_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFWAsyncStreamListenerInterface_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub SetListenerHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFWAsyncStreamListenerInterfaceRef,
            inReceiver: IOFWAsyncStreamListenerHandler,
        ) -> IOFWAsyncStreamListenerHandler,
    >,
    pub SetSkippedPacketHandler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFWAsyncStreamListenerInterfaceRef,
            inHandler: IOFWAsyncStreamListenerSkippedPacketHandler,
        ) -> IOFWAsyncStreamListenerSkippedPacketHandler,
    >,
    pub NotificationIsOn: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFWAsyncStreamListenerInterfaceRef) -> Boolean,
    >,
    pub TurnOnNotification: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFWAsyncStreamListenerInterfaceRef) -> Boolean,
    >,
    pub TurnOffNotification:
        ::std::option::Option<unsafe extern "C" fn(self_: IOFWAsyncStreamListenerInterfaceRef)>,
    pub ClientCommandIsComplete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFWAsyncStreamListenerInterfaceRef,
            commandID: FWClientCommandID,
            status: IOReturn,
        ),
    >,
    pub GetRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: IOFWAsyncStreamListenerInterfaceRef,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub SetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFWAsyncStreamListenerInterfaceRef, flags: UInt32),
    >,
    pub GetFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFWAsyncStreamListenerInterfaceRef) -> UInt32,
    >,
    pub GetOverrunCounter: ::std::option::Option<
        unsafe extern "C" fn(self_: IOFWAsyncStreamListenerInterfaceRef) -> UInt32,
    >,
}
pub type IOFWAsyncStreamListenerInterface = IOFWAsyncStreamListenerInterface_t;
pub const eIOAcceleratorClientTypes_kIOAccelSurfaceClientType: eIOAcceleratorClientTypes = 0;
pub const eIOAcceleratorClientTypes_kIOAccelNumClientTypes: eIOAcceleratorClientTypes = 1;
pub const eIOAcceleratorClientTypes_kIOAccelSurface2ClientType: eIOAcceleratorClientTypes = 32;
pub type eIOAcceleratorClientTypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOAccelBounds {
    pub x: SInt16,
    pub y: SInt16,
    pub w: SInt16,
    pub h: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOAccelSize {
    pub w: SInt16,
    pub h: SInt16,
}
pub const kIOAccelVolatileSurface: _bindgen_ty_138 = 1;
pub type _bindgen_ty_138 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOAccelSurfaceInformation {
    pub address: [mach_vm_address_t; 4usize],
    pub rowBytes: UInt32,
    pub width: UInt32,
    pub height: UInt32,
    pub pixelFormat: UInt32,
    pub flags: IOOptionBits,
    pub colorTemperature: [IOFixed; 4usize],
    pub typeDependent: [UInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOAccelSurfaceReadData {
    pub x: SInt32,
    pub y: SInt32,
    pub w: SInt32,
    pub h: SInt32,
    pub client_addr: mach_vm_address_t,
    pub client_row_bytes: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOAccelSurfaceScaling {
    pub buffer: IOAccelBounds,
    pub source: IOAccelSize,
    pub reserved: [UInt32; 8usize],
}
pub type IOAccelID = SInt32;
pub const kIOAccelPrivateID: _bindgen_ty_139 = 1;
pub type _bindgen_ty_139 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct IOAccelDeviceRegion {
    pub num_rects: UInt32,
    pub bounds: IOAccelBounds,
    pub rect: __IncompleteArrayField<IOAccelBounds>,
}
pub const eIOAccelSurfaceMemoryTypes_kIOAccelNumSurfaceMemoryTypes: eIOAccelSurfaceMemoryTypes = 0;
pub type eIOAccelSurfaceMemoryTypes = ::std::os::raw::c_uint;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceReadLockOptions: eIOAccelSurfaceMethods = 0;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceReadUnlockOptions: eIOAccelSurfaceMethods = 1;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceGetState: eIOAccelSurfaceMethods = 2;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceWriteLockOptions: eIOAccelSurfaceMethods = 3;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceWriteUnlockOptions: eIOAccelSurfaceMethods = 4;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceRead: eIOAccelSurfaceMethods = 5;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceSetShapeBacking: eIOAccelSurfaceMethods = 6;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceSetIDMode: eIOAccelSurfaceMethods = 7;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceSetScale: eIOAccelSurfaceMethods = 8;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceSetShape: eIOAccelSurfaceMethods = 9;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceFlush: eIOAccelSurfaceMethods = 10;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceQueryLock: eIOAccelSurfaceMethods = 11;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceReadLock: eIOAccelSurfaceMethods = 12;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceReadUnlock: eIOAccelSurfaceMethods = 13;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceWriteLock: eIOAccelSurfaceMethods = 14;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceWriteUnlock: eIOAccelSurfaceMethods = 15;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceControl: eIOAccelSurfaceMethods = 16;
pub const eIOAccelSurfaceMethods_kIOAccelSurfaceSetShapeBackingAndLength: eIOAccelSurfaceMethods =
    17;
pub const eIOAccelSurfaceMethods_kIOAccelNumSurfaceMethods: eIOAccelSurfaceMethods = 18;
pub type eIOAccelSurfaceMethods = ::std::os::raw::c_uint;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepth1555: eIOAccelSurfaceModeBits = 3;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepth8888: eIOAccelSurfaceModeBits = 4;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepthYUV: eIOAccelSurfaceModeBits = 6;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepthYUV9: eIOAccelSurfaceModeBits = 7;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepthYUV12: eIOAccelSurfaceModeBits = 8;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepthYUV2: eIOAccelSurfaceModeBits = 9;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepthBGRA32: eIOAccelSurfaceModeBits = 10;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepth2101010: eIOAccelSurfaceModeBits =
    15;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeColorDepthBits: eIOAccelSurfaceModeBits = 15;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeStereoBit: eIOAccelSurfaceModeBits = 16;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeWindowedBit: eIOAccelSurfaceModeBits = 32;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeSurface2: eIOAccelSurfaceModeBits = 16384;
pub const eIOAccelSurfaceModeBits_kIOAccelSurfaceModeBeamSync: eIOAccelSurfaceModeBits = 32768;
pub type eIOAccelSurfaceModeBits = ::std::os::raw::c_uint;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeNone: eIOAccelSurfaceShapeBits = 0;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeNonBlockingBit: eIOAccelSurfaceShapeBits = 1;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeNonSimpleBit: eIOAccelSurfaceShapeBits = 2;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeIdentityScaleBit: eIOAccelSurfaceShapeBits =
    4;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeFrameSyncBit: eIOAccelSurfaceShapeBits = 8;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeBeamSyncBit: eIOAccelSurfaceShapeBits = 16;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeStaleBackingBit: eIOAccelSurfaceShapeBits =
    32;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeAssemblyBit: eIOAccelSurfaceShapeBits = 64;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeWaitEnabledBit: eIOAccelSurfaceShapeBits =
    128;
pub const eIOAccelSurfaceShapeBits_kIOAccelSurfaceShapeBlockingBit: eIOAccelSurfaceShapeBits = 1;
pub type eIOAccelSurfaceShapeBits = ::std::os::raw::c_uint;
pub const eIOAccelSurfaceStateBits_kIOAccelSurfaceStateNone: eIOAccelSurfaceStateBits = 0;
pub const eIOAccelSurfaceStateBits_kIOAccelSurfaceStateIdleBit: eIOAccelSurfaceStateBits = 1;
pub type eIOAccelSurfaceStateBits = ::std::os::raw::c_uint;
pub const eIOAccelSurfaceScaleBits_kIOAccelSurfaceBeamSyncSwaps: eIOAccelSurfaceScaleBits = 1;
pub const eIOAccelSurfaceScaleBits_kIOAccelSurfaceFixedSource: eIOAccelSurfaceScaleBits = 2;
pub const eIOAccelSurfaceScaleBits_kIOAccelSurfaceFiltering: eIOAccelSurfaceScaleBits = 240;
pub const eIOAccelSurfaceScaleBits_kIOAccelSurfaceFilterDefault: eIOAccelSurfaceScaleBits = 0;
pub const eIOAccelSurfaceScaleBits_kIOAccelSurfaceFilterNone: eIOAccelSurfaceScaleBits = 16;
pub const eIOAccelSurfaceScaleBits_kIOAccelSurfaceFilterLinear: eIOAccelSurfaceScaleBits = 32;
pub type eIOAccelSurfaceScaleBits = ::std::os::raw::c_uint;
pub const eIOAccelSurfaceLockBits_kIOAccelSurfaceLockInBacking: eIOAccelSurfaceLockBits = 0;
pub const eIOAccelSurfaceLockBits_kIOAccelSurfaceLockInAccel: eIOAccelSurfaceLockBits = 1;
pub const eIOAccelSurfaceLockBits_kIOAccelSurfaceLockInDontCare: eIOAccelSurfaceLockBits = 2;
pub const eIOAccelSurfaceLockBits_kIOAccelSurfaceLockInMask: eIOAccelSurfaceLockBits = 3;
pub type eIOAccelSurfaceLockBits = ::std::os::raw::c_uint;
pub type IOFourCharCode = UInt32;
pub type IOBlitCompletionToken = SInt32;
pub type IOBlitType = UInt32;
pub const kIOBlitTypeVerbMask: _bindgen_ty_140 = 255;
pub const kIOBlitTypeRects: _bindgen_ty_140 = 0;
pub const kIOBlitTypeCopyRects: _bindgen_ty_140 = 1;
pub const kIOBlitTypeLines: _bindgen_ty_140 = 2;
pub const kIOBlitTypeScanlines: _bindgen_ty_140 = 3;
pub const kIOBlitTypeCopyRegion: _bindgen_ty_140 = 4;
pub const kIOBlitTypeMoveCursor: _bindgen_ty_140 = 5;
pub const kIOBlitTypeShowCursor: _bindgen_ty_140 = 6;
pub const kIOBlitTypeHideCursor: _bindgen_ty_140 = 7;
pub const kIOBlitTypeMonoExpand: _bindgen_ty_140 = 256;
pub const kIOBlitTypeColorSpaceConvert: _bindgen_ty_140 = 512;
pub const kIOBlitTypeScale: _bindgen_ty_140 = 1024;
pub const kIOBlitTypeSourceKeyColorModeMask: _bindgen_ty_140 = 12288;
pub const kIOBlitTypeDestKeyColorModeMask: _bindgen_ty_140 = 49152;
pub const kIOBlitTypeSourceKeyColorEqual: _bindgen_ty_140 = 4096;
pub const kIOBlitTypeSourceKeyColorNotEqual: _bindgen_ty_140 = 8192;
pub const kIOBlitTypeDestKeyColorEqual: _bindgen_ty_140 = 16384;
pub const kIOBlitTypeDestKeyColorNotEqual: _bindgen_ty_140 = 32768;
pub const kIOBlitTypeOperationMask: _bindgen_ty_140 = 268369920;
pub const kIOBlitTypeOperationShift: _bindgen_ty_140 = 16;
pub const kIOBlitTypeOperationTypeMask: _bindgen_ty_140 = 251658240;
pub const kIOBlitTypeOperationType0: _bindgen_ty_140 = 0;
pub const kIOBlitCopyOperation: _bindgen_ty_140 = 0;
pub const kIOBlitOrOperation: _bindgen_ty_140 = 65536;
pub const kIOBlitXorOperation: _bindgen_ty_140 = 131072;
pub const kIOBlitBlendOperation: _bindgen_ty_140 = 196608;
pub const kIOBlitHighlightOperation: _bindgen_ty_140 = 262144;
pub type _bindgen_ty_140 = ::std::os::raw::c_uint;
pub type IOBlitSourceType = UInt32;
pub const kIOBlitSourceDefault: _bindgen_ty_141 = 0;
pub const kIOBlitSourceFramebuffer: _bindgen_ty_141 = 4096;
pub const kIOBlitSourceMemory: _bindgen_ty_141 = 8192;
pub const kIOBlitSourceOOLMemory: _bindgen_ty_141 = 12288;
pub const kIOBlitSourcePattern: _bindgen_ty_141 = 16384;
pub const kIOBlitSourceOOLPattern: _bindgen_ty_141 = 20480;
pub const kIOBlitSourceSolid: _bindgen_ty_141 = 24576;
pub const kIOBlitSourceCGSSurface: _bindgen_ty_141 = 28672;
pub const kIOBlitSourceIsSame: _bindgen_ty_141 = 2147483648;
pub type _bindgen_ty_141 = ::std::os::raw::c_uint;
pub type IOBlitSourceDestType = IOBlitSourceType;
pub const kIOBlitDestFramebuffer: _bindgen_ty_142 = 1;
pub type _bindgen_ty_142 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitOperationStruct {
    pub color0: UInt32,
    pub color1: UInt32,
    pub offsetX: SInt32,
    pub offsetY: SInt32,
    pub sourceKeyColor: UInt32,
    pub destKeyColor: UInt32,
    pub specific: [UInt32; 16usize],
}
pub type IOBlitOperation = IOBlitOperationStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitRectangleStruct {
    pub x: SInt32,
    pub y: SInt32,
    pub width: SInt32,
    pub height: SInt32,
}
pub type IOBlitRectangle = IOBlitRectangleStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitRectanglesStruct {
    pub operation: IOBlitOperation,
    pub count: IOItemCount,
    pub rects: [IOBlitRectangle; 1usize],
}
pub type IOBlitRectangles = IOBlitRectanglesStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitCopyRectangleStruct {
    pub sourceX: SInt32,
    pub sourceY: SInt32,
    pub x: SInt32,
    pub y: SInt32,
    pub width: SInt32,
    pub height: SInt32,
}
pub type IOBlitCopyRectangle = IOBlitCopyRectangleStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitCopyRectanglesStruct {
    pub operation: IOBlitOperation,
    pub count: IOItemCount,
    pub rects: [IOBlitCopyRectangle; 1usize],
}
pub type IOBlitCopyRectangles = IOBlitCopyRectanglesStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitCopyRegionStruct {
    pub operation: IOBlitOperation,
    pub deltaX: SInt32,
    pub deltaY: SInt32,
    pub region: *mut IOAccelDeviceRegion,
}
pub type IOBlitCopyRegion = IOBlitCopyRegionStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitVertexStruct {
    pub x: SInt32,
    pub y: SInt32,
}
pub type IOBlitVertex = IOBlitVertexStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitVerticesStruct {
    pub operation: IOBlitOperation,
    pub count: IOItemCount,
    pub vertices: [IOBlitVertex; 2usize],
}
pub type IOBlitVertices = IOBlitVerticesStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitScanlinesStruct {
    pub operation: IOBlitOperation,
    pub count: IOItemCount,
    pub y: SInt32,
    pub height: SInt32,
    pub x: [SInt32; 2usize],
}
pub type IOBlitScanlines = IOBlitScanlinesStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOBlitCursorStruct {
    pub operation: IOBlitOperation,
    pub rect: IOBlitRectangle,
}
pub type IOBlitCursor = IOBlitCursorStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IOBlitMemory {
    _unused: [u8; 0],
}
pub type IOBlitMemoryRef = *mut _IOBlitMemory;
pub const kIO1MonochromePixelFormat: _bindgen_ty_143 = 1;
pub const kIO2IndexedPixelFormat: _bindgen_ty_143 = 2;
pub const kIO4IndexedPixelFormat: _bindgen_ty_143 = 4;
pub const kIO8IndexedPixelFormat: _bindgen_ty_143 = 8;
pub const kIO16BE555PixelFormat: _bindgen_ty_143 = 16;
pub const kIO24RGBPixelFormat: _bindgen_ty_143 = 24;
pub const kIO32ARGBPixelFormat: _bindgen_ty_143 = 32;
pub const kIO1IndexedGrayPixelFormat: _bindgen_ty_143 = 33;
pub const kIO2IndexedGrayPixelFormat: _bindgen_ty_143 = 34;
pub const kIO4IndexedGrayPixelFormat: _bindgen_ty_143 = 36;
pub const kIO8IndexedGrayPixelFormat: _bindgen_ty_143 = 40;
pub type _bindgen_ty_143 = ::std::os::raw::c_uint;
pub const kIO16LE555PixelFormat: _bindgen_ty_144 = 1278555445;
pub const kIO16LE5551PixelFormat: _bindgen_ty_144 = 892679473;
pub const kIO16BE565PixelFormat: _bindgen_ty_144 = 1110783541;
pub const kIO16LE565PixelFormat: _bindgen_ty_144 = 1278555701;
pub const kIO24BGRPixelFormat: _bindgen_ty_144 = 842285639;
pub const kIO32BGRAPixelFormat: _bindgen_ty_144 = 1111970369;
pub const kIO32ABGRPixelFormat: _bindgen_ty_144 = 1094862674;
pub const kIO32RGBAPixelFormat: _bindgen_ty_144 = 1380401729;
pub const kIOYUVSPixelFormat: _bindgen_ty_144 = 2037741171;
pub const kIOYUVUPixelFormat: _bindgen_ty_144 = 2037741173;
pub const kIOYVU9PixelFormat: _bindgen_ty_144 = 1498830137;
pub const kIOYUV411PixelFormat: _bindgen_ty_144 = 1496592689;
pub const kIOYVYU422PixelFormat: _bindgen_ty_144 = 1498831189;
pub const kIOUYVY422PixelFormat: _bindgen_ty_144 = 1431918169;
pub const kIOYUV211PixelFormat: _bindgen_ty_144 = 1496461617;
pub const kIO2vuyPixelFormat: _bindgen_ty_144 = 846624121;
pub type _bindgen_ty_144 = ::std::os::raw::c_uint;
pub const kIO16LE4444PixelFormat: _bindgen_ty_145 = 1278489652;
pub const kIO16BE4444PixelFormat: _bindgen_ty_145 = 1110717492;
pub const kIO64BGRAPixelFormat: _bindgen_ty_145 = 1110521417;
pub const kIO64RGBAFloatPixelFormat: _bindgen_ty_145 = 1110521414;
pub const kIO128RGBAFloatPixelFormat: _bindgen_ty_145 = 1110651462;
pub type _bindgen_ty_145 = ::std::os::raw::c_uint;
pub const kIOBlitMemoryRequiresHostFlush: _bindgen_ty_146 = 1;
pub type _bindgen_ty_146 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IOBlitSurfaceStruct {
    pub memory: IOBlitSurfaceStruct__bindgen_ty_1,
    pub pixelFormat: IOFourCharCode,
    pub size: IOBlitRectangle,
    pub rowBytes: UInt32,
    pub byteOffset: UInt32,
    pub palette: *mut UInt32,
    pub accessFlags: IOOptionBits,
    pub interfaceRef: IOBlitMemoryRef,
    pub more: [UInt32; 14usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IOBlitSurfaceStruct__bindgen_ty_1 {
    pub bytes: *mut UInt8,
    pub ref_: IOBlitMemoryRef,
}
pub type IOBlitSurface = IOBlitSurfaceStruct;
pub type IOBlitMemory = IOBlitSurface;
pub const kIOBlitSynchronizeWaitBeamExit: _bindgen_ty_147 = 1;
pub const kIOBlitSynchronizeFlushHostWrites: _bindgen_ty_147 = 2;
pub type _bindgen_ty_147 = ::std::os::raw::c_uint;
pub const kIOBlitWaitContext: _bindgen_ty_148 = 0;
pub const kIOBlitWaitAll2D: _bindgen_ty_148 = 1;
pub const kIOBlitWaitGlobal: _bindgen_ty_148 = 1;
pub const kIOBlitWaitAll: _bindgen_ty_148 = 2;
pub const kIOBlitWaitCheck: _bindgen_ty_148 = 128;
pub const kIOBlitFlushWithSwap: _bindgen_ty_148 = 65536;
pub type _bindgen_ty_148 = ::std::os::raw::c_uint;
pub const kIOBlitHasCGSSurface: _bindgen_ty_149 = 1;
pub const kIOBlitFixedSource: _bindgen_ty_149 = 2;
pub const kIOBlitBeamSyncSwaps: _bindgen_ty_149 = 4;
pub const kIOBlitReferenceSource: _bindgen_ty_149 = 8;
pub type _bindgen_ty_149 = ::std::os::raw::c_uint;
pub const kIOBlitUnlockWithSwap: _bindgen_ty_150 = 2147483648;
pub type _bindgen_ty_150 = ::std::os::raw::c_uint;
pub const kIOBlitFramebufferDestination: _bindgen_ty_151 = 0;
pub const kIOBlitSurfaceDestination: _bindgen_ty_151 = 1;
pub type _bindgen_ty_151 = ::std::os::raw::c_uint;
pub const kIOBlitBeamSync: _bindgen_ty_152 = 1;
pub const kIOBlitBeamSyncAlways: _bindgen_ty_152 = 2;
pub const kIOBlitBeamSyncSpin: _bindgen_ty_152 = 4;
pub const kIOBlitAllOptions: _bindgen_ty_152 = 4294967295;
pub type _bindgen_ty_152 = ::std::os::raw::c_uint;
pub const kIOBlitColorSpaceTypes: _bindgen_ty_153 = 1668509795;
pub type _bindgen_ty_153 = ::std::os::raw::c_uint;
pub type IOBlitAccumulatePtr = ::std::option::Option<
    unsafe extern "C" fn(
        thisPointer: *mut ::std::os::raw::c_void,
        a: SInt32,
        b: SInt32,
        c: SInt32,
        d: SInt32,
        e: SInt32,
        f: SInt32,
    ) -> IOReturn,
>;
pub type IOBlitProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        thisPointer: *mut ::std::os::raw::c_void,
        options: IOOptionBits,
        type_: IOBlitType,
        sourceDestType: IOBlitSourceDestType,
        operation: *mut IOBlitOperation,
        source: *mut ::std::os::raw::c_void,
        destination: *mut ::std::os::raw::c_void,
        completionToken: *mut IOBlitCompletionToken,
    ) -> IOReturn,
>;
pub type IOBlitterPtr = ::std::option::Option<
    unsafe extern "C" fn(
        thisPointer: *mut ::std::os::raw::c_void,
        options: IOOptionBits,
        type_: IOBlitType,
        sourceType: IOBlitSourceType,
        operation: *mut IOBlitOperation,
        source: *mut ::std::os::raw::c_void,
    ) -> IOReturn,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOGraphicsAcceleratorInterfaceStruct {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub Probe: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            propertyTable: CFDictionaryRef,
            service: io_service_t,
            order: *mut SInt32,
        ) -> IOReturn,
    >,
    pub Start: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            propertyTable: CFDictionaryRef,
            service: io_service_t,
        ) -> IOReturn,
    >,
    pub Stop: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> IOReturn,
    >,
    pub Reset: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub CopyCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            select: FourCharCode,
            capabilities: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub GetBlitProc: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            type_: IOBlitType,
            sourceDestType: IOBlitSourceDestType,
            blitProc: *mut IOBlitProcPtr,
        ) -> IOReturn,
    >,
    pub Flush: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub WaitForCompletion: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            completionToken: IOBlitCompletionToken,
        ) -> IOReturn,
    >,
    pub Synchronize: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: UInt32,
            x: UInt32,
            y: UInt32,
            w: UInt32,
            h: UInt32,
        ) -> IOReturn,
    >,
    pub GetBeamPosition: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            position: *mut SInt32,
        ) -> IOReturn,
    >,
    pub AllocateSurface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            surface: *mut IOBlitSurface,
            cgsSurfaceID: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub FreeSurface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            surface: *mut IOBlitSurface,
        ) -> IOReturn,
    >,
    pub LockSurface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            surface: *mut IOBlitSurface,
            address: *mut vm_address_t,
        ) -> IOReturn,
    >,
    pub UnlockSurface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            surface: *mut IOBlitSurface,
            swapFlags: *mut IOOptionBits,
        ) -> IOReturn,
    >,
    pub SwapSurface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            surface: *mut IOBlitSurface,
            swapFlags: *mut IOOptionBits,
        ) -> IOReturn,
    >,
    pub SetDestination: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            surface: *mut IOBlitSurface,
        ) -> IOReturn,
    >,
    pub GetBlitter: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
            type_: IOBlitType,
            sourceType: IOBlitSourceType,
            blitter: *mut IOBlitterPtr,
        ) -> IOReturn,
    >,
    pub WaitComplete: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub __gaInterfaceReserved: [*mut ::std::os::raw::c_void; 24usize],
}
pub type IOGraphicsAcceleratorInterface = IOGraphicsAcceleratorInterfaceStruct;
extern "C" {
    pub fn IOAccelFindAccelerator(
        framebuffer: io_service_t,
        pAccelerator: *mut io_service_t,
        pFramebufferIndex: *mut UInt32,
    ) -> IOReturn;
}
pub type IOIndex = SInt32;
pub type IOSelect = UInt32;
pub type IOFixed1616 = UInt32;
pub type IODisplayVendorID = UInt32;
pub type IODisplayProductID = UInt32;
pub type IODisplayModeID = SInt32;
pub const kIODisplayModeIDBootProgrammable: _bindgen_ty_154 = -5;
pub const kIODisplayModeIDReservedBase: _bindgen_ty_154 = -2147483648;
pub type _bindgen_ty_154 = ::std::os::raw::c_int;
pub const kIOMaxPixelBits: _bindgen_ty_155 = 64;
pub type _bindgen_ty_155 = ::std::os::raw::c_uint;
pub type IOPixelEncoding = [::std::os::raw::c_char; 64usize];
pub const kIOCLUTPixels: _bindgen_ty_156 = 0;
pub const kIOFixedCLUTPixels: _bindgen_ty_156 = 1;
pub const kIORGBDirectPixels: _bindgen_ty_156 = 2;
pub const kIOMonoDirectPixels: _bindgen_ty_156 = 3;
pub const kIOMonoInverseDirectPixels: _bindgen_ty_156 = 4;
pub const kIORGBSignedDirectPixels: _bindgen_ty_156 = 5;
pub const kIORGBSignedFloatingPointPixels: _bindgen_ty_156 = 6;
pub type _bindgen_ty_156 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOPixelInformation {
    pub bytesPerRow: UInt32,
    pub bytesPerPlane: UInt32,
    pub bitsPerPixel: UInt32,
    pub pixelType: UInt32,
    pub componentCount: UInt32,
    pub bitsPerComponent: UInt32,
    pub componentMasks: [UInt32; 16usize],
    pub pixelFormat: IOPixelEncoding,
    pub flags: UInt32,
    pub activeWidth: UInt32,
    pub activeHeight: UInt32,
    pub reserved: [UInt32; 2usize],
}
pub type IOAppleTimingID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODisplayModeInformation {
    pub nominalWidth: UInt32,
    pub nominalHeight: UInt32,
    pub refreshRate: IOFixed1616,
    pub maxDepthIndex: IOIndex,
    pub flags: UInt32,
    pub imageWidth: UInt16,
    pub imageHeight: UInt16,
    pub reserved: [UInt32; 3usize],
}
pub const kDisplayModeSafetyFlags: _bindgen_ty_157 = 7;
pub const kDisplayModeAlwaysShowFlag: _bindgen_ty_157 = 8;
pub const kDisplayModeNeverShowFlag: _bindgen_ty_157 = 128;
pub const kDisplayModeNotResizeFlag: _bindgen_ty_157 = 16;
pub const kDisplayModeRequiresPanFlag: _bindgen_ty_157 = 32;
pub const kDisplayModeInterlacedFlag: _bindgen_ty_157 = 64;
pub const kDisplayModeSimulscanFlag: _bindgen_ty_157 = 256;
pub const kDisplayModeBuiltInFlag: _bindgen_ty_157 = 1024;
pub const kDisplayModeNotPresetFlag: _bindgen_ty_157 = 512;
pub const kDisplayModeStretchedFlag: _bindgen_ty_157 = 2048;
pub const kDisplayModeNotGraphicsQualityFlag: _bindgen_ty_157 = 4096;
pub const kDisplayModeValidateAgainstDisplay: _bindgen_ty_157 = 8192;
pub const kDisplayModeTelevisionFlag: _bindgen_ty_157 = 1048576;
pub const kDisplayModeValidForMirroringFlag: _bindgen_ty_157 = 2097152;
pub const kDisplayModeAcceleratorBackedFlag: _bindgen_ty_157 = 4194304;
pub const kDisplayModeValidForHiResFlag: _bindgen_ty_157 = 8388608;
pub const kDisplayModeValidForAirPlayFlag: _bindgen_ty_157 = 16777216;
pub const kDisplayModeNativeFlag: _bindgen_ty_157 = 33554432;
pub type _bindgen_ty_157 = ::std::os::raw::c_uint;
pub const kDisplayModeValidFlag: _bindgen_ty_158 = 1;
pub const kDisplayModeSafeFlag: _bindgen_ty_158 = 2;
pub const kDisplayModeDefaultFlag: _bindgen_ty_158 = 4;
pub type _bindgen_ty_158 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFramebufferInformation {
    pub baseAddress: IOPhysicalAddress,
    pub activeWidth: UInt32,
    pub activeHeight: UInt32,
    pub bytesPerRow: IOByteCount,
    pub bytesPerPlane: IOByteCount,
    pub bitsPerPixel: UInt32,
    pub pixelType: UInt32,
    pub flags: UInt32,
    pub reserved: [UInt32; 4usize],
}
pub const kFramebufferSupportsCopybackCache: _bindgen_ty_159 = 65536;
pub const kFramebufferSupportsWritethruCache: _bindgen_ty_159 = 131072;
pub const kFramebufferSupportsGammaCorrection: _bindgen_ty_159 = 262144;
pub const kFramebufferDisableAltivecAccess: _bindgen_ty_159 = 524288;
pub type _bindgen_ty_159 = ::std::os::raw::c_uint;
pub type IOPixelAperture = IOIndex;
pub const kIOFBSystemAperture: _bindgen_ty_160 = 0;
pub type _bindgen_ty_160 = ::std::os::raw::c_uint;
pub type IOColorComponent = UInt16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOColorEntry {
    pub index: UInt16,
    pub red: IOColorComponent,
    pub green: IOColorComponent,
    pub blue: IOColorComponent,
}
pub const kSetCLUTByValue: _bindgen_ty_161 = 1;
pub const kSetCLUTImmediately: _bindgen_ty_161 = 2;
pub const kSetCLUTWithLuminance: _bindgen_ty_161 = 4;
pub type _bindgen_ty_161 = ::std::os::raw::c_uint;
pub const kIOPowerStateAttribute: _bindgen_ty_162 = 1886876275;
pub const kIOPowerAttribute: _bindgen_ty_162 = 1886353266;
pub const kIODriverPowerAttribute: _bindgen_ty_162 = 1685090167;
pub const kIOHardwareCursorAttribute: _bindgen_ty_162 = 1668445042;
pub const kIOMirrorAttribute: _bindgen_ty_162 = 1835627122;
pub const kIOMirrorDefaultAttribute: _bindgen_ty_162 = 1836213350;
pub const kIOCapturedAttribute: _bindgen_ty_162 = 1667330148;
pub const kIOCursorControlAttribute: _bindgen_ty_162 = 1668445027;
pub const kIOSystemPowerAttribute: _bindgen_ty_162 = 1936750450;
pub const kIOWindowServerActiveAttribute: _bindgen_ty_162 = 2004054646;
pub const kIOVRAMSaveAttribute: _bindgen_ty_162 = 1987212150;
pub const kIODeferCLUTSetAttribute: _bindgen_ty_162 = 1986227316;
pub const kIOClamshellStateAttribute: _bindgen_ty_162 = 1668047213;
pub const kIOFBDisplayPortTrainingAttribute: _bindgen_ty_162 = 1685091425;
pub const kIOFBDisplayState: _bindgen_ty_162 = 1685288052;
pub const kIOFBVariableRefreshRate: _bindgen_ty_162 = 1987211839;
pub const kIOFBLimitHDCPAttribute: _bindgen_ty_162 = 1751409520;
pub const kIOFBLimitHDCPStateAttribute: _bindgen_ty_162 = 1934115907;
pub const kIOFBStop: _bindgen_ty_162 = 1937010544;
pub const kIOFBRedGammaScaleAttribute: _bindgen_ty_162 = 1735617650;
pub const kIOFBGreenGammaScaleAttribute: _bindgen_ty_162 = 1735617639;
pub const kIOFBBlueGammaScaleAttribute: _bindgen_ty_162 = 1735617634;
pub const kIOFBHDRMetaDataAttribute: _bindgen_ty_162 = 1751413357;
pub const kIOBuiltinPanelPowerAttribute: _bindgen_ty_162 = 1886284912;
pub type _bindgen_ty_162 = ::std::os::raw::c_uint;
pub const kIOFBHDCPLimit_AllowAll: _bindgen_ty_163 = 0;
pub const kIOFBHDCPLimit_NoHDCP1x: _bindgen_ty_163 = 1;
pub const kIOFBHDCPLimit_NoHDCP20Type0: _bindgen_ty_163 = 2;
pub const kIOFBHDCPLimit_NoHDCP20Type1: _bindgen_ty_163 = 4;
pub type _bindgen_ty_163 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFBHDRMetaDataV1 {
    pub displayPrimary_X0: u16,
    pub displayPrimary_Y0: u16,
    pub displayPrimary_X1: u16,
    pub displayPrimary_Y1: u16,
    pub displayPrimary_X2: u16,
    pub displayPrimary_Y2: u16,
    pub displayPrimary_X: u16,
    pub displayPrimary_Y: u16,
    pub desiredLuminance_Max: u16,
    pub desiredLuminance_Min: u16,
    pub desiredLightLevel_Avg: u16,
    pub desiredLightLevel_Max: u16,
    pub __reservedA: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IOFBHDRMetaData {
    pub v1: IOFBHDRMetaDataV1,
}
pub const kIOFBDisplayState_AlreadyActive: _bindgen_ty_164 = 1;
pub const kIOFBDisplayState_RestoredProfile: _bindgen_ty_164 = 2;
pub const kIOFBDisplayState_PipelineBlack: _bindgen_ty_164 = 4;
pub const kIOFBDisplayState_Mask: _bindgen_ty_164 = 7;
pub type _bindgen_ty_164 = ::std::os::raw::c_uint;
pub const kIOWSAA_Unaccelerated: _bindgen_ty_165 = 0;
pub const kIOWSAA_Accelerated: _bindgen_ty_165 = 1;
pub const kIOWSAA_From_Accelerated: _bindgen_ty_165 = 2;
pub const kIOWSAA_To_Accelerated: _bindgen_ty_165 = 3;
pub const kIOWSAA_Sleep: _bindgen_ty_165 = 4;
pub const kIOWSAA_Hibernate: _bindgen_ty_165 = 4;
pub const kIOWSAA_DriverOpen: _bindgen_ty_165 = 5;
pub const kIOWSAA_StateMask: _bindgen_ty_165 = 15;
pub const kIOWSAA_Transactional: _bindgen_ty_165 = 16;
pub const kIOWSAA_DeferStart: _bindgen_ty_165 = 256;
pub const kIOWSAA_DeferEnd: _bindgen_ty_165 = 512;
pub const kIOWSAA_NonConsoleDevice: _bindgen_ty_165 = 1024;
pub const kIOWSAA_Reserved: _bindgen_ty_165 = 4026531840;
pub type _bindgen_ty_165 = ::std::os::raw::c_uint;
pub const kIOFBNS_Rendezvous: _bindgen_ty_166 = 2271560481;
pub const kIOFBNS_MessageMask: _bindgen_ty_166 = 15;
pub const kIOFBNS_Sleep: _bindgen_ty_166 = 0;
pub const kIOFBNS_Wake: _bindgen_ty_166 = 1;
pub const kIOFBNS_Doze: _bindgen_ty_166 = 2;
pub const kIOFBNS_Dim: _bindgen_ty_166 = 3;
pub const kIOFBNS_UnDim: _bindgen_ty_166 = 4;
pub const kIOFBNS_DisplayStateMask: _bindgen_ty_166 = 3840;
pub const kIOFBNS_DisplayStateShift: _bindgen_ty_166 = 8;
pub const kIOFBNS_GenerationMask: _bindgen_ty_166 = 2147418112;
pub const kIOFBNS_GenerationShift: _bindgen_ty_166 = 16;
pub type _bindgen_ty_166 = ::std::os::raw::c_uint;
pub const kIOMirrorIsPrimary: _bindgen_ty_167 = 2147483648;
pub const kIOMirrorHWClipped: _bindgen_ty_167 = 1073741824;
pub const kIOMirrorIsMirrored: _bindgen_ty_167 = 536870912;
pub type _bindgen_ty_167 = ::std::os::raw::c_uint;
pub const kIOMirrorDefault: _bindgen_ty_168 = 1;
pub const kIOMirrorForced: _bindgen_ty_168 = 2;
pub type _bindgen_ty_168 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODetailedTimingInformationV1 {
    pub pixelClock: UInt32,
    pub horizontalActive: UInt32,
    pub horizontalBlanking: UInt32,
    pub horizontalBorder: UInt32,
    pub horizontalSyncOffset: UInt32,
    pub horizontalSyncWidth: UInt32,
    pub verticalActive: UInt32,
    pub verticalBlanking: UInt32,
    pub verticalBorder: UInt32,
    pub verticalSyncOffset: UInt32,
    pub verticalSyncWidth: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODetailedTimingInformationV2 {
    pub __reservedA: [UInt32; 3usize],
    pub horizontalScaledInset: UInt32,
    pub verticalScaledInset: UInt32,
    pub scalerFlags: UInt32,
    pub horizontalScaled: UInt32,
    pub verticalScaled: UInt32,
    pub signalConfig: UInt32,
    pub signalLevels: UInt32,
    pub pixelClock: UInt64,
    pub minPixelClock: UInt64,
    pub maxPixelClock: UInt64,
    pub horizontalActive: UInt32,
    pub horizontalBlanking: UInt32,
    pub horizontalSyncOffset: UInt32,
    pub horizontalSyncPulseWidth: UInt32,
    pub verticalActive: UInt32,
    pub verticalBlanking: UInt32,
    pub verticalSyncOffset: UInt32,
    pub verticalSyncPulseWidth: UInt32,
    pub horizontalBorderLeft: UInt32,
    pub horizontalBorderRight: UInt32,
    pub verticalBorderTop: UInt32,
    pub verticalBorderBottom: UInt32,
    pub horizontalSyncConfig: UInt32,
    pub horizontalSyncLevel: UInt32,
    pub verticalSyncConfig: UInt32,
    pub verticalSyncLevel: UInt32,
    pub numLinks: UInt32,
    pub verticalBlankingExtension: UInt32,
    pub pixelEncoding: UInt16,
    pub bitsPerColorComponent: UInt16,
    pub colorimetry: UInt16,
    pub dynamicRange: UInt16,
    pub dscCompressedBitsPerPixel: UInt16,
    pub dscSliceHeight: UInt16,
    pub dscSliceWidth: UInt16,
    pub verticalBlankingMaxStretchPerFrame: UInt16,
    pub verticalBlankingMaxShrinkPerFrame: UInt16,
    pub __reservedB: [UInt16; 3usize],
}
pub type IODetailedTimingInformation = IODetailedTimingInformationV2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IOTimingInformation {
    pub __bindgen_anon_1: IOTimingInformation__bindgen_ty_1,
    pub appleTimingID: IOAppleTimingID,
    pub flags: UInt32,
    pub detailedInfo: IOTimingInformation__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IOTimingInformation__bindgen_ty_1 {
    pub v1: IODetailedTimingInformationV1,
    pub v2: IODetailedTimingInformationV2,
}
pub const kIODetailedTimingValid: _bindgen_ty_169 = 2147483648;
pub const kIOScalingInfoValid: _bindgen_ty_169 = 1073741824;
pub type _bindgen_ty_169 = ::std::os::raw::c_uint;
pub const kIOScaleStretchToFit: _bindgen_ty_170 = 1;
pub const kIOScaleRotateFlags: _bindgen_ty_170 = 240;
pub const kIOScaleSwapAxes: _bindgen_ty_170 = 16;
pub const kIOScaleInvertX: _bindgen_ty_170 = 32;
pub const kIOScaleInvertY: _bindgen_ty_170 = 64;
pub const kIOScaleRotate0: _bindgen_ty_170 = 0;
pub const kIOScaleRotate90: _bindgen_ty_170 = 48;
pub const kIOScaleRotate180: _bindgen_ty_170 = 96;
pub const kIOScaleRotate270: _bindgen_ty_170 = 80;
pub type _bindgen_ty_170 = ::std::os::raw::c_uint;
pub const kIOPixelEncodingNotSupported: _bindgen_ty_171 = 0;
pub const kIOPixelEncodingRGB444: _bindgen_ty_171 = 1;
pub const kIOPixelEncodingYCbCr444: _bindgen_ty_171 = 2;
pub const kIOPixelEncodingYCbCr422: _bindgen_ty_171 = 4;
pub const kIOPixelEncodingYCbCr420: _bindgen_ty_171 = 8;
pub type _bindgen_ty_171 = ::std::os::raw::c_uint;
pub const kIOBitsPerColorComponentNotSupported: _bindgen_ty_172 = 0;
pub const kIOBitsPerColorComponent6: _bindgen_ty_172 = 1;
pub const kIOBitsPerColorComponent8: _bindgen_ty_172 = 2;
pub const kIOBitsPerColorComponent10: _bindgen_ty_172 = 4;
pub const kIOBitsPerColorComponent12: _bindgen_ty_172 = 8;
pub const kIOBitsPerColorComponent16: _bindgen_ty_172 = 16;
pub type _bindgen_ty_172 = ::std::os::raw::c_uint;
pub const kIOColorimetryNotSupported: _bindgen_ty_173 = 0;
pub const kIOColorimetryNativeRGB: _bindgen_ty_173 = 1;
pub const kIOColorimetrysRGB: _bindgen_ty_173 = 2;
pub const kIOColorimetryDCIP3: _bindgen_ty_173 = 4;
pub const kIOColorimetryAdobeRGB: _bindgen_ty_173 = 8;
pub const kIOColorimetryxvYCC: _bindgen_ty_173 = 16;
pub const kIOColorimetryWGRGB: _bindgen_ty_173 = 32;
pub const kIOColorimetryBT601: _bindgen_ty_173 = 64;
pub const kIOColorimetryBT709: _bindgen_ty_173 = 128;
pub const kIOColorimetryBT2020: _bindgen_ty_173 = 256;
pub const kIOColorimetryBT2100: _bindgen_ty_173 = 512;
pub type _bindgen_ty_173 = ::std::os::raw::c_uint;
pub const kIODynamicRangeNotSupported: _bindgen_ty_174 = 0;
pub const kIODynamicRangeSDR: _bindgen_ty_174 = 1;
pub const kIODynamicRangeHDR10: _bindgen_ty_174 = 2;
pub const kIODynamicRangeDolbyNormalMode: _bindgen_ty_174 = 4;
pub const kIODynamicRangeDolbyTunnelMode: _bindgen_ty_174 = 8;
pub const kIODynamicRangeTraditionalGammaHDR: _bindgen_ty_174 = 16;
pub const kIODynamicRangeTraditionalGammaSDR: _bindgen_ty_174 = 32;
pub type _bindgen_ty_174 = ::std::os::raw::c_uint;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct IOFBDisplayModeDescription {
    pub info: IODisplayModeInformation,
    pub timingInfo: IOTimingInformation,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODisplayTimingRangeV1 {
    pub __reservedA: [UInt32; 2usize],
    pub version: UInt32,
    pub __reservedB: [UInt32; 5usize],
    pub minPixelClock: UInt64,
    pub maxPixelClock: UInt64,
    pub maxPixelError: UInt32,
    pub supportedSyncFlags: UInt32,
    pub supportedSignalLevels: UInt32,
    pub supportedSignalConfigs: UInt32,
    pub minFrameRate: UInt32,
    pub maxFrameRate: UInt32,
    pub minLineRate: UInt32,
    pub maxLineRate: UInt32,
    pub maxHorizontalTotal: UInt32,
    pub maxVerticalTotal: UInt32,
    pub __reservedD: [UInt32; 2usize],
    pub charSizeHorizontalActive: UInt8,
    pub charSizeHorizontalBlanking: UInt8,
    pub charSizeHorizontalSyncOffset: UInt8,
    pub charSizeHorizontalSyncPulse: UInt8,
    pub charSizeVerticalActive: UInt8,
    pub charSizeVerticalBlanking: UInt8,
    pub charSizeVerticalSyncOffset: UInt8,
    pub charSizeVerticalSyncPulse: UInt8,
    pub charSizeHorizontalBorderLeft: UInt8,
    pub charSizeHorizontalBorderRight: UInt8,
    pub charSizeVerticalBorderTop: UInt8,
    pub charSizeVerticalBorderBottom: UInt8,
    pub charSizeHorizontalTotal: UInt8,
    pub charSizeVerticalTotal: UInt8,
    pub __reservedE: UInt16,
    pub minHorizontalActiveClocks: UInt32,
    pub maxHorizontalActiveClocks: UInt32,
    pub minHorizontalBlankingClocks: UInt32,
    pub maxHorizontalBlankingClocks: UInt32,
    pub minHorizontalSyncOffsetClocks: UInt32,
    pub maxHorizontalSyncOffsetClocks: UInt32,
    pub minHorizontalPulseWidthClocks: UInt32,
    pub maxHorizontalPulseWidthClocks: UInt32,
    pub minVerticalActiveClocks: UInt32,
    pub maxVerticalActiveClocks: UInt32,
    pub minVerticalBlankingClocks: UInt32,
    pub maxVerticalBlankingClocks: UInt32,
    pub minVerticalSyncOffsetClocks: UInt32,
    pub maxVerticalSyncOffsetClocks: UInt32,
    pub minVerticalPulseWidthClocks: UInt32,
    pub maxVerticalPulseWidthClocks: UInt32,
    pub minHorizontalBorderLeft: UInt32,
    pub maxHorizontalBorderLeft: UInt32,
    pub minHorizontalBorderRight: UInt32,
    pub maxHorizontalBorderRight: UInt32,
    pub minVerticalBorderTop: UInt32,
    pub maxVerticalBorderTop: UInt32,
    pub minVerticalBorderBottom: UInt32,
    pub maxVerticalBorderBottom: UInt32,
    pub maxNumLinks: UInt32,
    pub minLink0PixelClock: UInt32,
    pub maxLink0PixelClock: UInt32,
    pub minLink1PixelClock: UInt32,
    pub maxLink1PixelClock: UInt32,
    pub supportedPixelEncoding: UInt16,
    pub supportedBitsPerColorComponent: UInt16,
    pub supportedColorimetryModes: UInt16,
    pub supportedDynamicRangeModes: UInt16,
    pub __reservedF: [UInt32; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODisplayTimingRangeV2 {
    pub __reservedA: [UInt32; 2usize],
    pub version: UInt32,
    pub __reservedB: [UInt32; 5usize],
    pub minPixelClock: UInt64,
    pub maxPixelClock: UInt64,
    pub maxPixelError: UInt32,
    pub supportedSyncFlags: UInt32,
    pub supportedSignalLevels: UInt32,
    pub supportedSignalConfigs: UInt32,
    pub minFrameRate: UInt32,
    pub maxFrameRate: UInt32,
    pub minLineRate: UInt32,
    pub maxLineRate: UInt32,
    pub maxHorizontalTotal: UInt32,
    pub maxVerticalTotal: UInt32,
    pub __reservedD: [UInt32; 2usize],
    pub charSizeHorizontalActive: UInt8,
    pub charSizeHorizontalBlanking: UInt8,
    pub charSizeHorizontalSyncOffset: UInt8,
    pub charSizeHorizontalSyncPulse: UInt8,
    pub charSizeVerticalActive: UInt8,
    pub charSizeVerticalBlanking: UInt8,
    pub charSizeVerticalSyncOffset: UInt8,
    pub charSizeVerticalSyncPulse: UInt8,
    pub charSizeHorizontalBorderLeft: UInt8,
    pub charSizeHorizontalBorderRight: UInt8,
    pub charSizeVerticalBorderTop: UInt8,
    pub charSizeVerticalBorderBottom: UInt8,
    pub charSizeHorizontalTotal: UInt8,
    pub charSizeVerticalTotal: UInt8,
    pub __reservedE: UInt16,
    pub minHorizontalActiveClocks: UInt32,
    pub maxHorizontalActiveClocks: UInt32,
    pub minHorizontalBlankingClocks: UInt32,
    pub maxHorizontalBlankingClocks: UInt32,
    pub minHorizontalSyncOffsetClocks: UInt32,
    pub maxHorizontalSyncOffsetClocks: UInt32,
    pub minHorizontalPulseWidthClocks: UInt32,
    pub maxHorizontalPulseWidthClocks: UInt32,
    pub minVerticalActiveClocks: UInt32,
    pub maxVerticalActiveClocks: UInt32,
    pub minVerticalBlankingClocks: UInt32,
    pub maxVerticalBlankingClocks: UInt32,
    pub minVerticalSyncOffsetClocks: UInt32,
    pub maxVerticalSyncOffsetClocks: UInt32,
    pub minVerticalPulseWidthClocks: UInt32,
    pub maxVerticalPulseWidthClocks: UInt32,
    pub minHorizontalBorderLeft: UInt32,
    pub maxHorizontalBorderLeft: UInt32,
    pub minHorizontalBorderRight: UInt32,
    pub maxHorizontalBorderRight: UInt32,
    pub minVerticalBorderTop: UInt32,
    pub maxVerticalBorderTop: UInt32,
    pub minVerticalBorderBottom: UInt32,
    pub maxVerticalBorderBottom: UInt32,
    pub maxNumLinks: UInt32,
    pub minLink0PixelClock: UInt32,
    pub maxLink0PixelClock: UInt32,
    pub minLink1PixelClock: UInt32,
    pub maxLink1PixelClock: UInt32,
    pub supportedPixelEncoding: UInt16,
    pub supportedBitsPerColorComponent: UInt16,
    pub supportedColorimetryModes: UInt16,
    pub supportedDynamicRangeModes: UInt16,
    pub __reservedF: [UInt32; 1usize],
    pub maxBandwidth: UInt64,
    pub dscMinSliceHeight: UInt32,
    pub dscMaxSliceHeight: UInt32,
    pub dscMinSliceWidth: UInt32,
    pub dscMaxSliceWidth: UInt32,
    pub dscMinSlicePerLine: UInt32,
    pub dscMaxSlicePerLine: UInt32,
    pub dscMinBPC: UInt16,
    pub dscMaxBPC: UInt16,
    pub dscMinBPP: UInt16,
    pub dscMaxBPP: UInt16,
    pub dscVBR: UInt8,
    pub dscBlockPredEnable: UInt8,
    pub __reservedC: [UInt32; 6usize],
}
pub type IODisplayTimingRange = IODisplayTimingRangeV2;
pub const kIOTimingRangeV2: _bindgen_ty_175 = 2;
pub const kIOTimingRangeV1: _bindgen_ty_175 = 0;
pub type _bindgen_ty_175 = ::std::os::raw::c_uint;
pub const kIORangePixelEncodingNotSupported: _bindgen_ty_176 = 0;
pub const kIORangePixelEncodingRGB444: _bindgen_ty_176 = 1;
pub const kIORangePixelEncodingYCbCr444: _bindgen_ty_176 = 2;
pub const kIORangePixelEncodingYCbCr422: _bindgen_ty_176 = 4;
pub const kIORangePixelEncodingYCbCr420: _bindgen_ty_176 = 8;
pub type _bindgen_ty_176 = ::std::os::raw::c_uint;
pub const kIORangeBitsPerColorComponentNotSupported: _bindgen_ty_177 = 0;
pub const kIORangeBitsPerColorComponent6: _bindgen_ty_177 = 1;
pub const kIORangeBitsPerColorComponent8: _bindgen_ty_177 = 2;
pub const kIORangeBitsPerColorComponent10: _bindgen_ty_177 = 4;
pub const kIORangeBitsPerColorComponent12: _bindgen_ty_177 = 8;
pub const kIORangeBitsPerColorComponent16: _bindgen_ty_177 = 16;
pub type _bindgen_ty_177 = ::std::os::raw::c_uint;
pub const kIORangeColorimetryNotSupported: _bindgen_ty_178 = 0;
pub const kIORangeColorimetryNativeRGB: _bindgen_ty_178 = 1;
pub const kIORangeColorimetrysRGB: _bindgen_ty_178 = 2;
pub const kIORangeColorimetryDCIP3: _bindgen_ty_178 = 4;
pub const kIORangeColorimetryAdobeRGB: _bindgen_ty_178 = 8;
pub const kIORangeColorimetryxvYCC: _bindgen_ty_178 = 16;
pub const kIORangeColorimetryWGRGB: _bindgen_ty_178 = 32;
pub const kIORangeColorimetryBT601: _bindgen_ty_178 = 64;
pub const kIORangeColorimetryBT709: _bindgen_ty_178 = 128;
pub const kIORangeColorimetryBT2020: _bindgen_ty_178 = 256;
pub const kIORangeColorimetryBT2100: _bindgen_ty_178 = 512;
pub type _bindgen_ty_178 = ::std::os::raw::c_uint;
pub const kIORangeDynamicRangeNotSupported: _bindgen_ty_179 = 0;
pub const kIORangeDynamicRangeSDR: _bindgen_ty_179 = 1;
pub const kIORangeDynamicRangeHDR10: _bindgen_ty_179 = 2;
pub const kIORangeDynamicRangeDolbyNormalMode: _bindgen_ty_179 = 4;
pub const kIORangeDynamicRangeDolbyTunnelMode: _bindgen_ty_179 = 8;
pub const kIORangeDynamicRangeTraditionalGammaHDR: _bindgen_ty_179 = 16;
pub const kIORangeDynamicRangeTraditionalGammaSDR: _bindgen_ty_179 = 32;
pub type _bindgen_ty_179 = ::std::os::raw::c_uint;
pub const kIORangeSupportsSignal_0700_0300: _bindgen_ty_180 = 1;
pub const kIORangeSupportsSignal_0714_0286: _bindgen_ty_180 = 2;
pub const kIORangeSupportsSignal_1000_0400: _bindgen_ty_180 = 4;
pub const kIORangeSupportsSignal_0700_0000: _bindgen_ty_180 = 8;
pub type _bindgen_ty_180 = ::std::os::raw::c_uint;
pub const kIORangeSupportsSeparateSyncs: _bindgen_ty_181 = 1;
pub const kIORangeSupportsSyncOnGreen: _bindgen_ty_181 = 2;
pub const kIORangeSupportsCompositeSync: _bindgen_ty_181 = 4;
pub const kIORangeSupportsVSyncSerration: _bindgen_ty_181 = 8;
pub const kIORangeSupportsVRR: _bindgen_ty_181 = 16;
pub type _bindgen_ty_181 = ::std::os::raw::c_uint;
pub const kIORangeSupportsInterlacedCEATiming: _bindgen_ty_182 = 4;
pub const kIORangeSupportsInterlacedCEATimingWithConfirm: _bindgen_ty_182 = 8;
pub const kIORangeSupportsMultiAlignedTiming: _bindgen_ty_182 = 64;
pub type _bindgen_ty_182 = ::std::os::raw::c_uint;
pub const kIODigitalSignal: _bindgen_ty_183 = 1;
pub const kIOAnalogSetupExpected: _bindgen_ty_183 = 2;
pub const kIOInterlacedCEATiming: _bindgen_ty_183 = 4;
pub const kIONTSCTiming: _bindgen_ty_183 = 8;
pub const kIOPALTiming: _bindgen_ty_183 = 16;
pub const kIODSCBlockPredEnable: _bindgen_ty_183 = 32;
pub const kIOMultiAlignedTiming: _bindgen_ty_183 = 64;
pub type _bindgen_ty_183 = ::std::os::raw::c_uint;
pub const kIOAnalogSignalLevel_0700_0300: _bindgen_ty_184 = 0;
pub const kIOAnalogSignalLevel_0714_0286: _bindgen_ty_184 = 1;
pub const kIOAnalogSignalLevel_1000_0400: _bindgen_ty_184 = 2;
pub const kIOAnalogSignalLevel_0700_0000: _bindgen_ty_184 = 3;
pub type _bindgen_ty_184 = ::std::os::raw::c_uint;
pub const kIOSyncPositivePolarity: _bindgen_ty_185 = 1;
pub type _bindgen_ty_185 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODisplayScalerInformation {
    pub __reservedA: [UInt32; 1usize],
    pub version: UInt32,
    pub __reservedB: [UInt32; 2usize],
    pub scalerFeatures: IOOptionBits,
    pub maxHorizontalPixels: UInt32,
    pub maxVerticalPixels: UInt32,
    pub __reservedC: [UInt32; 5usize],
}
pub const kIOScaleStretchOnly: _bindgen_ty_186 = 1;
pub const kIOScaleCanUpSamplePixels: _bindgen_ty_186 = 2;
pub const kIOScaleCanDownSamplePixels: _bindgen_ty_186 = 4;
pub const kIOScaleCanScaleInterlaced: _bindgen_ty_186 = 8;
pub const kIOScaleCanSupportInset: _bindgen_ty_186 = 16;
pub const kIOScaleCanRotate: _bindgen_ty_186 = 32;
pub const kIOScaleCanBorderInsetOnly: _bindgen_ty_186 = 64;
pub type _bindgen_ty_186 = ::std::os::raw::c_uint;
pub const kOrConnections: _bindgen_ty_187 = 268435454;
pub const kAndConnections: _bindgen_ty_187 = 268435453;
pub type _bindgen_ty_187 = ::std::os::raw::c_uint;
pub const kConnectionFlags: _bindgen_ty_188 = 1718380403;
pub const kConnectionSyncEnable: _bindgen_ty_188 = 1937337955;
pub const kConnectionSyncFlags: _bindgen_ty_188 = 1937335142;
pub const kConnectionSupportsAppleSense: _bindgen_ty_188 = 1634954867;
pub const kConnectionSupportsLLDDCSense: _bindgen_ty_188 = 1818518627;
pub const kConnectionSupportsHLDDCSense: _bindgen_ty_188 = 1751409763;
pub const kConnectionEnable: _bindgen_ty_188 = 1701732706;
pub const kConnectionCheckEnable: _bindgen_ty_188 = 1667591777;
pub const kConnectionProbe: _bindgen_ty_188 = 1886547810;
pub const kConnectionIgnore: _bindgen_ty_188 = 6907762;
pub const kConnectionChanged: _bindgen_ty_188 = 1667788391;
pub const kConnectionPower: _bindgen_ty_188 = 1886353266;
pub const kConnectionPostWake: _bindgen_ty_188 = 1886871915;
pub const kConnectionDisplayParameterCount: _bindgen_ty_188 = 1885564532;
pub const kConnectionDisplayParameters: _bindgen_ty_188 = 1885434477;
pub const kConnectionOverscan: _bindgen_ty_188 = 1869833070;
pub const kConnectionVideoBest: _bindgen_ty_188 = 1986163572;
pub const kConnectionRedGammaScale: _bindgen_ty_188 = 1919382371;
pub const kConnectionGreenGammaScale: _bindgen_ty_188 = 1734832995;
pub const kConnectionBlueGammaScale: _bindgen_ty_188 = 1650946915;
pub const kConnectionGammaScale: _bindgen_ty_188 = 1735615264;
pub const kConnectionFlushParameters: _bindgen_ty_188 = 1718383987;
pub const kConnectionVBLMultiplier: _bindgen_ty_188 = 1986161773;
pub const kConnectionHandleDisplayPortEvent: _bindgen_ty_188 = 1685088626;
pub const kConnectionPanelTimingDisable: _bindgen_ty_188 = 1886284916;
pub const kConnectionColorMode: _bindgen_ty_188 = 1668904310;
pub const kConnectionColorModesSupported: _bindgen_ty_188 = 1668246642;
pub const kConnectionColorDepthsSupported: _bindgen_ty_188 = 543322211;
pub const kConnectionControllerDepthsSupported: _bindgen_ty_188 = 6779492;
pub const kConnectionControllerColorDepth: _bindgen_ty_188 = 6582372;
pub const kConnectionControllerDitherControl: _bindgen_ty_188 = 6775907;
pub const kConnectionDisplayFlags: _bindgen_ty_188 = 1684434023;
pub const kConnectionEnableAudio: _bindgen_ty_188 = 1635083296;
pub const kConnectionAudioStreaming: _bindgen_ty_188 = 1635083379;
pub const kConnectionStartOfFrameTime: _bindgen_ty_188 = 1936680564;
pub type _bindgen_ty_188 = ::std::os::raw::c_uint;
pub const kIOConnectionBuiltIn: _bindgen_ty_189 = 2048;
pub const kIOConnectionStereoSync: _bindgen_ty_189 = 32768;
pub type _bindgen_ty_189 = ::std::os::raw::c_uint;
pub const kIOHSyncDisable: _bindgen_ty_190 = 1;
pub const kIOVSyncDisable: _bindgen_ty_190 = 2;
pub const kIOCSyncDisable: _bindgen_ty_190 = 4;
pub const kIONoSeparateSyncControl: _bindgen_ty_190 = 64;
pub const kIOTriStateSyncs: _bindgen_ty_190 = 128;
pub const kIOSyncOnBlue: _bindgen_ty_190 = 8;
pub const kIOSyncOnGreen: _bindgen_ty_190 = 16;
pub const kIOSyncOnRed: _bindgen_ty_190 = 32;
pub type _bindgen_ty_190 = ::std::os::raw::c_uint;
pub const kIODPEventStart: _bindgen_ty_191 = 1;
pub const kIODPEventIdle: _bindgen_ty_191 = 2;
pub const kIODPEventForceRetrain: _bindgen_ty_191 = 3;
pub const kIODPEventRemoteControlCommandPending: _bindgen_ty_191 = 256;
pub const kIODPEventAutomatedTestRequest: _bindgen_ty_191 = 257;
pub const kIODPEventContentProtection: _bindgen_ty_191 = 258;
pub const kIODPEventMCCS: _bindgen_ty_191 = 259;
pub const kIODPEventSinkSpecific: _bindgen_ty_191 = 260;
pub type _bindgen_ty_191 = ::std::os::raw::c_uint;
pub const kIODisplayColorMode: _bindgen_ty_192 = 1668904310;
pub type _bindgen_ty_192 = ::std::os::raw::c_uint;
pub const kIODisplayRGBColorComponentBitsUnknown: _bindgen_ty_193 = 0;
pub const kIODisplayRGBColorComponentBits6: _bindgen_ty_193 = 1;
pub const kIODisplayRGBColorComponentBits8: _bindgen_ty_193 = 2;
pub const kIODisplayRGBColorComponentBits10: _bindgen_ty_193 = 4;
pub const kIODisplayRGBColorComponentBits12: _bindgen_ty_193 = 8;
pub const kIODisplayRGBColorComponentBits14: _bindgen_ty_193 = 16;
pub const kIODisplayRGBColorComponentBits16: _bindgen_ty_193 = 32;
pub const kIODisplayYCbCr444ColorComponentBitsUnknown: _bindgen_ty_193 = 0;
pub const kIODisplayYCbCr444ColorComponentBits6: _bindgen_ty_193 = 256;
pub const kIODisplayYCbCr444ColorComponentBits8: _bindgen_ty_193 = 512;
pub const kIODisplayYCbCr444ColorComponentBits10: _bindgen_ty_193 = 1024;
pub const kIODisplayYCbCr444ColorComponentBits12: _bindgen_ty_193 = 2048;
pub const kIODisplayYCbCr444ColorComponentBits14: _bindgen_ty_193 = 4096;
pub const kIODisplayYCbCr444ColorComponentBits16: _bindgen_ty_193 = 8192;
pub const kIODisplayYCbCr422ColorComponentBitsUnknown: _bindgen_ty_193 = 0;
pub const kIODisplayYCbCr422ColorComponentBits6: _bindgen_ty_193 = 65536;
pub const kIODisplayYCbCr422ColorComponentBits8: _bindgen_ty_193 = 131072;
pub const kIODisplayYCbCr422ColorComponentBits10: _bindgen_ty_193 = 262144;
pub const kIODisplayYCbCr422ColorComponentBits12: _bindgen_ty_193 = 524288;
pub const kIODisplayYCbCr422ColorComponentBits14: _bindgen_ty_193 = 1048576;
pub const kIODisplayYCbCr422ColorComponentBits16: _bindgen_ty_193 = 2097152;
pub type _bindgen_ty_193 = ::std::os::raw::c_uint;
pub const kIODisplayDitherDisable: _bindgen_ty_194 = 0;
pub const kIODisplayDitherSpatial: _bindgen_ty_194 = 1;
pub const kIODisplayDitherTemporal: _bindgen_ty_194 = 2;
pub const kIODisplayDitherFrameRateControl: _bindgen_ty_194 = 4;
pub const kIODisplayDitherDefault: _bindgen_ty_194 = 128;
pub const kIODisplayDitherAll: _bindgen_ty_194 = 255;
pub const kIODisplayDitherRGBShift: _bindgen_ty_194 = 0;
pub const kIODisplayDitherYCbCr444Shift: _bindgen_ty_194 = 8;
pub const kIODisplayDitherYCbCr422Shift: _bindgen_ty_194 = 16;
pub type _bindgen_ty_194 = ::std::os::raw::c_uint;
pub const kIODisplayNeedsCEAUnderscan: _bindgen_ty_195 = 1;
pub type _bindgen_ty_195 = ::std::os::raw::c_uint;
pub const kIODisplayPowerStateOff: _bindgen_ty_196 = 0;
pub const kIODisplayPowerStateMinUsable: _bindgen_ty_196 = 1;
pub const kIODisplayPowerStateOn: _bindgen_ty_196 = 2;
pub type _bindgen_ty_196 = ::std::os::raw::c_uint;
pub const kIOFBServerConnectType: _bindgen_ty_197 = 0;
pub const kIOFBSharedConnectType: _bindgen_ty_197 = 1;
pub const kIOGDiagnoseGTraceType: _bindgen_ty_197 = 11452;
pub const kIOGDiagnoseConnectType: _bindgen_ty_197 = 38744;
pub const kIODisplayAssertionConnectType: _bindgen_ty_197 = 61074;
pub type _bindgen_ty_197 = ::std::os::raw::c_uint;
pub const kIOFBUserRequestProbe: _bindgen_ty_198 = 1;
pub type _bindgen_ty_198 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOGPoint {
    pub x: SInt16,
    pub y: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOGSize {
    pub width: SInt16,
    pub height: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOGBounds {
    pub minx: SInt16,
    pub maxx: SInt16,
    pub miny: SInt16,
    pub maxy: SInt16,
}
pub const kTransparentEncoding: _bindgen_ty_199 = 0;
pub const kInvertingEncoding: _bindgen_ty_199 = 1;
pub type _bindgen_ty_199 = ::std::os::raw::c_uint;
pub const kTransparentEncodingShift: _bindgen_ty_200 = 0;
pub const kTransparentEncodedPixel: _bindgen_ty_200 = 1;
pub const kInvertingEncodingShift: _bindgen_ty_200 = 2;
pub const kInvertingEncodedPixel: _bindgen_ty_200 = 4;
pub type _bindgen_ty_200 = ::std::os::raw::c_uint;
pub const kHardwareCursorDescriptorMajorVersion: _bindgen_ty_201 = 1;
pub const kHardwareCursorDescriptorMinorVersion: _bindgen_ty_201 = 0;
pub type _bindgen_ty_201 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHardwareCursorDescriptor {
    pub majorVersion: UInt16,
    pub minorVersion: UInt16,
    pub height: UInt32,
    pub width: UInt32,
    pub bitDepth: UInt32,
    pub maskBitDepth: UInt32,
    pub numColors: UInt32,
    pub colorEncodings: *mut UInt32,
    pub flags: UInt32,
    pub supportedSpecialEncodings: UInt32,
    pub specialEncodings: [UInt32; 16usize],
}
pub const kHardwareCursorInfoMajorVersion: _bindgen_ty_202 = 1;
pub const kHardwareCursorInfoMinorVersion: _bindgen_ty_202 = 0;
pub type _bindgen_ty_202 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHardwareCursorInfo {
    pub majorVersion: UInt16,
    pub minorVersion: UInt16,
    pub cursorHeight: UInt32,
    pub cursorWidth: UInt32,
    pub colorMap: *mut IOColorEntry,
    pub hardwareCursorData: *mut UInt8,
    pub cursorHotSpotX: UInt16,
    pub cursorHotSpotY: UInt16,
    pub reserved: [UInt32; 5usize],
}
pub const kIOFBVBLInterruptType: _bindgen_ty_203 = 1986161696;
pub const kIOFBHBLInterruptType: _bindgen_ty_203 = 1751280672;
pub const kIOFBFrameInterruptType: _bindgen_ty_203 = 1718772077;
pub const kIOFBConnectInterruptType: _bindgen_ty_203 = 1684236576;
pub const kIOFBChangedInterruptType: _bindgen_ty_203 = 1667788391;
pub const kIOFBOfflineInterruptType: _bindgen_ty_203 = 1919249782;
pub const kIOFBOnlineInterruptType: _bindgen_ty_203 = 1633969184;
pub const kIOFBDisplayPortInterruptType: _bindgen_ty_203 = 1685088626;
pub const kIOFBDisplayPortLinkChangeInterruptType: _bindgen_ty_203 = 1685089387;
pub const kIOFBMCCSInterruptType: _bindgen_ty_203 = 1835230067;
pub const kIOFBWakeInterruptType: _bindgen_ty_203 = 1987535211;
pub type _bindgen_ty_203 = ::std::os::raw::c_uint;
pub const kIOTimingIDInvalid: _bindgen_ty_204 = 0;
pub const kIOTimingIDApple_FixedRateLCD: _bindgen_ty_204 = 42;
pub const kIOTimingIDApple_512x384_60hz: _bindgen_ty_204 = 130;
pub const kIOTimingIDApple_560x384_60hz: _bindgen_ty_204 = 135;
pub const kIOTimingIDApple_640x480_67hz: _bindgen_ty_204 = 140;
pub const kIOTimingIDApple_640x400_67hz: _bindgen_ty_204 = 145;
pub const kIOTimingIDVESA_640x480_60hz: _bindgen_ty_204 = 150;
pub const kIOTimingIDVESA_640x480_72hz: _bindgen_ty_204 = 152;
pub const kIOTimingIDVESA_640x480_75hz: _bindgen_ty_204 = 154;
pub const kIOTimingIDVESA_640x480_85hz: _bindgen_ty_204 = 158;
pub const kIOTimingIDGTF_640x480_120hz: _bindgen_ty_204 = 159;
pub const kIOTimingIDApple_640x870_75hz: _bindgen_ty_204 = 160;
pub const kIOTimingIDApple_640x818_75hz: _bindgen_ty_204 = 165;
pub const kIOTimingIDApple_832x624_75hz: _bindgen_ty_204 = 170;
pub const kIOTimingIDVESA_800x600_56hz: _bindgen_ty_204 = 180;
pub const kIOTimingIDVESA_800x600_60hz: _bindgen_ty_204 = 182;
pub const kIOTimingIDVESA_800x600_72hz: _bindgen_ty_204 = 184;
pub const kIOTimingIDVESA_800x600_75hz: _bindgen_ty_204 = 186;
pub const kIOTimingIDVESA_800x600_85hz: _bindgen_ty_204 = 188;
pub const kIOTimingIDVESA_1024x768_60hz: _bindgen_ty_204 = 190;
pub const kIOTimingIDVESA_1024x768_70hz: _bindgen_ty_204 = 200;
pub const kIOTimingIDVESA_1024x768_75hz: _bindgen_ty_204 = 204;
pub const kIOTimingIDVESA_1024x768_85hz: _bindgen_ty_204 = 208;
pub const kIOTimingIDApple_1024x768_75hz: _bindgen_ty_204 = 210;
pub const kIOTimingIDVESA_1152x864_75hz: _bindgen_ty_204 = 215;
pub const kIOTimingIDApple_1152x870_75hz: _bindgen_ty_204 = 220;
pub const kIOTimingIDAppleNTSC_ST: _bindgen_ty_204 = 230;
pub const kIOTimingIDAppleNTSC_FF: _bindgen_ty_204 = 232;
pub const kIOTimingIDAppleNTSC_STconv: _bindgen_ty_204 = 234;
pub const kIOTimingIDAppleNTSC_FFconv: _bindgen_ty_204 = 236;
pub const kIOTimingIDApplePAL_ST: _bindgen_ty_204 = 238;
pub const kIOTimingIDApplePAL_FF: _bindgen_ty_204 = 240;
pub const kIOTimingIDApplePAL_STconv: _bindgen_ty_204 = 242;
pub const kIOTimingIDApplePAL_FFconv: _bindgen_ty_204 = 244;
pub const kIOTimingIDVESA_1280x960_75hz: _bindgen_ty_204 = 250;
pub const kIOTimingIDVESA_1280x960_60hz: _bindgen_ty_204 = 252;
pub const kIOTimingIDVESA_1280x960_85hz: _bindgen_ty_204 = 254;
pub const kIOTimingIDVESA_1280x1024_60hz: _bindgen_ty_204 = 260;
pub const kIOTimingIDVESA_1280x1024_75hz: _bindgen_ty_204 = 262;
pub const kIOTimingIDVESA_1280x1024_85hz: _bindgen_ty_204 = 268;
pub const kIOTimingIDVESA_1600x1200_60hz: _bindgen_ty_204 = 280;
pub const kIOTimingIDVESA_1600x1200_65hz: _bindgen_ty_204 = 282;
pub const kIOTimingIDVESA_1600x1200_70hz: _bindgen_ty_204 = 284;
pub const kIOTimingIDVESA_1600x1200_75hz: _bindgen_ty_204 = 286;
pub const kIOTimingIDVESA_1600x1200_80hz: _bindgen_ty_204 = 288;
pub const kIOTimingIDVESA_1600x1200_85hz: _bindgen_ty_204 = 289;
pub const kIOTimingIDVESA_1792x1344_60hz: _bindgen_ty_204 = 296;
pub const kIOTimingIDVESA_1792x1344_75hz: _bindgen_ty_204 = 298;
pub const kIOTimingIDVESA_1856x1392_60hz: _bindgen_ty_204 = 300;
pub const kIOTimingIDVESA_1856x1392_75hz: _bindgen_ty_204 = 302;
pub const kIOTimingIDVESA_1920x1440_60hz: _bindgen_ty_204 = 304;
pub const kIOTimingIDVESA_1920x1440_75hz: _bindgen_ty_204 = 306;
pub const kIOTimingIDSMPTE240M_60hz: _bindgen_ty_204 = 400;
pub const kIOTimingIDFilmRate_48hz: _bindgen_ty_204 = 410;
pub const kIOTimingIDSony_1600x1024_76hz: _bindgen_ty_204 = 500;
pub const kIOTimingIDSony_1920x1080_60hz: _bindgen_ty_204 = 510;
pub const kIOTimingIDSony_1920x1080_72hz: _bindgen_ty_204 = 520;
pub const kIOTimingIDSony_1920x1200_76hz: _bindgen_ty_204 = 540;
pub const kIOTimingIDApple_0x0_0hz_Offline: _bindgen_ty_204 = 550;
pub const kIOTimingIDVESA_848x480_60hz: _bindgen_ty_204 = 570;
pub const kIOTimingIDVESA_1360x768_60hz: _bindgen_ty_204 = 590;
pub type _bindgen_ty_204 = ::std::os::raw::c_uint;
pub const kIOHibernatePreviewActive: _bindgen_ty_205 = 1;
pub const kIOHibernatePreviewUpdates: _bindgen_ty_205 = 2;
pub type _bindgen_ty_205 = ::std::os::raw::c_uint;
pub const kIOFBAVSignalTypeUnknown: _bindgen_ty_206 = 0;
pub const kIOFBAVSignalTypeVGA: _bindgen_ty_206 = 1;
pub const kIOFBAVSignalTypeDVI: _bindgen_ty_206 = 2;
pub const kIOFBAVSignalTypeHDMI: _bindgen_ty_206 = 8;
pub const kIOFBAVSignalTypeDP: _bindgen_ty_206 = 16;
pub type _bindgen_ty_206 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFBDPLinkConfig {
    pub version: u16,
    pub bitRate: u8,
    pub __reservedA: [u8; 1usize],
    pub t1Time: u16,
    pub t2Time: u16,
    pub t3Time: u16,
    pub idlePatterns: u8,
    pub laneCount: u8,
    pub voltage: u8,
    pub preEmphasis: u8,
    pub downspread: u8,
    pub scrambler: u8,
    pub maxBitRate: u8,
    pub maxLaneCount: u8,
    pub maxDownspread: u8,
    pub __reservedB: [u8; 9usize],
}
pub const kIOFBBitRateRBR: _bindgen_ty_207 = 6;
pub const kIOFBBitRateHBR: _bindgen_ty_207 = 10;
pub const kIOFBBitRateHBR2: _bindgen_ty_207 = 20;
pub type _bindgen_ty_207 = ::std::os::raw::c_uint;
pub const kIOFBLinkVoltageLevel0: _bindgen_ty_208 = 0;
pub const kIOFBLinkVoltageLevel1: _bindgen_ty_208 = 1;
pub const kIOFBLinkVoltageLevel2: _bindgen_ty_208 = 2;
pub const kIOFBLinkVoltageLevel3: _bindgen_ty_208 = 3;
pub type _bindgen_ty_208 = ::std::os::raw::c_uint;
pub const kIOFBLinkPreEmphasisLevel0: _bindgen_ty_209 = 0;
pub const kIOFBLinkPreEmphasisLevel1: _bindgen_ty_209 = 1;
pub const kIOFBLinkPreEmphasisLevel2: _bindgen_ty_209 = 2;
pub const kIOFBLinkPreEmphasisLevel3: _bindgen_ty_209 = 3;
pub type _bindgen_ty_209 = ::std::os::raw::c_uint;
pub const kIOFBLinkDownspreadNone: _bindgen_ty_210 = 0;
pub const kIOFBLinkDownspreadMax: _bindgen_ty_210 = 1;
pub type _bindgen_ty_210 = ::std::os::raw::c_uint;
pub const kIOFBLinkScramblerNormal: _bindgen_ty_211 = 0;
pub const kIOFBLinkScramblerAlternate: _bindgen_ty_211 = 1;
pub type _bindgen_ty_211 = ::std::os::raw::c_uint;
pub const kDisplayVendorIDUnknown: _bindgen_ty_212 = 1970170734;
pub const kDisplayProductIDGeneric: _bindgen_ty_212 = 1815;
pub type _bindgen_ty_212 = ::std::os::raw::c_uint;
pub const kDisplaySubPixelLayoutUndefined: _bindgen_ty_213 = 0;
pub const kDisplaySubPixelLayoutRGB: _bindgen_ty_213 = 1;
pub const kDisplaySubPixelLayoutBGR: _bindgen_ty_213 = 2;
pub const kDisplaySubPixelLayoutQuadGBL: _bindgen_ty_213 = 3;
pub const kDisplaySubPixelLayoutQuadGBR: _bindgen_ty_213 = 4;
pub const kDisplaySubPixelConfigurationUndefined: _bindgen_ty_213 = 0;
pub const kDisplaySubPixelConfigurationDelta: _bindgen_ty_213 = 1;
pub const kDisplaySubPixelConfigurationStripe: _bindgen_ty_213 = 2;
pub const kDisplaySubPixelConfigurationStripeOffset: _bindgen_ty_213 = 3;
pub const kDisplaySubPixelConfigurationQuad: _bindgen_ty_213 = 4;
pub const kDisplaySubPixelShapeUndefined: _bindgen_ty_213 = 0;
pub const kDisplaySubPixelShapeRound: _bindgen_ty_213 = 1;
pub const kDisplaySubPixelShapeSquare: _bindgen_ty_213 = 2;
pub const kDisplaySubPixelShapeRectangular: _bindgen_ty_213 = 3;
pub const kDisplaySubPixelShapeOval: _bindgen_ty_213 = 4;
pub const kDisplaySubPixelShapeElliptical: _bindgen_ty_213 = 5;
pub type _bindgen_ty_213 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evsioKeymapping {
    pub size: ::std::os::raw::c_int,
    pub mapping: *mut ::std::os::raw::c_char,
}
pub type NXKeyMapping = evsioKeymapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evsioMouseScaling {
    pub numScaleLevels: ::std::os::raw::c_int,
    pub scaleThresholds: [::std::os::raw::c_short; 20usize],
    pub scaleFactors: [::std::os::raw::c_short; 20usize],
}
pub type NXMouseScaling = evsioMouseScaling;
pub const NXMouseButton_NX_OneButton: NXMouseButton = 0;
pub const NXMouseButton_NX_LeftButton: NXMouseButton = 1;
pub const NXMouseButton_NX_RightButton: NXMouseButton = 2;
pub type NXMouseButton = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOFixedPoint32 {
    pub x: i32,
    pub y: i32,
}
pub type IOFixedPoint32 = __IOFixedPoint32;
pub type NXEventSystemInfoType = *mut ::std::os::raw::c_int;
pub type NXEventSystemInfoData = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventSystemDevice {
    pub interface: ::std::os::raw::c_int,
    pub interface_addr: ::std::os::raw::c_int,
    pub dev_type: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventSystemDeviceList {
    pub dev: [NXEventSystemDevice; 16usize],
}
pub const EvCmd_EVNOP: EvCmd = 0;
pub const EvCmd_EVHIDE: EvCmd = 1;
pub const EvCmd_EVSHOW: EvCmd = 2;
pub const EvCmd_EVMOVE: EvCmd = 3;
pub const EvCmd_EVLEVEL: EvCmd = 4;
pub type EvCmd = ::std::os::raw::c_uint;
pub const kIOFBNumCursorFrames: _bindgen_ty_214 = 4;
pub const kIOFBNumCursorFramesShift: _bindgen_ty_214 = 2;
pub const kIOFBMaxCursorDepth: _bindgen_ty_214 = 32;
pub const kIOFBMaxCursorWidth: _bindgen_ty_214 = 256;
pub const kIOFBMaxCursorFrames: _bindgen_ty_214 = 32;
pub type _bindgen_ty_214 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bm12Cursor {
    pub image: [[::std::os::raw::c_uint; 16usize]; 4usize],
    pub mask: [[::std::os::raw::c_uint; 16usize]; 4usize],
    pub save: [::std::os::raw::c_uint; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bm18Cursor {
    pub image: [[::std::os::raw::c_uchar; 256usize]; 4usize],
    pub mask: [[::std::os::raw::c_uchar; 256usize]; 4usize],
    pub save: [::std::os::raw::c_uchar; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bm34Cursor {
    pub image: [[::std::os::raw::c_ushort; 256usize]; 4usize],
    pub save: [::std::os::raw::c_ushort; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bm38Cursor {
    pub image: [[::std::os::raw::c_uint; 256usize]; 4usize],
    pub save: [::std::os::raw::c_uint; 256usize],
}
pub const kIOFBCursorImageNew: _bindgen_ty_215 = 1;
pub const kIOFBCursorHWCapable: _bindgen_ty_215 = 2;
pub type _bindgen_ty_215 = ::std::os::raw::c_uint;
pub const kIOFBHardwareCursorActive: _bindgen_ty_216 = 1;
pub const kIOFBHardwareCursorInVRAM: _bindgen_ty_216 = 2;
pub type _bindgen_ty_216 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdFBShmem_t {
    pub __bindgen_anon_1: StdFBShmem_t__bindgen_ty_1,
    pub cursorSema: OSSpinLock,
    pub frame: ::std::os::raw::c_int,
    pub cursorShow: ::std::os::raw::c_char,
    pub cursorObscured: ::std::os::raw::c_char,
    pub shieldFlag: ::std::os::raw::c_char,
    pub shielded: ::std::os::raw::c_char,
    pub saveRect: IOGBounds,
    pub shieldRect: IOGBounds,
    pub cursorLoc: IOGPoint,
    pub cursorRect: IOGBounds,
    pub oldCursorRect: IOGBounds,
    pub screenBounds: IOGBounds,
    pub version: ::std::os::raw::c_int,
    pub structSize: ::std::os::raw::c_int,
    pub vblTime: AbsoluteTime,
    pub vblDelta: AbsoluteTime,
    pub vblCount: ::std::os::raw::c_ulonglong,
    pub reservedC: [::std::os::raw::c_uint; 27usize],
    pub hardwareCursorFlags: [::std::os::raw::c_uchar; 4usize],
    pub hardwareCursorCapable: ::std::os::raw::c_uchar,
    pub hardwareCursorActive: ::std::os::raw::c_uchar,
    pub hardwareCursorShields: ::std::os::raw::c_uchar,
    pub reservedB: [::std::os::raw::c_uchar; 1usize],
    pub cursorSize: [IOGSize; 4usize],
    pub hotSpot: [IOGPoint; 4usize],
    pub cursor: StdFBShmem_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union StdFBShmem_t__bindgen_ty_1 {
    pub bw: bm12Cursor,
    pub bw8: bm18Cursor,
    pub rgb: bm34Cursor,
    pub rgb24: bm38Cursor,
}
pub const kIOFBShmemVersionMask: _bindgen_ty_217 = 255;
pub const kIOFBTenPtOneShmemVersion: _bindgen_ty_217 = 2;
pub const kIOFBTenPtTwoShmemVersion: _bindgen_ty_217 = 3;
pub const kIOFBCurrentShmemVersion: _bindgen_ty_217 = 2;
pub const kIOFBShmemCursorNumFramesMask: _bindgen_ty_217 = 16711680;
pub const kIOFBShmemCursorNumFramesShift: _bindgen_ty_217 = 16;
pub const kIOFBCursorMemory: _bindgen_ty_217 = 100;
pub type _bindgen_ty_217 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOFramebufferOpen(
        service: io_service_t,
        owningTask: task_port_t,
        type_: ::std::os::raw::c_uint,
        connect: *mut io_connect_t,
    ) -> kern_return_t;
}
pub const kIODisplayMatchingInfo: _bindgen_ty_218 = 256;
pub const kIODisplayOnlyPreferredName: _bindgen_ty_218 = 512;
pub const kIODisplayNoProductName: _bindgen_ty_218 = 1024;
pub type _bindgen_ty_218 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IODisplayCreateInfoDictionary(
        framebuffer: io_service_t,
        options: IOOptionBits,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn IODisplayMatchDictionaries(
        matching1: CFDictionaryRef,
        matching2: CFDictionaryRef,
        options: IOOptionBits,
    ) -> SInt32;
}
extern "C" {
    pub fn IODisplayForFramebuffer(
        framebuffer: io_service_t,
        options: IOOptionBits,
    ) -> io_service_t;
}
extern "C" {
    pub fn IODisplaySetParameters(
        service: io_service_t,
        options: IOOptionBits,
        params: CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplaySetFloatParameter(
        service: io_service_t,
        options: IOOptionBits,
        parameterName: CFStringRef,
        value: f32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplaySetIntegerParameter(
        service: io_service_t,
        options: IOOptionBits,
        parameterName: CFStringRef,
        value: SInt32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplayCopyParameters(
        service: io_service_t,
        options: IOOptionBits,
        params: *mut CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplayCopyFloatParameters(
        service: io_service_t,
        options: IOOptionBits,
        params: *mut CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplayGetFloatParameter(
        service: io_service_t,
        options: IOOptionBits,
        parameterName: CFStringRef,
        value: *mut f32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplayGetIntegerRangeParameter(
        service: io_service_t,
        options: IOOptionBits,
        parameterName: CFStringRef,
        value: *mut SInt32,
        min: *mut SInt32,
        max: *mut SInt32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IODisplayCommitParameters(service: io_service_t, options: IOOptionBits) -> IOReturn;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOGraphicsEngineContext {
    pub contextLock: OSSpinLock,
    pub state: IOOptionBits,
    pub owner: *mut ::std::os::raw::c_void,
    pub version: UInt32,
    pub structSize: IOByteCount,
    pub reserved: [UInt32; 8usize],
}
pub const kIOGraphicsEngineContext: _bindgen_ty_219 = 100;
pub type _bindgen_ty_219 = ::std::os::raw::c_uint;
pub const kIOGraphicsEngineContextVersion: _bindgen_ty_220 = 1;
pub type _bindgen_ty_220 = ::std::os::raw::c_uint;
pub type NXCoord = f32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXPoint {
    pub x: NXCoord,
    pub y: NXCoord,
}
pub type NXPoint = _NXPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXSize {
    pub width: NXCoord,
    pub height: NXCoord,
}
pub type NXSize = _NXSize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXTabletPointData {
    pub __bindgen_anon_1: _NXTabletPointData__bindgen_ty_1,
    pub x: SInt32,
    pub y: SInt32,
    pub z: SInt32,
    pub buttons: UInt16,
    pub pressure: UInt16,
    pub tilt: _NXTabletPointData__bindgen_ty_1,
    pub rotation: UInt16,
    pub tangentialPressure: SInt16,
    pub deviceID: UInt16,
    pub vendor1: SInt16,
    pub vendor2: SInt16,
    pub vendor3: SInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXTabletPointData__bindgen_ty_1 {
    pub x: SInt16,
    pub y: SInt16,
}
pub type NXTabletPointData = _NXTabletPointData;
pub type NXTabletPointDataPtr = *mut _NXTabletPointData;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _NXTabletProximityData {
    pub vendorID: UInt16,
    pub tabletID: UInt16,
    pub pointerID: UInt16,
    pub deviceID: UInt16,
    pub systemTabletID: UInt16,
    pub vendorPointerType: UInt16,
    pub pointerSerialNumber: UInt32,
    pub uniqueID: UInt64,
    pub capabilityMask: UInt32,
    pub pointerType: UInt8,
    pub enterProximity: UInt8,
    pub reserved1: SInt16,
}
pub type NXTabletProximityData = _NXTabletProximityData;
pub type NXTabletProximityDataPtr = *mut _NXTabletProximityData;
#[repr(C)]
#[derive(Copy, Clone)]
pub union NXEventData {
    pub __bindgen_anon_1: NXEventData__bindgen_ty_1,
    pub __bindgen_anon_2: NXEventData__bindgen_ty_2,
    pub __bindgen_anon_3: NXEventData__bindgen_ty_3,
    pub __bindgen_anon_4: NXEventData__bindgen_ty_4,
    pub __bindgen_anon_5: NXEventData__bindgen_ty_5,
    pub __bindgen_anon_6: NXEventData__bindgen_ty_6,
    pub __bindgen_anon_7: NXEventData__bindgen_ty_7,
    pub __bindgen_anon_8: NXEventData__bindgen_ty_8,
    pub mouse: NXEventData__bindgen_ty_1,
    pub mouseMove: NXEventData__bindgen_ty_2,
    pub key: NXEventData__bindgen_ty_3,
    pub tracking: NXEventData__bindgen_ty_4,
    pub scrollWheel: NXEventData__bindgen_ty_5,
    pub zoom: NXEventData__bindgen_ty_5,
    pub compound: NXEventData__bindgen_ty_6,
    pub tablet: NXEventData__bindgen_ty_7,
    pub proximity: NXEventData__bindgen_ty_8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NXEventData__bindgen_ty_1 {
    pub __bindgen_anon_1: NXEventData__bindgen_ty_1__bindgen_ty_1,
    pub subx: UInt8,
    pub suby: UInt8,
    pub eventNum: SInt16,
    pub click: SInt32,
    pub pressure: UInt8,
    pub buttonNumber: UInt8,
    pub subType: UInt8,
    pub reserved2: UInt8,
    pub reserved3: SInt32,
    pub tablet: NXEventData__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NXEventData__bindgen_ty_1__bindgen_ty_1 {
    pub point: NXTabletPointData,
    pub proximity: NXTabletProximityData,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NXEventData__bindgen_ty_2 {
    pub __bindgen_anon_1: NXEventData__bindgen_ty_2__bindgen_ty_1,
    pub dx: SInt32,
    pub dy: SInt32,
    pub subx: UInt8,
    pub suby: UInt8,
    pub subType: UInt8,
    pub reserved1: UInt8,
    pub reserved2: SInt32,
    pub tablet: NXEventData__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NXEventData__bindgen_ty_2__bindgen_ty_1 {
    pub point: NXTabletPointData,
    pub proximity: NXTabletProximityData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventData__bindgen_ty_3 {
    pub origCharSet: UInt16,
    pub repeat: SInt16,
    pub charSet: UInt16,
    pub charCode: UInt16,
    pub keyCode: UInt16,
    pub origCharCode: UInt16,
    pub reserved1: SInt32,
    pub keyboardType: UInt32,
    pub reserved2: SInt32,
    pub reserved3: SInt32,
    pub reserved4: SInt32,
    pub reserved5: [SInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventData__bindgen_ty_4 {
    pub reserved: SInt16,
    pub eventNum: SInt16,
    pub trackingNum: SInt32,
    pub userData: SInt32,
    pub reserved1: SInt32,
    pub reserved2: SInt32,
    pub reserved3: SInt32,
    pub reserved4: SInt32,
    pub reserved5: SInt32,
    pub reserved6: [SInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventData__bindgen_ty_5 {
    pub deltaAxis1: SInt16,
    pub deltaAxis2: SInt16,
    pub deltaAxis3: SInt16,
    pub reserved1: SInt16,
    pub fixedDeltaAxis1: SInt32,
    pub fixedDeltaAxis2: SInt32,
    pub fixedDeltaAxis3: SInt32,
    pub pointDeltaAxis1: SInt32,
    pub pointDeltaAxis2: SInt32,
    pub pointDeltaAxis3: SInt32,
    pub reserved8: [SInt32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NXEventData__bindgen_ty_6 {
    pub __bindgen_anon_1: NXEventData__bindgen_ty_6__bindgen_ty_1,
    pub reserved: SInt16,
    pub subType: SInt16,
    pub misc: NXEventData__bindgen_ty_6__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NXEventData__bindgen_ty_6__bindgen_ty_1 {
    pub F: [f32; 11usize],
    pub L: [SInt32; 11usize],
    pub S: [SInt16; 22usize],
    pub C: [::std::os::raw::c_char; 44usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventData__bindgen_ty_7 {
    pub __bindgen_anon_1: NXEventData__bindgen_ty_7__bindgen_ty_1,
    pub x: SInt32,
    pub y: SInt32,
    pub z: SInt32,
    pub buttons: UInt16,
    pub pressure: UInt16,
    pub tilt: NXEventData__bindgen_ty_7__bindgen_ty_1,
    pub rotation: UInt16,
    pub tangentialPressure: SInt16,
    pub deviceID: UInt16,
    pub vendor1: SInt16,
    pub vendor2: SInt16,
    pub vendor3: SInt16,
    pub reserved: [SInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXEventData__bindgen_ty_7__bindgen_ty_1 {
    pub x: SInt16,
    pub y: SInt16,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct NXEventData__bindgen_ty_8 {
    pub vendorID: UInt16,
    pub tabletID: UInt16,
    pub pointerID: UInt16,
    pub deviceID: UInt16,
    pub systemTabletID: UInt16,
    pub vendorPointerType: UInt16,
    pub pointerSerialNumber: UInt32,
    pub uniqueID: UInt64,
    pub capabilityMask: UInt32,
    pub pointerType: UInt8,
    pub enterProximity: UInt8,
    pub reserved1: SInt16,
    pub reserved2: [SInt32; 4usize],
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _NXEvent {
    pub __bindgen_anon_1: _NXEvent__bindgen_ty_1,
    pub type_: SInt32,
    pub location: _NXEvent__bindgen_ty_1,
    pub time: UInt64,
    pub flags: SInt32,
    pub window: UInt32,
    pub service_id: UInt64,
    pub ext_pid: SInt32,
    pub data: NXEventData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXEvent__bindgen_ty_1 {
    pub x: SInt32,
    pub y: SInt32,
}
pub type NXEvent = _NXEvent;
pub type NXEventPtr = *mut _NXEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXEventExtension {
    pub flags: UInt32,
    pub audit: audit_token_t,
}
pub type NXEventExtension = _NXEventExtension;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NXEventExt {
    pub payload: NXEvent,
    pub extension: NXEventExtension,
}
pub type NXEventExt = _NXEventExt;
pub const IOHIDButtonModes_kIOHIDButtonMode_BothLeftClicks: IOHIDButtonModes = 0;
pub const IOHIDButtonModes_kIOHIDButtonMode_ReverseLeftRightClicks: IOHIDButtonModes = 1;
pub const IOHIDButtonModes_kIOHIDButtonMode_EnableRightClick: IOHIDButtonModes = 2;
pub type IOHIDButtonModes = ::std::os::raw::c_uint;
pub const evsioEVSIOSCSIndices_EVSIOSCS_X: evsioEVSIOSCSIndices = 0;
pub const evsioEVSIOSCSIndices_EVSIOSCS_Y: evsioEVSIOSCSIndices = 1;
pub type evsioEVSIOSCSIndices = ::std::os::raw::c_uint;
pub const evsioEVSIOCCSIndices_EVSIOCCS_X: evsioEVSIOCCSIndices = 0;
pub const evsioEVSIOCCSIndices_EVSIOCCS_Y: evsioEVSIOCCSIndices = 1;
pub type evsioEVSIOCCSIndices = ::std::os::raw::c_uint;
pub const kIOHIDCapsLockState: _bindgen_ty_221 = 1;
pub const kIOHIDNumLockState: _bindgen_ty_221 = 2;
pub const kIOHIDActivityUserIdle: _bindgen_ty_221 = 3;
pub const kIOHIDActivityDisplayOn: _bindgen_ty_221 = 4;
pub type _bindgen_ty_221 = ::std::os::raw::c_uint;
pub const IOHIDReportType_kIOHIDReportTypeInput: IOHIDReportType = 0;
pub const IOHIDReportType_kIOHIDReportTypeOutput: IOHIDReportType = 1;
pub const IOHIDReportType_kIOHIDReportTypeFeature: IOHIDReportType = 2;
pub const IOHIDReportType_kIOHIDReportTypeCount: IOHIDReportType = 3;
pub type IOHIDReportType = ::std::os::raw::c_uint;
pub const IOHIDElementCommitDirection_kIOHIDElementCommitDirectionIn: IOHIDElementCommitDirection =
    0;
pub const IOHIDElementCommitDirection_kIOHIDElementCommitDirectionOut: IOHIDElementCommitDirection =
    1;
pub type IOHIDElementCommitDirection = ::std::os::raw::c_uint;
pub type IOHIDElementCookie = u32;
pub const IOHIDElementType_kIOHIDElementTypeInput_Misc: IOHIDElementType = 1;
pub const IOHIDElementType_kIOHIDElementTypeInput_Button: IOHIDElementType = 2;
pub const IOHIDElementType_kIOHIDElementTypeInput_Axis: IOHIDElementType = 3;
pub const IOHIDElementType_kIOHIDElementTypeInput_ScanCodes: IOHIDElementType = 4;
pub const IOHIDElementType_kIOHIDElementTypeInput_NULL: IOHIDElementType = 5;
pub const IOHIDElementType_kIOHIDElementTypeOutput: IOHIDElementType = 129;
pub const IOHIDElementType_kIOHIDElementTypeFeature: IOHIDElementType = 257;
pub const IOHIDElementType_kIOHIDElementTypeCollection: IOHIDElementType = 513;
pub type IOHIDElementType = ::std::os::raw::c_uint;
pub const kIOHIDElementFlagsConstantMask: _bindgen_ty_222 = 1;
pub const kIOHIDElementFlagsVariableMask: _bindgen_ty_222 = 2;
pub const kIOHIDElementFlagsRelativeMask: _bindgen_ty_222 = 4;
pub const kIOHIDElementFlagsWrapMask: _bindgen_ty_222 = 8;
pub const kIOHIDElementFlagsNonLinearMask: _bindgen_ty_222 = 16;
pub const kIOHIDElementFlagsNoPreferredMask: _bindgen_ty_222 = 32;
pub const kIOHIDElementFlagsNullStateMask: _bindgen_ty_222 = 64;
pub const kIOHIDElementFlagsVolativeMask: _bindgen_ty_222 = 128;
pub const kIOHIDElementFlagsBufferedByteMask: _bindgen_ty_222 = 256;
pub type _bindgen_ty_222 = ::std::os::raw::c_uint;
pub type IOHIDElementFlags = u32;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypePhysical:
    IOHIDElementCollectionType = 0;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypeApplication:
    IOHIDElementCollectionType = 1;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypeLogical:
    IOHIDElementCollectionType = 2;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypeReport: IOHIDElementCollectionType =
    3;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypeNamedArray:
    IOHIDElementCollectionType = 4;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypeUsageSwitch:
    IOHIDElementCollectionType = 5;
pub const IOHIDElementCollectionType_kIOHIDElementCollectionTypeUsageModifier:
    IOHIDElementCollectionType = 6;
pub type IOHIDElementCollectionType = ::std::os::raw::c_uint;
pub const kIOHIDValueScaleTypeCalibrated: _bindgen_ty_223 = 0;
pub const kIOHIDValueScaleTypePhysical: _bindgen_ty_223 = 1;
pub const kIOHIDValueScaleTypeExponent: _bindgen_ty_223 = 2;
pub type _bindgen_ty_223 = ::std::os::raw::c_uint;
pub type IOHIDValueScaleType = u32;
pub const kIOHIDValueOptionsFlagRelativeSimple: _bindgen_ty_224 = 1;
pub const kIOHIDValueOptionsFlagPrevious: _bindgen_ty_224 = 2;
pub const kIOHIDValueOptionsUpdateElementValues: _bindgen_ty_224 = 4;
pub type _bindgen_ty_224 = ::std::os::raw::c_uint;
pub type IOHIDValueOptions = u32;
pub type IOHIDCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        bufferSizeRemaining: u32,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOHIDCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
pub const kIOHIDReportOptionNotInterrupt: _bindgen_ty_225 = 256;
pub const kIOHIDReportOptionVariableSize: _bindgen_ty_225 = 512;
pub type _bindgen_ty_225 = ::std::os::raw::c_uint;
pub const HIDReportCommandType_kIOHIDReportCommandSetReport: HIDReportCommandType = 0;
pub const HIDReportCommandType_kIOHIDReportCommandGetReport: HIDReportCommandType = 1;
pub type HIDReportCommandType = ::std::os::raw::c_uint;
pub const kIOHIDOptionsTypeNone: _bindgen_ty_226 = 0;
pub const kIOHIDOptionsTypeSeizeDevice: _bindgen_ty_226 = 1;
pub const kIOHIDOptionsTypeMaskPrivate: _bindgen_ty_226 = 16711680;
pub type _bindgen_ty_226 = ::std::os::raw::c_uint;
pub type IOHIDOptionsType = u32;
pub const kIOHIDQueueOptionsTypeNone: _bindgen_ty_227 = 0;
pub const kIOHIDQueueOptionsTypeEnqueueAll: _bindgen_ty_227 = 1;
pub type _bindgen_ty_227 = ::std::os::raw::c_uint;
pub type IOHIDQueueOptionsType = u32;
pub const kIOHIDStandardTypeANSI: _bindgen_ty_228 = 0;
pub const kIOHIDStandardTypeISO: _bindgen_ty_228 = 1;
pub const kIOHIDStandardTypeJIS: _bindgen_ty_228 = 2;
pub const kIOHIDStandardTypeUnspecified: _bindgen_ty_228 = 4294967295;
pub type _bindgen_ty_228 = ::std::os::raw::c_uint;
pub type IOHIDStandardType = u32;
pub const kIOHIDKeyboardPhysicalLayoutTypeUnknown: _bindgen_ty_229 = 0;
pub const kIOHIDKeyboardPhysicalLayoutType101: _bindgen_ty_229 = 1;
pub const kIOHIDKeyboardPhysicalLayoutType103: _bindgen_ty_229 = 2;
pub const kIOHIDKeyboardPhysicalLayoutType102: _bindgen_ty_229 = 3;
pub const kIOHIDKeyboardPhysicalLayoutType104: _bindgen_ty_229 = 4;
pub const kIOHIDKeyboardPhysicalLayoutType106: _bindgen_ty_229 = 5;
pub const kIOHIDKeyboardPhysicalLayoutTypeVendor: _bindgen_ty_229 = 6;
pub type _bindgen_ty_229 = ::std::os::raw::c_uint;
pub type IOHIDKeyboardPhysicalLayoutType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDDevice {
    _unused: [u8; 0],
}
pub type IOHIDDeviceRef = *mut __IOHIDDevice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDElement {
    _unused: [u8; 0],
}
pub type IOHIDElementRef = *mut __IOHIDElement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDValue {
    _unused: [u8; 0],
}
pub type IOHIDValueRef = *mut __IOHIDValue;
pub const IOHIDTransactionDirectionType_kIOHIDTransactionDirectionTypeInput:
    IOHIDTransactionDirectionType = 0;
pub const IOHIDTransactionDirectionType_kIOHIDTransactionDirectionTypeOutput:
    IOHIDTransactionDirectionType = 1;
pub type IOHIDTransactionDirectionType = u32;
pub const kIOHIDTransactionOptionDefaultOutputValue: IOOptionBits = 1;
pub type IOHIDCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: IOReturn,
        sender: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOHIDReportCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: IOReturn,
        sender: *mut ::std::os::raw::c_void,
        type_: IOHIDReportType,
        reportID: u32,
        report: *mut u8,
        reportLength: CFIndex,
    ),
>;
pub type IOHIDReportWithTimeStampCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: IOReturn,
        sender: *mut ::std::os::raw::c_void,
        type_: IOHIDReportType,
        reportID: u32,
        report: *mut u8,
        reportLength: CFIndex,
        timeStamp: u64,
    ),
>;
pub type IOHIDValueCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: IOReturn,
        sender: *mut ::std::os::raw::c_void,
        value: IOHIDValueRef,
    ),
>;
pub type IOHIDValueMultipleCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: IOReturn,
        sender: *mut ::std::os::raw::c_void,
        multiple: CFDictionaryRef,
    ),
>;
pub type IOHIDDeviceCallback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        result: IOReturn,
        sender: *mut ::std::os::raw::c_void,
        device: IOHIDDeviceRef,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDQueue {
    _unused: [u8; 0],
}
pub type IOHIDQueueRef = *mut __IOHIDQueue;
extern "C" {
    pub fn IOHIDQueueGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDQueueCreate(
        allocator: CFAllocatorRef,
        device: IOHIDDeviceRef,
        depth: CFIndex,
        options: IOOptionBits,
    ) -> IOHIDQueueRef;
}
extern "C" {
    pub fn IOHIDQueueGetDevice(queue: IOHIDQueueRef) -> IOHIDDeviceRef;
}
extern "C" {
    pub fn IOHIDQueueGetDepth(queue: IOHIDQueueRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDQueueSetDepth(queue: IOHIDQueueRef, depth: CFIndex);
}
extern "C" {
    pub fn IOHIDQueueAddElement(queue: IOHIDQueueRef, element: IOHIDElementRef);
}
extern "C" {
    pub fn IOHIDQueueRemoveElement(queue: IOHIDQueueRef, element: IOHIDElementRef);
}
extern "C" {
    pub fn IOHIDQueueContainsElement(queue: IOHIDQueueRef, element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDQueueStart(queue: IOHIDQueueRef);
}
extern "C" {
    pub fn IOHIDQueueStop(queue: IOHIDQueueRef);
}
extern "C" {
    pub fn IOHIDQueueScheduleWithRunLoop(
        queue: IOHIDQueueRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDQueueUnscheduleFromRunLoop(
        queue: IOHIDQueueRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDQueueSetDispatchQueue(queue: IOHIDQueueRef, dispatchQueue: NSObject);
}
extern "C" {
    pub fn IOHIDQueueSetCancelHandler(queue: IOHIDQueueRef, handler: dispatch_block_t);
}
extern "C" {
    pub fn IOHIDQueueActivate(queue: IOHIDQueueRef);
}
extern "C" {
    pub fn IOHIDQueueCancel(queue: IOHIDQueueRef);
}
extern "C" {
    pub fn IOHIDQueueRegisterValueAvailableCallback(
        queue: IOHIDQueueRef,
        callback: IOHIDCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDQueueCopyNextValue(queue: IOHIDQueueRef) -> IOHIDValueRef;
}
extern "C" {
    pub fn IOHIDQueueCopyNextValueWithTimeout(
        queue: IOHIDQueueRef,
        timeout: CFTimeInterval,
    ) -> IOHIDValueRef;
}
extern "C" {
    pub fn IOHIDDeviceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDDeviceCreate(allocator: CFAllocatorRef, service: io_service_t) -> IOHIDDeviceRef;
}
extern "C" {
    pub fn IOHIDDeviceGetService(device: IOHIDDeviceRef) -> io_service_t;
}
extern "C" {
    pub fn IOHIDDeviceOpen(device: IOHIDDeviceRef, options: IOOptionBits) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceClose(device: IOHIDDeviceRef, options: IOOptionBits) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceConformsTo(device: IOHIDDeviceRef, usagePage: u32, usage: u32) -> Boolean;
}
extern "C" {
    pub fn IOHIDDeviceGetProperty(device: IOHIDDeviceRef, key: CFStringRef) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDDeviceSetProperty(
        device: IOHIDDeviceRef,
        key: CFStringRef,
        property: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn IOHIDDeviceCopyMatchingElements(
        device: IOHIDDeviceRef,
        matching: CFDictionaryRef,
        options: IOOptionBits,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn IOHIDDeviceScheduleWithRunLoop(
        device: IOHIDDeviceRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDDeviceUnscheduleFromRunLoop(
        device: IOHIDDeviceRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDDeviceSetDispatchQueue(device: IOHIDDeviceRef, queue: NSObject);
}
extern "C" {
    pub fn IOHIDDeviceSetCancelHandler(device: IOHIDDeviceRef, handler: dispatch_block_t);
}
extern "C" {
    pub fn IOHIDDeviceActivate(device: IOHIDDeviceRef);
}
extern "C" {
    pub fn IOHIDDeviceCancel(device: IOHIDDeviceRef);
}
extern "C" {
    pub fn IOHIDDeviceRegisterRemovalCallback(
        device: IOHIDDeviceRef,
        callback: IOHIDCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDDeviceRegisterInputValueCallback(
        device: IOHIDDeviceRef,
        callback: IOHIDValueCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDDeviceRegisterInputReportCallback(
        device: IOHIDDeviceRef,
        report: *mut u8,
        reportLength: CFIndex,
        callback: IOHIDReportCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDDeviceRegisterInputReportWithTimeStampCallback(
        device: IOHIDDeviceRef,
        report: *mut u8,
        reportLength: CFIndex,
        callback: IOHIDReportWithTimeStampCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDDeviceSetInputValueMatching(device: IOHIDDeviceRef, matching: CFDictionaryRef);
}
extern "C" {
    pub fn IOHIDDeviceSetInputValueMatchingMultiple(device: IOHIDDeviceRef, multiple: CFArrayRef);
}
extern "C" {
    pub fn IOHIDDeviceSetValue(
        device: IOHIDDeviceRef,
        element: IOHIDElementRef,
        value: IOHIDValueRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceSetValueMultiple(
        device: IOHIDDeviceRef,
        multiple: CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceSetValueWithCallback(
        device: IOHIDDeviceRef,
        element: IOHIDElementRef,
        value: IOHIDValueRef,
        timeout: CFTimeInterval,
        callback: IOHIDValueCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceSetValueMultipleWithCallback(
        device: IOHIDDeviceRef,
        multiple: CFDictionaryRef,
        timeout: CFTimeInterval,
        callback: IOHIDValueMultipleCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceGetValue(
        device: IOHIDDeviceRef,
        element: IOHIDElementRef,
        pValue: *mut IOHIDValueRef,
    ) -> IOReturn;
}
pub const IOHIDDeviceGetValueOptions_kIOHIDDeviceGetValueWithUpdate: IOHIDDeviceGetValueOptions =
    131072;
pub const IOHIDDeviceGetValueOptions_kIOHIDDeviceGetValueWithoutUpdate: IOHIDDeviceGetValueOptions =
    262144;
pub type IOHIDDeviceGetValueOptions = u32;
extern "C" {
    pub fn IOHIDDeviceGetValueWithOptions(
        device: IOHIDDeviceRef,
        element: IOHIDElementRef,
        pValue: *mut IOHIDValueRef,
        options: u32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceCopyValueMultiple(
        device: IOHIDDeviceRef,
        elements: CFArrayRef,
        pMultiple: *mut CFDictionaryRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceGetValueWithCallback(
        device: IOHIDDeviceRef,
        element: IOHIDElementRef,
        pValue: *mut IOHIDValueRef,
        timeout: CFTimeInterval,
        callback: IOHIDValueCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceCopyValueMultipleWithCallback(
        device: IOHIDDeviceRef,
        elements: CFArrayRef,
        pMultiple: *mut CFDictionaryRef,
        timeout: CFTimeInterval,
        callback: IOHIDValueMultipleCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceSetReport(
        device: IOHIDDeviceRef,
        reportType: IOHIDReportType,
        reportID: CFIndex,
        report: *const u8,
        reportLength: CFIndex,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceSetReportWithCallback(
        device: IOHIDDeviceRef,
        reportType: IOHIDReportType,
        reportID: CFIndex,
        report: *const u8,
        reportLength: CFIndex,
        timeout: CFTimeInterval,
        callback: IOHIDReportCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceGetReport(
        device: IOHIDDeviceRef,
        reportType: IOHIDReportType,
        reportID: CFIndex,
        report: *mut u8,
        pReportLength: *mut CFIndex,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDDeviceGetReportWithCallback(
        device: IOHIDDeviceRef,
        reportType: IOHIDReportType,
        reportID: CFIndex,
        report: *mut u8,
        pReportLength: *mut CFIndex,
        timeout: CFTimeInterval,
        callback: IOHIDReportCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDElementGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDElementCreateWithDictionary(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> IOHIDElementRef;
}
extern "C" {
    pub fn IOHIDElementGetDevice(element: IOHIDElementRef) -> IOHIDDeviceRef;
}
extern "C" {
    pub fn IOHIDElementGetParent(element: IOHIDElementRef) -> IOHIDElementRef;
}
extern "C" {
    pub fn IOHIDElementGetChildren(element: IOHIDElementRef) -> CFArrayRef;
}
extern "C" {
    pub fn IOHIDElementAttach(element: IOHIDElementRef, toAttach: IOHIDElementRef);
}
extern "C" {
    pub fn IOHIDElementDetach(element: IOHIDElementRef, toDetach: IOHIDElementRef);
}
extern "C" {
    pub fn IOHIDElementCopyAttached(element: IOHIDElementRef) -> CFArrayRef;
}
extern "C" {
    pub fn IOHIDElementGetCookie(element: IOHIDElementRef) -> IOHIDElementCookie;
}
extern "C" {
    pub fn IOHIDElementGetType(element: IOHIDElementRef) -> IOHIDElementType;
}
extern "C" {
    pub fn IOHIDElementGetCollectionType(element: IOHIDElementRef) -> IOHIDElementCollectionType;
}
extern "C" {
    pub fn IOHIDElementGetUsagePage(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementGetUsage(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementIsVirtual(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementIsRelative(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementIsWrapping(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementIsArray(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementIsNonLinear(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementHasPreferredState(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementHasNullState(element: IOHIDElementRef) -> Boolean;
}
extern "C" {
    pub fn IOHIDElementGetName(element: IOHIDElementRef) -> CFStringRef;
}
extern "C" {
    pub fn IOHIDElementGetReportID(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementGetReportSize(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementGetReportCount(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementGetUnit(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementGetUnitExponent(element: IOHIDElementRef) -> u32;
}
extern "C" {
    pub fn IOHIDElementGetLogicalMin(element: IOHIDElementRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDElementGetLogicalMax(element: IOHIDElementRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDElementGetPhysicalMin(element: IOHIDElementRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDElementGetPhysicalMax(element: IOHIDElementRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDElementGetProperty(element: IOHIDElementRef, key: CFStringRef) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDElementSetProperty(
        element: IOHIDElementRef,
        key: CFStringRef,
        property: CFTypeRef,
    ) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDEventStruct {
    pub type_: IOHIDElementType,
    pub elementCookie: IOHIDElementCookie,
    pub value: i32,
    pub timestamp: AbsoluteTime,
    pub longValueSize: u32,
    pub longValue: *mut ::std::os::raw::c_void,
}
pub type IOHIDCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        result: IOReturn,
        refcon: *mut ::std::os::raw::c_void,
        sender: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOHIDElementCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        result: IOReturn,
        refcon: *mut ::std::os::raw::c_void,
        sender: *mut ::std::os::raw::c_void,
        elementCookie: IOHIDElementCookie,
    ),
>;
pub type IOHIDReportCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        result: IOReturn,
        refcon: *mut ::std::os::raw::c_void,
        sender: *mut ::std::os::raw::c_void,
        bufferSize: u32,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub createAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub createAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub getAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: IOOptionBits) -> IOReturn,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setRemovalCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            removalCallback: IOHIDCallbackFunction,
            removalTarget: *mut ::std::os::raw::c_void,
            removalRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub setElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
            timeoutMS: u32,
            callback: IOHIDElementCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub queryElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
            timeoutMS: u32,
            callback: IOHIDElementCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub startAllQueues:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub stopAllQueues:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub allocQueue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut *mut IOHIDQueueInterface,
    >,
    pub allocOutputTransaction: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
        ) -> *mut *mut IOHIDOutputTransactionInterface,
    >,
    pub setReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: u32,
            timeoutMS: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: *mut u32,
            timeoutMS: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceInterface121 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub createAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub createAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub getAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: IOOptionBits) -> IOReturn,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setRemovalCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            removalCallback: IOHIDCallbackFunction,
            removalTarget: *mut ::std::os::raw::c_void,
            removalRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub setElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
            timeoutMS: u32,
            callback: IOHIDElementCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub queryElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
            timeoutMS: u32,
            callback: IOHIDElementCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub startAllQueues:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub stopAllQueues:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub allocQueue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut *mut IOHIDQueueInterface,
    >,
    pub allocOutputTransaction: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
        ) -> *mut *mut IOHIDOutputTransactionInterface,
    >,
    pub setReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: u32,
            timeoutMS: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: *mut u32,
            timeoutMS: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceInterface122 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub createAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub createAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub getAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: IOOptionBits) -> IOReturn,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setRemovalCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            removalCallback: IOHIDCallbackFunction,
            removalTarget: *mut ::std::os::raw::c_void,
            removalRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub setElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
            timeoutMS: u32,
            callback: IOHIDElementCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub queryElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
            timeoutMS: u32,
            callback: IOHIDElementCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub startAllQueues:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub stopAllQueues:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub allocQueue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut *mut IOHIDQueueInterface,
    >,
    pub allocOutputTransaction: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
        ) -> *mut *mut IOHIDOutputTransactionInterface,
    >,
    pub setReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: u32,
            timeoutMS: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: *mut u32,
            timeoutMS: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub copyMatchingElements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            matchingDict: CFDictionaryRef,
            elements: *mut CFArrayRef,
        ) -> IOReturn,
    >,
    pub setInterruptReportHandlerCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportBuffer: *mut ::std::os::raw::c_void,
            reportBufferSize: u32,
            callback: IOHIDReportCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDQueueInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub createAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub createAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub getAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            flags: u32,
            depth: u32,
        ) -> IOReturn,
    >,
    pub dispose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub addElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            flags: u32,
        ) -> IOReturn,
    >,
    pub removeElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
        ) -> IOReturn,
    >,
    pub hasElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
        ) -> Boolean,
    >,
    pub start:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub stop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub getNextEvent: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            event: *mut IOHIDEventStruct,
            maxTime: AbsoluteTime,
            timeoutMS: u32,
        ) -> IOReturn,
    >,
    pub setEventCallout: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            callback: IOHIDCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub getEventCallout: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            outCallback: *mut IOHIDCallbackFunction,
            outCallbackTarget: *mut *mut ::std::os::raw::c_void,
            outCallbackRefcon: *mut *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDOutputTransactionInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub createAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub createAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub getAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub create:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub dispose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub addElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
        ) -> IOReturn,
    >,
    pub removeElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
        ) -> IOReturn,
    >,
    pub hasElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
        ) -> Boolean,
    >,
    pub setElementDefault: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub getElementDefault: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            outValueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub setElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            valueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub getElementValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            elementCookie: IOHIDElementCookie,
            outValueEvent: *mut IOHIDEventStruct,
        ) -> IOReturn,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            timeoutMS: u32,
            callback: IOHIDCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub clear:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
}
pub const IOHIDManagerOptions_kIOHIDManagerOptionNone: IOHIDManagerOptions = 0;
pub const IOHIDManagerOptions_kIOHIDManagerOptionUsePersistentProperties: IOHIDManagerOptions = 1;
pub const IOHIDManagerOptions_kIOHIDManagerOptionDoNotLoadProperties: IOHIDManagerOptions = 2;
pub const IOHIDManagerOptions_kIOHIDManagerOptionDoNotSaveProperties: IOHIDManagerOptions = 4;
pub const IOHIDManagerOptions_kIOHIDManagerOptionIndependentDevices: IOHIDManagerOptions = 8;
pub type IOHIDManagerOptions = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDManager {
    _unused: [u8; 0],
}
pub type IOHIDManagerRef = *mut __IOHIDManager;
extern "C" {
    pub fn IOHIDManagerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDManagerCreate(allocator: CFAllocatorRef, options: IOOptionBits) -> IOHIDManagerRef;
}
extern "C" {
    pub fn IOHIDManagerOpen(manager: IOHIDManagerRef, options: IOOptionBits) -> IOReturn;
}
extern "C" {
    pub fn IOHIDManagerClose(manager: IOHIDManagerRef, options: IOOptionBits) -> IOReturn;
}
extern "C" {
    pub fn IOHIDManagerGetProperty(manager: IOHIDManagerRef, key: CFStringRef) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDManagerSetProperty(
        manager: IOHIDManagerRef,
        key: CFStringRef,
        value: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn IOHIDManagerScheduleWithRunLoop(
        manager: IOHIDManagerRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDManagerUnscheduleFromRunLoop(
        manager: IOHIDManagerRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDManagerSetDispatchQueue(manager: IOHIDManagerRef, queue: NSObject);
}
extern "C" {
    pub fn IOHIDManagerSetCancelHandler(manager: IOHIDManagerRef, handler: dispatch_block_t);
}
extern "C" {
    pub fn IOHIDManagerActivate(manager: IOHIDManagerRef);
}
extern "C" {
    pub fn IOHIDManagerCancel(manager: IOHIDManagerRef);
}
extern "C" {
    pub fn IOHIDManagerSetDeviceMatching(manager: IOHIDManagerRef, matching: CFDictionaryRef);
}
extern "C" {
    pub fn IOHIDManagerSetDeviceMatchingMultiple(manager: IOHIDManagerRef, multiple: CFArrayRef);
}
extern "C" {
    pub fn IOHIDManagerCopyDevices(manager: IOHIDManagerRef) -> CFSetRef;
}
extern "C" {
    pub fn IOHIDManagerRegisterDeviceMatchingCallback(
        manager: IOHIDManagerRef,
        callback: IOHIDDeviceCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDManagerRegisterDeviceRemovalCallback(
        manager: IOHIDManagerRef,
        callback: IOHIDDeviceCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDManagerRegisterInputReportCallback(
        manager: IOHIDManagerRef,
        callback: IOHIDReportCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDManagerRegisterInputReportWithTimeStampCallback(
        manager: IOHIDManagerRef,
        callback: IOHIDReportWithTimeStampCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDManagerRegisterInputValueCallback(
        manager: IOHIDManagerRef,
        callback: IOHIDValueCallback,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn IOHIDManagerSetInputValueMatching(manager: IOHIDManagerRef, matching: CFDictionaryRef);
}
extern "C" {
    pub fn IOHIDManagerSetInputValueMatchingMultiple(
        manager: IOHIDManagerRef,
        multiple: CFArrayRef,
    );
}
extern "C" {
    pub fn IOHIDManagerSaveToPropertyDomain(
        manager: IOHIDManagerRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
        options: IOOptionBits,
    );
}
pub const kHIDPage_Undefined: _bindgen_ty_230 = 0;
pub const kHIDPage_GenericDesktop: _bindgen_ty_230 = 1;
pub const kHIDPage_Simulation: _bindgen_ty_230 = 2;
pub const kHIDPage_VR: _bindgen_ty_230 = 3;
pub const kHIDPage_Sport: _bindgen_ty_230 = 4;
pub const kHIDPage_Game: _bindgen_ty_230 = 5;
pub const kHIDPage_GenericDeviceControls: _bindgen_ty_230 = 6;
pub const kHIDPage_KeyboardOrKeypad: _bindgen_ty_230 = 7;
pub const kHIDPage_LEDs: _bindgen_ty_230 = 8;
pub const kHIDPage_Button: _bindgen_ty_230 = 9;
pub const kHIDPage_Ordinal: _bindgen_ty_230 = 10;
pub const kHIDPage_Telephony: _bindgen_ty_230 = 11;
pub const kHIDPage_Consumer: _bindgen_ty_230 = 12;
pub const kHIDPage_Digitizer: _bindgen_ty_230 = 13;
pub const kHIDPage_Haptics: _bindgen_ty_230 = 14;
pub const kHIDPage_PID: _bindgen_ty_230 = 15;
pub const kHIDPage_Unicode: _bindgen_ty_230 = 16;
pub const kHIDPage_AlphanumericDisplay: _bindgen_ty_230 = 20;
pub const kHIDPage_Sensor: _bindgen_ty_230 = 32;
pub const kHIDPage_Monitor: _bindgen_ty_230 = 128;
pub const kHIDPage_MonitorEnumerated: _bindgen_ty_230 = 129;
pub const kHIDPage_MonitorVirtual: _bindgen_ty_230 = 130;
pub const kHIDPage_MonitorReserved: _bindgen_ty_230 = 131;
pub const kHIDPage_PowerDevice: _bindgen_ty_230 = 132;
pub const kHIDPage_BatterySystem: _bindgen_ty_230 = 133;
pub const kHIDPage_PowerReserved: _bindgen_ty_230 = 134;
pub const kHIDPage_PowerReserved2: _bindgen_ty_230 = 135;
pub const kHIDPage_BarCodeScanner: _bindgen_ty_230 = 140;
pub const kHIDPage_WeighingDevice: _bindgen_ty_230 = 141;
pub const kHIDPage_Scale: _bindgen_ty_230 = 141;
pub const kHIDPage_MagneticStripeReader: _bindgen_ty_230 = 142;
pub const kHIDPage_CameraControl: _bindgen_ty_230 = 144;
pub const kHIDPage_Arcade: _bindgen_ty_230 = 145;
pub const kHIDPage_FIDO: _bindgen_ty_230 = 61904;
pub const kHIDPage_VendorDefinedStart: _bindgen_ty_230 = 65280;
pub type _bindgen_ty_230 = ::std::os::raw::c_uint;
pub const kHIDUsage_Undefined: _bindgen_ty_231 = 0;
pub type _bindgen_ty_231 = ::std::os::raw::c_uint;
pub const kHIDUsage_GD_Pointer: _bindgen_ty_232 = 1;
pub const kHIDUsage_GD_Mouse: _bindgen_ty_232 = 2;
pub const kHIDUsage_GD_Joystick: _bindgen_ty_232 = 4;
pub const kHIDUsage_GD_GamePad: _bindgen_ty_232 = 5;
pub const kHIDUsage_GD_Keyboard: _bindgen_ty_232 = 6;
pub const kHIDUsage_GD_Keypad: _bindgen_ty_232 = 7;
pub const kHIDUsage_GD_MultiAxisController: _bindgen_ty_232 = 8;
pub const kHIDUsage_GD_TabletPCSystemControls: _bindgen_ty_232 = 9;
pub const kHIDUsage_GD_AssistiveControl: _bindgen_ty_232 = 10;
pub const kHIDUsage_GD_SystemMultiAxisController: _bindgen_ty_232 = 14;
pub const kHIDUsage_GD_SpatialController: _bindgen_ty_232 = 15;
pub const kHIDUsage_GD_AssistiveControlCompatible: _bindgen_ty_232 = 16;
pub const kHIDUsage_GD_X: _bindgen_ty_232 = 48;
pub const kHIDUsage_GD_Y: _bindgen_ty_232 = 49;
pub const kHIDUsage_GD_Z: _bindgen_ty_232 = 50;
pub const kHIDUsage_GD_Rx: _bindgen_ty_232 = 51;
pub const kHIDUsage_GD_Ry: _bindgen_ty_232 = 52;
pub const kHIDUsage_GD_Rz: _bindgen_ty_232 = 53;
pub const kHIDUsage_GD_Slider: _bindgen_ty_232 = 54;
pub const kHIDUsage_GD_Dial: _bindgen_ty_232 = 55;
pub const kHIDUsage_GD_Wheel: _bindgen_ty_232 = 56;
pub const kHIDUsage_GD_Hatswitch: _bindgen_ty_232 = 57;
pub const kHIDUsage_GD_CountedBuffer: _bindgen_ty_232 = 58;
pub const kHIDUsage_GD_ByteCount: _bindgen_ty_232 = 59;
pub const kHIDUsage_GD_MotionWakeup: _bindgen_ty_232 = 60;
pub const kHIDUsage_GD_Start: _bindgen_ty_232 = 61;
pub const kHIDUsage_GD_Select: _bindgen_ty_232 = 62;
pub const kHIDUsage_GD_Vx: _bindgen_ty_232 = 64;
pub const kHIDUsage_GD_Vy: _bindgen_ty_232 = 65;
pub const kHIDUsage_GD_Vz: _bindgen_ty_232 = 66;
pub const kHIDUsage_GD_Vbrx: _bindgen_ty_232 = 67;
pub const kHIDUsage_GD_Vbry: _bindgen_ty_232 = 68;
pub const kHIDUsage_GD_Vbrz: _bindgen_ty_232 = 69;
pub const kHIDUsage_GD_Vno: _bindgen_ty_232 = 70;
pub const kHIDUsage_GD_FeatureNotification: _bindgen_ty_232 = 71;
pub const kHIDUsage_GD_ResolutionMultiplier: _bindgen_ty_232 = 72;
pub const kHIDUsage_GD_Qx: _bindgen_ty_232 = 73;
pub const kHIDUsage_GD_Qy: _bindgen_ty_232 = 74;
pub const kHIDUsage_GD_Qz: _bindgen_ty_232 = 75;
pub const kHIDUsage_GD_Qw: _bindgen_ty_232 = 76;
pub const kHIDUsage_GD_SystemControl: _bindgen_ty_232 = 128;
pub const kHIDUsage_GD_SystemPowerDown: _bindgen_ty_232 = 129;
pub const kHIDUsage_GD_SystemSleep: _bindgen_ty_232 = 130;
pub const kHIDUsage_GD_SystemWakeUp: _bindgen_ty_232 = 131;
pub const kHIDUsage_GD_SystemContextMenu: _bindgen_ty_232 = 132;
pub const kHIDUsage_GD_SystemMainMenu: _bindgen_ty_232 = 133;
pub const kHIDUsage_GD_SystemAppMenu: _bindgen_ty_232 = 134;
pub const kHIDUsage_GD_SystemMenuHelp: _bindgen_ty_232 = 135;
pub const kHIDUsage_GD_SystemMenuExit: _bindgen_ty_232 = 136;
pub const kHIDUsage_GD_SystemMenuSelect: _bindgen_ty_232 = 137;
pub const kHIDUsage_GD_SystemMenu: _bindgen_ty_232 = 137;
pub const kHIDUsage_GD_SystemMenuRight: _bindgen_ty_232 = 138;
pub const kHIDUsage_GD_SystemMenuLeft: _bindgen_ty_232 = 139;
pub const kHIDUsage_GD_SystemMenuUp: _bindgen_ty_232 = 140;
pub const kHIDUsage_GD_SystemMenuDown: _bindgen_ty_232 = 141;
pub const kHIDUsage_GD_DPadUp: _bindgen_ty_232 = 144;
pub const kHIDUsage_GD_DPadDown: _bindgen_ty_232 = 145;
pub const kHIDUsage_GD_DPadRight: _bindgen_ty_232 = 146;
pub const kHIDUsage_GD_DPadLeft: _bindgen_ty_232 = 147;
pub const kHIDUsage_GD_IndexTrigger: _bindgen_ty_232 = 148;
pub const kHIDUsage_GD_PalmTrigger: _bindgen_ty_232 = 149;
pub const kHIDUsage_GD_Thumbstick: _bindgen_ty_232 = 150;
pub const kHIDUsage_GD_SFShift: _bindgen_ty_232 = 151;
pub const kHIDUsage_GD_SFShiftLock: _bindgen_ty_232 = 152;
pub const kHIDUsage_GD_SFShiftLockIndicator: _bindgen_ty_232 = 153;
pub const kHIDUsage_GD_SystemDismissNotification: _bindgen_ty_232 = 154;
pub const kHIDUsage_GD_DoNotDisturb: _bindgen_ty_232 = 155;
pub const kHIDUsage_GD_Reserved: _bindgen_ty_232 = 65535;
pub type _bindgen_ty_232 = ::std::os::raw::c_uint;
pub const kHIDUsage_Sim_FlightSimulationDevice: _bindgen_ty_233 = 1;
pub const kHIDUsage_Sim_AutomobileSimulationDevice: _bindgen_ty_233 = 2;
pub const kHIDUsage_Sim_TankSimulationDevice: _bindgen_ty_233 = 3;
pub const kHIDUsage_Sim_SpaceshipSimulationDevice: _bindgen_ty_233 = 4;
pub const kHIDUsage_Sim_SubmarineSimulationDevice: _bindgen_ty_233 = 5;
pub const kHIDUsage_Sim_SailingSimulationDevice: _bindgen_ty_233 = 6;
pub const kHIDUsage_Sim_MotorcycleSimulationDevice: _bindgen_ty_233 = 7;
pub const kHIDUsage_Sim_SportsSimulationDevice: _bindgen_ty_233 = 8;
pub const kHIDUsage_Sim_AirplaneSimulationDevice: _bindgen_ty_233 = 9;
pub const kHIDUsage_Sim_HelicopterSimulationDevice: _bindgen_ty_233 = 10;
pub const kHIDUsage_Sim_MagicCarpetSimulationDevice: _bindgen_ty_233 = 11;
pub const kHIDUsage_Sim_BicycleSimulationDevice: _bindgen_ty_233 = 12;
pub const kHIDUsage_Sim_FlightControlStick: _bindgen_ty_233 = 32;
pub const kHIDUsage_Sim_FlightStick: _bindgen_ty_233 = 33;
pub const kHIDUsage_Sim_CyclicControl: _bindgen_ty_233 = 34;
pub const kHIDUsage_Sim_CyclicTrim: _bindgen_ty_233 = 35;
pub const kHIDUsage_Sim_FlightYoke: _bindgen_ty_233 = 36;
pub const kHIDUsage_Sim_TrackControl: _bindgen_ty_233 = 37;
pub const kHIDUsage_Sim_Aileron: _bindgen_ty_233 = 176;
pub const kHIDUsage_Sim_AileronTrim: _bindgen_ty_233 = 177;
pub const kHIDUsage_Sim_AntiTorqueControl: _bindgen_ty_233 = 178;
pub const kHIDUsage_Sim_AutopilotEnable: _bindgen_ty_233 = 179;
pub const kHIDUsage_Sim_ChaffRelease: _bindgen_ty_233 = 180;
pub const kHIDUsage_Sim_CollectiveControl: _bindgen_ty_233 = 181;
pub const kHIDUsage_Sim_DiveBrake: _bindgen_ty_233 = 182;
pub const kHIDUsage_Sim_ElectronicCountermeasures: _bindgen_ty_233 = 183;
pub const kHIDUsage_Sim_Elevator: _bindgen_ty_233 = 184;
pub const kHIDUsage_Sim_ElevatorTrim: _bindgen_ty_233 = 185;
pub const kHIDUsage_Sim_Rudder: _bindgen_ty_233 = 186;
pub const kHIDUsage_Sim_Throttle: _bindgen_ty_233 = 187;
pub const kHIDUsage_Sim_FlightCommunications: _bindgen_ty_233 = 188;
pub const kHIDUsage_Sim_FlareRelease: _bindgen_ty_233 = 189;
pub const kHIDUsage_Sim_LandingGear: _bindgen_ty_233 = 190;
pub const kHIDUsage_Sim_ToeBrake: _bindgen_ty_233 = 191;
pub const kHIDUsage_Sim_Trigger: _bindgen_ty_233 = 192;
pub const kHIDUsage_Sim_WeaponsArm: _bindgen_ty_233 = 193;
pub const kHIDUsage_Sim_Weapons: _bindgen_ty_233 = 194;
pub const kHIDUsage_Sim_WingFlaps: _bindgen_ty_233 = 195;
pub const kHIDUsage_Sim_Accelerator: _bindgen_ty_233 = 196;
pub const kHIDUsage_Sim_Brake: _bindgen_ty_233 = 197;
pub const kHIDUsage_Sim_Clutch: _bindgen_ty_233 = 198;
pub const kHIDUsage_Sim_Shifter: _bindgen_ty_233 = 199;
pub const kHIDUsage_Sim_Steering: _bindgen_ty_233 = 200;
pub const kHIDUsage_Sim_TurretDirection: _bindgen_ty_233 = 201;
pub const kHIDUsage_Sim_BarrelElevation: _bindgen_ty_233 = 202;
pub const kHIDUsage_Sim_DivePlane: _bindgen_ty_233 = 203;
pub const kHIDUsage_Sim_Ballast: _bindgen_ty_233 = 204;
pub const kHIDUsage_Sim_BicycleCrank: _bindgen_ty_233 = 205;
pub const kHIDUsage_Sim_HandleBars: _bindgen_ty_233 = 206;
pub const kHIDUsage_Sim_FrontBrake: _bindgen_ty_233 = 207;
pub const kHIDUsage_Sim_RearBrake: _bindgen_ty_233 = 208;
pub const kHIDUsage_Sim_Reserved: _bindgen_ty_233 = 65535;
pub type _bindgen_ty_233 = ::std::os::raw::c_uint;
pub const kHIDUsage_VR_Belt: _bindgen_ty_234 = 1;
pub const kHIDUsage_VR_BodySuit: _bindgen_ty_234 = 2;
pub const kHIDUsage_VR_Flexor: _bindgen_ty_234 = 3;
pub const kHIDUsage_VR_Glove: _bindgen_ty_234 = 4;
pub const kHIDUsage_VR_HeadTracker: _bindgen_ty_234 = 5;
pub const kHIDUsage_VR_HeadMountedDisplay: _bindgen_ty_234 = 6;
pub const kHIDUsage_VR_HandTracker: _bindgen_ty_234 = 7;
pub const kHIDUsage_VR_Oculometer: _bindgen_ty_234 = 8;
pub const kHIDUsage_VR_Vest: _bindgen_ty_234 = 9;
pub const kHIDUsage_VR_AnimatronicDevice: _bindgen_ty_234 = 10;
pub const kHIDUsage_VR_StereoEnable: _bindgen_ty_234 = 32;
pub const kHIDUsage_VR_DisplayEnable: _bindgen_ty_234 = 33;
pub const kHIDUsage_VR_Reserved: _bindgen_ty_234 = 65535;
pub type _bindgen_ty_234 = ::std::os::raw::c_uint;
pub const kHIDUsage_Sprt_BaseballBat: _bindgen_ty_235 = 1;
pub const kHIDUsage_Sprt_GolfClub: _bindgen_ty_235 = 2;
pub const kHIDUsage_Sprt_RowingMachine: _bindgen_ty_235 = 3;
pub const kHIDUsage_Sprt_Treadmill: _bindgen_ty_235 = 4;
pub const kHIDUsage_Sprt_Oar: _bindgen_ty_235 = 48;
pub const kHIDUsage_Sprt_Slope: _bindgen_ty_235 = 49;
pub const kHIDUsage_Sprt_Rate: _bindgen_ty_235 = 50;
pub const kHIDUsage_Sprt_StickSpeed: _bindgen_ty_235 = 51;
pub const kHIDUsage_Sprt_StickFaceAngle: _bindgen_ty_235 = 52;
pub const kHIDUsage_Sprt_StickHeelOrToe: _bindgen_ty_235 = 53;
pub const kHIDUsage_Sprt_StickFollowThrough: _bindgen_ty_235 = 54;
pub const kHIDUsage_Sprt_StickTempo: _bindgen_ty_235 = 55;
pub const kHIDUsage_Sprt_StickType: _bindgen_ty_235 = 56;
pub const kHIDUsage_Sprt_StickHeight: _bindgen_ty_235 = 57;
pub const kHIDUsage_Sprt_Putter: _bindgen_ty_235 = 80;
pub const kHIDUsage_Sprt_1Iron: _bindgen_ty_235 = 81;
pub const kHIDUsage_Sprt_2Iron: _bindgen_ty_235 = 82;
pub const kHIDUsage_Sprt_3Iron: _bindgen_ty_235 = 83;
pub const kHIDUsage_Sprt_4Iron: _bindgen_ty_235 = 84;
pub const kHIDUsage_Sprt_5Iron: _bindgen_ty_235 = 85;
pub const kHIDUsage_Sprt_6Iron: _bindgen_ty_235 = 86;
pub const kHIDUsage_Sprt_7Iron: _bindgen_ty_235 = 87;
pub const kHIDUsage_Sprt_8Iron: _bindgen_ty_235 = 88;
pub const kHIDUsage_Sprt_9Iron: _bindgen_ty_235 = 89;
pub const kHIDUsage_Sprt_10Iron: _bindgen_ty_235 = 90;
pub const kHIDUsage_Sprt_11Iron: _bindgen_ty_235 = 91;
pub const kHIDUsage_Sprt_SandWedge: _bindgen_ty_235 = 92;
pub const kHIDUsage_Sprt_LoftWedge: _bindgen_ty_235 = 93;
pub const kHIDUsage_Sprt_PowerWedge: _bindgen_ty_235 = 94;
pub const kHIDUsage_Sprt_1Wood: _bindgen_ty_235 = 95;
pub const kHIDUsage_Sprt_3Wood: _bindgen_ty_235 = 96;
pub const kHIDUsage_Sprt_5Wood: _bindgen_ty_235 = 97;
pub const kHIDUsage_Sprt_7Wood: _bindgen_ty_235 = 98;
pub const kHIDUsage_Sprt_9Wood: _bindgen_ty_235 = 99;
pub const kHIDUsage_Sprt_Reserved: _bindgen_ty_235 = 65535;
pub type _bindgen_ty_235 = ::std::os::raw::c_uint;
pub const kHIDUsage_Game_3DGameController: _bindgen_ty_236 = 1;
pub const kHIDUsage_Game_PinballDevice: _bindgen_ty_236 = 2;
pub const kHIDUsage_Game_GunDevice: _bindgen_ty_236 = 3;
pub const kHIDUsage_Game_PointofView: _bindgen_ty_236 = 32;
pub const kHIDUsage_Game_TurnRightOrLeft: _bindgen_ty_236 = 33;
pub const kHIDUsage_Game_PitchUpOrDown: _bindgen_ty_236 = 34;
pub const kHIDUsage_Game_RollRightOrLeft: _bindgen_ty_236 = 35;
pub const kHIDUsage_Game_MoveRightOrLeft: _bindgen_ty_236 = 36;
pub const kHIDUsage_Game_MoveForwardOrBackward: _bindgen_ty_236 = 37;
pub const kHIDUsage_Game_MoveUpOrDown: _bindgen_ty_236 = 38;
pub const kHIDUsage_Game_LeanRightOrLeft: _bindgen_ty_236 = 39;
pub const kHIDUsage_Game_LeanForwardOrBackward: _bindgen_ty_236 = 40;
pub const kHIDUsage_Game_HeightOfPOV: _bindgen_ty_236 = 41;
pub const kHIDUsage_Game_Flipper: _bindgen_ty_236 = 42;
pub const kHIDUsage_Game_SecondaryFlipper: _bindgen_ty_236 = 43;
pub const kHIDUsage_Game_Bump: _bindgen_ty_236 = 44;
pub const kHIDUsage_Game_NewGame: _bindgen_ty_236 = 45;
pub const kHIDUsage_Game_ShootBall: _bindgen_ty_236 = 46;
pub const kHIDUsage_Game_Player: _bindgen_ty_236 = 47;
pub const kHIDUsage_Game_GunBolt: _bindgen_ty_236 = 48;
pub const kHIDUsage_Game_GunClip: _bindgen_ty_236 = 49;
pub const kHIDUsage_Game_Gun: _bindgen_ty_236 = 50;
pub const kHIDUsage_Game_GunSingleShot: _bindgen_ty_236 = 51;
pub const kHIDUsage_Game_GunBurst: _bindgen_ty_236 = 52;
pub const kHIDUsage_Game_GunAutomatic: _bindgen_ty_236 = 53;
pub const kHIDUsage_Game_GunSafety: _bindgen_ty_236 = 54;
pub const kHIDUsage_Game_GamepadFireOrJump: _bindgen_ty_236 = 55;
pub const kHIDUsage_Game_GamepadTrigger: _bindgen_ty_236 = 57;
pub const kHIDUsage_Game_GamepadFormFitting_Compatibility: _bindgen_ty_236 = 57;
pub const kHIDUsage_Game_GamepadFormFitting: _bindgen_ty_236 = 58;
pub const kHIDUsage_Game_Reserved: _bindgen_ty_236 = 65535;
pub type _bindgen_ty_236 = ::std::os::raw::c_uint;
pub const kHIDUsage_GenDevControls_BackgroundControls: _bindgen_ty_237 = 1;
pub type _bindgen_ty_237 = ::std::os::raw::c_uint;
pub const kHIDUsage_KeyboardErrorRollOver: _bindgen_ty_238 = 1;
pub const kHIDUsage_KeyboardPOSTFail: _bindgen_ty_238 = 2;
pub const kHIDUsage_KeyboardErrorUndefined: _bindgen_ty_238 = 3;
pub const kHIDUsage_KeyboardA: _bindgen_ty_238 = 4;
pub const kHIDUsage_KeyboardB: _bindgen_ty_238 = 5;
pub const kHIDUsage_KeyboardC: _bindgen_ty_238 = 6;
pub const kHIDUsage_KeyboardD: _bindgen_ty_238 = 7;
pub const kHIDUsage_KeyboardE: _bindgen_ty_238 = 8;
pub const kHIDUsage_KeyboardF: _bindgen_ty_238 = 9;
pub const kHIDUsage_KeyboardG: _bindgen_ty_238 = 10;
pub const kHIDUsage_KeyboardH: _bindgen_ty_238 = 11;
pub const kHIDUsage_KeyboardI: _bindgen_ty_238 = 12;
pub const kHIDUsage_KeyboardJ: _bindgen_ty_238 = 13;
pub const kHIDUsage_KeyboardK: _bindgen_ty_238 = 14;
pub const kHIDUsage_KeyboardL: _bindgen_ty_238 = 15;
pub const kHIDUsage_KeyboardM: _bindgen_ty_238 = 16;
pub const kHIDUsage_KeyboardN: _bindgen_ty_238 = 17;
pub const kHIDUsage_KeyboardO: _bindgen_ty_238 = 18;
pub const kHIDUsage_KeyboardP: _bindgen_ty_238 = 19;
pub const kHIDUsage_KeyboardQ: _bindgen_ty_238 = 20;
pub const kHIDUsage_KeyboardR: _bindgen_ty_238 = 21;
pub const kHIDUsage_KeyboardS: _bindgen_ty_238 = 22;
pub const kHIDUsage_KeyboardT: _bindgen_ty_238 = 23;
pub const kHIDUsage_KeyboardU: _bindgen_ty_238 = 24;
pub const kHIDUsage_KeyboardV: _bindgen_ty_238 = 25;
pub const kHIDUsage_KeyboardW: _bindgen_ty_238 = 26;
pub const kHIDUsage_KeyboardX: _bindgen_ty_238 = 27;
pub const kHIDUsage_KeyboardY: _bindgen_ty_238 = 28;
pub const kHIDUsage_KeyboardZ: _bindgen_ty_238 = 29;
pub const kHIDUsage_Keyboard1: _bindgen_ty_238 = 30;
pub const kHIDUsage_Keyboard2: _bindgen_ty_238 = 31;
pub const kHIDUsage_Keyboard3: _bindgen_ty_238 = 32;
pub const kHIDUsage_Keyboard4: _bindgen_ty_238 = 33;
pub const kHIDUsage_Keyboard5: _bindgen_ty_238 = 34;
pub const kHIDUsage_Keyboard6: _bindgen_ty_238 = 35;
pub const kHIDUsage_Keyboard7: _bindgen_ty_238 = 36;
pub const kHIDUsage_Keyboard8: _bindgen_ty_238 = 37;
pub const kHIDUsage_Keyboard9: _bindgen_ty_238 = 38;
pub const kHIDUsage_Keyboard0: _bindgen_ty_238 = 39;
pub const kHIDUsage_KeyboardReturnOrEnter: _bindgen_ty_238 = 40;
pub const kHIDUsage_KeyboardEscape: _bindgen_ty_238 = 41;
pub const kHIDUsage_KeyboardDeleteOrBackspace: _bindgen_ty_238 = 42;
pub const kHIDUsage_KeyboardTab: _bindgen_ty_238 = 43;
pub const kHIDUsage_KeyboardSpacebar: _bindgen_ty_238 = 44;
pub const kHIDUsage_KeyboardHyphen: _bindgen_ty_238 = 45;
pub const kHIDUsage_KeyboardEqualSign: _bindgen_ty_238 = 46;
pub const kHIDUsage_KeyboardOpenBracket: _bindgen_ty_238 = 47;
pub const kHIDUsage_KeyboardCloseBracket: _bindgen_ty_238 = 48;
pub const kHIDUsage_KeyboardBackslash: _bindgen_ty_238 = 49;
pub const kHIDUsage_KeyboardNonUSPound: _bindgen_ty_238 = 50;
pub const kHIDUsage_KeyboardSemicolon: _bindgen_ty_238 = 51;
pub const kHIDUsage_KeyboardQuote: _bindgen_ty_238 = 52;
pub const kHIDUsage_KeyboardGraveAccentAndTilde: _bindgen_ty_238 = 53;
pub const kHIDUsage_KeyboardComma: _bindgen_ty_238 = 54;
pub const kHIDUsage_KeyboardPeriod: _bindgen_ty_238 = 55;
pub const kHIDUsage_KeyboardSlash: _bindgen_ty_238 = 56;
pub const kHIDUsage_KeyboardCapsLock: _bindgen_ty_238 = 57;
pub const kHIDUsage_KeyboardF1: _bindgen_ty_238 = 58;
pub const kHIDUsage_KeyboardF2: _bindgen_ty_238 = 59;
pub const kHIDUsage_KeyboardF3: _bindgen_ty_238 = 60;
pub const kHIDUsage_KeyboardF4: _bindgen_ty_238 = 61;
pub const kHIDUsage_KeyboardF5: _bindgen_ty_238 = 62;
pub const kHIDUsage_KeyboardF6: _bindgen_ty_238 = 63;
pub const kHIDUsage_KeyboardF7: _bindgen_ty_238 = 64;
pub const kHIDUsage_KeyboardF8: _bindgen_ty_238 = 65;
pub const kHIDUsage_KeyboardF9: _bindgen_ty_238 = 66;
pub const kHIDUsage_KeyboardF10: _bindgen_ty_238 = 67;
pub const kHIDUsage_KeyboardF11: _bindgen_ty_238 = 68;
pub const kHIDUsage_KeyboardF12: _bindgen_ty_238 = 69;
pub const kHIDUsage_KeyboardPrintScreen: _bindgen_ty_238 = 70;
pub const kHIDUsage_KeyboardScrollLock: _bindgen_ty_238 = 71;
pub const kHIDUsage_KeyboardPause: _bindgen_ty_238 = 72;
pub const kHIDUsage_KeyboardInsert: _bindgen_ty_238 = 73;
pub const kHIDUsage_KeyboardHome: _bindgen_ty_238 = 74;
pub const kHIDUsage_KeyboardPageUp: _bindgen_ty_238 = 75;
pub const kHIDUsage_KeyboardDeleteForward: _bindgen_ty_238 = 76;
pub const kHIDUsage_KeyboardEnd: _bindgen_ty_238 = 77;
pub const kHIDUsage_KeyboardPageDown: _bindgen_ty_238 = 78;
pub const kHIDUsage_KeyboardRightArrow: _bindgen_ty_238 = 79;
pub const kHIDUsage_KeyboardLeftArrow: _bindgen_ty_238 = 80;
pub const kHIDUsage_KeyboardDownArrow: _bindgen_ty_238 = 81;
pub const kHIDUsage_KeyboardUpArrow: _bindgen_ty_238 = 82;
pub const kHIDUsage_KeypadNumLock: _bindgen_ty_238 = 83;
pub const kHIDUsage_KeypadSlash: _bindgen_ty_238 = 84;
pub const kHIDUsage_KeypadAsterisk: _bindgen_ty_238 = 85;
pub const kHIDUsage_KeypadHyphen: _bindgen_ty_238 = 86;
pub const kHIDUsage_KeypadPlus: _bindgen_ty_238 = 87;
pub const kHIDUsage_KeypadEnter: _bindgen_ty_238 = 88;
pub const kHIDUsage_Keypad1: _bindgen_ty_238 = 89;
pub const kHIDUsage_Keypad2: _bindgen_ty_238 = 90;
pub const kHIDUsage_Keypad3: _bindgen_ty_238 = 91;
pub const kHIDUsage_Keypad4: _bindgen_ty_238 = 92;
pub const kHIDUsage_Keypad5: _bindgen_ty_238 = 93;
pub const kHIDUsage_Keypad6: _bindgen_ty_238 = 94;
pub const kHIDUsage_Keypad7: _bindgen_ty_238 = 95;
pub const kHIDUsage_Keypad8: _bindgen_ty_238 = 96;
pub const kHIDUsage_Keypad9: _bindgen_ty_238 = 97;
pub const kHIDUsage_Keypad0: _bindgen_ty_238 = 98;
pub const kHIDUsage_KeypadPeriod: _bindgen_ty_238 = 99;
pub const kHIDUsage_KeyboardNonUSBackslash: _bindgen_ty_238 = 100;
pub const kHIDUsage_KeyboardApplication: _bindgen_ty_238 = 101;
pub const kHIDUsage_KeyboardPower: _bindgen_ty_238 = 102;
pub const kHIDUsage_KeypadEqualSign: _bindgen_ty_238 = 103;
pub const kHIDUsage_KeyboardF13: _bindgen_ty_238 = 104;
pub const kHIDUsage_KeyboardF14: _bindgen_ty_238 = 105;
pub const kHIDUsage_KeyboardF15: _bindgen_ty_238 = 106;
pub const kHIDUsage_KeyboardF16: _bindgen_ty_238 = 107;
pub const kHIDUsage_KeyboardF17: _bindgen_ty_238 = 108;
pub const kHIDUsage_KeyboardF18: _bindgen_ty_238 = 109;
pub const kHIDUsage_KeyboardF19: _bindgen_ty_238 = 110;
pub const kHIDUsage_KeyboardF20: _bindgen_ty_238 = 111;
pub const kHIDUsage_KeyboardF21: _bindgen_ty_238 = 112;
pub const kHIDUsage_KeyboardF22: _bindgen_ty_238 = 113;
pub const kHIDUsage_KeyboardF23: _bindgen_ty_238 = 114;
pub const kHIDUsage_KeyboardF24: _bindgen_ty_238 = 115;
pub const kHIDUsage_KeyboardExecute: _bindgen_ty_238 = 116;
pub const kHIDUsage_KeyboardHelp: _bindgen_ty_238 = 117;
pub const kHIDUsage_KeyboardMenu: _bindgen_ty_238 = 118;
pub const kHIDUsage_KeyboardSelect: _bindgen_ty_238 = 119;
pub const kHIDUsage_KeyboardStop: _bindgen_ty_238 = 120;
pub const kHIDUsage_KeyboardAgain: _bindgen_ty_238 = 121;
pub const kHIDUsage_KeyboardUndo: _bindgen_ty_238 = 122;
pub const kHIDUsage_KeyboardCut: _bindgen_ty_238 = 123;
pub const kHIDUsage_KeyboardCopy: _bindgen_ty_238 = 124;
pub const kHIDUsage_KeyboardPaste: _bindgen_ty_238 = 125;
pub const kHIDUsage_KeyboardFind: _bindgen_ty_238 = 126;
pub const kHIDUsage_KeyboardMute: _bindgen_ty_238 = 127;
pub const kHIDUsage_KeyboardVolumeUp: _bindgen_ty_238 = 128;
pub const kHIDUsage_KeyboardVolumeDown: _bindgen_ty_238 = 129;
pub const kHIDUsage_KeyboardLockingCapsLock: _bindgen_ty_238 = 130;
pub const kHIDUsage_KeyboardLockingNumLock: _bindgen_ty_238 = 131;
pub const kHIDUsage_KeyboardLockingScrollLock: _bindgen_ty_238 = 132;
pub const kHIDUsage_KeypadComma: _bindgen_ty_238 = 133;
pub const kHIDUsage_KeypadEqualSignAS400: _bindgen_ty_238 = 134;
pub const kHIDUsage_KeyboardInternational1: _bindgen_ty_238 = 135;
pub const kHIDUsage_KeyboardInternational2: _bindgen_ty_238 = 136;
pub const kHIDUsage_KeyboardInternational3: _bindgen_ty_238 = 137;
pub const kHIDUsage_KeyboardInternational4: _bindgen_ty_238 = 138;
pub const kHIDUsage_KeyboardInternational5: _bindgen_ty_238 = 139;
pub const kHIDUsage_KeyboardInternational6: _bindgen_ty_238 = 140;
pub const kHIDUsage_KeyboardInternational7: _bindgen_ty_238 = 141;
pub const kHIDUsage_KeyboardInternational8: _bindgen_ty_238 = 142;
pub const kHIDUsage_KeyboardInternational9: _bindgen_ty_238 = 143;
pub const kHIDUsage_KeyboardLANG1: _bindgen_ty_238 = 144;
pub const kHIDUsage_KeyboardLANG2: _bindgen_ty_238 = 145;
pub const kHIDUsage_KeyboardLANG3: _bindgen_ty_238 = 146;
pub const kHIDUsage_KeyboardLANG4: _bindgen_ty_238 = 147;
pub const kHIDUsage_KeyboardLANG5: _bindgen_ty_238 = 148;
pub const kHIDUsage_KeyboardLANG6: _bindgen_ty_238 = 149;
pub const kHIDUsage_KeyboardLANG7: _bindgen_ty_238 = 150;
pub const kHIDUsage_KeyboardLANG8: _bindgen_ty_238 = 151;
pub const kHIDUsage_KeyboardLANG9: _bindgen_ty_238 = 152;
pub const kHIDUsage_KeyboardAlternateErase: _bindgen_ty_238 = 153;
pub const kHIDUsage_KeyboardSysReqOrAttention: _bindgen_ty_238 = 154;
pub const kHIDUsage_KeyboardCancel: _bindgen_ty_238 = 155;
pub const kHIDUsage_KeyboardClear: _bindgen_ty_238 = 156;
pub const kHIDUsage_KeyboardPrior: _bindgen_ty_238 = 157;
pub const kHIDUsage_KeyboardReturn: _bindgen_ty_238 = 158;
pub const kHIDUsage_KeyboardSeparator: _bindgen_ty_238 = 159;
pub const kHIDUsage_KeyboardOut: _bindgen_ty_238 = 160;
pub const kHIDUsage_KeyboardOper: _bindgen_ty_238 = 161;
pub const kHIDUsage_KeyboardClearOrAgain: _bindgen_ty_238 = 162;
pub const kHIDUsage_KeyboardCrSelOrProps: _bindgen_ty_238 = 163;
pub const kHIDUsage_KeyboardExSel: _bindgen_ty_238 = 164;
pub const kHIDUsage_KeyboardLeftControl: _bindgen_ty_238 = 224;
pub const kHIDUsage_KeyboardLeftShift: _bindgen_ty_238 = 225;
pub const kHIDUsage_KeyboardLeftAlt: _bindgen_ty_238 = 226;
pub const kHIDUsage_KeyboardLeftGUI: _bindgen_ty_238 = 227;
pub const kHIDUsage_KeyboardRightControl: _bindgen_ty_238 = 228;
pub const kHIDUsage_KeyboardRightShift: _bindgen_ty_238 = 229;
pub const kHIDUsage_KeyboardRightAlt: _bindgen_ty_238 = 230;
pub const kHIDUsage_KeyboardRightGUI: _bindgen_ty_238 = 231;
pub const kHIDUsage_Keyboard_Reserved: _bindgen_ty_238 = 65535;
pub type _bindgen_ty_238 = ::std::os::raw::c_uint;
pub const kHIDUsage_LED_NumLock: _bindgen_ty_239 = 1;
pub const kHIDUsage_LED_CapsLock: _bindgen_ty_239 = 2;
pub const kHIDUsage_LED_ScrollLock: _bindgen_ty_239 = 3;
pub const kHIDUsage_LED_Compose: _bindgen_ty_239 = 4;
pub const kHIDUsage_LED_Kana: _bindgen_ty_239 = 5;
pub const kHIDUsage_LED_Power: _bindgen_ty_239 = 6;
pub const kHIDUsage_LED_Shift: _bindgen_ty_239 = 7;
pub const kHIDUsage_LED_DoNotDisturb: _bindgen_ty_239 = 8;
pub const kHIDUsage_LED_Mute: _bindgen_ty_239 = 9;
pub const kHIDUsage_LED_ToneEnable: _bindgen_ty_239 = 10;
pub const kHIDUsage_LED_HighCutFilter: _bindgen_ty_239 = 11;
pub const kHIDUsage_LED_LowCutFilter: _bindgen_ty_239 = 12;
pub const kHIDUsage_LED_EqualizerEnable: _bindgen_ty_239 = 13;
pub const kHIDUsage_LED_SoundFieldOn: _bindgen_ty_239 = 14;
pub const kHIDUsage_LED_SurroundOn: _bindgen_ty_239 = 15;
pub const kHIDUsage_LED_Repeat: _bindgen_ty_239 = 16;
pub const kHIDUsage_LED_Stereo: _bindgen_ty_239 = 17;
pub const kHIDUsage_LED_SamplingRateDetect: _bindgen_ty_239 = 18;
pub const kHIDUsage_LED_Spinning: _bindgen_ty_239 = 19;
pub const kHIDUsage_LED_CAV: _bindgen_ty_239 = 20;
pub const kHIDUsage_LED_CLV: _bindgen_ty_239 = 21;
pub const kHIDUsage_LED_RecordingFormatDetect: _bindgen_ty_239 = 22;
pub const kHIDUsage_LED_OffHook: _bindgen_ty_239 = 23;
pub const kHIDUsage_LED_Ring: _bindgen_ty_239 = 24;
pub const kHIDUsage_LED_MessageWaiting: _bindgen_ty_239 = 25;
pub const kHIDUsage_LED_DataMode: _bindgen_ty_239 = 26;
pub const kHIDUsage_LED_BatteryOperation: _bindgen_ty_239 = 27;
pub const kHIDUsage_LED_BatteryOK: _bindgen_ty_239 = 28;
pub const kHIDUsage_LED_BatteryLow: _bindgen_ty_239 = 29;
pub const kHIDUsage_LED_Speaker: _bindgen_ty_239 = 30;
pub const kHIDUsage_LED_HeadSet: _bindgen_ty_239 = 31;
pub const kHIDUsage_LED_Hold: _bindgen_ty_239 = 32;
pub const kHIDUsage_LED_Microphone: _bindgen_ty_239 = 33;
pub const kHIDUsage_LED_Coverage: _bindgen_ty_239 = 34;
pub const kHIDUsage_LED_NightMode: _bindgen_ty_239 = 35;
pub const kHIDUsage_LED_SendCalls: _bindgen_ty_239 = 36;
pub const kHIDUsage_LED_CallPickup: _bindgen_ty_239 = 37;
pub const kHIDUsage_LED_Conference: _bindgen_ty_239 = 38;
pub const kHIDUsage_LED_StandBy: _bindgen_ty_239 = 39;
pub const kHIDUsage_LED_CameraOn: _bindgen_ty_239 = 40;
pub const kHIDUsage_LED_CameraOff: _bindgen_ty_239 = 41;
pub const kHIDUsage_LED_OnLine: _bindgen_ty_239 = 42;
pub const kHIDUsage_LED_OffLine: _bindgen_ty_239 = 43;
pub const kHIDUsage_LED_Busy: _bindgen_ty_239 = 44;
pub const kHIDUsage_LED_Ready: _bindgen_ty_239 = 45;
pub const kHIDUsage_LED_PaperOut: _bindgen_ty_239 = 46;
pub const kHIDUsage_LED_PaperJam: _bindgen_ty_239 = 47;
pub const kHIDUsage_LED_Remote: _bindgen_ty_239 = 48;
pub const kHIDUsage_LED_Forward: _bindgen_ty_239 = 49;
pub const kHIDUsage_LED_Reverse: _bindgen_ty_239 = 50;
pub const kHIDUsage_LED_Stop: _bindgen_ty_239 = 51;
pub const kHIDUsage_LED_Rewind: _bindgen_ty_239 = 52;
pub const kHIDUsage_LED_FastForward: _bindgen_ty_239 = 53;
pub const kHIDUsage_LED_Play: _bindgen_ty_239 = 54;
pub const kHIDUsage_LED_Pause: _bindgen_ty_239 = 55;
pub const kHIDUsage_LED_Record: _bindgen_ty_239 = 56;
pub const kHIDUsage_LED_Error: _bindgen_ty_239 = 57;
pub const kHIDUsage_LED_Usage: _bindgen_ty_239 = 58;
pub const kHIDUsage_LED_UsageInUseIndicator: _bindgen_ty_239 = 59;
pub const kHIDUsage_LED_UsageMultiModeIndicator: _bindgen_ty_239 = 60;
pub const kHIDUsage_LED_IndicatorOn: _bindgen_ty_239 = 61;
pub const kHIDUsage_LED_IndicatorFlash: _bindgen_ty_239 = 62;
pub const kHIDUsage_LED_IndicatorSlowBlink: _bindgen_ty_239 = 63;
pub const kHIDUsage_LED_IndicatorFastBlink: _bindgen_ty_239 = 64;
pub const kHIDUsage_LED_IndicatorOff: _bindgen_ty_239 = 65;
pub const kHIDUsage_LED_FlashOnTime: _bindgen_ty_239 = 66;
pub const kHIDUsage_LED_SlowBlinkOnTime: _bindgen_ty_239 = 67;
pub const kHIDUsage_LED_SlowBlinkOffTime: _bindgen_ty_239 = 68;
pub const kHIDUsage_LED_FastBlinkOnTime: _bindgen_ty_239 = 69;
pub const kHIDUsage_LED_FastBlinkOffTime: _bindgen_ty_239 = 70;
pub const kHIDUsage_LED_UsageIndicatorColor: _bindgen_ty_239 = 71;
pub const kHIDUsage_LED_IndicatorRed: _bindgen_ty_239 = 72;
pub const kHIDUsage_LED_IndicatorGreen: _bindgen_ty_239 = 73;
pub const kHIDUsage_LED_IndicatorAmber: _bindgen_ty_239 = 74;
pub const kHIDUsage_LED_GenericIndicator: _bindgen_ty_239 = 75;
pub const kHIDUsage_LED_SystemSuspend: _bindgen_ty_239 = 76;
pub const kHIDUsage_LED_ExternalPowerConnected: _bindgen_ty_239 = 77;
pub const kHIDUsage_LED_PlayerIndicator: _bindgen_ty_239 = 78;
pub const kHIDUsage_LED_Player1: _bindgen_ty_239 = 79;
pub const kHIDUsage_LED_Player2: _bindgen_ty_239 = 80;
pub const kHIDUsage_LED_Player3: _bindgen_ty_239 = 81;
pub const kHIDUsage_LED_Player4: _bindgen_ty_239 = 82;
pub const kHIDUsage_LED_Player5: _bindgen_ty_239 = 83;
pub const kHIDUsage_LED_Player6: _bindgen_ty_239 = 84;
pub const kHIDUsage_LED_Player7: _bindgen_ty_239 = 85;
pub const kHIDUsage_LED_Player8: _bindgen_ty_239 = 86;
pub const kHIDUsage_LED_Reserved: _bindgen_ty_239 = 65535;
pub type _bindgen_ty_239 = ::std::os::raw::c_uint;
pub const kHIDUsage_Button_1: _bindgen_ty_240 = 1;
pub const kHIDUsage_Button_2: _bindgen_ty_240 = 2;
pub const kHIDUsage_Button_3: _bindgen_ty_240 = 3;
pub const kHIDUsage_Button_4: _bindgen_ty_240 = 4;
pub const kHIDUsage_Button_5: _bindgen_ty_240 = 5;
pub const kHIDUsage_Button_6: _bindgen_ty_240 = 6;
pub const kHIDUsage_Button_7: _bindgen_ty_240 = 7;
pub const kHIDUsage_Button_8: _bindgen_ty_240 = 8;
pub const kHIDUsage_Button_9: _bindgen_ty_240 = 9;
pub const kHIDUsage_Button_10: _bindgen_ty_240 = 10;
pub const kHIDUsage_Button_11: _bindgen_ty_240 = 11;
pub const kHIDUsage_Button_12: _bindgen_ty_240 = 12;
pub const kHIDUsage_Button_13: _bindgen_ty_240 = 13;
pub const kHIDUsage_Button_14: _bindgen_ty_240 = 14;
pub const kHIDUsage_Button_15: _bindgen_ty_240 = 15;
pub const kHIDUsage_Button_16: _bindgen_ty_240 = 16;
pub const kHIDUsage_Button_17: _bindgen_ty_240 = 17;
pub const kHIDUsage_Button_18: _bindgen_ty_240 = 18;
pub const kHIDUsage_Button_19: _bindgen_ty_240 = 19;
pub const kHIDUsage_Button_20: _bindgen_ty_240 = 20;
pub const kHIDUsage_Button_21: _bindgen_ty_240 = 21;
pub const kHIDUsage_Button_22: _bindgen_ty_240 = 22;
pub const kHIDUsage_Button_23: _bindgen_ty_240 = 23;
pub const kHIDUsage_Button_24: _bindgen_ty_240 = 24;
pub const kHIDUsage_Button_25: _bindgen_ty_240 = 25;
pub const kHIDUsage_Button_26: _bindgen_ty_240 = 26;
pub const kHIDUsage_Button_27: _bindgen_ty_240 = 27;
pub const kHIDUsage_Button_28: _bindgen_ty_240 = 28;
pub const kHIDUsage_Button_29: _bindgen_ty_240 = 29;
pub const kHIDUsage_Button_30: _bindgen_ty_240 = 30;
pub const kHIDUsage_Button_31: _bindgen_ty_240 = 31;
pub const kHIDUsage_Button_32: _bindgen_ty_240 = 32;
pub const kHIDUsage_Button_33: _bindgen_ty_240 = 33;
pub const kHIDUsage_Button_34: _bindgen_ty_240 = 34;
pub const kHIDUsage_Button_35: _bindgen_ty_240 = 35;
pub const kHIDUsage_Button_36: _bindgen_ty_240 = 36;
pub const kHIDUsage_Button_37: _bindgen_ty_240 = 37;
pub const kHIDUsage_Button_38: _bindgen_ty_240 = 38;
pub const kHIDUsage_Button_39: _bindgen_ty_240 = 39;
pub const kHIDUsage_Button_40: _bindgen_ty_240 = 40;
pub const kHIDUsage_Button_41: _bindgen_ty_240 = 41;
pub const kHIDUsage_Button_42: _bindgen_ty_240 = 42;
pub const kHIDUsage_Button_43: _bindgen_ty_240 = 43;
pub const kHIDUsage_Button_44: _bindgen_ty_240 = 44;
pub const kHIDUsage_Button_45: _bindgen_ty_240 = 45;
pub const kHIDUsage_Button_46: _bindgen_ty_240 = 46;
pub const kHIDUsage_Button_47: _bindgen_ty_240 = 47;
pub const kHIDUsage_Button_48: _bindgen_ty_240 = 48;
pub const kHIDUsage_Button_49: _bindgen_ty_240 = 49;
pub const kHIDUsage_Button_50: _bindgen_ty_240 = 50;
pub const kHIDUsage_Button_51: _bindgen_ty_240 = 51;
pub const kHIDUsage_Button_52: _bindgen_ty_240 = 52;
pub const kHIDUsage_Button_53: _bindgen_ty_240 = 53;
pub const kHIDUsage_Button_54: _bindgen_ty_240 = 54;
pub const kHIDUsage_Button_55: _bindgen_ty_240 = 55;
pub const kHIDUsage_Button_56: _bindgen_ty_240 = 56;
pub const kHIDUsage_Button_57: _bindgen_ty_240 = 57;
pub const kHIDUsage_Button_58: _bindgen_ty_240 = 58;
pub const kHIDUsage_Button_59: _bindgen_ty_240 = 59;
pub const kHIDUsage_Button_60: _bindgen_ty_240 = 60;
pub const kHIDUsage_Button_61: _bindgen_ty_240 = 61;
pub const kHIDUsage_Button_62: _bindgen_ty_240 = 62;
pub const kHIDUsage_Button_63: _bindgen_ty_240 = 63;
pub const kHIDUsage_Button_64: _bindgen_ty_240 = 64;
pub const kHIDUsage_Button_65: _bindgen_ty_240 = 65;
pub const kHIDUsage_Button_66: _bindgen_ty_240 = 66;
pub const kHIDUsage_Button_67: _bindgen_ty_240 = 67;
pub const kHIDUsage_Button_68: _bindgen_ty_240 = 68;
pub const kHIDUsage_Button_69: _bindgen_ty_240 = 69;
pub const kHIDUsage_Button_70: _bindgen_ty_240 = 70;
pub const kHIDUsage_Button_71: _bindgen_ty_240 = 71;
pub const kHIDUsage_Button_72: _bindgen_ty_240 = 72;
pub const kHIDUsage_Button_73: _bindgen_ty_240 = 73;
pub const kHIDUsage_Button_74: _bindgen_ty_240 = 74;
pub const kHIDUsage_Button_75: _bindgen_ty_240 = 75;
pub const kHIDUsage_Button_76: _bindgen_ty_240 = 76;
pub const kHIDUsage_Button_77: _bindgen_ty_240 = 77;
pub const kHIDUsage_Button_78: _bindgen_ty_240 = 78;
pub const kHIDUsage_Button_79: _bindgen_ty_240 = 79;
pub const kHIDUsage_Button_80: _bindgen_ty_240 = 80;
pub const kHIDUsage_Button_81: _bindgen_ty_240 = 81;
pub const kHIDUsage_Button_82: _bindgen_ty_240 = 82;
pub const kHIDUsage_Button_83: _bindgen_ty_240 = 83;
pub const kHIDUsage_Button_84: _bindgen_ty_240 = 84;
pub const kHIDUsage_Button_85: _bindgen_ty_240 = 85;
pub const kHIDUsage_Button_86: _bindgen_ty_240 = 86;
pub const kHIDUsage_Button_87: _bindgen_ty_240 = 87;
pub const kHIDUsage_Button_88: _bindgen_ty_240 = 88;
pub const kHIDUsage_Button_89: _bindgen_ty_240 = 89;
pub const kHIDUsage_Button_90: _bindgen_ty_240 = 90;
pub const kHIDUsage_Button_91: _bindgen_ty_240 = 91;
pub const kHIDUsage_Button_92: _bindgen_ty_240 = 92;
pub const kHIDUsage_Button_93: _bindgen_ty_240 = 93;
pub const kHIDUsage_Button_94: _bindgen_ty_240 = 94;
pub const kHIDUsage_Button_95: _bindgen_ty_240 = 95;
pub const kHIDUsage_Button_96: _bindgen_ty_240 = 96;
pub const kHIDUsage_Button_97: _bindgen_ty_240 = 97;
pub const kHIDUsage_Button_98: _bindgen_ty_240 = 98;
pub const kHIDUsage_Button_99: _bindgen_ty_240 = 99;
pub const kHIDUsage_Button_100: _bindgen_ty_240 = 100;
pub const kHIDUsage_Button_101: _bindgen_ty_240 = 101;
pub const kHIDUsage_Button_102: _bindgen_ty_240 = 102;
pub const kHIDUsage_Button_103: _bindgen_ty_240 = 103;
pub const kHIDUsage_Button_104: _bindgen_ty_240 = 104;
pub const kHIDUsage_Button_105: _bindgen_ty_240 = 105;
pub const kHIDUsage_Button_106: _bindgen_ty_240 = 106;
pub const kHIDUsage_Button_107: _bindgen_ty_240 = 107;
pub const kHIDUsage_Button_108: _bindgen_ty_240 = 108;
pub const kHIDUsage_Button_109: _bindgen_ty_240 = 109;
pub const kHIDUsage_Button_110: _bindgen_ty_240 = 110;
pub const kHIDUsage_Button_111: _bindgen_ty_240 = 111;
pub const kHIDUsage_Button_112: _bindgen_ty_240 = 112;
pub const kHIDUsage_Button_113: _bindgen_ty_240 = 113;
pub const kHIDUsage_Button_114: _bindgen_ty_240 = 114;
pub const kHIDUsage_Button_115: _bindgen_ty_240 = 115;
pub const kHIDUsage_Button_116: _bindgen_ty_240 = 116;
pub const kHIDUsage_Button_117: _bindgen_ty_240 = 117;
pub const kHIDUsage_Button_118: _bindgen_ty_240 = 118;
pub const kHIDUsage_Button_119: _bindgen_ty_240 = 119;
pub const kHIDUsage_Button_120: _bindgen_ty_240 = 120;
pub const kHIDUsage_Button_121: _bindgen_ty_240 = 121;
pub const kHIDUsage_Button_122: _bindgen_ty_240 = 122;
pub const kHIDUsage_Button_123: _bindgen_ty_240 = 123;
pub const kHIDUsage_Button_124: _bindgen_ty_240 = 124;
pub const kHIDUsage_Button_125: _bindgen_ty_240 = 125;
pub const kHIDUsage_Button_126: _bindgen_ty_240 = 126;
pub const kHIDUsage_Button_127: _bindgen_ty_240 = 127;
pub const kHIDUsage_Button_128: _bindgen_ty_240 = 128;
pub const kHIDUsage_Button_129: _bindgen_ty_240 = 129;
pub const kHIDUsage_Button_130: _bindgen_ty_240 = 130;
pub const kHIDUsage_Button_131: _bindgen_ty_240 = 131;
pub const kHIDUsage_Button_132: _bindgen_ty_240 = 132;
pub const kHIDUsage_Button_133: _bindgen_ty_240 = 133;
pub const kHIDUsage_Button_134: _bindgen_ty_240 = 134;
pub const kHIDUsage_Button_135: _bindgen_ty_240 = 135;
pub const kHIDUsage_Button_136: _bindgen_ty_240 = 136;
pub const kHIDUsage_Button_137: _bindgen_ty_240 = 137;
pub const kHIDUsage_Button_138: _bindgen_ty_240 = 138;
pub const kHIDUsage_Button_139: _bindgen_ty_240 = 139;
pub const kHIDUsage_Button_140: _bindgen_ty_240 = 140;
pub const kHIDUsage_Button_141: _bindgen_ty_240 = 141;
pub const kHIDUsage_Button_142: _bindgen_ty_240 = 142;
pub const kHIDUsage_Button_143: _bindgen_ty_240 = 143;
pub const kHIDUsage_Button_144: _bindgen_ty_240 = 144;
pub const kHIDUsage_Button_145: _bindgen_ty_240 = 145;
pub const kHIDUsage_Button_146: _bindgen_ty_240 = 146;
pub const kHIDUsage_Button_147: _bindgen_ty_240 = 147;
pub const kHIDUsage_Button_148: _bindgen_ty_240 = 148;
pub const kHIDUsage_Button_149: _bindgen_ty_240 = 149;
pub const kHIDUsage_Button_150: _bindgen_ty_240 = 150;
pub const kHIDUsage_Button_151: _bindgen_ty_240 = 151;
pub const kHIDUsage_Button_152: _bindgen_ty_240 = 152;
pub const kHIDUsage_Button_153: _bindgen_ty_240 = 153;
pub const kHIDUsage_Button_154: _bindgen_ty_240 = 154;
pub const kHIDUsage_Button_155: _bindgen_ty_240 = 155;
pub const kHIDUsage_Button_156: _bindgen_ty_240 = 156;
pub const kHIDUsage_Button_157: _bindgen_ty_240 = 157;
pub const kHIDUsage_Button_158: _bindgen_ty_240 = 158;
pub const kHIDUsage_Button_159: _bindgen_ty_240 = 159;
pub const kHIDUsage_Button_160: _bindgen_ty_240 = 160;
pub const kHIDUsage_Button_161: _bindgen_ty_240 = 161;
pub const kHIDUsage_Button_162: _bindgen_ty_240 = 162;
pub const kHIDUsage_Button_163: _bindgen_ty_240 = 163;
pub const kHIDUsage_Button_164: _bindgen_ty_240 = 164;
pub const kHIDUsage_Button_165: _bindgen_ty_240 = 165;
pub const kHIDUsage_Button_166: _bindgen_ty_240 = 166;
pub const kHIDUsage_Button_167: _bindgen_ty_240 = 167;
pub const kHIDUsage_Button_168: _bindgen_ty_240 = 168;
pub const kHIDUsage_Button_169: _bindgen_ty_240 = 169;
pub const kHIDUsage_Button_170: _bindgen_ty_240 = 170;
pub const kHIDUsage_Button_171: _bindgen_ty_240 = 171;
pub const kHIDUsage_Button_172: _bindgen_ty_240 = 172;
pub const kHIDUsage_Button_173: _bindgen_ty_240 = 173;
pub const kHIDUsage_Button_174: _bindgen_ty_240 = 174;
pub const kHIDUsage_Button_175: _bindgen_ty_240 = 175;
pub const kHIDUsage_Button_176: _bindgen_ty_240 = 176;
pub const kHIDUsage_Button_177: _bindgen_ty_240 = 177;
pub const kHIDUsage_Button_178: _bindgen_ty_240 = 178;
pub const kHIDUsage_Button_179: _bindgen_ty_240 = 179;
pub const kHIDUsage_Button_180: _bindgen_ty_240 = 180;
pub const kHIDUsage_Button_181: _bindgen_ty_240 = 181;
pub const kHIDUsage_Button_182: _bindgen_ty_240 = 182;
pub const kHIDUsage_Button_183: _bindgen_ty_240 = 183;
pub const kHIDUsage_Button_184: _bindgen_ty_240 = 184;
pub const kHIDUsage_Button_185: _bindgen_ty_240 = 185;
pub const kHIDUsage_Button_186: _bindgen_ty_240 = 186;
pub const kHIDUsage_Button_187: _bindgen_ty_240 = 187;
pub const kHIDUsage_Button_188: _bindgen_ty_240 = 188;
pub const kHIDUsage_Button_189: _bindgen_ty_240 = 189;
pub const kHIDUsage_Button_190: _bindgen_ty_240 = 190;
pub const kHIDUsage_Button_191: _bindgen_ty_240 = 191;
pub const kHIDUsage_Button_192: _bindgen_ty_240 = 192;
pub const kHIDUsage_Button_193: _bindgen_ty_240 = 193;
pub const kHIDUsage_Button_194: _bindgen_ty_240 = 194;
pub const kHIDUsage_Button_195: _bindgen_ty_240 = 195;
pub const kHIDUsage_Button_196: _bindgen_ty_240 = 196;
pub const kHIDUsage_Button_197: _bindgen_ty_240 = 197;
pub const kHIDUsage_Button_198: _bindgen_ty_240 = 198;
pub const kHIDUsage_Button_199: _bindgen_ty_240 = 199;
pub const kHIDUsage_Button_200: _bindgen_ty_240 = 200;
pub const kHIDUsage_Button_201: _bindgen_ty_240 = 201;
pub const kHIDUsage_Button_202: _bindgen_ty_240 = 202;
pub const kHIDUsage_Button_203: _bindgen_ty_240 = 203;
pub const kHIDUsage_Button_204: _bindgen_ty_240 = 204;
pub const kHIDUsage_Button_205: _bindgen_ty_240 = 205;
pub const kHIDUsage_Button_206: _bindgen_ty_240 = 206;
pub const kHIDUsage_Button_207: _bindgen_ty_240 = 207;
pub const kHIDUsage_Button_208: _bindgen_ty_240 = 208;
pub const kHIDUsage_Button_209: _bindgen_ty_240 = 209;
pub const kHIDUsage_Button_210: _bindgen_ty_240 = 210;
pub const kHIDUsage_Button_211: _bindgen_ty_240 = 211;
pub const kHIDUsage_Button_212: _bindgen_ty_240 = 212;
pub const kHIDUsage_Button_213: _bindgen_ty_240 = 213;
pub const kHIDUsage_Button_214: _bindgen_ty_240 = 214;
pub const kHIDUsage_Button_215: _bindgen_ty_240 = 215;
pub const kHIDUsage_Button_216: _bindgen_ty_240 = 216;
pub const kHIDUsage_Button_217: _bindgen_ty_240 = 217;
pub const kHIDUsage_Button_218: _bindgen_ty_240 = 218;
pub const kHIDUsage_Button_219: _bindgen_ty_240 = 219;
pub const kHIDUsage_Button_220: _bindgen_ty_240 = 220;
pub const kHIDUsage_Button_221: _bindgen_ty_240 = 221;
pub const kHIDUsage_Button_222: _bindgen_ty_240 = 222;
pub const kHIDUsage_Button_223: _bindgen_ty_240 = 223;
pub const kHIDUsage_Button_224: _bindgen_ty_240 = 224;
pub const kHIDUsage_Button_225: _bindgen_ty_240 = 225;
pub const kHIDUsage_Button_226: _bindgen_ty_240 = 226;
pub const kHIDUsage_Button_227: _bindgen_ty_240 = 227;
pub const kHIDUsage_Button_228: _bindgen_ty_240 = 228;
pub const kHIDUsage_Button_229: _bindgen_ty_240 = 229;
pub const kHIDUsage_Button_230: _bindgen_ty_240 = 230;
pub const kHIDUsage_Button_231: _bindgen_ty_240 = 231;
pub const kHIDUsage_Button_232: _bindgen_ty_240 = 232;
pub const kHIDUsage_Button_233: _bindgen_ty_240 = 233;
pub const kHIDUsage_Button_234: _bindgen_ty_240 = 234;
pub const kHIDUsage_Button_235: _bindgen_ty_240 = 235;
pub const kHIDUsage_Button_236: _bindgen_ty_240 = 236;
pub const kHIDUsage_Button_237: _bindgen_ty_240 = 237;
pub const kHIDUsage_Button_238: _bindgen_ty_240 = 238;
pub const kHIDUsage_Button_239: _bindgen_ty_240 = 239;
pub const kHIDUsage_Button_240: _bindgen_ty_240 = 240;
pub const kHIDUsage_Button_241: _bindgen_ty_240 = 241;
pub const kHIDUsage_Button_242: _bindgen_ty_240 = 242;
pub const kHIDUsage_Button_243: _bindgen_ty_240 = 243;
pub const kHIDUsage_Button_244: _bindgen_ty_240 = 244;
pub const kHIDUsage_Button_245: _bindgen_ty_240 = 245;
pub const kHIDUsage_Button_246: _bindgen_ty_240 = 246;
pub const kHIDUsage_Button_247: _bindgen_ty_240 = 247;
pub const kHIDUsage_Button_248: _bindgen_ty_240 = 248;
pub const kHIDUsage_Button_249: _bindgen_ty_240 = 249;
pub const kHIDUsage_Button_250: _bindgen_ty_240 = 250;
pub const kHIDUsage_Button_251: _bindgen_ty_240 = 251;
pub const kHIDUsage_Button_252: _bindgen_ty_240 = 252;
pub const kHIDUsage_Button_253: _bindgen_ty_240 = 253;
pub const kHIDUsage_Button_254: _bindgen_ty_240 = 254;
pub const kHIDUsage_Button_255: _bindgen_ty_240 = 255;
pub const kHIDUsage_Button_65535: _bindgen_ty_240 = 65535;
pub type _bindgen_ty_240 = ::std::os::raw::c_uint;
pub const kHIDUsage_Ord_Instance1: _bindgen_ty_241 = 1;
pub const kHIDUsage_Ord_Instance2: _bindgen_ty_241 = 2;
pub const kHIDUsage_Ord_Instance3: _bindgen_ty_241 = 3;
pub const kHIDUsage_Ord_Instance4: _bindgen_ty_241 = 4;
pub const kHIDUsage_Ord_Instance65535: _bindgen_ty_241 = 65535;
pub type _bindgen_ty_241 = ::std::os::raw::c_uint;
pub const kHIDUsage_Tfon_Phone: _bindgen_ty_242 = 1;
pub const kHIDUsage_Tfon_AnsweringMachine: _bindgen_ty_242 = 2;
pub const kHIDUsage_Tfon_MessageControls: _bindgen_ty_242 = 3;
pub const kHIDUsage_Tfon_Handset: _bindgen_ty_242 = 4;
pub const kHIDUsage_Tfon_Headset: _bindgen_ty_242 = 5;
pub const kHIDUsage_Tfon_TelephonyKeyPad: _bindgen_ty_242 = 6;
pub const kHIDUsage_Tfon_ProgrammableButton: _bindgen_ty_242 = 7;
pub const kHIDUsage_Tfon_HookSwitch: _bindgen_ty_242 = 32;
pub const kHIDUsage_Tfon_Flash: _bindgen_ty_242 = 33;
pub const kHIDUsage_Tfon_Feature: _bindgen_ty_242 = 34;
pub const kHIDUsage_Tfon_Hold: _bindgen_ty_242 = 35;
pub const kHIDUsage_Tfon_Redial: _bindgen_ty_242 = 36;
pub const kHIDUsage_Tfon_Transfer: _bindgen_ty_242 = 37;
pub const kHIDUsage_Tfon_Drop: _bindgen_ty_242 = 38;
pub const kHIDUsage_Tfon_Park: _bindgen_ty_242 = 39;
pub const kHIDUsage_Tfon_ForwardCalls: _bindgen_ty_242 = 40;
pub const kHIDUsage_Tfon_AlternateFunction: _bindgen_ty_242 = 41;
pub const kHIDUsage_Tfon_Line: _bindgen_ty_242 = 42;
pub const kHIDUsage_Tfon_SpeakerPhone: _bindgen_ty_242 = 43;
pub const kHIDUsage_Tfon_Conference: _bindgen_ty_242 = 44;
pub const kHIDUsage_Tfon_RingEnable: _bindgen_ty_242 = 45;
pub const kHIDUsage_Tfon_Ring: _bindgen_ty_242 = 46;
pub const kHIDUsage_Tfon_PhoneMute: _bindgen_ty_242 = 47;
pub const kHIDUsage_Tfon_CallerID: _bindgen_ty_242 = 48;
pub const kHIDUsage_Tfon_SpeedDial: _bindgen_ty_242 = 80;
pub const kHIDUsage_Tfon_StoreNumber: _bindgen_ty_242 = 81;
pub const kHIDUsage_Tfon_RecallNumber: _bindgen_ty_242 = 82;
pub const kHIDUsage_Tfon_PhoneDirectory: _bindgen_ty_242 = 83;
pub const kHIDUsage_Tfon_VoiceMail: _bindgen_ty_242 = 112;
pub const kHIDUsage_Tfon_ScreenCalls: _bindgen_ty_242 = 113;
pub const kHIDUsage_Tfon_DoNotDisturb: _bindgen_ty_242 = 114;
pub const kHIDUsage_Tfon_Message: _bindgen_ty_242 = 115;
pub const kHIDUsage_Tfon_AnswerOnOrOff: _bindgen_ty_242 = 116;
pub const kHIDUsage_Tfon_InsideDialTone: _bindgen_ty_242 = 144;
pub const kHIDUsage_Tfon_OutsideDialTone: _bindgen_ty_242 = 145;
pub const kHIDUsage_Tfon_InsideRingTone: _bindgen_ty_242 = 146;
pub const kHIDUsage_Tfon_OutsideRingTone: _bindgen_ty_242 = 147;
pub const kHIDUsage_Tfon_PriorityRingTone: _bindgen_ty_242 = 148;
pub const kHIDUsage_Tfon_InsideRingback: _bindgen_ty_242 = 149;
pub const kHIDUsage_Tfon_PriorityRingback: _bindgen_ty_242 = 150;
pub const kHIDUsage_Tfon_LineBusyTone: _bindgen_ty_242 = 151;
pub const kHIDUsage_Tfon_ReorderTone: _bindgen_ty_242 = 152;
pub const kHIDUsage_Tfon_CallWaitingTone: _bindgen_ty_242 = 153;
pub const kHIDUsage_Tfon_ConfirmationTone1: _bindgen_ty_242 = 154;
pub const kHIDUsage_Tfon_ConfirmationTone2: _bindgen_ty_242 = 155;
pub const kHIDUsage_Tfon_TonesOff: _bindgen_ty_242 = 156;
pub const kHIDUsage_Tfon_OutsideRingback: _bindgen_ty_242 = 157;
pub const kHIDUsage_Tfon_PhoneKey0: _bindgen_ty_242 = 176;
pub const kHIDUsage_Tfon_PhoneKey1: _bindgen_ty_242 = 177;
pub const kHIDUsage_Tfon_PhoneKey2: _bindgen_ty_242 = 178;
pub const kHIDUsage_Tfon_PhoneKey3: _bindgen_ty_242 = 179;
pub const kHIDUsage_Tfon_PhoneKey4: _bindgen_ty_242 = 180;
pub const kHIDUsage_Tfon_PhoneKey5: _bindgen_ty_242 = 181;
pub const kHIDUsage_Tfon_PhoneKey6: _bindgen_ty_242 = 182;
pub const kHIDUsage_Tfon_PhoneKey7: _bindgen_ty_242 = 183;
pub const kHIDUsage_Tfon_PhoneKey8: _bindgen_ty_242 = 184;
pub const kHIDUsage_Tfon_PhoneKey9: _bindgen_ty_242 = 185;
pub const kHIDUsage_Tfon_PhoneKeyStar: _bindgen_ty_242 = 186;
pub const kHIDUsage_Tfon_PhoneKeyPound: _bindgen_ty_242 = 187;
pub const kHIDUsage_Tfon_PhoneKeyA: _bindgen_ty_242 = 188;
pub const kHIDUsage_Tfon_PhoneKeyB: _bindgen_ty_242 = 189;
pub const kHIDUsage_Tfon_PhoneKeyC: _bindgen_ty_242 = 190;
pub const kHIDUsage_Tfon_PhoneKeyD: _bindgen_ty_242 = 191;
pub const kHIDUsage_TFon_Reserved: _bindgen_ty_242 = 65535;
pub type _bindgen_ty_242 = ::std::os::raw::c_uint;
pub const kHIDUsage_Csmr_ConsumerControl: _bindgen_ty_243 = 1;
pub const kHIDUsage_Csmr_NumericKeyPad: _bindgen_ty_243 = 2;
pub const kHIDUsage_Csmr_ProgrammableButtons: _bindgen_ty_243 = 3;
pub const kHIDUsage_Csmr_Microphone: _bindgen_ty_243 = 4;
pub const kHIDUsage_Csmr_Headphone: _bindgen_ty_243 = 5;
pub const kHIDUsage_Csmr_GraphicEqualizer: _bindgen_ty_243 = 6;
pub const kHIDUsage_Csmr_Plus10: _bindgen_ty_243 = 32;
pub const kHIDUsage_Csmr_Plus100: _bindgen_ty_243 = 33;
pub const kHIDUsage_Csmr_AMOrPM: _bindgen_ty_243 = 34;
pub const kHIDUsage_Csmr_Power: _bindgen_ty_243 = 48;
pub const kHIDUsage_Csmr_Reset: _bindgen_ty_243 = 49;
pub const kHIDUsage_Csmr_Sleep: _bindgen_ty_243 = 50;
pub const kHIDUsage_Csmr_SleepAfter: _bindgen_ty_243 = 51;
pub const kHIDUsage_Csmr_SleepMode: _bindgen_ty_243 = 52;
pub const kHIDUsage_Csmr_Illumination: _bindgen_ty_243 = 53;
pub const kHIDUsage_Csmr_FunctionButtons: _bindgen_ty_243 = 54;
pub const kHIDUsage_Csmr_Menu: _bindgen_ty_243 = 64;
pub const kHIDUsage_Csmr_MenuPick: _bindgen_ty_243 = 65;
pub const kHIDUsage_Csmr_MenuUp: _bindgen_ty_243 = 66;
pub const kHIDUsage_Csmr_MenuDown: _bindgen_ty_243 = 67;
pub const kHIDUsage_Csmr_MenuLeft: _bindgen_ty_243 = 68;
pub const kHIDUsage_Csmr_MenuRight: _bindgen_ty_243 = 69;
pub const kHIDUsage_Csmr_MenuEscape: _bindgen_ty_243 = 70;
pub const kHIDUsage_Csmr_MenuValueIncrease: _bindgen_ty_243 = 71;
pub const kHIDUsage_Csmr_MenuValueDecrease: _bindgen_ty_243 = 72;
pub const kHIDUsage_Csmr_DataOnScreen: _bindgen_ty_243 = 96;
pub const kHIDUsage_Csmr_ClosedCaption: _bindgen_ty_243 = 97;
pub const kHIDUsage_Csmr_ClosedCaptionSelect: _bindgen_ty_243 = 98;
pub const kHIDUsage_Csmr_VCROrTV: _bindgen_ty_243 = 99;
pub const kHIDUsage_Csmr_BroadcastMode: _bindgen_ty_243 = 100;
pub const kHIDUsage_Csmr_Snapshot: _bindgen_ty_243 = 101;
pub const kHIDUsage_Csmr_Still: _bindgen_ty_243 = 102;
pub const kHIDUsage_Csmr_PictureInPictureToggle: _bindgen_ty_243 = 103;
pub const kHIDUsage_Csmr_PictureInPictureSwap: _bindgen_ty_243 = 104;
pub const kHIDUsage_Csmr_RedMenuButton: _bindgen_ty_243 = 105;
pub const kHIDUsage_Csmr_GreenMenuButton: _bindgen_ty_243 = 106;
pub const kHIDUsage_Csmr_BlueMenuButton: _bindgen_ty_243 = 107;
pub const kHIDUsage_Csmr_YellowMenuButton: _bindgen_ty_243 = 108;
pub const kHIDUsage_Csmr_Aspect: _bindgen_ty_243 = 109;
pub const kHIDUsage_Csmr_3DModeSelect: _bindgen_ty_243 = 110;
pub const kHIDUsage_Csmr_DisplayBrightnessIncrement: _bindgen_ty_243 = 111;
pub const kHIDUsage_Csmr_DisplayBrightnessDecrement: _bindgen_ty_243 = 112;
pub const kHIDUsage_Csmr_DisplayBrightness: _bindgen_ty_243 = 113;
pub const kHIDUsage_Csmr_DisplayBacklightToggle: _bindgen_ty_243 = 114;
pub const kHIDUsage_Csmr_DisplayBrightnessMinimum: _bindgen_ty_243 = 115;
pub const kHIDUsage_Csmr_DisplayBrightnessMaximum: _bindgen_ty_243 = 116;
pub const kHIDUsage_Csmr_DisplayBrightnessSetAutoBrightness: _bindgen_ty_243 = 117;
pub const kHIDUsage_Csmr_KeyboardBrightnessIncrement: _bindgen_ty_243 = 121;
pub const kHIDUsage_Csmr_KeyboardBrightnessDecrement: _bindgen_ty_243 = 122;
pub const kHIDUsage_Csmr_Selection: _bindgen_ty_243 = 128;
pub const kHIDUsage_Csmr_Assign: _bindgen_ty_243 = 129;
pub const kHIDUsage_Csmr_ModeStep: _bindgen_ty_243 = 130;
pub const kHIDUsage_Csmr_RecallLast: _bindgen_ty_243 = 131;
pub const kHIDUsage_Csmr_EnterChannel: _bindgen_ty_243 = 132;
pub const kHIDUsage_Csmr_OrderMovie: _bindgen_ty_243 = 133;
pub const kHIDUsage_Csmr_Channel: _bindgen_ty_243 = 134;
pub const kHIDUsage_Csmr_MediaSelection: _bindgen_ty_243 = 135;
pub const kHIDUsage_Csmr_MediaSelectComputer: _bindgen_ty_243 = 136;
pub const kHIDUsage_Csmr_MediaSelectTV: _bindgen_ty_243 = 137;
pub const kHIDUsage_Csmr_MediaSelectWWW: _bindgen_ty_243 = 138;
pub const kHIDUsage_Csmr_MediaSelectDVD: _bindgen_ty_243 = 139;
pub const kHIDUsage_Csmr_MediaSelectTelephone: _bindgen_ty_243 = 140;
pub const kHIDUsage_Csmr_MediaSelectProgramGuide: _bindgen_ty_243 = 141;
pub const kHIDUsage_Csmr_MediaSelectVideoPhone: _bindgen_ty_243 = 142;
pub const kHIDUsage_Csmr_MediaSelectGames: _bindgen_ty_243 = 143;
pub const kHIDUsage_Csmr_MediaSelectMessages: _bindgen_ty_243 = 144;
pub const kHIDUsage_Csmr_MediaSelectCD: _bindgen_ty_243 = 145;
pub const kHIDUsage_Csmr_MediaSelectVCR: _bindgen_ty_243 = 146;
pub const kHIDUsage_Csmr_MediaSelectTuner: _bindgen_ty_243 = 147;
pub const kHIDUsage_Csmr_Quit: _bindgen_ty_243 = 148;
pub const kHIDUsage_Csmr_Help: _bindgen_ty_243 = 149;
pub const kHIDUsage_Csmr_MediaSelectTape: _bindgen_ty_243 = 150;
pub const kHIDUsage_Csmr_MediaSelectCable: _bindgen_ty_243 = 151;
pub const kHIDUsage_Csmr_MediaSelectSatellite: _bindgen_ty_243 = 152;
pub const kHIDUsage_Csmr_MediaSelectSecurity: _bindgen_ty_243 = 153;
pub const kHIDUsage_Csmr_MediaSelectHome: _bindgen_ty_243 = 154;
pub const kHIDUsage_Csmr_MediaSelectCall: _bindgen_ty_243 = 155;
pub const kHIDUsage_Csmr_ChannelIncrement: _bindgen_ty_243 = 156;
pub const kHIDUsage_Csmr_ChannelDecrement: _bindgen_ty_243 = 157;
pub const kHIDUsage_Csmr_Media: _bindgen_ty_243 = 158;
pub const kHIDUsage_Csmr_VCRPlus: _bindgen_ty_243 = 160;
pub const kHIDUsage_Csmr_Once: _bindgen_ty_243 = 161;
pub const kHIDUsage_Csmr_Daily: _bindgen_ty_243 = 162;
pub const kHIDUsage_Csmr_Weekly: _bindgen_ty_243 = 163;
pub const kHIDUsage_Csmr_Monthly: _bindgen_ty_243 = 164;
pub const kHIDUsage_Csmr_Play: _bindgen_ty_243 = 176;
pub const kHIDUsage_Csmr_Pause: _bindgen_ty_243 = 177;
pub const kHIDUsage_Csmr_Record: _bindgen_ty_243 = 178;
pub const kHIDUsage_Csmr_FastForward: _bindgen_ty_243 = 179;
pub const kHIDUsage_Csmr_Rewind: _bindgen_ty_243 = 180;
pub const kHIDUsage_Csmr_ScanNextTrack: _bindgen_ty_243 = 181;
pub const kHIDUsage_Csmr_ScanPreviousTrack: _bindgen_ty_243 = 182;
pub const kHIDUsage_Csmr_Stop: _bindgen_ty_243 = 183;
pub const kHIDUsage_Csmr_Eject: _bindgen_ty_243 = 184;
pub const kHIDUsage_Csmr_RandomPlay: _bindgen_ty_243 = 185;
pub const kHIDUsage_Csmr_SelectDisc: _bindgen_ty_243 = 186;
pub const kHIDUsage_Csmr_EnterDisc: _bindgen_ty_243 = 187;
pub const kHIDUsage_Csmr_Repeat: _bindgen_ty_243 = 188;
pub const kHIDUsage_Csmr_Tracking: _bindgen_ty_243 = 189;
pub const kHIDUsage_Csmr_TrackNormal: _bindgen_ty_243 = 190;
pub const kHIDUsage_Csmr_SlowTracking: _bindgen_ty_243 = 191;
pub const kHIDUsage_Csmr_FrameForward: _bindgen_ty_243 = 192;
pub const kHIDUsage_Csmr_FrameBack: _bindgen_ty_243 = 193;
pub const kHIDUsage_Csmr_Mark: _bindgen_ty_243 = 194;
pub const kHIDUsage_Csmr_ClearMark: _bindgen_ty_243 = 195;
pub const kHIDUsage_Csmr_RepeatFromMark: _bindgen_ty_243 = 196;
pub const kHIDUsage_Csmr_ReturnToMark: _bindgen_ty_243 = 197;
pub const kHIDUsage_Csmr_SearchMarkForward: _bindgen_ty_243 = 198;
pub const kHIDUsage_Csmr_SearchMarkBackwards: _bindgen_ty_243 = 199;
pub const kHIDUsage_Csmr_CounterReset: _bindgen_ty_243 = 200;
pub const kHIDUsage_Csmr_ShowCounter: _bindgen_ty_243 = 201;
pub const kHIDUsage_Csmr_TrackingIncrement: _bindgen_ty_243 = 202;
pub const kHIDUsage_Csmr_TrackingDecrement: _bindgen_ty_243 = 203;
pub const kHIDUsage_Csmr_StopOrEject: _bindgen_ty_243 = 204;
pub const kHIDUsage_Csmr_PlayOrPause: _bindgen_ty_243 = 205;
pub const kHIDUsage_Csmr_PlayOrSkip: _bindgen_ty_243 = 206;
pub const kHIDUsage_Csmr_VoiceCommand: _bindgen_ty_243 = 207;
pub const kHIDUsage_Csmr_Volume: _bindgen_ty_243 = 224;
pub const kHIDUsage_Csmr_Balance: _bindgen_ty_243 = 225;
pub const kHIDUsage_Csmr_Mute: _bindgen_ty_243 = 226;
pub const kHIDUsage_Csmr_Bass: _bindgen_ty_243 = 227;
pub const kHIDUsage_Csmr_Treble: _bindgen_ty_243 = 228;
pub const kHIDUsage_Csmr_BassBoost: _bindgen_ty_243 = 229;
pub const kHIDUsage_Csmr_SurroundMode: _bindgen_ty_243 = 230;
pub const kHIDUsage_Csmr_Loudness: _bindgen_ty_243 = 231;
pub const kHIDUsage_Csmr_MPX: _bindgen_ty_243 = 232;
pub const kHIDUsage_Csmr_VolumeIncrement: _bindgen_ty_243 = 233;
pub const kHIDUsage_Csmr_VolumeDecrement: _bindgen_ty_243 = 234;
pub const kHIDUsage_Csmr_Speed: _bindgen_ty_243 = 240;
pub const kHIDUsage_Csmr_PlaybackSpeed: _bindgen_ty_243 = 241;
pub const kHIDUsage_Csmr_StandardPlay: _bindgen_ty_243 = 242;
pub const kHIDUsage_Csmr_LongPlay: _bindgen_ty_243 = 243;
pub const kHIDUsage_Csmr_ExtendedPlay: _bindgen_ty_243 = 244;
pub const kHIDUsage_Csmr_Slow: _bindgen_ty_243 = 245;
pub const kHIDUsage_Csmr_FanEnable: _bindgen_ty_243 = 256;
pub const kHIDUsage_Csmr_FanSpeed: _bindgen_ty_243 = 257;
pub const kHIDUsage_Csmr_LightEnable: _bindgen_ty_243 = 258;
pub const kHIDUsage_Csmr_LightIlluminationLevel: _bindgen_ty_243 = 259;
pub const kHIDUsage_Csmr_ClimateControlEnable: _bindgen_ty_243 = 260;
pub const kHIDUsage_Csmr_RoomTemperature: _bindgen_ty_243 = 261;
pub const kHIDUsage_Csmr_SecurityEnable: _bindgen_ty_243 = 262;
pub const kHIDUsage_Csmr_FireAlarm: _bindgen_ty_243 = 263;
pub const kHIDUsage_Csmr_PoliceAlarm: _bindgen_ty_243 = 264;
pub const kHIDUsage_Csmr_Proximity: _bindgen_ty_243 = 265;
pub const kHIDUsage_Csmr_Motion: _bindgen_ty_243 = 266;
pub const kHIDUsage_Csmr_DuressAlarm: _bindgen_ty_243 = 267;
pub const kHIDUsage_Csmr_HoldupAlarm: _bindgen_ty_243 = 268;
pub const kHIDUsage_Csmr_MedicalAlarm: _bindgen_ty_243 = 269;
pub const kHIDUsage_Csmr_BalanceRight: _bindgen_ty_243 = 336;
pub const kHIDUsage_Csmr_BalanceLeft: _bindgen_ty_243 = 337;
pub const kHIDUsage_Csmr_BassIncrement: _bindgen_ty_243 = 338;
pub const kHIDUsage_Csmr_BassDecrement: _bindgen_ty_243 = 339;
pub const kHIDUsage_Csmr_TrebleIncrement: _bindgen_ty_243 = 340;
pub const kHIDUsage_Csmr_TrebleDecrement: _bindgen_ty_243 = 341;
pub const kHIDUsage_Csmr_SpeakerSystem: _bindgen_ty_243 = 352;
pub const kHIDUsage_Csmr_ChannelLeft: _bindgen_ty_243 = 353;
pub const kHIDUsage_Csmr_ChannelRight: _bindgen_ty_243 = 354;
pub const kHIDUsage_Csmr_ChannelCenter: _bindgen_ty_243 = 355;
pub const kHIDUsage_Csmr_ChannelFront: _bindgen_ty_243 = 356;
pub const kHIDUsage_Csmr_ChannelCenterFront: _bindgen_ty_243 = 357;
pub const kHIDUsage_Csmr_ChannelSide: _bindgen_ty_243 = 358;
pub const kHIDUsage_Csmr_ChannelSurround: _bindgen_ty_243 = 359;
pub const kHIDUsage_Csmr_ChannelLowFrequencyEnhancement: _bindgen_ty_243 = 360;
pub const kHIDUsage_Csmr_ChannelTop: _bindgen_ty_243 = 361;
pub const kHIDUsage_Csmr_ChannelUnknown: _bindgen_ty_243 = 362;
pub const kHIDUsage_Csmr_SubChannel: _bindgen_ty_243 = 368;
pub const kHIDUsage_Csmr_SubChannelIncrement: _bindgen_ty_243 = 369;
pub const kHIDUsage_Csmr_SubChannelDecrement: _bindgen_ty_243 = 370;
pub const kHIDUsage_Csmr_AlternateAudioIncrement: _bindgen_ty_243 = 371;
pub const kHIDUsage_Csmr_AlternateAudioDecrement: _bindgen_ty_243 = 372;
pub const kHIDUsage_Csmr_ApplicationLaunchButtons: _bindgen_ty_243 = 384;
pub const kHIDUsage_Csmr_ALLaunchButtonConfigurationTool: _bindgen_ty_243 = 385;
pub const kHIDUsage_Csmr_ALProgrammableButtonConfiguration: _bindgen_ty_243 = 386;
pub const kHIDUsage_Csmr_ALConsumerControlConfiguration: _bindgen_ty_243 = 387;
pub const kHIDUsage_Csmr_ALWordProcessor: _bindgen_ty_243 = 388;
pub const kHIDUsage_Csmr_ALTextEditor: _bindgen_ty_243 = 389;
pub const kHIDUsage_Csmr_ALSpreadsheet: _bindgen_ty_243 = 390;
pub const kHIDUsage_Csmr_ALGraphicsEditor: _bindgen_ty_243 = 391;
pub const kHIDUsage_Csmr_ALPresentationApp: _bindgen_ty_243 = 392;
pub const kHIDUsage_Csmr_ALDatabaseApp: _bindgen_ty_243 = 393;
pub const kHIDUsage_Csmr_ALEmailReader: _bindgen_ty_243 = 394;
pub const kHIDUsage_Csmr_ALNewsreader: _bindgen_ty_243 = 395;
pub const kHIDUsage_Csmr_ALVoicemail: _bindgen_ty_243 = 396;
pub const kHIDUsage_Csmr_ALContactsOrAddressBook: _bindgen_ty_243 = 397;
pub const kHIDUsage_Csmr_ALCalendarOrSchedule: _bindgen_ty_243 = 398;
pub const kHIDUsage_Csmr_ALTaskOrProjectManager: _bindgen_ty_243 = 399;
pub const kHIDUsage_Csmr_ALLogOrJournalOrTimecard: _bindgen_ty_243 = 400;
pub const kHIDUsage_Csmr_ALCheckbookOrFinance: _bindgen_ty_243 = 401;
pub const kHIDUsage_Csmr_ALCalculator: _bindgen_ty_243 = 402;
pub const kHIDUsage_Csmr_ALAOrVCaptureOrPlayback: _bindgen_ty_243 = 403;
pub const kHIDUsage_Csmr_ALLocalMachineBrowser: _bindgen_ty_243 = 404;
pub const kHIDUsage_Csmr_ALLANOrWANBrowser: _bindgen_ty_243 = 405;
pub const kHIDUsage_Csmr_ALInternetBrowser: _bindgen_ty_243 = 406;
pub const kHIDUsage_Csmr_ALRemoteNetworkingOrISPConnect: _bindgen_ty_243 = 407;
pub const kHIDUsage_Csmr_ALNetworkConference: _bindgen_ty_243 = 408;
pub const kHIDUsage_Csmr_ALNetworkChat: _bindgen_ty_243 = 409;
pub const kHIDUsage_Csmr_ALTelephonyOrDialer: _bindgen_ty_243 = 410;
pub const kHIDUsage_Csmr_ALLogon: _bindgen_ty_243 = 411;
pub const kHIDUsage_Csmr_ALLogoff: _bindgen_ty_243 = 412;
pub const kHIDUsage_Csmr_ALLogonOrLogoff: _bindgen_ty_243 = 413;
pub const kHIDUsage_Csmr_ALTerminalLockOrScreensaver: _bindgen_ty_243 = 414;
pub const kHIDUsage_Csmr_ALControlPanel: _bindgen_ty_243 = 415;
pub const kHIDUsage_Csmr_ALCommandLineProcessorOrRun: _bindgen_ty_243 = 416;
pub const kHIDUsage_Csmr_ALProcessOrTaskManager: _bindgen_ty_243 = 417;
pub const kHIDUsage_Csmr_AL: _bindgen_ty_243 = 418;
pub const kHIDUsage_Csmr_ALNextTaskOrApplication: _bindgen_ty_243 = 419;
pub const kHIDUsage_Csmr_ALPreviousTaskOrApplication: _bindgen_ty_243 = 420;
pub const kHIDUsage_Csmr_ALPreemptiveHaltTaskOrApplication: _bindgen_ty_243 = 421;
pub const kHIDUsage_Csmr_ALIntegratedHelpCenter: _bindgen_ty_243 = 422;
pub const kHIDUsage_Csmr_ALDocuments: _bindgen_ty_243 = 423;
pub const kHIDUsage_Csmr_ALThesaurus: _bindgen_ty_243 = 424;
pub const kHIDUsage_Csmr_ALDictionary: _bindgen_ty_243 = 425;
pub const kHIDUsage_Csmr_ALDesktop: _bindgen_ty_243 = 426;
pub const kHIDUsage_Csmr_ALSpellCheck: _bindgen_ty_243 = 427;
pub const kHIDUsage_Csmr_ALGrammerCheck: _bindgen_ty_243 = 428;
pub const kHIDUsage_Csmr_ALWirelessStatus: _bindgen_ty_243 = 429;
pub const kHIDUsage_Csmr_ALKeyboardLayout: _bindgen_ty_243 = 430;
pub const kHIDUsage_Csmr_ALVirusProtection: _bindgen_ty_243 = 431;
pub const kHIDUsage_Csmr_ALEncryption: _bindgen_ty_243 = 432;
pub const kHIDUsage_Csmr_ALScreenSaver: _bindgen_ty_243 = 433;
pub const kHIDUsage_Csmr_ALAlarms: _bindgen_ty_243 = 434;
pub const kHIDUsage_Csmr_ALClock: _bindgen_ty_243 = 435;
pub const kHIDUsage_Csmr_ALFileBrowser: _bindgen_ty_243 = 436;
pub const kHIDUsage_Csmr_ALPowerStatus: _bindgen_ty_243 = 437;
pub const kHIDUsage_Csmr_ALImageBrowser: _bindgen_ty_243 = 438;
pub const kHIDUsage_Csmr_ALAudioBrowser: _bindgen_ty_243 = 439;
pub const kHIDUsage_Csmr_ALMovieBrowser: _bindgen_ty_243 = 440;
pub const kHIDUsage_Csmr_ALDigitalRightsManager: _bindgen_ty_243 = 441;
pub const kHIDUsage_Csmr_ALDigitalWallet: _bindgen_ty_243 = 442;
pub const kHIDUsage_Csmr_ALInstantMessaging: _bindgen_ty_243 = 444;
pub const kHIDUsage_Csmr_ALOEMFeatureBrowser: _bindgen_ty_243 = 445;
pub const kHIDUsage_Csmr_ALOEMHelp: _bindgen_ty_243 = 446;
pub const kHIDUsage_Csmr_ALOnlineCommunity: _bindgen_ty_243 = 447;
pub const kHIDUsage_Csmr_ALEntertainmentContentBrowser: _bindgen_ty_243 = 448;
pub const kHIDUsage_Csmr_ALOnlineShoppingBrowswer: _bindgen_ty_243 = 449;
pub const kHIDUsage_Csmr_ALSmartCardInformationOrHelp: _bindgen_ty_243 = 450;
pub const kHIDUsage_Csmr_ALMarketMonitorOrFinanceBrowser: _bindgen_ty_243 = 451;
pub const kHIDUsage_Csmr_ALCustomizedCorporateNewsBrowser: _bindgen_ty_243 = 452;
pub const kHIDUsage_Csmr_ALOnlineActivityBrowswer: _bindgen_ty_243 = 453;
pub const kHIDUsage_Csmr_ALResearchOrSearchBrowswer: _bindgen_ty_243 = 454;
pub const kHIDUsage_Csmr_ALAudioPlayer: _bindgen_ty_243 = 455;
pub const kHIDUsage_Csmr_ALMessageStatus: _bindgen_ty_243 = 456;
pub const kHIDUsage_Csmr_ALContactSync: _bindgen_ty_243 = 457;
pub const kHIDUsage_Csmr_ALNavigation: _bindgen_ty_243 = 458;
pub const kHIDUsage_Csmr_ALContextawareDesktopAssistant: _bindgen_ty_243 = 459;
pub const kHIDUsage_Csmr_GenericGUIApplicationControls: _bindgen_ty_243 = 512;
pub const kHIDUsage_Csmr_ACNew: _bindgen_ty_243 = 513;
pub const kHIDUsage_Csmr_ACOpen: _bindgen_ty_243 = 514;
pub const kHIDUsage_Csmr_ACClose: _bindgen_ty_243 = 515;
pub const kHIDUsage_Csmr_ACExit: _bindgen_ty_243 = 516;
pub const kHIDUsage_Csmr_ACMaximize: _bindgen_ty_243 = 517;
pub const kHIDUsage_Csmr_ACMinimize: _bindgen_ty_243 = 518;
pub const kHIDUsage_Csmr_ACSave: _bindgen_ty_243 = 519;
pub const kHIDUsage_Csmr_ACPrint: _bindgen_ty_243 = 520;
pub const kHIDUsage_Csmr_ACProperties: _bindgen_ty_243 = 521;
pub const kHIDUsage_Csmr_ACUndo: _bindgen_ty_243 = 538;
pub const kHIDUsage_Csmr_ACCopy: _bindgen_ty_243 = 539;
pub const kHIDUsage_Csmr_ACCut: _bindgen_ty_243 = 540;
pub const kHIDUsage_Csmr_ACPaste: _bindgen_ty_243 = 541;
pub const kHIDUsage_Csmr_AC: _bindgen_ty_243 = 542;
pub const kHIDUsage_Csmr_ACFind: _bindgen_ty_243 = 543;
pub const kHIDUsage_Csmr_ACFindandReplace: _bindgen_ty_243 = 544;
pub const kHIDUsage_Csmr_ACSearch: _bindgen_ty_243 = 545;
pub const kHIDUsage_Csmr_ACGoTo: _bindgen_ty_243 = 546;
pub const kHIDUsage_Csmr_ACHome: _bindgen_ty_243 = 547;
pub const kHIDUsage_Csmr_ACBack: _bindgen_ty_243 = 548;
pub const kHIDUsage_Csmr_ACForward: _bindgen_ty_243 = 549;
pub const kHIDUsage_Csmr_ACStop: _bindgen_ty_243 = 550;
pub const kHIDUsage_Csmr_ACRefresh: _bindgen_ty_243 = 551;
pub const kHIDUsage_Csmr_ACPreviousLink: _bindgen_ty_243 = 552;
pub const kHIDUsage_Csmr_ACNextLink: _bindgen_ty_243 = 553;
pub const kHIDUsage_Csmr_ACBookmarks: _bindgen_ty_243 = 554;
pub const kHIDUsage_Csmr_ACHistory: _bindgen_ty_243 = 555;
pub const kHIDUsage_Csmr_ACSubscriptions: _bindgen_ty_243 = 556;
pub const kHIDUsage_Csmr_ACZoomIn: _bindgen_ty_243 = 557;
pub const kHIDUsage_Csmr_ACZoomOut: _bindgen_ty_243 = 558;
pub const kHIDUsage_Csmr_ACZoom: _bindgen_ty_243 = 559;
pub const kHIDUsage_Csmr_ACFullScreenView: _bindgen_ty_243 = 560;
pub const kHIDUsage_Csmr_ACNormalView: _bindgen_ty_243 = 561;
pub const kHIDUsage_Csmr_ACViewToggle: _bindgen_ty_243 = 562;
pub const kHIDUsage_Csmr_ACScrollUp: _bindgen_ty_243 = 563;
pub const kHIDUsage_Csmr_ACScrollDown: _bindgen_ty_243 = 564;
pub const kHIDUsage_Csmr_ACScroll: _bindgen_ty_243 = 565;
pub const kHIDUsage_Csmr_ACPanLeft: _bindgen_ty_243 = 566;
pub const kHIDUsage_Csmr_ACPanRight: _bindgen_ty_243 = 567;
pub const kHIDUsage_Csmr_ACPan: _bindgen_ty_243 = 568;
pub const kHIDUsage_Csmr_ACNewWindow: _bindgen_ty_243 = 569;
pub const kHIDUsage_Csmr_ACTileHorizontally: _bindgen_ty_243 = 570;
pub const kHIDUsage_Csmr_ACTileVertically: _bindgen_ty_243 = 571;
pub const kHIDUsage_Csmr_ACFormat: _bindgen_ty_243 = 572;
pub const kHIDUsage_Csmr_ACEdit: _bindgen_ty_243 = 573;
pub const kHIDUsage_Csmr_ACBold: _bindgen_ty_243 = 574;
pub const kHIDUsage_Csmr_ACItalics: _bindgen_ty_243 = 575;
pub const kHIDUsage_Csmr_ACUnderline: _bindgen_ty_243 = 576;
pub const kHIDUsage_Csmr_ACStrikethrough: _bindgen_ty_243 = 577;
pub const kHIDUsage_Csmr_ACSubscript: _bindgen_ty_243 = 578;
pub const kHIDUsage_Csmr_ACSuperscript: _bindgen_ty_243 = 579;
pub const kHIDUsage_Csmr_ACAllCaps: _bindgen_ty_243 = 580;
pub const kHIDUsage_Csmr_ACRotate: _bindgen_ty_243 = 581;
pub const kHIDUsage_Csmr_ACResize: _bindgen_ty_243 = 582;
pub const kHIDUsage_Csmr_ACFlipHorizontal: _bindgen_ty_243 = 583;
pub const kHIDUsage_Csmr_ACFlipVertical: _bindgen_ty_243 = 584;
pub const kHIDUsage_Csmr_ACMirrorHorizontal: _bindgen_ty_243 = 585;
pub const kHIDUsage_Csmr_ACMirrorVertical: _bindgen_ty_243 = 586;
pub const kHIDUsage_Csmr_ACFontSelect: _bindgen_ty_243 = 587;
pub const kHIDUsage_Csmr_ACFontColor: _bindgen_ty_243 = 588;
pub const kHIDUsage_Csmr_ACFontSize: _bindgen_ty_243 = 589;
pub const kHIDUsage_Csmr_ACJustifyLeft: _bindgen_ty_243 = 590;
pub const kHIDUsage_Csmr_ACJustifyCenterH: _bindgen_ty_243 = 591;
pub const kHIDUsage_Csmr_ACJustifyRight: _bindgen_ty_243 = 592;
pub const kHIDUsage_Csmr_ACJustifyBlockH: _bindgen_ty_243 = 593;
pub const kHIDUsage_Csmr_ACJustifyTop: _bindgen_ty_243 = 594;
pub const kHIDUsage_Csmr_ACJustifyCenterV: _bindgen_ty_243 = 595;
pub const kHIDUsage_Csmr_ACJustifyBottom: _bindgen_ty_243 = 596;
pub const kHIDUsage_Csmr_ACJustifyBlockV: _bindgen_ty_243 = 597;
pub const kHIDUsage_Csmr_ACIndentyDecrease: _bindgen_ty_243 = 598;
pub const kHIDUsage_Csmr_ACIndentyIncrease: _bindgen_ty_243 = 599;
pub const kHIDUsage_Csmr_ACNumberedList: _bindgen_ty_243 = 600;
pub const kHIDUsage_Csmr_ACRestartNumbering: _bindgen_ty_243 = 601;
pub const kHIDUsage_Csmr_ACBulletedList: _bindgen_ty_243 = 602;
pub const kHIDUsage_Csmr_ACPromote: _bindgen_ty_243 = 603;
pub const kHIDUsage_Csmr_ACDemote: _bindgen_ty_243 = 604;
pub const kHIDUsage_Csmr_ACYes: _bindgen_ty_243 = 605;
pub const kHIDUsage_Csmr_ACNo: _bindgen_ty_243 = 606;
pub const kHIDUsage_Csmr_ACCancel: _bindgen_ty_243 = 607;
pub const kHIDUsage_Csmr_ACCatalog: _bindgen_ty_243 = 608;
pub const kHIDUsage_Csmr_ACBuyOrCheckout: _bindgen_ty_243 = 609;
pub const kHIDUsage_Csmr_ACAddToCart: _bindgen_ty_243 = 610;
pub const kHIDUsage_Csmr_ACExpand: _bindgen_ty_243 = 611;
pub const kHIDUsage_Csmr_ACExpandAll: _bindgen_ty_243 = 612;
pub const kHIDUsage_Csmr_ACCollapse: _bindgen_ty_243 = 613;
pub const kHIDUsage_Csmr_ACCollapseAll: _bindgen_ty_243 = 614;
pub const kHIDUsage_Csmr_ACPrintPreview: _bindgen_ty_243 = 615;
pub const kHIDUsage_Csmr_ACPasteSpecial: _bindgen_ty_243 = 616;
pub const kHIDUsage_Csmr_ACInsertMode: _bindgen_ty_243 = 617;
pub const kHIDUsage_Csmr_ACDelete: _bindgen_ty_243 = 618;
pub const kHIDUsage_Csmr_ACLock: _bindgen_ty_243 = 619;
pub const kHIDUsage_Csmr_ACUnlock: _bindgen_ty_243 = 620;
pub const kHIDUsage_Csmr_ACProtect: _bindgen_ty_243 = 621;
pub const kHIDUsage_Csmr_ACUnprotect: _bindgen_ty_243 = 622;
pub const kHIDUsage_Csmr_ACAttachComment: _bindgen_ty_243 = 623;
pub const kHIDUsage_Csmr_ACDetachComment: _bindgen_ty_243 = 624;
pub const kHIDUsage_Csmr_ACViewComment: _bindgen_ty_243 = 625;
pub const kHIDUsage_Csmr_ACSelectWord: _bindgen_ty_243 = 626;
pub const kHIDUsage_Csmr_ACSelectSentence: _bindgen_ty_243 = 627;
pub const kHIDUsage_Csmr_ACSelectParagraph: _bindgen_ty_243 = 628;
pub const kHIDUsage_Csmr_ACSelectColumn: _bindgen_ty_243 = 629;
pub const kHIDUsage_Csmr_ACSelectRow: _bindgen_ty_243 = 630;
pub const kHIDUsage_Csmr_ACSelectTable: _bindgen_ty_243 = 631;
pub const kHIDUsage_Csmr_ACSelectObject: _bindgen_ty_243 = 632;
pub const kHIDUsage_Csmr_ACRedoOrRepeat: _bindgen_ty_243 = 633;
pub const kHIDUsage_Csmr_ACSort: _bindgen_ty_243 = 634;
pub const kHIDUsage_Csmr_ACSortAscending: _bindgen_ty_243 = 635;
pub const kHIDUsage_Csmr_ACSortDescending: _bindgen_ty_243 = 636;
pub const kHIDUsage_Csmr_ACFilter: _bindgen_ty_243 = 637;
pub const kHIDUsage_Csmr_ACSetClock: _bindgen_ty_243 = 638;
pub const kHIDUsage_Csmr_ACViewClock: _bindgen_ty_243 = 639;
pub const kHIDUsage_Csmr_ACSelectTimeZone: _bindgen_ty_243 = 640;
pub const kHIDUsage_Csmr_ACEditTimeZones: _bindgen_ty_243 = 641;
pub const kHIDUsage_Csmr_ACSetAlarm: _bindgen_ty_243 = 642;
pub const kHIDUsage_Csmr_ACClearAlarm: _bindgen_ty_243 = 643;
pub const kHIDUsage_Csmr_ACSnoozeAlarm: _bindgen_ty_243 = 644;
pub const kHIDUsage_Csmr_ACResetAlarm: _bindgen_ty_243 = 645;
pub const kHIDUsage_Csmr_ACSynchronize: _bindgen_ty_243 = 646;
pub const kHIDUsage_Csmr_ACSendOrReceive: _bindgen_ty_243 = 647;
pub const kHIDUsage_Csmr_ACSendTo: _bindgen_ty_243 = 648;
pub const kHIDUsage_Csmr_ACReply: _bindgen_ty_243 = 649;
pub const kHIDUsage_Csmr_ACReplyAll: _bindgen_ty_243 = 650;
pub const kHIDUsage_Csmr_ACForwardMessage: _bindgen_ty_243 = 651;
pub const kHIDUsage_Csmr_ACSend: _bindgen_ty_243 = 652;
pub const kHIDUsage_Csmr_ACAttachFile: _bindgen_ty_243 = 653;
pub const kHIDUsage_Csmr_ACUpload: _bindgen_ty_243 = 654;
pub const kHIDUsage_Csmr_ACDownload: _bindgen_ty_243 = 655;
pub const kHIDUsage_Csmr_ACSetBorders: _bindgen_ty_243 = 656;
pub const kHIDUsage_Csmr_ACInsertRow: _bindgen_ty_243 = 657;
pub const kHIDUsage_Csmr_ACInsertColumn: _bindgen_ty_243 = 658;
pub const kHIDUsage_Csmr_ACInsertFile: _bindgen_ty_243 = 659;
pub const kHIDUsage_Csmr_ACInsertPicture: _bindgen_ty_243 = 660;
pub const kHIDUsage_Csmr_ACInsertObject: _bindgen_ty_243 = 661;
pub const kHIDUsage_Csmr_ACInsertSymbol: _bindgen_ty_243 = 662;
pub const kHIDUsage_Csmr_ACSaveAndClose: _bindgen_ty_243 = 663;
pub const kHIDUsage_Csmr_ACRename: _bindgen_ty_243 = 664;
pub const kHIDUsage_Csmr_ACMerge: _bindgen_ty_243 = 665;
pub const kHIDUsage_Csmr_ACSplit: _bindgen_ty_243 = 666;
pub const kHIDUsage_Csmr_ACDistributeH: _bindgen_ty_243 = 667;
pub const kHIDUsage_Csmr_ACDistributeV: _bindgen_ty_243 = 668;
pub const kHIDUsage_Csmr_ACKeyboardLayoutSelect: _bindgen_ty_243 = 669;
pub const kHIDUsage_Csmr_ACNavigationGuidance: _bindgen_ty_243 = 670;
pub const kHIDUsage_Csmr_ACDesktopShowAllWindows: _bindgen_ty_243 = 671;
pub const kHIDUsage_Csmr_ACSoftKeyLeft: _bindgen_ty_243 = 672;
pub const kHIDUsage_Csmr_ACSoftKeyRight: _bindgen_ty_243 = 673;
pub const kHIDUsage_Csmr_ACDesktopShowAllApplications: _bindgen_ty_243 = 674;
pub const kHIDUsage_Csmr_ACIdleKeepAlive: _bindgen_ty_243 = 688;
pub const kHIDUsage_Csmr_ExtendedKeyboardAttributesCollection: _bindgen_ty_243 = 704;
pub const kHIDUsage_Csmr_KeyboardFormFactor: _bindgen_ty_243 = 705;
pub const kHIDUsage_Csmr_KeyboardKeyType: _bindgen_ty_243 = 706;
pub const kHIDUsage_Csmr_KeyboardPhysicalLayout: _bindgen_ty_243 = 707;
pub const kHIDUsage_Csmr_VendorSpecificKeyboardPhysicalLayout: _bindgen_ty_243 = 708;
pub const kHIDUsage_Csmr_KeyboardIETFLanguageTagIndex: _bindgen_ty_243 = 709;
pub const kHIDUsage_Csmr_ImplementedKeyboardInputAssistControls: _bindgen_ty_243 = 710;
pub const kHIDUsage_Csmr_KeyboardInputAssistPrevious: _bindgen_ty_243 = 711;
pub const kHIDUsage_Csmr_KeyboardInputAssistNext: _bindgen_ty_243 = 712;
pub const kHIDUsage_Csmr_KeyboardInputAssistPreviousGroup: _bindgen_ty_243 = 713;
pub const kHIDUsage_Csmr_KeyboardInputAssistNextGroup: _bindgen_ty_243 = 714;
pub const kHIDUsage_Csmr_KeyboardInputAssistAccept: _bindgen_ty_243 = 715;
pub const kHIDUsage_Csmr_KeyboardInputAssistCancel: _bindgen_ty_243 = 716;
pub const kHIDUsage_Csmr_ContactEdited: _bindgen_ty_243 = 1280;
pub const kHIDUsage_Csmr_ContactAdded: _bindgen_ty_243 = 1281;
pub const kHIDUsage_Csmr_ContactRecordActive: _bindgen_ty_243 = 1282;
pub const kHIDUsage_Csmr_ContactIndex: _bindgen_ty_243 = 1283;
pub const kHIDUsage_Csmr_ContactNickname: _bindgen_ty_243 = 1284;
pub const kHIDUsage_Csmr_ContactFirstName: _bindgen_ty_243 = 1285;
pub const kHIDUsage_Csmr_ContactLastName: _bindgen_ty_243 = 1286;
pub const kHIDUsage_Csmr_ContactFullName: _bindgen_ty_243 = 1287;
pub const kHIDUsage_Csmr_ContactPhoneNumberPersonal: _bindgen_ty_243 = 1288;
pub const kHIDUsage_Csmr_ContactPhoneNumberBusiness: _bindgen_ty_243 = 1289;
pub const kHIDUsage_Csmr_ContactPhoneNumberMobile: _bindgen_ty_243 = 1290;
pub const kHIDUsage_Csmr_ContactPhoneNumberPager: _bindgen_ty_243 = 1291;
pub const kHIDUsage_Csmr_ContactPhoneNumberFax: _bindgen_ty_243 = 1292;
pub const kHIDUsage_Csmr_ContactPhoneNumberOther: _bindgen_ty_243 = 1293;
pub const kHIDUsage_Csmr_ContactEmailPersonal: _bindgen_ty_243 = 1294;
pub const kHIDUsage_Csmr_ContactEmailBusiness: _bindgen_ty_243 = 1295;
pub const kHIDUsage_Csmr_ContactEmailOther: _bindgen_ty_243 = 1296;
pub const kHIDUsage_Csmr_ContactEmailMain: _bindgen_ty_243 = 1297;
pub const kHIDUsage_Csmr_ContactSpeedDialNumber: _bindgen_ty_243 = 1298;
pub const kHIDUsage_Csmr_ContactStatusFlag: _bindgen_ty_243 = 1299;
pub const kHIDUsage_Csmr_ContactMisc: _bindgen_ty_243 = 1300;
pub const kHIDUsage_Csmr_Reserved: _bindgen_ty_243 = 65535;
pub type _bindgen_ty_243 = ::std::os::raw::c_uint;
pub const kHIDUsage_Dig_Digitizer: _bindgen_ty_244 = 1;
pub const kHIDUsage_Dig_Pen: _bindgen_ty_244 = 2;
pub const kHIDUsage_Dig_LightPen: _bindgen_ty_244 = 3;
pub const kHIDUsage_Dig_TouchScreen: _bindgen_ty_244 = 4;
pub const kHIDUsage_Dig_TouchPad: _bindgen_ty_244 = 5;
pub const kHIDUsage_Dig_WhiteBoard: _bindgen_ty_244 = 6;
pub const kHIDUsage_Dig_CoordinateMeasuringMachine: _bindgen_ty_244 = 7;
pub const kHIDUsage_Dig_3DDigitizer: _bindgen_ty_244 = 8;
pub const kHIDUsage_Dig_StereoPlotter: _bindgen_ty_244 = 9;
pub const kHIDUsage_Dig_ArticulatedArm: _bindgen_ty_244 = 10;
pub const kHIDUsage_Dig_Armature: _bindgen_ty_244 = 11;
pub const kHIDUsage_Dig_MultiplePointDigitizer: _bindgen_ty_244 = 12;
pub const kHIDUsage_Dig_FreeSpaceWand: _bindgen_ty_244 = 13;
pub const kHIDUsage_Dig_DeviceConfiguration: _bindgen_ty_244 = 14;
pub const kHIDUsage_Dig_Stylus: _bindgen_ty_244 = 32;
pub const kHIDUsage_Dig_Puck: _bindgen_ty_244 = 33;
pub const kHIDUsage_Dig_Finger: _bindgen_ty_244 = 34;
pub const kHIDUsage_Dig_DeviceSettings: _bindgen_ty_244 = 35;
pub const kHIDUsage_Dig_GestureCharacter: _bindgen_ty_244 = 36;
pub const kHIDUsage_Dig_TipPressure: _bindgen_ty_244 = 48;
pub const kHIDUsage_Dig_BarrelPressure: _bindgen_ty_244 = 49;
pub const kHIDUsage_Dig_InRange: _bindgen_ty_244 = 50;
pub const kHIDUsage_Dig_Touch: _bindgen_ty_244 = 51;
pub const kHIDUsage_Dig_Untouch: _bindgen_ty_244 = 52;
pub const kHIDUsage_Dig_Tap: _bindgen_ty_244 = 53;
pub const kHIDUsage_Dig_Quality: _bindgen_ty_244 = 54;
pub const kHIDUsage_Dig_DataValid: _bindgen_ty_244 = 55;
pub const kHIDUsage_Dig_TransducerIndex: _bindgen_ty_244 = 56;
pub const kHIDUsage_Dig_TabletFunctionKeys: _bindgen_ty_244 = 57;
pub const kHIDUsage_Dig_ProgramChangeKeys: _bindgen_ty_244 = 58;
pub const kHIDUsage_Dig_BatteryStrength: _bindgen_ty_244 = 59;
pub const kHIDUsage_Dig_Invert: _bindgen_ty_244 = 60;
pub const kHIDUsage_Dig_XTilt: _bindgen_ty_244 = 61;
pub const kHIDUsage_Dig_YTilt: _bindgen_ty_244 = 62;
pub const kHIDUsage_Dig_Azimuth: _bindgen_ty_244 = 63;
pub const kHIDUsage_Dig_Altitude: _bindgen_ty_244 = 64;
pub const kHIDUsage_Dig_Twist: _bindgen_ty_244 = 65;
pub const kHIDUsage_Dig_TipSwitch: _bindgen_ty_244 = 66;
pub const kHIDUsage_Dig_SecondaryTipSwitch: _bindgen_ty_244 = 67;
pub const kHIDUsage_Dig_BarrelSwitch: _bindgen_ty_244 = 68;
pub const kHIDUsage_Dig_Eraser: _bindgen_ty_244 = 69;
pub const kHIDUsage_Dig_TabletPick: _bindgen_ty_244 = 70;
pub const kHIDUsage_Dig_TouchValid: _bindgen_ty_244 = 71;
pub const kHIDUsage_Dig_Width: _bindgen_ty_244 = 72;
pub const kHIDUsage_Dig_Height: _bindgen_ty_244 = 73;
pub const kHIDUsage_Dig_ContactIdentifier: _bindgen_ty_244 = 81;
pub const kHIDUsage_Dig_DeviceMode: _bindgen_ty_244 = 82;
pub const kHIDUsage_Dig_DeviceIdentifier: _bindgen_ty_244 = 83;
pub const kHIDUsage_Dig_ContactCount: _bindgen_ty_244 = 84;
pub const kHIDUsage_Dig_ContactCountMaximum: _bindgen_ty_244 = 85;
pub const kHIDUsage_Dig_RelativeScanTime: _bindgen_ty_244 = 86;
pub const kHIDUsage_Dig_SurfaceSwitch: _bindgen_ty_244 = 87;
pub const kHIDUsage_Dig_GestureCharacterEnable: _bindgen_ty_244 = 96;
pub const kHIDUsage_Dig_GestureCharacterQuality: _bindgen_ty_244 = 97;
pub const kHIDUsage_Dig_GestureCharacterDataLength: _bindgen_ty_244 = 98;
pub const kHIDUsage_Dig_GestureCharacterData: _bindgen_ty_244 = 99;
pub const kHIDUsage_Dig_GestureCharacterEncoding: _bindgen_ty_244 = 100;
pub const kHIDUsage_Dig_GestureCharacterEncodingUTF8: _bindgen_ty_244 = 101;
pub const kHIDUsage_Dig_GestureCharacterEncodingUTF16LE: _bindgen_ty_244 = 102;
pub const kHIDUsage_Dig_GestureCharacterEncodingUTF16BE: _bindgen_ty_244 = 103;
pub const kHIDUsage_Dig_GestureCharacterEncodingUTF32LE: _bindgen_ty_244 = 104;
pub const kHIDUsage_Dig_GestureCharacterEncodingUTF32BE: _bindgen_ty_244 = 105;
pub const kHIDUsage_Dig_ReportRate: _bindgen_ty_244 = 161;
pub const kHIDUsage_Dig_Reserved: _bindgen_ty_244 = 65535;
pub type _bindgen_ty_244 = ::std::os::raw::c_uint;
pub const kHIDUsage_Haptics_SimpleHapticController: _bindgen_ty_245 = 1;
pub const kHIDUsage_Haptics_WaveformList: _bindgen_ty_245 = 16;
pub const kHIDUsage_Haptics_DurationList: _bindgen_ty_245 = 17;
pub const kHIDUsage_Haptics_AutoTrigger: _bindgen_ty_245 = 32;
pub const kHIDUsage_Haptics_ManualTrigger: _bindgen_ty_245 = 33;
pub const kHIDUsage_Haptics_AutoTriggerAssociatedControl: _bindgen_ty_245 = 34;
pub const kHIDUsage_Haptics_Intensity: _bindgen_ty_245 = 35;
pub const kHIDUsage_Haptics_RepeatCount: _bindgen_ty_245 = 36;
pub const kHIDUsage_Haptics_RetriggerPeriod: _bindgen_ty_245 = 37;
pub const kHIDUsage_Haptics_WaveformVendorPage: _bindgen_ty_245 = 38;
pub const kHIDUsage_Haptics_WaveformVendorID: _bindgen_ty_245 = 39;
pub const kHIDUsage_Haptics_WaveformCutoffTime: _bindgen_ty_245 = 40;
pub const kHIDUsage_Haptics_WaveformNone: _bindgen_ty_245 = 4097;
pub const kHIDUsage_Haptics_WaveformStop: _bindgen_ty_245 = 4098;
pub const kHIDUsage_Haptics_WaveformClick: _bindgen_ty_245 = 4099;
pub const kHIDUsage_Haptics_WaveformBuzzContinuous: _bindgen_ty_245 = 4100;
pub const kHIDUsage_Haptics_WaveformRumbleContinuous: _bindgen_ty_245 = 4101;
pub const kHIDUsage_Haptics_WaveformPress: _bindgen_ty_245 = 4102;
pub const kHIDUsage_Haptics_WaveformRelease: _bindgen_ty_245 = 4103;
pub const kHIDUsage_Haptics_VendorWaveformFirst: _bindgen_ty_245 = 8193;
pub const kHIDUsage_Haptics_VendorWaveformLast: _bindgen_ty_245 = 12287;
pub type _bindgen_ty_245 = ::std::os::raw::c_uint;
pub const kHIDUsage_PID_PhysicalInterfaceDevice: _bindgen_ty_246 = 1;
pub const kHIDUsage_PID_Normal: _bindgen_ty_246 = 32;
pub const kHIDUsage_PID_SetEffectReport: _bindgen_ty_246 = 33;
pub const kHIDUsage_PID_EffectBlockIndex: _bindgen_ty_246 = 34;
pub const kHIDUsage_PID_ParamBlockOffset: _bindgen_ty_246 = 35;
pub const kHIDUsage_PID_ROM_Flag: _bindgen_ty_246 = 36;
pub const kHIDUsage_PID_EffectType: _bindgen_ty_246 = 37;
pub const kHIDUsage_PID_ET_ConstantForce: _bindgen_ty_246 = 38;
pub const kHIDUsage_PID_ET_Ramp: _bindgen_ty_246 = 39;
pub const kHIDUsage_PID_ET_CustomForceData: _bindgen_ty_246 = 40;
pub const kHIDUsage_PID_ET_Square: _bindgen_ty_246 = 48;
pub const kHIDUsage_PID_ET_Sine: _bindgen_ty_246 = 49;
pub const kHIDUsage_PID_ET_Triangle: _bindgen_ty_246 = 50;
pub const kHIDUsage_PID_ET_SawtoothUp: _bindgen_ty_246 = 51;
pub const kHIDUsage_PID_ET_SawtoothDown: _bindgen_ty_246 = 52;
pub const kHIDUsage_PID_ET_Spring: _bindgen_ty_246 = 64;
pub const kHIDUsage_PID_ET_Damper: _bindgen_ty_246 = 65;
pub const kHIDUsage_PID_ET_Inertia: _bindgen_ty_246 = 66;
pub const kHIDUsage_PID_ET_Friction: _bindgen_ty_246 = 67;
pub const kHIDUsage_PID_Duration: _bindgen_ty_246 = 80;
pub const kHIDUsage_PID_SamplePeriod: _bindgen_ty_246 = 81;
pub const kHIDUsage_PID_Gain: _bindgen_ty_246 = 82;
pub const kHIDUsage_PID_TriggerButton: _bindgen_ty_246 = 83;
pub const kHIDUsage_PID_TriggerRepeatInterval: _bindgen_ty_246 = 84;
pub const kHIDUsage_PID_AxesEnable: _bindgen_ty_246 = 85;
pub const kHIDUsage_PID_DirectionEnable: _bindgen_ty_246 = 86;
pub const kHIDUsage_PID_Direction: _bindgen_ty_246 = 87;
pub const kHIDUsage_PID_TypeSpecificBlockOffset: _bindgen_ty_246 = 88;
pub const kHIDUsage_PID_BlockType: _bindgen_ty_246 = 89;
pub const kHIDUsage_PID_SetEnvelopeReport: _bindgen_ty_246 = 90;
pub const kHIDUsage_PID_AttackLevel: _bindgen_ty_246 = 91;
pub const kHIDUsage_PID_AttackTime: _bindgen_ty_246 = 92;
pub const kHIDUsage_PID_FadeLevel: _bindgen_ty_246 = 93;
pub const kHIDUsage_PID_FadeTime: _bindgen_ty_246 = 94;
pub const kHIDUsage_PID_SetConditionReport: _bindgen_ty_246 = 95;
pub const kHIDUsage_PID_CP_Offset: _bindgen_ty_246 = 96;
pub const kHIDUsage_PID_PositiveCoefficient: _bindgen_ty_246 = 97;
pub const kHIDUsage_PID_NegativeCoefficient: _bindgen_ty_246 = 98;
pub const kHIDUsage_PID_PositiveSaturation: _bindgen_ty_246 = 99;
pub const kHIDUsage_PID_NegativeSaturation: _bindgen_ty_246 = 100;
pub const kHIDUsage_PID_DeadBand: _bindgen_ty_246 = 101;
pub const kHIDUsage_PID_DownloadForceSample: _bindgen_ty_246 = 102;
pub const kHIDUsage_PID_IsochCustomForceEnable: _bindgen_ty_246 = 103;
pub const kHIDUsage_PID_CustomForceDataReport: _bindgen_ty_246 = 104;
pub const kHIDUsage_PID_CustomForceData: _bindgen_ty_246 = 105;
pub const kHIDUsage_PID_CustomForceVendorDefinedData: _bindgen_ty_246 = 106;
pub const kHIDUsage_PID_SetCustomForceReport: _bindgen_ty_246 = 107;
pub const kHIDUsage_PID_CustomForceDataOffset: _bindgen_ty_246 = 108;
pub const kHIDUsage_PID_SampleCount: _bindgen_ty_246 = 109;
pub const kHIDUsage_PID_SetPeriodicReport: _bindgen_ty_246 = 110;
pub const kHIDUsage_PID_Offset: _bindgen_ty_246 = 111;
pub const kHIDUsage_PID_Magnitude: _bindgen_ty_246 = 112;
pub const kHIDUsage_PID_Phase: _bindgen_ty_246 = 113;
pub const kHIDUsage_PID_Period: _bindgen_ty_246 = 114;
pub const kHIDUsage_PID_SetConstantForceReport: _bindgen_ty_246 = 115;
pub const kHIDUsage_PID_SetRampForceReport: _bindgen_ty_246 = 116;
pub const kHIDUsage_PID_RampStart: _bindgen_ty_246 = 117;
pub const kHIDUsage_PID_RampEnd: _bindgen_ty_246 = 118;
pub const kHIDUsage_PID_EffectOperationReport: _bindgen_ty_246 = 119;
pub const kHIDUsage_PID_EffectOperation: _bindgen_ty_246 = 120;
pub const kHIDUsage_PID_OpEffectStart: _bindgen_ty_246 = 121;
pub const kHIDUsage_PID_OpEffectStartSolo: _bindgen_ty_246 = 122;
pub const kHIDUsage_PID_OpEffectStop: _bindgen_ty_246 = 123;
pub const kHIDUsage_PID_LoopCount: _bindgen_ty_246 = 124;
pub const kHIDUsage_PID_DeviceGainReport: _bindgen_ty_246 = 125;
pub const kHIDUsage_PID_DeviceGain: _bindgen_ty_246 = 126;
pub const kHIDUsage_PID_PoolReport: _bindgen_ty_246 = 127;
pub const kHIDUsage_PID_RAM_PoolSize: _bindgen_ty_246 = 128;
pub const kHIDUsage_PID_ROM_PoolSize: _bindgen_ty_246 = 129;
pub const kHIDUsage_PID_ROM_EffectBlockCount: _bindgen_ty_246 = 130;
pub const kHIDUsage_PID_SimultaneousEffectsMax: _bindgen_ty_246 = 131;
pub const kHIDUsage_PID_PoolAlignment: _bindgen_ty_246 = 132;
pub const kHIDUsage_PID_PoolMoveReport: _bindgen_ty_246 = 133;
pub const kHIDUsage_PID_MoveSource: _bindgen_ty_246 = 134;
pub const kHIDUsage_PID_MoveDestination: _bindgen_ty_246 = 135;
pub const kHIDUsage_PID_MoveLength: _bindgen_ty_246 = 136;
pub const kHIDUsage_PID_BlockLoadReport: _bindgen_ty_246 = 137;
pub const kHIDUsage_PID_BlockLoadStatus: _bindgen_ty_246 = 139;
pub const kHIDUsage_PID_BlockLoadSuccess: _bindgen_ty_246 = 140;
pub const kHIDUsage_PID_BlockLoadFull: _bindgen_ty_246 = 141;
pub const kHIDUsage_PID_BlockLoadError: _bindgen_ty_246 = 142;
pub const kHIDUsage_PID_BlockHandle: _bindgen_ty_246 = 143;
pub const kHIDUsage_PID_BlockFreeReport: _bindgen_ty_246 = 144;
pub const kHIDUsage_PID_TypeSpecificBlockHandle: _bindgen_ty_246 = 145;
pub const kHIDUsage_PID_StateReport: _bindgen_ty_246 = 146;
pub const kHIDUsage_PID_EffectPlaying: _bindgen_ty_246 = 148;
pub const kHIDUsage_PID_DeviceControlReport: _bindgen_ty_246 = 149;
pub const kHIDUsage_PID_DeviceControl: _bindgen_ty_246 = 150;
pub const kHIDUsage_PID_DC_EnableActuators: _bindgen_ty_246 = 151;
pub const kHIDUsage_PID_DC_DisableActuators: _bindgen_ty_246 = 152;
pub const kHIDUsage_PID_DC_StopAllEffects: _bindgen_ty_246 = 153;
pub const kHIDUsage_PID_DC_DeviceReset: _bindgen_ty_246 = 154;
pub const kHIDUsage_PID_DC_DevicePause: _bindgen_ty_246 = 155;
pub const kHIDUsage_PID_DC_DeviceContinue: _bindgen_ty_246 = 156;
pub const kHIDUsage_PID_DevicePaused: _bindgen_ty_246 = 159;
pub const kHIDUsage_PID_ActuatorsEnabled: _bindgen_ty_246 = 160;
pub const kHIDUsage_PID_SafetySwitch: _bindgen_ty_246 = 164;
pub const kHIDUsage_PID_ActuatorOverrideSwitch: _bindgen_ty_246 = 165;
pub const kHIDUsage_PID_ActuatorPower: _bindgen_ty_246 = 166;
pub const kHIDUsage_PID_StartDelay: _bindgen_ty_246 = 167;
pub const kHIDUsage_PID_ParameterBlockSize: _bindgen_ty_246 = 168;
pub const kHIDUsage_PID_DeviceManagedPool: _bindgen_ty_246 = 169;
pub const kHIDUsage_PID_SharedParameterBlocks: _bindgen_ty_246 = 170;
pub const kHIDUsage_PID_CreateNewEffectReport: _bindgen_ty_246 = 171;
pub const kHIDUsage_PID_RAM_PoolAvailable: _bindgen_ty_246 = 172;
pub const kHIDUsage_PID_Reserved: _bindgen_ty_246 = 65535;
pub type _bindgen_ty_246 = ::std::os::raw::c_uint;
pub const kHIDUsage_AD_AlphanumericDisplay: _bindgen_ty_247 = 1;
pub const kHIDUsage_AD_DisplayAttributesReport: _bindgen_ty_247 = 32;
pub const kHIDUsage_AD_ASCIICharacterSet: _bindgen_ty_247 = 33;
pub const kHIDUsage_AD_DataReadBack: _bindgen_ty_247 = 34;
pub const kHIDUsage_AD_FontReadBack: _bindgen_ty_247 = 35;
pub const kHIDUsage_AD_DisplayControlReport: _bindgen_ty_247 = 36;
pub const kHIDUsage_AD_ClearDisplay: _bindgen_ty_247 = 37;
pub const kHIDUsage_AD_DisplayEnable: _bindgen_ty_247 = 38;
pub const kHIDUsage_AD_ScreenSaverDelay: _bindgen_ty_247 = 39;
pub const kHIDUsage_AD_ScreenSaverEnable: _bindgen_ty_247 = 40;
pub const kHIDUsage_AD_VerticalScroll: _bindgen_ty_247 = 41;
pub const kHIDUsage_AD_HorizontalScroll: _bindgen_ty_247 = 42;
pub const kHIDUsage_AD_CharacterReport: _bindgen_ty_247 = 43;
pub const kHIDUsage_AD_DisplayData: _bindgen_ty_247 = 44;
pub const kHIDUsage_AD_DisplayStatus: _bindgen_ty_247 = 45;
pub const kHIDUsage_AD_StatNotReady: _bindgen_ty_247 = 46;
pub const kHIDUsage_AD_StatReady: _bindgen_ty_247 = 47;
pub const kHIDUsage_AD_ErrNotaloadablecharacter: _bindgen_ty_247 = 48;
pub const kHIDUsage_AD_ErrFontdatacannotberead: _bindgen_ty_247 = 49;
pub const kHIDUsage_AD_CursorPositionReport: _bindgen_ty_247 = 50;
pub const kHIDUsage_AD_Row: _bindgen_ty_247 = 51;
pub const kHIDUsage_AD_Column: _bindgen_ty_247 = 52;
pub const kHIDUsage_AD_Rows: _bindgen_ty_247 = 53;
pub const kHIDUsage_AD_Columns: _bindgen_ty_247 = 54;
pub const kHIDUsage_AD_CursorPixelPositioning: _bindgen_ty_247 = 55;
pub const kHIDUsage_AD_CursorMode: _bindgen_ty_247 = 56;
pub const kHIDUsage_AD_CursorEnable: _bindgen_ty_247 = 57;
pub const kHIDUsage_AD_CursorBlink: _bindgen_ty_247 = 58;
pub const kHIDUsage_AD_FontReport: _bindgen_ty_247 = 59;
pub const kHIDUsage_AD_FontData: _bindgen_ty_247 = 60;
pub const kHIDUsage_AD_CharacterWidth: _bindgen_ty_247 = 61;
pub const kHIDUsage_AD_CharacterHeight: _bindgen_ty_247 = 62;
pub const kHIDUsage_AD_CharacterSpacingHorizontal: _bindgen_ty_247 = 63;
pub const kHIDUsage_AD_CharacterSpacingVertical: _bindgen_ty_247 = 64;
pub const kHIDUsage_AD_UnicodeCharacterSet: _bindgen_ty_247 = 65;
pub const kHIDUsage_AD_Reserved: _bindgen_ty_247 = 65535;
pub type _bindgen_ty_247 = ::std::os::raw::c_uint;
pub const kHIDUsage_Snsr_Undefined: _bindgen_ty_248 = 0;
pub const kHIDUsage_Snsr_Sensor: _bindgen_ty_248 = 1;
pub const kHIDUsage_Snsr_Biometric: _bindgen_ty_248 = 16;
pub const kHIDUsage_Snsr_Biometric_HumanPresence: _bindgen_ty_248 = 17;
pub const kHIDUsage_Snsr_Biometric_HumanProximity: _bindgen_ty_248 = 18;
pub const kHIDUsage_Snsr_Biometric_HumanTouch: _bindgen_ty_248 = 19;
pub const kHIDUsage_Snsr_Electrical: _bindgen_ty_248 = 32;
pub const kHIDUsage_Snsr_Electrical_Capacitance: _bindgen_ty_248 = 33;
pub const kHIDUsage_Snsr_Electrical_Current: _bindgen_ty_248 = 34;
pub const kHIDUsage_Snsr_Electrical_Power: _bindgen_ty_248 = 35;
pub const kHIDUsage_Snsr_Electrical_Inductance: _bindgen_ty_248 = 36;
pub const kHIDUsage_Snsr_Electrical_Resistance: _bindgen_ty_248 = 37;
pub const kHIDUsage_Snsr_Electrical_Voltage: _bindgen_ty_248 = 38;
pub const kHIDUsage_Snsr_Electrical_Potentiometer: _bindgen_ty_248 = 39;
pub const kHIDUsage_Snsr_Electrical_Frequency: _bindgen_ty_248 = 40;
pub const kHIDUsage_Snsr_Electrical_Period: _bindgen_ty_248 = 41;
pub const kHIDUsage_Snsr_Environmental: _bindgen_ty_248 = 48;
pub const kHIDUsage_Snsr_Environmental_AtmosphericPressure: _bindgen_ty_248 = 49;
pub const kHIDUsage_Snsr_Environmental_Humidity: _bindgen_ty_248 = 50;
pub const kHIDUsage_Snsr_Environmental_Temperature: _bindgen_ty_248 = 51;
pub const kHIDUsage_Snsr_Environmental_WindDirection: _bindgen_ty_248 = 52;
pub const kHIDUsage_Snsr_Environmental_WindSpeed: _bindgen_ty_248 = 53;
pub const kHIDUsage_Snsr_Light: _bindgen_ty_248 = 64;
pub const kHIDUsage_Snsr_Light_AmbientLight: _bindgen_ty_248 = 65;
pub const kHIDUsage_Snsr_Light_ConsumerInfrared: _bindgen_ty_248 = 66;
pub const kHIDUsage_Snsr_Location: _bindgen_ty_248 = 80;
pub const kHIDUsage_Snsr_Location_Broadcast: _bindgen_ty_248 = 81;
pub const kHIDUsage_Snsr_Location_DeadReckoning: _bindgen_ty_248 = 82;
pub const kHIDUsage_Snsr_Location_GPS: _bindgen_ty_248 = 83;
pub const kHIDUsage_Snsr_Location_Lookup: _bindgen_ty_248 = 84;
pub const kHIDUsage_Snsr_Location_Other: _bindgen_ty_248 = 85;
pub const kHIDUsage_Snsr_Location_Static: _bindgen_ty_248 = 86;
pub const kHIDUsage_Snsr_Location_Triangulation: _bindgen_ty_248 = 87;
pub const kHIDUsage_Snsr_Mechanical: _bindgen_ty_248 = 96;
pub const kHIDUsage_Snsr_Mechanical_BooleanSwitch: _bindgen_ty_248 = 97;
pub const kHIDUsage_Snsr_Mechanical_BooleanSwitchArray: _bindgen_ty_248 = 98;
pub const kHIDUsage_Snsr_Mechanical_MultivalueSwitch: _bindgen_ty_248 = 99;
pub const kHIDUsage_Snsr_Mechanical_Force: _bindgen_ty_248 = 100;
pub const kHIDUsage_Snsr_Mechanical_Pressure: _bindgen_ty_248 = 101;
pub const kHIDUsage_Snsr_Mechanical_Strain: _bindgen_ty_248 = 102;
pub const kHIDUsage_Snsr_Mechanical_Weight: _bindgen_ty_248 = 103;
pub const kHIDUsage_Snsr_Mechanical_HapticVibrator: _bindgen_ty_248 = 104;
pub const kHIDUsage_Snsr_Mechanical_HallEffectSwitch: _bindgen_ty_248 = 105;
pub const kHIDUsage_Snsr_Motion: _bindgen_ty_248 = 112;
pub const kHIDUsage_Snsr_Motion_Accelerometer1D: _bindgen_ty_248 = 113;
pub const kHIDUsage_Snsr_Motion_Accelerometer2D: _bindgen_ty_248 = 114;
pub const kHIDUsage_Snsr_Motion_Accelerometer3D: _bindgen_ty_248 = 115;
pub const kHIDUsage_Snsr_Motion_Gyrometer1D: _bindgen_ty_248 = 116;
pub const kHIDUsage_Snsr_Motion_Gyrometer2D: _bindgen_ty_248 = 117;
pub const kHIDUsage_Snsr_Motion_Gyrometer3D: _bindgen_ty_248 = 118;
pub const kHIDUsage_Snsr_Motion_MotionDetector: _bindgen_ty_248 = 119;
pub const kHIDUsage_Snsr_Motion_Speedometer: _bindgen_ty_248 = 120;
pub const kHIDUsage_Snsr_Motion_Accelerometer: _bindgen_ty_248 = 121;
pub const kHIDUsage_Snsr_Motion_Gyrometer: _bindgen_ty_248 = 122;
pub const kHIDUsage_Snsr_Orientation: _bindgen_ty_248 = 128;
pub const kHIDUsage_Snsr_Orientation_Compass1D: _bindgen_ty_248 = 129;
pub const kHIDUsage_Snsr_Orientation_Compass2D: _bindgen_ty_248 = 130;
pub const kHIDUsage_Snsr_Orientation_Compass3D: _bindgen_ty_248 = 131;
pub const kHIDUsage_Snsr_Orientation_Inclinometer1D: _bindgen_ty_248 = 132;
pub const kHIDUsage_Snsr_Orientation_Inclinometer2D: _bindgen_ty_248 = 133;
pub const kHIDUsage_Snsr_Orientation_Inclinometer3D: _bindgen_ty_248 = 134;
pub const kHIDUsage_Snsr_Orientation_Distance1D: _bindgen_ty_248 = 135;
pub const kHIDUsage_Snsr_Orientation_Distance2D: _bindgen_ty_248 = 136;
pub const kHIDUsage_Snsr_Orientation_Distance3D: _bindgen_ty_248 = 137;
pub const kHIDUsage_Snsr_Orientation_DeviceOrientation: _bindgen_ty_248 = 138;
pub const kHIDUsage_Snsr_Orientation_CompassD: _bindgen_ty_248 = 139;
pub const kHIDUsage_Snsr_Orientation_InclinometerD: _bindgen_ty_248 = 140;
pub const kHIDUsage_Snsr_Orientation_DistanceD: _bindgen_ty_248 = 141;
pub const kHIDUsage_Snsr_Scanner: _bindgen_ty_248 = 144;
pub const kHIDUsage_Snsr_Scanner_Barcode: _bindgen_ty_248 = 145;
pub const kHIDUsage_Snsr_Scanner_RFID: _bindgen_ty_248 = 146;
pub const kHIDUsage_Snsr_Scanner_NFC: _bindgen_ty_248 = 147;
pub const kHIDUsage_Snsr_Time: _bindgen_ty_248 = 160;
pub const kHIDUsage_Snsr_Time_AlarmTimer: _bindgen_ty_248 = 161;
pub const kHIDUsage_Snsr_Time_RealTimeClock: _bindgen_ty_248 = 162;
pub const kHIDUsage_Snsr_Other: _bindgen_ty_248 = 224;
pub const kHIDUsage_Snsr_Other_Custom: _bindgen_ty_248 = 225;
pub const kHIDUsage_Snsr_Other_Generic: _bindgen_ty_248 = 226;
pub const kHIDUsage_Snsr_Other_GenericEnumerator: _bindgen_ty_248 = 227;
pub const kHIDUsage_Snsr_Modifier_None: _bindgen_ty_248 = 0;
pub const kHIDUsage_Snsr_Modifier_ChangeSensitivityAbsolute: _bindgen_ty_248 = 1;
pub const kHIDUsage_Snsr_Modifier_Max: _bindgen_ty_248 = 2;
pub const kHIDUsage_Snsr_Modifier_Min: _bindgen_ty_248 = 3;
pub const kHIDUsage_Snsr_Modifier_Accuracy: _bindgen_ty_248 = 4;
pub const kHIDUsage_Snsr_Modifier_Resolution: _bindgen_ty_248 = 5;
pub const kHIDUsage_Snsr_Modifier_ThresholdHigh: _bindgen_ty_248 = 6;
pub const kHIDUsage_Snsr_Modifier_ThresholdLow: _bindgen_ty_248 = 7;
pub const kHIDUsage_Snsr_Modifier_CalibrationOffset: _bindgen_ty_248 = 8;
pub const kHIDUsage_Snsr_Modifier_CalibrationMultiplier: _bindgen_ty_248 = 9;
pub const kHIDUsage_Snsr_Modifier_ReportInterval: _bindgen_ty_248 = 10;
pub const kHIDUsage_Snsr_Modifier_FrequencyMax: _bindgen_ty_248 = 11;
pub const kHIDUsage_Snsr_Modifier_PeriodMax: _bindgen_ty_248 = 12;
pub const kHIDUsage_Snsr_Modifier_ChangeSensitivityPercentRange: _bindgen_ty_248 = 13;
pub const kHIDUsage_Snsr_Modifier_ChangeSensitivityPercentRelative: _bindgen_ty_248 = 14;
pub const kHIDUsage_Snsr_Modifier_VendorDefined: _bindgen_ty_248 = 15;
pub const kHIDUsage_Snsr_Event: _bindgen_ty_248 = 512;
pub const kHIDUsage_Snsr_Event_SensorState: _bindgen_ty_248 = 513;
pub const kHIDUsage_Snsr_Event_SensorEvent: _bindgen_ty_248 = 514;
pub const kHIDUsage_Snsr_Event_SensorState_Undefined: _bindgen_ty_248 = 2048;
pub const kHIDUsage_Snsr_Event_SensorState_Ready: _bindgen_ty_248 = 2049;
pub const kHIDUsage_Snsr_Event_SensorState_NotAvailable: _bindgen_ty_248 = 2050;
pub const kHIDUsage_Snsr_Event_SensorState_NoData: _bindgen_ty_248 = 2051;
pub const kHIDUsage_Snsr_Event_SensorState_Initializing: _bindgen_ty_248 = 2052;
pub const kHIDUsage_Snsr_Event_SensorState_AccessDenied: _bindgen_ty_248 = 2053;
pub const kHIDUsage_Snsr_Event_SensorState_Error: _bindgen_ty_248 = 2054;
pub const kHIDUsage_Snsr_Event_SensorEvent_Unknown: _bindgen_ty_248 = 2064;
pub const kHIDUsage_Snsr_Event_SensorEvent_StateChanged: _bindgen_ty_248 = 2065;
pub const kHIDUsage_Snsr_Event_SensorEvent_PropertyChanged: _bindgen_ty_248 = 2066;
pub const kHIDUsage_Snsr_Event_SensorEvent_DataUpdated: _bindgen_ty_248 = 2067;
pub const kHIDUsage_Snsr_Event_SensorEvent_PollResponse: _bindgen_ty_248 = 2068;
pub const kHIDUsage_Snsr_Event_SensorEvent_ChangeSensitivity: _bindgen_ty_248 = 2069;
pub const kHIDUsage_Snsr_Event_SensorEvent_RangeMaxReached: _bindgen_ty_248 = 2070;
pub const kHIDUsage_Snsr_Event_SensorEvent_RangeMinReached: _bindgen_ty_248 = 2071;
pub const kHIDUsage_Snsr_Event_SensorEvent_HighThresholdCrossUp: _bindgen_ty_248 = 2072;
pub const kHIDUsage_Snsr_Event_SensorEvent_HighThresholdCrossDown: _bindgen_ty_248 = 2073;
pub const kHIDUsage_Snsr_Event_SensorEvent_LowThresholdCrossUp: _bindgen_ty_248 = 2074;
pub const kHIDUsage_Snsr_Event_SensorEvent_LowThresholdCrossDown: _bindgen_ty_248 = 2075;
pub const kHIDUsage_Snsr_Event_SensorEvent_ZeroThresholdCrossUp: _bindgen_ty_248 = 2076;
pub const kHIDUsage_Snsr_Event_SensorEvent_ZeroThresholdCrossDown: _bindgen_ty_248 = 2077;
pub const kHIDUsage_Snsr_Event_SensorEvent_PeriodExceeded: _bindgen_ty_248 = 2078;
pub const kHIDUsage_Snsr_Event_SensorEvent_FrequencyExceeded: _bindgen_ty_248 = 2079;
pub const kHIDUsage_Snsr_Event_SensorEvent_ComplexTrigger: _bindgen_ty_248 = 2080;
pub const kHIDUsage_Snsr_Property: _bindgen_ty_248 = 768;
pub const kHIDUsage_Snsr_Property_FriendlyName: _bindgen_ty_248 = 769;
pub const kHIDUsage_Snsr_Property_PersistentUniqueID: _bindgen_ty_248 = 770;
pub const kHIDUsage_Snsr_Property_SensorStatus: _bindgen_ty_248 = 771;
pub const kHIDUsage_Snsr_Property_MinimumReportInterval: _bindgen_ty_248 = 772;
pub const kHIDUsage_Snsr_Property_Manufacturer: _bindgen_ty_248 = 773;
pub const kHIDUsage_Snsr_Property_Model: _bindgen_ty_248 = 774;
pub const kHIDUsage_Snsr_Property_SerialNumber: _bindgen_ty_248 = 775;
pub const kHIDUsage_Snsr_Property_Description: _bindgen_ty_248 = 776;
pub const kHIDUsage_Snsr_Property_ConnectionType: _bindgen_ty_248 = 777;
pub const kHIDUsage_Snsr_Property_DevicePath: _bindgen_ty_248 = 778;
pub const kHIDUsage_Snsr_Property_HardwareRevision: _bindgen_ty_248 = 779;
pub const kHIDUsage_Snsr_Property_FirmwareVersion: _bindgen_ty_248 = 780;
pub const kHIDUsage_Snsr_Property_ReleaseData: _bindgen_ty_248 = 781;
pub const kHIDUsage_Snsr_Property_ReportInterval: _bindgen_ty_248 = 782;
pub const kHIDUsage_Snsr_Property_ChangeSensitivityAbsolute: _bindgen_ty_248 = 783;
pub const kHIDUsage_Snsr_Property_ChangeSensitivityPercentRange: _bindgen_ty_248 = 784;
pub const kHIDUsage_Snsr_Property_ChangeSensitivityPercentRelative: _bindgen_ty_248 = 785;
pub const kHIDUsage_Snsr_Property_Accuracy: _bindgen_ty_248 = 786;
pub const kHIDUsage_Snsr_Property_Resolution: _bindgen_ty_248 = 787;
pub const kHIDUsage_Snsr_Property_Maximum: _bindgen_ty_248 = 788;
pub const kHIDUsage_Snsr_Property_Minimum: _bindgen_ty_248 = 789;
pub const kHIDUsage_Snsr_Property_ReportingState: _bindgen_ty_248 = 790;
pub const kHIDUsage_Snsr_Property_SamplingRate: _bindgen_ty_248 = 791;
pub const kHIDUsage_Snsr_Property_ResponseCurve: _bindgen_ty_248 = 792;
pub const kHIDUsage_Snsr_Property_PowerState: _bindgen_ty_248 = 793;
pub const kHIDUsage_Snsr_Property_MaxFIFOEvents: _bindgen_ty_248 = 794;
pub const kHIDUsage_Snsr_Property_ReportLatency: _bindgen_ty_248 = 795;
pub const kHIDUsage_Snsr_Property_ConnectionType_Integrated: _bindgen_ty_248 = 2096;
pub const kHIDUsage_Snsr_Property_ConnectionType_Attached: _bindgen_ty_248 = 2097;
pub const kHIDUsage_Snsr_Property_ConnectionType_External: _bindgen_ty_248 = 2098;
pub const kHIDUsage_Snsr_Property_ReportingState_NoEvents: _bindgen_ty_248 = 2112;
pub const kHIDUsage_Snsr_Property_ReportingState_AllEvents: _bindgen_ty_248 = 2113;
pub const kHIDUsage_Snsr_Property_ReportingState_ThresholdEvents: _bindgen_ty_248 = 2114;
pub const kHIDUsage_Snsr_Property_ReportingState_WakeNoEvents: _bindgen_ty_248 = 2115;
pub const kHIDUsage_Snsr_Property_ReportingState_WakeAllEvents: _bindgen_ty_248 = 2116;
pub const kHIDUsage_Snsr_Property_ReportingState_WakeThresholdEvents: _bindgen_ty_248 = 2117;
pub const kHIDUsage_Snsr_Property_PowerState_Undefined: _bindgen_ty_248 = 2128;
pub const kHIDUsage_Snsr_Property_PowerState_D0_FullPower: _bindgen_ty_248 = 2129;
pub const kHIDUsage_Snsr_Property_PowerState_D1_LowPower: _bindgen_ty_248 = 2130;
pub const kHIDUsage_Snsr_Property_PowerState_D2_Standby: _bindgen_ty_248 = 2131;
pub const kHIDUsage_Snsr_Property_PowerState_D3_Sleep: _bindgen_ty_248 = 2132;
pub const kHIDUsage_Snsr_Property_PowerState_D4_PowerOff: _bindgen_ty_248 = 2133;
pub const kHIDUsage_Snsr_Light_Illuminance: _bindgen_ty_248 = 1233;
pub const kHIDUsage_Snsr_Data_Location: _bindgen_ty_248 = 1024;
pub const kHIDUsage_Snsr_Data_Location_Reserved: _bindgen_ty_248 = 1025;
pub const kHIDUsage_Snsr_Data_Location_AltitudeAntennaSeaLevel: _bindgen_ty_248 = 1026;
pub const kHIDUsage_Snsr_Data_Location_DifferentialReferenceStationID: _bindgen_ty_248 = 1027;
pub const kHIDUsage_Snsr_Data_Location_AltitudeEllipsoidError: _bindgen_ty_248 = 1028;
pub const kHIDUsage_Snsr_Data_Location_AltitudeEllipsoid: _bindgen_ty_248 = 1029;
pub const kHIDUsage_Snsr_Data_Location_AltitudeSeaLevelError: _bindgen_ty_248 = 1030;
pub const kHIDUsage_Snsr_Data_Location_AltitudeSeaLevel: _bindgen_ty_248 = 1031;
pub const kHIDUsage_Snsr_Data_Location_DifferentialGPSDataAge: _bindgen_ty_248 = 1032;
pub const kHIDUsage_Snsr_Data_Location_ErrorRadius: _bindgen_ty_248 = 1033;
pub const kHIDUsage_Snsr_Data_Location_FixQuality: _bindgen_ty_248 = 1034;
pub const kHIDUsage_Snsr_Data_Location_FixQualityNoFix: _bindgen_ty_248 = 2160;
pub const kHIDUsage_Snsr_Data_Location_FixQualityGPS: _bindgen_ty_248 = 2161;
pub const kHIDUsage_Snsr_Data_Location_FixQualityDGPS: _bindgen_ty_248 = 2162;
pub const kHIDUsage_Snsr_Data_Location_FixType: _bindgen_ty_248 = 1035;
pub const kHIDUsage_Snsr_Data_Location_FixTypeNoFix: _bindgen_ty_248 = 2176;
pub const kHIDUsage_Snsr_Data_Location_FixTypeGPSSPSMode: _bindgen_ty_248 = 2177;
pub const kHIDUsage_Snsr_Data_Location_FixTypeDGPSSPSMode: _bindgen_ty_248 = 2178;
pub const kHIDUsage_Snsr_Data_Location_FixTypeGPSPPSMode: _bindgen_ty_248 = 2179;
pub const kHIDUsage_Snsr_Data_Location_FixTypeRealTimeKinematic: _bindgen_ty_248 = 2180;
pub const kHIDUsage_Snsr_Data_Location_FixTypeFloatRTK: _bindgen_ty_248 = 2181;
pub const kHIDUsage_Snsr_Data_Location_FixTypeEstimated: _bindgen_ty_248 = 2182;
pub const kHIDUsage_Snsr_Data_Location_FixTypeManualInputMode: _bindgen_ty_248 = 2183;
pub const kHIDUsage_Snsr_Data_Location_FixTypeSimulatorMode: _bindgen_ty_248 = 2184;
pub const kHIDUsage_Snsr_Data_Location_GeoidalSeparation: _bindgen_ty_248 = 1036;
pub const kHIDUsage_Snsr_Data_Location_GPSOperationMode: _bindgen_ty_248 = 1037;
pub const kHIDUsage_Snsr_Data_Location_GPSOperationModeManual: _bindgen_ty_248 = 2192;
pub const kHIDUsage_Snsr_Data_Location_GPSOperationModeAutomatic: _bindgen_ty_248 = 2193;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionMode: _bindgen_ty_248 = 1038;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionModeAutonomous: _bindgen_ty_248 = 2208;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionModeDGPS: _bindgen_ty_248 = 2209;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionModeEstimated: _bindgen_ty_248 = 2210;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionModeManualInput: _bindgen_ty_248 = 2211;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionModeSimulator: _bindgen_ty_248 = 2212;
pub const kHIDUsage_Snsr_Data_Location_GPSSelectionModeDataNotValid: _bindgen_ty_248 = 2213;
pub const kHIDUsage_Snsr_Data_Location_GPSStatus: _bindgen_ty_248 = 1039;
pub const kHIDUsage_Snsr_Data_Location_GPSStatusDataValid: _bindgen_ty_248 = 2224;
pub const kHIDUsage_Snsr_Data_Location_GPSStatusDataNotValid: _bindgen_ty_248 = 2225;
pub const kHIDUsage_Snsr_Data_Location_PositionDilutionOfPrecision: _bindgen_ty_248 = 1040;
pub const kHIDUsage_Snsr_Data_Location_HorizontalDilutionOfPrecision: _bindgen_ty_248 = 1041;
pub const kHIDUsage_Snsr_Data_Location_VerticalDilutionOfPrecision: _bindgen_ty_248 = 1042;
pub const kHIDUsage_Snsr_Data_Location_Latitude: _bindgen_ty_248 = 1043;
pub const kHIDUsage_Snsr_Data_Location_Longitude: _bindgen_ty_248 = 1044;
pub const kHIDUsage_Snsr_Data_Location_TrueHeading: _bindgen_ty_248 = 1045;
pub const kHIDUsage_Snsr_Data_Location_MagneticHeading: _bindgen_ty_248 = 1046;
pub const kHIDUsage_Snsr_Data_Location_MagneticVariation: _bindgen_ty_248 = 1047;
pub const kHIDUsage_Snsr_Data_Location_Speed: _bindgen_ty_248 = 1048;
pub const kHIDUsage_Snsr_Data_Location_SatellitesInView: _bindgen_ty_248 = 1049;
pub const kHIDUsage_Snsr_Data_Location_SatellitesInViewAzimuth: _bindgen_ty_248 = 1050;
pub const kHIDUsage_Snsr_Data_Location_SatellitesInViewElevation: _bindgen_ty_248 = 1051;
pub const kHIDUsage_Snsr_Data_Location_SatellitesInViewIDs: _bindgen_ty_248 = 1052;
pub const kHIDUsage_Snsr_Data_Location_SatellitesInViewPRNs: _bindgen_ty_248 = 1053;
pub const kHIDUsage_Snsr_Data_Location_SatellitesInViewSNRatios: _bindgen_ty_248 = 1054;
pub const kHIDUsage_Snsr_Data_Location_SatellitesUsedCount: _bindgen_ty_248 = 1055;
pub const kHIDUsage_Snsr_Data_Location_SatellitesUsedPRNs: _bindgen_ty_248 = 1056;
pub const kHIDUsage_Snsr_Data_Location_NMEASentence: _bindgen_ty_248 = 1057;
pub const kHIDUsage_Snsr_Data_Location_AddressLine1: _bindgen_ty_248 = 1058;
pub const kHIDUsage_Snsr_Data_Location_AddressLine2: _bindgen_ty_248 = 1059;
pub const kHIDUsage_Snsr_Data_Location_City: _bindgen_ty_248 = 1060;
pub const kHIDUsage_Snsr_Data_Location_StateOrProvince: _bindgen_ty_248 = 1061;
pub const kHIDUsage_Snsr_Data_Location_CountryOrRegion: _bindgen_ty_248 = 1062;
pub const kHIDUsage_Snsr_Data_Location_PostalCode: _bindgen_ty_248 = 1063;
pub const kHIDUsage_Snsr_Property_Location: _bindgen_ty_248 = 1066;
pub const kHIDUsage_Snsr_Property_Location_DesiredAccuracy: _bindgen_ty_248 = 1067;
pub const kHIDUsage_Snsr_Property_Location_AccuracyDefault: _bindgen_ty_248 = 2144;
pub const kHIDUsage_Snsr_Property_Location_AccuracyHigh: _bindgen_ty_248 = 2145;
pub const kHIDUsage_Snsr_Property_Location_AccuracyMedium: _bindgen_ty_248 = 2146;
pub const kHIDUsage_Snsr_Property_Location_AccuracyLow: _bindgen_ty_248 = 2147;
pub const kHIDUsage_Snsr_Data_Environmental: _bindgen_ty_248 = 1072;
pub const kHIDUsage_Snsr_Data_Environmental_AtmosphericPressure: _bindgen_ty_248 = 1073;
pub const kHIDUsage_Snsr_Data_Environmental_Reserved: _bindgen_ty_248 = 1074;
pub const kHIDUsage_Snsr_Data_Environmental_RelativeHumidity: _bindgen_ty_248 = 1075;
pub const kHIDUsage_Snsr_Data_Environmental_Temperature: _bindgen_ty_248 = 1076;
pub const kHIDUsage_Snsr_Data_Environmental_WindDirection: _bindgen_ty_248 = 1077;
pub const kHIDUsage_Snsr_Data_Environmental_WindSpeed: _bindgen_ty_248 = 1078;
pub const kHIDUsage_Snsr_Property_Environmental: _bindgen_ty_248 = 1088;
pub const kHIDUsage_Snsr_Property_Environmental_ReferencePressure: _bindgen_ty_248 = 1089;
pub const kHIDUsage_Snsr_Data_Motion: _bindgen_ty_248 = 1104;
pub const kHIDUsage_Snsr_Data_Motion_State: _bindgen_ty_248 = 1105;
pub const kHIDUsage_Snsr_Data_Motion_Acceleration: _bindgen_ty_248 = 1106;
pub const kHIDUsage_Snsr_Data_Motion_AccelerationAxisX: _bindgen_ty_248 = 1107;
pub const kHIDUsage_Snsr_Data_Motion_AccelerationAxisY: _bindgen_ty_248 = 1108;
pub const kHIDUsage_Snsr_Data_Motion_AccelerationAxisZ: _bindgen_ty_248 = 1109;
pub const kHIDUsage_Snsr_Data_Motion_AngularVelocity: _bindgen_ty_248 = 1110;
pub const kHIDUsage_Snsr_Data_Motion_AngularVelocityXAxis: _bindgen_ty_248 = 1111;
pub const kHIDUsage_Snsr_Data_Motion_AngularVelocityYAxis: _bindgen_ty_248 = 1112;
pub const kHIDUsage_Snsr_Data_Motion_AngularVelocityZAxis: _bindgen_ty_248 = 1113;
pub const kHIDUsage_Snsr_Data_Motion_AngularPosition: _bindgen_ty_248 = 1114;
pub const kHIDUsage_Snsr_Data_Motion_AngularPositionXAxis: _bindgen_ty_248 = 1115;
pub const kHIDUsage_Snsr_Data_Motion_AngularPositionYAxis: _bindgen_ty_248 = 1116;
pub const kHIDUsage_Snsr_Data_Motion_AngularPositionZAxis: _bindgen_ty_248 = 1117;
pub const kHIDUsage_Snsr_Data_Motion_Speed: _bindgen_ty_248 = 1118;
pub const kHIDUsage_Snsr_Data_Motion_Intensity: _bindgen_ty_248 = 1119;
pub const kHIDUsage_Snsr_Data_Orientation: _bindgen_ty_248 = 1136;
pub const kHIDUsage_Snsr_Data_Orientation_Heading: _bindgen_ty_248 = 1137;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingXAxis: _bindgen_ty_248 = 1138;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingYAxis: _bindgen_ty_248 = 1139;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingZAxis: _bindgen_ty_248 = 1140;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingCompensatedMagneticNorth: _bindgen_ty_248 = 1141;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingCompensatedTrueNorth: _bindgen_ty_248 = 1142;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingMagneticNorth: _bindgen_ty_248 = 1143;
pub const kHIDUsage_Snsr_Data_Orientation_HeadingTrueNorth: _bindgen_ty_248 = 1144;
pub const kHIDUsage_Snsr_Data_Orientation_Distance: _bindgen_ty_248 = 1145;
pub const kHIDUsage_Snsr_Data_Orientation_DistanceXAxis: _bindgen_ty_248 = 1146;
pub const kHIDUsage_Snsr_Data_Orientation_DistanceYAxis: _bindgen_ty_248 = 1147;
pub const kHIDUsage_Snsr_Data_Orientation_DistanceZAxis: _bindgen_ty_248 = 1148;
pub const kHIDUsage_Snsr_Data_Orientation_DistanceOutOfRange: _bindgen_ty_248 = 1149;
pub const kHIDUsage_Snsr_Data_Orientation_Tilt: _bindgen_ty_248 = 1150;
pub const kHIDUsage_Snsr_Data_Orientation_TiltXAxis: _bindgen_ty_248 = 1151;
pub const kHIDUsage_Snsr_Data_Orientation_TiltYAxis: _bindgen_ty_248 = 1152;
pub const kHIDUsage_Snsr_Data_Orientation_TiltZAxis: _bindgen_ty_248 = 1153;
pub const kHIDUsage_Snsr_Data_Orientation_RotationMatrix: _bindgen_ty_248 = 1154;
pub const kHIDUsage_Snsr_Data_Orientation_Quaternion: _bindgen_ty_248 = 1155;
pub const kHIDUsage_Snsr_Data_Orientation_MagneticFlux: _bindgen_ty_248 = 1156;
pub const kHIDUsage_Snsr_Data_Orientation_MagneticFluxXAxis: _bindgen_ty_248 = 1157;
pub const kHIDUsage_Snsr_Data_Orientation_MagneticFluxYAxis: _bindgen_ty_248 = 1158;
pub const kHIDUsage_Snsr_Data_Orientation_MagneticFluxZAxis: _bindgen_ty_248 = 1159;
pub const kHIDUsage_Snsr_Data_Mechanical: _bindgen_ty_248 = 1168;
pub const kHIDUsage_Snsr_Data_Mechanical_BooleanSwitchState: _bindgen_ty_248 = 1169;
pub const kHIDUsage_Snsr_Data_Mechanical_BooleanSwitchArrayStates: _bindgen_ty_248 = 1170;
pub const kHIDUsage_Snsr_Data_Mechanical_MultivalueSwitchValue: _bindgen_ty_248 = 1171;
pub const kHIDUsage_Snsr_Data_Mechanical_Force: _bindgen_ty_248 = 1172;
pub const kHIDUsage_Snsr_Data_Mechanical_AbsolutePressure: _bindgen_ty_248 = 1173;
pub const kHIDUsage_Snsr_Data_Mechanical_GaugePressure: _bindgen_ty_248 = 1174;
pub const kHIDUsage_Snsr_Data_Mechanical_Strain: _bindgen_ty_248 = 1175;
pub const kHIDUsage_Snsr_Data_Mechanical_Weight: _bindgen_ty_248 = 1176;
pub const kHIDUsage_Snsr_Property_Mechanical: _bindgen_ty_248 = 1184;
pub const kHIDUsage_Snsr_Property_Mechanical_VibrationState: _bindgen_ty_248 = 1185;
pub const kHIDUsage_Snsr_Property_Mechanical_ForwardVibrationSpeed: _bindgen_ty_248 = 1186;
pub const kHIDUsage_Snsr_Property_Mechanical_BackwardVibrationSpeed: _bindgen_ty_248 = 1187;
pub const kHIDUsage_Snsr_Data_Biometric: _bindgen_ty_248 = 1200;
pub const kHIDUsage_Snsr_Data_Biometric_HumanPresence: _bindgen_ty_248 = 1201;
pub const kHIDUsage_Snsr_Data_Biometric_HumanProximityRange: _bindgen_ty_248 = 1202;
pub const kHIDUsage_Snsr_Data_Biometric_HumanProximityOutOfRange: _bindgen_ty_248 = 1203;
pub const kHIDUsage_Snsr_Data_Biometric_HumanTouchState: _bindgen_ty_248 = 1204;
pub const kHIDUsage_Snsr_Data_Light: _bindgen_ty_248 = 1232;
pub const kHIDUsage_Snsr_Data_Light_Illuminance: _bindgen_ty_248 = 1233;
pub const kHIDUsage_Snsr_Data_Light_ColorTemperature: _bindgen_ty_248 = 1234;
pub const kHIDUsage_Snsr_Data_Light_Chromaticity: _bindgen_ty_248 = 1235;
pub const kHIDUsage_Snsr_Data_Light_ChromaticityX: _bindgen_ty_248 = 1236;
pub const kHIDUsage_Snsr_Data_Light_ChromaticityY: _bindgen_ty_248 = 1237;
pub const kHIDUsage_Snsr_Data_Light_ConsumerIRSentenceReceive: _bindgen_ty_248 = 1238;
pub const kHIDUsage_Snsr_Property_Light: _bindgen_ty_248 = 1248;
pub const kHIDUsage_Snsr_Property_Light_ConsumerIRSentenceSend: _bindgen_ty_248 = 1249;
pub const kHIDUsage_Snsr_Data_Scanner: _bindgen_ty_248 = 1264;
pub const kHIDUsage_Snsr_Data_Scanner_RFIDTag40Bit: _bindgen_ty_248 = 1265;
pub const kHIDUsage_Snsr_Data_Scanner_NFCSentenceReceive: _bindgen_ty_248 = 1266;
pub const kHIDUsage_Snsr_Property_Scanner: _bindgen_ty_248 = 1272;
pub const kHIDUsage_Snsr_Property_Scanner_NFCSentenceSend: _bindgen_ty_248 = 3913;
pub const kHIDUsage_Snsr_Data_Electrical: _bindgen_ty_248 = 1280;
pub const kHIDUsage_Snsr_Data_Electrical_Capacitance: _bindgen_ty_248 = 1281;
pub const kHIDUsage_Snsr_Data_Electrical_Current: _bindgen_ty_248 = 1282;
pub const kHIDUsage_Snsr_Data_Electrical_ElectricalPower: _bindgen_ty_248 = 1283;
pub const kHIDUsage_Snsr_Data_Electrical_Inductance: _bindgen_ty_248 = 1284;
pub const kHIDUsage_Snsr_Data_Electrical_Resistance: _bindgen_ty_248 = 1285;
pub const kHIDUsage_Snsr_Data_Electrical_Voltage: _bindgen_ty_248 = 1286;
pub const kHIDUsage_Snsr_Data_Electrical_Frequency: _bindgen_ty_248 = 1287;
pub const kHIDUsage_Snsr_Data_Electrical_Period: _bindgen_ty_248 = 1288;
pub const kHIDUsage_Snsr_Data_Electrical_PercentOfRange: _bindgen_ty_248 = 1289;
pub const kHIDUsage_Snsr_Data_Time: _bindgen_ty_248 = 1312;
pub const kHIDUsage_Snsr_Data_Time_Year: _bindgen_ty_248 = 1313;
pub const kHIDUsage_Snsr_Data_Time_Month: _bindgen_ty_248 = 1314;
pub const kHIDUsage_Snsr_Data_Time_Day: _bindgen_ty_248 = 1315;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeek: _bindgen_ty_248 = 1316;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekSunday: _bindgen_ty_248 = 2240;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekMonday: _bindgen_ty_248 = 2241;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekTuesday: _bindgen_ty_248 = 2242;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekWednesday: _bindgen_ty_248 = 2243;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekThursday: _bindgen_ty_248 = 2244;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekFriday: _bindgen_ty_248 = 2245;
pub const kHIDUsage_Snsr_Data_Time_DayOfWeekSaturday: _bindgen_ty_248 = 2246;
pub const kHIDUsage_Snsr_Data_Time_Hour: _bindgen_ty_248 = 1317;
pub const kHIDUsage_Snsr_Data_Time_Minute: _bindgen_ty_248 = 1318;
pub const kHIDUsage_Snsr_Data_Time_Second: _bindgen_ty_248 = 1319;
pub const kHIDUsage_Snsr_Data_Time_Millisecond: _bindgen_ty_248 = 1320;
pub const kHIDUsage_Snsr_Data_Time_Timestamp: _bindgen_ty_248 = 1321;
pub const kHIDUsage_Snsr_Data_Time_JulianDayOfYear: _bindgen_ty_248 = 1322;
pub const kHIDUsage_Snsr_Property_Time: _bindgen_ty_248 = 1328;
pub const kHIDUsage_Snsr_Property_Time_TimeZoneOffsetFromUTC: _bindgen_ty_248 = 1329;
pub const kHIDUsage_Snsr_Property_Time_TimeZoneName: _bindgen_ty_248 = 1330;
pub const kHIDUsage_Snsr_Property_Time_DaylightSavingsTimeObserved: _bindgen_ty_248 = 1331;
pub const kHIDUsage_Snsr_Property_Time_TimeTrimAdjustment: _bindgen_ty_248 = 1332;
pub const kHIDUsage_Snsr_Property_Time_ArmAlarm: _bindgen_ty_248 = 1333;
pub const kHIDUsage_Snsr_Data_Custom: _bindgen_ty_248 = 1344;
pub const kHIDUsage_Snsr_Data_Custom_Usage: _bindgen_ty_248 = 1345;
pub const kHIDUsage_Snsr_Data_Custom_BooleanArray: _bindgen_ty_248 = 1346;
pub const kHIDUsage_Snsr_Data_Custom_Value: _bindgen_ty_248 = 1347;
pub const kHIDUsage_Snsr_Data_Custom_Value1: _bindgen_ty_248 = 1348;
pub const kHIDUsage_Snsr_Data_Custom_Value2: _bindgen_ty_248 = 1349;
pub const kHIDUsage_Snsr_Data_Custom_Value3: _bindgen_ty_248 = 1350;
pub const kHIDUsage_Snsr_Data_Custom_Value4: _bindgen_ty_248 = 1351;
pub const kHIDUsage_Snsr_Data_Custom_Value5: _bindgen_ty_248 = 1352;
pub const kHIDUsage_Snsr_Data_Custom_Value6: _bindgen_ty_248 = 1353;
pub type _bindgen_ty_248 = ::std::os::raw::c_uint;
pub const kHIDUsage_PD_Undefined: _bindgen_ty_249 = 0;
pub const kHIDUsage_PD_iName: _bindgen_ty_249 = 1;
pub const kHIDUsage_PD_PresentStatus: _bindgen_ty_249 = 2;
pub const kHIDUsage_PD_ChangedStatus: _bindgen_ty_249 = 3;
pub const kHIDUsage_PD_UPS: _bindgen_ty_249 = 4;
pub const kHIDUsage_PD_PowerSupply: _bindgen_ty_249 = 5;
pub const kHIDUsage_PD_PeripheralDevice: _bindgen_ty_249 = 6;
pub const kHIDUsage_PD_BatterySystem: _bindgen_ty_249 = 16;
pub const kHIDUsage_PD_BatterySystemID: _bindgen_ty_249 = 17;
pub const kHIDUsage_PD_Battery: _bindgen_ty_249 = 18;
pub const kHIDUsage_PD_BatteryID: _bindgen_ty_249 = 19;
pub const kHIDUsage_PD_Charger: _bindgen_ty_249 = 20;
pub const kHIDUsage_PD_ChargerID: _bindgen_ty_249 = 21;
pub const kHIDUsage_PD_PowerConverter: _bindgen_ty_249 = 22;
pub const kHIDUsage_PD_PowerConverterID: _bindgen_ty_249 = 23;
pub const kHIDUsage_PD_OutletSystem: _bindgen_ty_249 = 24;
pub const kHIDUsage_PD_OutletSystemID: _bindgen_ty_249 = 25;
pub const kHIDUsage_PD_Input: _bindgen_ty_249 = 26;
pub const kHIDUsage_PD_InputID: _bindgen_ty_249 = 27;
pub const kHIDUsage_PD_Output: _bindgen_ty_249 = 28;
pub const kHIDUsage_PD_OutputID: _bindgen_ty_249 = 29;
pub const kHIDUsage_PD_Flow: _bindgen_ty_249 = 30;
pub const kHIDUsage_PD_FlowID: _bindgen_ty_249 = 31;
pub const kHIDUsage_PD_Outlet: _bindgen_ty_249 = 32;
pub const kHIDUsage_PD_OutletID: _bindgen_ty_249 = 33;
pub const kHIDUsage_PD_Gang: _bindgen_ty_249 = 34;
pub const kHIDUsage_PD_GangID: _bindgen_ty_249 = 35;
pub const kHIDUsage_PD_PowerSummary: _bindgen_ty_249 = 36;
pub const kHIDUsage_PD_PowerSummaryID: _bindgen_ty_249 = 37;
pub const kHIDUsage_PD_Voltage: _bindgen_ty_249 = 48;
pub const kHIDUsage_PD_Current: _bindgen_ty_249 = 49;
pub const kHIDUsage_PD_Frequency: _bindgen_ty_249 = 50;
pub const kHIDUsage_PD_ApparentPower: _bindgen_ty_249 = 51;
pub const kHIDUsage_PD_ActivePower: _bindgen_ty_249 = 52;
pub const kHIDUsage_PD_PercentLoad: _bindgen_ty_249 = 53;
pub const kHIDUsage_PD_Temperature: _bindgen_ty_249 = 54;
pub const kHIDUsage_PD_Humidity: _bindgen_ty_249 = 55;
pub const kHIDUsage_PD_BadCount: _bindgen_ty_249 = 56;
pub const kHIDUsage_PD_ConfigVoltage: _bindgen_ty_249 = 64;
pub const kHIDUsage_PD_ConfigCurrent: _bindgen_ty_249 = 65;
pub const kHIDUsage_PD_ConfigFrequency: _bindgen_ty_249 = 66;
pub const kHIDUsage_PD_ConfigApparentPower: _bindgen_ty_249 = 67;
pub const kHIDUsage_PD_ConfigActivePower: _bindgen_ty_249 = 68;
pub const kHIDUsage_PD_ConfigPercentLoad: _bindgen_ty_249 = 69;
pub const kHIDUsage_PD_ConfigTemperature: _bindgen_ty_249 = 70;
pub const kHIDUsage_PD_ConfigHumidity: _bindgen_ty_249 = 71;
pub const kHIDUsage_PD_SwitchOnControl: _bindgen_ty_249 = 80;
pub const kHIDUsage_PD_SwitchOffControl: _bindgen_ty_249 = 81;
pub const kHIDUsage_PD_ToggleControl: _bindgen_ty_249 = 82;
pub const kHIDUsage_PD_LowVoltageTransfer: _bindgen_ty_249 = 83;
pub const kHIDUsage_PD_HighVoltageTransfer: _bindgen_ty_249 = 84;
pub const kHIDUsage_PD_DelayBeforeReboot: _bindgen_ty_249 = 85;
pub const kHIDUsage_PD_DelayBeforeStartup: _bindgen_ty_249 = 86;
pub const kHIDUsage_PD_DelayBeforeShutdown: _bindgen_ty_249 = 87;
pub const kHIDUsage_PD_Test: _bindgen_ty_249 = 88;
pub const kHIDUsage_PD_ModuleReset: _bindgen_ty_249 = 89;
pub const kHIDUsage_PD_AudibleAlarmControl: _bindgen_ty_249 = 90;
pub const kHIDUsage_PD_Present: _bindgen_ty_249 = 96;
pub const kHIDUsage_PD_Good: _bindgen_ty_249 = 97;
pub const kHIDUsage_PD_InternalFailure: _bindgen_ty_249 = 98;
pub const kHIDUsage_PD_VoltageOutOfRange: _bindgen_ty_249 = 99;
pub const kHIDUsage_PD_FrequencyOutOfRange: _bindgen_ty_249 = 100;
pub const kHIDUsage_PD_Overload: _bindgen_ty_249 = 101;
pub const kHIDUsage_PD_OverCharged: _bindgen_ty_249 = 102;
pub const kHIDUsage_PD_OverTemperature: _bindgen_ty_249 = 103;
pub const kHIDUsage_PD_ShutdownRequested: _bindgen_ty_249 = 104;
pub const kHIDUsage_PD_ShutdownImminent: _bindgen_ty_249 = 105;
pub const kHIDUsage_PD_SwitchOnOff: _bindgen_ty_249 = 107;
pub const kHIDUsage_PD_Switchable: _bindgen_ty_249 = 108;
pub const kHIDUsage_PD_Used: _bindgen_ty_249 = 109;
pub const kHIDUsage_PD_Boost: _bindgen_ty_249 = 110;
pub const kHIDUsage_PD_Buck: _bindgen_ty_249 = 111;
pub const kHIDUsage_PD_Initialized: _bindgen_ty_249 = 112;
pub const kHIDUsage_PD_Tested: _bindgen_ty_249 = 113;
pub const kHIDUsage_PD_AwaitingPower: _bindgen_ty_249 = 114;
pub const kHIDUsage_PD_CommunicationLost: _bindgen_ty_249 = 115;
pub const kHIDUsage_PD_iManufacturer: _bindgen_ty_249 = 253;
pub const kHIDUsage_PD_iProduct: _bindgen_ty_249 = 254;
pub const kHIDUsage_PD_iserialNumber: _bindgen_ty_249 = 255;
pub type _bindgen_ty_249 = ::std::os::raw::c_uint;
pub const kHIDUsage_BS_Undefined: _bindgen_ty_250 = 0;
pub const kHIDUsage_BS_SMBBatteryMode: _bindgen_ty_250 = 1;
pub const kHIDUsage_BS_SMBBatteryStatus: _bindgen_ty_250 = 2;
pub const kHIDUsage_BS_SMBAlarmWarning: _bindgen_ty_250 = 3;
pub const kHIDUsage_BS_SMBChargerMode: _bindgen_ty_250 = 4;
pub const kHIDUsage_BS_SMBChargerStatus: _bindgen_ty_250 = 5;
pub const kHIDUsage_BS_SMBChargerSpecInfo: _bindgen_ty_250 = 6;
pub const kHIDUsage_BS_SMBSelectorState: _bindgen_ty_250 = 7;
pub const kHIDUsage_BS_SMBSelectorPresets: _bindgen_ty_250 = 8;
pub const kHIDUsage_BS_SMBSelectorInfo: _bindgen_ty_250 = 9;
pub const kHIDUsage_BS_OptionalMfgFunction1: _bindgen_ty_250 = 16;
pub const kHIDUsage_BS_OptionalMfgFunction2: _bindgen_ty_250 = 17;
pub const kHIDUsage_BS_OptionalMfgFunction3: _bindgen_ty_250 = 18;
pub const kHIDUsage_BS_OptionalMfgFunction4: _bindgen_ty_250 = 19;
pub const kHIDUsage_BS_OptionalMfgFunction5: _bindgen_ty_250 = 20;
pub const kHIDUsage_BS_ConnectionToSMBus: _bindgen_ty_250 = 21;
pub const kHIDUsage_BS_OutputConnection: _bindgen_ty_250 = 22;
pub const kHIDUsage_BS_ChargerConnection: _bindgen_ty_250 = 23;
pub const kHIDUsage_BS_BatteryInsertion: _bindgen_ty_250 = 24;
pub const kHIDUsage_BS_Usenext: _bindgen_ty_250 = 25;
pub const kHIDUsage_BS_OKToUse: _bindgen_ty_250 = 26;
pub const kHIDUsage_BS_BatterySupported: _bindgen_ty_250 = 27;
pub const kHIDUsage_BS_SelectorRevision: _bindgen_ty_250 = 28;
pub const kHIDUsage_BS_ChargingIndicator: _bindgen_ty_250 = 29;
pub const kHIDUsage_BS_ManufacturerAccess: _bindgen_ty_250 = 40;
pub const kHIDUsage_BS_RemainingCapacityLimit: _bindgen_ty_250 = 41;
pub const kHIDUsage_BS_RemainingTimeLimit: _bindgen_ty_250 = 42;
pub const kHIDUsage_BS_AtRate: _bindgen_ty_250 = 43;
pub const kHIDUsage_BS_CapacityMode: _bindgen_ty_250 = 44;
pub const kHIDUsage_BS_BroadcastToCharger: _bindgen_ty_250 = 45;
pub const kHIDUsage_BS_PrimaryBattery: _bindgen_ty_250 = 46;
pub const kHIDUsage_BS_ChargeController: _bindgen_ty_250 = 47;
pub const kHIDUsage_BS_TerminateCharge: _bindgen_ty_250 = 64;
pub const kHIDUsage_BS_TerminateDischarge: _bindgen_ty_250 = 65;
pub const kHIDUsage_BS_BelowRemainingCapacityLimit: _bindgen_ty_250 = 66;
pub const kHIDUsage_BS_RemainingTimeLimitExpired: _bindgen_ty_250 = 67;
pub const kHIDUsage_BS_Charging: _bindgen_ty_250 = 68;
pub const kHIDUsage_BS_Discharging: _bindgen_ty_250 = 69;
pub const kHIDUsage_BS_FullyCharged: _bindgen_ty_250 = 70;
pub const kHIDUsage_BS_FullyDischarged: _bindgen_ty_250 = 71;
pub const kHIDUsage_BS_ConditioningFlag: _bindgen_ty_250 = 72;
pub const kHIDUsage_BS_AtRateOK: _bindgen_ty_250 = 73;
pub const kHIDUsage_BS_SMBErrorCode: _bindgen_ty_250 = 74;
pub const kHIDUsage_BS_NeedReplacement: _bindgen_ty_250 = 75;
pub const kHIDUsage_BS_AtRateTimeToFull: _bindgen_ty_250 = 96;
pub const kHIDUsage_BS_AtRateTimeToEmpty: _bindgen_ty_250 = 97;
pub const kHIDUsage_BS_AverageCurrent: _bindgen_ty_250 = 98;
pub const kHIDUsage_BS_Maxerror: _bindgen_ty_250 = 99;
pub const kHIDUsage_BS_RelativeStateOfCharge: _bindgen_ty_250 = 100;
pub const kHIDUsage_BS_AbsoluteStateOfCharge: _bindgen_ty_250 = 101;
pub const kHIDUsage_BS_RemainingCapacity: _bindgen_ty_250 = 102;
pub const kHIDUsage_BS_FullChargeCapacity: _bindgen_ty_250 = 103;
pub const kHIDUsage_BS_RunTimeToEmpty: _bindgen_ty_250 = 104;
pub const kHIDUsage_BS_AverageTimeToEmpty: _bindgen_ty_250 = 105;
pub const kHIDUsage_BS_AverageTimeToFull: _bindgen_ty_250 = 106;
pub const kHIDUsage_BS_CycleCount: _bindgen_ty_250 = 107;
pub const kHIDUsage_BS_BattPackModelLevel: _bindgen_ty_250 = 128;
pub const kHIDUsage_BS_InternalChargeController: _bindgen_ty_250 = 129;
pub const kHIDUsage_BS_PrimaryBatterySupport: _bindgen_ty_250 = 130;
pub const kHIDUsage_BS_DesignCapacity: _bindgen_ty_250 = 131;
pub const kHIDUsage_BS_SpecificationInfo: _bindgen_ty_250 = 132;
pub const kHIDUsage_BS_ManufacturerDate: _bindgen_ty_250 = 133;
pub const kHIDUsage_BS_SerialNumber: _bindgen_ty_250 = 134;
pub const kHIDUsage_BS_iManufacturerName: _bindgen_ty_250 = 135;
pub const kHIDUsage_BS_iDevicename: _bindgen_ty_250 = 136;
pub const kHIDUsage_BS_iDeviceChemistry: _bindgen_ty_250 = 137;
pub const kHIDUsage_BS_ManufacturerData: _bindgen_ty_250 = 138;
pub const kHIDUsage_BS_Rechargable: _bindgen_ty_250 = 139;
pub const kHIDUsage_BS_WarningCapacityLimit: _bindgen_ty_250 = 140;
pub const kHIDUsage_BS_CapacityGranularity1: _bindgen_ty_250 = 141;
pub const kHIDUsage_BS_CapacityGranularity2: _bindgen_ty_250 = 142;
pub const kHIDUsage_BS_iOEMInformation: _bindgen_ty_250 = 143;
pub const kHIDUsage_BS_InhibitCharge: _bindgen_ty_250 = 192;
pub const kHIDUsage_BS_EnablePolling: _bindgen_ty_250 = 193;
pub const kHIDUsage_BS_ResetToZero: _bindgen_ty_250 = 194;
pub const kHIDUsage_BS_ACPresent: _bindgen_ty_250 = 208;
pub const kHIDUsage_BS_BatteryPresent: _bindgen_ty_250 = 209;
pub const kHIDUsage_BS_PowerFail: _bindgen_ty_250 = 210;
pub const kHIDUsage_BS_AlarmInhibited: _bindgen_ty_250 = 211;
pub const kHIDUsage_BS_ThermistorUnderRange: _bindgen_ty_250 = 212;
pub const kHIDUsage_BS_ThermistorHot: _bindgen_ty_250 = 213;
pub const kHIDUsage_BS_ThermistorCold: _bindgen_ty_250 = 214;
pub const kHIDUsage_BS_ThermistorOverRange: _bindgen_ty_250 = 215;
pub const kHIDUsage_BS_VoltageOutOfRange: _bindgen_ty_250 = 216;
pub const kHIDUsage_BS_CurrentOutOfRange: _bindgen_ty_250 = 217;
pub const kHIDUsage_BS_CurrentNotRegulated: _bindgen_ty_250 = 218;
pub const kHIDUsage_BS_VoltageNotRegulated: _bindgen_ty_250 = 219;
pub const kHIDUsage_BS_MasterMode: _bindgen_ty_250 = 220;
pub const kHIDUsage_BS_ChargerSelectorSupport: _bindgen_ty_250 = 240;
pub const kHIDUsage_BS_ChargerSpec: _bindgen_ty_250 = 241;
pub const kHIDUsage_BS_Level2: _bindgen_ty_250 = 242;
pub const kHIDUsage_BS_Level3: _bindgen_ty_250 = 243;
pub type _bindgen_ty_250 = ::std::os::raw::c_uint;
pub const kHIDUsage_BCS_Undefined: _bindgen_ty_251 = 0;
pub const kHIDUsage_BCS_BadgeReader: _bindgen_ty_251 = 1;
pub const kHIDUsage_BCS_BarCodeScanner: _bindgen_ty_251 = 2;
pub const kHIDUsage_BCS_DumbBarCodeScanner: _bindgen_ty_251 = 3;
pub const kHIDUsage_BCS_CordlessScannerBase: _bindgen_ty_251 = 4;
pub const kHIDUsage_BCS_BarCodeScannerCradle: _bindgen_ty_251 = 5;
pub const kHIDUsage_BCS_AttributeReport: _bindgen_ty_251 = 16;
pub const kHIDUsage_BCS_SettingsReport: _bindgen_ty_251 = 17;
pub const kHIDUsage_BCS_ScannedDataReport: _bindgen_ty_251 = 18;
pub const kHIDUsage_BCS_RawScannedDataReport: _bindgen_ty_251 = 19;
pub const kHIDUsage_BCS_TriggerReport: _bindgen_ty_251 = 20;
pub const kHIDUsage_BCS_StatusReport: _bindgen_ty_251 = 21;
pub const kHIDUsage_BCS_UPC_EANControlReport: _bindgen_ty_251 = 22;
pub const kHIDUsage_BCS_EAN2_3LabelControlReport: _bindgen_ty_251 = 23;
pub const kHIDUsage_BCS_Code39ControlReport: _bindgen_ty_251 = 24;
pub const kHIDUsage_BCS_Interleaved2of5ControlReport: _bindgen_ty_251 = 25;
pub const kHIDUsage_BCS_Standard2of5ControlReport: _bindgen_ty_251 = 26;
pub const kHIDUsage_BCS_MSIPlesseyControlReport: _bindgen_ty_251 = 27;
pub const kHIDUsage_BCS_CodabarControlReport: _bindgen_ty_251 = 28;
pub const kHIDUsage_BCS_Code128ControlReport: _bindgen_ty_251 = 29;
pub const kHIDUsage_BCS_Misc1DControlReport: _bindgen_ty_251 = 30;
pub const kHIDUsage_BCS_2DControlReport: _bindgen_ty_251 = 31;
pub const kHIDUsage_BCS_Aiming_PointerMide: _bindgen_ty_251 = 48;
pub const kHIDUsage_BCS_BarCodePresentSensor: _bindgen_ty_251 = 49;
pub const kHIDUsage_BCS_Class1ALaser: _bindgen_ty_251 = 50;
pub const kHIDUsage_BCS_Class2Laser: _bindgen_ty_251 = 51;
pub const kHIDUsage_BCS_HeaterPresent: _bindgen_ty_251 = 52;
pub const kHIDUsage_BCS_ContactScanner: _bindgen_ty_251 = 53;
pub const kHIDUsage_BCS_ElectronicArticleSurveillanceNotification: _bindgen_ty_251 = 54;
pub const kHIDUsage_BCS_ConstantElectronicArticleSurveillance: _bindgen_ty_251 = 55;
pub const kHIDUsage_BCS_ErrorIndication: _bindgen_ty_251 = 56;
pub const kHIDUsage_BCS_FixedBeeper: _bindgen_ty_251 = 57;
pub const kHIDUsage_BCS_GoodDecodeIndication: _bindgen_ty_251 = 58;
pub const kHIDUsage_BCS_HandsFreeScanning: _bindgen_ty_251 = 59;
pub const kHIDUsage_BCS_IntrinsicallySafe: _bindgen_ty_251 = 60;
pub const kHIDUsage_BCS_KlasseEinsLaser: _bindgen_ty_251 = 61;
pub const kHIDUsage_BCS_LongRangeScanner: _bindgen_ty_251 = 62;
pub const kHIDUsage_BCS_MirrorSpeedControl: _bindgen_ty_251 = 63;
pub const kHIDUsage_BCS_NotOnFileIndication: _bindgen_ty_251 = 64;
pub const kHIDUsage_BCS_ProgrammableBeeper: _bindgen_ty_251 = 65;
pub const kHIDUsage_BCS_Triggerless: _bindgen_ty_251 = 66;
pub const kHIDUsage_BCS_Wand: _bindgen_ty_251 = 67;
pub const kHIDUsage_BCS_WaterResistant: _bindgen_ty_251 = 68;
pub const kHIDUsage_BCS_MultiRangeScanner: _bindgen_ty_251 = 69;
pub const kHIDUsage_BCS_ProximitySensor: _bindgen_ty_251 = 70;
pub const kHIDUsage_BCS_FragmentDecoding: _bindgen_ty_251 = 77;
pub const kHIDUsage_BCS_ScannerReadConfidence: _bindgen_ty_251 = 78;
pub const kHIDUsage_BCS_DataPrefix: _bindgen_ty_251 = 79;
pub const kHIDUsage_BCS_PrefixAIMI: _bindgen_ty_251 = 80;
pub const kHIDUsage_BCS_PrefixNone: _bindgen_ty_251 = 81;
pub const kHIDUsage_BCS_PrefixProprietary: _bindgen_ty_251 = 82;
pub const kHIDUsage_BCS_ActiveTime: _bindgen_ty_251 = 85;
pub const kHIDUsage_BCS_AimingLaserPattern: _bindgen_ty_251 = 86;
pub const kHIDUsage_BCS_BarCodePresent: _bindgen_ty_251 = 87;
pub const kHIDUsage_BCS_BeeperState: _bindgen_ty_251 = 88;
pub const kHIDUsage_BCS_LaserOnTime: _bindgen_ty_251 = 89;
pub const kHIDUsage_BCS_LaserState: _bindgen_ty_251 = 90;
pub const kHIDUsage_BCS_LockoutTime: _bindgen_ty_251 = 91;
pub const kHIDUsage_BCS_MotorState: _bindgen_ty_251 = 92;
pub const kHIDUsage_BCS_MotorTimeout: _bindgen_ty_251 = 93;
pub const kHIDUsage_BCS_PowerOnResetScanner: _bindgen_ty_251 = 94;
pub const kHIDUsage_BCS_PreventReadOfBarcodes: _bindgen_ty_251 = 95;
pub const kHIDUsage_BCS_InitiateBarcodeRead: _bindgen_ty_251 = 96;
pub const kHIDUsage_BCS_TriggerState: _bindgen_ty_251 = 97;
pub const kHIDUsage_BCS_TriggerMode: _bindgen_ty_251 = 98;
pub const kHIDUsage_BCS_TriggerModeBlinkingLaserOn: _bindgen_ty_251 = 99;
pub const kHIDUsage_BCS_TriggerModeContinuousLaserOn: _bindgen_ty_251 = 100;
pub const kHIDUsage_BCS_TriggerModeLaserOnWhilePulled: _bindgen_ty_251 = 101;
pub const kHIDUsage_BCS_TriggerModeLaserStaysOnAfterTriggerRelease: _bindgen_ty_251 = 102;
pub const kHIDUsage_BCS_CommitParametersToNVM: _bindgen_ty_251 = 109;
pub const kHIDUsage_BCS_ParameterScanning: _bindgen_ty_251 = 110;
pub const kHIDUsage_BCS_ParametersChanged: _bindgen_ty_251 = 111;
pub const kHIDUsage_BCS_SetParameterDefaultValues: _bindgen_ty_251 = 112;
pub const kHIDUsage_BCS_ScannerInCradle: _bindgen_ty_251 = 117;
pub const kHIDUsage_BCS_ScannerInRange: _bindgen_ty_251 = 118;
pub const kHIDUsage_BCS_AimDuration: _bindgen_ty_251 = 122;
pub const kHIDUsage_BCS_GoodReadLampDuration: _bindgen_ty_251 = 123;
pub const kHIDUsage_BCS_GoodReadLampIntensity: _bindgen_ty_251 = 124;
pub const kHIDUsage_BCS_GoodReadLED: _bindgen_ty_251 = 125;
pub const kHIDUsage_BCS_GoodReadToneFrequency: _bindgen_ty_251 = 126;
pub const kHIDUsage_BCS_GoodReadToneLength: _bindgen_ty_251 = 127;
pub const kHIDUsage_BCS_GoodReadToneVolume: _bindgen_ty_251 = 128;
pub const kHIDUsage_BCS_NoReadMessage: _bindgen_ty_251 = 130;
pub const kHIDUsage_BCS_NotOnFileVolume: _bindgen_ty_251 = 131;
pub const kHIDUsage_BCS_PowerupBeep: _bindgen_ty_251 = 132;
pub const kHIDUsage_BCS_SoundErrorBeep: _bindgen_ty_251 = 133;
pub const kHIDUsage_BCS_SoundGoodReadBeep: _bindgen_ty_251 = 134;
pub const kHIDUsage_BCS_SoundNotOnFileBeep: _bindgen_ty_251 = 135;
pub const kHIDUsage_BCS_GoodReadWhenToWrite: _bindgen_ty_251 = 136;
pub const kHIDUsage_BCS_GRWTIAfterDecode: _bindgen_ty_251 = 137;
pub const kHIDUsage_BCS_GRWTIBeep_LampAfterTransmit: _bindgen_ty_251 = 138;
pub const kHIDUsage_BCS_GRWTINoBeep_LampUseAtAll: _bindgen_ty_251 = 139;
pub const kHIDUsage_BCS_BooklandEAN: _bindgen_ty_251 = 145;
pub const kHIDUsage_BCS_ConvertEAN8To13Type: _bindgen_ty_251 = 146;
pub const kHIDUsage_BCS_ConvertUPCAToEAN_13: _bindgen_ty_251 = 147;
pub const kHIDUsage_BCS_ConvertUPC_EToA: _bindgen_ty_251 = 148;
pub const kHIDUsage_BCS_EAN_13: _bindgen_ty_251 = 149;
pub const kHIDUsage_BCS_EAN_8: _bindgen_ty_251 = 150;
pub const kHIDUsage_BCS_EAN_99_128_Mandatory: _bindgen_ty_251 = 151;
pub const kHIDUsage_BCS_EAN_99_P5_128_Optional: _bindgen_ty_251 = 152;
pub const kHIDUsage_BCS_UPC_EAN: _bindgen_ty_251 = 154;
pub const kHIDUsage_BCS_UPC_EANCouponCode: _bindgen_ty_251 = 155;
pub const kHIDUsage_BCS_UPC_EANPeriodicals: _bindgen_ty_251 = 156;
pub const kHIDUsage_BCS_UPC_A: _bindgen_ty_251 = 157;
pub const kHIDUsage_BCS_UPC_AWith128Mandatory: _bindgen_ty_251 = 158;
pub const kHIDUsage_BCS_UPC_AWith128Optical: _bindgen_ty_251 = 159;
pub const kHIDUsage_BCS_UPC_AWithP5Optional: _bindgen_ty_251 = 160;
pub const kHIDUsage_BCS_UPC_E: _bindgen_ty_251 = 161;
pub const kHIDUsage_BCS_UPC_E1: _bindgen_ty_251 = 162;
pub const kHIDUsage_BCS_Periodical: _bindgen_ty_251 = 169;
pub const kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus2: _bindgen_ty_251 = 170;
pub const kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus2: _bindgen_ty_251 = 171;
pub const kHIDUsage_BCS_PeriodicalIgnorePlus2: _bindgen_ty_251 = 172;
pub const kHIDUsage_BCS_PeriodicalAutoDiscriminatePlus5: _bindgen_ty_251 = 173;
pub const kHIDUsage_BCS_PeriodicalOnlyDecodeWithPlus5: _bindgen_ty_251 = 174;
pub const kHIDUsage_BCS_PeriodicalIgnorePlus5: _bindgen_ty_251 = 175;
pub const kHIDUsage_BCS_Check: _bindgen_ty_251 = 176;
pub const kHIDUsage_BCS_CheckDisablePrice: _bindgen_ty_251 = 177;
pub const kHIDUsage_BCS_CheckEnable4DigitPrice: _bindgen_ty_251 = 178;
pub const kHIDUsage_BCS_CheckEnable5DigitPrice: _bindgen_ty_251 = 179;
pub const kHIDUsage_BCS_CheckEnableEuropean4DigitPrice: _bindgen_ty_251 = 180;
pub const kHIDUsage_BCS_CheckEnableEuropean5DigitPrice: _bindgen_ty_251 = 181;
pub const kHIDUsage_BCS_EANTwoLabel: _bindgen_ty_251 = 183;
pub const kHIDUsage_BCS_EANThreeLabel: _bindgen_ty_251 = 184;
pub const kHIDUsage_BCS_EAN8FlagDigit1: _bindgen_ty_251 = 185;
pub const kHIDUsage_BCS_EAN8FlagDigit2: _bindgen_ty_251 = 186;
pub const kHIDUsage_BCS_EAN8FlagDigit3: _bindgen_ty_251 = 187;
pub const kHIDUsage_BCS_EAN13FlagDigit1: _bindgen_ty_251 = 188;
pub const kHIDUsage_BCS_EAN13FlagDigit2: _bindgen_ty_251 = 189;
pub const kHIDUsage_BCS_EAN13FlagDigit3: _bindgen_ty_251 = 190;
pub const kHIDUsage_BCS_AddEAN2_3LabelDefinition: _bindgen_ty_251 = 191;
pub const kHIDUsage_BCS_ClearAllEAN2_3LabelDefinitions: _bindgen_ty_251 = 192;
pub const kHIDUsage_BCS_Codabar: _bindgen_ty_251 = 195;
pub const kHIDUsage_BCS_Code128: _bindgen_ty_251 = 196;
pub const kHIDUsage_BCS_Code39: _bindgen_ty_251 = 199;
pub const kHIDUsage_BCS_Code93: _bindgen_ty_251 = 200;
pub const kHIDUsage_BCS_FullASCIIConversion: _bindgen_ty_251 = 201;
pub const kHIDUsage_BCS_Interleaved2of5: _bindgen_ty_251 = 202;
pub const kHIDUsage_BCS_ItalianPharmacyCode: _bindgen_ty_251 = 203;
pub const kHIDUsage_BCS_MSI_Plessey: _bindgen_ty_251 = 204;
pub const kHIDUsage_BCS_Standard2of5IATA: _bindgen_ty_251 = 205;
pub const kHIDUsage_BCS_Standard2of5: _bindgen_ty_251 = 206;
pub const kHIDUsage_BCS_TransmitStart_Stop: _bindgen_ty_251 = 211;
pub const kHIDUsage_BCS_TriOptic: _bindgen_ty_251 = 212;
pub const kHIDUsage_BCS_UCC_EAN_128: _bindgen_ty_251 = 213;
pub const kHIDUsage_BCS_CheckDigit: _bindgen_ty_251 = 214;
pub const kHIDUsage_BCS_CheckDigitDisable: _bindgen_ty_251 = 215;
pub const kHIDUsage_BCS_CheckDigitEnableInterleaved2of5OPCC: _bindgen_ty_251 = 216;
pub const kHIDUsage_BCS_CheckDigitEnableInterleaved2of5USS: _bindgen_ty_251 = 217;
pub const kHIDUsage_BCS_CheckDigitEnableStandard2of5OPCC: _bindgen_ty_251 = 216;
pub const kHIDUsage_BCS_CheckDigitEnableStandard2of5USS: _bindgen_ty_251 = 217;
pub const kHIDUsage_BCS_CheckDigitEnableOneMSIPlessey: _bindgen_ty_251 = 220;
pub const kHIDUsage_BCS_CheckDigitEnableTwoMSIPlessey: _bindgen_ty_251 = 221;
pub const kHIDUsage_BCS_CheckDigitCodabarEnable: _bindgen_ty_251 = 222;
pub const kHIDUsage_BCS_CheckDigitCode99Enable: _bindgen_ty_251 = 223;
pub const kHIDUsage_BCS_TransmitCheckDigit: _bindgen_ty_251 = 240;
pub const kHIDUsage_BCS_DisableCheckDigitTransmit: _bindgen_ty_251 = 241;
pub const kHIDUsage_BCS_EnableCheckDigitTransmit: _bindgen_ty_251 = 242;
pub const kHIDUsage_BCS_SymbologyIdentifier1: _bindgen_ty_251 = 251;
pub const kHIDUsage_BCS_SymbologyIdentifier2: _bindgen_ty_251 = 252;
pub const kHIDUsage_BCS_SymbologyIdentifier3: _bindgen_ty_251 = 253;
pub const kHIDUsage_BCS_DecodedData: _bindgen_ty_251 = 254;
pub const kHIDUsage_BCS_DecodeDataContinued: _bindgen_ty_251 = 255;
pub const kHIDUsage_BCS_BarSpaceData: _bindgen_ty_251 = 256;
pub const kHIDUsage_BCS_ScannerDataAccuracy: _bindgen_ty_251 = 257;
pub const kHIDUsage_BCS_RawDataPolarity: _bindgen_ty_251 = 258;
pub const kHIDUsage_BCS_PolarityInvertedBarCode: _bindgen_ty_251 = 259;
pub const kHIDUsage_BCS_PolarityNormalBarCode: _bindgen_ty_251 = 259;
pub const kHIDUsage_BCS_MinimumLengthToDecode: _bindgen_ty_251 = 262;
pub const kHIDUsage_BCS_MaximumLengthToDecode: _bindgen_ty_251 = 263;
pub const kHIDUsage_BCS_FirstDiscreteLengthToDecode: _bindgen_ty_251 = 264;
pub const kHIDUsage_BCS_SecondDiscreteLengthToDecode: _bindgen_ty_251 = 265;
pub const kHIDUsage_BCS_DataLengthMethod: _bindgen_ty_251 = 266;
pub const kHIDUsage_BCS_DLMethodReadAny: _bindgen_ty_251 = 267;
pub const kHIDUsage_BCS_DLMethodCheckInRange: _bindgen_ty_251 = 268;
pub const kHIDUsage_BCS_DLMethodCheckForDiscrete: _bindgen_ty_251 = 269;
pub const kHIDUsage_BCS_AztecCode: _bindgen_ty_251 = 272;
pub const kHIDUsage_BCS_BC412: _bindgen_ty_251 = 273;
pub const kHIDUsage_BCS_ChannelCode: _bindgen_ty_251 = 274;
pub const kHIDUsage_BCS_Code16: _bindgen_ty_251 = 275;
pub const kHIDUsage_BCS_Code32: _bindgen_ty_251 = 276;
pub const kHIDUsage_BCS_Code49: _bindgen_ty_251 = 277;
pub const kHIDUsage_BCS_CodeOne: _bindgen_ty_251 = 278;
pub const kHIDUsage_BCS_Colorcode: _bindgen_ty_251 = 279;
pub const kHIDUsage_BCS_DataMatrix: _bindgen_ty_251 = 280;
pub const kHIDUsage_BCS_MaxiCode: _bindgen_ty_251 = 281;
pub const kHIDUsage_BCS_MicroPDF: _bindgen_ty_251 = 282;
pub const kHIDUsage_BCS_PDF_417: _bindgen_ty_251 = 283;
pub const kHIDUsage_BCS_PosiCode: _bindgen_ty_251 = 284;
pub const kHIDUsage_BCS_QRCode: _bindgen_ty_251 = 285;
pub const kHIDUsage_BCS_SuperCode: _bindgen_ty_251 = 286;
pub const kHIDUsage_BCS_UltraCode: _bindgen_ty_251 = 287;
pub const kHIDUsage_BCS_USB_5_SlugCode: _bindgen_ty_251 = 288;
pub const kHIDUsage_BCS_VeriCode: _bindgen_ty_251 = 289;
pub type _bindgen_ty_251 = ::std::os::raw::c_uint;
pub const kHIDUsage_WD_Undefined: _bindgen_ty_252 = 0;
pub const kHIDUsage_WD_WeighingDevice: _bindgen_ty_252 = 1;
pub const kHIDUsage_WD_ScaleScaleDevice: _bindgen_ty_252 = 32;
pub const kHIDUsage_WD_ScaleScaleClassIMetricCL: _bindgen_ty_252 = 33;
pub const kHIDUsage_WD_ScaleScaleClassIMetric: _bindgen_ty_252 = 34;
pub const kHIDUsage_WD_ScaleScaleClassIIMetric: _bindgen_ty_252 = 35;
pub const kHIDUsage_WD_ScaleScaleClassIIIMetric: _bindgen_ty_252 = 36;
pub const kHIDUsage_WD_ScaleScaleClassIIILMetric: _bindgen_ty_252 = 37;
pub const kHIDUsage_WD_ScaleScaleClassIVMetric: _bindgen_ty_252 = 38;
pub const kHIDUsage_WD_ScaleScaleClassIIIEnglish: _bindgen_ty_252 = 39;
pub const kHIDUsage_WD_ScaleScaleClassIIILEnglish: _bindgen_ty_252 = 40;
pub const kHIDUsage_WD_ScaleScaleClassIVEnglish: _bindgen_ty_252 = 41;
pub const kHIDUsage_WD_ScaleScaleClassGeneric: _bindgen_ty_252 = 42;
pub const kHIDUsage_WD_ScaleAtrributeReport: _bindgen_ty_252 = 48;
pub const kHIDUsage_WD_ScaleControlReport: _bindgen_ty_252 = 49;
pub const kHIDUsage_WD_ScaleDataReport: _bindgen_ty_252 = 50;
pub const kHIDUsage_WD_ScaleStatusReport: _bindgen_ty_252 = 51;
pub const kHIDUsage_WD_ScaleWeightLimitReport: _bindgen_ty_252 = 52;
pub const kHIDUsage_WD_ScaleStatisticsReport: _bindgen_ty_252 = 53;
pub const kHIDUsage_WD_DataWeight: _bindgen_ty_252 = 64;
pub const kHIDUsage_WD_DataScaling: _bindgen_ty_252 = 65;
pub const kHIDUsage_WD_WeightUnit: _bindgen_ty_252 = 80;
pub const kHIDUsage_WD_WeightUnitMilligram: _bindgen_ty_252 = 81;
pub const kHIDUsage_WD_WeightUnitGram: _bindgen_ty_252 = 82;
pub const kHIDUsage_WD_WeightUnitKilogram: _bindgen_ty_252 = 83;
pub const kHIDUsage_WD_WeightUnitCarats: _bindgen_ty_252 = 84;
pub const kHIDUsage_WD_WeightUnitTaels: _bindgen_ty_252 = 85;
pub const kHIDUsage_WD_WeightUnitGrains: _bindgen_ty_252 = 86;
pub const kHIDUsage_WD_WeightUnitPennyweights: _bindgen_ty_252 = 87;
pub const kHIDUsage_WD_WeightUnitMetricTon: _bindgen_ty_252 = 88;
pub const kHIDUsage_WD_WeightUnitAvoirTon: _bindgen_ty_252 = 89;
pub const kHIDUsage_WD_WeightUnitTroyOunce: _bindgen_ty_252 = 90;
pub const kHIDUsage_WD_WeightUnitOunce: _bindgen_ty_252 = 91;
pub const kHIDUsage_WD_WeightUnitPound: _bindgen_ty_252 = 92;
pub const kHIDUsage_WD_CalibrationCount: _bindgen_ty_252 = 96;
pub const kHIDUsage_WD_RezeroCount: _bindgen_ty_252 = 97;
pub const kHIDUsage_WD_ScaleStatus: _bindgen_ty_252 = 112;
pub const kHIDUsage_WD_ScaleStatusFault: _bindgen_ty_252 = 113;
pub const kHIDUsage_WD_ScaleStatusStableAtZero: _bindgen_ty_252 = 114;
pub const kHIDUsage_WD_ScaleStatusInMotion: _bindgen_ty_252 = 115;
pub const kHIDUsage_WD_ScaleStatusWeightStable: _bindgen_ty_252 = 116;
pub const kHIDUsage_WD_ScaleStatusUnderZero: _bindgen_ty_252 = 117;
pub const kHIDUsage_WD_ScaleStatusOverWeightLimit: _bindgen_ty_252 = 118;
pub const kHIDUsage_WD_ScaleStatusRequiresCalibration: _bindgen_ty_252 = 119;
pub const kHIDUsage_WD_ScaleStatusRequiresRezeroing: _bindgen_ty_252 = 120;
pub const kHIDUsage_WD_ZeroScale: _bindgen_ty_252 = 128;
pub const kHIDUsage_WD_EnforcedZeroReturn: _bindgen_ty_252 = 129;
pub type _bindgen_ty_252 = ::std::os::raw::c_uint;
pub const kHIDUsage_MSR_Undefined: _bindgen_ty_253 = 0;
pub const kHIDUsage_MSR_DeviceReadOnly: _bindgen_ty_253 = 1;
pub const kHIDUsage_MSR_Track1Length: _bindgen_ty_253 = 17;
pub const kHIDUsage_MSR_Track2Length: _bindgen_ty_253 = 18;
pub const kHIDUsage_MSR_Track3Length: _bindgen_ty_253 = 19;
pub const kHIDUsage_MSR_TrackJISLength: _bindgen_ty_253 = 20;
pub const kHIDUsage_MSR_TrackData: _bindgen_ty_253 = 32;
pub const kHIDUsage_MSR_Track1Data: _bindgen_ty_253 = 33;
pub const kHIDUsage_MSR_Track2Data: _bindgen_ty_253 = 34;
pub const kHIDUsage_MSR_Track3Data: _bindgen_ty_253 = 35;
pub const kHIDUsage_MSR_TrackJISData: _bindgen_ty_253 = 36;
pub type _bindgen_ty_253 = ::std::os::raw::c_uint;
pub const kHIDUsage_CC_Undefined: _bindgen_ty_254 = 0;
pub const kHIDUsage_CC_Autofocus: _bindgen_ty_254 = 32;
pub const kHIDUsage_CC_Shutter: _bindgen_ty_254 = 33;
pub type _bindgen_ty_254 = ::std::os::raw::c_uint;
pub const kHIDUsage_FIDO_Undefined: _bindgen_ty_255 = 0;
pub const kHIDUsage_FIDO_U2FDevice: _bindgen_ty_255 = 1;
pub const kHIDUsage_FIDO_InputData: _bindgen_ty_255 = 32;
pub const kHIDUsage_FIDO_OutputData: _bindgen_ty_255 = 33;
pub type _bindgen_ty_255 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOHIDValueGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDValueCreateWithIntegerValue(
        allocator: CFAllocatorRef,
        element: IOHIDElementRef,
        timeStamp: u64,
        value: CFIndex,
    ) -> IOHIDValueRef;
}
extern "C" {
    pub fn IOHIDValueCreateWithBytes(
        allocator: CFAllocatorRef,
        element: IOHIDElementRef,
        timeStamp: u64,
        bytes: *const u8,
        length: CFIndex,
    ) -> IOHIDValueRef;
}
extern "C" {
    pub fn IOHIDValueCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        element: IOHIDElementRef,
        timeStamp: u64,
        bytes: *const u8,
        length: CFIndex,
    ) -> IOHIDValueRef;
}
extern "C" {
    pub fn IOHIDValueGetElement(value: IOHIDValueRef) -> IOHIDElementRef;
}
extern "C" {
    pub fn IOHIDValueGetTimeStamp(value: IOHIDValueRef) -> u64;
}
extern "C" {
    pub fn IOHIDValueGetLength(value: IOHIDValueRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDValueGetBytePtr(value: IOHIDValueRef) -> *const u8;
}
extern "C" {
    pub fn IOHIDValueGetIntegerValue(value: IOHIDValueRef) -> CFIndex;
}
extern "C" {
    pub fn IOHIDValueGetScaledValue(value: IOHIDValueRef, type_: IOHIDValueScaleType) -> double_t;
}
pub const IOHIDTransactionOptions_kIOHIDTransactionOptionsNone: IOHIDTransactionOptions = 0;
pub const IOHIDTransactionOptions_kIOHIDTransactionOptionsWeakDevice: IOHIDTransactionOptions = 1;
pub type IOHIDTransactionOptions = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDTransaction {
    _unused: [u8; 0],
}
pub type IOHIDTransactionRef = *mut __IOHIDTransaction;
extern "C" {
    pub fn IOHIDTransactionGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDTransactionCreate(
        allocator: CFAllocatorRef,
        device: IOHIDDeviceRef,
        direction: IOHIDTransactionDirectionType,
        options: IOOptionBits,
    ) -> IOHIDTransactionRef;
}
extern "C" {
    pub fn IOHIDTransactionGetDevice(transaction: IOHIDTransactionRef) -> IOHIDDeviceRef;
}
extern "C" {
    pub fn IOHIDTransactionGetDirection(
        transaction: IOHIDTransactionRef,
    ) -> IOHIDTransactionDirectionType;
}
extern "C" {
    pub fn IOHIDTransactionSetDirection(
        transaction: IOHIDTransactionRef,
        direction: IOHIDTransactionDirectionType,
    );
}
extern "C" {
    pub fn IOHIDTransactionAddElement(transaction: IOHIDTransactionRef, element: IOHIDElementRef);
}
extern "C" {
    pub fn IOHIDTransactionRemoveElement(
        transaction: IOHIDTransactionRef,
        element: IOHIDElementRef,
    );
}
extern "C" {
    pub fn IOHIDTransactionContainsElement(
        transaction: IOHIDTransactionRef,
        element: IOHIDElementRef,
    ) -> Boolean;
}
extern "C" {
    pub fn IOHIDTransactionScheduleWithRunLoop(
        transaction: IOHIDTransactionRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDTransactionUnscheduleFromRunLoop(
        transaction: IOHIDTransactionRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    );
}
extern "C" {
    pub fn IOHIDTransactionSetValue(
        transaction: IOHIDTransactionRef,
        element: IOHIDElementRef,
        value: IOHIDValueRef,
        options: IOOptionBits,
    );
}
extern "C" {
    pub fn IOHIDTransactionGetValue(
        transaction: IOHIDTransactionRef,
        element: IOHIDElementRef,
        options: IOOptionBits,
    ) -> IOHIDValueRef;
}
extern "C" {
    pub fn IOHIDTransactionCommit(transaction: IOHIDTransactionRef) -> IOReturn;
}
extern "C" {
    pub fn IOHIDTransactionCommitWithCallback(
        transaction: IOHIDTransactionRef,
        timeout: CFTimeInterval,
        callback: IOHIDCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOHIDTransactionClear(transaction: IOHIDTransactionRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceDeviceInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
    pub getProperty: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            key: CFStringRef,
            pProperty: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub setProperty: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            key: CFStringRef,
            property: CFTypeRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pSource: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub copyMatchingElements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            matchingDict: CFDictionaryRef,
            pElements: *mut CFArrayRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            value: IOHIDValueRef,
            timeout: u32,
            callback: IOHIDValueCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            pValue: *mut IOHIDValueRef,
            timeout: u32,
            callback: IOHIDValueCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setInputReportCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            report: *mut u8,
            reportLength: CFIndex,
            callback: IOHIDReportCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            report: *const u8,
            reportLength: CFIndex,
            timeout: u32,
            callback: IOHIDReportCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            report: *mut u8,
            pReportLength: *mut CFIndex,
            timeout: u32,
            callback: IOHIDReportCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceTimeStampedDeviceInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
    pub getProperty: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            key: CFStringRef,
            pProperty: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub setProperty: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            key: CFStringRef,
            property: CFTypeRef,
        ) -> IOReturn,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pSource: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub copyMatchingElements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            matchingDict: CFDictionaryRef,
            pElements: *mut CFArrayRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            value: IOHIDValueRef,
            timeout: u32,
            callback: IOHIDValueCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            pValue: *mut IOHIDValueRef,
            timeout: u32,
            callback: IOHIDValueCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setInputReportCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            report: *mut u8,
            reportLength: CFIndex,
            callback: IOHIDReportCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            report: *const u8,
            reportLength: CFIndex,
            timeout: u32,
            callback: IOHIDReportCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getReport: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            reportType: IOHIDReportType,
            reportID: u32,
            report: *mut u8,
            pReportLength: *mut CFIndex,
            timeout: u32,
            callback: IOHIDReportCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setInputReportWithTimeStampCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            report: *mut u8,
            reportLength: CFIndex,
            callback: IOHIDReportWithTimeStampCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceQueueInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pSource: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub setDepth: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            depth: u32,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getDepth: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pDepth: *mut u32) -> IOReturn,
    >,
    pub addElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub removeElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub containsElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            pValue: *mut Boolean,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
    pub stop: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
    pub setValueAvailableCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            callback: IOHIDCallback,
            context: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub copyNextValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pValue: *mut IOHIDValueRef,
            timeout: u32,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOHIDDeviceTransactionInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub getAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pSource: *mut CFTypeRef,
        ) -> IOReturn,
    >,
    pub setDirection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            direction: IOHIDTransactionDirectionType,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getDirection: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pDirection: *mut IOHIDTransactionDirectionType,
        ) -> IOReturn,
    >,
    pub addElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub removeElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub containsElement: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            pValue: *mut Boolean,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub setValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            value: IOHIDValueRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub getValue: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            element: IOHIDElementRef,
            pValue: *mut IOHIDValueRef,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            timeout: u32,
            callback: IOHIDCallback,
            context: *mut ::std::os::raw::c_void,
            options: IOOptionBits,
        ) -> IOReturn,
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: IOOptionBits) -> IOReturn,
    >,
}
pub const IOHIDKeyboardEventOptions_kIOHIDKeyboardEventOptionsNoKeyRepeat:
    IOHIDKeyboardEventOptions = 256;
pub type IOHIDKeyboardEventOptions = ::std::os::raw::c_uint;
pub const IOHIDPointerEventOptions_kIOHIDPointerEventOptionsNoAcceleration:
    IOHIDPointerEventOptions = 256;
pub type IOHIDPointerEventOptions = ::std::os::raw::c_uint;
pub const IOHIDScrollEventOptions_kIOHIDScrollEventOptionsNoAcceleration: IOHIDScrollEventOptions =
    256;
pub type IOHIDScrollEventOptions = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NXEQElStruct {
    pub next: ::std::os::raw::c_int,
    pub sema: OSSpinLock,
    pub event: NXEvent,
}
pub type NXEQElement = _NXEQElStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evOffsets {
    pub evGlobalsOffset: ::std::os::raw::c_int,
    pub evShmemOffset: ::std::os::raw::c_int,
}
pub type EvOffsets = _evOffsets;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _evGlobals {
    pub cursorSema: OSSpinLock,
    pub eNum: ::std::os::raw::c_int,
    pub buttons: ::std::os::raw::c_int,
    pub eventFlags: ::std::os::raw::c_int,
    pub VertRetraceClock: ::std::os::raw::c_int,
    pub cursorLoc: IOGPoint,
    pub frame: ::std::os::raw::c_int,
    pub workBounds: IOGBounds,
    pub mouseRect: IOGBounds,
    pub version: ::std::os::raw::c_int,
    pub structSize: ::std::os::raw::c_int,
    pub lastFrame: ::std::os::raw::c_int,
    pub screenCursorFixed: IOFixedPoint32,
    pub desktopCursorFixed: IOFixedPoint32,
    pub reservedA: [::std::os::raw::c_uint; 27usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub movedMask: ::std::os::raw::c_int,
    pub waitCursorSema: OSSpinLock,
    pub AALastEventSent: ::std::os::raw::c_int,
    pub AALastEventConsumed: ::std::os::raw::c_int,
    pub waitCursorUp: ::std::os::raw::c_int,
    pub ctxtTimedOut: ::std::os::raw::c_char,
    pub waitCursorEnabled: ::std::os::raw::c_char,
    pub globalWaitCursorEnabled: ::std::os::raw::c_char,
    pub waitThreshold: ::std::os::raw::c_int,
    pub LLEHead: ::std::os::raw::c_int,
    pub LLETail: ::std::os::raw::c_int,
    pub LLELast: ::std::os::raw::c_int,
    pub lleq: [NXEQElement; 240usize],
}
impl _evGlobals {
    #[inline]
    pub fn reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn updateCursorPositionFromFixed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_updateCursorPositionFromFixed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn logCursorUpdates(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_logCursorUpdates(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wantPressure(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wantPressure(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wantPrecision(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wantPrecision(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dontWantCoalesce(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dontWantCoalesce(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dontCoalesce(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dontCoalesce(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mouseRectValid(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mouseRectValid(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved: ::std::os::raw::c_uint,
        updateCursorPositionFromFixed: ::std::os::raw::c_uint,
        logCursorUpdates: ::std::os::raw::c_uint,
        wantPressure: ::std::os::raw::c_uint,
        wantPrecision: ::std::os::raw::c_uint,
        dontWantCoalesce: ::std::os::raw::c_uint,
        dontCoalesce: ::std::os::raw::c_uint,
        mouseRectValid: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 25u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let updateCursorPositionFromFixed: u32 =
                unsafe { ::std::mem::transmute(updateCursorPositionFromFixed) };
            updateCursorPositionFromFixed as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let logCursorUpdates: u32 = unsafe { ::std::mem::transmute(logCursorUpdates) };
            logCursorUpdates as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let wantPressure: u32 = unsafe { ::std::mem::transmute(wantPressure) };
            wantPressure as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let wantPrecision: u32 = unsafe { ::std::mem::transmute(wantPrecision) };
            wantPrecision as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let dontWantCoalesce: u32 = unsafe { ::std::mem::transmute(dontWantCoalesce) };
            dontWantCoalesce as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let dontCoalesce: u32 = unsafe { ::std::mem::transmute(dontCoalesce) };
            dontCoalesce as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let mouseRectValid: u32 = unsafe { ::std::mem::transmute(mouseRectValid) };
            mouseRectValid as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type EvGlobals = _evGlobals;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evioLLEvent {
    pub setCursor: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub location: IOGPoint,
    pub data: NXEventData,
    pub setFlags: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
pub type _NXLLEvent = evioLLEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evioSpecialKeyMsg {
    pub Head: mach_msg_header_t,
    pub key: ::std::os::raw::c_int,
    pub direction: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
pub type evioSpecialKeyMsg_t = *mut evioSpecialKeyMsg;
pub const kIOHIDEventNotification: _bindgen_ty_256 = 0;
pub type _bindgen_ty_256 = ::std::os::raw::c_uint;
pub const kIOHIDServerConnectType: _bindgen_ty_257 = 0;
pub const kIOHIDParamConnectType: _bindgen_ty_257 = 1;
pub const kIOHIDEventSystemConnectType: _bindgen_ty_257 = 3;
pub type _bindgen_ty_257 = ::std::os::raw::c_uint;
pub const kIOHIDGlobalMemory: _bindgen_ty_258 = 0;
pub type _bindgen_ty_258 = ::std::os::raw::c_uint;
pub const kIOHIDEventQueueTypeKernel: _bindgen_ty_259 = 0;
pub const kIOHIDEventQueueTypeUser: _bindgen_ty_259 = 1;
pub type _bindgen_ty_259 = ::std::os::raw::c_uint;
pub const kIOHIDOpenedByEventSystem: _bindgen_ty_260 = 65536;
pub const kIOHIDOpenedByFastPathClient: _bindgen_ty_260 = 131072;
pub type _bindgen_ty_260 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOHIDCreateSharedMemory(
        connect: io_connect_t,
        version: ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetEventsEnable(connect: io_connect_t, enable: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetCursorEnable(connect: io_connect_t, enable: boolean_t) -> kern_return_t;
}
pub const kIOHIDSetGlobalEventFlags: _bindgen_ty_261 = 1;
pub const kIOHIDSetCursorPosition: _bindgen_ty_261 = 2;
pub const kIOHIDSetRelativeCursorPosition: _bindgen_ty_261 = 4;
pub const kIOHIDPostHIDManagerEvent: _bindgen_ty_261 = 8;
pub type _bindgen_ty_261 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOHIDPostEvent(
        connect: io_connect_t,
        eventType: UInt32,
        location: IOGPoint,
        eventData: *const NXEventData,
        eventDataVersion: UInt32,
        eventFlags: IOOptionBits,
        options: IOOptionBits,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetMouseLocation(
        connect: io_connect_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetButtonEventNum(
        connect: io_connect_t,
        button: NXMouseButton,
        eventNum: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetScrollAcceleration(
        handle: io_connect_t,
        acceleration: *mut f64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetScrollAcceleration(handle: io_connect_t, acceleration: f64) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetMouseAcceleration(handle: io_connect_t, acceleration: *mut f64)
        -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetMouseAcceleration(handle: io_connect_t, acceleration: f64) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetMouseButtonMode(
        handle: io_connect_t,
        mode: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetMouseButtonMode(
        handle: io_connect_t,
        mode: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetAccelerationWithKey(
        handle: io_connect_t,
        key: CFStringRef,
        acceleration: *mut f64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetAccelerationWithKey(
        handle: io_connect_t,
        key: CFStringRef,
        acceleration: f64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetParameter(
        handle: io_connect_t,
        key: CFStringRef,
        maxSize: IOByteCount,
        bytes: *mut ::std::os::raw::c_void,
        actualSize: *mut IOByteCount,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetParameter(
        handle: io_connect_t,
        key: CFStringRef,
        bytes: *const ::std::os::raw::c_void,
        size: IOByteCount,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDCopyCFTypeParameter(
        handle: io_connect_t,
        key: CFStringRef,
        parameter: *mut CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetCFTypeParameter(
        handle: io_connect_t,
        key: CFStringRef,
        parameter: CFTypeRef,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetStateForSelector(
        handle: io_connect_t,
        selector: ::std::os::raw::c_int,
        state: *mut UInt32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetStateForSelector(
        handle: io_connect_t,
        selector: ::std::os::raw::c_int,
        state: UInt32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetModifierLockState(
        handle: io_connect_t,
        selector: ::std::os::raw::c_int,
        state: *mut bool,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetModifierLockState(
        handle: io_connect_t,
        selector: ::std::os::raw::c_int,
        state: bool,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDRegisterVirtualDisplay(
        handle: io_connect_t,
        display_token: *mut UInt32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDUnregisterVirtualDisplay(
        handle: io_connect_t,
        display_token: UInt32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDSetVirtualDisplayBounds(
        handle: io_connect_t,
        display_token: UInt32,
        bounds: *const IOGBounds,
    ) -> kern_return_t;
}
extern "C" {
    pub fn IOHIDGetActivityState(handle: io_connect_t, hidActivityIdle: *mut bool)
        -> kern_return_t;
}
pub const IOHIDRequestType_kIOHIDRequestTypePostEvent: IOHIDRequestType = 0;
pub const IOHIDRequestType_kIOHIDRequestTypeListenEvent: IOHIDRequestType = 1;
pub type IOHIDRequestType = ::std::os::raw::c_uint;
pub const IOHIDAccessType_kIOHIDAccessTypeGranted: IOHIDAccessType = 0;
pub const IOHIDAccessType_kIOHIDAccessTypeDenied: IOHIDAccessType = 1;
pub const IOHIDAccessType_kIOHIDAccessTypeUnknown: IOHIDAccessType = 2;
pub type IOHIDAccessType = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOHIDCheckAccess(requestType: IOHIDRequestType) -> IOHIDAccessType;
}
extern "C" {
    pub fn IOHIDRequestAccess(requestType: IOHIDRequestType) -> bool;
}
pub type NXEventHandle = mach_port_t;
extern "C" {
    pub fn NXOpenEventStatus() -> NXEventHandle;
}
extern "C" {
    pub fn NXCloseEventStatus(handle: NXEventHandle);
}
extern "C" {
    pub fn NXEventSystemInfo(
        handle: NXEventHandle,
        flavor: *mut ::std::os::raw::c_char,
        evs_info: *mut ::std::os::raw::c_int,
        evs_info_cnt: *mut ::std::os::raw::c_uint,
    ) -> NXEventSystemInfoType;
}
extern "C" {
    pub fn NXSetKeyRepeatInterval(handle: NXEventHandle, seconds: f64);
}
extern "C" {
    pub fn NXKeyRepeatInterval(handle: NXEventHandle) -> f64;
}
extern "C" {
    pub fn NXSetKeyRepeatThreshold(handle: NXEventHandle, threshold: f64);
}
extern "C" {
    pub fn NXKeyRepeatThreshold(handle: NXEventHandle) -> f64;
}
extern "C" {
    pub fn NXResetKeyboard(handle: NXEventHandle);
}
extern "C" {
    pub fn NXSetClickTime(handle: NXEventHandle, seconds: f64);
}
extern "C" {
    pub fn NXClickTime(handle: NXEventHandle) -> f64;
}
extern "C" {
    pub fn NXSetClickSpace(handle: NXEventHandle, area: *mut NXSize);
}
extern "C" {
    pub fn NXGetClickSpace(handle: NXEventHandle, area: *mut NXSize);
}
extern "C" {
    pub fn NXResetMouse(handle: NXEventHandle);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NXParsedKeyMapping_ {
    pub shorts: ::std::os::raw::c_short,
    pub keyBits: [::std::os::raw::c_char; 256usize],
    pub maxMod: ::std::os::raw::c_int,
    pub modDefs: [*mut ::std::os::raw::c_uchar; 16usize],
    pub numDefs: ::std::os::raw::c_int,
    pub keyDefs: [*mut ::std::os::raw::c_uchar; 256usize],
    pub numSeqs: ::std::os::raw::c_int,
    pub seqDefs: [*mut ::std::os::raw::c_uchar; 128usize],
    pub numSpecialKeys: ::std::os::raw::c_int,
    pub specialKeys: [::std::os::raw::c_ushort; 24usize],
    pub mapping: *const ::std::os::raw::c_uchar,
    pub mappingLen: ::std::os::raw::c_int,
}
pub type NXParsedKeyMapping = _NXParsedKeyMapping_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDEventSystemClient {
    _unused: [u8; 0],
}
pub type IOHIDEventSystemClientRef = *mut __IOHIDEventSystemClient;
extern "C" {
    pub fn IOHIDEventSystemClientCreateSimpleClient(
        allocator: CFAllocatorRef,
    ) -> IOHIDEventSystemClientRef;
}
extern "C" {
    pub fn IOHIDEventSystemClientSetProperty(
        client: IOHIDEventSystemClientRef,
        key: CFStringRef,
        property: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn IOHIDEventSystemClientCopyProperty(
        client: IOHIDEventSystemClientRef,
        key: CFStringRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDEventSystemClientGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDEventSystemClientCopyServices(client: IOHIDEventSystemClientRef) -> CFArrayRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDServiceClient {
    _unused: [u8; 0],
}
pub type IOHIDServiceClientRef = *mut __IOHIDServiceClient;
extern "C" {
    pub fn IOHIDServiceClientSetProperty(
        service: IOHIDServiceClientRef,
        key: CFStringRef,
        property: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn IOHIDServiceClientCopyProperty(
        service: IOHIDServiceClientRef,
        key: CFStringRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDServiceClientGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDServiceClientGetRegistryID(service: IOHIDServiceClientRef) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDServiceClientConformsTo(
        service: IOHIDServiceClientRef,
        usagePage: u32,
        usage: u32,
    ) -> boolean_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOHIDUserDevice {
    _unused: [u8; 0],
}
pub type IOHIDUserDeviceRef = *mut __IOHIDUserDevice;
pub type IOHIDUserDeviceSetReportBlock = *mut ::std::os::raw::c_void;
pub type IOHIDUserDeviceGetReportBlock = *mut ::std::os::raw::c_void;
pub const IOHIDUserDeviceOptions_IOHIDUserDeviceOptionsCreateOnActivate: IOHIDUserDeviceOptions = 1;
pub type IOHIDUserDeviceOptions = IOOptionBits;
extern "C" {
    pub fn IOHIDUserDeviceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn IOHIDUserDeviceCreateWithProperties(
        allocator: CFAllocatorRef,
        properties: CFDictionaryRef,
        options: IOOptionBits,
    ) -> IOHIDUserDeviceRef;
}
extern "C" {
    pub fn IOHIDUserDeviceRegisterGetReportBlock(
        device: IOHIDUserDeviceRef,
        block: IOHIDUserDeviceGetReportBlock,
    );
}
extern "C" {
    pub fn IOHIDUserDeviceRegisterSetReportBlock(
        device: IOHIDUserDeviceRef,
        block: IOHIDUserDeviceSetReportBlock,
    );
}
extern "C" {
    pub fn IOHIDUserDeviceSetDispatchQueue(device: IOHIDUserDeviceRef, queue: NSObject);
}
extern "C" {
    pub fn IOHIDUserDeviceSetCancelHandler(device: IOHIDUserDeviceRef, handler: dispatch_block_t);
}
extern "C" {
    pub fn IOHIDUserDeviceActivate(device: IOHIDUserDeviceRef);
}
extern "C" {
    pub fn IOHIDUserDeviceCancel(device: IOHIDUserDeviceRef);
}
extern "C" {
    pub fn IOHIDUserDeviceCopyProperty(device: IOHIDUserDeviceRef, key: CFStringRef) -> CFTypeRef;
}
extern "C" {
    pub fn IOHIDUserDeviceSetProperty(
        device: IOHIDUserDeviceRef,
        key: CFStringRef,
        property: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn IOHIDUserDeviceHandleReportWithTimeStamp(
        device: IOHIDUserDeviceRef,
        timestamp: u64,
        report: *const u8,
        reportLength: CFIndex,
    ) -> IOReturn;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOI2CBuffer {
    _unused: [u8; 0],
}
pub type IOI2CRequestCompletion =
    ::std::option::Option<unsafe extern "C" fn(request: *mut IOI2CRequest)>;
pub const kIOI2CNoTransactionType: _bindgen_ty_262 = 0;
pub const kIOI2CSimpleTransactionType: _bindgen_ty_262 = 1;
pub const kIOI2CDDCciReplyTransactionType: _bindgen_ty_262 = 2;
pub const kIOI2CCombinedTransactionType: _bindgen_ty_262 = 3;
pub const kIOI2CDisplayPortNativeTransactionType: _bindgen_ty_262 = 4;
pub type _bindgen_ty_262 = ::std::os::raw::c_uint;
pub const kIOI2CUseSubAddressCommFlag: _bindgen_ty_263 = 2;
pub type _bindgen_ty_263 = ::std::os::raw::c_uint;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IOI2CRequest {
    pub sendTransactionType: IOOptionBits,
    pub replyTransactionType: IOOptionBits,
    pub sendAddress: u32,
    pub replyAddress: u32,
    pub sendSubAddress: u8,
    pub replySubAddress: u8,
    pub __reservedA: [u8; 2usize],
    pub minReplyDelay: u64,
    pub result: IOReturn,
    pub commFlags: IOOptionBits,
    pub __padA: u32,
    pub sendBytes: u32,
    pub __reservedB: [u32; 2usize],
    pub __padB: u32,
    pub replyBytes: u32,
    pub completion: IOI2CRequestCompletion,
    pub sendBuffer: vm_address_t,
    pub replyBuffer: vm_address_t,
    pub __reservedC: [u32; 10usize],
}
pub const kIOI2CBusTypeI2C: _bindgen_ty_264 = 1;
pub const kIOI2CBusTypeDisplayPort: _bindgen_ty_264 = 2;
pub type _bindgen_ty_264 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOI2CBusTiming {
    pub bitTimeout: AbsoluteTime,
    pub byteTimeout: AbsoluteTime,
    pub acknowledgeTimeout: AbsoluteTime,
    pub startTimeout: AbsoluteTime,
    pub holdTime: AbsoluteTime,
    pub riseFallTime: AbsoluteTime,
    pub __reservedA: [UInt32; 8usize],
}
pub const kIOI2CBusNumberMask: _bindgen_ty_265 = 255;
pub type _bindgen_ty_265 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOFBGetI2CInterfaceCount(framebuffer: io_service_t, count: *mut IOItemCount)
        -> IOReturn;
}
extern "C" {
    pub fn IOFBCopyI2CInterfaceForBus(
        framebuffer: io_service_t,
        bus: IOOptionBits,
        interface: *mut io_service_t,
    ) -> IOReturn;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOI2CConnect {
    _unused: [u8; 0],
}
pub type IOI2CConnectRef = *mut IOI2CConnect;
extern "C" {
    pub fn IOI2CCopyInterfaceForID(identifier: CFTypeRef, interface: *mut io_service_t)
        -> IOReturn;
}
extern "C" {
    pub fn IOI2CInterfaceOpen(
        interface: io_service_t,
        options: IOOptionBits,
        connect: *mut IOI2CConnectRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOI2CInterfaceClose(connect: IOI2CConnectRef, options: IOOptionBits) -> IOReturn;
}
extern "C" {
    pub fn IOI2CSendRequest(
        connect: IOI2CConnectRef,
        options: IOOptionBits,
        request: *mut IOI2CRequest,
    ) -> IOReturn;
}
extern "C" {
    pub fn KextManagerCreateURLForBundleIdentifier(
        allocator: CFAllocatorRef,
        kextIdentifier: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn KextManagerLoadKextWithIdentifier(
        kextIdentifier: CFStringRef,
        dependencyKextAndFolderURLs: CFArrayRef,
    ) -> OSReturn;
}
extern "C" {
    pub fn KextManagerLoadKextWithURL(
        kextURL: CFURLRef,
        dependencyKextAndFolderURLs: CFArrayRef,
    ) -> OSReturn;
}
extern "C" {
    pub fn KextManagerUnloadKextWithIdentifier(kextIdentifier: CFStringRef) -> OSReturn;
}
extern "C" {
    pub fn KextManagerCopyLoadedKextInfo(
        kextIdentifiers: CFArrayRef,
        infoKeys: CFArrayRef,
    ) -> CFDictionaryRef;
}
pub const kIOPacketFilterUnicast: _bindgen_ty_266 = 1;
pub const kIOPacketFilterBroadcast: _bindgen_ty_266 = 2;
pub const kIOPacketFilterMulticast: _bindgen_ty_266 = 16;
pub const kIOPacketFilterMulticastAll: _bindgen_ty_266 = 32;
pub const kIOPacketFilterPromiscuous: _bindgen_ty_266 = 256;
pub const kIOPacketFilterPromiscuousAll: _bindgen_ty_266 = 512;
pub type _bindgen_ty_266 = ::std::os::raw::c_uint;
pub const kIONetworkFeatureNoBSDWait: _bindgen_ty_267 = 1;
pub const kIONetworkFeatureHardwareVlan: _bindgen_ty_267 = 2;
pub const kIONetworkFeatureSoftwareVlan: _bindgen_ty_267 = 4;
pub const kIONetworkFeatureMultiPages: _bindgen_ty_267 = 8;
pub const kIONetworkFeatureTSOIPv4: _bindgen_ty_267 = 16;
pub const kIONetworkFeatureTSOIPv6: _bindgen_ty_267 = 32;
pub const kIONetworkFeatureTransmitCompletionStatus: _bindgen_ty_267 = 64;
pub const kIONetworkFeatureHWTimeStamp: _bindgen_ty_267 = 128;
pub const kIONetworkFeatureSWTimeStamp: _bindgen_ty_267 = 256;
pub type _bindgen_ty_267 = ::std::os::raw::c_uint;
pub const kIOEthernetWakeOnMagicPacket: _bindgen_ty_268 = 1;
pub const kIOEthernetWakeOnPacketAddressMatch: _bindgen_ty_268 = 2;
pub type _bindgen_ty_268 = ::std::os::raw::c_uint;
pub const kIONetworkDataAccessTypeRead: _bindgen_ty_269 = 1;
pub const kIONetworkDataAccessTypeWrite: _bindgen_ty_269 = 2;
pub const kIONetworkDataAccessTypeReset: _bindgen_ty_269 = 4;
pub const kIONetworkDataAccessTypeSerialize: _bindgen_ty_269 = 8;
pub const kIONetworkDataAccessTypeMask: _bindgen_ty_269 = 255;
pub type _bindgen_ty_269 = ::std::os::raw::c_uint;
pub const kIONetworkDataBufferTypeInternal: _bindgen_ty_270 = 0;
pub const kIONetworkDataBufferTypeExternal: _bindgen_ty_270 = 1;
pub const kIONetworkDataBufferTypeNone: _bindgen_ty_270 = 2;
pub type _bindgen_ty_270 = ::std::os::raw::c_uint;
pub const kIONetworkStackRegisterInterfaceWithUnit: _bindgen_ty_271 = 0;
pub const kIONetworkStackRegisterInterfaceWithLowestUnit: _bindgen_ty_271 = 1;
pub const kIONetworkStackRegisterInterfaceAll: _bindgen_ty_271 = 2;
pub type _bindgen_ty_271 = ::std::os::raw::c_uint;
pub const kIONetworkInterfaceRegisteredState: _bindgen_ty_272 = 1;
pub const kIONetworkInterfaceOpenedState: _bindgen_ty_272 = 2;
pub const kIONetworkInterfaceDisabledState: _bindgen_ty_272 = 4;
pub type _bindgen_ty_272 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IONetworkStats {
    pub inputPackets: UInt32,
    pub inputErrors: UInt32,
    pub outputPackets: UInt32,
    pub outputErrors: UInt32,
    pub collisions: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOOutputQueueStats {
    pub capacity: UInt32,
    pub size: UInt32,
    pub peakSize: UInt32,
    pub dropCount: UInt32,
    pub outputCount: UInt32,
    pub retryCount: UInt32,
    pub stallCount: UInt32,
    pub reserved: [UInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODot3StatsEntry {
    pub alignmentErrors: UInt32,
    pub fcsErrors: UInt32,
    pub singleCollisionFrames: UInt32,
    pub multipleCollisionFrames: UInt32,
    pub sqeTestErrors: UInt32,
    pub deferredTransmissions: UInt32,
    pub lateCollisions: UInt32,
    pub excessiveCollisions: UInt32,
    pub internalMacTransmitErrors: UInt32,
    pub carrierSenseErrors: UInt32,
    pub frameTooLongs: UInt32,
    pub internalMacReceiveErrors: UInt32,
    pub etherChipSet: UInt32,
    pub missedFrames: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODot3CollEntry {
    pub collFrequencies: [UInt32; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODot3RxExtraEntry {
    pub overruns: UInt32,
    pub watchdogTimeouts: UInt32,
    pub frameTooShorts: UInt32,
    pub collisionErrors: UInt32,
    pub phyErrors: UInt32,
    pub timeouts: UInt32,
    pub interrupts: UInt32,
    pub resets: UInt32,
    pub resourceErrors: UInt32,
    pub reserved: [UInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IODot3TxExtraEntry {
    pub underruns: UInt32,
    pub jabbers: UInt32,
    pub phyErrors: UInt32,
    pub timeouts: UInt32,
    pub interrupts: UInt32,
    pub resets: UInt32,
    pub resourceErrors: UInt32,
    pub reserved: [UInt32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOEthernetStats {
    pub dot3StatsEntry: IODot3StatsEntry,
    pub dot3CollEntry: IODot3CollEntry,
    pub dot3RxExtraEntry: IODot3RxExtraEntry,
    pub dot3TxExtraEntry: IODot3TxExtraEntry,
}
pub type IOMediumType = UInt32;
pub const kIOMediumEthernet: _bindgen_ty_273 = 32;
pub const kIOMediumEthernetAuto: _bindgen_ty_273 = 32;
pub const kIOMediumEthernetManual: _bindgen_ty_273 = 33;
pub const kIOMediumEthernetNone: _bindgen_ty_273 = 34;
pub const kIOMediumEthernet10BaseT: _bindgen_ty_273 = 35;
pub const kIOMediumEthernet10Base2: _bindgen_ty_273 = 36;
pub const kIOMediumEthernet10Base5: _bindgen_ty_273 = 37;
pub const kIOMediumEthernet100BaseTX: _bindgen_ty_273 = 38;
pub const kIOMediumEthernet100BaseFX: _bindgen_ty_273 = 39;
pub const kIOMediumEthernet100BaseT4: _bindgen_ty_273 = 40;
pub const kIOMediumEthernet100BaseVG: _bindgen_ty_273 = 41;
pub const kIOMediumEthernet100BaseT2: _bindgen_ty_273 = 42;
pub const kIOMediumEthernet1000BaseSX: _bindgen_ty_273 = 43;
pub const kIOMediumEthernet10BaseSTP: _bindgen_ty_273 = 44;
pub const kIOMediumEthernet10BaseFL: _bindgen_ty_273 = 45;
pub const kIOMediumEthernet1000BaseLX: _bindgen_ty_273 = 46;
pub const kIOMediumEthernet1000BaseCX: _bindgen_ty_273 = 47;
pub const kIOMediumEthernet1000BaseTX: _bindgen_ty_273 = 48;
pub const kIOMediumEthernet1000BaseT: _bindgen_ty_273 = 48;
pub const kIOMediumEthernetHomePNA1: _bindgen_ty_273 = 49;
pub const kIOMediumEthernet10GBaseSR: _bindgen_ty_273 = 50;
pub const kIOMediumEthernet10GBaseLR: _bindgen_ty_273 = 51;
pub const kIOMediumEthernet10GBaseCX4: _bindgen_ty_273 = 52;
pub const kIOMediumEthernet10GBaseT: _bindgen_ty_273 = 53;
pub const kIOMediumEthernet2500BaseT: _bindgen_ty_273 = 54;
pub const kIOMediumEthernet5000BaseT: _bindgen_ty_273 = 55;
pub type _bindgen_ty_273 = ::std::os::raw::c_uint;
pub const kIOMediumIEEE80211: _bindgen_ty_274 = 128;
pub const kIOMediumIEEE80211Auto: _bindgen_ty_274 = 128;
pub const kIOMediumIEEE80211Manual: _bindgen_ty_274 = 129;
pub const kIOMediumIEEE80211None: _bindgen_ty_274 = 130;
pub const kIOMediumIEEE80211FH1: _bindgen_ty_274 = 131;
pub const kIOMediumIEEE80211FH2: _bindgen_ty_274 = 132;
pub const kIOMediumIEEE80211DS2: _bindgen_ty_274 = 133;
pub const kIOMediumIEEE80211DS5: _bindgen_ty_274 = 134;
pub const kIOMediumIEEE80211DS11: _bindgen_ty_274 = 135;
pub const kIOMediumIEEE80211DS1: _bindgen_ty_274 = 136;
pub const kIOMediumIEEE80211OptionAdhoc: _bindgen_ty_274 = 256;
pub type _bindgen_ty_274 = ::std::os::raw::c_uint;
pub const kIOMediumOptionFullDuplex: _bindgen_ty_275 = 1048576;
pub const kIOMediumOptionHalfDuplex: _bindgen_ty_275 = 2097152;
pub const kIOMediumOptionFlowControl: _bindgen_ty_275 = 4194304;
pub const kIOMediumOptionEEE: _bindgen_ty_275 = 8388608;
pub const kIOMediumOptionFlag0: _bindgen_ty_275 = 16777216;
pub const kIOMediumOptionFlag1: _bindgen_ty_275 = 33554432;
pub const kIOMediumOptionFlag2: _bindgen_ty_275 = 67108864;
pub const kIOMediumOptionLoopback: _bindgen_ty_275 = 134217728;
pub type _bindgen_ty_275 = ::std::os::raw::c_uint;
pub const kIONetworkLinkValid: _bindgen_ty_276 = 1;
pub const kIONetworkLinkActive: _bindgen_ty_276 = 2;
pub const kIONetworkLinkNoNetworkChange: _bindgen_ty_276 = 4;
pub type _bindgen_ty_276 = ::std::os::raw::c_uint;
pub const kIONUCResetNetworkDataIndex: _bindgen_ty_277 = 0;
pub const kIONUCWriteNetworkDataIndex: _bindgen_ty_277 = 1;
pub const kIONUCReadNetworkDataIndex: _bindgen_ty_277 = 2;
pub const kIONUCGetNetworkDataCapacityIndex: _bindgen_ty_277 = 3;
pub const kIONUCGetNetworkDataHandleIndex: _bindgen_ty_277 = 4;
pub const kIONUCLastIndex: _bindgen_ty_277 = 5;
pub type _bindgen_ty_277 = ::std::os::raw::c_uint;
pub type IONDHandle = UInt32;
extern "C" {
    pub fn IONetworkOpen(obj: io_object_t, con: *mut io_connect_t) -> IOReturn;
}
extern "C" {
    pub fn IONetworkClose(con: io_connect_t) -> IOReturn;
}
extern "C" {
    pub fn IONetworkWriteData(
        conObj: io_connect_t,
        dataHandle: IONDHandle,
        srcBuf: *mut UInt8,
        inSize: UInt32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IONetworkReadData(
        conObj: io_connect_t,
        dataHandle: IONDHandle,
        destBuf: *mut UInt8,
        inOutSizeP: *mut UInt32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IONetworkResetData(conObject: io_connect_t, dataHandle: IONDHandle) -> IOReturn;
}
extern "C" {
    pub fn IONetworkGetDataCapacity(
        conObject: io_connect_t,
        dataHandle: IONDHandle,
        capacityP: *mut UInt32,
    ) -> IOReturn;
}
extern "C" {
    pub fn IONetworkGetDataHandle(
        conObject: io_connect_t,
        dataName: *const ::std::os::raw::c_char,
        dataHandleP: *mut IONDHandle,
    ) -> IOReturn;
}
extern "C" {
    pub fn IONetworkSetPacketFiltersMask(
        connect: io_connect_t,
        filterGroup: *mut ::std::os::raw::c_char,
        filtersMask: UInt32,
        options: IOOptionBits,
    ) -> IOReturn;
}
pub const kIONetworkSupportedPacketFilters: _bindgen_ty_278 = 1;
pub type _bindgen_ty_278 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IONetworkGetPacketFiltersMask(
        connect: io_connect_t,
        filterGroup: *mut ::std::os::raw::c_char,
        filtersMask: *mut UInt32,
        options: IOOptionBits,
    ) -> IOReturn;
}
pub const IOPSLowBatteryWarningLevel_kIOPSLowBatteryWarningNone: IOPSLowBatteryWarningLevel = 1;
pub const IOPSLowBatteryWarningLevel_kIOPSLowBatteryWarningEarly: IOPSLowBatteryWarningLevel = 2;
pub const IOPSLowBatteryWarningLevel_kIOPSLowBatteryWarningFinal: IOPSLowBatteryWarningLevel = 3;
pub type IOPSLowBatteryWarningLevel = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOPSGetBatteryWarningLevel() -> IOPSLowBatteryWarningLevel;
}
extern "C" {
    pub fn IOPSGetTimeRemainingEstimate() -> CFTimeInterval;
}
pub type IOPowerSourceCallbackType =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn IOPSCopyPowerSourcesInfo() -> CFTypeRef;
}
extern "C" {
    pub fn IOPSCopyPowerSourcesList(blob: CFTypeRef) -> CFArrayRef;
}
extern "C" {
    pub fn IOPSGetPowerSourceDescription(blob: CFTypeRef, ps: CFTypeRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn IOPSGetProvidingPowerSourceType(snapshot: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn IOPSNotificationCreateRunLoopSource(
        callback: IOPowerSourceCallbackType,
        context: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn IOPSCreateLimitedPowerNotification(
        callback: IOPowerSourceCallbackType,
        context: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn IOPSCopyExternalPowerAdapterDetails() -> CFDictionaryRef;
}
pub type IOUPSEventCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        result: IOReturn,
        refcon: *mut ::std::os::raw::c_void,
        sender: *mut ::std::os::raw::c_void,
        event: CFDictionaryRef,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUPSPlugInInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub getProperties: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            properties: *mut CFDictionaryRef,
        ) -> IOReturn,
    >,
    pub getCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            capabilities: *mut CFSetRef,
        ) -> IOReturn,
    >,
    pub getEvent: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            event: *mut CFDictionaryRef,
        ) -> IOReturn,
    >,
    pub setEventCallback: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            callback: IOUPSEventCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub sendCommand: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            command: CFDictionaryRef,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUPSPlugInInterface_v140 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub getProperties: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            properties: *mut CFDictionaryRef,
        ) -> IOReturn,
    >,
    pub getCapabilities: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            capabilities: *mut CFSetRef,
        ) -> IOReturn,
    >,
    pub getEvent: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            event: *mut CFDictionaryRef,
        ) -> IOReturn,
    >,
    pub setEventCallback: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            callback: IOUPSEventCallbackFunction,
            callbackTarget: *mut ::std::os::raw::c_void,
            callbackRefcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub sendCommand: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            command: CFDictionaryRef,
        ) -> IOReturn,
    >,
    pub createAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            source: *mut CFTypeRef,
        ) -> IOReturn,
    >,
}
pub const kIOPMMaxPowerStates: _bindgen_ty_279 = 10;
pub const IOPMMaxPowerStates: _bindgen_ty_279 = 10;
pub type _bindgen_ty_279 = ::std::os::raw::c_uint;
pub type IOPMPowerFlags = ::std::os::raw::c_ulong;
pub const kIOPMPowerOn: _bindgen_ty_280 = 2;
pub const kIOPMDeviceUsable: _bindgen_ty_280 = 32768;
pub const kIOPMLowPower: _bindgen_ty_280 = 65536;
pub const kIOPMPreventIdleSleep: _bindgen_ty_280 = 64;
pub const kIOPMSleepCapability: _bindgen_ty_280 = 4;
pub const kIOPMRestartCapability: _bindgen_ty_280 = 128;
pub const kIOPMSleep: _bindgen_ty_280 = 1;
pub const kIOPMRestart: _bindgen_ty_280 = 128;
pub const kIOPMInitialDeviceState: _bindgen_ty_280 = 256;
pub const kIOPMRootDomainState: _bindgen_ty_280 = 512;
pub type _bindgen_ty_280 = ::std::os::raw::c_uint;
pub const kIOPMClockNormal: _bindgen_ty_281 = 4;
pub const kIOPMClockRunning: _bindgen_ty_281 = 8;
pub const kIOPMPreventSystemSleep: _bindgen_ty_281 = 16;
pub const kIOPMDoze: _bindgen_ty_281 = 1024;
pub const kIOPMChildClamp: _bindgen_ty_281 = 128;
pub const kIOPMChildClamp2: _bindgen_ty_281 = 512;
pub const kIOPMNotPowerManaged: _bindgen_ty_281 = 2048;
pub type _bindgen_ty_281 = ::std::os::raw::c_uint;
pub const kIOPMMaxPerformance: _bindgen_ty_282 = 16384;
pub const kIOPMPassThrough: _bindgen_ty_282 = 256;
pub const kIOPMAuxPowerOn: _bindgen_ty_282 = 32;
pub const kIOPMNotAttainable: _bindgen_ty_282 = 1;
pub const kIOPMContextRetained: _bindgen_ty_282 = 8192;
pub const kIOPMConfigRetained: _bindgen_ty_282 = 4096;
pub const kIOPMStaticPowerValid: _bindgen_ty_282 = 2048;
pub const kIOPMSoftSleep: _bindgen_ty_282 = 1024;
pub const kIOPMCapabilitiesMask: _bindgen_ty_282 = 61574;
pub type _bindgen_ty_282 = ::std::os::raw::c_uint;
pub const IOPMNotAttainable: _bindgen_ty_283 = 1;
pub const IOPMPowerOn: _bindgen_ty_283 = 2;
pub const IOPMClockNormal: _bindgen_ty_283 = 4;
pub const IOPMClockRunning: _bindgen_ty_283 = 8;
pub const IOPMAuxPowerOn: _bindgen_ty_283 = 32;
pub const IOPMDeviceUsable: _bindgen_ty_283 = 32768;
pub const IOPMMaxPerformance: _bindgen_ty_283 = 16384;
pub const IOPMContextRetained: _bindgen_ty_283 = 8192;
pub const IOPMConfigRetained: _bindgen_ty_283 = 4096;
pub const IOPMNotPowerManaged: _bindgen_ty_283 = 2048;
pub const IOPMSoftSleep: _bindgen_ty_283 = 1024;
pub type _bindgen_ty_283 = ::std::os::raw::c_uint;
pub const kIOPMNextHigherState: _bindgen_ty_284 = 1;
pub const kIOPMHighestState: _bindgen_ty_284 = 2;
pub const kIOPMNextLowerState: _bindgen_ty_284 = 3;
pub const kIOPMLowestState: _bindgen_ty_284 = 4;
pub type _bindgen_ty_284 = ::std::os::raw::c_uint;
pub const IOPMNextHigherState: _bindgen_ty_285 = 1;
pub const IOPMHighestState: _bindgen_ty_285 = 2;
pub const IOPMNextLowerState: _bindgen_ty_285 = 3;
pub const IOPMLowestState: _bindgen_ty_285 = 4;
pub type _bindgen_ty_285 = ::std::os::raw::c_uint;
pub const kIOPMBroadcastAggressiveness: _bindgen_ty_286 = 1;
pub const kIOPMUnidleDevice: _bindgen_ty_286 = 2;
pub type _bindgen_ty_286 = ::std::os::raw::c_uint;
pub const kIOPMUnknown: _bindgen_ty_287 = 65535;
pub type _bindgen_ty_287 = ::std::os::raw::c_uint;
pub const kIOPMDriverAssertionCPUBit: _bindgen_ty_288 = 1;
pub const kIOPMDriverAssertionPreventSystemIdleSleepBit: _bindgen_ty_288 = 2;
pub const kIOPMDriverAssertionUSBExternalDeviceBit: _bindgen_ty_288 = 4;
pub const kIOPMDriverAssertionBluetoothHIDDevicePairedBit: _bindgen_ty_288 = 8;
pub const kIOPMDriverAssertionExternalMediaMountedBit: _bindgen_ty_288 = 16;
pub const kIOPMDriverAssertionReservedBit5: _bindgen_ty_288 = 32;
pub const kIOPMDriverAssertionPreventDisplaySleepBit: _bindgen_ty_288 = 64;
pub const kIOPMDriverAssertionReservedBit7: _bindgen_ty_288 = 128;
pub const kIOPMDriverAssertionMagicPacketWakeEnabledBit: _bindgen_ty_288 = 256;
pub const kIOPMDriverAssertionNetworkKeepAliveActiveBit: _bindgen_ty_288 = 512;
pub type _bindgen_ty_288 = ::std::os::raw::c_uint;
pub const kClamshellStateBit: _bindgen_ty_289 = 1;
pub const kClamshellSleepBit: _bindgen_ty_289 = 2;
pub type _bindgen_ty_289 = ::std::os::raw::c_uint;
pub const kInflowForciblyEnabledBit: _bindgen_ty_290 = 1;
pub type _bindgen_ty_290 = ::std::os::raw::c_uint;
pub const kIOPMSleepNow: _bindgen_ty_291 = 1;
pub const kIOPMAllowSleep: _bindgen_ty_291 = 2;
pub const kIOPMPreventSleep: _bindgen_ty_291 = 4;
pub const kIOPMPowerButton: _bindgen_ty_291 = 8;
pub const kIOPMClamshellClosed: _bindgen_ty_291 = 16;
pub const kIOPMPowerEmergency: _bindgen_ty_291 = 32;
pub const kIOPMDisableClamshell: _bindgen_ty_291 = 64;
pub const kIOPMEnableClamshell: _bindgen_ty_291 = 128;
pub const kIOPMProcessorSpeedChange: _bindgen_ty_291 = 256;
pub const kIOPMOverTemp: _bindgen_ty_291 = 512;
pub const kIOPMClamshellOpened: _bindgen_ty_291 = 1024;
pub const kIOPMDWOverTemp: _bindgen_ty_291 = 2048;
pub const kIOPMPowerButtonUp: _bindgen_ty_291 = 4096;
pub const kIOPMProModeEngaged: _bindgen_ty_291 = 8192;
pub const kIOPMProModeDisengaged: _bindgen_ty_291 = 16384;
pub type _bindgen_ty_291 = ::std::os::raw::c_uint;
pub const kIOPMNoErr: _bindgen_ty_292 = 0;
pub const kIOPMAckImplied: _bindgen_ty_292 = 0;
pub const kIOPMWillAckLater: _bindgen_ty_292 = 1;
pub const kIOPMBadSpecification: _bindgen_ty_292 = 4;
pub const kIOPMNoSuchState: _bindgen_ty_292 = 5;
pub const kIOPMCannotRaisePower: _bindgen_ty_292 = 6;
pub const kIOPMParameterError: _bindgen_ty_292 = 7;
pub const kIOPMNotYetInitialized: _bindgen_ty_292 = 8;
pub const IOPMNoErr: _bindgen_ty_292 = 0;
pub const IOPMAckImplied: _bindgen_ty_292 = 0;
pub const IOPMWillAckLater: _bindgen_ty_292 = 1;
pub const IOPMBadSpecification: _bindgen_ty_292 = 4;
pub const IOPMNoSuchState: _bindgen_ty_292 = 5;
pub const IOPMCannotRaisePower: _bindgen_ty_292 = 6;
pub const IOPMParameterError: _bindgen_ty_292 = 7;
pub const IOPMNotYetInitialized: _bindgen_ty_292 = 8;
pub type _bindgen_ty_292 = ::std::os::raw::c_uint;
pub const kIOPMPSLocationLeft: _bindgen_ty_293 = 1001;
pub const kIOPMPSLocationRight: _bindgen_ty_293 = 1002;
pub type _bindgen_ty_293 = ::std::os::raw::c_uint;
pub const kIOPMUndefinedValue: _bindgen_ty_294 = 0;
pub const kIOPMPoorValue: _bindgen_ty_294 = 1;
pub const kIOPMFairValue: _bindgen_ty_294 = 2;
pub const kIOPMGoodValue: _bindgen_ty_294 = 3;
pub type _bindgen_ty_294 = ::std::os::raw::c_uint;
pub const kIOPSFamilyCodeDisconnected: _bindgen_ty_295 = 0;
pub const kIOPSFamilyCodeUnsupported: _bindgen_ty_295 = -536870201;
pub const kIOPSFamilyCodeFirewire: _bindgen_ty_295 = -536838144;
pub const kIOPSFamilyCodeUSBHost: _bindgen_ty_295 = -536854528;
pub const kIOPSFamilyCodeUSBHostSuspended: _bindgen_ty_295 = -536854527;
pub const kIOPSFamilyCodeUSBDevice: _bindgen_ty_295 = -536854526;
pub const kIOPSFamilyCodeUSBAdapter: _bindgen_ty_295 = -536854525;
pub const kIOPSFamilyCodeUSBChargingPortDedicated: _bindgen_ty_295 = -536854524;
pub const kIOPSFamilyCodeUSBChargingPortDownstream: _bindgen_ty_295 = -536854523;
pub const kIOPSFamilyCodeUSBChargingPort: _bindgen_ty_295 = -536854522;
pub const kIOPSFamilyCodeUSBUnknown: _bindgen_ty_295 = -536854521;
pub const kIOPSFamilyCodeUSBCBrick: _bindgen_ty_295 = -536854520;
pub const kIOPSFamilyCodeUSBCTypeC: _bindgen_ty_295 = -536854519;
pub const kIOPSFamilyCodeUSBCPD: _bindgen_ty_295 = -536854518;
pub const kIOPSFamilyCodeAC: _bindgen_ty_295 = -536723456;
pub const kIOPSFamilyCodeExternal: _bindgen_ty_295 = -536723455;
pub const kIOPSFamilyCodeExternal2: _bindgen_ty_295 = -536723454;
pub const kIOPSFamilyCodeExternal3: _bindgen_ty_295 = -536723453;
pub const kIOPSFamilyCodeExternal4: _bindgen_ty_295 = -536723452;
pub const kIOPSFamilyCodeExternal5: _bindgen_ty_295 = -536723451;
pub const kIOPSFamilyCodeExternal6: _bindgen_ty_295 = -536723450;
pub const kIOPSFamilyCodeExternal7: _bindgen_ty_295 = -536723449;
pub type _bindgen_ty_295 = ::std::os::raw::c_int;
pub const kIOPSAdapterErrorFlagNoErrors: _bindgen_ty_296 = 0;
pub const kIOPSAdapterErrorFlagInsufficientAvailablePower: _bindgen_ty_296 = 2;
pub const kIOPSAdapterErrorFlagForeignObjectDetected: _bindgen_ty_296 = 4;
pub const kIOPSAdapterErrorFlagDeviceNeedsToBeRepositioned: _bindgen_ty_296 = 8;
pub type _bindgen_ty_296 = ::std::os::raw::c_uint;
pub const kIOPMThermalLevelNormal: _bindgen_ty_297 = 0;
pub const kIOPMThermalLevelDanger: _bindgen_ty_297 = 5;
pub const kIOPMThermalLevelCritical: _bindgen_ty_297 = 10;
pub const kIOPMThermalLevelWarning: _bindgen_ty_297 = 100;
pub const kIOPMThermalLevelTrap: _bindgen_ty_297 = 110;
pub const kIOPMThermalLevelUnknown: _bindgen_ty_297 = 255;
pub type _bindgen_ty_297 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOPMCalendarStruct {
    pub year: UInt32,
    pub month: UInt8,
    pub day: UInt8,
    pub hour: UInt8,
    pub minute: UInt8,
    pub second: UInt8,
    pub selector: UInt8,
}
pub const kPMGeneralAggressiveness: _bindgen_ty_298 = 0;
pub const kPMMinutesToDim: _bindgen_ty_298 = 1;
pub const kPMMinutesToSpinDown: _bindgen_ty_298 = 2;
pub const kPMMinutesToSleep: _bindgen_ty_298 = 3;
pub const kPMEthernetWakeOnLANSettings: _bindgen_ty_298 = 4;
pub const kPMSetProcessorSpeed: _bindgen_ty_298 = 5;
pub const kPMPowerSource: _bindgen_ty_298 = 6;
pub const kPMMotionSensor: _bindgen_ty_298 = 7;
pub const kPMLastAggressivenessType: _bindgen_ty_298 = 8;
pub type _bindgen_ty_298 = ::std::os::raw::c_uint;
pub const kIOPMInternalPower: _bindgen_ty_299 = 1;
pub const kIOPMExternalPower: _bindgen_ty_299 = 2;
pub type _bindgen_ty_299 = ::std::os::raw::c_uint;
pub const kIOBatteryInstalled: _bindgen_ty_300 = 4;
pub const kIOBatteryCharge: _bindgen_ty_300 = 2;
pub const kIOBatteryChargerConnect: _bindgen_ty_300 = 1;
pub type _bindgen_ty_300 = ::std::os::raw::c_uint;
pub const kIOPMACInstalled: _bindgen_ty_301 = 1;
pub const kIOPMBatteryCharging: _bindgen_ty_301 = 2;
pub const kIOPMBatteryInstalled: _bindgen_ty_301 = 4;
pub const kIOPMUPSInstalled: _bindgen_ty_301 = 8;
pub const kIOPMBatteryAtWarn: _bindgen_ty_301 = 16;
pub const kIOPMBatteryDepleted: _bindgen_ty_301 = 32;
pub const kIOPMACnoChargeCapability: _bindgen_ty_301 = 64;
pub const kIOPMRawLowBattery: _bindgen_ty_301 = 128;
pub const kIOPMForceLowSpeed: _bindgen_ty_301 = 256;
pub const kIOPMClosedClamshell: _bindgen_ty_301 = 512;
pub const kIOPMClamshellStateOnWake: _bindgen_ty_301 = 1024;
pub type _bindgen_ty_301 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOPowerStateChangeNotification {
    pub powerRef: *mut ::std::os::raw::c_void,
    pub returnValue: ::std::os::raw::c_ulong,
    pub stateNumber: ::std::os::raw::c_ulong,
    pub stateFlags: IOPMPowerFlags,
}
pub type sleepWakeNote = IOPowerStateChangeNotification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOPMSystemCapabilityChangeParameters {
    pub notifyRef: u32,
    pub maxWaitForReply: u32,
    pub changeFlags: u32,
    pub __reserved1: u32,
    pub fromCapabilities: u32,
    pub toCapabilities: u32,
    pub __reserved2: [u32; 4usize],
}
pub const kIOPMSystemCapabilityWillChange: _bindgen_ty_302 = 1;
pub const kIOPMSystemCapabilityDidChange: _bindgen_ty_302 = 2;
pub type _bindgen_ty_302 = ::std::os::raw::c_uint;
pub const kIOPMSystemCapabilityCPU: _bindgen_ty_303 = 1;
pub const kIOPMSystemCapabilityGraphics: _bindgen_ty_303 = 2;
pub const kIOPMSystemCapabilityAudio: _bindgen_ty_303 = 4;
pub const kIOPMSystemCapabilityNetwork: _bindgen_ty_303 = 8;
pub type _bindgen_ty_303 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOPMFindPowerManagement(master_device_port: mach_port_t) -> io_connect_t;
}
extern "C" {
    pub fn IOPMSetAggressiveness(
        fb: io_connect_t,
        type_: ::std::os::raw::c_ulong,
        aggressiveness: ::std::os::raw::c_ulong,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMGetAggressiveness(
        fb: io_connect_t,
        type_: ::std::os::raw::c_ulong,
        aggressiveness: *mut ::std::os::raw::c_ulong,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMSleepEnabled() -> boolean_t;
}
extern "C" {
    pub fn IOPMSleepSystem(fb: io_connect_t) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyBatteryInfo(masterPort: mach_port_t, info: *mut CFArrayRef) -> IOReturn;
}
extern "C" {
    pub fn IORegisterApp(
        refcon: *mut ::std::os::raw::c_void,
        theDriver: io_service_t,
        thePortRef: *mut IONotificationPortRef,
        callback: IOServiceInterestCallback,
        notifier: *mut io_object_t,
    ) -> io_connect_t;
}
extern "C" {
    pub fn IORegisterForSystemPower(
        refcon: *mut ::std::os::raw::c_void,
        thePortRef: *mut IONotificationPortRef,
        callback: IOServiceInterestCallback,
        notifier: *mut io_object_t,
    ) -> io_connect_t;
}
extern "C" {
    pub fn IODeregisterApp(notifier: *mut io_object_t) -> IOReturn;
}
extern "C" {
    pub fn IODeregisterForSystemPower(notifier: *mut io_object_t) -> IOReturn;
}
extern "C" {
    pub fn IOAllowPowerChange(kernelPort: io_connect_t, notificationID: isize) -> IOReturn;
}
extern "C" {
    pub fn IOCancelPowerChange(kernelPort: io_connect_t, notificationID: isize) -> IOReturn;
}
extern "C" {
    pub fn IOPMSchedulePowerEvent(
        time_to_wake: CFDateRef,
        my_id: CFStringRef,
        type_: CFStringRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCancelScheduledPowerEvent(
        time_to_wake: CFDateRef,
        my_id: CFStringRef,
        type_: CFStringRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyScheduledPowerEvents() -> CFArrayRef;
}
pub type IOPMAssertionID = u32;
pub const kIOPMNullAssertionID: _bindgen_ty_304 = 0;
pub type _bindgen_ty_304 = ::std::os::raw::c_uint;
pub type IOPMAssertionLevel = u32;
pub const kIOPMAssertionLevelOff: _bindgen_ty_305 = 0;
pub const kIOPMAssertionLevelOn: _bindgen_ty_305 = 255;
pub type _bindgen_ty_305 = ::std::os::raw::c_uint;
pub const IOPMUserActiveType_kIOPMUserActiveLocal: IOPMUserActiveType = 0;
pub const IOPMUserActiveType_kIOPMUserActiveRemote: IOPMUserActiveType = 1;
pub type IOPMUserActiveType = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOPMAssertionCreateWithDescription(
        AssertionType: CFStringRef,
        Name: CFStringRef,
        Details: CFStringRef,
        HumanReadableReason: CFStringRef,
        LocalizationBundlePath: CFStringRef,
        Timeout: CFTimeInterval,
        TimeoutAction: CFStringRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCreateWithProperties(
        AssertionProperties: CFDictionaryRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionDeclareUserActivity(
        AssertionName: CFStringRef,
        userType: IOPMUserActiveType,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMDeclareNetworkClientActivity(
        AssertionName: CFStringRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionRetain(theAssertion: IOPMAssertionID);
}
extern "C" {
    pub fn IOPMAssertionRelease(AssertionID: IOPMAssertionID) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCopyProperties(theAssertion: IOPMAssertionID) -> CFDictionaryRef;
}
extern "C" {
    pub fn IOPMAssertionSetProperty(
        theAssertion: IOPMAssertionID,
        theProperty: CFStringRef,
        theValue: CFTypeRef,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyAssertionsByProcess(AssertionsByPID: *mut CFDictionaryRef) -> IOReturn;
}
extern "C" {
    pub fn IOPMCopyAssertionsStatus(AssertionsStatus: *mut CFDictionaryRef) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCreate(
        AssertionType: CFStringRef,
        AssertionLevel: IOPMAssertionLevel,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
extern "C" {
    pub fn IOPMAssertionCreateWithName(
        AssertionType: CFStringRef,
        AssertionLevel: IOPMAssertionLevel,
        AssertionName: CFStringRef,
        AssertionID: *mut IOPMAssertionID,
    ) -> IOReturn;
}
pub type IOSystemLoadAdvisoryLevel = ::std::os::raw::c_int;
pub const kIOSystemLoadAdvisoryLevelBad: _bindgen_ty_306 = 1;
pub const kIOSystemLoadAdvisoryLevelOK: _bindgen_ty_306 = 2;
pub const kIOSystemLoadAdvisoryLevelGreat: _bindgen_ty_306 = 3;
pub type _bindgen_ty_306 = ::std::os::raw::c_uint;
extern "C" {
    pub fn IOGetSystemLoadAdvisory() -> IOSystemLoadAdvisoryLevel;
}
extern "C" {
    pub fn IOCopySystemLoadAdvisoryDetailed() -> CFDictionaryRef;
}
extern "C" {
    pub fn IOPMCopyCPUPowerStatus(cpuPowerStatus: *mut CFDictionaryRef) -> IOReturn;
}
extern "C" {
    pub fn IOPMGetThermalWarningLevel(thermalLevel: *mut u32) -> IOReturn;
}
pub const IODirection_kIODirectionNone: IODirection = 0;
pub const IODirection_kIODirectionIn: IODirection = 1;
pub const IODirection_kIODirectionOut: IODirection = 2;
pub const IODirection_kIODirectionInOut: IODirection = 3;
pub type IODirection = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2VirtualRange {
    pub address: *mut ::std::os::raw::c_void,
    pub length: UInt32,
}
pub const kFWSBP2DontSynchronizeMgmtAgent: _bindgen_ty_307 = 1;
pub const kFWSBP2ExclusiveLogin: _bindgen_ty_307 = 32;
pub type _bindgen_ty_307 = ::std::os::raw::c_uint;
pub const kFWSBP2CommandCompleteNotify: _bindgen_ty_308 = 1;
pub const kFWSBP2CommandTransferDataFromTarget: _bindgen_ty_308 = 2;
pub const kFWSBP2CommandImmediate: _bindgen_ty_308 = 4;
pub const kFWSBP2CommandNormalORB: _bindgen_ty_308 = 32;
pub const kFWSBP2CommandReservedORB: _bindgen_ty_308 = 64;
pub const kFWSBP2CommandVendorORB: _bindgen_ty_308 = 128;
pub const kFWSBP2CommandDummyORB: _bindgen_ty_308 = 256;
pub const kFWSBP2CommandCheckGeneration: _bindgen_ty_308 = 512;
pub const kFWSBP2CommandFixedSize: _bindgen_ty_308 = 1024;
pub const kFWSBP2CommandVirtualORBs: _bindgen_ty_308 = 2048;
pub type _bindgen_ty_308 = ::std::os::raw::c_uint;
pub const kFWSBP2QueryLogins: _bindgen_ty_309 = 1;
pub const kFWSBP2AbortTask: _bindgen_ty_309 = 11;
pub const kFWSBP2AbortTaskSet: _bindgen_ty_309 = 12;
pub const kFWSBP2LogicalUnitReset: _bindgen_ty_309 = 14;
pub const kFWSBP2TargetReset: _bindgen_ty_309 = 15;
pub type _bindgen_ty_309 = ::std::os::raw::c_uint;
pub const kFWSBP2NormalCommandStatus: _bindgen_ty_310 = 6;
pub const kFWSBP2NormalCommandTimeout: _bindgen_ty_310 = 7;
pub const kFWSBP2UnsolicitedStatus: _bindgen_ty_310 = 8;
pub const kFWSBP2NormalCommandReset: _bindgen_ty_310 = 9;
pub type _bindgen_ty_310 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2LoginResponse {
    pub length: UInt16,
    pub loginID: UInt16,
    pub commandBlockAgentAddressHi: UInt32,
    pub commandBlockAgentAddressLo: UInt32,
    pub reserved: UInt16,
    pub reconnectHold: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2StatusBlock {
    pub details: UInt8,
    pub sbpStatus: UInt8,
    pub orbOffsetHi: UInt16,
    pub orbOffsetLo: UInt32,
    pub status: [UInt32; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2LoginCompleteParams {
    pub refCon: *mut ::std::os::raw::c_void,
    pub generation: UInt32,
    pub status: IOReturn,
    pub loginResponse: *mut FWSBP2LoginResponse,
    pub statusBlock: *mut FWSBP2StatusBlock,
    pub statusBlockLength: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2LogoutCompleteParams {
    pub refCon: *mut ::std::os::raw::c_void,
    pub generation: UInt32,
    pub status: IOReturn,
    pub statusBlock: *mut FWSBP2StatusBlock,
    pub statusBlockLength: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2ReconnectParams {
    pub refCon: *mut ::std::os::raw::c_void,
    pub generation: UInt32,
    pub status: IOReturn,
    pub reconnectStatusBlock: *mut FWSBP2StatusBlock,
    pub reconnectStatusBlockLength: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FWSBP2NotifyParams {
    pub refCon: *mut ::std::os::raw::c_void,
    pub notificationEvent: UInt32,
    pub message: *const ::std::os::raw::c_void,
    pub length: UInt32,
    pub generation: UInt32,
}
pub type IOFWSBP2MessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        type_: UInt32,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFWSBP2LoginCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        params: *mut FWSBP2LoginCompleteParams,
    ),
>;
pub type IOFWSBP2LogoutCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        params: *mut FWSBP2LogoutCompleteParams,
    ),
>;
pub type IOFWSBP2ORBAppendCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        status: IOReturn,
        orb: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFWSBP2ORBCompleteCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        status: IOReturn,
        orb: *mut ::std::os::raw::c_void,
    ),
>;
pub type IOFWSBP2NotifyCallback = ::std::option::Option<
    unsafe extern "C" fn(refCon: *mut ::std::os::raw::c_void, params: *mut FWSBP2NotifyParams),
>;
pub type IOFWSBP2StatusCallback = ::std::option::Option<
    unsafe extern "C" fn(refCon: *mut ::std::os::raw::c_void, status: IOReturn),
>;
pub type IOFWSBP2FetchAgentWriteCallback = ::std::option::Option<
    unsafe extern "C" fn(
        refCon: *mut ::std::os::raw::c_void,
        status: IOReturn,
        orbRefCon: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireSBP2LibLUNInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub open:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub openWithSessionRef: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            sessionRef: IOFireWireSessionRef,
        ) -> IOReturn,
    >,
    pub getSessionRef: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOFireWireSessionRef,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void)>,
    pub addCallbackDispatcherToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            cfRunLoopRef: CFRunLoopRef,
        ) -> IOReturn,
    >,
    pub removeCallbackDispatcherFromRunLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void)>,
    pub setMessageCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2MessageCallback,
        ),
    >,
    pub setRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub getRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub createLogin: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> *mut *mut IUnknownVTbl,
    >,
    pub createMgmtORB: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> *mut *mut IUnknownVTbl,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireSBP2LibORBInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub setRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub getRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub setCommandFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: UInt32),
    >,
    pub setMaxORBPayloadSize: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, size: UInt32),
    >,
    pub setCommandTimeout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, timeout: UInt32),
    >,
    pub setCommandGeneration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, generation: UInt32),
    >,
    pub setCommandBuffersAsRanges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ranges: *mut FWSBP2VirtualRange,
            withCount: UInt32,
            withDirection: UInt32,
            offset: UInt32,
            length: UInt32,
        ) -> IOReturn,
    >,
    pub releaseCommandBuffers:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setCommandBlock: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            length: UInt32,
        ) -> IOReturn,
    >,
    pub LSIWorkaroundSetCommandBuffersAsRanges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ranges: *mut FWSBP2VirtualRange,
            withCount: UInt32,
            withDirection: UInt32,
            offset: UInt32,
            length: UInt32,
        ) -> IOReturn,
    >,
    pub LSIWorkaroundSyncBuffersForOutput:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub LSIWorkaroundSyncBuffersForInput:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireSBP2LibLoginInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub submitLogin:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub submitLogout:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setLoginFlags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, flags: UInt32),
    >,
    pub setLoginCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2LoginCallback,
        ),
    >,
    pub setLogoutCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2LogoutCallback,
        ),
    >,
    pub setRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub getRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub getMaxCommandBlockSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> UInt32>,
    pub getLoginID:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> UInt32>,
    pub setMaxPayloadSize: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, size: UInt32),
    >,
    pub setReconnectTime: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, time: UInt32),
    >,
    pub createORB: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            iid: REFIID,
        ) -> *mut *mut IUnknownVTbl,
    >,
    pub submitORB: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            orb: *mut *mut IOFireWireSBP2LibORBInterface,
        ) -> IOReturn,
    >,
    pub setUnsolicitedStatusNotify: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2NotifyCallback,
        ),
    >,
    pub setStatusNotify: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2NotifyCallback,
        ),
    >,
    pub setFetchAgentResetCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2StatusCallback,
        ),
    >,
    pub submitFetchAgentReset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setFetchAgentWriteCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2FetchAgentWriteCallback,
        ),
    >,
    pub ringDoorbell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub enableUnsolicitedStatus:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setBusyTimeoutRegisterValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, timeout: UInt32) -> IOReturn,
    >,
    pub setPassword: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            length: UInt32,
        ) -> IOReturn,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOFireWireSBP2LibMgmtORBInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub submitORB:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub setORBCompleteCallback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
            callback: IOFWSBP2ORBCompleteCallback,
        ),
    >,
    pub setRefCon: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            refCon: *mut ::std::os::raw::c_void,
        ),
    >,
    pub getRefCon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub setCommandFunction: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, function: UInt32) -> IOReturn,
    >,
    pub setManageeORB: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            command: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub setManageeLogin: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            command: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub setResponseBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buf: *mut ::std::os::raw::c_void,
            len: UInt32,
        ) -> IOReturn,
    >,
}
pub const kMessageTrayStateChangeRequestAccepted: _bindgen_ty_311 = 0;
pub const kMessageTrayStateChangeRequestRejected: _bindgen_ty_311 = 1;
pub type _bindgen_ty_311 = ::std::os::raw::c_uint;
pub const kMessageDeterminingMediaPresence: _bindgen_ty_312 = 0;
pub const kMessageFoundMedia: _bindgen_ty_312 = 1;
pub const kMessageMediaTypeDetermined: _bindgen_ty_312 = 2;
pub type _bindgen_ty_312 = ::std::os::raw::c_uint;
pub type CDFeatures = UInt32;
pub const kCDFeaturesAnalogAudioBit: _bindgen_ty_313 = 0;
pub const kCDFeaturesReadStructuresBit: _bindgen_ty_313 = 1;
pub const kCDFeaturesWriteOnceBit: _bindgen_ty_313 = 2;
pub const kCDFeaturesReWriteableBit: _bindgen_ty_313 = 3;
pub const kCDFeaturesCDDAStreamAccurateBit: _bindgen_ty_313 = 4;
pub const kCDFeaturesPacketWriteBit: _bindgen_ty_313 = 5;
pub const kCDFeaturesTAOWriteBit: _bindgen_ty_313 = 6;
pub const kCDFeaturesSAOWriteBit: _bindgen_ty_313 = 7;
pub const kCDFeaturesRawWriteBit: _bindgen_ty_313 = 8;
pub const kCDFeaturesTestWriteBit: _bindgen_ty_313 = 9;
pub const kCDFeaturesBUFWriteBit: _bindgen_ty_313 = 10;
pub type _bindgen_ty_313 = ::std::os::raw::c_uint;
pub const kCDFeaturesAnalogAudioMask: _bindgen_ty_314 = 1;
pub const kCDFeaturesReadStructuresMask: _bindgen_ty_314 = 2;
pub const kCDFeaturesWriteOnceMask: _bindgen_ty_314 = 4;
pub const kCDFeaturesReWriteableMask: _bindgen_ty_314 = 8;
pub const kCDFeaturesCDDAStreamAccurateMask: _bindgen_ty_314 = 16;
pub const kCDFeaturesPacketWriteMask: _bindgen_ty_314 = 32;
pub const kCDFeaturesTAOWriteMask: _bindgen_ty_314 = 64;
pub const kCDFeaturesSAOWriteMask: _bindgen_ty_314 = 128;
pub const kCDFeaturesRawWriteMask: _bindgen_ty_314 = 256;
pub const kCDFeaturesTestWriteMask: _bindgen_ty_314 = 512;
pub const kCDFeaturesBUFWriteMask: _bindgen_ty_314 = 1024;
pub type _bindgen_ty_314 = ::std::os::raw::c_uint;
pub type DVDFeatures = UInt32;
pub const kDVDFeaturesCSSBit: _bindgen_ty_315 = 0;
pub const kDVDFeaturesReadStructuresBit: _bindgen_ty_315 = 1;
pub const kDVDFeaturesWriteOnceBit: _bindgen_ty_315 = 2;
pub const kDVDFeaturesRandomWriteableBit: _bindgen_ty_315 = 3;
pub const kDVDFeaturesReWriteableBit: _bindgen_ty_315 = 4;
pub const kDVDFeaturesTestWriteBit: _bindgen_ty_315 = 5;
pub const kDVDFeaturesBUFWriteBit: _bindgen_ty_315 = 6;
pub const kDVDFeaturesPlusRBit: _bindgen_ty_315 = 7;
pub const kDVDFeaturesPlusRWBit: _bindgen_ty_315 = 8;
pub const kDVDFeaturesHDReadBit: _bindgen_ty_315 = 9;
pub const kDVDFeaturesHDRBit: _bindgen_ty_315 = 10;
pub const kDVDFeaturesHDRAMBit: _bindgen_ty_315 = 11;
pub const kDVDFeaturesHDRWBit: _bindgen_ty_315 = 12;
pub type _bindgen_ty_315 = ::std::os::raw::c_uint;
pub const kDVDFeaturesCSSMask: _bindgen_ty_316 = 1;
pub const kDVDFeaturesReadStructuresMask: _bindgen_ty_316 = 2;
pub const kDVDFeaturesWriteOnceMask: _bindgen_ty_316 = 4;
pub const kDVDFeaturesRandomWriteableMask: _bindgen_ty_316 = 8;
pub const kDVDFeaturesReWriteableMask: _bindgen_ty_316 = 16;
pub const kDVDFeaturesTestWriteMask: _bindgen_ty_316 = 32;
pub const kDVDFeaturesBUFWriteMask: _bindgen_ty_316 = 64;
pub const kDVDFeaturesPlusRMask: _bindgen_ty_316 = 128;
pub const kDVDFeaturesPlusRWMask: _bindgen_ty_316 = 256;
pub const kDVDFeaturesHDReadMask: _bindgen_ty_316 = 512;
pub const kDVDFeaturesHDRMask: _bindgen_ty_316 = 1024;
pub const kDVDFeaturesHDRAMMask: _bindgen_ty_316 = 2048;
pub const kDVDFeaturesHDRWMask: _bindgen_ty_316 = 4096;
pub type _bindgen_ty_316 = ::std::os::raw::c_uint;
pub type BDFeatures = UInt32;
pub const kBDFeaturesReadBit: _bindgen_ty_317 = 0;
pub const kBDFeaturesWriteBit: _bindgen_ty_317 = 1;
pub type _bindgen_ty_317 = ::std::os::raw::c_uint;
pub const kBDFeaturesReadMask: _bindgen_ty_318 = 1;
pub const kBDFeaturesWriteMask: _bindgen_ty_318 = 2;
pub type _bindgen_ty_318 = ::std::os::raw::c_uint;
pub const kDiscStatusEmpty: _bindgen_ty_319 = 0;
pub const kDiscStatusIncomplete: _bindgen_ty_319 = 1;
pub const kDiscStatusComplete: _bindgen_ty_319 = 2;
pub const kDiscStatusOther: _bindgen_ty_319 = 3;
pub const kDiscStatusMask: _bindgen_ty_319 = 3;
pub const kDiscStatusErasableMask: _bindgen_ty_319 = 16;
pub type _bindgen_ty_319 = ::std::os::raw::c_uint;
pub const kSenseDefaultSize: _bindgen_ty_320 = 18;
pub type _bindgen_ty_320 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSI_Sense_Data {
    pub VALID_RESPONSE_CODE: UInt8,
    pub SEGMENT_NUMBER: UInt8,
    pub SENSE_KEY: UInt8,
    pub INFORMATION_1: UInt8,
    pub INFORMATION_2: UInt8,
    pub INFORMATION_3: UInt8,
    pub INFORMATION_4: UInt8,
    pub ADDITIONAL_SENSE_LENGTH: UInt8,
    pub COMMAND_SPECIFIC_INFORMATION_1: UInt8,
    pub COMMAND_SPECIFIC_INFORMATION_2: UInt8,
    pub COMMAND_SPECIFIC_INFORMATION_3: UInt8,
    pub COMMAND_SPECIFIC_INFORMATION_4: UInt8,
    pub ADDITIONAL_SENSE_CODE: UInt8,
    pub ADDITIONAL_SENSE_CODE_QUALIFIER: UInt8,
    pub FIELD_REPLACEABLE_UNIT_CODE: UInt8,
    pub SKSV_SENSE_KEY_SPECIFIC_MSB: UInt8,
    pub SENSE_KEY_SPECIFIC_MID: UInt8,
    pub SENSE_KEY_SPECIFIC_LSB: UInt8,
}
pub const kSENSE_DATA_VALID: _bindgen_ty_321 = 128;
pub const kSENSE_NOT_DATA_VALID: _bindgen_ty_321 = 0;
pub const kSENSE_DATA_VALID_Mask: _bindgen_ty_321 = 128;
pub type _bindgen_ty_321 = ::std::os::raw::c_uint;
pub const kSENSE_RESPONSE_CODE_Current_Errors: _bindgen_ty_322 = 112;
pub const kSENSE_RESPONSE_CODE_Deferred_Errors: _bindgen_ty_322 = 113;
pub const kSENSE_RESPONSE_CODE_Mask: _bindgen_ty_322 = 127;
pub type _bindgen_ty_322 = ::std::os::raw::c_uint;
pub const kSENSE_FILEMARK_Set: _bindgen_ty_323 = 128;
pub const kSENSE_FILEMARK_Not_Set: _bindgen_ty_323 = 0;
pub const kSENSE_FILEMARK_Mask: _bindgen_ty_323 = 128;
pub type _bindgen_ty_323 = ::std::os::raw::c_uint;
pub const kSENSE_EOM_Set: _bindgen_ty_324 = 64;
pub const kSENSE_EOM_Not_Set: _bindgen_ty_324 = 0;
pub const kSENSE_EOM_Mask: _bindgen_ty_324 = 64;
pub type _bindgen_ty_324 = ::std::os::raw::c_uint;
pub const kSENSE_ILI_Set: _bindgen_ty_325 = 32;
pub const kSENSE_ILI_Not_Set: _bindgen_ty_325 = 0;
pub const kSENSE_ILI_Mask: _bindgen_ty_325 = 32;
pub type _bindgen_ty_325 = ::std::os::raw::c_uint;
pub const kSENSE_KEY_NO_SENSE: _bindgen_ty_326 = 0;
pub const kSENSE_KEY_RECOVERED_ERROR: _bindgen_ty_326 = 1;
pub const kSENSE_KEY_NOT_READY: _bindgen_ty_326 = 2;
pub const kSENSE_KEY_MEDIUM_ERROR: _bindgen_ty_326 = 3;
pub const kSENSE_KEY_HARDWARE_ERROR: _bindgen_ty_326 = 4;
pub const kSENSE_KEY_ILLEGAL_REQUEST: _bindgen_ty_326 = 5;
pub const kSENSE_KEY_UNIT_ATTENTION: _bindgen_ty_326 = 6;
pub const kSENSE_KEY_DATA_PROTECT: _bindgen_ty_326 = 7;
pub const kSENSE_KEY_BLANK_CHECK: _bindgen_ty_326 = 8;
pub const kSENSE_KEY_VENDOR_SPECIFIC: _bindgen_ty_326 = 9;
pub const kSENSE_KEY_COPY_ABORTED: _bindgen_ty_326 = 10;
pub const kSENSE_KEY_ABORTED_COMMAND: _bindgen_ty_326 = 11;
pub const kSENSE_KEY_VOLUME_OVERFLOW: _bindgen_ty_326 = 13;
pub const kSENSE_KEY_MISCOMPARE: _bindgen_ty_326 = 14;
pub const kSENSE_KEY_Mask: _bindgen_ty_326 = 15;
pub type _bindgen_ty_326 = ::std::os::raw::c_uint;
pub const kINQUIRY_StandardDataHeaderSize: _bindgen_ty_327 = 5;
pub const kINQUIRY_MaximumDataSize: _bindgen_ty_327 = 255;
pub type _bindgen_ty_327 = ::std::os::raw::c_uint;
pub const kINQUIRY_VENDOR_IDENTIFICATION_Length: _bindgen_ty_328 = 8;
pub const kINQUIRY_PRODUCT_IDENTIFICATION_Length: _bindgen_ty_328 = 16;
pub const kINQUIRY_PRODUCT_REVISION_LEVEL_Length: _bindgen_ty_328 = 4;
pub type _bindgen_ty_328 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_StandardData {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub RMB: UInt8,
    pub VERSION: UInt8,
    pub RESPONSE_DATA_FORMAT: UInt8,
    pub ADDITIONAL_LENGTH: UInt8,
    pub SCCSReserved: UInt8,
    pub flags1: UInt8,
    pub flags2: UInt8,
    pub VENDOR_IDENTIFICATION: [::std::os::raw::c_char; 8usize],
    pub PRODUCT_IDENTIFICATION: [::std::os::raw::c_char; 16usize],
    pub PRODUCT_REVISION_LEVEL: [::std::os::raw::c_char; 4usize],
}
pub type SCSICmd_INQUIRY_StandardDataPtr = *mut SCSICmd_INQUIRY_StandardData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_StandardDataAll {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub RMB: UInt8,
    pub VERSION: UInt8,
    pub RESPONSE_DATA_FORMAT: UInt8,
    pub ADDITIONAL_LENGTH: UInt8,
    pub SCCSReserved: UInt8,
    pub flags1: UInt8,
    pub flags2: UInt8,
    pub VENDOR_IDENTIFICATION: [::std::os::raw::c_char; 8usize],
    pub PRODUCT_IDENTIFICATION: [::std::os::raw::c_char; 16usize],
    pub PRODUCT_REVISION_LEVEL: [::std::os::raw::c_char; 4usize],
    pub VendorSpecific1: [UInt8; 20usize],
    pub flags3: UInt8,
    pub Reserved1: UInt8,
    pub VERSION_DESCRIPTOR: [UInt16; 8usize],
    pub Reserved2: [UInt8; 22usize],
    pub VendorSpecific2: [UInt8; 160usize],
}
pub const kINQUIRY_PERIPHERAL_QUALIFIER_Connected: _bindgen_ty_329 = 0;
pub const kINQUIRY_PERIPHERAL_QUALIFIER_SupportedButNotConnected: _bindgen_ty_329 = 32;
pub const kINQUIRY_PERIPHERAL_QUALIFIER_NotSupported: _bindgen_ty_329 = 96;
pub const kINQUIRY_PERIPHERAL_QUALIFIER_Mask: _bindgen_ty_329 = 224;
pub type _bindgen_ty_329 = ::std::os::raw::c_uint;
pub const kINQUIRY_PERIPHERAL_TYPE_DirectAccessSBCDevice: _bindgen_ty_330 = 0;
pub const kINQUIRY_PERIPHERAL_TYPE_SequentialAccessSSCDevice: _bindgen_ty_330 = 1;
pub const kINQUIRY_PERIPHERAL_TYPE_PrinterSSCDevice: _bindgen_ty_330 = 2;
pub const kINQUIRY_PERIPHERAL_TYPE_ProcessorSPCDevice: _bindgen_ty_330 = 3;
pub const kINQUIRY_PERIPHERAL_TYPE_WriteOnceSBCDevice: _bindgen_ty_330 = 4;
pub const kINQUIRY_PERIPHERAL_TYPE_CDROM_MMCDevice: _bindgen_ty_330 = 5;
pub const kINQUIRY_PERIPHERAL_TYPE_ScannerSCSI2Device: _bindgen_ty_330 = 6;
pub const kINQUIRY_PERIPHERAL_TYPE_OpticalMemorySBCDevice: _bindgen_ty_330 = 7;
pub const kINQUIRY_PERIPHERAL_TYPE_MediumChangerSMCDevice: _bindgen_ty_330 = 8;
pub const kINQUIRY_PERIPHERAL_TYPE_CommunicationsSSCDevice: _bindgen_ty_330 = 9;
pub const kINQUIRY_PERIPHERAL_TYPE_StorageArrayControllerSCC2Device: _bindgen_ty_330 = 12;
pub const kINQUIRY_PERIPHERAL_TYPE_EnclosureServicesSESDevice: _bindgen_ty_330 = 13;
pub const kINQUIRY_PERIPHERAL_TYPE_SimplifiedDirectAccessRBCDevice: _bindgen_ty_330 = 14;
pub const kINQUIRY_PERIPHERAL_TYPE_OpticalCardReaderOCRWDevice: _bindgen_ty_330 = 15;
pub const kINQUIRY_PERIPHERAL_TYPE_ObjectBasedStorageDevice: _bindgen_ty_330 = 17;
pub const kINQUIRY_PERIPHERAL_TYPE_AutomationDriveInterface: _bindgen_ty_330 = 18;
pub const kINQUIRY_PERIPHERAL_TYPE_WellKnownLogicalUnit: _bindgen_ty_330 = 30;
pub const kINQUIRY_PERIPHERAL_TYPE_UnknownOrNoDeviceType: _bindgen_ty_330 = 31;
pub const kINQUIRY_PERIPHERAL_TYPE_Mask: _bindgen_ty_330 = 31;
pub type _bindgen_ty_330 = ::std::os::raw::c_uint;
pub const kINQUIRY_PERIPHERAL_RMB_MediumFixed: _bindgen_ty_331 = 0;
pub const kINQUIRY_PERIPHERAL_RMB_MediumRemovable: _bindgen_ty_331 = 128;
pub const kINQUIRY_PERIPHERAL_RMB_BitMask: _bindgen_ty_331 = 128;
pub type _bindgen_ty_331 = ::std::os::raw::c_uint;
pub const kINQUIRY_ISO_IEC_VERSION_Mask: _bindgen_ty_332 = 192;
pub const kINQUIRY_ECMA_VERSION_Mask: _bindgen_ty_332 = 56;
pub const kINQUIRY_ANSI_VERSION_NoClaimedConformance: _bindgen_ty_332 = 0;
pub const kINQUIRY_ANSI_VERSION_SCSI_1_Compliant: _bindgen_ty_332 = 1;
pub const kINQUIRY_ANSI_VERSION_SCSI_2_Compliant: _bindgen_ty_332 = 2;
pub const kINQUIRY_ANSI_VERSION_SCSI_SPC_Compliant: _bindgen_ty_332 = 3;
pub const kINQUIRY_ANSI_VERSION_SCSI_SPC_2_Compliant: _bindgen_ty_332 = 4;
pub const kINQUIRY_ANSI_VERSION_SCSI_SPC_3_Compliant: _bindgen_ty_332 = 5;
pub const kINQUIRY_ANSI_VERSION_Mask: _bindgen_ty_332 = 7;
pub type _bindgen_ty_332 = ::std::os::raw::c_uint;
pub const kINQUIRY_Byte3_HISUP_Bit: _bindgen_ty_333 = 4;
pub const kINQUIRY_Byte3_NORMACA_Bit: _bindgen_ty_333 = 5;
pub const kINQUIRY_Byte3_AERC_Bit: _bindgen_ty_333 = 7;
pub const kINQUIRY_RESPONSE_DATA_FORMAT_Mask: _bindgen_ty_333 = 15;
pub const kINQUIRY_Byte3_HISUP_Mask: _bindgen_ty_333 = 16;
pub const kINQUIRY_Byte3_NORMACA_Mask: _bindgen_ty_333 = 32;
pub const kINQUIRY_Byte3_AERC_Mask: _bindgen_ty_333 = 128;
pub type _bindgen_ty_333 = ::std::os::raw::c_uint;
pub const kINQUIRY_Byte5_SCCS_Bit: _bindgen_ty_334 = 7;
pub const kINQUIRY_Byte5_ACC_Bit: _bindgen_ty_334 = 6;
pub const kINQUIRY_Byte5_ExplicitTPGS_Bit: _bindgen_ty_334 = 5;
pub const kINQUIRY_Byte5_ImplicitTPGS_Bit: _bindgen_ty_334 = 4;
pub const kINQUIRY_Byte5_3PC_Bit: _bindgen_ty_334 = 3;
pub const kINQUIRY_Byte5_PROTECT_Bit: _bindgen_ty_334 = 0;
pub const kINQUIRY_Byte5_SCCS_Mask: _bindgen_ty_334 = 128;
pub const kINQUIRY_Byte5_ACC_Mask: _bindgen_ty_334 = 64;
pub const kINQUIRY_Byte5_ExplicitTPGS_Mask: _bindgen_ty_334 = 32;
pub const kINQUIRY_Byte5_ImplicitTPGS_Mask: _bindgen_ty_334 = 16;
pub const kINQUIRY_Byte5_3PC_Mask: _bindgen_ty_334 = 8;
pub const kINQUIRY_Byte5_PROTECT_Mask: _bindgen_ty_334 = 1;
pub type _bindgen_ty_334 = ::std::os::raw::c_uint;
pub const kINQUIRY_Byte6_Offset: _bindgen_ty_335 = 6;
pub const kINQUIRY_Byte6_ADDR16_Bit: _bindgen_ty_335 = 0;
pub const kINQUIRY_Byte6_MCHNGR_Bit: _bindgen_ty_335 = 3;
pub const kINQUIRY_Byte6_MULTIP_Bit: _bindgen_ty_335 = 4;
pub const kINQUIRY_Byte6_VS_Bit: _bindgen_ty_335 = 5;
pub const kINQUIRY_Byte6_ENCSERV_Bit: _bindgen_ty_335 = 6;
pub const kINQUIRY_Byte6_BQUE_Bit: _bindgen_ty_335 = 7;
pub const kINQUIRY_Byte6_ADDR16_Mask: _bindgen_ty_335 = 1;
pub const kINQUIRY_Byte6_MCHNGR_Mask: _bindgen_ty_335 = 8;
pub const kINQUIRY_Byte6_MULTIP_Mask: _bindgen_ty_335 = 16;
pub const kINQUIRY_Byte6_VS_Mask: _bindgen_ty_335 = 32;
pub const kINQUIRY_Byte6_ENCSERV_Mask: _bindgen_ty_335 = 64;
pub const kINQUIRY_Byte6_BQUE_Mask: _bindgen_ty_335 = 128;
pub type _bindgen_ty_335 = ::std::os::raw::c_uint;
pub const kINQUIRY_Byte7_Offset: _bindgen_ty_336 = 7;
pub const kINQUIRY_Byte7_VS_Bit: _bindgen_ty_336 = 0;
pub const kINQUIRY_Byte7_CMDQUE_Bit: _bindgen_ty_336 = 1;
pub const kINQUIRY_Byte7_TRANDIS_Bit: _bindgen_ty_336 = 2;
pub const kINQUIRY_Byte7_LINKED_Bit: _bindgen_ty_336 = 3;
pub const kINQUIRY_Byte7_SYNC_Bit: _bindgen_ty_336 = 4;
pub const kINQUIRY_Byte7_WBUS16_Bit: _bindgen_ty_336 = 5;
pub const kINQUIRY_Byte7_RELADR_Bit: _bindgen_ty_336 = 7;
pub const kINQUIRY_Byte7_VS_Mask: _bindgen_ty_336 = 1;
pub const kINQUIRY_Byte7_CMDQUE_Mask: _bindgen_ty_336 = 2;
pub const kINQUIRY_Byte7_TRANDIS_Mask: _bindgen_ty_336 = 4;
pub const kINQUIRY_Byte7_LINKED_Mask: _bindgen_ty_336 = 8;
pub const kINQUIRY_Byte7_SYNC_Mask: _bindgen_ty_336 = 16;
pub const kINQUIRY_Byte7_WBUS16_Mask: _bindgen_ty_336 = 32;
pub const kINQUIRY_Byte7_RELADR_Mask: _bindgen_ty_336 = 128;
pub type _bindgen_ty_336 = ::std::os::raw::c_uint;
pub const kINQUIRY_Byte56_Offset: _bindgen_ty_337 = 56;
pub const kINQUIRY_Byte56_IUS_Bit: _bindgen_ty_337 = 0;
pub const kINQUIRY_Byte56_QAS_Bit: _bindgen_ty_337 = 1;
pub const kINQUIRY_Byte56_IUS_Mask: _bindgen_ty_337 = 1;
pub const kINQUIRY_Byte56_QAS_Mask: _bindgen_ty_337 = 2;
pub const kINQUIRY_Byte56_CLOCKING_Mask: _bindgen_ty_337 = 12;
pub const kINQUIRY_Byte56_CLOCKING_ONLY_ST: _bindgen_ty_337 = 0;
pub const kINQUIRY_Byte56_CLOCKING_ONLY_DT: _bindgen_ty_337 = 4;
pub const kINQUIRY_Byte56_CLOCKING_ST_AND_DT: _bindgen_ty_337 = 12;
pub type _bindgen_ty_337 = ::std::os::raw::c_uint;
pub const kINQUIRY_VERSION_DESCRIPTOR_SAT: _bindgen_ty_338 = 7840;
pub type _bindgen_ty_338 = ::std::os::raw::c_uint;
pub const kINQUIRY_VERSION_DESCRIPTOR_NVME: _bindgen_ty_339 = 32896;
pub type _bindgen_ty_339 = ::std::os::raw::c_uint;
pub const kINQUIRY_Page00_PageCode: _bindgen_ty_340 = 0;
pub const kINQUIRY_Page80_PageCode: _bindgen_ty_340 = 128;
pub const kINQUIRY_Page83_PageCode: _bindgen_ty_340 = 131;
pub const kINQUIRY_Page89_PageCode: _bindgen_ty_340 = 137;
pub const kINQUIRY_PageB0_PageCode: _bindgen_ty_340 = 176;
pub const kINQUIRY_PageB1_PageCode: _bindgen_ty_340 = 177;
pub const kINQUIRY_PageB2_PageCode: _bindgen_ty_340 = 178;
pub const kINQUIRY_PageC0_PageCode: _bindgen_ty_340 = 192;
pub const kINQUIRY_PageC1_PageCode: _bindgen_ty_340 = 193;
pub type _bindgen_ty_340 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page00_Header {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub RESERVED: UInt8,
    pub PAGE_LENGTH: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page00_Header_SPC_16 {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page80_Header {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub RESERVED: UInt8,
    pub PAGE_LENGTH: UInt8,
    pub PRODUCT_SERIAL_NUMBER: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page80_Header_SPC_16 {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt16,
    pub PRODUCT_SERIAL_NUMBER: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page83_Header {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub RESERVED: UInt8,
    pub PAGE_LENGTH: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page83_Header_SPC_16 {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page83_Identification_Descriptor {
    pub CODE_SET: UInt8,
    pub IDENTIFIER_TYPE: UInt8,
    pub RESERVED: UInt8,
    pub IDENTIFIER_LENGTH: UInt8,
    pub IDENTIFIER: UInt8,
}
pub const kINQUIRY_Page83_CodeSetReserved: _bindgen_ty_341 = 0;
pub const kINQUIRY_Page83_CodeSetBinaryData: _bindgen_ty_341 = 1;
pub const kINQUIRY_Page83_CodeSetASCIIData: _bindgen_ty_341 = 2;
pub const kINQUIRY_Page83_CodeSetUTF8Data: _bindgen_ty_341 = 3;
pub const kINQUIRY_Page83_CodeSetMask: _bindgen_ty_341 = 15;
pub type _bindgen_ty_341 = ::std::os::raw::c_uint;
pub const kINQUIRY_Page83_AssociationLogicalUnit: _bindgen_ty_342 = 0;
pub const kINQUIRY_Page83_AssociationDevice: _bindgen_ty_342 = 0;
pub const kINQUIRY_Page83_AssociationTargetPort: _bindgen_ty_342 = 16;
pub const kINQUIRY_Page83_AssociationTargetDevice: _bindgen_ty_342 = 32;
pub const kINQUIRY_Page83_AssociationMask: _bindgen_ty_342 = 48;
pub const kINQUIRY_Page83_AssociationShift: _bindgen_ty_342 = 4;
pub type _bindgen_ty_342 = ::std::os::raw::c_uint;
pub const kINQUIRY_Page83_IdentifierTypeVendorSpecific: _bindgen_ty_343 = 0;
pub const kINQUIRY_Page83_IdentifierTypeVendorID: _bindgen_ty_343 = 1;
pub const kINQUIRY_Page83_IdentifierTypeIEEE_EUI64: _bindgen_ty_343 = 2;
pub const kINQUIRY_Page83_IdentifierTypeNAAIdentifier: _bindgen_ty_343 = 3;
pub const kINQUIRY_Page83_IdentifierTypeRelativePortIdentifier: _bindgen_ty_343 = 4;
pub const kINQUIRY_Page83_IdentifierTypeTargetPortGroup: _bindgen_ty_343 = 5;
pub const kINQUIRY_Page83_IdentifierTypeLogicalUnitGroup: _bindgen_ty_343 = 6;
pub const kINQUIRY_Page83_IdentifierTypeMD5LogicalUnitIdentifier: _bindgen_ty_343 = 7;
pub const kINQUIRY_Page83_IdentifierTypeSCSINameString: _bindgen_ty_343 = 8;
pub const kINQUIRY_Page83_IdentifierTypeMask: _bindgen_ty_343 = 15;
pub const kINQUIRY_Page83_ProtocolIdentifierValidBit: _bindgen_ty_343 = 7;
pub const kINQUIRY_Page83_ProtocolIdentifierValidMask: _bindgen_ty_343 = 128;
pub type _bindgen_ty_343 = ::std::os::raw::c_uint;
pub const kSCSIProtocolIdentifier_FibreChannel: _bindgen_ty_344 = 0;
pub const kSCSIProtocolIdentifier_ParallelSCSI: _bindgen_ty_344 = 1;
pub const kSCSIProtocolIdentifier_SSA: _bindgen_ty_344 = 2;
pub const kSCSIProtocolIdentifier_FireWire: _bindgen_ty_344 = 3;
pub const kSCSIProtocolIdentifier_RDMA: _bindgen_ty_344 = 4;
pub const kSCSIProtocolIdentifier_iSCSI: _bindgen_ty_344 = 5;
pub const kSCSIProtocolIdentifier_SAS: _bindgen_ty_344 = 6;
pub const kSCSIProtocolIdentifier_ADT: _bindgen_ty_344 = 7;
pub const kSCSIProtocolIdentifier_ATAPI: _bindgen_ty_344 = 8;
pub const kSCSIProtocolIdentifier_None: _bindgen_ty_344 = 15;
pub type _bindgen_ty_344 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page83_RelativeTargetPort_Identifier {
    pub OBSOLETE: UInt16,
    pub RELATIVE_TARGET_PORT_IDENTIFIER: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page83_TargetPortGroup_Identifier {
    pub RESERVED: UInt16,
    pub TARGET_PORT_GROUP: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page83_LogicalUnitGroup_Identifier {
    pub RESERVED: UInt16,
    pub LOGICAL_UNIT_GROUP: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_Page89_Data {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt16,
    pub Reserved: UInt32,
    pub SAT_VENDOR_IDENTIFICATION: [UInt8; 8usize],
    pub SAT_PRODUCT_IDENTIFICATION: [UInt8; 16usize],
    pub SAT_PRODUCT_REVISION_LEVEL: [UInt8; 4usize],
    pub ATA_DEVICE_SIGNATURE: [UInt8; 20usize],
    pub COMMAND_CODE: UInt8,
    pub Reserved2: [UInt8; 3usize],
    pub IDENTIFY_DATA: [UInt8; 512usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageB0_Data {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt16,
    pub WSNZ: UInt8,
    pub MAXIMUM_COMPARE_AND_WRITE_LENGTH: UInt8,
    pub OPTIMAL_TRANSFER_LENGTH_GRANULARITY: UInt16,
    pub MAXIMUM_TRANSFER_LENGTH: UInt32,
    pub OPTIMAL_TRANSFER_LENGTH: UInt32,
    pub MAXIMUM_PREFETCH_LENGTH: UInt32,
    pub MAXIMUM_UNMAP_LBA_COUNT: UInt32,
    pub MAXIMUM_UNMAP_BLOCK_DESCRIPTOR_COUNT: UInt32,
    pub OPTIMAL_UNMAP_GRANULARITY: UInt32,
    pub UNMAP_GRANULARITY_ALIGNMENT: UInt32,
    pub MAXIMUM_WRITE_SAME_LENGTH: UInt64,
    pub MAXIMUM_ATOMIC_TRANSFER_LENGTH: UInt32,
    pub ATOMIC_ALIGNMENT: UInt32,
    pub ATOMIC_TRANSFER_LENGTH_GRANULARITY: UInt32,
    pub MAXIMUM_ATOMIC_TRANSFER_LENGTH_WITH_ATOMIC_BOUNDARY: UInt32,
    pub MAXIMUM_ATOMIC_BOUNDARY_SIZE: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageB1_Data {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub Reserved: UInt8,
    pub PAGE_LENGTH: UInt8,
    pub MEDIUM_ROTATION_RATE: UInt16,
    pub Reserved2: [UInt8; 58usize],
}
pub const kINQUIRY_PageB1_Page_Length: _bindgen_ty_345 = 60;
pub type _bindgen_ty_345 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageB2_Data {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt16,
    pub THRESHOLD_EXPONENT: UInt8,
    pub LBP_FLAGS: UInt8,
    pub MINIMUM_PERCENTAGE: UInt8,
    pub THRESHOLD_PERCENTAGE: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageB2_Provisioning_Group_Descriptor {
    pub DESIGNATION_DESCRIPTOR: [UInt8; 20usize],
    pub RESERVED: [UInt8; 18usize],
}
pub const kC0DataMaxStringLen: _bindgen_ty_346 = 32;
pub type _bindgen_ty_346 = ::std::os::raw::c_uint;
pub const kINQUIRY_PageC0_Features_HasSEP_LUN: _bindgen_ty_347 = 8;
pub type _bindgen_ty_347 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageCx_Header {
    pub PERIPHERAL_DEVICE_TYPE: UInt8,
    pub PAGE_CODE: UInt8,
    pub RESERVED: UInt8,
    pub PAGE_LENGTH: UInt8,
}
pub type SCSICmd_INQUIRY_PAGECx_Header = SCSICmd_INQUIRY_PageCx_Header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageC0_Data {
    pub fHeader: SCSICmd_INQUIRY_PAGECx_Header,
    pub fTdmPageVersion: UInt8,
    pub fTdmProtocolVersion: UInt8,
    pub fReserved1: UInt8,
    pub fReserved2: UInt8,
    pub fMacModelId: [UInt8; 32usize],
    pub fSerialNumber: [UInt8; 32usize],
    pub fMaxReadSize: UInt32,
    pub fMaxWriteSize: UInt32,
    pub fNativeBlockSize: UInt32,
    pub fPreferredIOSize: UInt32,
    pub fFeatures: UInt64,
    pub fWorkArounds: UInt64,
    pub fEncryptionType: UInt16,
    pub fReserved3: [UInt8; 2usize],
    pub fInstalledRAMSize: UInt64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_INQUIRY_PageC1_Data {
    pub fHeader: SCSICmd_INQUIRY_PAGECx_Header,
    pub fTdmPowerRequirementsPageVersion: UInt8,
    pub fReserved1: UInt8,
    pub fReserved2: UInt16,
    pub fPowerRequired: UInt32,
}
pub type SCSICmdField1Bit = UInt8;
pub type SCSICmdField2Bit = UInt8;
pub type SCSICmdField3Bit = UInt8;
pub type SCSICmdField4Bit = UInt8;
pub type SCSICmdField5Bit = UInt8;
pub type SCSICmdField6Bit = UInt8;
pub type SCSICmdField7Bit = UInt8;
pub type SCSICmdField1Byte = UInt8;
pub type SCSICmdField9Bit = UInt16;
pub type SCSICmdField10Bit = UInt16;
pub type SCSICmdField11Bit = UInt16;
pub type SCSICmdField12Bit = UInt16;
pub type SCSICmdField13Bit = UInt16;
pub type SCSICmdField14Bit = UInt16;
pub type SCSICmdField15Bit = UInt16;
pub type SCSICmdField2Byte = UInt16;
pub type SCSICmdField17Bit = UInt32;
pub type SCSICmdField18Bit = UInt32;
pub type SCSICmdField19Bit = UInt32;
pub type SCSICmdField20Bit = UInt32;
pub type SCSICmdField21Bit = UInt32;
pub type SCSICmdField22Bit = UInt32;
pub type SCSICmdField23Bit = UInt32;
pub type SCSICmdField3Byte = UInt32;
pub type SCSICmdField25Bit = UInt32;
pub type SCSICmdField26Bit = UInt32;
pub type SCSICmdField27Bit = UInt32;
pub type SCSICmdField28Bit = UInt32;
pub type SCSICmdField29Bit = UInt32;
pub type SCSICmdField30Bit = UInt32;
pub type SCSICmdField31Bit = UInt32;
pub type SCSICmdField4Byte = UInt32;
pub type SCSICmdField33Bit = UInt64;
pub type SCSICmdField34Bit = UInt64;
pub type SCSICmdField35Bit = UInt64;
pub type SCSICmdField36Bit = UInt64;
pub type SCSICmdField37Bit = UInt64;
pub type SCSICmdField38Bit = UInt64;
pub type SCSICmdField39Bit = UInt64;
pub type SCSICmdField5Byte = UInt64;
pub type SCSICmdField41Bit = UInt64;
pub type SCSICmdField42Bit = UInt64;
pub type SCSICmdField43Bit = UInt64;
pub type SCSICmdField44Bit = UInt64;
pub type SCSICmdField45Bit = UInt64;
pub type SCSICmdField46Bit = UInt64;
pub type SCSICmdField47Bit = UInt64;
pub type SCSICmdField6Byte = UInt64;
pub type SCSICmdField49Bit = UInt64;
pub type SCSICmdField50Bit = UInt64;
pub type SCSICmdField51Bit = UInt64;
pub type SCSICmdField52Bit = UInt64;
pub type SCSICmdField53Bit = UInt64;
pub type SCSICmdField54Bit = UInt64;
pub type SCSICmdField55Bit = UInt64;
pub type SCSICmdField7Byte = UInt64;
pub type SCSICmdField57Bit = UInt64;
pub type SCSICmdField58Bit = UInt64;
pub type SCSICmdField59Bit = UInt64;
pub type SCSICmdField60Bit = UInt64;
pub type SCSICmdField61Bit = UInt64;
pub type SCSICmdField62Bit = UInt64;
pub type SCSICmdField63Bit = UInt64;
pub type SCSICmdField8Byte = UInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPCModeParameterHeader6 {
    pub MODE_DATA_LENGTH: UInt8,
    pub MEDIUM_TYPE: UInt8,
    pub DEVICE_SPECIFIC_PARAMETER: UInt8,
    pub BLOCK_DESCRIPTOR_LENGTH: UInt8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SPCModeParameterHeader10 {
    pub MODE_DATA_LENGTH: UInt16,
    pub MEDIUM_TYPE: UInt8,
    pub DEVICE_SPECIFIC_PARAMETER: UInt8,
    pub LONGLBA: UInt8,
    pub RESERVED: UInt8,
    pub BLOCK_DESCRIPTOR_LENGTH: UInt16,
}
pub const kModeSenseParameterHeader10_LongLBABit: _bindgen_ty_348 = 0;
pub const kModeSenseParameterHeader10_LongLBAMask: _bindgen_ty_348 = 1;
pub type _bindgen_ty_348 = ::std::os::raw::c_uint;
pub const kModeSenseSBCDeviceSpecific_DPOFUABit: _bindgen_ty_349 = 4;
pub const kModeSenseSBCDeviceSpecific_WriteProtectBit: _bindgen_ty_349 = 7;
pub const kModeSenseSBCDeviceSpecific_DPOFUAMask: _bindgen_ty_349 = 16;
pub const kModeSenseSBCDeviceSpecific_WriteProtectMask: _bindgen_ty_349 = 128;
pub type _bindgen_ty_349 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ModeParameterBlockDescriptor {
    pub DENSITY_CODE: UInt8,
    pub NUMBER_OF_BLOCKS: [UInt8; 3usize],
    pub RESERVED: UInt8,
    pub BLOCK_LENGTH: [UInt8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DASDModeParameterBlockDescriptor {
    pub NUMBER_OF_BLOCKS: UInt32,
    pub DENSITY_CODE: UInt8,
    pub BLOCK_LENGTH: [UInt8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct LongLBAModeParameterBlockDescriptor {
    pub NUMBER_OF_BLOCKS: UInt64,
    pub DENSITY_CODE: UInt8,
    pub RESERVED: [UInt8; 3usize],
    pub BLOCK_LENGTH: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ModePageFormatHeader {
    pub PS_PAGE_CODE: UInt8,
    pub PAGE_LENGTH: UInt8,
}
pub const kModePageFormat_PS_Bit: _bindgen_ty_350 = 7;
pub const kModePageFormat_PAGE_CODE_Mask: _bindgen_ty_350 = 63;
pub const kModePageFormat_PS_Mask: _bindgen_ty_350 = 128;
pub type _bindgen_ty_350 = ::std::os::raw::c_uint;
pub const kSPCModePagePowerConditionCode: _bindgen_ty_351 = 26;
pub const kSPCModePageAllPagesCode: _bindgen_ty_351 = 63;
pub type _bindgen_ty_351 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SPCModePagePowerCondition {
    pub header: ModePageFormatHeader,
    pub RESERVED: UInt8,
    pub IDLE_STANDBY: UInt8,
    pub IDLE_CONDITION_TIMER: UInt32,
    pub STANDBY_CONDITION_TIMER: UInt32,
}
pub const kSBCModePageFormatDeviceCode: _bindgen_ty_352 = 3;
pub const kSBCModePageRigidDiskGeometryCode: _bindgen_ty_352 = 4;
pub const kSBCModePageFlexibleDiskCode: _bindgen_ty_352 = 5;
pub const kSBCModePageCachingCode: _bindgen_ty_352 = 8;
pub type _bindgen_ty_352 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SBCModePageFormatDevice {
    pub header: ModePageFormatHeader,
    pub TRACKS_PER_ZONE: UInt16,
    pub ALTERNATE_SECTORS_PER_ZONE: UInt16,
    pub ALTERNATE_TRACKS_PER_ZONE: UInt16,
    pub ALTERNATE_TRACKS_PER_LOGICAL_UNIT: UInt16,
    pub SECTORS_PER_TRACK: UInt16,
    pub DATA_BYTES_PER_PHYSICAL_SECTOR: UInt16,
    pub INTERLEAVE: UInt16,
    pub TRACK_SKEW_FACTOR: UInt16,
    pub CYLINDER_SKEW_FACTOR: UInt16,
    pub SSEC_HSEC_RMB_SURF: UInt8,
    pub RESERVED: [UInt8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SBCModePageRigidDiskGeometry {
    pub header: ModePageFormatHeader,
    pub NUMBER_OF_CYLINDERS: [UInt8; 3usize],
    pub NUMBER_OF_HEADS: UInt8,
    pub STARTING_CYLINDER_WRITE_PRECOMPENSATION: [UInt8; 3usize],
    pub STARTING_CYLINDER_REDUCED_WRITE_CURRENT: [UInt8; 3usize],
    pub DEVICE_STEP_RATE: UInt16,
    pub LANDING_ZONE_CYLINDER: [UInt8; 3usize],
    pub RPL: UInt8,
    pub ROTATIONAL_OFFSET: UInt8,
    pub RESERVED: UInt8,
    pub MEDIUM_ROTATION_RATE: UInt16,
    pub RESERVED1: [UInt8; 2usize],
}
pub const kSBCModePageRigidDiskGeometry_RPL_Mask: _bindgen_ty_353 = 3;
pub type _bindgen_ty_353 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SBCModePageFlexibleDisk {
    pub header: ModePageFormatHeader,
    pub TRANSFER_RATE: UInt16,
    pub NUMBER_OF_HEADS: UInt8,
    pub SECTORS_PER_TRACK: UInt8,
    pub DATA_BYTES_PER_SECTOR: UInt16,
    pub NUMBER_OF_CYLINDERS: UInt16,
    pub STARTING_CYLINDER_WRITE_PRECOMPENSATION: UInt16,
    pub STARTING_CYLINDER_REDUCED_WRITE_CURRENT: UInt16,
    pub DEVICE_STEP_RATE: UInt16,
    pub DEVICE_STEP_PULSE_WIDTH: UInt8,
    pub HEAD_SETTLE_DELAY: UInt16,
    pub MOTOR_ON_DELAY: UInt8,
    pub MOTOR_OFF_DELAY: UInt8,
    pub TRDY_SSN_MO: UInt8,
    pub SPC: UInt8,
    pub WRITE_COMPENSATION: UInt8,
    pub HEAD_LOAD_DELAY: UInt8,
    pub HEAD_UNLOAD_DELAY: UInt8,
    pub PIN_34_PIN_2: UInt8,
    pub PIN_4_PIN_1: UInt8,
    pub MEDIUM_ROTATION_RATE: UInt16,
    pub RESERVED: [UInt8; 2usize],
}
pub const kSBCModePageFlexibleDisk_MO_Bit: _bindgen_ty_354 = 5;
pub const kSBCModePageFlexibleDisk_SSN_Bit: _bindgen_ty_354 = 6;
pub const kSBCModePageFlexibleDisk_TRDY_Bit: _bindgen_ty_354 = 7;
pub const kSBCModePageFlexibleDisk_MO_Mask: _bindgen_ty_354 = 32;
pub const kSBCModePageFlexibleDisk_SSN_Mask: _bindgen_ty_354 = 64;
pub const kSBCModePageFlexibleDisk_TRDY_Mask: _bindgen_ty_354 = 128;
pub type _bindgen_ty_354 = ::std::os::raw::c_uint;
pub const kSBCModePageFlexibleDisk_SPC_Mask: _bindgen_ty_355 = 15;
pub type _bindgen_ty_355 = ::std::os::raw::c_uint;
pub const kSBCModePageFlexibleDisk_PIN_2_Mask: _bindgen_ty_356 = 15;
pub const kSBCModePageFlexibleDisk_PIN_34_Mask: _bindgen_ty_356 = 240;
pub type _bindgen_ty_356 = ::std::os::raw::c_uint;
pub const kSBCModePageFlexibleDisk_PIN_1_Mask: _bindgen_ty_357 = 15;
pub const kSBCModePageFlexibleDisk_PIN_4_Mask: _bindgen_ty_357 = 240;
pub type _bindgen_ty_357 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SBCModePageCaching {
    pub header: ModePageFormatHeader,
    pub flags: UInt8,
    pub DEMAND_READ_WRITE_RETENTION_PRIORITY: UInt8,
    pub DISABLE_PREFETCH_TRANSFER_LENGTH: UInt16,
    pub MINIMUM_PREFETCH: UInt16,
    pub MAXIMUM_PREFETCH: UInt16,
    pub MAXIMUM_PREFETCH_CEILING: UInt16,
    pub flags2: UInt8,
    pub NUMBER_OF_CACHE_SEGMENTS: UInt8,
    pub CACHE_SEGMENT_SIZE: UInt16,
    pub RESERVED: UInt8,
    pub NON_CACHE_SEGMENT_SIZE: [UInt8; 3usize],
}
pub const kSBCModePageCaching_RCD_Bit: _bindgen_ty_358 = 0;
pub const kSBCModePageCaching_MF_Bit: _bindgen_ty_358 = 1;
pub const kSBCModePageCaching_WCE_Bit: _bindgen_ty_358 = 2;
pub const kSBCModePageCaching_SIZE_Bit: _bindgen_ty_358 = 3;
pub const kSBCModePageCaching_DISC_Bit: _bindgen_ty_358 = 4;
pub const kSBCModePageCaching_CAP_Bit: _bindgen_ty_358 = 5;
pub const kSBCModePageCaching_ABPF_Bit: _bindgen_ty_358 = 6;
pub const kSBCModePageCaching_IC_Bit: _bindgen_ty_358 = 7;
pub const kSBCModePageCaching_RCD_Mask: _bindgen_ty_358 = 1;
pub const kSBCModePageCaching_MF_Mask: _bindgen_ty_358 = 2;
pub const kSBCModePageCaching_WCE_Mask: _bindgen_ty_358 = 4;
pub const kSBCModePageCaching_SIZE_Mask: _bindgen_ty_358 = 8;
pub const kSBCModePageCaching_DISC_Mask: _bindgen_ty_358 = 16;
pub const kSBCModePageCaching_CAP_Mask: _bindgen_ty_358 = 32;
pub const kSBCModePageCaching_ABPF_Mask: _bindgen_ty_358 = 64;
pub const kSBCModePageCaching_IC_Mask: _bindgen_ty_358 = 128;
pub type _bindgen_ty_358 = ::std::os::raw::c_uint;
pub const kSBCModePageCaching_DEMAND_WRITE_Mask: _bindgen_ty_359 = 255;
pub const kSBCModePageCaching_DEMAND_READ_Mask: _bindgen_ty_359 = 65280;
pub type _bindgen_ty_359 = ::std::os::raw::c_uint;
pub const kSBCModePageCaching_VS1_Bit: _bindgen_ty_360 = 3;
pub const kSBCModePageCaching_VS2_Bit: _bindgen_ty_360 = 4;
pub const kSBCModePageCaching_DRA_Bit: _bindgen_ty_360 = 5;
pub const kSBCModePageCaching_LBCSS_Bit: _bindgen_ty_360 = 6;
pub const kSBCModePageCaching_FSW_Bit: _bindgen_ty_360 = 7;
pub const kSBCModePageCaching_VS1_Mask: _bindgen_ty_360 = 8;
pub const kSBCModePageCaching_VS2_Mask: _bindgen_ty_360 = 16;
pub const kSBCModePageCaching_DRA_Mask: _bindgen_ty_360 = 32;
pub const kSBCModePageCaching_LBCSS_Mask: _bindgen_ty_360 = 64;
pub const kSBCModePageCaching_FSW_Mask: _bindgen_ty_360 = 128;
pub type _bindgen_ty_360 = ::std::os::raw::c_uint;
pub const kSCSICmd_ACCESS_CONTROL_IN: _bindgen_ty_361 = 134;
pub const kSCSICmd_ACCESS_CONTROL_OUT: _bindgen_ty_361 = 135;
pub const kSCSICmd_BLANK: _bindgen_ty_361 = 161;
pub const kSCSICmd_CHANGE_DEFINITION: _bindgen_ty_361 = 64;
pub const kSCSICmd_CLOSE_TRACK_SESSION: _bindgen_ty_361 = 91;
pub const kSCSICmd_COMPARE: _bindgen_ty_361 = 57;
pub const kSCSICmd_COPY: _bindgen_ty_361 = 24;
pub const kSCSICmd_COPY_AND_VERIFY: _bindgen_ty_361 = 58;
pub const kSCSICmd_ERASE_10: _bindgen_ty_361 = 44;
pub const kSCSICmd_ERASE_12: _bindgen_ty_361 = 172;
pub const kSCSICmd_EXTENDED_COPY: _bindgen_ty_361 = 131;
pub const kSCSICmd_FORMAT_UNIT: _bindgen_ty_361 = 4;
pub const kSCSICmd_GET_CONFIGURATION: _bindgen_ty_361 = 70;
pub const kSCSICmd_GET_EVENT_STATUS_NOTIFICATION: _bindgen_ty_361 = 74;
pub const kSCSICmd_GET_PERFORMANCE: _bindgen_ty_361 = 172;
pub const kSCSICmd_INQUIRY: _bindgen_ty_361 = 18;
pub const kSCSICmd_LOAD_UNLOAD_MEDIUM: _bindgen_ty_361 = 166;
pub const kSCSICmd_LOCK_UNLOCK_CACHE: _bindgen_ty_361 = 54;
pub const kSCSICmd_LOCK_UNLOCK_CACHE_16: _bindgen_ty_361 = 146;
pub const kSCSICmd_LOG_SELECT: _bindgen_ty_361 = 76;
pub const kSCSICmd_LOG_SENSE: _bindgen_ty_361 = 77;
pub const kSCSICmd_MAINTENANCE_IN: _bindgen_ty_361 = 163;
pub const kSCSICmd_MAINTENANCE_OUT: _bindgen_ty_361 = 164;
pub const kSCSICmd_MECHANISM_STATUS: _bindgen_ty_361 = 189;
pub const kSCSICmd_MEDIUM_SCAN: _bindgen_ty_361 = 56;
pub const kSCSICmd_MODE_SELECT_6: _bindgen_ty_361 = 21;
pub const kSCSICmd_MODE_SELECT_10: _bindgen_ty_361 = 85;
pub const kSCSICmd_MODE_SENSE_6: _bindgen_ty_361 = 26;
pub const kSCSICmd_MODE_SENSE_10: _bindgen_ty_361 = 90;
pub const kSCSICmd_MOVE_MEDIUM_ATTACHED: _bindgen_ty_361 = 167;
pub const kSCSICmd_PAUSE_RESUME: _bindgen_ty_361 = 75;
pub const kSCSICmd_PERSISTENT_RESERVE_IN: _bindgen_ty_361 = 94;
pub const kSCSICmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_361 = 95;
pub const kSCSICmd_PLAY_AUDIO_10: _bindgen_ty_361 = 69;
pub const kSCSICmd_PLAY_AUDIO_12: _bindgen_ty_361 = 165;
pub const kSCSICmd_PLAY_AUDIO_MSF: _bindgen_ty_361 = 71;
pub const kSCSICmd_PLAY_AUDIO_TRACK_INDEX: _bindgen_ty_361 = 72;
pub const kSCSICmd_PLAY_CD: _bindgen_ty_361 = 188;
pub const kSCSICmd_PLAY_RELATIVE_10: _bindgen_ty_361 = 73;
pub const kSCSICmd_PLAY_RELATIVE_12: _bindgen_ty_361 = 169;
pub const kSCSICmd_PREFETCH: _bindgen_ty_361 = 52;
pub const kSCSICmd_PREFETCH_16: _bindgen_ty_361 = 144;
pub const kSCSICmd_PREVENT_ALLOW_MEDIUM_REMOVAL: _bindgen_ty_361 = 30;
pub const kSCSICmd_READ_6: _bindgen_ty_361 = 8;
pub const kSCSICmd_READ_10: _bindgen_ty_361 = 40;
pub const kSCSICmd_READ_12: _bindgen_ty_361 = 168;
pub const kSCSICmd_READ_16: _bindgen_ty_361 = 136;
pub const kSCSICmd_READ_ATTRIBUTE: _bindgen_ty_361 = 140;
pub const kSCSICmd_READ_BUFFER: _bindgen_ty_361 = 60;
pub const kSCSICmd_READ_BUFFER_CAPACITY: _bindgen_ty_361 = 92;
pub const kSCSICmd_READ_CAPACITY: _bindgen_ty_361 = 37;
pub const kSCSICmd_READ_CD: _bindgen_ty_361 = 190;
pub const kSCSICmd_READ_CD_MSF: _bindgen_ty_361 = 185;
pub const kSCSICmd_READ_DEFECT_DATA_10: _bindgen_ty_361 = 55;
pub const kSCSICmd_READ_DEFECT_DATA_12: _bindgen_ty_361 = 183;
pub const kSCSICmd_READ_DISC_INFORMATION: _bindgen_ty_361 = 81;
pub const kSCSICmd_READ_DVD_STRUCTURE: _bindgen_ty_361 = 173;
pub const kSCSICmd_READ_DISC_STRUCTURE: _bindgen_ty_361 = 173;
pub const kSCSICmd_READ_ELEMENT_STATUS_ATTACHED: _bindgen_ty_361 = 180;
pub const kSCSICmd_READ_FORMAT_CAPACITIES: _bindgen_ty_361 = 35;
pub const kSCSICmd_READ_GENERATION: _bindgen_ty_361 = 41;
pub const kSCSICmd_READ_HEADER: _bindgen_ty_361 = 68;
pub const kSCSICmd_READ_LONG: _bindgen_ty_361 = 62;
pub const kSCSICmd_READ_MASTER_CUE: _bindgen_ty_361 = 89;
pub const kSCSICmd_READ_SUB_CHANNEL: _bindgen_ty_361 = 66;
pub const kSCSICmd_READ_TOC_PMA_ATIP: _bindgen_ty_361 = 67;
pub const kSCSICmd_READ_TRACK_INFORMATION: _bindgen_ty_361 = 82;
pub const kSCSICmd_READ_UPDATED_BLOCK_10: _bindgen_ty_361 = 45;
pub const kSCSICmd_REASSIGN_BLOCKS: _bindgen_ty_361 = 7;
pub const kSCSICmd_REBUILD: _bindgen_ty_361 = 129;
pub const kSCSICmd_RECEIVE: _bindgen_ty_361 = 8;
pub const kSCSICmd_RECEIVE_COPY_RESULTS: _bindgen_ty_361 = 132;
pub const kSCSICmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_361 = 28;
pub const kSCSICmd_REDUNDANCY_GROUP_IN: _bindgen_ty_361 = 186;
pub const kSCSICmd_REDUNDANCY_GROUP_OUT: _bindgen_ty_361 = 187;
pub const kSCSICmd_REGENERATE: _bindgen_ty_361 = 130;
pub const kSCSICmd_RELEASE_6: _bindgen_ty_361 = 23;
pub const kSCSICmd_RELEASE_10: _bindgen_ty_361 = 87;
pub const kSCSICmd_REPAIR_TRACK: _bindgen_ty_361 = 88;
pub const kSCSICmd_REPORT_DEVICE_IDENTIFIER: _bindgen_ty_361 = 163;
pub const kSCSICmd_REPORT_KEY: _bindgen_ty_361 = 164;
pub const kSCSICmd_REPORT_LUNS: _bindgen_ty_361 = 160;
pub const kSCSICmd_REQUEST_SENSE: _bindgen_ty_361 = 3;
pub const kSCSICmd_RESERVE_6: _bindgen_ty_361 = 22;
pub const kSCSICmd_RESERVE_10: _bindgen_ty_361 = 86;
pub const kSCSICmd_RESERVE_TRACK: _bindgen_ty_361 = 83;
pub const kSCSICmd_REZERO_UNIT: _bindgen_ty_361 = 1;
pub const kSCSICmd_SCAN_MMC: _bindgen_ty_361 = 186;
pub const kSCSICmd_SEARCH_DATA_EQUAL_10: _bindgen_ty_361 = 49;
pub const kSCSICmd_SEARCH_DATA_EQUAL_12: _bindgen_ty_361 = 177;
pub const kSCSICmd_SEARCH_DATA_HIGH_10: _bindgen_ty_361 = 48;
pub const kSCSICmd_SEARCH_DATA_HIGH_12: _bindgen_ty_361 = 176;
pub const kSCSICmd_SEARCH_DATA_LOW_10: _bindgen_ty_361 = 50;
pub const kSCSICmd_SEARCH_DATA_LOW_12: _bindgen_ty_361 = 178;
pub const kSCSICmd_SEEK_6: _bindgen_ty_361 = 11;
pub const kSCSICmd_SEEK_10: _bindgen_ty_361 = 43;
pub const kSCSICmd_SEND: _bindgen_ty_361 = 10;
pub const kSCSICmd_SEND_CUE_SHEET: _bindgen_ty_361 = 93;
pub const kSCSICmd_SEND_DIAGNOSTICS: _bindgen_ty_361 = 29;
pub const kSCSICmd_SEND_DVD_STRUCTURE: _bindgen_ty_361 = 191;
pub const kSCSICmd_SEND_EVENT: _bindgen_ty_361 = 162;
pub const kSCSICmd_SEND_KEY: _bindgen_ty_361 = 163;
pub const kSCSICmd_SEND_OPC_INFORMATION: _bindgen_ty_361 = 84;
pub const kSCSICmd_SERVICE_ACTION_IN: _bindgen_ty_361 = 158;
pub const kSCSICmd_SERVICE_ACTION_OUT: _bindgen_ty_361 = 159;
pub const kSCSICmd_SET_CD_SPEED: _bindgen_ty_361 = 187;
pub const kSCSICmd_SET_DEVICE_IDENTIFIER: _bindgen_ty_361 = 164;
pub const kSCSICmd_SET_LIMITS_10: _bindgen_ty_361 = 51;
pub const kSCSICmd_SET_LIMITS_12: _bindgen_ty_361 = 179;
pub const kSCSICmd_SET_READ_AHEAD: _bindgen_ty_361 = 167;
pub const kSCSICmd_SET_STREAMING: _bindgen_ty_361 = 182;
pub const kSCSICmd_SPARE_IN: _bindgen_ty_361 = 188;
pub const kSCSICmd_SPARE_OUT: _bindgen_ty_361 = 189;
pub const kSCSICmd_START_STOP_UNIT: _bindgen_ty_361 = 27;
pub const kSCSICmd_STOP_PLAY_SCAN: _bindgen_ty_361 = 78;
pub const kSCSICmd_SYNCHRONIZE_CACHE: _bindgen_ty_361 = 53;
pub const kSCSICmd_SYNCHRONIZE_CACHE_16: _bindgen_ty_361 = 145;
pub const kSCSICmd_TEST_UNIT_READY: _bindgen_ty_361 = 0;
pub const kSCSICmd_UPDATE_BLOCK: _bindgen_ty_361 = 61;
pub const kSCSICmd_UNMAP: _bindgen_ty_361 = 66;
pub const kSCSICmd_VERIFY_10: _bindgen_ty_361 = 47;
pub const kSCSICmd_VERIFY_12: _bindgen_ty_361 = 175;
pub const kSCSICmd_VERIFY_16: _bindgen_ty_361 = 143;
pub const kSCSICmd_VOLUME_SET_IN: _bindgen_ty_361 = 190;
pub const kSCSICmd_VOLUME_SET_OUT: _bindgen_ty_361 = 191;
pub const kSCSICmd_WRITE_6: _bindgen_ty_361 = 10;
pub const kSCSICmd_WRITE_10: _bindgen_ty_361 = 42;
pub const kSCSICmd_WRITE_12: _bindgen_ty_361 = 170;
pub const kSCSICmd_WRITE_16: _bindgen_ty_361 = 138;
pub const kSCSICmd_WRITE_AND_VERIFY_10: _bindgen_ty_361 = 46;
pub const kSCSICmd_WRITE_AND_VERIFY_12: _bindgen_ty_361 = 174;
pub const kSCSICmd_WRITE_AND_VERIFY_16: _bindgen_ty_361 = 142;
pub const kSCSICmd_WRITE_ATTRIBUTE: _bindgen_ty_361 = 141;
pub const kSCSICmd_WRITE_BUFFER: _bindgen_ty_361 = 59;
pub const kSCSICmd_WRITE_LONG: _bindgen_ty_361 = 63;
pub const kSCSICmd_WRITE_SAME: _bindgen_ty_361 = 65;
pub const kSCSICmd_WRITE_SAME_16: _bindgen_ty_361 = 147;
pub const kSCSICmd_XDREAD: _bindgen_ty_361 = 82;
pub const kSCSICmd_XDWRITE: _bindgen_ty_361 = 80;
pub const kSCSICmd_XDWRITE_EXTENDED: _bindgen_ty_361 = 128;
pub const kSCSICmd_XDWRITEREAD_10: _bindgen_ty_361 = 83;
pub const kSCSICmd_XPWRITE: _bindgen_ty_361 = 81;
pub const kSCSICmdVariableLengthCDB: _bindgen_ty_361 = 127;
pub const kSCSICmd_VendorSpecific_Start: _bindgen_ty_361 = 192;
pub const kSCSICmd_VendorSpecific_End: _bindgen_ty_361 = 255;
pub type _bindgen_ty_361 = ::std::os::raw::c_uint;
pub const kSCSIServiceAction_READ_32: _bindgen_ty_362 = 9;
pub const kSCSIServiceAction_VERIFY_32: _bindgen_ty_362 = 10;
pub const kSCSIServiceAction_WRITE_32: _bindgen_ty_362 = 11;
pub const kSCSIServiceAction_WRITE_AND_VERIFY_32: _bindgen_ty_362 = 12;
pub const kSCSIServiceAction_WRITE_SAME_32: _bindgen_ty_362 = 13;
pub const kSCSIServiceAction_XDREAD_32: _bindgen_ty_362 = 3;
pub const kSCSIServiceAction_XDWRITE_32: _bindgen_ty_362 = 4;
pub const kSCSIServiceAction_XDWRITEREAD_32: _bindgen_ty_362 = 7;
pub const kSCSIServiceAction_XPWRITE_32: _bindgen_ty_362 = 6;
pub type _bindgen_ty_362 = ::std::os::raw::c_uint;
pub const kSCSIServiceAction_REPORT_ALIASES: _bindgen_ty_363 = 11;
pub const kSCSIServiceAction_REPORT_DEVICE_IDENTIFIER: _bindgen_ty_363 = 5;
pub const kSCSIServiceAction_REPORT_PRIORITY: _bindgen_ty_363 = 14;
pub const kSCSIServiceAction_REPORT_PROVISIONING_INITIALIZATION_PATTERN: _bindgen_ty_363 = 29;
pub const kSCSIServiceAction_REPORT_SUPPORTED_OPERATION_CODES: _bindgen_ty_363 = 12;
pub const kSCSIServiceAction_REPORT_SUPPORTED_TASK_MANAGEMENT_FUNCTIONS: _bindgen_ty_363 = 13;
pub const kSCSIServiceAction_REPORT_TARGET_PORT_GROUPS: _bindgen_ty_363 = 10;
pub type _bindgen_ty_363 = ::std::os::raw::c_uint;
pub const kSCSIServiceAction_CHANGE_ALIASES: _bindgen_ty_364 = 11;
pub const kSCSIServiceAction_SET_DEVICE_IDENTIFIER: _bindgen_ty_364 = 6;
pub const kSCSIServiceAction_SET_PRIORITY: _bindgen_ty_364 = 14;
pub const kSCSIServiceAction_SET_TARGET_PORT_GROUPS: _bindgen_ty_364 = 10;
pub type _bindgen_ty_364 = ::std::os::raw::c_uint;
pub const kSCSIServiceAction_GET_LBA_STATUS: _bindgen_ty_365 = 18;
pub const kSCSIServiceAction_READ_CAPACITY_16: _bindgen_ty_365 = 16;
pub const kSCSIServiceAction_READ_LONG_16: _bindgen_ty_365 = 17;
pub type _bindgen_ty_365 = ::std::os::raw::c_uint;
pub const kSCSIServiceAction_WRITE_LONG_16: _bindgen_ty_366 = 17;
pub type _bindgen_ty_366 = ::std::os::raw::c_uint;
pub const kSPCCmd_CHANGE_DEFINITION: _bindgen_ty_367 = 64;
pub const kSPCCmd_COMPARE: _bindgen_ty_367 = 57;
pub const kSPCCmd_COPY: _bindgen_ty_367 = 24;
pub const kSPCCmd_COPY_AND_VERIFY: _bindgen_ty_367 = 58;
pub const kSPCCmd_EXTENDED_COPY: _bindgen_ty_367 = 131;
pub const kSPCCmd_INQUIRY: _bindgen_ty_367 = 18;
pub const kSPCCmd_LOG_SELECT: _bindgen_ty_367 = 76;
pub const kSPCCmd_LOG_SENSE: _bindgen_ty_367 = 77;
pub const kSPCCmd_MODE_SELECT_6: _bindgen_ty_367 = 21;
pub const kSPCCmd_MODE_SELECT_10: _bindgen_ty_367 = 85;
pub const kSPCCmd_MODE_SENSE_6: _bindgen_ty_367 = 26;
pub const kSPCCmd_MODE_SENSE_10: _bindgen_ty_367 = 90;
pub const kSPCCmd_MOVE_MEDIUM_ATTACHED: _bindgen_ty_367 = 167;
pub const kSPCCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_367 = 94;
pub const kSPCCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_367 = 95;
pub const kSPCCmd_PREVENT_ALLOW_MEDIUM_REMOVAL: _bindgen_ty_367 = 30;
pub const kSPCCmd_READ_BUFFER: _bindgen_ty_367 = 60;
pub const kSPCCmd_READ_ELEMENT_STATUS_ATTACHED: _bindgen_ty_367 = 180;
pub const kSPCCmd_RECEIVE_COPY_RESULTS: _bindgen_ty_367 = 132;
pub const kSPCCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_367 = 28;
pub const kSPCCmd_RELEASE_10: _bindgen_ty_367 = 87;
pub const kSPCCmd_RELEASE_6: _bindgen_ty_367 = 23;
pub const kSPCCmd_REPORT_DEVICE_IDENTIFIER: _bindgen_ty_367 = 163;
pub const kSPCCmd_REPORT_LUNS: _bindgen_ty_367 = 160;
pub const kSPCCmd_REQUEST_SENSE: _bindgen_ty_367 = 3;
pub const kSPCCmd_RESERVE_10: _bindgen_ty_367 = 86;
pub const kSPCCmd_RESERVE_6: _bindgen_ty_367 = 22;
pub const kSPCCmd_SEND_DIAGNOSTICS: _bindgen_ty_367 = 29;
pub const kSPCCmd_SET_DEVICE_IDENTIFIER: _bindgen_ty_367 = 164;
pub const kSPCCmd_TEST_UNIT_READY: _bindgen_ty_367 = 0;
pub const kSPCCmd_WRITE_BUFFER: _bindgen_ty_367 = 59;
pub type _bindgen_ty_367 = ::std::os::raw::c_uint;
pub const kSBCCmd_CHANGE_DEFINITION: _bindgen_ty_368 = 64;
pub const kSBCCmd_COMPARE: _bindgen_ty_368 = 57;
pub const kSBCCmd_COPY: _bindgen_ty_368 = 24;
pub const kSBCCmd_COPY_AND_VERIFY: _bindgen_ty_368 = 58;
pub const kSBCCmd_FORMAT_UNIT: _bindgen_ty_368 = 4;
pub const kSBCCmd_INQUIRY: _bindgen_ty_368 = 18;
pub const kSBCCmd_LOCK_UNLOCK_CACHE: _bindgen_ty_368 = 54;
pub const kSBCCmd_LOG_SELECT: _bindgen_ty_368 = 76;
pub const kSBCCmd_LOG_SENSE: _bindgen_ty_368 = 77;
pub const kSBCCmd_MODE_SELECT_6: _bindgen_ty_368 = 21;
pub const kSBCCmd_MODE_SELECT_10: _bindgen_ty_368 = 85;
pub const kSBCCmd_MODE_SENSE_6: _bindgen_ty_368 = 26;
pub const kSBCCmd_MODE_SENSE_10: _bindgen_ty_368 = 90;
pub const kSBCCmd_MOVE_MEDIUM_ATTACHED: _bindgen_ty_368 = 167;
pub const kSBCCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_368 = 94;
pub const kSBCCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_368 = 95;
pub const kSBCCmd_PREFETCH: _bindgen_ty_368 = 52;
pub const kSBCCmd_PREVENT_ALLOW_MEDIUM_REMOVAL: _bindgen_ty_368 = 30;
pub const kSBCCmd_READ_6: _bindgen_ty_368 = 8;
pub const kSBCCmd_READ_10: _bindgen_ty_368 = 40;
pub const kSBCCmd_READ_12: _bindgen_ty_368 = 168;
pub const kSBCCmd_READ_BUFFER: _bindgen_ty_368 = 60;
pub const kSBCCmd_READ_CAPACITY: _bindgen_ty_368 = 37;
pub const kSBCCmd_READ_DEFECT_DATA_10: _bindgen_ty_368 = 55;
pub const kSBCCmd_READ_DEFECT_DATA_12: _bindgen_ty_368 = 183;
pub const kSBCCmd_READ_ELEMENT_STATUS_ATTACHED: _bindgen_ty_368 = 180;
pub const kSBCCmd_READ_GENERATION: _bindgen_ty_368 = 41;
pub const kSBCCmd_READ_LONG: _bindgen_ty_368 = 62;
pub const kSBCCmd_READ_UPDATED_BLOCK_10: _bindgen_ty_368 = 45;
pub const kSBCCmd_REASSIGN_BLOCKS: _bindgen_ty_368 = 7;
pub const kSBCCmd_REBUILD: _bindgen_ty_368 = 129;
pub const kSBCCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_368 = 28;
pub const kSBCCmd_REGENERATE: _bindgen_ty_368 = 130;
pub const kSBCCmd_RELEASE_6: _bindgen_ty_368 = 23;
pub const kSBCCmd_RELEASE_10: _bindgen_ty_368 = 87;
pub const kSBCCmd_REPORT_LUNS: _bindgen_ty_368 = 160;
pub const kSBCCmd_REQUEST_SENSE: _bindgen_ty_368 = 3;
pub const kSBCCmd_RESERVE_6: _bindgen_ty_368 = 22;
pub const kSBCCmd_RESERVE_10: _bindgen_ty_368 = 86;
pub const kSBCCmd_REZERO_UNIT: _bindgen_ty_368 = 1;
pub const kSBCCmd_SEARCH_DATA_EQUAL_10: _bindgen_ty_368 = 49;
pub const kSBCCmd_SEARCH_DATA_HIGH_10: _bindgen_ty_368 = 48;
pub const kSBCCmd_SEARCH_DATA_LOW_10: _bindgen_ty_368 = 50;
pub const kSBCCmd_SEEK_6: _bindgen_ty_368 = 11;
pub const kSBCCmd_SEEK_10: _bindgen_ty_368 = 43;
pub const kSBCCmd_SEND_DIAGNOSTICS: _bindgen_ty_368 = 29;
pub const kSBCCmd_SET_LIMITS_10: _bindgen_ty_368 = 51;
pub const kSBCCmd_SET_LIMITS_12: _bindgen_ty_368 = 179;
pub const kSBCCmd_START_STOP_UNIT: _bindgen_ty_368 = 27;
pub const kSBCCmd_SYNCHRONIZE_CACHE: _bindgen_ty_368 = 53;
pub const kSBCCmd_TEST_UNIT_READY: _bindgen_ty_368 = 0;
pub const kSBCCmd_UPDATE_BLOCK: _bindgen_ty_368 = 61;
pub const kSBCCmd_VERIFY_10: _bindgen_ty_368 = 47;
pub const kSBCCmd_WRITE_6: _bindgen_ty_368 = 10;
pub const kSBCCmd_WRITE_10: _bindgen_ty_368 = 42;
pub const kSBCCmd_WRITE_12: _bindgen_ty_368 = 170;
pub const kSBCCmd_WRITE_AND_VERIFY_10: _bindgen_ty_368 = 46;
pub const kSBCCmd_WRITE_AND_VERIFY_12: _bindgen_ty_368 = 174;
pub const kSBCCmd_WRITE_BUFFER: _bindgen_ty_368 = 59;
pub const kSBCCmd_WRITE_LONG: _bindgen_ty_368 = 63;
pub const kSBCCmd_WRITE_SAME: _bindgen_ty_368 = 65;
pub const kSBCCmd_XDREAD: _bindgen_ty_368 = 82;
pub const kSBCCmd_XDWRITE: _bindgen_ty_368 = 80;
pub const kSBCCmd_XDWRITE_EXTENDED: _bindgen_ty_368 = 128;
pub const kSBCCmd_XPWRITE: _bindgen_ty_368 = 81;
pub type _bindgen_ty_368 = ::std::os::raw::c_uint;
pub const kSSCSeqCmd_CHANGE_DEFINITION: _bindgen_ty_369 = 64;
pub const kSSCSeqCmd_COMPARE: _bindgen_ty_369 = 57;
pub const kSSCSeqCmd_COPY: _bindgen_ty_369 = 24;
pub const kSSCSeqCmd_COPY_AND_VERIFY: _bindgen_ty_369 = 58;
pub const kSSCSeqCmd_ERASE: _bindgen_ty_369 = 25;
pub const kSSCSeqCmd_FORMAT_MEDIUM: _bindgen_ty_369 = 4;
pub const kSSCSeqCmd_INQUIRY: _bindgen_ty_369 = 18;
pub const kSSCSeqCmd_LOAD_UNLOAD: _bindgen_ty_369 = 27;
pub const kSSCSeqCmd_LOCATE: _bindgen_ty_369 = 43;
pub const kSSCSeqCmd_LOG_SELECT: _bindgen_ty_369 = 76;
pub const kSSCSeqCmd_LOG_SENSE: _bindgen_ty_369 = 77;
pub const kSSCSeqCmd_MODE_SELECT_6: _bindgen_ty_369 = 21;
pub const kSSCSeqCmd_MODE_SELECT_10: _bindgen_ty_369 = 85;
pub const kSSCSeqCmd_MODE_SENSE_6: _bindgen_ty_369 = 26;
pub const kSSCSeqCmd_MODE_SENSE_10: _bindgen_ty_369 = 90;
pub const kSSCSeqCmd_MOVE_MEDIUM: _bindgen_ty_369 = 165;
pub const kSSCSeqCmd_MOVE_MEDIUM_ATTACHED: _bindgen_ty_369 = 167;
pub const kSSCSeqCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_369 = 94;
pub const kSSCSeqCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_369 = 95;
pub const kSSCSeqCmd_PREVENT_ALLOW_MEDIUM_REMOVAL: _bindgen_ty_369 = 30;
pub const kSSCSeqCmd_READ_6: _bindgen_ty_369 = 8;
pub const kSSCSeqCmd_READ_BLOCK_LIMITS: _bindgen_ty_369 = 5;
pub const kSSCSeqCmd_READ_BUFFER: _bindgen_ty_369 = 60;
pub const kSSCSeqCmd_READ_ELEMENT_STATUS: _bindgen_ty_369 = 184;
pub const kSSCSeqCmd_READ_ELEMENT_STATUS_ATTACHED: _bindgen_ty_369 = 180;
pub const kSSCSeqCmd_READ_POSITION: _bindgen_ty_369 = 52;
pub const kSSCSeqCmd_READ_REVERSE: _bindgen_ty_369 = 15;
pub const kSSCSeqCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_369 = 28;
pub const kSSCSeqCmd_RECOVER_BUFFERED_DATA: _bindgen_ty_369 = 20;
pub const kSSCSeqCmd_RELEASE_6: _bindgen_ty_369 = 23;
pub const kSSCSeqCmd_RELEASE_10: _bindgen_ty_369 = 87;
pub const kSSCSeqCmd_REPORT_DENSITY_SUPPORT: _bindgen_ty_369 = 68;
pub const kSSCSeqCmd_REPORT_LUNS: _bindgen_ty_369 = 160;
pub const kSSCSeqCmd_REQUEST_SENSE: _bindgen_ty_369 = 3;
pub const kSSCSeqCmd_RESERVE_6: _bindgen_ty_369 = 22;
pub const kSSCSeqCmd_RESERVE_10: _bindgen_ty_369 = 86;
pub const kSSCSeqCmd_REWIND: _bindgen_ty_369 = 1;
pub const kSSCSeqCmd_SEND_DIAGNOSTICS: _bindgen_ty_369 = 29;
pub const kSSCSeqCmd_SPACE: _bindgen_ty_369 = 17;
pub const kSSCSeqCmd_TEST_UNIT_READY: _bindgen_ty_369 = 0;
pub const kSSCSeqCmd_VERIFY_6: _bindgen_ty_369 = 19;
pub const kSSCSeqCmd_WRITE_6: _bindgen_ty_369 = 10;
pub const kSSCSeqCmd_WRITE_BUFFER: _bindgen_ty_369 = 59;
pub const kSSCSeqCmd_WRITE_FILEMARKS: _bindgen_ty_369 = 16;
pub type _bindgen_ty_369 = ::std::os::raw::c_uint;
pub const kSSCPrinterCmd_CHANGE_DEFINITION: _bindgen_ty_370 = 64;
pub const kSSCPrinterCmd_COMPARE: _bindgen_ty_370 = 57;
pub const kSSCPrinterCmd_COPY: _bindgen_ty_370 = 24;
pub const kSSCPrinterCmd_COPY_AND_VERIFY: _bindgen_ty_370 = 58;
pub const kSSCPrinterCmd_FORMAT: _bindgen_ty_370 = 4;
pub const kSSCPrinterCmd_INQUIRY: _bindgen_ty_370 = 18;
pub const kSSCPrinterCmd_LOG_SELECT: _bindgen_ty_370 = 76;
pub const kSSCPrinterCmd_LOG_SENSE: _bindgen_ty_370 = 77;
pub const kSSCPrinterCmd_MODE_SELECT_6: _bindgen_ty_370 = 21;
pub const kSSCPrinterCmd_MODE_SELECT_10: _bindgen_ty_370 = 85;
pub const kSSCPrinterCmd_MODE_SENSE_6: _bindgen_ty_370 = 26;
pub const kSSCPrinterCmd_MODE_SENSE_10: _bindgen_ty_370 = 90;
pub const kSSCPrinterCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_370 = 94;
pub const kSSCPrinterCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_370 = 95;
pub const kSSCPrinterCmd_PRINT: _bindgen_ty_370 = 10;
pub const kSSCPrinterCmd_READ_BUFFER: _bindgen_ty_370 = 60;
pub const kSSCPrinterCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_370 = 28;
pub const kSSCPrinterCmd_RECOVER_BUFFERED_DATA: _bindgen_ty_370 = 20;
pub const kSSCPrinterCmd_RELEASE_6: _bindgen_ty_370 = 23;
pub const kSSCPrinterCmd_RELEASE_10: _bindgen_ty_370 = 87;
pub const kSSCPrinterCmd_REPORT_LUNS: _bindgen_ty_370 = 160;
pub const kSSCPrinterCmd_REQUEST_SENSE: _bindgen_ty_370 = 3;
pub const kSSCPrinterCmd_RESERVE_6: _bindgen_ty_370 = 22;
pub const kSSCPrinterCmd_RESERVE_10: _bindgen_ty_370 = 86;
pub const kSSCPrinterCmd_SEND_DIAGNOSTICS: _bindgen_ty_370 = 29;
pub const kSSCPrinterCmd_SLEW_AND_PRINT: _bindgen_ty_370 = 11;
pub const kSSCPrinterCmd_STOP_PRINT: _bindgen_ty_370 = 27;
pub const kSSCPrinterCmd_SYNCHRONIZE_BUFFER: _bindgen_ty_370 = 16;
pub const kSSCPrinterCmd_TEST_UNIT_READY: _bindgen_ty_370 = 0;
pub const kSSCPrinterCmd_WRITE_BUFFER: _bindgen_ty_370 = 59;
pub type _bindgen_ty_370 = ::std::os::raw::c_uint;
pub const kSPCProcCmd_CHANGE_DEFINITION: _bindgen_ty_371 = 64;
pub const kSPCProcCmd_COMPARE: _bindgen_ty_371 = 57;
pub const kSPCProcCmd_COPY: _bindgen_ty_371 = 24;
pub const kSPCProcCmd_COPY_AND_VERIFY: _bindgen_ty_371 = 58;
pub const kSPCProcCmd_EXTENDED_COPY: _bindgen_ty_371 = 131;
pub const kSPCProcCmd_INQUIRY: _bindgen_ty_371 = 18;
pub const kSPCProcCmd_LOG_SELECT: _bindgen_ty_371 = 76;
pub const kSPCProcCmd_LOG_SENSE: _bindgen_ty_371 = 77;
pub const kSPCProcCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_371 = 94;
pub const kSPCProcCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_371 = 95;
pub const kSPCProcCmd_READ_BUFFER: _bindgen_ty_371 = 60;
pub const kSPCProcCmd_RECEIVE: _bindgen_ty_371 = 8;
pub const kSPCProcCmd_RECEIVE_COPY_RESULTS: _bindgen_ty_371 = 132;
pub const kSPCProcCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_371 = 28;
pub const kSPCProcCmd_RELEASE_10: _bindgen_ty_371 = 87;
pub const kSPCProcCmd_RELEASE_6: _bindgen_ty_371 = 23;
pub const kSPCProcCmd_REPORT_LUNS: _bindgen_ty_371 = 160;
pub const kSPCProcCmd_REQUEST_SENSE: _bindgen_ty_371 = 3;
pub const kSPCProcCmd_RESERVE_10: _bindgen_ty_371 = 86;
pub const kSPCProcCmd_RESERVE_6: _bindgen_ty_371 = 22;
pub const kSPCProcCmd_SEND: _bindgen_ty_371 = 10;
pub const kSPCProcCmd_SEND_DIAGNOSTICS: _bindgen_ty_371 = 29;
pub const kSPCProcCmd_TEST_UNIT_READY: _bindgen_ty_371 = 0;
pub const kSPCProcCmd_WRITE_BUFFER: _bindgen_ty_371 = 59;
pub type _bindgen_ty_371 = ::std::os::raw::c_uint;
pub const kSBCWOCmd_CHANGE_DEFINITION: _bindgen_ty_372 = 64;
pub const kSBCWOCmd_COMPARE: _bindgen_ty_372 = 57;
pub const kSBCWOCmd_COPY: _bindgen_ty_372 = 24;
pub const kSBCWOCmd_COPY_AND_VERIFY: _bindgen_ty_372 = 58;
pub const kSBCWOCmd_INQUIRY: _bindgen_ty_372 = 18;
pub const kSBCWOCmd_LOCK_UNLOCK_CACHE: _bindgen_ty_372 = 54;
pub const kSBCWOCmd_LOG_SELECT: _bindgen_ty_372 = 76;
pub const kSBCWOCmd_LOG_SENSE: _bindgen_ty_372 = 77;
pub const kSBCWOCmd_MEDIUM_SCAN: _bindgen_ty_372 = 56;
pub const kSBCWOCmd_MODE_SELECT_6: _bindgen_ty_372 = 21;
pub const kSBCWOCmd_MODE_SELECT_10: _bindgen_ty_372 = 85;
pub const kSBCWOCmd_MODE_SENSE_6: _bindgen_ty_372 = 26;
pub const kSBCWOCmd_MODE_SENSE_10: _bindgen_ty_372 = 90;
pub const kSBCWOCmd_MOVE_MEDIUM: _bindgen_ty_372 = 165;
pub const kSBCWOCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_372 = 94;
pub const kSBCWOCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_372 = 95;
pub const kSBCWOCmd_PREFETCH: _bindgen_ty_372 = 52;
pub const kSBCWOCmd_PREVENT_ALLOW_MEDIUM_REMOVAL: _bindgen_ty_372 = 30;
pub const kSBCWOCmd_READ_6: _bindgen_ty_372 = 8;
pub const kSBCWOCmd_READ_10: _bindgen_ty_372 = 40;
pub const kSBCWOCmd_READ_12: _bindgen_ty_372 = 168;
pub const kSBCWOCmd_READ_BUFFER: _bindgen_ty_372 = 60;
pub const kSBCWOCmd_READ_CAPACITY: _bindgen_ty_372 = 37;
pub const kSBCWOCmd_READ_ELEMENT_STATUS: _bindgen_ty_372 = 184;
pub const kSBCWOCmd_READ_LONG: _bindgen_ty_372 = 62;
pub const kSBCWOCmd_REASSIGN_BLOCKS: _bindgen_ty_372 = 7;
pub const kSBCWOCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_372 = 28;
pub const kSBCWOCmd_RELEASE_6: _bindgen_ty_372 = 23;
pub const kSBCWOCmd_RELEASE_10: _bindgen_ty_372 = 87;
pub const kSBCWOCmd_REQUEST_SENSE: _bindgen_ty_372 = 3;
pub const kSBCWOCmd_RESERVE_6: _bindgen_ty_372 = 22;
pub const kSBCWOCmd_RESERVE_10: _bindgen_ty_372 = 86;
pub const kSBCWOCmd_REZERO_UNIT: _bindgen_ty_372 = 1;
pub const kSBCWOCmd_SEARCH_DATA_EQUAL_10: _bindgen_ty_372 = 49;
pub const kSBCWOCmd_SEARCH_DATA_EQUAL_12: _bindgen_ty_372 = 177;
pub const kSBCWOCmd_SEARCH_DATA_HIGH_10: _bindgen_ty_372 = 48;
pub const kSBCWOCmd_SEARCH_DATA_HIGH_12: _bindgen_ty_372 = 176;
pub const kSBCWOCmd_SEARCH_DATA_LOW_10: _bindgen_ty_372 = 50;
pub const kSBCWOCmd_SEARCH_DATA_LOW_12: _bindgen_ty_372 = 178;
pub const kSBCWOCmd_SEEK_6: _bindgen_ty_372 = 11;
pub const kSBCWOCmd_SEEK_10: _bindgen_ty_372 = 43;
pub const kSBCWOCmd_SEND_DIAGNOSTICS: _bindgen_ty_372 = 29;
pub const kSBCWOCmd_SET_LIMITS_10: _bindgen_ty_372 = 51;
pub const kSBCWOCmd_SET_LIMITS_12: _bindgen_ty_372 = 179;
pub const kSBCWOCmd_START_STOP_UNIT: _bindgen_ty_372 = 27;
pub const kSBCWOCmd_SYNCHRONIZE_CACHE: _bindgen_ty_372 = 53;
pub const kSBCWOCmd_TEST_UNIT_READY: _bindgen_ty_372 = 0;
pub const kSBCWOCmd_VERIFY_10: _bindgen_ty_372 = 47;
pub const kSBCWOCmd_VERIFY_12: _bindgen_ty_372 = 175;
pub const kSBCWOCmd_WRITE_6: _bindgen_ty_372 = 10;
pub const kSBCWOCmd_WRITE_10: _bindgen_ty_372 = 42;
pub const kSBCWOCmd_WRITE_12: _bindgen_ty_372 = 170;
pub const kSBCWOCmd_WRITE_AND_VERIFY_10: _bindgen_ty_372 = 46;
pub const kSBCWOCmd_WRITE_AND_VERIFY_12: _bindgen_ty_372 = 174;
pub const kSBCWOCmd_WRITE_BUFFER: _bindgen_ty_372 = 59;
pub const kSBCWOCmd_WRITE_LONG: _bindgen_ty_372 = 63;
pub type _bindgen_ty_372 = ::std::os::raw::c_uint;
pub const kMMCCmd_BLANK: _bindgen_ty_373 = 161;
pub const kMMCCmd_CHANGE_DEFINITION: _bindgen_ty_373 = 64;
pub const kMMCCmd_CLOSE_TRACK_SESSION: _bindgen_ty_373 = 91;
pub const kMMCCmd_COMPARE: _bindgen_ty_373 = 57;
pub const kMMCCmd_COPY: _bindgen_ty_373 = 24;
pub const kMMCCmd_COPY_AND_VERIFY: _bindgen_ty_373 = 58;
pub const kMMCCmd_ERASE: _bindgen_ty_373 = 44;
pub const kMMCCmd_FORMAT_UNIT: _bindgen_ty_373 = 4;
pub const kMMCCmd_GET_CONFIGURATION: _bindgen_ty_373 = 70;
pub const kMMCCmd_GET_EVENT_STATUS_NOTIFICATION: _bindgen_ty_373 = 74;
pub const kMMCCmd_GET_PERFORMANCE: _bindgen_ty_373 = 172;
pub const kMMCCmd_INQUIRY: _bindgen_ty_373 = 18;
pub const kMMCCmd_LOAD_UNLOAD_MEDIUM: _bindgen_ty_373 = 166;
pub const kMMCCmd_LOG_SELECT: _bindgen_ty_373 = 76;
pub const kMMCCmd_LOG_SENSE: _bindgen_ty_373 = 77;
pub const kMMCCmd_MECHANISM_STATUS: _bindgen_ty_373 = 189;
pub const kMMCCmd_MODE_SELECT_6: _bindgen_ty_373 = 21;
pub const kMMCCmd_MODE_SELECT_10: _bindgen_ty_373 = 85;
pub const kMMCCmd_MODE_SENSE_6: _bindgen_ty_373 = 26;
pub const kMMCCmd_MODE_SENSE_10: _bindgen_ty_373 = 90;
pub const kMMCCmd_PAUSE_RESUME: _bindgen_ty_373 = 75;
pub const kMMCCmd_PLAY_AUDIO_10: _bindgen_ty_373 = 69;
pub const kMMCCmd_PLAY_AUDIO_12: _bindgen_ty_373 = 165;
pub const kMMCCmd_PLAY_AUDIO_MSF: _bindgen_ty_373 = 71;
pub const kMMCCmd_PLAY_AUDIO_TRACK_INDEX: _bindgen_ty_373 = 72;
pub const kMMCCmd_PLAY_CD: _bindgen_ty_373 = 188;
pub const kMMCCmd_PLAY_RELATIVE_10: _bindgen_ty_373 = 73;
pub const kMMCCmd_PLAY_RELATIVE_12: _bindgen_ty_373 = 169;
pub const kMMCCmd_PREFETCH: _bindgen_ty_373 = 52;
pub const kMMCCmd_PREVENT_ALLOW_MEDIUM_REMOVAL: _bindgen_ty_373 = 30;
pub const kMMCCmd_READ_6: _bindgen_ty_373 = 8;
pub const kMMCCmd_READ_10: _bindgen_ty_373 = 40;
pub const kMMCCmd_READ_12: _bindgen_ty_373 = 168;
pub const kMMCCmd_READ_BUFFER: _bindgen_ty_373 = 60;
pub const kMMCCmd_READ_BUFFER_CAPACITY: _bindgen_ty_373 = 92;
pub const kMMCCmd_READ_CD: _bindgen_ty_373 = 190;
pub const kMMCCmd_READ_CD_MSF: _bindgen_ty_373 = 185;
pub const kMMCCmd_READ_CAPACITY: _bindgen_ty_373 = 37;
pub const kMMCCmd_READ_DISC_INFORMATION: _bindgen_ty_373 = 81;
pub const kMMCCmd_READ_DVD_STRUCTURE: _bindgen_ty_373 = 173;
pub const kMMCCmd_READ_DISC_STRUCTURE: _bindgen_ty_373 = 173;
pub const kMMCCmd_READ_FORMAT_CAPACITIES: _bindgen_ty_373 = 35;
pub const kMMCCmd_READ_HEADER: _bindgen_ty_373 = 68;
pub const kMMCCmd_READ_LONG: _bindgen_ty_373 = 62;
pub const kMMCCmd_READ_MASTER_CUE: _bindgen_ty_373 = 89;
pub const kMMCCmd_READ_SUB_CHANNEL: _bindgen_ty_373 = 66;
pub const kMMCCmd_READ_TOC_PMA_ATIP: _bindgen_ty_373 = 67;
pub const kMMCCmd_READ_TRACK_INFORMATION: _bindgen_ty_373 = 82;
pub const kMMCCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_373 = 28;
pub const kMMCCmd_RELEASE_6: _bindgen_ty_373 = 23;
pub const kMMCCmd_RELEASE_10: _bindgen_ty_373 = 87;
pub const kMMCCmd_REPAIR_TRACK: _bindgen_ty_373 = 88;
pub const kMMCCmd_REPORT_KEY: _bindgen_ty_373 = 164;
pub const kMMCCmd_REQUEST_SENSE: _bindgen_ty_373 = 3;
pub const kMMCCmd_RESERVE_6: _bindgen_ty_373 = 22;
pub const kMMCCmd_RESERVE_10: _bindgen_ty_373 = 86;
pub const kMMCCmd_RESERVE_TRACK: _bindgen_ty_373 = 83;
pub const kMMCCmd_SCAN_MMC: _bindgen_ty_373 = 186;
pub const kMMCCmd_SEARCH_DATA_EQUAL_10: _bindgen_ty_373 = 49;
pub const kMMCCmd_SEARCH_DATA_EQUAL_12: _bindgen_ty_373 = 177;
pub const kMMCCmd_SEARCH_DATA_HIGH_10: _bindgen_ty_373 = 48;
pub const kMMCCmd_SEARCH_DATA_HIGH_12: _bindgen_ty_373 = 176;
pub const kMMCCmd_SEARCH_DATA_LOW_10: _bindgen_ty_373 = 50;
pub const kMMCCmd_SEARCH_DATA_LOW_12: _bindgen_ty_373 = 178;
pub const kMMCCmd_SEEK_6: _bindgen_ty_373 = 11;
pub const kMMCCmd_SEEK_10: _bindgen_ty_373 = 43;
pub const kMMCCmd_SEND_CUE_SHEET: _bindgen_ty_373 = 93;
pub const kMMCCmd_SEND_DIAGNOSTICS: _bindgen_ty_373 = 29;
pub const kMMCCmd_SEND_DVD_STRUCTURE: _bindgen_ty_373 = 191;
pub const kMMCCmd_SEND_EVENT: _bindgen_ty_373 = 162;
pub const kMMCCmd_SEND_KEY: _bindgen_ty_373 = 163;
pub const kMMCCmd_SEND_OPC_INFORMATION: _bindgen_ty_373 = 84;
pub const kMMCCmd_SET_CD_SPEED: _bindgen_ty_373 = 187;
pub const kMMCCmd_SET_LIMITS_10: _bindgen_ty_373 = 51;
pub const kMMCCmd_SET_LIMITS_12: _bindgen_ty_373 = 179;
pub const kMMCCmd_SET_READ_AHEAD: _bindgen_ty_373 = 167;
pub const kMMCCmd_SET_STREAMING: _bindgen_ty_373 = 182;
pub const kMMCCmd_START_STOP_UNIT: _bindgen_ty_373 = 27;
pub const kMMCCmd_STOP_PLAY_SCAN: _bindgen_ty_373 = 78;
pub const kMMCCmd_SYNCHRONIZE_CACHE: _bindgen_ty_373 = 53;
pub const kMMCCmd_TEST_UNIT_READY: _bindgen_ty_373 = 0;
pub const kMMCCmd_VERIFY_10: _bindgen_ty_373 = 47;
pub const kMMCCmd_VERIFY_12: _bindgen_ty_373 = 175;
pub const kMMCCmd_WRITE_10: _bindgen_ty_373 = 42;
pub const kMMCCmd_WRITE_12: _bindgen_ty_373 = 170;
pub const kMMCCmd_WRITE_AND_VERIFY_10: _bindgen_ty_373 = 46;
pub const kMMCCmd_WRITE_BUFFER: _bindgen_ty_373 = 59;
pub type _bindgen_ty_373 = ::std::os::raw::c_uint;
pub const kSGCCmd_CHANGE_DEFINITION: _bindgen_ty_374 = 64;
pub const kSGCCmd_COMPARE: _bindgen_ty_374 = 57;
pub const kSGCCmd_COPY: _bindgen_ty_374 = 24;
pub const kSGCCmd_COPY_AND_VERIFY: _bindgen_ty_374 = 58;
pub const kSGCCmd_GET_DATA_BUFFER_STATUS: _bindgen_ty_374 = 52;
pub const kSGCCmd_GET_WINDOW: _bindgen_ty_374 = 37;
pub const kSGCCmd_INQUIRY: _bindgen_ty_374 = 18;
pub const kSGCCmd_LOG_SELECT: _bindgen_ty_374 = 76;
pub const kSGCCmd_LOG_SENSE: _bindgen_ty_374 = 77;
pub const kSGCCmd_MODE_SELECT_6: _bindgen_ty_374 = 21;
pub const kSGCCmd_MODE_SELECT_10: _bindgen_ty_374 = 85;
pub const kSGCCmd_MODE_SENSE_6: _bindgen_ty_374 = 26;
pub const kSGCCmd_MODE_SENSE_10: _bindgen_ty_374 = 90;
pub const kSGCCmd_OBJECT_POSITION: _bindgen_ty_374 = 49;
pub const kSGCCmd_PORT_STATUS: _bindgen_ty_374 = 17;
pub const kSGCCmd_READ: _bindgen_ty_374 = 40;
pub const kSGCCmd_READ_BUFFER: _bindgen_ty_374 = 60;
pub const kSGCCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_374 = 28;
pub const kSGCCmd_RELEASE_6: _bindgen_ty_374 = 23;
pub const kSGCCmd_REQUEST_SENSE: _bindgen_ty_374 = 3;
pub const kSGCCmd_RESERVE_6: _bindgen_ty_374 = 22;
pub const kSGCCmd_SCAN: _bindgen_ty_374 = 27;
pub const kSGCCmd_SEND: _bindgen_ty_374 = 27;
pub const kSGCCmd_SEND_DIAGNOSTICS: _bindgen_ty_374 = 29;
pub const kSGCCmd_SET_WINDOW: _bindgen_ty_374 = 36;
pub const kSGCCmd_TEST_UNIT_READY: _bindgen_ty_374 = 0;
pub const kSGCCmd_WRITE_BUFFER: _bindgen_ty_374 = 59;
pub type _bindgen_ty_374 = ::std::os::raw::c_uint;
pub const kSMCCmd_EXCHANGE_MEDIUM: _bindgen_ty_375 = 166;
pub const kSMCCmd_INITIALIZE_ELEMENT_STATUS: _bindgen_ty_375 = 7;
pub const kSMCCmd_MODE_SELECT_6: _bindgen_ty_375 = 21;
pub const kSMCCmd_MODE_SELECT_10: _bindgen_ty_375 = 85;
pub const kSMCCmd_MODE_SENSE_6: _bindgen_ty_375 = 26;
pub const kSMCCmd_MODE_SENSE_10: _bindgen_ty_375 = 90;
pub const kSMCCmd_MOVE_MEDIUM: _bindgen_ty_375 = 165;
pub const kSMCCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_375 = 94;
pub const kSMCCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_375 = 95;
pub const kSMCCmd_POSITION_TO_ELEMENT: _bindgen_ty_375 = 43;
pub const kSMCCmd_READ_ELEMENT_STATUS: _bindgen_ty_375 = 184;
pub const kSMCCmd_RELEASE_ELEMENT_6: _bindgen_ty_375 = 22;
pub const kSMCCmd_RELEASE_ELEMENT_10: _bindgen_ty_375 = 86;
pub const kSMCCmd_REQUEST_VOLUME_ELEMENT_ADDRESS: _bindgen_ty_375 = 181;
pub const kSMCCmd_REQUEST_SENSE: _bindgen_ty_375 = 3;
pub const kSMCCmd_RESERVE_ELEMENT_6: _bindgen_ty_375 = 22;
pub const kSMCCmd_RESERVE_ELEMENT_10: _bindgen_ty_375 = 86;
pub type _bindgen_ty_375 = ::std::os::raw::c_uint;
pub const kSCCCmd_MAINTENANCE_IN: _bindgen_ty_376 = 163;
pub const kSCCCmd_MAINTENANCE_OUT: _bindgen_ty_376 = 164;
pub const kSCCCmd_MODE_SELECT_6: _bindgen_ty_376 = 21;
pub const kSCCCmd_MODE_SELECT_10: _bindgen_ty_376 = 85;
pub const kSCCCmd_MODE_SENSE_6: _bindgen_ty_376 = 26;
pub const kSCCCmd_MODE_SENSE_10: _bindgen_ty_376 = 90;
pub const kSCCCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_376 = 94;
pub const kSCCCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_376 = 95;
pub const kSCCCmd_PORT_STATUS: _bindgen_ty_376 = 31;
pub const kSCCCmd_REDUNDANCY_GROUP_IN: _bindgen_ty_376 = 186;
pub const kSCCCmd_REDUNDANCY_GROUP_OUT: _bindgen_ty_376 = 187;
pub const kSCCCmd_RELEASE_6: _bindgen_ty_376 = 23;
pub const kSCCCmd_RELEASE_10: _bindgen_ty_376 = 87;
pub const kSCCCmd_REPORT_LUNS: _bindgen_ty_376 = 160;
pub const kSCCCmd_REQUEST_SENSE: _bindgen_ty_376 = 3;
pub const kSCCCmd_RESERVE_6: _bindgen_ty_376 = 22;
pub const kSCCCmd_RESERVE_10: _bindgen_ty_376 = 86;
pub const kSCCCmd_SEND_DIAGNOSTICS: _bindgen_ty_376 = 29;
pub const kSCCCmd_SPARE_IN: _bindgen_ty_376 = 188;
pub const kSCCCmd_SPARE_OUT: _bindgen_ty_376 = 189;
pub type _bindgen_ty_376 = ::std::os::raw::c_uint;
pub const kSESCmd_MODE_SELECT_6: _bindgen_ty_377 = 21;
pub const kSESCmd_MODE_SELECT_10: _bindgen_ty_377 = 85;
pub const kSESCmd_MODE_SENSE_6: _bindgen_ty_377 = 26;
pub const kSESCmd_MODE_SENSE_10: _bindgen_ty_377 = 90;
pub const kSESCmd_PERSISTENT_RESERVE_IN: _bindgen_ty_377 = 94;
pub const kSESCmd_PERSISTENT_RESERVE_OUT: _bindgen_ty_377 = 95;
pub const kSESCmd_RECEIVE_DIAGNOSTICS_RESULTS: _bindgen_ty_377 = 23;
pub const kSESCmd_RELEASE_6: _bindgen_ty_377 = 23;
pub const kSESCmd_RELEASE_10: _bindgen_ty_377 = 87;
pub const kSESCmd_REQUEST_SENSE: _bindgen_ty_377 = 3;
pub const kSESCmd_RESERVE_6: _bindgen_ty_377 = 22;
pub const kSESCmd_RESERVE_10: _bindgen_ty_377 = 86;
pub const kSESCmd_SEND_DIAGNOSTICS: _bindgen_ty_377 = 29;
pub type _bindgen_ty_377 = ::std::os::raw::c_uint;
pub const kRBCCmd_FORMAT_UNIT: _bindgen_ty_378 = 4;
pub const kRBCCmd_READ_10: _bindgen_ty_378 = 40;
pub const kRBCCmd_READ_CAPACITY: _bindgen_ty_378 = 37;
pub const kRBCCmd_START_STOP_UNIT: _bindgen_ty_378 = 27;
pub const kRBCCmd_SYNCHRONIZE_CACHE: _bindgen_ty_378 = 53;
pub const kRBCCmd_VERIFY_10: _bindgen_ty_378 = 47;
pub const kRBCCmd_WRITE_10: _bindgen_ty_378 = 42;
pub const kRBCCmd_WRITE_BUFFER: _bindgen_ty_378 = 59;
pub type _bindgen_ty_378 = ::std::os::raw::c_uint;
pub const kREPORT_CAPACITY_DataSize: _bindgen_ty_379 = 8;
pub const kREPORT_CAPACITY_16_DataSize: _bindgen_ty_379 = 32;
pub type _bindgen_ty_379 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSI_Capacity_Data {
    pub RETURNED_LOGICAL_BLOCK_ADDRESS: UInt32,
    pub BLOCK_LENGTH_IN_BYTES: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSI_Capacity_Data_Long {
    pub RETURNED_LOGICAL_BLOCK_ADDRESS: UInt64,
    pub BLOCK_LENGTH_IN_BYTES: UInt32,
    pub RTO_EN_PROT_EN: UInt8,
    pub Reserved: [UInt8; 19usize],
}
pub const kREAD_CAPACITY_RTO_Enabled: _bindgen_ty_380 = 2;
pub const kREAD_CAPACITY_RTO_Disabled: _bindgen_ty_380 = 0;
pub const kREAD_CAPACITY_RTO_Mask: _bindgen_ty_380 = 2;
pub type _bindgen_ty_380 = ::std::os::raw::c_uint;
pub const kREAD_CAPACITY_PROT_Enabled: _bindgen_ty_381 = 1;
pub const kREAD_CAPACITY_PROT_Disabled: _bindgen_ty_381 = 0;
pub const kREAD_CAPACITY_PROT_Mask: _bindgen_ty_381 = 1;
pub type _bindgen_ty_381 = ::std::os::raw::c_uint;
pub type SCSIDeviceIdentifier = UInt64;
pub type SCSITargetIdentifier = SCSIDeviceIdentifier;
pub type SCSIInitiatorIdentifier = SCSIDeviceIdentifier;
pub type SCSILogicalUnitBytes = [UInt8; 8usize];
pub type SCSILogicalUnitNumber = UInt64;
pub type SCSITaggedTaskIdentifier = UInt64;
pub const kSCSIUntaggedTaskIdentifier: _bindgen_ty_382 = 0;
pub type _bindgen_ty_382 = ::std::os::raw::c_uint;
pub const SCSITaskAttribute_kSCSITask_SIMPLE: SCSITaskAttribute = 0;
pub const SCSITaskAttribute_kSCSITask_ORDERED: SCSITaskAttribute = 1;
pub const SCSITaskAttribute_kSCSITask_HEAD_OF_QUEUE: SCSITaskAttribute = 2;
pub const SCSITaskAttribute_kSCSITask_ACA: SCSITaskAttribute = 3;
pub type SCSITaskAttribute = ::std::os::raw::c_uint;
pub const SCSITaskState_kSCSITaskState_NEW_TASK: SCSITaskState = 0;
pub const SCSITaskState_kSCSITaskState_ENABLED: SCSITaskState = 1;
pub const SCSITaskState_kSCSITaskState_BLOCKED: SCSITaskState = 2;
pub const SCSITaskState_kSCSITaskState_DORMANT: SCSITaskState = 3;
pub const SCSITaskState_kSCSITaskState_ENDED: SCSITaskState = 4;
pub type SCSITaskState = ::std::os::raw::c_uint;
pub const SCSIServiceResponse_kSCSIServiceResponse_Request_In_Process: SCSIServiceResponse = 0;
pub const SCSIServiceResponse_kSCSIServiceResponse_SERVICE_DELIVERY_OR_TARGET_FAILURE:
    SCSIServiceResponse = 1;
pub const SCSIServiceResponse_kSCSIServiceResponse_TASK_COMPLETE: SCSIServiceResponse = 2;
pub const SCSIServiceResponse_kSCSIServiceResponse_LINK_COMMAND_COMPLETE: SCSIServiceResponse = 3;
pub const SCSIServiceResponse_kSCSIServiceResponse_FUNCTION_COMPLETE: SCSIServiceResponse = 4;
pub const SCSIServiceResponse_kSCSIServiceResponse_FUNCTION_REJECTED: SCSIServiceResponse = 5;
pub type SCSIServiceResponse = ::std::os::raw::c_uint;
pub const SCSITaskStatus_kSCSITaskStatus_GOOD: SCSITaskStatus = 0;
pub const SCSITaskStatus_kSCSITaskStatus_CHECK_CONDITION: SCSITaskStatus = 2;
pub const SCSITaskStatus_kSCSITaskStatus_CONDITION_MET: SCSITaskStatus = 4;
pub const SCSITaskStatus_kSCSITaskStatus_BUSY: SCSITaskStatus = 8;
pub const SCSITaskStatus_kSCSITaskStatus_INTERMEDIATE: SCSITaskStatus = 16;
pub const SCSITaskStatus_kSCSITaskStatus_INTERMEDIATE_CONDITION_MET: SCSITaskStatus = 20;
pub const SCSITaskStatus_kSCSITaskStatus_RESERVATION_CONFLICT: SCSITaskStatus = 24;
pub const SCSITaskStatus_kSCSITaskStatus_TASK_SET_FULL: SCSITaskStatus = 40;
pub const SCSITaskStatus_kSCSITaskStatus_ACA_ACTIVE: SCSITaskStatus = 48;
pub const SCSITaskStatus_kSCSITaskStatus_TaskTimeoutOccurred: SCSITaskStatus = 1;
pub const SCSITaskStatus_kSCSITaskStatus_ProtocolTimeoutOccurred: SCSITaskStatus = 2;
pub const SCSITaskStatus_kSCSITaskStatus_DeviceNotResponding: SCSITaskStatus = 3;
pub const SCSITaskStatus_kSCSITaskStatus_DeviceNotPresent: SCSITaskStatus = 4;
pub const SCSITaskStatus_kSCSITaskStatus_DeliveryFailure: SCSITaskStatus = 5;
pub const SCSITaskStatus_kSCSITaskStatus_No_Status: SCSITaskStatus = 255;
pub type SCSITaskStatus = ::std::os::raw::c_uint;
pub const kSCSICDBSize_Maximum: _bindgen_ty_383 = 16;
pub const kSCSICDBSize_6Byte: _bindgen_ty_383 = 6;
pub const kSCSICDBSize_10Byte: _bindgen_ty_383 = 10;
pub const kSCSICDBSize_12Byte: _bindgen_ty_383 = 12;
pub const kSCSICDBSize_16Byte: _bindgen_ty_383 = 16;
pub type _bindgen_ty_383 = ::std::os::raw::c_uint;
pub type SCSICommandDescriptorBlock = [UInt8; 16usize];
pub const kSCSIDataTransfer_NoDataTransfer: _bindgen_ty_384 = 0;
pub const kSCSIDataTransfer_FromInitiatorToTarget: _bindgen_ty_384 = 1;
pub const kSCSIDataTransfer_FromTargetToInitiator: _bindgen_ty_384 = 2;
pub type _bindgen_ty_384 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_REPORT_LUNS_LUN_ENTRY {
    pub FIRST_LEVEL_ADDRESSING: UInt16,
    pub SECOND_LEVEL_ADDRESSING: UInt16,
    pub THIRD_LEVEL_ADDRESSING: UInt16,
    pub FOURTH_LEVEL_ADDRESSING: UInt16,
}
pub const kREPORT_LUNS_ADDRESS_METHOD_PERIPHERAL_DEVICE: _bindgen_ty_385 = 0;
pub const kREPORT_LUNS_ADDRESS_METHOD_FLAT_SPACE: _bindgen_ty_385 = 1;
pub const kREPORT_LUNS_ADDRESS_DEVICE_TYPE_SPECIFIC: _bindgen_ty_385 = 1;
pub const kREPORT_LUNS_ADDRESS_METHOD_LOGICAL_UNIT: _bindgen_ty_385 = 2;
pub const kREPORT_LUNS_ADDRESS_METHOD_OFFSET: _bindgen_ty_385 = 14;
pub type _bindgen_ty_385 = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct REPORT_LUNS_LOGICAL_UNIT_ADDRESSING {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl REPORT_LUNS_LOGICAL_UNIT_ADDRESSING {
    #[inline]
    pub fn LUN(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_LUN(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn BUS_NUMBER(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_BUS_NUMBER(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn TARGET(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_TARGET(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        LUN: UInt16,
        BUS_NUMBER: UInt16,
        TARGET: UInt16,
        reserved2: UInt16,
        reserved: UInt16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let LUN: u16 = unsafe { ::std::mem::transmute(LUN) };
            LUN as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let BUS_NUMBER: u16 = unsafe { ::std::mem::transmute(BUS_NUMBER) };
            BUS_NUMBER as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let TARGET: u16 = unsafe { ::std::mem::transmute(TARGET) };
            TARGET as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let reserved2: u16 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct REPORT_LUNS_PERIPHERAL_DEVICE_ADDRESSING {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl REPORT_LUNS_PERIPHERAL_DEVICE_ADDRESSING {
    #[inline]
    pub fn TARGET_LUN(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_TARGET_LUN(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn BUS_IDENTIFIER(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_BUS_IDENTIFIER(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> UInt16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UInt16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        TARGET_LUN: UInt16,
        BUS_IDENTIFIER: UInt16,
        reserved2: UInt16,
        reserved: UInt16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let TARGET_LUN: u16 = unsafe { ::std::mem::transmute(TARGET_LUN) };
            TARGET_LUN as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let BUS_IDENTIFIER: u16 = unsafe { ::std::mem::transmute(BUS_IDENTIFIER) };
            BUS_IDENTIFIER as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let reserved2: u16 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSICmd_REPORT_LUNS_Header {
    pub LUN_LIST_LENGTH: UInt32,
    pub RESERVED: UInt32,
    pub LUN: [SCSICmd_REPORT_LUNS_LUN_ENTRY; 1usize],
}
pub const kMMCDeviceTrayClosed: _bindgen_ty_386 = 0;
pub const kMMCDeviceTrayOpen: _bindgen_ty_386 = 1;
pub const kMMCDeviceTrayMask: _bindgen_ty_386 = 1;
pub type _bindgen_ty_386 = ::std::os::raw::c_uint;
pub type SCSITaskSGElement = IOAddressRange;
pub type SCSITaskCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        serviceResponse: SCSIServiceResponse,
        taskStatus: SCSITaskStatus,
        bytesTransferred: UInt64,
        refCon: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSITaskInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub IsTaskActive:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> Boolean>,
    pub SetTaskAttribute: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            inAttribute: SCSITaskAttribute,
        ) -> IOReturn,
    >,
    pub GetTaskAttribute: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            outAttribute: *mut SCSITaskAttribute,
        ) -> IOReturn,
    >,
    pub SetCommandDescriptorBlock: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            inCDB: *mut UInt8,
            inSize: UInt8,
        ) -> IOReturn,
    >,
    pub GetCommandDescriptorBlockSize:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> UInt8>,
    pub GetCommandDescriptorBlock: ::std::option::Option<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_void, outCDB: *mut UInt8) -> IOReturn,
    >,
    pub SetScatterGatherEntries: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            inScatterGatherList: *mut SCSITaskSGElement,
            inScatterGatherEntries: UInt8,
            inTransferCount: UInt64,
            inTransferDirection: UInt8,
        ) -> IOReturn,
    >,
    pub SetTimeoutDuration: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            inTimeoutDurationMS: UInt32,
        ) -> IOReturn,
    >,
    pub GetTimeoutDuration:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> UInt32>,
    pub SetTaskCompletionCallback: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            callback: SCSITaskCallbackFunction,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ExecuteTaskAsync:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ExecuteTaskSync: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            senseDataBuffer: *mut SCSI_Sense_Data,
            outStatus: *mut SCSITaskStatus,
            realizedTransferCount: *mut UInt64,
        ) -> IOReturn,
    >,
    pub AbortTask:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetSCSIServiceResponse: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            outServiceResponse: *mut SCSIServiceResponse,
        ) -> IOReturn,
    >,
    pub GetTaskState: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            outState: *mut SCSITaskState,
        ) -> IOReturn,
    >,
    pub GetTaskStatus: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            outStatus: *mut SCSITaskStatus,
        ) -> IOReturn,
    >,
    pub GetRealizedDataTransferCount:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> UInt64>,
    pub GetAutoSenseData: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub SetAutoSenseDataBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            task: *mut ::std::os::raw::c_void,
            senseDataBuffer: *mut SCSI_Sense_Data,
            senseDataLength: UInt8,
        ) -> IOReturn,
    >,
    pub ResetForNewTask:
        ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void) -> IOReturn>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCSITaskDeviceInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub IsExclusiveAccessAvailable:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> Boolean>,
    pub AddCallbackDispatcherToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            cfRunLoopRef: CFRunLoopRef,
        ) -> IOReturn,
    >,
    pub RemoveCallbackDispatcherFromRunLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void)>,
    pub ObtainExclusiveAccess:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ReleaseExclusiveAccess:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub CreateSCSITask: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> *mut *mut SCSITaskInterface,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMCDeviceInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub Inquiry: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            inquiryBuffer: *mut SCSICmd_INQUIRY_StandardData,
            inqBufferSize: UInt32,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub TestUnitReady: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub GetPerformance: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            TOLERANCE: SCSICmdField2Bit,
            WRITE: SCSICmdField1Bit,
            EXCEPT: SCSICmdField2Bit,
            STARTING_LBA: SCSICmdField4Byte,
            MAXIMUM_NUMBER_OF_DESCRIPTORS: SCSICmdField2Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            RT: SCSICmdField1Byte,
            STARTING_FEATURE_NUMBER: SCSICmdField2Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ModeSense10: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            LLBAA: SCSICmdField1Bit,
            DBD: SCSICmdField1Bit,
            PC: SCSICmdField2Bit,
            PAGE_CODE: SCSICmdField6Bit,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub SetWriteParametersModePage: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField1Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub GetTrayState: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, trayState: *mut UInt8) -> IOReturn,
    >,
    pub SetTrayState: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, trayState: UInt8) -> IOReturn,
    >,
    pub ReadTableOfContents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            MSF: SCSICmdField1Bit,
            FORMAT: SCSICmdField4Bit,
            TRACK_SESSION_NUMBER: SCSICmdField1Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadDiscInformation: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadTrackInformation: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ADDRESS_NUMBER_TYPE: SCSICmdField2Bit,
            LOGICAL_BLOCK_ADDRESS_TRACK_SESSION_NUMBER: SCSICmdField4Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadDVDStructure: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ADDRESS: SCSICmdField4Byte,
            LAYER_NUMBER: SCSICmdField1Byte,
            FORMAT: SCSICmdField1Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub GetSCSITaskDeviceInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
        ) -> *mut *mut SCSITaskDeviceInterface,
    >,
    pub GetPerformanceV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            DATA_TYPE: SCSICmdField5Bit,
            STARTING_LBA: SCSICmdField4Byte,
            MAXIMUM_NUMBER_OF_DESCRIPTORS: SCSICmdField2Byte,
            TYPE: SCSICmdField1Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub SetCDSpeed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            LOGICAL_UNIT_READ_SPEED: SCSICmdField2Byte,
            LOGICAL_UNIT_WRITE_SPEED: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadFormatCapacities: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadDiscStructure: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            MEDIA_TYPE: SCSICmdField4Bit,
            ADDRESS: SCSICmdField4Byte,
            LAYER_NUMBER: SCSICmdField1Byte,
            FORMAT: SCSICmdField1Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadDiscInformationV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            DATA_TYPE: SCSICmdField3Bit,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub ReadTrackInformationV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            OPEN: SCSICmdField1Bit,
            ADDRESS_NUMBER_TYPE: SCSICmdField2Bit,
            LOGICAL_BLOCK_ADDRESS_TRACK_SESSION_NUMBER: SCSICmdField4Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
    pub SetStreaming: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            TYPE: SCSICmdField1Byte,
            buffer: *mut ::std::os::raw::c_void,
            bufferSize: SCSICmdField2Byte,
            taskStatus: *mut SCSITaskStatus,
            senseDataBuffer: *mut SCSI_Sense_Data,
        ) -> IOReturn,
    >,
}
pub type user_ul_t = __uint64_t;
pub type user_speed_t = __uint64_t;
pub type user_us_t = __uint32_t;
pub type user_shspeed_t = __uint32_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct applelabel {
    pub al_boot0: [u8; 416usize],
    pub al_magic: u16,
    pub al_type: u16,
    pub al_flags: u32,
    pub al_offset: u64,
    pub al_size: u32,
    pub al_checksum: u32,
    pub al_boot1: [u8; 72usize],
}
pub const kDVDMediaTypeUnknown: _bindgen_ty_387 = 512;
pub const kDVDMediaTypeROM: _bindgen_ty_387 = 514;
pub const kDVDMediaTypeRAM: _bindgen_ty_387 = 515;
pub const kDVDMediaTypeR: _bindgen_ty_387 = 516;
pub const kDVDMediaTypeRW: _bindgen_ty_387 = 517;
pub const kDVDMediaTypePlusRW: _bindgen_ty_387 = 518;
pub const kDVDMediaTypePlusR: _bindgen_ty_387 = 519;
pub const kDVDMediaTypeHDROM: _bindgen_ty_387 = 530;
pub const kDVDMediaTypeHDRAM: _bindgen_ty_387 = 531;
pub const kDVDMediaTypeHDR: _bindgen_ty_387 = 532;
pub const kDVDMediaTypeHDRW: _bindgen_ty_387 = 533;
pub const kDVDMediaTypeMin: _bindgen_ty_387 = 512;
pub const kDVDMediaTypeMax: _bindgen_ty_387 = 767;
pub type _bindgen_ty_387 = ::std::os::raw::c_uint;
pub type DVDMediaType = UInt32;
pub type DVDCPRMRegionCode = UInt8;
pub const kDVDCPRMRegion1: _bindgen_ty_388 = 254;
pub const kDVDCPRMRegion2: _bindgen_ty_388 = 253;
pub const kDVDCPRMRegion3: _bindgen_ty_388 = 251;
pub const kDVDCPRMRegion4: _bindgen_ty_388 = 247;
pub const kDVDCPRMRegion5: _bindgen_ty_388 = 239;
pub const kDVDCPRMRegion6: _bindgen_ty_388 = 223;
pub type _bindgen_ty_388 = ::std::os::raw::c_uint;
pub type DVDRegionalPlaybackControlScheme = UInt8;
pub const kDVDRegionalPlaybackControlSchemePhase1: _bindgen_ty_389 = 0;
pub const kDVDRegionalPlaybackControlSchemePhase2: _bindgen_ty_389 = 1;
pub type _bindgen_ty_389 = ::std::os::raw::c_uint;
pub type DVDBookType = UInt8;
pub const kDVDBookTypeROM: _bindgen_ty_390 = 0;
pub const kDVDBookTypeRAM: _bindgen_ty_390 = 1;
pub const kDVDBookTypeR: _bindgen_ty_390 = 2;
pub const kDVDBookTypeRW: _bindgen_ty_390 = 3;
pub const kDVDBookTypeHDROM: _bindgen_ty_390 = 4;
pub const kDVDBookTypeHDRAM: _bindgen_ty_390 = 5;
pub const kDVDBookTypeHDR: _bindgen_ty_390 = 6;
pub const kDVDBookTypeHDRW: _bindgen_ty_390 = 7;
pub const kDVDBookTypePlusRW: _bindgen_ty_390 = 9;
pub const kDVDBookTypePlusR: _bindgen_ty_390 = 10;
pub const kDVDBookTypePlusRWDoubleLayer: _bindgen_ty_390 = 13;
pub const kDVDBookTypePlusRDoubleLayer: _bindgen_ty_390 = 14;
pub type _bindgen_ty_390 = ::std::os::raw::c_uint;
pub type DVDKeyClass = UInt8;
pub const kDVDKeyClassCSS_CPPM_CPRM: _bindgen_ty_391 = 0;
pub const kDVDKeyClassRSSA: _bindgen_ty_391 = 1;
pub type _bindgen_ty_391 = ::std::os::raw::c_uint;
pub type DVDKeyFormat = UInt8;
pub const kDVDKeyFormatAGID_CSS: _bindgen_ty_392 = 0;
pub const kDVDKeyFormatChallengeKey: _bindgen_ty_392 = 1;
pub const kDVDKeyFormatKey1: _bindgen_ty_392 = 2;
pub const kDVDKeyFormatKey2: _bindgen_ty_392 = 3;
pub const kDVDKeyFormatTitleKey: _bindgen_ty_392 = 4;
pub const kDVDKeyFormatASF: _bindgen_ty_392 = 5;
pub const kDVDKeyFormatSetRegion: _bindgen_ty_392 = 6;
pub const kDVDKeyFormatRegionState: _bindgen_ty_392 = 8;
pub const kDVDKeyFormatAGID_CSS2: _bindgen_ty_392 = 16;
pub const kDVDKeyFormatAGID_CPRM: _bindgen_ty_392 = 17;
pub const kDVDKeyFormatAGID_Invalidate: _bindgen_ty_392 = 63;
pub type _bindgen_ty_392 = ::std::os::raw::c_uint;
pub type DVDStructureFormat = UInt8;
pub const kDVDStructureFormatPhysicalFormatInfo: _bindgen_ty_393 = 0;
pub const kDVDStructureFormatCopyrightInfo: _bindgen_ty_393 = 1;
pub const kDVDStructureFormatDiscKeyInfo: _bindgen_ty_393 = 2;
pub const kDVDStructureFormatManufacturingInfo: _bindgen_ty_393 = 4;
pub type _bindgen_ty_393 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDPhysicalFormatInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub zero1: UInt8,
    pub startingPhysicalSectorNumberOfDataArea: [UInt8; 3usize],
    pub zero2: UInt8,
    pub endPhysicalSectorNumberOfDataArea: [UInt8; 3usize],
    pub zero3: UInt8,
    pub endSectorNumberInLayerZero: [UInt8; 3usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub mediaSpecific: [UInt8; 2031usize],
}
impl DVDPhysicalFormatInfo {
    #[inline]
    pub fn partVersion(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_partVersion(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bookType(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_bookType(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn minimumRate(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_minimumRate(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn discSize(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_discSize(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn layerType(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_layerType(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn trackPath(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_trackPath(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn numberOfLayers(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_numberOfLayers(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trackDensity(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_trackDensity(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn linearDensity(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_linearDensity(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        partVersion: UInt8,
        bookType: UInt8,
        minimumRate: UInt8,
        discSize: UInt8,
        layerType: UInt8,
        trackPath: UInt8,
        numberOfLayers: UInt8,
        reserved2: UInt8,
        trackDensity: UInt8,
        linearDensity: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let partVersion: u8 = unsafe { ::std::mem::transmute(partVersion) };
            partVersion as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bookType: u8 = unsafe { ::std::mem::transmute(bookType) };
            bookType as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let minimumRate: u8 = unsafe { ::std::mem::transmute(minimumRate) };
            minimumRate as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let discSize: u8 = unsafe { ::std::mem::transmute(discSize) };
            discSize as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let layerType: u8 = unsafe { ::std::mem::transmute(layerType) };
            layerType as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let trackPath: u8 = unsafe { ::std::mem::transmute(trackPath) };
            trackPath as u64
        });
        __bindgen_bitfield_unit.set(21usize, 2u8, {
            let numberOfLayers: u8 = unsafe { ::std::mem::transmute(numberOfLayers) };
            numberOfLayers as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let reserved2: u8 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let trackDensity: u8 = unsafe { ::std::mem::transmute(trackDensity) };
            trackDensity as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let linearDensity: u8 = unsafe { ::std::mem::transmute(linearDensity) };
            linearDensity as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn reserved1(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bcaFlag(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_bcaFlag(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(reserved1: UInt8, bcaFlag: UInt8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let reserved1: u8 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bcaFlag: u8 = unsafe { ::std::mem::transmute(bcaFlag) };
            bcaFlag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDCopyrightInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub copyrightProtectionSystemType: UInt8,
    pub regionMask: DVDCPRMRegionCode,
    pub reserved2: [UInt8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDDiscKeyInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub discKeyStructures: [UInt8; 2048usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDManufacturingInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub discManufacturingInfo: [UInt8; 2048usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDAuthenticationGrantIDInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub reserved2: [UInt8; 3usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl DVDAuthenticationGrantIDInfo {
    #[inline]
    pub fn reservedBits(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reservedBits(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn grantID(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_grantID(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reservedBits: UInt8,
        grantID: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let reservedBits: u8 = unsafe { ::std::mem::transmute(reservedBits) };
            reservedBits as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let grantID: u8 = unsafe { ::std::mem::transmute(grantID) };
            grantID as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDChallengeKeyInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub challengeKeyValue: [UInt8; 10usize],
    pub reserved2: [UInt8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDKey1Info {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub key1Value: [UInt8; 5usize],
    pub reserved2: [UInt8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDKey2Info {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub key2Value: [UInt8; 5usize],
    pub reserved2: [UInt8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDTitleKeyInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub titleKeyValue: [UInt8; 5usize],
    pub reserved2: [UInt8; 2usize],
}
impl DVDTitleKeyInfo {
    #[inline]
    pub fn CP_MOD(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_CP_MOD(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn CGMS(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_CGMS(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn CP_SEC(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_CP_SEC(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn CPM(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_CPM(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        CP_MOD: UInt8,
        CGMS: UInt8,
        CP_SEC: UInt8,
        CPM: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let CP_MOD: u8 = unsafe { ::std::mem::transmute(CP_MOD) };
            CP_MOD as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let CGMS: u8 = unsafe { ::std::mem::transmute(CGMS) };
            CGMS as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let CP_SEC: u8 = unsafe { ::std::mem::transmute(CP_SEC) };
            CP_SEC as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let CPM: u8 = unsafe { ::std::mem::transmute(CPM) };
            CPM as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDAuthenticationSuccessFlagInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub reserved2: [UInt8; 3usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl DVDAuthenticationSuccessFlagInfo {
    #[inline]
    pub fn successFlag(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_successFlag(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reservedBits(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_reservedBits(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        successFlag: UInt8,
        reservedBits: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let successFlag: u8 = unsafe { ::std::mem::transmute(successFlag) };
            successFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let reservedBits: u8 = unsafe { ::std::mem::transmute(reservedBits) };
            reservedBits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DVDRegionPlaybackControlInfo {
    pub dataLength: [UInt8; 2usize],
    pub reserved: [UInt8; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub driveRegion: DVDCPRMRegionCode,
    pub rpcScheme: DVDRegionalPlaybackControlScheme,
    pub reserved2: UInt8,
}
impl DVDRegionPlaybackControlInfo {
    #[inline]
    pub fn numberUserResets(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_numberUserResets(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn numberVendorResets(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_numberVendorResets(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn typeCode(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_typeCode(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        numberUserResets: UInt8,
        numberVendorResets: UInt8,
        typeCode: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let numberUserResets: u8 = unsafe { ::std::mem::transmute(numberUserResets) };
            numberUserResets as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let numberVendorResets: u8 = unsafe { ::std::mem::transmute(numberVendorResets) };
            numberVendorResets as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let typeCode: u8 = unsafe { ::std::mem::transmute(typeCode) };
            typeCode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
pub struct DVDDiscInfo {
    pub dataLength: UInt16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved2: UInt8,
    pub numberOfBordersLSB: UInt8,
    pub firstRZoneNumberInLastBorderLSB: UInt8,
    pub lastRZoneNumberInLastBorderLSB: UInt8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved5: UInt8,
    pub numberOfBordersMSB: UInt8,
    pub firstRZoneNumberInLastBorderMSB: UInt8,
    pub lastRZoneNumberInLastBorderMSB: UInt8,
    pub reserved6: [UInt8; 4usize],
    pub reserved7: [UInt8; 4usize],
    pub reserved8: [UInt8; 4usize],
    pub discBarCode: [UInt8; 8usize],
    pub reserved9: UInt8,
    pub numberOfOPCTableEntries: UInt8,
    pub opcTableEntries: __IncompleteArrayField<UInt8>,
}
impl DVDDiscInfo {
    #[inline]
    pub fn discStatus(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_discStatus(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn stateOfLastBorder(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_stateOfLastBorder(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn erasable(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_erasable(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        discStatus: UInt8,
        stateOfLastBorder: UInt8,
        erasable: UInt8,
        reserved: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let discStatus: u8 = unsafe { ::std::mem::transmute(discStatus) };
            discStatus as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let stateOfLastBorder: u8 = unsafe { ::std::mem::transmute(stateOfLastBorder) };
            stateOfLastBorder as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let erasable: u8 = unsafe { ::std::mem::transmute(erasable) };
            erasable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn reserved3(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn unrestrictedUse(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_unrestrictedUse(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn discBarCodeValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_discBarCodeValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        reserved3: UInt8,
        unrestrictedUse: UInt8,
        discBarCodeValid: UInt8,
        reserved4: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let reserved3: u8 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let unrestrictedUse: u8 = unsafe { ::std::mem::transmute(unrestrictedUse) };
            unrestrictedUse as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let discBarCodeValid: u8 = unsafe { ::std::mem::transmute(discBarCodeValid) };
            discBarCodeValid as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reserved4: u8 = unsafe { ::std::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type DVDRZoneInfoAddressType = UInt8;
pub const kDVDRZoneInfoAddressTypeLBA: _bindgen_ty_394 = 0;
pub const kDVDRZoneInfoAddressTypeRZoneNumber: _bindgen_ty_394 = 1;
pub const kDVDRZoneInfoAddressTypeBorderNumber: _bindgen_ty_394 = 2;
pub type _bindgen_ty_394 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DVDRZoneInfo {
    pub dataLength: UInt16,
    pub rzoneNumberLSB: UInt8,
    pub borderNumberLSB: UInt8,
    pub reserved: UInt8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub rzoneStartAddress: UInt32,
    pub nextWritableAddress: UInt32,
    pub freeBlocks: UInt32,
    pub blockingFactor: UInt32,
    pub rzoneSize: UInt32,
    pub lastRecordedAddress: UInt32,
    pub rzoneNumberMSB: UInt8,
    pub borderNumberMSB: UInt8,
    pub reserved6: UInt8,
    pub reserved7: UInt8,
}
impl DVDRZoneInfo {
    #[inline]
    pub fn reserved2(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn damage(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_damage(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn restrictedOverwrite(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_restrictedOverwrite(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn incremental(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_incremental(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blank(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_blank(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reservedRZone(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reservedRZone(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nextWritableAddressValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nextWritableAddressValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lastRecordedAddressValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastRecordedAddressValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved2: UInt8,
        copy: UInt8,
        damage: UInt8,
        reserved3: UInt8,
        reserved4: UInt8,
        restrictedOverwrite: UInt8,
        incremental: UInt8,
        blank: UInt8,
        reservedRZone: UInt8,
        nextWritableAddressValid: UInt8,
        lastRecordedAddressValid: UInt8,
        reserved5: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let reserved2: u8 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let copy: u8 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let damage: u8 = unsafe { ::std::mem::transmute(damage) };
            damage as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let reserved3: u8 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let reserved4: u8 = unsafe { ::std::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let restrictedOverwrite: u8 = unsafe { ::std::mem::transmute(restrictedOverwrite) };
            restrictedOverwrite as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let incremental: u8 = unsafe { ::std::mem::transmute(incremental) };
            incremental as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let blank: u8 = unsafe { ::std::mem::transmute(blank) };
            blank as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reservedRZone: u8 = unsafe { ::std::mem::transmute(reservedRZone) };
            reservedRZone as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let nextWritableAddressValid: u8 =
                unsafe { ::std::mem::transmute(nextWritableAddressValid) };
            nextWritableAddressValid as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let lastRecordedAddressValid: u8 =
                unsafe { ::std::mem::transmute(lastRecordedAddressValid) };
            lastRecordedAddressValid as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let reserved5: u8 = unsafe { ::std::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_dvd_read_structure_t {
    pub format: u8,
    pub reserved0008: [u8; 3usize],
    pub address: u32,
    pub grantID: u8,
    pub layer: u8,
    pub reserved0080: [u8; 4usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_dvd_report_key_t {
    pub format: u8,
    pub keyClass: u8,
    pub blockCount: u8,
    pub reserved0024: [u8; 1usize],
    pub address: u32,
    pub grantID: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_dvd_send_key_t {
    pub format: u8,
    pub keyClass: u8,
    pub reserved0016: [u8; 6usize],
    pub grantID: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_dvd_read_disc_info_t {
    pub reserved0000: [u8; 14usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_dvd_read_rzone_info_t {
    pub reserved0000: [u8; 4usize],
    pub address: u32,
    pub addressType: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct dpme {
    pub dpme_signature: UInt16,
    pub dpme_reserved_1: UInt16,
    pub dpme_map_entries: UInt32,
    pub dpme_pblock_start: UInt32,
    pub dpme_pblocks: UInt32,
    pub dpme_name: [::std::os::raw::c_char; 32usize],
    pub dpme_type: [::std::os::raw::c_char; 32usize],
    pub dpme_lblock_start: UInt32,
    pub dpme_lblocks: UInt32,
    pub dpme_flags: UInt32,
    pub dpme_boot_block: UInt32,
    pub dpme_boot_bytes: UInt32,
    pub dpme_load_addr: UInt32,
    pub dpme_load_addr_2: UInt32,
    pub dpme_goto_addr: UInt32,
    pub dpme_goto_addr_2: UInt32,
    pub dpme_checksum: UInt32,
    pub dpme_process_id: [UInt8; 16usize],
    pub dpme_reserved_2: [UInt32; 32usize],
    pub dpme_reserved_3: [UInt32; 62usize],
}
pub type DPME = dpme;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct DDMap {
    pub ddBlock: UInt32,
    pub ddSize: UInt16,
    pub ddType: UInt16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Block0 {
    pub sbSig: UInt16,
    pub sbBlkSize: UInt16,
    pub sbBlkCount: UInt32,
    pub sbDevType: UInt16,
    pub sbDevId: UInt16,
    pub sbDrvrData: UInt32,
    pub sbDrvrCount: UInt16,
    pub sbDrvrMap: [DDMap; 8usize],
    pub sbReserved: [UInt8; 430usize],
}
pub const kBDMediaTypeUnknown: _bindgen_ty_395 = 768;
pub const kBDMediaTypeROM: _bindgen_ty_395 = 770;
pub const kBDMediaTypeRE: _bindgen_ty_395 = 771;
pub const kBDMediaTypeR: _bindgen_ty_395 = 772;
pub const kBDMediaTypeMin: _bindgen_ty_395 = 768;
pub const kBDMediaTypeMax: _bindgen_ty_395 = 1023;
pub type _bindgen_ty_395 = ::std::os::raw::c_uint;
pub type BDMediaType = UInt32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct BDDiscInfo {
    pub dataLength: UInt16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved2: UInt8,
    pub numberOfSessionsLSB: UInt8,
    pub firstTrackNumberInLastSessionLSB: UInt8,
    pub lastTrackNumberInLastSessionLSB: UInt8,
    pub reserved4: [UInt8; 2usize],
    pub numberOfSessionsMSB: UInt8,
    pub firstTrackNumberInLastSessionMSB: UInt8,
    pub lastTrackNumberInLastSessionMSB: UInt8,
    pub reserved6: [UInt8; 22usize],
}
impl BDDiscInfo {
    #[inline]
    pub fn discStatus(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_discStatus(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn stateOfLastSession(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_stateOfLastSession(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn erasable(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_erasable(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dataType(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_dataType(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        discStatus: UInt8,
        stateOfLastSession: UInt8,
        erasable: UInt8,
        dataType: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let discStatus: u8 = unsafe { ::std::mem::transmute(discStatus) };
            discStatus as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let stateOfLastSession: u8 = unsafe { ::std::mem::transmute(stateOfLastSession) };
            stateOfLastSession as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let erasable: u8 = unsafe { ::std::mem::transmute(erasable) };
            erasable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let dataType: u8 = unsafe { ::std::mem::transmute(dataType) };
            dataType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct BDTrackInfo {
    pub dataLength: UInt16,
    pub trackNumberLSB: UInt8,
    pub sessionNumberLSB: UInt8,
    pub reserved: UInt8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub trackStartAddress: UInt32,
    pub nextWritableAddress: UInt32,
    pub freeBlocks: UInt32,
    pub clusterSize: UInt32,
    pub trackSize: UInt32,
    pub lastRecordedAddress: UInt32,
    pub trackNumberMSB: UInt8,
    pub sessionNumberMSB: UInt8,
    pub reserved6: UInt8,
    pub reserved7: UInt8,
}
impl BDTrackInfo {
    #[inline]
    pub fn reserved2(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn damage(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_damage(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn blank(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_blank(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reservedTrack(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reservedTrack(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nextWritableAddressValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nextWritableAddressValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lastRecordedAddressValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastRecordedAddressValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved2: UInt8,
        damage: UInt8,
        reserved3: UInt8,
        reserved4: UInt8,
        blank: UInt8,
        reservedTrack: UInt8,
        nextWritableAddressValid: UInt8,
        lastRecordedAddressValid: UInt8,
        reserved5: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let reserved2: u8 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let damage: u8 = unsafe { ::std::mem::transmute(damage) };
            damage as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let reserved3: u8 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let reserved4: u8 = unsafe { ::std::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let blank: u8 = unsafe { ::std::mem::transmute(blank) };
            blank as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reservedTrack: u8 = unsafe { ::std::mem::transmute(reservedTrack) };
            reservedTrack as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let nextWritableAddressValid: u8 =
                unsafe { ::std::mem::transmute(nextWritableAddressValid) };
            nextWritableAddressValid as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let lastRecordedAddressValid: u8 =
                unsafe { ::std::mem::transmute(lastRecordedAddressValid) };
            lastRecordedAddressValid as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let reserved5: u8 = unsafe { ::std::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct fdisk_part {
    pub bootid: UInt8,
    pub beghead: UInt8,
    pub begsect: UInt8,
    pub begcyl: UInt8,
    pub systid: UInt8,
    pub endhead: UInt8,
    pub endsect: UInt8,
    pub endcyl: UInt8,
    pub relsect: UInt32,
    pub numsect: UInt32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct disk_blk0 {
    pub bootcode: [UInt8; 446usize],
    pub parts: [fdisk_part; 4usize],
    pub signature: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_bd_read_structure_t {
    pub format: u8,
    pub reserved0008: [u8; 3usize],
    pub address: u32,
    pub grantID: u8,
    pub layer: u8,
    pub reserved0080: [u8; 4usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_bd_report_key_t {
    pub format: u8,
    pub keyClass: u8,
    pub blockCount: u8,
    pub reserved0024: [u8; 1usize],
    pub address: u32,
    pub grantID: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_bd_send_key_t {
    pub format: u8,
    pub keyClass: u8,
    pub reserved0016: [u8; 6usize],
    pub grantID: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_bd_read_disc_info_t {
    pub reserved0000: [u8; 14usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_bd_read_track_info_t {
    pub reserved0000: [u8; 4usize],
    pub address: u32,
    pub addressType: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct gpt_hdr {
    pub hdr_sig: [u8; 8usize],
    pub hdr_revision: u32,
    pub hdr_size: u32,
    pub hdr_crc_self: u32,
    pub __reserved: u32,
    pub hdr_lba_self: u64,
    pub hdr_lba_alt: u64,
    pub hdr_lba_start: u64,
    pub hdr_lba_end: u64,
    pub hdr_uuid: uuid_t,
    pub hdr_lba_table: u64,
    pub hdr_entries: u32,
    pub hdr_entsz: u32,
    pub hdr_crc_table: u32,
    pub padding: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct gpt_ent {
    pub ent_type: uuid_t,
    pub ent_uuid: uuid_t,
    pub ent_lba_start: u64,
    pub ent_lba_end: u64,
    pub ent_attr: u64,
    pub ent_name: [u16; 36usize],
}
pub const kIOMediaAttributeEjectableMask: _bindgen_ty_396 = 1;
pub const kIOMediaAttributeRemovableMask: _bindgen_ty_396 = 2;
pub const kIOMediaAttributeReservedMask: _bindgen_ty_396 = 4294967292;
pub type _bindgen_ty_396 = ::std::os::raw::c_uint;
pub type IOMediaAttributeMask = UInt32;
pub const kIOMediaStateOffline: _bindgen_ty_397 = 0;
pub const kIOMediaStateOnline: _bindgen_ty_397 = 1;
pub const kIOMediaStateBusy: _bindgen_ty_397 = 2;
pub type _bindgen_ty_397 = ::std::os::raw::c_uint;
pub type IOMediaState = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDMSF {
    pub minute: UInt8,
    pub second: UInt8,
    pub frame: UInt8,
}
pub type CDMCN = [::std::os::raw::c_char; 14usize];
pub type CDISRC = [::std::os::raw::c_char; 13usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDAudioStatus {
    pub __bindgen_anon_1: CDAudioStatus__bindgen_ty_1,
    pub status: UInt8,
    pub position: CDAudioStatus__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDAudioStatus__bindgen_ty_1 {
    pub __bindgen_anon_1: CDAudioStatus__bindgen_ty_1__bindgen_ty_1,
    pub time: CDMSF,
    pub track: CDAudioStatus__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDAudioStatus__bindgen_ty_1__bindgen_ty_1 {
    pub index: UInt8,
    pub number: UInt8,
    pub time: CDMSF,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDTOCDescriptor {
    pub session: UInt8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tno: UInt8,
    pub point: UInt8,
    pub address: CDMSF,
    pub zero: UInt8,
    pub p: CDMSF,
}
impl CDTOCDescriptor {
    #[inline]
    pub fn control(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_control(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn adr(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_adr(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(control: UInt8, adr: UInt8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let control: u8 = unsafe { ::std::mem::transmute(control) };
            control as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let adr: u8 = unsafe { ::std::mem::transmute(adr) };
            adr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
pub struct CDTOC {
    pub length: UInt16,
    pub sessionFirst: UInt8,
    pub sessionLast: UInt8,
    pub descriptors: __IncompleteArrayField<CDTOCDescriptor>,
}
pub const CDSectorArea_kCDSectorAreaSync: CDSectorArea = 128;
pub const CDSectorArea_kCDSectorAreaHeader: CDSectorArea = 32;
pub const CDSectorArea_kCDSectorAreaSubHeader: CDSectorArea = 64;
pub const CDSectorArea_kCDSectorAreaUser: CDSectorArea = 16;
pub const CDSectorArea_kCDSectorAreaAuxiliary: CDSectorArea = 8;
pub const CDSectorArea_kCDSectorAreaErrorFlags: CDSectorArea = 2;
pub const CDSectorArea_kCDSectorAreaSubChannel: CDSectorArea = 1;
pub const CDSectorArea_kCDSectorAreaSubChannelQ: CDSectorArea = 4;
pub type CDSectorArea = ::std::os::raw::c_uint;
pub const CDSectorType_kCDSectorTypeUnknown: CDSectorType = 0;
pub const CDSectorType_kCDSectorTypeCDDA: CDSectorType = 1;
pub const CDSectorType_kCDSectorTypeMode1: CDSectorType = 2;
pub const CDSectorType_kCDSectorTypeMode2: CDSectorType = 3;
pub const CDSectorType_kCDSectorTypeMode2Form1: CDSectorType = 4;
pub const CDSectorType_kCDSectorTypeMode2Form2: CDSectorType = 5;
pub const CDSectorType_kCDSectorTypeCount: CDSectorType = 6;
pub type CDSectorType = ::std::os::raw::c_uint;
pub const CDSectorSize_kCDSectorSizeCDDA: CDSectorSize = 2352;
pub const CDSectorSize_kCDSectorSizeMode1: CDSectorSize = 2048;
pub const CDSectorSize_kCDSectorSizeMode2: CDSectorSize = 2336;
pub const CDSectorSize_kCDSectorSizeMode2Form1: CDSectorSize = 2048;
pub const CDSectorSize_kCDSectorSizeMode2Form2: CDSectorSize = 2328;
pub const CDSectorSize_kCDSectorSizeWhole: CDSectorSize = 2352;
pub type CDSectorSize = ::std::os::raw::c_uint;
pub const kCDMediaTypeUnknown: _bindgen_ty_398 = 256;
pub const kCDMediaTypeROM: _bindgen_ty_398 = 258;
pub const kCDMediaTypeR: _bindgen_ty_398 = 260;
pub const kCDMediaTypeRW: _bindgen_ty_398 = 261;
pub const kCDMediaTypeMin: _bindgen_ty_398 = 256;
pub const kCDMediaTypeMax: _bindgen_ty_398 = 511;
pub type _bindgen_ty_398 = ::std::os::raw::c_uint;
pub type CDMediaType = UInt32;
pub type CDTOCFormat = UInt8;
pub const kCDTOCFormatTOC: _bindgen_ty_399 = 2;
pub const kCDTOCFormatPMA: _bindgen_ty_399 = 3;
pub const kCDTOCFormatATIP: _bindgen_ty_399 = 4;
pub const kCDTOCFormatTEXT: _bindgen_ty_399 = 5;
pub type _bindgen_ty_399 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDPMADescriptor {
    pub reserved: UInt8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tno: UInt8,
    pub point: UInt8,
    pub address: CDMSF,
    pub zero: UInt8,
    pub p: CDMSF,
}
impl CDPMADescriptor {
    #[inline]
    pub fn control(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_control(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn adr(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_adr(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(control: UInt8, adr: UInt8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let control: u8 = unsafe { ::std::mem::transmute(control) };
            control as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let adr: u8 = unsafe { ::std::mem::transmute(adr) };
            adr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
pub struct CDPMA {
    pub dataLength: UInt16,
    pub reserved: UInt8,
    pub reserved2: UInt8,
    pub descriptors: __IncompleteArrayField<CDPMADescriptor>,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CDATIP {
    pub dataLength: UInt16,
    pub reserved: [UInt8; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub reserved7: UInt8,
    pub startTimeOfLeadIn: CDMSF,
    pub reserved8: UInt8,
    pub lastPossibleStartTimeOfLeadOut: CDMSF,
    pub reserved9: UInt8,
    pub a1: [UInt8; 3usize],
    pub reserved10: UInt8,
    pub a2: [UInt8; 3usize],
    pub reserved11: UInt8,
    pub a3: [UInt8; 3usize],
    pub reserved12: UInt8,
}
impl CDATIP {
    #[inline]
    pub fn referenceSpeed(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_referenceSpeed(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn indicativeTargetWritingPower(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_indicativeTargetWritingPower(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn unrestrictedUse(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_unrestrictedUse(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn a3Valid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_a3Valid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn a2Valid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_a2Valid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn a1Valid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_a1Valid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn discSubType(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_discSubType(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn discType(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_discType(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved6(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved6(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        referenceSpeed: UInt8,
        reserved3: UInt8,
        indicativeTargetWritingPower: UInt8,
        reserved2: UInt8,
        reserved5: UInt8,
        unrestrictedUse: UInt8,
        reserved4: UInt8,
        a3Valid: UInt8,
        a2Valid: UInt8,
        a1Valid: UInt8,
        discSubType: UInt8,
        discType: UInt8,
        reserved6: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let referenceSpeed: u8 = unsafe { ::std::mem::transmute(referenceSpeed) };
            referenceSpeed as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let reserved3: u8 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let indicativeTargetWritingPower: u8 =
                unsafe { ::std::mem::transmute(indicativeTargetWritingPower) };
            indicativeTargetWritingPower as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reserved2: u8 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let reserved5: u8 = unsafe { ::std::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let unrestrictedUse: u8 = unsafe { ::std::mem::transmute(unrestrictedUse) };
            unrestrictedUse as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reserved4: u8 = unsafe { ::std::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let a3Valid: u8 = unsafe { ::std::mem::transmute(a3Valid) };
            a3Valid as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let a2Valid: u8 = unsafe { ::std::mem::transmute(a2Valid) };
            a2Valid as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let a1Valid: u8 = unsafe { ::std::mem::transmute(a1Valid) };
            a1Valid as u64
        });
        __bindgen_bitfield_unit.set(19usize, 3u8, {
            let discSubType: u8 = unsafe { ::std::mem::transmute(discSubType) };
            discSubType as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let discType: u8 = unsafe { ::std::mem::transmute(discType) };
            discType as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let reserved6: u8 = unsafe { ::std::mem::transmute(reserved6) };
            reserved6 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CDTEXTDescriptor {
    pub packType: UInt8,
    pub trackNumber: UInt8,
    pub sequenceNumber: UInt8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub textData: [UInt8; 12usize],
    pub reserved: [UInt8; 2usize],
}
impl CDTEXTDescriptor {
    #[inline]
    pub fn characterPosition(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_characterPosition(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn blockNumber(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_blockNumber(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn doubleByteCharacterCode(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_doubleByteCharacterCode(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        characterPosition: UInt8,
        blockNumber: UInt8,
        doubleByteCharacterCode: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let characterPosition: u8 = unsafe { ::std::mem::transmute(characterPosition) };
            characterPosition as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let blockNumber: u8 = unsafe { ::std::mem::transmute(blockNumber) };
            blockNumber as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let doubleByteCharacterCode: u8 =
                unsafe { ::std::mem::transmute(doubleByteCharacterCode) };
            doubleByteCharacterCode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
pub struct CDTEXT {
    pub dataLength: UInt16,
    pub reserved: UInt8,
    pub reserved2: UInt8,
    pub descriptors: __IncompleteArrayField<CDTEXTDescriptor>,
}
#[repr(C, packed)]
pub struct CDDiscInfo {
    pub dataLength: UInt16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub numberOfFirstTrack: UInt8,
    pub numberOfSessionsLSB: UInt8,
    pub firstTrackNumberInLastSessionLSB: UInt8,
    pub lastTrackNumberInLastSessionLSB: UInt8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub discType: UInt8,
    pub numberOfSessionsMSB: UInt8,
    pub firstTrackNumberInLastSessionMSB: UInt8,
    pub lastTrackNumberInLastSessionMSB: UInt8,
    pub discIdentification: UInt32,
    pub reserved7: UInt8,
    pub lastSessionLeadInStartTime: CDMSF,
    pub reserved8: UInt8,
    pub lastPossibleStartTimeOfLeadOut: CDMSF,
    pub discBarCode: [UInt8; 8usize],
    pub reserved9: UInt8,
    pub numberOfOPCTableEntries: UInt8,
    pub opcTableEntries: __IncompleteArrayField<UInt8>,
}
impl CDDiscInfo {
    #[inline]
    pub fn discStatus(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_discStatus(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn stateOfLastSession(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_stateOfLastSession(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn erasable(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_erasable(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        discStatus: UInt8,
        stateOfLastSession: UInt8,
        erasable: UInt8,
        reserved: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let discStatus: u8 = unsafe { ::std::mem::transmute(discStatus) };
            discStatus as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let stateOfLastSession: u8 = unsafe { ::std::mem::transmute(stateOfLastSession) };
            stateOfLastSession as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let erasable: u8 = unsafe { ::std::mem::transmute(erasable) };
            erasable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn reserved3(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn unrestrictedUse(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_unrestrictedUse(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn discBarCodeValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_discBarCodeValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn discIdentificationValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_discIdentificationValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        reserved3: UInt8,
        unrestrictedUse: UInt8,
        discBarCodeValid: UInt8,
        discIdentificationValid: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let reserved3: u8 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let unrestrictedUse: u8 = unsafe { ::std::mem::transmute(unrestrictedUse) };
            unrestrictedUse as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let discBarCodeValid: u8 = unsafe { ::std::mem::transmute(discBarCodeValid) };
            discBarCodeValid as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let discIdentificationValid: u8 =
                unsafe { ::std::mem::transmute(discIdentificationValid) };
            discIdentificationValid as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type CDTrackInfoAddressType = UInt8;
pub const kCDTrackInfoAddressTypeLBA: _bindgen_ty_400 = 0;
pub const kCDTrackInfoAddressTypeTrackNumber: _bindgen_ty_400 = 1;
pub const kCDTrackInfoAddressTypeSessionNumber: _bindgen_ty_400 = 2;
pub type _bindgen_ty_400 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct CDTrackInfo {
    pub dataLength: UInt16,
    pub trackNumberLSB: UInt8,
    pub sessionNumberLSB: UInt8,
    pub reserved: UInt8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub trackStartAddress: UInt32,
    pub nextWritableAddress: UInt32,
    pub freeBlocks: UInt32,
    pub fixedPacketSize: UInt32,
    pub trackSize: UInt32,
    pub lastRecordedAddress: UInt32,
    pub trackNumberMSB: UInt8,
    pub sessionNumberMSB: UInt8,
    pub reserved6: UInt8,
    pub reserved7: UInt8,
}
impl CDTrackInfo {
    #[inline]
    pub fn trackMode(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_trackMode(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn damage(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_damage(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dataMode(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_dataMode(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn fixedPacket(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_fixedPacket(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn packet(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_packet(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blank(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_blank(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reservedTrack(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reservedTrack(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nextWritableAddressValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nextWritableAddressValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lastRecordedAddressValid(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_lastRecordedAddressValid(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> UInt8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: UInt8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trackMode: UInt8,
        copy: UInt8,
        damage: UInt8,
        reserved3: UInt8,
        dataMode: UInt8,
        fixedPacket: UInt8,
        packet: UInt8,
        blank: UInt8,
        reservedTrack: UInt8,
        nextWritableAddressValid: UInt8,
        lastRecordedAddressValid: UInt8,
        reserved5: UInt8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let trackMode: u8 = unsafe { ::std::mem::transmute(trackMode) };
            trackMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let copy: u8 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let damage: u8 = unsafe { ::std::mem::transmute(damage) };
            damage as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let reserved3: u8 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let dataMode: u8 = unsafe { ::std::mem::transmute(dataMode) };
            dataMode as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let fixedPacket: u8 = unsafe { ::std::mem::transmute(fixedPacket) };
            fixedPacket as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let packet: u8 = unsafe { ::std::mem::transmute(packet) };
            packet as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let blank: u8 = unsafe { ::std::mem::transmute(blank) };
            blank as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let reservedTrack: u8 = unsafe { ::std::mem::transmute(reservedTrack) };
            reservedTrack as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let nextWritableAddressValid: u8 =
                unsafe { ::std::mem::transmute(nextWritableAddressValid) };
            nextWritableAddressValid as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let lastRecordedAddressValid: u8 =
                unsafe { ::std::mem::transmute(lastRecordedAddressValid) };
            lastRecordedAddressValid as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let reserved5: u8 = unsafe { ::std::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_cd_read_t {
    pub offset: u64,
    pub sectorArea: u8,
    pub sectorType: u8,
    pub reserved0080: [u8; 10usize],
    pub bufferLength: u32,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_cd_read_isrc_t {
    pub isrc: CDISRC,
    pub track: u8,
    pub reserved0112: [u8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_cd_read_mcn_t {
    pub mcn: CDMCN,
    pub reserved0112: [u8; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dk_cd_read_toc_t {
    pub __bindgen_anon_1: dk_cd_read_toc_t__bindgen_ty_1,
    pub format: u8,
    pub formatAsTime: u8,
    pub reserved0016: [u8; 5usize],
    pub address: dk_cd_read_toc_t__bindgen_ty_1,
    pub reserved0064: [u8; 6usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dk_cd_read_toc_t__bindgen_ty_1 {
    pub session: u8,
    pub track: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_cd_read_disc_info_t {
    pub reserved0000: [u8; 14usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_cd_read_track_info_t {
    pub reserved0000: [u8; 4usize],
    pub address: u32,
    pub addressType: u8,
    pub reserved0072: [u8; 5usize],
    pub bufferLength: u16,
    pub buffer: *mut ::std::os::raw::c_void,
}
pub const kATAIdentifyConfiguration: _bindgen_ty_401 = 0;
pub const kATAIdentifyLogicalCylinderCount: _bindgen_ty_401 = 1;
pub const kATAIdentifyLogicalHeadCount: _bindgen_ty_401 = 3;
pub const kATAIdentifySectorsPerTrack: _bindgen_ty_401 = 6;
pub const kATAIdentifySerialNumber: _bindgen_ty_401 = 10;
pub const kATAIdentifyFirmwareRevision: _bindgen_ty_401 = 23;
pub const kATAIdentifyModelNumber: _bindgen_ty_401 = 27;
pub const kATAIdentifyMultipleSectorCount: _bindgen_ty_401 = 47;
pub const kATAIdentifyDriveCapabilities: _bindgen_ty_401 = 49;
pub const kATAIdentifyDriveCapabilitiesExtended: _bindgen_ty_401 = 50;
pub const kATAIdentifyPIOTiming: _bindgen_ty_401 = 51;
pub const kATAIdentifyExtendedInfoSupport: _bindgen_ty_401 = 53;
pub const kATAIdentifyCurrentCylinders: _bindgen_ty_401 = 54;
pub const kATAIdentifyCurrentHeads: _bindgen_ty_401 = 55;
pub const kATAIdentifyCurrentSectors: _bindgen_ty_401 = 56;
pub const kATAIdentifyCurrentCapacity: _bindgen_ty_401 = 57;
pub const kATAIdentifyCurrentMultipleSectors: _bindgen_ty_401 = 59;
pub const kATAIdentifyLBACapacity: _bindgen_ty_401 = 60;
pub const kATAIdentifySingleWordDMA: _bindgen_ty_401 = 62;
pub const kATAIdentifyMultiWordDMA: _bindgen_ty_401 = 63;
pub const kATAIdentifyAdvancedPIOModes: _bindgen_ty_401 = 64;
pub const kATAIdentifyMinMultiWordDMATime: _bindgen_ty_401 = 65;
pub const kATAIdentifyRecommendedMultiWordDMATime: _bindgen_ty_401 = 66;
pub const kATAIdentifyMinPIOTime: _bindgen_ty_401 = 67;
pub const kATAIdentifyMinPIOTimeWithIORDY: _bindgen_ty_401 = 68;
pub const kATAIdentifyQueueDepth: _bindgen_ty_401 = 75;
pub const kATAIdentifyMajorVersion: _bindgen_ty_401 = 80;
pub const kATAIdentifyMinorVersion: _bindgen_ty_401 = 81;
pub const kATAIdentifyCommandSetSupported: _bindgen_ty_401 = 82;
pub const kATAIdentifyCommandSetSupported2: _bindgen_ty_401 = 83;
pub const kATAIdentifyCommandExtension1: _bindgen_ty_401 = 84;
pub const kATAIdentifyCommandExtension2: _bindgen_ty_401 = 85;
pub const kATAIdentifyCommandsEnabled: _bindgen_ty_401 = 86;
pub const kATAIdentifyCommandsDefault: _bindgen_ty_401 = 87;
pub const kATAIdentifyUltraDMASupported: _bindgen_ty_401 = 88;
pub const kATAIdentifyPhysicalLogicalSectorSize: _bindgen_ty_401 = 106;
pub const kATAIdentifyWordsPerLogicalSector1: _bindgen_ty_401 = 117;
pub const kATAIdentifyWordsPerLogicalSector2: _bindgen_ty_401 = 118;
pub const kATAIdentifyLogicalSectorAlignment: _bindgen_ty_401 = 209;
pub const kATAIdentifyIntegrity: _bindgen_ty_401 = 255;
pub type _bindgen_ty_401 = ::std::os::raw::c_uint;
pub const kFixedDeviceBit: _bindgen_ty_402 = 6;
pub const kRemoveableMediaBit: _bindgen_ty_402 = 7;
pub const kNonMagneticDriveBit: _bindgen_ty_402 = 15;
pub const kFixedDeviceMask: _bindgen_ty_402 = 64;
pub const kRemoveableMediaMask: _bindgen_ty_402 = 128;
pub const kNonMagneticDriveMask: _bindgen_ty_402 = 32768;
pub const kDMABit: _bindgen_ty_402 = 8;
pub const kLBABit: _bindgen_ty_402 = 9;
pub const kIORDYDisableBit: _bindgen_ty_402 = 10;
pub const kIORDYBit: _bindgen_ty_402 = 11;
pub const kStandbyTimerBit: _bindgen_ty_402 = 13;
pub const kDMASupportedMask: _bindgen_ty_402 = 256;
pub const kLBASupportedMask: _bindgen_ty_402 = 512;
pub const kDMADisableMask: _bindgen_ty_402 = 1024;
pub const kIORDYSupportedMask: _bindgen_ty_402 = 2048;
pub const kStandbySupportedMask: _bindgen_ty_402 = 8192;
pub const kCurFieldsValidBit: _bindgen_ty_402 = 0;
pub const kExtFieldsValidBit: _bindgen_ty_402 = 1;
pub const kCurFieldsValidMask: _bindgen_ty_402 = 1;
pub const kExtFieldsValidMask: _bindgen_ty_402 = 2;
pub const kMode3Bit: _bindgen_ty_402 = 0;
pub const kMode3Mask: _bindgen_ty_402 = 1;
pub const kChecksumValidCookie: _bindgen_ty_402 = 165;
pub type _bindgen_ty_402 = ::std::os::raw::c_uint;
pub const kSizeOfATAModelString: _bindgen_ty_403 = 40;
pub const kSizeOfATARevisionString: _bindgen_ty_403 = 8;
pub type _bindgen_ty_403 = ::std::os::raw::c_uint;
pub const kATATimeout10Seconds: _bindgen_ty_404 = 10000;
pub const kATATimeout30Seconds: _bindgen_ty_404 = 30000;
pub const kATATimeout45Seconds: _bindgen_ty_404 = 45000;
pub const kATATimeout1Minute: _bindgen_ty_404 = 60000;
pub const kATADefaultTimeout: _bindgen_ty_404 = 30000;
pub type _bindgen_ty_404 = ::std::os::raw::c_uint;
pub const kATAZeroRetries: _bindgen_ty_405 = 0;
pub const kATADefaultRetries: _bindgen_ty_405 = 4;
pub type _bindgen_ty_405 = ::std::os::raw::c_uint;
pub const kIOATASectorCount8Bit: _bindgen_ty_406 = 8;
pub const kIOATASectorCount16Bit: _bindgen_ty_406 = 16;
pub type _bindgen_ty_406 = ::std::os::raw::c_uint;
pub const kIOATAMaximumBlockCount8Bit: _bindgen_ty_407 = 256;
pub const kIOATAMaximumBlockCount16Bit: _bindgen_ty_407 = 65536;
pub const kIOATAMaxBlocksPerXfer: _bindgen_ty_407 = 256;
pub type _bindgen_ty_407 = ::std::os::raw::c_uint;
pub const kSecondsInAMinute: _bindgen_ty_408 = 60;
pub const k5Minutes: _bindgen_ty_408 = 300;
pub type _bindgen_ty_408 = ::std::os::raw::c_uint;
pub const kATASupportsSMARTBit: _bindgen_ty_409 = 0;
pub const kATASupportsPowerManagementBit: _bindgen_ty_409 = 3;
pub const kATASupportsWriteCacheBit: _bindgen_ty_409 = 5;
pub type _bindgen_ty_409 = ::std::os::raw::c_uint;
pub const kATASupportsSMARTMask: _bindgen_ty_410 = 1;
pub const kATASupportsPowerManagementMask: _bindgen_ty_410 = 8;
pub const kATASupportsWriteCacheMask: _bindgen_ty_410 = 32;
pub type _bindgen_ty_410 = ::std::os::raw::c_uint;
pub const kATASupportsCompactFlashBit: _bindgen_ty_411 = 2;
pub const kATASupportsAdvancedPowerManagementBit: _bindgen_ty_411 = 3;
pub const kATASupports48BitAddressingBit: _bindgen_ty_411 = 10;
pub const kATASupportsFlushCacheBit: _bindgen_ty_411 = 12;
pub const kATASupportsFlushCacheExtendedBit: _bindgen_ty_411 = 13;
pub type _bindgen_ty_411 = ::std::os::raw::c_uint;
pub const kATASupportsCompactFlashMask: _bindgen_ty_412 = 4;
pub const kATASupportsAdvancedPowerManagementMask: _bindgen_ty_412 = 8;
pub const kATASupports48BitAddressingMask: _bindgen_ty_412 = 1024;
pub const kATASupportsFlushCacheMask: _bindgen_ty_412 = 4096;
pub const kATASupportsFlushCacheExtendedMask: _bindgen_ty_412 = 8192;
pub const kIdentifyWordValidationMask: _bindgen_ty_412 = 49152;
pub const kIdentifyWordValid: _bindgen_ty_412 = 16384;
pub type _bindgen_ty_412 = ::std::os::raw::c_uint;
pub const kATAForceUnitAccessFeatureBit: _bindgen_ty_413 = 6;
pub type _bindgen_ty_413 = ::std::os::raw::c_uint;
pub const kATAForceUnitAccessFeatureMask: _bindgen_ty_414 = 64;
pub type _bindgen_ty_414 = ::std::os::raw::c_uint;
pub const kATAWriteCacheEnabledBit: _bindgen_ty_415 = 5;
pub type _bindgen_ty_415 = ::std::os::raw::c_uint;
pub const kATAWriteCacheEnabledMask: _bindgen_ty_416 = 32;
pub type _bindgen_ty_416 = ::std::os::raw::c_uint;
pub const kATAPhysicalLogicalEnabledBit0: _bindgen_ty_417 = 15;
pub const kATAPhysicalLogicalEnabledBit1: _bindgen_ty_417 = 14;
pub const kATAMultipleLogicalSectorsBit: _bindgen_ty_417 = 13;
pub const kATAValidLogicalSectorSizeBit: _bindgen_ty_417 = 12;
pub type _bindgen_ty_417 = ::std::os::raw::c_uint;
pub const kATAPhysicalLogicalEnabledMask: _bindgen_ty_418 = 49152;
pub const kATAPhysicalLogicalEnabledValue: _bindgen_ty_418 = 16384;
pub const kATAMultipleLogicalSectorsMask: _bindgen_ty_418 = 8192;
pub const kATAValidLogicalSectorSizeMask: _bindgen_ty_418 = 4096;
pub const kATAPhysicalSectorSizeMask: _bindgen_ty_418 = 15;
pub const kATALogicalSectorAlignmentMask: _bindgen_ty_418 = 16383;
pub type _bindgen_ty_418 = ::std::os::raw::c_uint;
pub const kIOATAFeaturePowerManagement: _bindgen_ty_419 = 1;
pub const kIOATAFeatureWriteCache: _bindgen_ty_419 = 2;
pub const kIOATAFeatureAdvancedPowerManagement: _bindgen_ty_419 = 4;
pub const kIOATAFeatureCompactFlash: _bindgen_ty_419 = 8;
pub const kIOATAFeature48BitLBA: _bindgen_ty_419 = 16;
pub const kIOATAFeatureSMART: _bindgen_ty_419 = 32;
pub type _bindgen_ty_419 = ::std::os::raw::c_uint;
pub const kIOATAMaxPerformance: _bindgen_ty_420 = 254;
pub const kIOATADefaultPerformance: _bindgen_ty_420 = 128;
pub const kIOATAMaxPowerSavings: _bindgen_ty_420 = 1;
pub type _bindgen_ty_420 = ::std::os::raw::c_uint;
pub const kATAEnableUltraDMAModeMask: _bindgen_ty_421 = 64;
pub const kATAEnableMultiWordDMAModeMask: _bindgen_ty_421 = 32;
pub const kATAEnablePIOModeMask: _bindgen_ty_421 = 8;
pub type _bindgen_ty_421 = ::std::os::raw::c_uint;
pub type ATAOperationType = u32;
pub const kATAOperationTypeRead: _bindgen_ty_422 = 0;
pub const kATAOperationTypeWrite: _bindgen_ty_422 = 1;
pub const kATAOperationTypeFlushCache: _bindgen_ty_422 = 2;
pub const kATAOperationTypeSMART: _bindgen_ty_422 = 3;
pub const kATAOperationTypeConfiguration: _bindgen_ty_422 = 4;
pub const kATAOperationTypePowerManagement: _bindgen_ty_422 = 5;
pub const kATAOperationTypeSMS: _bindgen_ty_422 = 6;
pub type _bindgen_ty_422 = ::std::os::raw::c_uint;
pub const kATASMARTOffLineCollectionNeverStarted: _bindgen_ty_423 = 0;
pub const kATASMARTOffLineCollectionNoError: _bindgen_ty_423 = 2;
pub const kATASMARTOffLineCollectionSuspendedByHost: _bindgen_ty_423 = 4;
pub const kATASMARTOffLineCollectionAbortedByHost: _bindgen_ty_423 = 5;
pub const kATASMARTOffLineCollectionFatalError: _bindgen_ty_423 = 6;
pub const kATASMARTOffLineCollectionMask: _bindgen_ty_423 = 127;
pub type _bindgen_ty_423 = ::std::os::raw::c_uint;
pub const kATASMARTSelfTestStatusNoError: _bindgen_ty_424 = 0;
pub const kATASMARTSelfTestStatusAbortedByHost: _bindgen_ty_424 = 1;
pub const kATASMARTSelfTestStatusInterruptedByReset: _bindgen_ty_424 = 2;
pub const kATASMARTSelfTestStatusFatalError: _bindgen_ty_424 = 3;
pub const kATASMARTSelfTestStatusPreviousTestUnknownFailure: _bindgen_ty_424 = 4;
pub const kATASMARTSelfTestStatusPreviousTestElectricalFailure: _bindgen_ty_424 = 5;
pub const kATASMARTSelfTestStatusPreviousTestServoFailure: _bindgen_ty_424 = 6;
pub const kATASMARTSelfTestStatusPreviousTestReadFailure: _bindgen_ty_424 = 7;
pub const kATASMARTSelfTestStatusInProgress: _bindgen_ty_424 = 15;
pub type _bindgen_ty_424 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ATASMARTData {
    pub vendorSpecific1: [UInt8; 362usize],
    pub offLineDataCollectionStatus: UInt8,
    pub selfTestExecutionStatus: UInt8,
    pub secondsToCompleteOffLineActivity: [UInt8; 2usize],
    pub vendorSpecific2: UInt8,
    pub offLineDataCollectionCapability: UInt8,
    pub SMARTCapability: [UInt8; 2usize],
    pub errorLoggingCapability: UInt8,
    pub vendorSpecific3: UInt8,
    pub shortTestPollingInterval: UInt8,
    pub extendedTestPollingInterval: UInt8,
    pub reserved: [UInt8; 12usize],
    pub vendorSpecific4: [UInt8; 125usize],
    pub checksum: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ATASMARTDataThresholds {
    pub vendorSpecific1: [UInt8; 362usize],
    pub vendorSpecific2: [UInt8; 149usize],
    pub checksum: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ATASMARTLogEntry {
    pub numberOfSectors: UInt8,
    pub reserved: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ATASMARTLogDirectory {
    pub SMARTLoggingVersion: [UInt8; 2usize],
    pub entries: [ATASMARTLogEntry; 255usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOATASMARTInterface {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub version: UInt16,
    pub revision: UInt16,
    pub SMARTEnableDisableOperations: ::std::option::Option<
        unsafe extern "C" fn(interface: *mut ::std::os::raw::c_void, enable: Boolean) -> IOReturn,
    >,
    pub SMARTEnableDisableAutosave: ::std::option::Option<
        unsafe extern "C" fn(interface: *mut ::std::os::raw::c_void, enable: Boolean) -> IOReturn,
    >,
    pub SMARTReturnStatus: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            exceededCondition: *mut Boolean,
        ) -> IOReturn,
    >,
    pub SMARTExecuteOffLineImmediate: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            extendedTest: Boolean,
        ) -> IOReturn,
    >,
    pub SMARTReadData: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            data: *mut ATASMARTData,
        ) -> IOReturn,
    >,
    pub SMARTValidateReadData: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            data: *const ATASMARTData,
        ) -> IOReturn,
    >,
    pub SMARTReadDataThresholds: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            dataThresholds: *mut ATASMARTDataThresholds,
        ) -> IOReturn,
    >,
    pub SMARTReadLogDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            logData: *mut ATASMARTLogDirectory,
        ) -> IOReturn,
    >,
    pub SMARTReadLogAtAddress: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            logOffset: UInt32,
            buffer: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub SMARTWriteLogAtAddress: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            logOffset: UInt32,
            buffer: *const ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub GetATAIdentifyData: ::std::option::Option<
        unsafe extern "C" fn(
            interface: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
            inSize: UInt32,
            outSize: *mut UInt32,
        ) -> IOReturn,
    >,
}
pub type IOStreamBufferID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOStreamBufferQueueEntry {
    pub bufferID: IOStreamBufferID,
    pub dataOffset: UInt32,
    pub dataLength: UInt32,
    pub controlOffset: UInt32,
    pub controlLength: UInt32,
    pub reserved: [UInt32; 3usize],
}
pub type IOStreamBufferQueueEntry = __IOStreamBufferQueueEntry;
#[repr(C)]
#[derive(Debug)]
pub struct __IOStreamBufferQueue {
    pub entryCount: UInt32,
    pub headIndex: UInt32,
    pub tailIndex: UInt32,
    pub reserved: UInt32,
    pub queue: __IncompleteArrayField<IOStreamBufferQueueEntry>,
}
pub type IOStreamBufferQueue = __IOStreamBufferQueue;
pub const kIOStreamMemoryTypeOutputQueue: _bindgen_ty_425 = 268435456;
pub const kIOStreamMemoryTypeInputQueue: _bindgen_ty_425 = 536870912;
pub const kIOStreamMemoryTypeBufferData: _bindgen_ty_425 = 805306368;
pub const kIOStreamMemoryTypeBufferControl: _bindgen_ty_425 = 1073741824;
pub const kIOStreamBufferIDMask: _bindgen_ty_425 = 268435455;
pub const kIOStreamMemoryTypeMask: _bindgen_ty_425 = 4026531840;
pub type _bindgen_ty_425 = ::std::os::raw::c_uint;
pub const kIOStreamPortTypeOutput: _bindgen_ty_426 = 0;
pub const kIOStreamPortTypeInput: _bindgen_ty_426 = 1;
pub type _bindgen_ty_426 = ::std::os::raw::c_uint;
pub const kIOStreamOptionOpenExclusive: _bindgen_ty_427 = 65536;
pub const kIOStreamOptionOpenShared: _bindgen_ty_427 = 131072;
pub type _bindgen_ty_427 = ::std::os::raw::c_uint;
pub const kIOStreamMethodOpen: _bindgen_ty_428 = 0;
pub const kIOStreamMethodClose: _bindgen_ty_428 = 1;
pub const kIOStreamMethodStart: _bindgen_ty_428 = 2;
pub const kIOStreamMethodStop: _bindgen_ty_428 = 3;
pub const kIOStreamMethodSuspend: _bindgen_ty_428 = 4;
pub const kIOStreamMethodGetMode: _bindgen_ty_428 = 5;
pub const kIOStreamMethodSetMode: _bindgen_ty_428 = 6;
pub const kIOStreamMethodGetBufferCount: _bindgen_ty_428 = 7;
pub type _bindgen_ty_428 = ::std::os::raw::c_uint;
pub const kIOStreamEnqueueInputTrap: _bindgen_ty_429 = 0;
pub const kIOStreamEnqueueInputSyncTrap: _bindgen_ty_429 = 1;
pub type _bindgen_ty_429 = ::std::os::raw::c_uint;
pub const IOStreamMode_kIOStreamModeInput: IOStreamMode = 0;
pub const IOStreamMode_kIOStreamModeOutput: IOStreamMode = 1;
pub const IOStreamMode_kIOStreamModeInputOutput: IOStreamMode = 2;
pub type IOStreamMode = ::std::os::raw::c_uint;
pub type IOStreamRef = *mut *mut IOStreamInterface_v1_t;
pub type IOStreamOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(stream: IOStreamRef, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOStreamInterface_v1_t {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Version: UInt32,
    pub Revision: UInt32,
    pub Open: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, options: IOOptionBits) -> IOReturn,
    >,
    pub Close: ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> IOReturn>,
    pub GetBufferCount:
        ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> IOItemCount>,
    pub GetBufferInfo: ::std::option::Option<
        unsafe extern "C" fn(
            stream: IOStreamRef,
            bufferID: IOStreamBufferID,
            dataBufferAddressOut: *mut *mut ::std::os::raw::c_void,
            dataBufferSizeOut: *mut IOByteCount,
            controlBufferAddressOut: *mut *mut ::std::os::raw::c_void,
            controlBufferSizeOut: *mut IOByteCount,
        ) -> IOReturn,
    >,
    pub GetOutputPort:
        ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> CFMachPortRef>,
    pub GetInputPort:
        ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> CFMachPortRef>,
    pub GetOutputQueue: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef) -> *mut IOStreamBufferQueue,
    >,
    pub GetInputQueue: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef) -> *mut IOStreamBufferQueue,
    >,
    pub SetOutputCallback: ::std::option::Option<
        unsafe extern "C" fn(
            stream: IOStreamRef,
            callback: IOStreamOutputCallback,
            context: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetRunLoopSource:
        ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> CFRunLoopSourceRef>,
    pub AddToRunLoop: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, runLoop: CFRunLoopRef) -> IOReturn,
    >,
    pub RemoveFromRunLoop: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, runLoop: CFRunLoopRef) -> IOReturn,
    >,
    pub DequeueOutputEntry: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, entry: *mut IOStreamBufferQueueEntry) -> IOReturn,
    >,
    pub EnqueueInputEntry: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, entry: *mut IOStreamBufferQueueEntry) -> IOReturn,
    >,
    pub EnqueueInputBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            stream: IOStreamRef,
            bufferID: IOStreamBufferID,
            dataOffset: IOByteCount,
            dataLength: IOByteCount,
            controlOffset: IOByteCount,
            controlLength: IOByteCount,
        ) -> IOReturn,
    >,
    pub SendInputNotification:
        ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef, token: UInt32) -> IOReturn>,
    pub SendInputSyncNotification:
        ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef, token: UInt32) -> IOReturn>,
    pub GetDataBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            stream: IOStreamRef,
            bufferID: IOStreamBufferID,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetDataBufferLength: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, bufferID: IOStreamBufferID) -> IOByteCount,
    >,
    pub GetControlBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            stream: IOStreamRef,
            bufferID: IOStreamBufferID,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetControlBufferLength: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, bufferID: IOStreamBufferID) -> IOByteCount,
    >,
    pub StartStream: ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> IOReturn>,
    pub StopStream: ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> IOReturn>,
    pub SuspendStream: ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> IOReturn>,
    pub GetMode: ::std::option::Option<unsafe extern "C" fn(stream: IOStreamRef) -> IOStreamMode>,
    pub SetMode: ::std::option::Option<
        unsafe extern "C" fn(stream: IOStreamRef, mode: IOStreamMode) -> IOReturn,
    >,
}
pub type IOStreamInterface = IOStreamInterface_v1_t;
pub const kIOUSBAppleVendorID: _bindgen_ty_430 = 1452;
pub type _bindgen_ty_430 = ::std::os::raw::c_uint;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDevice: tIOUSBDescriptorType = 1;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeConfiguration: tIOUSBDescriptorType = 2;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeString: tIOUSBDescriptorType = 3;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeInterface: tIOUSBDescriptorType = 4;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeEndpoint: tIOUSBDescriptorType = 5;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDeviceQualifier: tIOUSBDescriptorType = 6;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeOtherSpeedConfiguration: tIOUSBDescriptorType =
    7;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeInterfacePower: tIOUSBDescriptorType = 8;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeOTG: tIOUSBDescriptorType = 9;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDebug: tIOUSBDescriptorType = 10;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeInterfaceAssociation: tIOUSBDescriptorType = 11;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeBOS: tIOUSBDescriptorType = 15;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeDeviceCapability: tIOUSBDescriptorType = 16;
pub const tIOUSBDescriptorType_kIOUSBDecriptorTypeHID: tIOUSBDescriptorType = 33;
pub const tIOUSBDescriptorType_kIOUSBDecriptorTypeReport: tIOUSBDescriptorType = 34;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypePhysical: tIOUSBDescriptorType = 35;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeHub: tIOUSBDescriptorType = 41;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeSuperSpeedHub: tIOUSBDescriptorType = 42;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeSuperSpeedUSBEndpointCompanion:
    tIOUSBDescriptorType = 48;
pub const tIOUSBDescriptorType_kIOUSBDescriptorTypeSuperSpeedPlusIsochronousEndpointCompanion:
    tIOUSBDescriptorType = 49;
pub type tIOUSBDescriptorType = ::std::os::raw::c_uint;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorHeaderSize: tIOUSBDescriptorSize = 2;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeDevice: tIOUSBDescriptorSize = 18;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeConfiguration: tIOUSBDescriptorSize = 9;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeInterface: tIOUSBDescriptorSize = 9;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeEndpoint: tIOUSBDescriptorSize = 7;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeStringMinimum: tIOUSBDescriptorSize = 2;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeStringMaximum: tIOUSBDescriptorSize = 255;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeDeviceQualifier: tIOUSBDescriptorSize = 10;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeInterfaceAssociation: tIOUSBDescriptorSize = 8;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeBOS: tIOUSBDescriptorSize = 5;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeDeviceCapability: tIOUSBDescriptorSize = 3;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeUSB20ExtensionCapability: tIOUSBDescriptorSize =
    7;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedUSBDeviceCapability:
    tIOUSBDescriptorSize = 10;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeContainerIDCapability: tIOUSBDescriptorSize = 20;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeHubMinimum: tIOUSBDescriptorSize = 9;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeHubMaximum: tIOUSBDescriptorSize = 21;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedHub: tIOUSBDescriptorSize = 12;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedUSBEndpointCompanion:
    tIOUSBDescriptorSize = 6;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeSuperSpeedPlusIsochronousEndpointCompanion:
    tIOUSBDescriptorSize = 8;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeBillboardDeviceMinimum: tIOUSBDescriptorSize =
    44;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizeBillboardDeviceMaximum: tIOUSBDescriptorSize =
    256;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizePlatformECIDCapability: tIOUSBDescriptorSize =
    28;
pub const tIOUSBDescriptorSize_kIOUSBDescriptorSizePlatformCapability: tIOUSBDescriptorSize = 20;
pub type tIOUSBDescriptorSize = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDescriptorHeader {
    pub bLength: u8,
    pub bDescriptorType: u8,
}
pub type IOUSBDescriptor = IOUSBDescriptorHeader;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bcdUSB: u16,
    pub bDeviceClass: u8,
    pub bDeviceSubClass: u8,
    pub bDeviceProtocol: u8,
    pub bMaxPacketSize0: u8,
    pub idVendor: u16,
    pub idProduct: u16,
    pub bcdDevice: u16,
    pub iManufacturer: u8,
    pub iProduct: u8,
    pub iSerialNumber: u8,
    pub bNumConfigurations: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceQualifierDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bcdUSB: u16,
    pub bDeviceClass: u8,
    pub bDeviceSubClass: u8,
    pub bDeviceProtocol: u8,
    pub bMaxPacketSize0: u8,
    pub bNumConfigurations: u8,
    pub bReserved: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBConfigurationDescHeader {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wTotalLength: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBConfigurationDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wTotalLength: u16,
    pub bNumInterfaces: u8,
    pub bConfigurationValue: u8,
    pub iConfiguration: u8,
    pub bmAttributes: u8,
    pub MaxPower: u8,
}
pub const kIOUSBConfigurationDescriptorAttributeRemoteWakeCapable: _bindgen_ty_431 = 32;
pub const kIOUSBConfigurationDescriptorAttributeSelfPowered: _bindgen_ty_431 = 64;
pub type _bindgen_ty_431 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bInterfaceNumber: u8,
    pub bAlternateSetting: u8,
    pub bNumEndpoints: u8,
    pub bInterfaceClass: u8,
    pub bInterfaceSubClass: u8,
    pub bInterfaceProtocol: u8,
    pub iInterface: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBEndpointDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bEndpointAddress: u8,
    pub bmAttributes: u8,
    pub wMaxPacketSize: u16,
    pub bInterval: u8,
}
pub const kIOUSBEndpointDescriptorNumber: _bindgen_ty_432 = 15;
pub const kIOUSBEndpointDescriptorNumberPhase: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorEndpointAddressReserved: _bindgen_ty_432 = 112;
pub const kIOUSBEndpointDescriptorDirection: _bindgen_ty_432 = 128;
pub const kIOUSBEndpointDescriptorDirectionPhase: _bindgen_ty_432 = 7;
pub const kIOUSBEndpointDescriptorDirectionOut: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorDirectionIn: _bindgen_ty_432 = 128;
pub const kIOUSBEndpointDescriptorTransferType: _bindgen_ty_432 = 3;
pub const kIOUSBEndpointDescriptorTransferTypePhase: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorTransferTypeControl: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorTransferTypeIsochronous: _bindgen_ty_432 = 1;
pub const kIOUSBEndpointDescriptorTransferTypeBulk: _bindgen_ty_432 = 2;
pub const kIOUSBEndpointDescriptorTransferTypeInterrupt: _bindgen_ty_432 = 3;
pub const kIOUSBEndpointDescriptorSynchronizationType: _bindgen_ty_432 = 12;
pub const kIOUSBEndpointDescriptorSynchronizationTypePhase: _bindgen_ty_432 = 2;
pub const kIOUSBEndpointDescriptorSynchronizationTypeNone: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorSynchronizationTypeAsynchronous: _bindgen_ty_432 = 4;
pub const kIOUSBEndpointDescriptorSynchronizationTypeAdaptive: _bindgen_ty_432 = 8;
pub const kIOUSBEndpointDescriptorSynchronizationTypeSynchronous: _bindgen_ty_432 = 12;
pub const kIOUSBEndpointDescriptorUsageType: _bindgen_ty_432 = 48;
pub const kIOUSBEndpointDescriptorUsageTypePhase: _bindgen_ty_432 = 4;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptPeriodic: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptNotification: _bindgen_ty_432 = 16;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptReserved1: _bindgen_ty_432 = 32;
pub const kIOUSBEndpointDescriptorUsageTypeInterruptReserved2: _bindgen_ty_432 = 48;
pub const kIOUSBEndpointDescriptorUsageTypeIsocData: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorUsageTypeIsocFeedback: _bindgen_ty_432 = 16;
pub const kIOUSBEndpointDescriptorUsageTypeIsocImplicit: _bindgen_ty_432 = 32;
pub const kIOUSBEndpointDescriptorUsageTypeIsocReserved: _bindgen_ty_432 = 48;
pub const kIOUSBEndpointDescriptorPacketSize: _bindgen_ty_432 = 2047;
pub const kIOUSBEndpointDescriptorPacketSizePhase: _bindgen_ty_432 = 0;
pub const kIOUSBEndpointDescriptorPacketSizeMult: _bindgen_ty_432 = 6144;
pub const kIOUSBEndpointDescriptorPacketSizeMultPhase: _bindgen_ty_432 = 11;
pub const kIOUSBEndpointDescriptorReserved: _bindgen_ty_432 = 57344;
pub const kIOUSBEndpointDescriptorReservedPhase: _bindgen_ty_432 = 13;
pub type _bindgen_ty_432 = ::std::os::raw::c_uint;
pub const tIOUSBEndpointDirection_kIOUSBEndpointDirectionOut: tIOUSBEndpointDirection = 0;
pub const tIOUSBEndpointDirection_kIOUSBEndpointDirectionIn: tIOUSBEndpointDirection = 1;
pub const tIOUSBEndpointDirection_kIOUSBEndpointDirectionUnknown: tIOUSBEndpointDirection = 2;
pub type tIOUSBEndpointDirection = ::std::os::raw::c_uint;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeControl: tIOUSBEndpointType = 0;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeIsochronous: tIOUSBEndpointType = 1;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeBulk: tIOUSBEndpointType = 2;
pub const tIOUSBEndpointType_kIOUSBEndpointTypeInterrupt: tIOUSBEndpointType = 3;
pub type tIOUSBEndpointType = ::std::os::raw::c_uint;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeNone:
    tIOUSBEndpointSynchronizationType = 0;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeAsynchronous:
    tIOUSBEndpointSynchronizationType = 1;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeAdaptive:
    tIOUSBEndpointSynchronizationType = 2;
pub const tIOUSBEndpointSynchronizationType_kIOUSBEndpointSynchronizationTypeSynchronous:
    tIOUSBEndpointSynchronizationType = 3;
pub type tIOUSBEndpointSynchronizationType = ::std::os::raw::c_uint;
pub const tIOUSBEndpointUsageType_kIOUSBEndpointUsageTypeIsocData: tIOUSBEndpointUsageType = 0;
pub const tIOUSBEndpointUsageType_kIOUSBEndpointUsageTypeIsocFeedback: tIOUSBEndpointUsageType = 1;
pub const tIOUSBEndpointUsageType_kIOUSBEndpointUsageTypeIsocImplicit: tIOUSBEndpointUsageType = 2;
pub type tIOUSBEndpointUsageType = ::std::os::raw::c_uint;
pub const tIOUSBLanguageID_kIOUSBLanguageIDEnglishUS: tIOUSBLanguageID = 1033;
pub type tIOUSBLanguageID = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBStringDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bString: [u8; 1usize],
}
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeWireless:
    tIOUSBDeviceCapabilityType = 1;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeUSB20Extension:
    tIOUSBDeviceCapabilityType = 2;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeSuperSpeed:
    tIOUSBDeviceCapabilityType = 3;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeContainerID:
    tIOUSBDeviceCapabilityType = 4;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePlatform:
    tIOUSBDeviceCapabilityType = 5;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePowerDelivery:
    tIOUSBDeviceCapabilityType = 6;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeBatteryInfo:
    tIOUSBDeviceCapabilityType = 7;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePdConsumerPort:
    tIOUSBDeviceCapabilityType = 8;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePdProviderPort:
    tIOUSBDeviceCapabilityType = 9;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeSuperSpeedPlus:
    tIOUSBDeviceCapabilityType = 10;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypePrecisionMeasurement:
    tIOUSBDeviceCapabilityType = 11;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeWirelessExt:
    tIOUSBDeviceCapabilityType = 12;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeBillboard:
    tIOUSBDeviceCapabilityType = 13;
pub const tIOUSBDeviceCapabilityType_kIOUSBDeviceCapabilityTypeBillboardAltMode:
    tIOUSBDeviceCapabilityType = 15;
pub type tIOUSBDeviceCapabilityType = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBBOSDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wTotalLength: u16,
    pub bNumDeviceCaps: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilityDescriptorHeader {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilityUSB2Extension {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bmAttributes: u32,
}
pub const kIOUSBUSB20ExtensionCapabilityLPM: _bindgen_ty_433 = 2;
pub const kIOUSBUSB20ExtensionCapabilityBESLSupport: _bindgen_ty_433 = 4;
pub const kIOUSBUSB20ExtensionCapabilityBESLValid: _bindgen_ty_433 = 8;
pub const kIOUSBUSB20ExtensionCapabilityBESLDValid: _bindgen_ty_433 = 16;
pub const kIOUSBUSB20ExtensionCapabilityBESL: _bindgen_ty_433 = 3840;
pub const kIOUSBUSB20ExtensionCapabilityBESLPhase: _bindgen_ty_433 = 8;
pub const kIOUSBUSB20ExtensionCapabilityBESLD: _bindgen_ty_433 = 61440;
pub const kIOUSBUSB20ExtensionCapabilityBESLDPhase: _bindgen_ty_433 = 12;
pub type _bindgen_ty_433 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilitySuperSpeedUSB {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bmAttributes: u8,
    pub wSpeedsSupported: u16,
    pub bFunctionalitySupport: u8,
    pub bU1DevExitLat: u8,
    pub wU2DevExitLat: u16,
}
pub const kIOUSBSuperSpeedDeviceCapabilityLTM: _bindgen_ty_434 = 2;
pub const kIOUSBSuperSpeedDeviceCapabilityLowSpeed: _bindgen_ty_434 = 1;
pub const kIOUSBSuperSpeedDeviceCapabilityFullSpeed: _bindgen_ty_434 = 2;
pub const kIOUSBSuperSpeedDeviceCapabilityHighSpeed: _bindgen_ty_434 = 4;
pub const kIOUSBSuperSpeedDeviceCapability5Gb: _bindgen_ty_434 = 8;
pub const kIOUSBSuperSpeedDeviceCapabilitySupportLowSpeed: _bindgen_ty_434 = 0;
pub const kIOUSBSuperSpeedDeviceCapabilitySupportFullSpeed: _bindgen_ty_434 = 1;
pub const kIOUSBSuperSpeedDeviceCapabilitySupportHighSpeed: _bindgen_ty_434 = 2;
pub const kIOUSBSuperSpeedDeviceCapabilitySupport5Gb: _bindgen_ty_434 = 3;
pub const kIOUSBSuperSpeedDeviceCapabilityU1DevExitLatMax: _bindgen_ty_434 = 10;
pub const kIOUSBSuperSpeedDeviceCapabilityU2DevExitLatMax: _bindgen_ty_434 = 2047;
pub type _bindgen_ty_434 = ::std::os::raw::c_uint;
#[repr(C, packed)]
pub struct IOUSBDeviceCapabilitySuperSpeedPlusUSB {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bReserved: u8,
    pub bmAttributes: u32,
    pub wFunctionalitySupport: u16,
    pub wReserved: u16,
    pub bmSublinkSpeedAttr: __IncompleteArrayField<u32>,
}
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedAttrCount: _bindgen_ty_435 = 31;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedAttrCountPhase: _bindgen_ty_435 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedIdCount: _bindgen_ty_435 = 480;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedIdCountPhase: _bindgen_ty_435 = 5;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkMinSpeedId: _bindgen_ty_435 = 15;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkMinSpeedIdPhase: _bindgen_ty_435 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityReserved: _bindgen_ty_435 = 240;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityReservedPhase: _bindgen_ty_435 = 4;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinRxLaneCount: _bindgen_ty_435 = 3840;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinRxLaneCountPhase: _bindgen_ty_435 = 8;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinTxLaneCount: _bindgen_ty_435 = 61440;
pub const kIOUSBSuperSpeedPlusDeviceCapabilityMinTxLaneCountPhase: _bindgen_ty_435 = 12;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedId: _bindgen_ty_435 = 15;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedIdPhase: _bindgen_ty_435 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSE: _bindgen_ty_435 = 48;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEPhase: _bindgen_ty_435 = 4;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEBits: _bindgen_ty_435 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEKbits: _bindgen_ty_435 = 16;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEMbits: _bindgen_ty_435 = 32;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkLSEGbits: _bindgen_ty_435 = 48;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkType: _bindgen_ty_435 = 192;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkTypePhase: _bindgen_ty_435 = 6;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSymmetry: _bindgen_ty_435 = 64;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSymmetryPhase: _bindgen_ty_435 = 6;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSymmetric: _bindgen_ty_435 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkAsymmetric: _bindgen_ty_435 = 64;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirection: _bindgen_ty_435 = 128;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirectionPhase: _bindgen_ty_435 = 7;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirectionRx: _bindgen_ty_435 = 0;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkDirectionTx: _bindgen_ty_435 = 128;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkReserved: _bindgen_ty_435 = 16128;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkReservedPhase: _bindgen_ty_435 = 8;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkProtocol: _bindgen_ty_435 = 49152;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkProtocolPhase: _bindgen_ty_435 = 14;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedMantissa: _bindgen_ty_435 = 4294901760;
pub const kIOUSBSuperSpeedPlusDeviceCapabilitySublinkSpeedMantissaPhase: _bindgen_ty_435 = 16;
pub type _bindgen_ty_435 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilityContainerID {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bReservedID: u8,
    pub containerID: [u8; 16usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBPlatformCapabilityDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bReserved: u8,
    pub PlatformCapabilityUUID: uuid_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilityBillboardAltConfigCompatibility {
    pub wSVID: u16,
    pub dwAlternateMode: u32,
    pub iAlternateModeString: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilityBillboardAltConfig {
    pub wSVID: u16,
    pub bAltenateMode: u8,
    pub iAlternateModeString: u8,
}
#[repr(C, packed)]
pub struct IOUSBDeviceCapabilityBillboard {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub iAdditionalInfoURL: u8,
    pub bNumberOfAlternateModes: u8,
    pub bPreferredAlternateMode: u8,
    pub vCONNPower: u16,
    pub bmConfigured: [u8; 32usize],
    pub bcdVersion: u16,
    pub bAdditionalFailureInfo: u8,
    pub bReserved: u8,
    pub pAltConfigurations: __IncompleteArrayField<IOUSBDeviceCapabilityBillboardAltConfig>,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceCapabilityBillboardAltMode {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bDevCapabilityType: u8,
    pub bIndex: u8,
    pub dwAlternateModeVdo: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceAssociationDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bFirstInterface: u8,
    pub bInterfaceCount: u8,
    pub bFunctionClass: u8,
    pub bFunctionSubClass: u8,
    pub bFunctionProtocol: u8,
    pub iFunction: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBSuperSpeedEndpointCompanionDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bMaxBurst: u8,
    pub bmAttributes: u8,
    pub wBytesPerInterval: u16,
}
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorMaxBurst: _bindgen_ty_436 = 31;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorMaxBurstPhase: _bindgen_ty_436 = 0;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkMaxStreams: _bindgen_ty_436 = 31;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkMaxStreamsPhase: _bindgen_ty_436 = 0;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkReserved: _bindgen_ty_436 = 224;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorBulkReservedPhase: _bindgen_ty_436 = 5;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocMult: _bindgen_ty_436 = 3;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocMultPhase: _bindgen_ty_436 = 0;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocReserved: _bindgen_ty_436 = 124;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorIsocReservedPhase: _bindgen_ty_436 = 2;
pub const kIOUSBSuperSpeedEndpointCompanionDescriptorSSPIsocCompanion: _bindgen_ty_436 = 128;
pub type _bindgen_ty_436 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub wReserved: u16,
    pub dwBytesPerInterval: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSB20HubDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bNumberPorts: u8,
    pub wHubCharacteristics: u16,
    pub bPowerOnToPowerGood: u8,
    pub bHubControllerCurrent: u8,
    pub deviceRemovable: [u8; 2usize],
    pub reserved: [u8; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBSuperSpeedHubDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bNumberPorts: u8,
    pub wHubCharacteristics: u16,
    pub bPowerOnToPowerGood: u8,
    pub bHubControllerCurrent: u8,
    pub bHubDecodeLatency: u8,
    pub wHubDelay: u16,
    pub deviceRemovable: u16,
}
pub const kIOUSBSuperSpeedHubCharacteristicsPowerSwitchingMask: _bindgen_ty_437 = 3;
pub const kIOUSBSuperSpeedHubCharacteristicsPowerSwitchingGanged: _bindgen_ty_437 = 0;
pub const kIOUSBSuperSpeedHubCharacteristicsPowerSwitchingIndividual: _bindgen_ty_437 = 1;
pub const kIOUSBSuperSpeedHubCharacteristicsCompoundDevice: _bindgen_ty_437 = 4;
pub const kIOUSBSuperSpeedHubCharacteristicsOverCurrentMask: _bindgen_ty_437 = 24;
pub const kIOUSBSuperSpeedHubCharacteristicsOverCurrentGlobal: _bindgen_ty_437 = 0;
pub const kIOUSBSuperSpeedHubCharacteristicsOverCurrentIndividual: _bindgen_ty_437 = 8;
pub const kIOUSBSuperSpeedHubCharacteristicsReserved: _bindgen_ty_437 = 65504;
pub const kIOUSBSuperSpeedHubDecodeLatencyMax: _bindgen_ty_437 = 10;
pub const kIOUSBSuperSpeedHubDelayMax: _bindgen_ty_437 = 400;
pub type _bindgen_ty_437 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct UASPipeDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bPipeID: u8,
    pub bReserved: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBHIDDescriptor {
    pub descLen: u8,
    pub descType: u8,
    pub descVersNum: u16,
    pub hidCountryCode: u8,
    pub hidNumDescriptors: u8,
    pub hidDescriptorType: u8,
    pub hidDescriptorLengthLo: u8,
    pub hidDescriptorLengthHi: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBHIDReportDesc {
    pub hidDescriptorType: u8,
    pub hidDescriptorLengthLo: u8,
    pub hidDescriptorLengthHi: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDFUDescriptor {
    pub bLength: u8,
    pub bDescriptorType: u8,
    pub bmAttributes: u8,
    pub wDetachTimeout: u16,
    pub wTransferSize: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceRequest {
    pub bmRequestType: u8,
    pub bRequest: u8,
    pub wValue: u16,
    pub wIndex: u16,
    pub wLength: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceRequestSetSELData {
    pub u1Sel: u8,
    pub u1Pel: u8,
    pub u2Sel: u16,
    pub u2Pel: u16,
}
pub const tIOUSBDeviceRequestDirectionValue_kIOUSBDeviceRequestDirectionValueOut:
    tIOUSBDeviceRequestDirectionValue = 0;
pub const tIOUSBDeviceRequestDirectionValue_kIOUSBDeviceRequestDirectionValueIn:
    tIOUSBDeviceRequestDirectionValue = 1;
pub type tIOUSBDeviceRequestDirectionValue = ::std::os::raw::c_uint;
pub const tIOUSBDeviceRequestTypeValue_kIOUSBDeviceRequestTypeValueStandard:
    tIOUSBDeviceRequestTypeValue = 0;
pub const tIOUSBDeviceRequestTypeValue_kIOUSBDeviceRequestTypeValueClass:
    tIOUSBDeviceRequestTypeValue = 1;
pub const tIOUSBDeviceRequestTypeValue_kIOUSBDeviceRequestTypeValueVendor:
    tIOUSBDeviceRequestTypeValue = 2;
pub type tIOUSBDeviceRequestTypeValue = ::std::os::raw::c_uint;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueDevice:
    tIOUSBDeviceRequestRecipientValue = 0;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueInterface:
    tIOUSBDeviceRequestRecipientValue = 1;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueEndpoint:
    tIOUSBDeviceRequestRecipientValue = 2;
pub const tIOUSBDeviceRequestRecipientValue_kIOUSBDeviceRequestRecipientValueOther:
    tIOUSBDeviceRequestRecipientValue = 3;
pub type tIOUSBDeviceRequestRecipientValue = ::std::os::raw::c_uint;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestSize: tIOUSBDeviceRequest = 8;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionMask: tIOUSBDeviceRequest = 128;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionPhase: tIOUSBDeviceRequest = 7;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionOut: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestDirectionIn: tIOUSBDeviceRequest = 128;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeMask: tIOUSBDeviceRequest = 96;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypePhase: tIOUSBDeviceRequest = 5;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeStandard: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeClass: tIOUSBDeviceRequest = 32;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestTypeVendor: tIOUSBDeviceRequest = 64;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientMask: tIOUSBDeviceRequest = 31;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientPhase: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientDevice: tIOUSBDeviceRequest = 0;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientInterface: tIOUSBDeviceRequest = 1;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientEndpoint: tIOUSBDeviceRequest = 2;
pub const tIOUSBDeviceRequest_kIOUSBDeviceRequestRecipientOther: tIOUSBDeviceRequest = 3;
pub type tIOUSBDeviceRequest = ::std::os::raw::c_uint;
pub const kIOUSBDeviceRequestGetStatus: _bindgen_ty_438 = 0;
pub const kIOUSBDeviceRequestClearFeature: _bindgen_ty_438 = 1;
pub const kIOUSBDeviceRequestGetState: _bindgen_ty_438 = 2;
pub const kIOUSBDeviceRequestSetFeature: _bindgen_ty_438 = 3;
pub const kIOUSBDeviceRequestSetAddress: _bindgen_ty_438 = 5;
pub const kIOUSBDeviceRequestGetDescriptor: _bindgen_ty_438 = 6;
pub const kIOUSBDeviceRequestSetDescriptor: _bindgen_ty_438 = 7;
pub const kIOUSBDeviceRequestGetConfiguration: _bindgen_ty_438 = 8;
pub const kIOUSBDeviceRequestSetConfiguration: _bindgen_ty_438 = 9;
pub const kIOUSBDeviceRequestGetInterface: _bindgen_ty_438 = 10;
pub const kIOUSBDeviceRequestSetInterface: _bindgen_ty_438 = 11;
pub const kIOUSBDeviceRequestSynchFrame: _bindgen_ty_438 = 12;
pub const kIOUSBDeviceRequestSetSel: _bindgen_ty_438 = 48;
pub const kIOUSBDeviceRequestSetIsochronousDelay: _bindgen_ty_438 = 49;
pub type _bindgen_ty_438 = ::std::os::raw::c_uint;
pub const kIOUSBDeviceStatusSelfPowered: _bindgen_ty_439 = 1;
pub const kIOUSBDeviceStatusRemoteWakeEnable: _bindgen_ty_439 = 2;
pub const kIOUSBDeviceStatusU1Enable: _bindgen_ty_439 = 4;
pub const kIOUSBDeviceStatusU2Enable: _bindgen_ty_439 = 8;
pub const kIOUSBDeviceStatusLTMEnable: _bindgen_ty_439 = 16;
pub const kIOUSBInterfaceStatusRemoteWakeCapable: _bindgen_ty_439 = 1;
pub const kIOUSBInterfaceStatusRemoteWakeEnable: _bindgen_ty_439 = 2;
pub const IOUSBEndpointStatusHalt: _bindgen_ty_439 = 1;
pub type _bindgen_ty_439 = ::std::os::raw::c_uint;
pub const kIOUSBDeviceFeatureSelectorRemoteWakeup: _bindgen_ty_440 = 1;
pub const kIOUSBDeviceFeatureSelectorTestMode: _bindgen_ty_440 = 2;
pub const kIOUSBDeviceFeatureSelectorU1Enable: _bindgen_ty_440 = 48;
pub const kIOUSBDeviceFeatureSelectorU2Enable: _bindgen_ty_440 = 49;
pub const kIOUSBDeviceFeatureSelectorLTMEnable: _bindgen_ty_440 = 50;
pub const kIOUSBInterfaceFeatureSelectorSuspend: _bindgen_ty_440 = 0;
pub const IOUSBEndpointFeatureSelectorStall: _bindgen_ty_440 = 0;
pub type _bindgen_ty_440 = ::std::os::raw::c_uint;
pub const kIOUSBInterfaceSuspendLowPower: _bindgen_ty_441 = 1;
pub const kIOUSBInterfaceSuspendRemoteWakeEnable: _bindgen_ty_441 = 2;
pub type _bindgen_ty_441 = ::std::os::raw::c_uint;
pub const kIOUSBHubPort2PortExitLatencyNs: _bindgen_ty_442 = 1000;
pub const kIOUSBHubDelayNs: _bindgen_ty_442 = 400;
pub type _bindgen_ty_442 = ::std::os::raw::c_uint;
pub const kIOUSBPingResponseTimeNs: _bindgen_ty_443 = 400;
pub type _bindgen_ty_443 = ::std::os::raw::c_uint;
pub const tIOUSBBusVoltage_kIOUSBBusVoltageDefault: tIOUSBBusVoltage = 5;
pub type tIOUSBBusVoltage = ::std::os::raw::c_uint;
pub const tIOUSB20BusCurrent_kIOUSB20BusCurrentMinimum: tIOUSB20BusCurrent = 100;
pub const tIOUSB20BusCurrent_kIOUSB20BusCurrentDefault: tIOUSB20BusCurrent = 500;
pub const tIOUSB20BusCurrent_kIOUSB20BusCurrentMaxPowerUnits: tIOUSB20BusCurrent = 2;
pub type tIOUSB20BusCurrent = ::std::os::raw::c_uint;
pub const tIOUSB30BusCurrent_kIOUSB30BusCurrentMinimum: tIOUSB30BusCurrent = 150;
pub const tIOUSB30BusCurrent_kIOUSB30BusCurrentDefault: tIOUSB30BusCurrent = 900;
pub const tIOUSB30BusCurrent_kIOUSB30BusCurrentMaxPowerUnits: tIOUSB30BusCurrent = 8;
pub type tIOUSB30BusCurrent = ::std::os::raw::c_uint;
pub const tIOUSBTopology_kIOUSBTopologyHost: tIOUSBTopology = 1;
pub const tIOUSBTopology_kIOUSBTopologyRootPort: tIOUSBTopology = 2;
pub const tIOUSBTopology_kIOUSBTopology1Hub: tIOUSBTopology = 3;
pub const tIOUSBTopology_kIOUSBTopology2Hub: tIOUSBTopology = 4;
pub const tIOUSBTopology_kIOUSBTopology3Hub: tIOUSBTopology = 5;
pub const tIOUSBTopology_kIOUSBTopology4Hub: tIOUSBTopology = 6;
pub const tIOUSBTopology_kIOUSBTopology5Hub: tIOUSBTopology = 7;
pub const tIOUSBTopology_kIOUSBTopologyTierLimit: tIOUSBTopology = 7;
pub type tIOUSBTopology = ::std::os::raw::c_uint;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetMinimumTimeout: tIOUSB30ResetTimeout = 80;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetTypicalTimeout: tIOUSB30ResetTimeout = 100;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetMaximumTimeout: tIOUSB30ResetTimeout = 120;
pub const tIOUSB30ResetTimeout_kIOUSB30ResetMaximumWithMarginTimeout: tIOUSB30ResetTimeout = 150;
pub type tIOUSB30ResetTimeout = ::std::os::raw::c_uint;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateSSInactiveQuietTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRxDetectQuietTimeout: tIOUSB30LinkStateTimeout =
    12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingLFPSTimeout: tIOUSB30LinkStateTimeout =
    360;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingActiveTimeout: tIOUSB30LinkStateTimeout =
    12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingConfigurationTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingIdleTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU0RecoveryTimeout: tIOUSB30LinkStateTimeout = 1;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU0LTimeout: tIOUSB30LinkStateTimeout = 0;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU1NoLFPSResponseTimeout:
    tIOUSB30LinkStateTimeout = 2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU1PingTimeout: tIOUSB30LinkStateTimeout = 300;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU2NoLFPSResponseTimeout:
    tIOUSB30LinkStateTimeout = 2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinKStateU2RxDetectDelay: tIOUSB30LinkStateTimeout = 100;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU3NoLFPSResponseTimeout:
    tIOUSB30LinkStateTimeout = 10;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU3WakeupRetryDelay: tIOUSB30LinkStateTimeout =
    100;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateU3RxDetectDelay: tIOUSB30LinkStateTimeout = 100;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryActiveTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryConfigurationTimeout:
    tIOUSB30LinkStateTimeout = 6;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryIdleTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateLoopbackExitTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateHotResetActiveTimeout:
    tIOUSB30LinkStateTimeout = 12;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateHotResetExitTimeout: tIOUSB30LinkStateTimeout =
    2;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStatePollingDeadline: tIOUSB30LinkStateTimeout = 387;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateSSResumeDeadline: tIOUSB30LinkStateTimeout =
    130;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateRecoveryDeadline: tIOUSB30LinkStateTimeout = 21;
pub const tIOUSB30LinkStateTimeout_kIOUSB30LinkStateHotResetDeadline: tIOUSB30LinkStateTimeout = 15;
pub type tIOUSB30LinkStateTimeout = ::std::os::raw::c_uint;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeFunctionWake:
    tIOUSB30DeviceNotificationType = 1;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeLatencyTolerance:
    tIOUSB30DeviceNotificationType = 2;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeBusIntervalAdjustment:
    tIOUSB30DeviceNotificationType = 3;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeHostRoleRequest:
    tIOUSB30DeviceNotificationType = 4;
pub const tIOUSB30DeviceNotificationType_kIOUSB30DeviceNotificationTypeSublinkSpeed:
    tIOUSB30DeviceNotificationType = 5;
pub type tIOUSB30DeviceNotificationType = ::std::os::raw::c_uint;
pub const tIOUSB30TimingParameters_kIOUSB30TimingParameterBELTDefaultNs: tIOUSB30TimingParameters =
    1000000;
pub const tIOUSB30TimingParameters_kIOUSB30TimingParameterBELTMinNs: tIOUSB30TimingParameters =
    125000;
pub type tIOUSB30TimingParameters = ::std::os::raw::c_uint;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodeStandard: tIOUSB30HubPortStatusCode =
    0;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodePD: tIOUSB30HubPortStatusCode = 1;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodeExt: tIOUSB30HubPortStatusCode = 2;
pub const tIOUSB30HubPortStatusCode_kIOUSB30HubPortStatusCodeCount: tIOUSB30HubPortStatusCode = 3;
pub type tIOUSB30HubPortStatusCode = ::std::os::raw::c_uint;
pub const kIOUSB30RetimerDepthLimit: _bindgen_ty_444 = 4;
pub type _bindgen_ty_444 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSB30HubPortStatusExt {
    pub wPortStatus: u16,
    pub wPortChange: u16,
    pub dwExtPortStatus: u32,
}
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxSublinkSpeedID: tIOUSB30HubExtStatus = 15;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxSublinkSpeedIDPhase: tIOUSB30HubExtStatus = 0;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxSublinkSpeedID: tIOUSB30HubExtStatus = 240;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxSublinkSpeedIDPhase: tIOUSB30HubExtStatus = 4;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxLaneCount: tIOUSB30HubExtStatus = 3840;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusRxLaneCountPhase: tIOUSB30HubExtStatus = 8;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxLaneCount: tIOUSB30HubExtStatus = 61440;
pub const tIOUSB30HubExtStatus_kIOUSB30HubExtStatusTxLaneCountPhase: tIOUSB30HubExtStatus = 12;
pub type tIOUSB30HubExtStatus = ::std::os::raw::c_uint;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedNone: tIOUSBHostConnectionSpeed = 0;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedFull: tIOUSBHostConnectionSpeed = 1;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedLow: tIOUSBHostConnectionSpeed = 2;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedHigh: tIOUSBHostConnectionSpeed = 3;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedSuper: tIOUSBHostConnectionSpeed = 4;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedSuperPlus: tIOUSBHostConnectionSpeed =
    5;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedSuperPlusBy2:
    tIOUSBHostConnectionSpeed = 6;
pub const tIOUSBHostConnectionSpeed_kIOUSBHostConnectionSpeedCount: tIOUSBHostConnectionSpeed = 7;
pub type tIOUSBHostConnectionSpeed = ::std::os::raw::c_uint;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeStandard: tIOUSBHostPortType = 0;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeCaptive: tIOUSBHostPortType = 1;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeInternal: tIOUSBHostPortType = 2;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeAccessory: tIOUSBHostPortType = 3;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeExpressCard: tIOUSBHostPortType = 4;
pub const tIOUSBHostPortType_kIOUSBHostPortTypeCount: tIOUSBHostPortType = 5;
pub type tIOUSBHostPortType = ::std::os::raw::c_uint;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeMask: tIOUSBHostPortStatus = 15;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypePhase: tIOUSBHostPortStatus = 0;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeStandard: tIOUSBHostPortStatus = 0;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeCaptive: tIOUSBHostPortStatus = 1;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeInternal: tIOUSBHostPortStatus = 2;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeAccessory: tIOUSBHostPortStatus = 3;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusPortTypeReserved: tIOUSBHostPortStatus = 240;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedMask: tIOUSBHostPortStatus = 1792;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedPhase: tIOUSBHostPortStatus = 8;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedNone: tIOUSBHostPortStatus = 0;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedFull: tIOUSBHostPortStatus = 256;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedLow: tIOUSBHostPortStatus = 512;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedHigh: tIOUSBHostPortStatus = 768;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedSuper: tIOUSBHostPortStatus = 1024;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedSuperPlus: tIOUSBHostPortStatus =
    1280;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusConnectedSpeedSuperPlusBy2:
    tIOUSBHostPortStatus = 1536;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusResetting: tIOUSBHostPortStatus = 2048;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusEnabled: tIOUSBHostPortStatus = 4096;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusSuspended: tIOUSBHostPortStatus = 8192;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusOvercurrent: tIOUSBHostPortStatus = 16384;
pub const tIOUSBHostPortStatus_kIOUSBHostPortStatusTestMode: tIOUSBHostPortStatus = 32768;
pub type tIOUSBHostPortStatus = ::std::os::raw::c_uint;
pub const kUSBControl: _bindgen_ty_445 = 0;
pub const kUSBIsoc: _bindgen_ty_445 = 1;
pub const kUSBBulk: _bindgen_ty_445 = 2;
pub const kUSBInterrupt: _bindgen_ty_445 = 3;
pub const kUSBAnyType: _bindgen_ty_445 = 255;
pub type _bindgen_ty_445 = ::std::os::raw::c_uint;
pub const kUSBOut: _bindgen_ty_446 = 0;
pub const kUSBIn: _bindgen_ty_446 = 1;
pub const kUSBNone: _bindgen_ty_446 = 2;
pub const kUSBAnyDirn: _bindgen_ty_446 = 3;
pub type _bindgen_ty_446 = ::std::os::raw::c_uint;
pub const kUSBStandard: _bindgen_ty_447 = 0;
pub const kUSBClass: _bindgen_ty_447 = 1;
pub const kUSBVendor: _bindgen_ty_447 = 2;
pub type _bindgen_ty_447 = ::std::os::raw::c_uint;
pub const kUSBDevice: _bindgen_ty_448 = 0;
pub const kUSBInterface: _bindgen_ty_448 = 1;
pub const kUSBEndpoint: _bindgen_ty_448 = 2;
pub const kUSBOther: _bindgen_ty_448 = 3;
pub type _bindgen_ty_448 = ::std::os::raw::c_uint;
pub const kUSBRqGetStatus: _bindgen_ty_449 = 0;
pub const kUSBRqClearFeature: _bindgen_ty_449 = 1;
pub const kUSBRqGetState: _bindgen_ty_449 = 2;
pub const kUSBRqSetFeature: _bindgen_ty_449 = 3;
pub const kUSBRqReserved2: _bindgen_ty_449 = 4;
pub const kUSBRqSetAddress: _bindgen_ty_449 = 5;
pub const kUSBRqGetDescriptor: _bindgen_ty_449 = 6;
pub const kUSBRqSetDescriptor: _bindgen_ty_449 = 7;
pub const kUSBRqGetConfig: _bindgen_ty_449 = 8;
pub const kUSBRqSetConfig: _bindgen_ty_449 = 9;
pub const kUSBRqGetInterface: _bindgen_ty_449 = 10;
pub const kUSBRqSetInterface: _bindgen_ty_449 = 11;
pub const kUSBRqSyncFrame: _bindgen_ty_449 = 12;
pub const kUSBSetSel: _bindgen_ty_449 = 48;
pub const kUSBSetIsochDelay: _bindgen_ty_449 = 49;
pub type _bindgen_ty_449 = ::std::os::raw::c_uint;
pub const kUSBAnyDesc: _bindgen_ty_450 = 0;
pub const kUSBDeviceDesc: _bindgen_ty_450 = 1;
pub const kUSBConfDesc: _bindgen_ty_450 = 2;
pub const kUSBStringDesc: _bindgen_ty_450 = 3;
pub const kUSBInterfaceDesc: _bindgen_ty_450 = 4;
pub const kUSBEndpointDesc: _bindgen_ty_450 = 5;
pub const kUSBDeviceQualifierDesc: _bindgen_ty_450 = 6;
pub const kUSBOtherSpeedConfDesc: _bindgen_ty_450 = 7;
pub const kUSBInterfacePowerDesc: _bindgen_ty_450 = 8;
pub const kUSBOnTheGoDesc: _bindgen_ty_450 = 9;
pub const kUSDebugDesc: _bindgen_ty_450 = 10;
pub const kUSBInterfaceAssociationDesc: _bindgen_ty_450 = 11;
pub const kUSBBOSDescriptor: _bindgen_ty_450 = 15;
pub const kUSBDeviceCapability: _bindgen_ty_450 = 16;
pub const kUSBSuperSpeedEndpointCompanion: _bindgen_ty_450 = 48;
pub const kUSB3HUBDesc: _bindgen_ty_450 = 42;
pub const kUSBHIDDesc: _bindgen_ty_450 = 33;
pub const kUSBReportDesc: _bindgen_ty_450 = 34;
pub const kUSBPhysicalDesc: _bindgen_ty_450 = 35;
pub const kUSBHUBDesc: _bindgen_ty_450 = 41;
pub type _bindgen_ty_450 = ::std::os::raw::c_uint;
pub const kUSBDeviceCapabilityWirelessUSB: _bindgen_ty_451 = 1;
pub const kUSBDeviceCapabilityUSB20Extension: _bindgen_ty_451 = 2;
pub const kUSBDeviceCapabilitySuperSpeedUSB: _bindgen_ty_451 = 3;
pub const kUSBDeviceCapabilityContainerID: _bindgen_ty_451 = 4;
pub const kUSBDeviceCapabilityBillboard: _bindgen_ty_451 = 13;
pub const kUSBDeviceCapabilityBillboardAltMode: _bindgen_ty_451 = 15;
pub type _bindgen_ty_451 = ::std::os::raw::c_uint;
pub const kUSBFeatureEndpointStall: _bindgen_ty_452 = 0;
pub const kUSBFeatureDeviceRemoteWakeup: _bindgen_ty_452 = 1;
pub const kUSBFeatureTestMode: _bindgen_ty_452 = 2;
pub const kUSBFeatureFunctionSuspend: _bindgen_ty_452 = 0;
pub const kUSBFeatureU1Enable: _bindgen_ty_452 = 48;
pub const kUSBFeatureU2Enable: _bindgen_ty_452 = 49;
pub const kUSBFeatureLTMEnable: _bindgen_ty_452 = 50;
pub type _bindgen_ty_452 = ::std::os::raw::c_uint;
pub const kUSBFunctionRemoteWakeCapableBit: _bindgen_ty_453 = 1;
pub const kUSBFunctionRemoteWakeupBit: _bindgen_ty_453 = 2;
pub const kUSBLowPowerSuspendStateBit: _bindgen_ty_453 = 1;
pub const kUSBFunctionRemoteWakeEnableBit: _bindgen_ty_453 = 2;
pub type _bindgen_ty_453 = ::std::os::raw::c_uint;
pub const kUSB100mAAvailable: _bindgen_ty_454 = 50;
pub const kUSB500mAAvailable: _bindgen_ty_454 = 250;
pub const kUSB100mA: _bindgen_ty_454 = 50;
pub const kUSBAtrBusPowered: _bindgen_ty_454 = 128;
pub const kUSBAtrSelfPowered: _bindgen_ty_454 = 64;
pub const kUSBAtrRemoteWakeup: _bindgen_ty_454 = 32;
pub const kUSB2MaxPowerPerPort: _bindgen_ty_454 = 500;
pub const kUSB150mAAvailable: _bindgen_ty_454 = 75;
pub const kUSB900mAAvailable: _bindgen_ty_454 = 450;
pub const kUSB150mA: _bindgen_ty_454 = 75;
pub const kUSB3MaxPowerPerPort: _bindgen_ty_454 = 900;
pub type _bindgen_ty_454 = ::std::os::raw::c_uint;
pub const kUSBRel10: _bindgen_ty_455 = 256;
pub const kUSBRel11: _bindgen_ty_455 = 272;
pub const kUSBRel20: _bindgen_ty_455 = 512;
pub const kUSBRel30: _bindgen_ty_455 = 768;
pub type _bindgen_ty_455 = ::std::os::raw::c_uint;
pub const kHIDRqGetReport: _bindgen_ty_456 = 1;
pub const kHIDRqGetIdle: _bindgen_ty_456 = 2;
pub const kHIDRqGetProtocol: _bindgen_ty_456 = 3;
pub const kHIDRqSetReport: _bindgen_ty_456 = 9;
pub const kHIDRqSetIdle: _bindgen_ty_456 = 10;
pub const kHIDRqSetProtocol: _bindgen_ty_456 = 11;
pub type _bindgen_ty_456 = ::std::os::raw::c_uint;
pub const kHIDRtInputReport: _bindgen_ty_457 = 1;
pub const kHIDRtOutputReport: _bindgen_ty_457 = 2;
pub const kHIDRtFeatureReport: _bindgen_ty_457 = 3;
pub type _bindgen_ty_457 = ::std::os::raw::c_uint;
pub const kHIDBootProtocolValue: _bindgen_ty_458 = 0;
pub const kHIDReportProtocolValue: _bindgen_ty_458 = 1;
pub type _bindgen_ty_458 = ::std::os::raw::c_uint;
pub const kUSBCapsLockKey: _bindgen_ty_459 = 57;
pub const kUSBNumLockKey: _bindgen_ty_459 = 83;
pub const kUSBScrollLockKey: _bindgen_ty_459 = 71;
pub type _bindgen_ty_459 = ::std::os::raw::c_uint;
pub const kUSBCompositeClass: _bindgen_ty_460 = 0;
pub const kUSBCommClass: _bindgen_ty_460 = 2;
pub const kUSBCommunicationClass: _bindgen_ty_460 = 2;
pub const kUSBHubClass: _bindgen_ty_460 = 9;
pub const kUSBDataClass: _bindgen_ty_460 = 10;
pub const kUSBPersonalHealthcareClass: _bindgen_ty_460 = 15;
pub const kUSBBillBoardClass: _bindgen_ty_460 = 17;
pub const kUSBDiagnosticClass: _bindgen_ty_460 = 220;
pub const kUSBWirelessControllerClass: _bindgen_ty_460 = 224;
pub const kUSBMiscellaneousClass: _bindgen_ty_460 = 239;
pub const kUSBApplicationSpecificClass: _bindgen_ty_460 = 254;
pub const kUSBVendorSpecificClass: _bindgen_ty_460 = 255;
pub type _bindgen_ty_460 = ::std::os::raw::c_uint;
pub const kUSBAudioClass: _bindgen_ty_461 = 1;
pub const kUSBAudioInterfaceClass: _bindgen_ty_461 = 1;
pub const kUSBCommunicationControlInterfaceClass: _bindgen_ty_461 = 2;
pub const kUSBCommunicationDataInterfaceClass: _bindgen_ty_461 = 10;
pub const kUSBHIDClass: _bindgen_ty_461 = 3;
pub const kUSBHIDInterfaceClass: _bindgen_ty_461 = 3;
pub const kUSBPhysicalInterfaceClass: _bindgen_ty_461 = 5;
pub const kUSBImageInterfaceClass: _bindgen_ty_461 = 6;
pub const kUSBPrintingClass: _bindgen_ty_461 = 7;
pub const kUSBPrintingInterfaceClass: _bindgen_ty_461 = 7;
pub const kUSBMassStorageClass: _bindgen_ty_461 = 8;
pub const kUSBMassStorageInterfaceClass: _bindgen_ty_461 = 8;
pub const kUSBChipSmartCardInterfaceClass: _bindgen_ty_461 = 11;
pub const kUSBContentSecurityInterfaceClass: _bindgen_ty_461 = 13;
pub const kUSBVideoInterfaceClass: _bindgen_ty_461 = 14;
pub const kUSBPersonalHealthcareInterfaceClass: _bindgen_ty_461 = 15;
pub const kUSBDiagnosticDeviceInterfaceClass: _bindgen_ty_461 = 220;
pub const kUSBWirelessControllerInterfaceClass: _bindgen_ty_461 = 224;
pub const kUSBApplicationSpecificInterfaceClass: _bindgen_ty_461 = 254;
pub const kUSBVendorSpecificInterfaceClass: _bindgen_ty_461 = 255;
pub type _bindgen_ty_461 = ::std::os::raw::c_uint;
pub const kUSBDisplayClass: _bindgen_ty_462 = 4;
pub type _bindgen_ty_462 = ::std::os::raw::c_uint;
pub const kUSBCompositeSubClass: _bindgen_ty_463 = 0;
pub const kUSBHubSubClass: _bindgen_ty_463 = 0;
pub const kUSBAudioControlSubClass: _bindgen_ty_463 = 1;
pub const kUSBAudioStreamingSubClass: _bindgen_ty_463 = 2;
pub const kUSBMIDIStreamingSubClass: _bindgen_ty_463 = 3;
pub const kUSBDFUSubClass: _bindgen_ty_463 = 1;
pub const kUSBIrDABridgeSubClass: _bindgen_ty_463 = 2;
pub const kUSBTestMeasurementSubClass: _bindgen_ty_463 = 3;
pub const kUSBMassStorageRBCSubClass: _bindgen_ty_463 = 1;
pub const kUSBMassStorageATAPISubClass: _bindgen_ty_463 = 2;
pub const kUSBMassStorageQIC157SubClass: _bindgen_ty_463 = 3;
pub const kUSBMassStorageUFISubClass: _bindgen_ty_463 = 4;
pub const kUSBMassStorageSFF8070iSubClass: _bindgen_ty_463 = 5;
pub const kUSBMassStorageSCSISubClass: _bindgen_ty_463 = 6;
pub const kUSBHIDBootInterfaceSubClass: _bindgen_ty_463 = 1;
pub const kUSBCommDirectLineSubClass: _bindgen_ty_463 = 1;
pub const kUSBCommAbstractSubClass: _bindgen_ty_463 = 2;
pub const kUSBCommTelephoneSubClass: _bindgen_ty_463 = 3;
pub const kUSBCommMultiChannelSubClass: _bindgen_ty_463 = 4;
pub const kUSBCommCAPISubClass: _bindgen_ty_463 = 5;
pub const kUSBCommEthernetNetworkingSubClass: _bindgen_ty_463 = 6;
pub const kUSBATMNetworkingSubClass: _bindgen_ty_463 = 7;
pub const kUSBReprogrammableDiagnosticSubClass: _bindgen_ty_463 = 1;
pub const kUSBRFControllerSubClass: _bindgen_ty_463 = 1;
pub const kUSBCommonClassSubClass: _bindgen_ty_463 = 2;
pub const kUSBVideoControlSubClass: _bindgen_ty_463 = 1;
pub const kUSBVideoStreamingSubClass: _bindgen_ty_463 = 2;
pub const kUSBVideoInterfaceCollectionSubClass: _bindgen_ty_463 = 3;
pub type _bindgen_ty_463 = ::std::os::raw::c_uint;
pub const USBClassSpecificDesc_kUSBClassSpecificDescriptor: USBClassSpecificDesc = 36;
pub type USBClassSpecificDesc = ::std::os::raw::c_uint;
pub const kHubSuperSpeedProtocol: _bindgen_ty_464 = 3;
pub const kHIDNoInterfaceProtocol: _bindgen_ty_464 = 0;
pub const kHIDKeyboardInterfaceProtocol: _bindgen_ty_464 = 1;
pub const kHIDMouseInterfaceProtocol: _bindgen_ty_464 = 2;
pub const kUSBVendorSpecificProtocol: _bindgen_ty_464 = 255;
pub const kUSB2ComplianceDeviceProtocol: _bindgen_ty_464 = 1;
pub const kUSBBluetoothProgrammingInterfaceProtocol: _bindgen_ty_464 = 1;
pub const KUSBInterfaceAssociationDescriptorProtocol: _bindgen_ty_464 = 1;
pub const kMSCProtocolControlBulkInterrupt: _bindgen_ty_464 = 0;
pub const kMSCProtocolControlBulk: _bindgen_ty_464 = 1;
pub const kMSCProtocolBulkOnly: _bindgen_ty_464 = 80;
pub const kMSCProtocolUSBAttachedSCSI: _bindgen_ty_464 = 98;
pub type _bindgen_ty_464 = ::std::os::raw::c_uint;
pub const kUSBDFUAttributesMask: _bindgen_ty_465 = 7;
pub const kUSBDFUCanDownloadBit: _bindgen_ty_465 = 0;
pub const kUSBDFUCanUploadBit: _bindgen_ty_465 = 1;
pub const kUSBDFUManifestationTolerantBit: _bindgen_ty_465 = 2;
pub type _bindgen_ty_465 = ::std::os::raw::c_uint;
pub const kUSPrintingClassGetDeviceID: _bindgen_ty_466 = 0;
pub const kUSPrintingClassGePortStatus: _bindgen_ty_466 = 1;
pub const kUSPrintingClassSoftReset: _bindgen_ty_466 = 2;
pub type _bindgen_ty_466 = ::std::os::raw::c_uint;
pub const kUSBbEndpointAddressMask: _bindgen_ty_467 = 15;
pub const kUSBbEndpointDirectionBit: _bindgen_ty_467 = 7;
pub const kUSBbEndpointDirectionMask: _bindgen_ty_467 = 128;
pub const kUSBEndpointDirectionOut: _bindgen_ty_467 = 0;
pub const kUSBEndpointDirectionIn: _bindgen_ty_467 = 128;
pub const kUSBEndpointbmAttributesTransferTypeMask: _bindgen_ty_467 = 3;
pub const kUSBEndpointbmAttributesSynchronizationTypeMask: _bindgen_ty_467 = 12;
pub const kUSBEndpointbmAttributesSynchronizationTypeShift: _bindgen_ty_467 = 2;
pub const kUSBEndpointbmAttributesUsageTypeMask: _bindgen_ty_467 = 48;
pub const kUSBEndpointbmAttributesUsageTypeShift: _bindgen_ty_467 = 4;
pub const kUSBPeriodicInterruptUsageType: _bindgen_ty_467 = 0;
pub const kUSBNotificationInterruptUsageType: _bindgen_ty_467 = 1;
pub const kUSBNoSynchronizationIsocSyncType: _bindgen_ty_467 = 0;
pub const kUSBAsynchronousIsocSyncType: _bindgen_ty_467 = 1;
pub const kUSBAdaptiveIsocSyncType: _bindgen_ty_467 = 2;
pub const kUSBSynchronousIsocSyncType: _bindgen_ty_467 = 3;
pub const kUSBDataIsocUsageType: _bindgen_ty_467 = 0;
pub const kUSBFeedbackIsocUsageType: _bindgen_ty_467 = 1;
pub const kUSBImplicitFeedbackDataIsocUsageType: _bindgen_ty_467 = 2;
pub type _bindgen_ty_467 = ::std::os::raw::c_uint;
pub const kUSB20ExtensionLPMSupported: _bindgen_ty_468 = 1;
pub const kUSBSuperSpeedLTMCapable: _bindgen_ty_468 = 1;
pub const kUSBSuperSpeedSupportsLS: _bindgen_ty_468 = 0;
pub const kUSBSuperSpeedSupportsFS: _bindgen_ty_468 = 1;
pub const kUSBSuperSpeedSupportsHS: _bindgen_ty_468 = 2;
pub const kUSBSuperSpeedSupportsSS: _bindgen_ty_468 = 3;
pub type _bindgen_ty_468 = ::std::os::raw::c_uint;
pub const kUSBBillboardVConn1Watt: _bindgen_ty_469 = 0;
pub const kUSBBillboardVConn1P5Watt: _bindgen_ty_469 = 1;
pub const kUSBBillboardVConn2Watt: _bindgen_ty_469 = 2;
pub const kUSBBillboardVConn3Watt: _bindgen_ty_469 = 3;
pub const kUSBBillboardVConn4Watt: _bindgen_ty_469 = 4;
pub const kUSBBillboardVConn5Watt: _bindgen_ty_469 = 5;
pub const kUSBBillboardVConn6Watt: _bindgen_ty_469 = 6;
pub const kUSBBillboardVConnReserved: _bindgen_ty_469 = 7;
pub type _bindgen_ty_469 = ::std::os::raw::c_uint;
pub const kUSBBillboardUnspecifiedError: _bindgen_ty_470 = 0;
pub const kUSBBillboardConfigNotAttempted: _bindgen_ty_470 = 1;
pub const kUSBBillboardConfigUnsuccessful: _bindgen_ty_470 = 2;
pub const kUSBBillboardAltModeConfigSuccess: _bindgen_ty_470 = 3;
pub type _bindgen_ty_470 = ::std::os::raw::c_uint;
pub const kUSBBillboardAdditinalInfoNoPower: _bindgen_ty_471 = 1;
pub const kUSBBillboardAdditinalInfoNoUSBPD: _bindgen_ty_471 = 2;
pub type _bindgen_ty_471 = ::std::os::raw::c_uint;
pub const kAppleVendorID: _bindgen_ty_472 = 1452;
pub type _bindgen_ty_472 = ::std::os::raw::c_uint;
pub const kUSBDeviceIDShift: _bindgen_ty_473 = 7;
pub const kUSBMaxDevices: _bindgen_ty_473 = 128;
pub const kUSBMaxDevice: _bindgen_ty_473 = 127;
pub const kUSBDeviceIDMask: _bindgen_ty_473 = 127;
pub const kUSBTooManyDevicesAddress: _bindgen_ty_473 = 65534;
pub const kUSBPipeIDMask: _bindgen_ty_473 = 15;
pub const kUSBMaxPipes: _bindgen_ty_473 = 32;
pub const kUSBInterfaceIDShift: _bindgen_ty_473 = 8;
pub const kUSBMaxInterfaces: _bindgen_ty_473 = 256;
pub const kUSBInterfaceIDMask: _bindgen_ty_473 = 255;
pub const kUSBEndPtShift: _bindgen_ty_473 = 7;
pub const kUSBDeviceMask: _bindgen_ty_473 = 127;
pub const kUSBNoPipeIdx: _bindgen_ty_473 = -1;
pub const kUSBUCRequestWithoutUSBNotificationMask: _bindgen_ty_473 = 1073741824;
pub const kUSBEndpointTransferTypeUCMask: _bindgen_ty_473 = 128;
pub const kUSBStream0: _bindgen_ty_473 = 0;
pub const kUSBMaxStream: _bindgen_ty_473 = 65533;
pub const kUSBPRimeStream: _bindgen_ty_473 = 65534;
pub const kUSBNoStream: _bindgen_ty_473 = 65535;
pub const kUSBAllStreams: _bindgen_ty_473 = 4294967295;
pub const kUSBStreamIDMask: _bindgen_ty_473 = 65535;
pub const kUSBStreamIDAllStreamsMask: _bindgen_ty_473 = -2147483648;
pub type _bindgen_ty_473 = ::std::os::raw::c_long;
pub const kUSBRqDirnShift: _bindgen_ty_474 = 7;
pub const kUSBRqDirnMask: _bindgen_ty_474 = 1;
pub const kUSBRqTypeShift: _bindgen_ty_474 = 5;
pub const kUSBRqTypeMask: _bindgen_ty_474 = 3;
pub const kUSBRqRecipientMask: _bindgen_ty_474 = 31;
pub type _bindgen_ty_474 = ::std::os::raw::c_uint;
pub const kUSBMaxFSIsocEndpointReqCount: _bindgen_ty_475 = 1023;
pub const kUSBMaxHSIsocEndpointReqCount: _bindgen_ty_475 = 3072;
pub const kUSBMaxHSIsocFrameCount: _bindgen_ty_475 = 7168;
pub type _bindgen_ty_475 = ::std::os::raw::c_uint;
pub const kClearDeviceFeature: _bindgen_ty_476 = 256;
pub const kClearInterfaceFeature: _bindgen_ty_476 = 257;
pub const kClearEndpointFeature: _bindgen_ty_476 = 258;
pub const kGetConfiguration: _bindgen_ty_476 = 2176;
pub const kGetDescriptor: _bindgen_ty_476 = 1664;
pub const kGetInterface: _bindgen_ty_476 = 2689;
pub const kGetDeviceStatus: _bindgen_ty_476 = 128;
pub const kGetInterfaceStatus: _bindgen_ty_476 = 129;
pub const kGetEndpointStatus: _bindgen_ty_476 = 130;
pub const kSetAddress: _bindgen_ty_476 = 1280;
pub const kSetConfiguration: _bindgen_ty_476 = 2304;
pub const kSetDescriptor: _bindgen_ty_476 = 1792;
pub const kSetDeviceFeature: _bindgen_ty_476 = 768;
pub const kSetInterfaceFeature: _bindgen_ty_476 = 769;
pub const kSetEndpointFeature: _bindgen_ty_476 = 770;
pub const kSetInterface: _bindgen_ty_476 = 2817;
pub const kSyncFrame: _bindgen_ty_476 = 3202;
pub type _bindgen_ty_476 = ::std::os::raw::c_uint;
pub type USBDeviceAddress = UInt16;
pub type USBPhysicalAddress32 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBIsocFrame {
    pub frStatus: IOReturn,
    pub frReqCount: UInt16,
    pub frActCount: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBLowLatencyIsocFrame {
    pub frStatus: IOReturn,
    pub frReqCount: UInt16,
    pub frActCount: UInt16,
    pub frTimeStamp: AbsoluteTime,
}
pub type IOUSBCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        bufferSizeRemaining: UInt32,
    ),
>;
pub type IOUSBCompletionActionWithTimeStamp = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        bufferSizeRemaining: UInt32,
        timeStamp: AbsoluteTime,
    ),
>;
pub type IOUSBIsocCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        pFrames: *mut IOUSBIsocFrame,
    ),
>;
pub type IOUSBLowLatencyIsocCompletionAction = ::std::option::Option<
    unsafe extern "C" fn(
        target: *mut ::std::os::raw::c_void,
        parameter: *mut ::std::os::raw::c_void,
        status: IOReturn,
        pFrames: *mut IOUSBLowLatencyIsocFrame,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBCompletionWithTimeStamp {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBCompletionActionWithTimeStamp,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBIsocCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBIsocCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBLowLatencyIsocCompletion {
    pub target: *mut ::std::os::raw::c_void,
    pub action: IOUSBLowLatencyIsocCompletionAction,
    pub parameter: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBMouseData {
    pub buttons: UInt16,
    pub XDelta: SInt16,
    pub YDelta: SInt16,
}
pub type IOUSBMouseDataPtr = *mut IOUSBMouseData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBKeyboardData {
    pub keycount: UInt16,
    pub usbkeycode: [UInt16; 32usize],
}
pub type IOUSBKeyboardDataPtr = *mut IOUSBKeyboardData;
#[repr(C)]
#[derive(Copy, Clone)]
pub union IOUSBHIDData {
    pub kbd: IOUSBKeyboardData,
    pub mouse: IOUSBMouseData,
}
pub type IOUSBHIDDataPtr = *mut IOUSBHIDData;
pub type IOUSBDeviceDescriptorPtr = *mut IOUSBDeviceDescriptor;
pub type IOUSBDescriptorHeaderPtr = *mut IOUSBDescriptorHeader;
pub type IOUSBBOSDescriptorPtr = *mut IOUSBBOSDescriptor;
pub type IOUSBDeviceCapabilityDescriptorHeaderPtr = *mut IOUSBDeviceCapabilityDescriptorHeader;
pub type IOUSBDeviceCapabilityUSB2ExtensionPtr = *mut IOUSBDeviceCapabilityUSB2Extension;
pub type IOUSBDeviceCapabilitySuperSpeedUSBPtr = *mut IOUSBDeviceCapabilitySuperSpeedUSB;
pub type IOUSBDeviceCapabilitySuperSpeedPlusUSBPtr = *mut IOUSBDeviceCapabilitySuperSpeedPlusUSB;
pub type IOUSBDeviceCapabilityContainerIDPtr = *mut IOUSBDeviceCapabilityContainerID;
pub type IOUSBPlatformCapabilityDescriptorPtr = *mut IOUSBPlatformCapabilityDescriptor;
pub type IOUSBDeviceCapabilityBillboardAltConfigPtr = *mut IOUSBDeviceCapabilityBillboardAltConfig;
pub type IOUSBDeviceCapabilityBillboardPtr = *mut IOUSBDeviceCapabilityBillboard;
pub type IOUSBDeviceCapabilityBillboardAltModePtr = *mut IOUSBDeviceCapabilityBillboardAltMode;
pub type IOUSBConfigurationDescriptorPtr = *mut IOUSBConfigurationDescriptor;
pub type IOUSBConfigurationDescHeaderPtr = *mut IOUSBConfigurationDescHeader;
pub type IOUSBInterfaceDescriptorPtr = *mut IOUSBInterfaceDescriptor;
pub type IOUSBEndpointDescriptorPtr = *mut IOUSBEndpointDescriptor;
pub type IOUSBStringDescriptorPtr = *mut IOUSBStringDescriptor;
pub type IOUSBSuperSpeedEndpointCompanionDescriptorPtr =
    *mut IOUSBSuperSpeedEndpointCompanionDescriptor;
pub type IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptorPtr =
    *mut IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor;
pub type UASPipeDescriptorPtr = *mut UASPipeDescriptor;
pub type IOUSBHIDDescriptorPtr = *mut IOUSBHIDDescriptor;
pub type IOUSBHIDReportDescPtr = *mut IOUSBHIDReportDesc;
pub type IOUSBDeviceQualifierDescriptorPtr = *mut IOUSBDeviceQualifierDescriptor;
pub type IOUSBDFUDescriptorPtr = *mut IOUSBDFUDescriptor;
pub type IOUSBInterfaceAssociationDescriptorPtr = *mut IOUSBInterfaceAssociationDescriptor;
pub const kIOUSBDeviceCapabilityDescriptorType: _bindgen_ty_477 = 16;
pub const kIOUSBDeviceCapabilityDescriptorLengthMin: _bindgen_ty_477 = 3;
pub type _bindgen_ty_477 = ::std::os::raw::c_uint;
pub const kUSB_EPDesc_bmAttributes_TranType_Mask: _bindgen_ty_478 = 3;
pub const kUSB_EPDesc_bmAttributes_TranType_Shift: _bindgen_ty_478 = 0;
pub const kUSB_EPDesc_bmAttributes_SyncType_Mask: _bindgen_ty_478 = 12;
pub const kUSB_EPDesc_bmAttributes_SyncType_Shift: _bindgen_ty_478 = 2;
pub const kUSB_EPDesc_bmAttributes_UsageType_Mask: _bindgen_ty_478 = 48;
pub const kUSB_EPDesc_bmAttributes_UsageType_Shift: _bindgen_ty_478 = 4;
pub const kUSB_EPDesc_wMaxPacketSize_MPS_Mask: _bindgen_ty_478 = 2047;
pub const kUSB_EPDesc_wMaxPacketSize_MPS_Shift: _bindgen_ty_478 = 0;
pub const kUSB_EPDesc_MaxMPS: _bindgen_ty_478 = 1024;
pub const kUSB_HSFSEPDesc_wMaxPacketSize_Mult_Mask: _bindgen_ty_478 = 6144;
pub const kUSB_HSFSEPDesc_wMaxPacketSize_Mult_Shift: _bindgen_ty_478 = 11;
pub type _bindgen_ty_478 = ::std::os::raw::c_uint;
pub const kUSB_SSCompDesc_Bulk_MaxStreams_Mask: _bindgen_ty_479 = 31;
pub const kUSB_SSCompDesc_Bulk_MaxStreams_Shift: _bindgen_ty_479 = 0;
pub const kUSB_SSCompDesc_Isoc_Mult_Mask: _bindgen_ty_479 = 3;
pub const kUSB_SSCompDesc_Isoc_Mult_Shift: _bindgen_ty_479 = 0;
pub type _bindgen_ty_479 = ::std::os::raw::c_uint;
pub const addPacketShift: _bindgen_ty_480 = 11;
pub type _bindgen_ty_480 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBEndpointProperties {
    pub bVersion: UInt8,
    pub bAlternateSetting: UInt8,
    pub bDirection: UInt8,
    pub bEndpointNumber: UInt8,
    pub bTransferType: UInt8,
    pub bUsageType: UInt8,
    pub bSyncType: UInt8,
    pub bInterval: UInt8,
    pub wMaxPacketSize: UInt16,
    pub bMaxBurst: UInt8,
    pub bMaxStreams: UInt8,
    pub bMult: UInt8,
    pub wBytesPerInterval: UInt16,
}
pub type IOUSBEndpointPropertiesPtr = *mut IOUSBEndpointProperties;
pub const kUSBEndpointPropertiesVersion3: _bindgen_ty_481 = 3;
pub type _bindgen_ty_481 = ::std::os::raw::c_uint;
pub type USBStatus = UInt16;
pub type USBStatusPtr = *mut USBStatus;
pub const kIOUSBAnyClass: _bindgen_ty_482 = 65535;
pub const kIOUSBAnySubClass: _bindgen_ty_482 = 65535;
pub const kIOUSBAnyProtocol: _bindgen_ty_482 = 65535;
pub const kIOUSBAnyVendor: _bindgen_ty_482 = 65535;
pub const kIOUSBAnyProduct: _bindgen_ty_482 = 65535;
pub type _bindgen_ty_482 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBMatch {
    pub usbClass: UInt16,
    pub usbSubClass: UInt16,
    pub usbProtocol: UInt16,
    pub usbVendor: UInt16,
    pub usbProduct: UInt16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBFindEndpointRequest {
    pub type_: UInt8,
    pub direction: UInt8,
    pub maxPacketSize: UInt16,
    pub interval: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevRequest {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
}
pub type IOUSBDeviceRequestPtr = *mut IOUSBDevRequest;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevRequestTO {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
    pub noDataTimeout: UInt32,
    pub completionTimeout: UInt32,
}
pub const kUSBDefaultControlNoDataTimeoutMS: _bindgen_ty_483 = 5000;
pub const kUSBDefaultControlCompletionTimeoutMS: _bindgen_ty_483 = 0;
pub type _bindgen_ty_483 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBBulkPipeReq {
    pub pipeRef: UInt32,
    pub buf: *mut ::std::os::raw::c_void,
    pub size: UInt32,
    pub noDataTimeout: UInt32,
    pub completionTimeout: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevReqOOL {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
    pub pipeRef: UInt8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDevReqOOLTO {
    pub bmRequestType: UInt8,
    pub bRequest: UInt8,
    pub wValue: UInt16,
    pub wIndex: UInt16,
    pub wLength: UInt16,
    pub pData: *mut ::std::os::raw::c_void,
    pub wLenDone: UInt32,
    pub pipeRef: UInt8,
    pub noDataTimeout: UInt32,
    pub completionTimeout: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBIsocStruct {
    pub fPipe: UInt32,
    pub fBuffer: *mut ::std::os::raw::c_void,
    pub fBufSize: UInt32,
    pub fStartFrame: UInt64,
    pub fNumFrames: UInt32,
    pub fFrameCounts: *mut IOUSBIsocFrame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBLowLatencyIsocStruct {
    pub fPipe: UInt32,
    pub fBufSize: UInt32,
    pub fStartFrame: UInt64,
    pub fNumFrames: UInt32,
    pub fUpdateFrequency: UInt32,
    pub fDataBufferCookie: UInt32,
    pub fDataBufferOffset: UInt32,
    pub fFrameListBufferCookie: UInt32,
    pub fFrameListBufferOffset: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBGetFrameStruct {
    pub frame: UInt64,
    pub timeStamp: AbsoluteTime,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBFindInterfaceRequest {
    pub bInterfaceClass: UInt16,
    pub bInterfaceSubClass: UInt16,
    pub bInterfaceProtocol: UInt16,
    pub bAlternateSetting: UInt16,
}
pub const kIOUSBFindInterfaceDontCare: _bindgen_ty_484 = 65535;
pub type _bindgen_ty_484 = ::std::os::raw::c_uint;
pub const kIOUSBVendorIDAppleComputer: _bindgen_ty_485 = 1452;
pub const kIOUSBVendorIDApple: _bindgen_ty_485 = 1452;
pub type _bindgen_ty_485 = ::std::os::raw::c_uint;
pub const kUSBDeviceSpeedLow: _bindgen_ty_486 = 0;
pub const kUSBDeviceSpeedFull: _bindgen_ty_486 = 1;
pub const kUSBDeviceSpeedHigh: _bindgen_ty_486 = 2;
pub const kUSBDeviceSpeedSuper: _bindgen_ty_486 = 3;
pub const kUSBDeviceSpeedSuperPlus: _bindgen_ty_486 = 4;
pub const kUSBDeviceSpeedSuperPlusBy2: _bindgen_ty_486 = 5;
pub type _bindgen_ty_486 = ::std::os::raw::c_uint;
pub const kUSBFullSpeedMicrosecondsInFrame: _bindgen_ty_487 = 1000;
pub const kUSBHighSpeedMicrosecondsInFrame: _bindgen_ty_487 = 125;
pub type _bindgen_ty_487 = ::std::os::raw::c_uint;
pub const kUSBLowLatencyIsochTransferKey: _bindgen_ty_488 = 1819044212;
pub type _bindgen_ty_488 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LowLatencyUserBufferInfo {
    pub cookie: UInt32,
    pub bufferAddress: *mut ::std::os::raw::c_void,
    pub bufferSize: IOByteCount,
    pub bufferType: UInt32,
    pub isPrepared: Boolean,
    pub nextBuffer: *mut LowLatencyUserBufferInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LowLatencyUserBufferInfoV2 {
    pub cookie: UInt32,
    pub bufferAddress: *mut ::std::os::raw::c_void,
    pub bufferSize: IOByteCount,
    pub bufferType: UInt32,
    pub isPrepared: Boolean,
    pub mappedUHCIAddress: *mut ::std::os::raw::c_void,
    pub nextBuffer: *mut LowLatencyUserBufferInfoV2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LowLatencyUserBufferInfoV3 {
    pub cookie: u64,
    pub bufferAddress: mach_vm_address_t,
    pub bufferSize: mach_vm_size_t,
    pub bufferType: u64,
    pub isPrepared: u64,
    pub mappedUHCIAddress: mach_vm_address_t,
    pub nextBuffer: *mut LowLatencyUserBufferInfoV3,
}
pub const USBLowLatencyBufferType_kUSBLowLatencyWriteBuffer: USBLowLatencyBufferType = 0;
pub const USBLowLatencyBufferType_kUSBLowLatencyReadBuffer: USBLowLatencyBufferType = 1;
pub const USBLowLatencyBufferType_kUSBLowLatencyFrameListBuffer: USBLowLatencyBufferType = 2;
pub type USBLowLatencyBufferType = ::std::os::raw::c_uint;
pub const kUSBNoUserNotificationType: _bindgen_ty_489 = 0;
pub const kUSBNotEnoughPowerNotificationType: _bindgen_ty_489 = 1;
pub const kUSBIndividualOverCurrentNotificationType: _bindgen_ty_489 = 2;
pub const kUSBGangOverCurrentNotificationType: _bindgen_ty_489 = 3;
pub const kUSBiOSDeviceNotEnoughPowerNotificationType: _bindgen_ty_489 = 4;
pub const kUSBNotEnoughPowerNoACNotificationType: _bindgen_ty_489 = 5;
pub const kUSBDeviceCountExceededNotificationType: _bindgen_ty_489 = 6;
pub const kUSBEndpointCountExceededNotificationType: _bindgen_ty_489 = 7;
pub const kUSBUnsupportedNotificationType: _bindgen_ty_489 = 8;
pub const kUSBHubCountExceededNotificationType: _bindgen_ty_489 = 9;
pub const kUSBTDMLowBatteryType: _bindgen_ty_489 = 10;
pub const kUSBCTBNotEnoughPowerNotificationType: _bindgen_ty_489 = 11;
pub const kUSBCTBUnsupportedNotificationType: _bindgen_ty_489 = 12;
pub const kUSBCUnsupportedTBPortNotificationType: _bindgen_ty_489 = 13;
pub const kUSBCUnsupportedTBCableNotificationType: _bindgen_ty_489 = 14;
pub type _bindgen_ty_489 = ::std::os::raw::c_uint;
pub const USBReEnumerateOptions_kUSBAddExtraResetTimeBit: USBReEnumerateOptions = 31;
pub const USBReEnumerateOptions_kUSBReEnumerateCaptureDeviceBit: USBReEnumerateOptions = 30;
pub const USBReEnumerateOptions_kUSBReEnumerateReleaseDeviceBit: USBReEnumerateOptions = 29;
pub const USBReEnumerateOptions_kUSBAddExtraResetTimeMask: USBReEnumerateOptions = -2147483648;
pub const USBReEnumerateOptions_kUSBReEnumerateCaptureDeviceMask: USBReEnumerateOptions =
    1073741824;
pub const USBReEnumerateOptions_kUSBReEnumerateReleaseDeviceMask: USBReEnumerateOptions = 536870912;
pub type USBReEnumerateOptions = ::std::os::raw::c_int;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsCaptiveBit: USBDeviceInformationBits = 0;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToRootHubBit:
    USBDeviceInformationBits = 1;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInternalBit: USBDeviceInformationBits = 2;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsConnectedBit: USBDeviceInformationBits =
    3;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsEnabledBit: USBDeviceInformationBits = 4;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsSuspendedBit: USBDeviceInformationBits =
    5;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInResetBit: USBDeviceInformationBits = 6;
pub const USBDeviceInformationBits_kUSBInformationDeviceOvercurrentBit: USBDeviceInformationBits =
    7;
pub const USBDeviceInformationBits_kUSBInformationDevicePortIsInTestModeBit:
    USBDeviceInformationBits = 8;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRootHub: USBDeviceInformationBits = 9;
pub const USBDeviceInformationBits_kUSBInformationRootHubisBuiltIn: USBDeviceInformationBits = 10;
pub const USBDeviceInformationBits_kUSBInformationRootHubIsBuiltInBit: USBDeviceInformationBits =
    10;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRemote: USBDeviceInformationBits = 11;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToEnclosure:
    USBDeviceInformationBits = 12;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsOnThunderboltBit:
    USBDeviceInformationBits = 13;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsCaptiveMask: USBDeviceInformationBits = 1;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToRootHubMask:
    USBDeviceInformationBits = 2;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInternalMask: USBDeviceInformationBits =
    4;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsConnectedMask: USBDeviceInformationBits =
    8;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsEnabledMask: USBDeviceInformationBits =
    16;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsSuspendedMask: USBDeviceInformationBits =
    32;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsInResetMask: USBDeviceInformationBits =
    64;
pub const USBDeviceInformationBits_kUSBInformationDeviceOvercurrentMask: USBDeviceInformationBits =
    128;
pub const USBDeviceInformationBits_kUSBInformationDevicePortIsInTestModeMask:
    USBDeviceInformationBits = 256;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRootHubMask: USBDeviceInformationBits =
    512;
pub const USBDeviceInformationBits_kUSBInformationRootHubisBuiltInMask: USBDeviceInformationBits =
    1024;
pub const USBDeviceInformationBits_kUSBInformationRootHubIsBuiltInMask: USBDeviceInformationBits =
    1024;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsRemoteMask: USBDeviceInformationBits =
    2048;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsAttachedToEnclosureMask:
    USBDeviceInformationBits = 4096;
pub const USBDeviceInformationBits_kUSBInformationDeviceIsOnThunderboltMask:
    USBDeviceInformationBits = 8192;
pub type USBDeviceInformationBits = ::std::os::raw::c_uint;
pub const USBPowerRequestTypes_kUSBPowerDuringSleep: USBPowerRequestTypes = 0;
pub const USBPowerRequestTypes_kUSBPowerDuringWake: USBPowerRequestTypes = 1;
pub const USBPowerRequestTypes_kUSBPowerRequestWakeRelease: USBPowerRequestTypes = 2;
pub const USBPowerRequestTypes_kUSBPowerRequestSleepRelease: USBPowerRequestTypes = 3;
pub const USBPowerRequestTypes_kUSBPowerRequestWakeReallocate: USBPowerRequestTypes = 4;
pub const USBPowerRequestTypes_kUSBPowerRequestSleepReallocate: USBPowerRequestTypes = 5;
pub const USBPowerRequestTypes_kUSBPowerDuringWakeRevocable: USBPowerRequestTypes = 6;
pub const USBPowerRequestTypes_kUSBPowerDuringWakeUSB3: USBPowerRequestTypes = 7;
pub type USBPowerRequestTypes = ::std::os::raw::c_uint;
pub const kUSBNotificationPreForcedSuspendBit: _bindgen_ty_490 = 0;
pub const kUSBNotificationPostForcedSuspendBit: _bindgen_ty_490 = 1;
pub const kUSBNotificationPreForcedResumeBit: _bindgen_ty_490 = 2;
pub const kUSBNotificationPostForcedResumeBit: _bindgen_ty_490 = 3;
pub type _bindgen_ty_490 = ::std::os::raw::c_uint;
pub const USBNotificationTypes_kUSBNotificationPreForcedSuspend: USBNotificationTypes = 1;
pub const USBNotificationTypes_kUSBNotificationPostForcedSuspend: USBNotificationTypes = 2;
pub const USBNotificationTypes_kUSBNotificationPreForcedResume: USBNotificationTypes = 4;
pub const USBNotificationTypes_kUSBNotificationPostForcedResume: USBNotificationTypes = 8;
pub type USBNotificationTypes = ::std::os::raw::c_uint;
pub const kUSBConnectable_kUSBPortNotConnectable: kUSBConnectable = 0;
pub const kUSBConnectable_kUSBPortConnectable: kUSBConnectable = 1;
pub type kUSBConnectable = ::std::os::raw::c_uint;
pub const kUSBHostConnectorType_kUSBTypeAConnector: kUSBHostConnectorType = 0;
pub const kUSBHostConnectorType_kUSBTypeMiniABConnector: kUSBHostConnectorType = 1;
pub const kUSBHostConnectorType_kUSBTypeExpressCard: kUSBHostConnectorType = 2;
pub const kUSBHostConnectorType_kUSB3TypeStdAConnector: kUSBHostConnectorType = 3;
pub const kUSBHostConnectorType_kUSB3TypeStdBConnector: kUSBHostConnectorType = 4;
pub const kUSBHostConnectorType_kUSB3TypeMicroBConnector: kUSBHostConnectorType = 5;
pub const kUSBHostConnectorType_kUSB3TypeMicroABConnector: kUSBHostConnectorType = 6;
pub const kUSBHostConnectorType_kUSB3TypePowerBConnector: kUSBHostConnectorType = 7;
pub const kUSBHostConnectorType_kUSBProprietaryConnector: kUSBHostConnectorType = 255;
pub type kUSBHostConnectorType = ::std::os::raw::c_uint;
pub const kUSBSpeed_Mask: _bindgen_ty_491 = 3;
pub const kUSBSpeed_Shift: _bindgen_ty_491 = 0;
pub const kUSBAddress_Mask: _bindgen_ty_491 = 65280;
pub const kUSBAddress_Shift: _bindgen_ty_491 = 8;
pub type _bindgen_ty_491 = ::std::os::raw::c_uint;
pub const kXHCISSRootHubAddress: _bindgen_ty_492 = 128;
pub const kXHCIUSB2RootHubAddress: _bindgen_ty_492 = 129;
pub const kSuperSpeedBusBitMask: _bindgen_ty_492 = 16777216;
pub type _bindgen_ty_492 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct100 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface100 = IOUSBDeviceStruct100;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct182 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface182 = IOUSBDeviceStruct182;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct187 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface187 = IOUSBDeviceStruct187;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct197 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface197 = IOUSBDeviceStruct197;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct245 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface245 = IOUSBDeviceStruct245;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct300 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface300 = IOUSBDeviceStruct300;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct320 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface320 = IOUSBDeviceStruct320;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct400 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface400 = IOUSBDeviceStruct400;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct500 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailableForDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface500 = IOUSBDeviceStruct500;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct650 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailableForDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub SetConfigurationV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configNum: UInt8,
            startInterfaceMatching: bool,
            issueRemoteWakeup: bool,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
}
pub type IOUSBDeviceInterface650 = IOUSBDeviceStruct650;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBDeviceStruct942 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBDeviceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBDeviceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devClass: *mut UInt8) -> IOReturn,
    >,
    pub GetDeviceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceAddress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            addr: *mut USBDeviceAddress,
        ) -> IOReturn,
    >,
    pub GetDeviceBusPowerAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDeviceSpeed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, devSpeed: *mut UInt8) -> IOReturn,
    >,
    pub GetNumberOfConfigurations: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, numConfig: *mut UInt8) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetConfigurationDescriptorPtr: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configIndex: UInt8,
            desc: *mut IOUSBConfigurationDescriptorPtr,
        ) -> IOReturn,
    >,
    pub GetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: *mut UInt8) -> IOReturn,
    >,
    pub SetConfiguration: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configNum: UInt8) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ResetDevice:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub CreateInterfaceIterator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBFindInterfaceRequest,
            iter: *mut io_iterator_t,
        ) -> IOReturn,
    >,
    pub USBDeviceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub DeviceRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub DeviceRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBDeviceSuspend: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, suspend: Boolean) -> IOReturn,
    >,
    pub USBDeviceAbortPipeZero:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBGetManufacturerStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, msi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetProductStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, psi: *mut UInt8) -> IOReturn,
    >,
    pub USBGetSerialNumberStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, snsi: *mut UInt8) -> IOReturn,
    >,
    pub USBDeviceReEnumerate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, options: UInt32) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetUSBDeviceInformation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, info: *mut UInt32) -> IOReturn,
    >,
    pub RequestExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            requestedPower: UInt32,
            powerAvailable: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReturnExtraPower: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerReturned: UInt32,
        ) -> IOReturn,
    >,
    pub GetExtraPowerAllocated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            type_: UInt32,
            powerAllocated: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailableForDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub SetConfigurationV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            configNum: UInt8,
            startInterfaceMatching: bool,
            issueRemoteWakeup: bool,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub GetDeviceAsyncNotificationPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IONotificationPortRef,
    >,
}
pub type IOUSBDeviceInterface942 = IOUSBDeviceStruct942;
pub type IOUSBDeviceInterface = IOUSBDeviceInterface942;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct100 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface100 = IOUSBInterfaceStruct100;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct182 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface182 = IOUSBInterfaceStruct182;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct183 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
}
pub type IOUSBInterfaceInterface183 = IOUSBInterfaceStruct183;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct190 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface190 = IOUSBInterfaceStruct190;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct192 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface192 = IOUSBInterfaceStruct192;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct197 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface197 = IOUSBInterfaceStruct197;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct220 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
}
pub type IOUSBInterfaceInterface220 = IOUSBInterfaceStruct220;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct245 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
}
pub type IOUSBInterfaceInterface245 = IOUSBInterfaceStruct245;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct300 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface300 = IOUSBInterfaceStruct300;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct398 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface398 = IOUSBInterfaceStruct398;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct400 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface400 = IOUSBInterfaceStruct400;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct500 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface500 = IOUSBInterfaceStruct500;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct550 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface550 = IOUSBInterfaceStruct550;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct650 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface650 = IOUSBInterfaceStruct650;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct700 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub RegisterDriver:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
}
pub type IOUSBInterfaceInterface700 = IOUSBInterfaceStruct700;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct800 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub RegisterDriver:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub SetDeviceIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            deviceIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub SetPipeIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            ioIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
}
pub type IOUSBInterfaceInterface800 = IOUSBInterfaceStruct800;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IOUSBInterfaceStruct942 {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub CreateInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            source: *mut CFRunLoopSourceRef,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncEventSource: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> CFRunLoopSourceRef,
    >,
    pub CreateInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            port: *mut mach_port_t,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub USBInterfaceOpen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub USBInterfaceClose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub GetInterfaceClass: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, intfClass: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceSubClass: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfSubClass: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetInterfaceProtocol: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfProtocol: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetDeviceVendor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devVendor: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceProduct: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devProduct: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetDeviceReleaseNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            devRelNum: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetConfigurationValue: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, configVal: *mut UInt8) -> IOReturn,
    >,
    pub GetInterfaceNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumber: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetAlternateSetting: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfAltSetting: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetNumEndpoints: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            intfNumEndpoints: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetLocationID: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            locationID: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetDevice: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            device: *mut io_service_t,
        ) -> IOReturn,
    >,
    pub SetAlternateInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
        ) -> IOReturn,
    >,
    pub GetBusFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub ControlRequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
        ) -> IOReturn,
    >,
    pub ControlRequestAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequest,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetPipeProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub GetPipeStatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub AbortPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ResetPipe: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ClearPipeStall: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub ReadPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
        ) -> IOReturn,
    >,
    pub WritePipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            frameList: *mut IOUSBIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ControlRequestTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
        ) -> IOReturn,
    >,
    pub ControlRequestAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            req: *mut IOUSBDevRequestTO,
            callback: IOAsyncCallback1,
            refCon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub ReadPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WritePipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WritePipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub USBInterfaceGetStringIndex: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, si: *mut UInt8) -> IOReturn,
    >,
    pub USBInterfaceOpenSeize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub ClearPipeStallBothEnds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, pipeRef: UInt8) -> IOReturn,
    >,
    pub SetPipePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            maxPacketSize: UInt16,
            maxInterval: UInt8,
        ) -> IOReturn,
    >,
    pub GetBandwidthAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            bandwidth: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetEndpointProperties: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            alternateSetting: UInt8,
            endpointNumber: UInt8,
            direction: UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
        ) -> IOReturn,
    >,
    pub LowLatencyReadIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyWriteIsochPipeAsync: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            buf: *mut ::std::os::raw::c_void,
            frameStart: UInt64,
            numFrames: UInt32,
            updateFrequency: UInt32,
            frameList: *mut IOUSBLowLatencyIsocFrame,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub LowLatencyCreateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut *mut ::std::os::raw::c_void,
            size: IOByteCount,
            bufferType: UInt32,
        ) -> IOReturn,
    >,
    pub LowLatencyDestroyBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            buffer: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub GetBusMicroFrameNumber: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microFrame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetFrameListTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            microsecondsInFrame: *mut UInt32,
        ) -> IOReturn,
    >,
    pub GetIOUSBLibVersion: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            ioUSBLibVersion: *mut NumVersion,
            usbFamilyVersion: *mut NumVersion,
        ) -> IOReturn,
    >,
    pub FindNextAssociatedDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            currentDescriptor: *const ::std::os::raw::c_void,
            descriptorType: UInt8,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub FindNextAltInterface: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            current: *const ::std::os::raw::c_void,
            request: *mut IOUSBFindInterfaceRequest,
        ) -> *mut IOUSBDescriptorHeader,
    >,
    pub GetBusFrameNumberWithTime: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            frame: *mut UInt64,
            atTime: *mut AbsoluteTime,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV2: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            direction: *mut UInt8,
            number: *mut UInt8,
            transferType: *mut UInt8,
            maxPacketSize: *mut UInt16,
            interval: *mut UInt8,
            maxBurst: *mut UInt8,
            mult: *mut UInt8,
            bytesPerInterval: *mut UInt16,
        ) -> IOReturn,
    >,
    pub GetPipePropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub GetEndpointPropertiesV3: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            properties: *mut IOUSBEndpointProperties,
        ) -> IOReturn,
    >,
    pub SupportsStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            supportsStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub CreateStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub GetConfiguredStreams: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            configuredStreams: *mut UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: *mut UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub ReadStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub WriteStreamsPipeAsyncTO: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
            buf: *mut ::std::os::raw::c_void,
            size: UInt32,
            noDataTimeout: UInt32,
            completionTimeout: UInt32,
            callback: IOAsyncCallback1,
            refcon: *mut ::std::os::raw::c_void,
        ) -> IOReturn,
    >,
    pub AbortStreamsPipe: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            streamID: UInt32,
        ) -> IOReturn,
    >,
    pub RegisterForNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationMask: UInt64,
            callback: IOAsyncCallback2,
            refCon: *mut ::std::os::raw::c_void,
            pRegistrationToken: *mut UInt64,
        ) -> IOReturn,
    >,
    pub UnregisterNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            registrationToken: UInt64,
        ) -> IOReturn,
    >,
    pub AcknowledgeNotification: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            notificationToken: UInt64,
        ) -> IOReturn,
    >,
    pub RegisterDriver:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IOReturn>,
    pub SetDeviceIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            deviceIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub SetPipeIdlePolicy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            pipeRef: UInt8,
            ioIdleTimeout: UInt32,
        ) -> IOReturn,
    >,
    pub GetInterfaceAsyncNotificationPort: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> IONotificationPortRef,
    >,
}
pub type IOUSBInterfaceInterface942 = IOUSBInterfaceStruct942;
pub type IOUSBInterfaceInterface = IOUSBInterfaceInterface942;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOSurface {
    _unused: [u8; 0],
}
pub type IOSurfaceRef = *mut __IOSurface;
extern "C" {
    pub static CGPointZero: CGPoint;
}
extern "C" {
    pub static CGSizeZero: CGSize;
}
extern "C" {
    pub static CGRectZero: CGRect;
}
extern "C" {
    pub static CGRectNull: CGRect;
}
extern "C" {
    pub static CGRectInfinite: CGRect;
}
extern "C" {
    pub fn CGRectGetMinX(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetMidX(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetMaxX(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetMinY(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetMidY(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetMaxY(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetWidth(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGRectGetHeight(rect: CGRect) -> CGFloat;
}
extern "C" {
    pub fn CGPointEqualToPoint(point1: CGPoint, point2: CGPoint) -> bool;
}
extern "C" {
    pub fn CGSizeEqualToSize(size1: CGSize, size2: CGSize) -> bool;
}
extern "C" {
    pub fn CGRectEqualToRect(rect1: CGRect, rect2: CGRect) -> bool;
}
extern "C" {
    pub fn CGRectStandardize(rect: CGRect) -> CGRect;
}
extern "C" {
    pub fn CGRectIsEmpty(rect: CGRect) -> bool;
}
extern "C" {
    pub fn CGRectIsNull(rect: CGRect) -> bool;
}
extern "C" {
    pub fn CGRectIsInfinite(rect: CGRect) -> bool;
}
extern "C" {
    pub fn CGRectInset(rect: CGRect, dx: CGFloat, dy: CGFloat) -> CGRect;
}
extern "C" {
    pub fn CGRectIntegral(rect: CGRect) -> CGRect;
}
extern "C" {
    pub fn CGRectUnion(r1: CGRect, r2: CGRect) -> CGRect;
}
extern "C" {
    pub fn CGRectIntersection(r1: CGRect, r2: CGRect) -> CGRect;
}
extern "C" {
    pub fn CGRectOffset(rect: CGRect, dx: CGFloat, dy: CGFloat) -> CGRect;
}
extern "C" {
    pub fn CGRectDivide(
        rect: CGRect,
        slice: *mut CGRect,
        remainder: *mut CGRect,
        amount: CGFloat,
        edge: CGRectEdge,
    );
}
extern "C" {
    pub fn CGRectContainsPoint(rect: CGRect, point: CGPoint) -> bool;
}
extern "C" {
    pub fn CGRectContainsRect(rect1: CGRect, rect2: CGRect) -> bool;
}
extern "C" {
    pub fn CGRectIntersectsRect(rect1: CGRect, rect2: CGRect) -> bool;
}
extern "C" {
    pub fn CGPointCreateDictionaryRepresentation(point: CGPoint) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGPointMakeWithDictionaryRepresentation(
        dict: CFDictionaryRef,
        point: *mut CGPoint,
    ) -> bool;
}
extern "C" {
    pub fn CGSizeCreateDictionaryRepresentation(size: CGSize) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGSizeMakeWithDictionaryRepresentation(dict: CFDictionaryRef, size: *mut CGSize)
        -> bool;
}
extern "C" {
    pub fn CGRectCreateDictionaryRepresentation(arg1: CGRect) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGRectMakeWithDictionaryRepresentation(dict: CFDictionaryRef, rect: *mut CGRect)
        -> bool;
}
extern "C" {
    pub static CGAffineTransformIdentity: CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformMake(
        a: CGFloat,
        b: CGFloat,
        c: CGFloat,
        d: CGFloat,
        tx: CGFloat,
        ty: CGFloat,
    ) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformMakeTranslation(tx: CGFloat, ty: CGFloat) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformMakeScale(sx: CGFloat, sy: CGFloat) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformMakeRotation(angle: CGFloat) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformIsIdentity(t: CGAffineTransform) -> bool;
}
extern "C" {
    pub fn CGAffineTransformTranslate(
        t: CGAffineTransform,
        tx: CGFloat,
        ty: CGFloat,
    ) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformScale(
        t: CGAffineTransform,
        sx: CGFloat,
        sy: CGFloat,
    ) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformRotate(t: CGAffineTransform, angle: CGFloat) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformInvert(t: CGAffineTransform) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformConcat(
        t1: CGAffineTransform,
        t2: CGAffineTransform,
    ) -> CGAffineTransform;
}
extern "C" {
    pub fn CGAffineTransformEqualToTransform(t1: CGAffineTransform, t2: CGAffineTransform) -> bool;
}
extern "C" {
    pub fn CGPointApplyAffineTransform(point: CGPoint, t: CGAffineTransform) -> CGPoint;
}
extern "C" {
    pub fn CGSizeApplyAffineTransform(size: CGSize, t: CGAffineTransform) -> CGSize;
}
extern "C" {
    pub fn CGRectApplyAffineTransform(rect: CGRect, t: CGAffineTransform) -> CGRect;
}
extern "C" {
    pub fn CGAffineTransformDecompose(transform: CGAffineTransform) -> CGAffineTransformComponents;
}
extern "C" {
    pub fn CGAffineTransformMakeWithComponents(
        components: CGAffineTransformComponents,
    ) -> CGAffineTransform;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGContext {
    _unused: [u8; 0],
}
pub type CGContextRef = *mut CGContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGColor {
    _unused: [u8; 0],
}
pub type CGColorRef = *mut CGColor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGColorSpace {
    _unused: [u8; 0],
}
pub type CGColorSpaceRef = *mut CGColorSpace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDataProvider {
    _unused: [u8; 0],
}
pub type CGDataProviderRef = *mut CGDataProvider;
pub type CGDataProviderGetBytesCallback = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> usize,
>;
pub type CGDataProviderSkipForwardCallback = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, count: off_t) -> off_t,
>;
pub type CGDataProviderRewindCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
pub type CGDataProviderReleaseInfoCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDataProviderSequentialCallbacks {
    pub version: ::std::os::raw::c_uint,
    pub getBytes: CGDataProviderGetBytesCallback,
    pub skipForward: CGDataProviderSkipForwardCallback,
    pub rewind: CGDataProviderRewindCallback,
    pub releaseInfo: CGDataProviderReleaseInfoCallback,
}
pub type CGDataProviderGetBytePointerCallback = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CGDataProviderReleaseBytePointerCallback = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, pointer: *const ::std::os::raw::c_void),
>;
pub type CGDataProviderGetBytesAtPositionCallback = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        pos: off_t,
        cnt: usize,
    ) -> usize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDataProviderDirectCallbacks {
    pub version: ::std::os::raw::c_uint,
    pub getBytePointer: CGDataProviderGetBytePointerCallback,
    pub releaseBytePointer: CGDataProviderReleaseBytePointerCallback,
    pub getBytesAtPosition: CGDataProviderGetBytesAtPositionCallback,
    pub releaseInfo: CGDataProviderReleaseInfoCallback,
}
extern "C" {
    pub fn CGDataProviderGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGDataProviderCreateSequential(
        info: *mut ::std::os::raw::c_void,
        callbacks: *const CGDataProviderSequentialCallbacks,
    ) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGDataProviderCreateDirect(
        info: *mut ::std::os::raw::c_void,
        size: off_t,
        callbacks: *const CGDataProviderDirectCallbacks,
    ) -> CGDataProviderRef;
}
pub type CGDataProviderReleaseDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ),
>;
extern "C" {
    pub fn CGDataProviderCreateWithData(
        info: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
        size: usize,
        releaseData: CGDataProviderReleaseDataCallback,
    ) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGDataProviderCreateWithCFData(data: CFDataRef) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGDataProviderCreateWithURL(url: CFURLRef) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGDataProviderCreateWithFilename(
        filename: *const ::std::os::raw::c_char,
    ) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGDataProviderRetain(provider: CGDataProviderRef) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGDataProviderRelease(provider: CGDataProviderRef);
}
extern "C" {
    pub fn CGDataProviderCopyData(provider: CGDataProviderRef) -> CFDataRef;
}
extern "C" {
    pub fn CGDataProviderGetInfo(provider: CGDataProviderRef) -> *mut ::std::os::raw::c_void;
}
pub const CGColorRenderingIntent_kCGRenderingIntentDefault: CGColorRenderingIntent = 0;
pub const CGColorRenderingIntent_kCGRenderingIntentAbsoluteColorimetric: CGColorRenderingIntent = 1;
pub const CGColorRenderingIntent_kCGRenderingIntentRelativeColorimetric: CGColorRenderingIntent = 2;
pub const CGColorRenderingIntent_kCGRenderingIntentPerceptual: CGColorRenderingIntent = 3;
pub const CGColorRenderingIntent_kCGRenderingIntentSaturation: CGColorRenderingIntent = 4;
pub type CGColorRenderingIntent = i32;
pub const CGColorSpaceModel_kCGColorSpaceModelUnknown: CGColorSpaceModel = -1;
pub const CGColorSpaceModel_kCGColorSpaceModelMonochrome: CGColorSpaceModel = 0;
pub const CGColorSpaceModel_kCGColorSpaceModelRGB: CGColorSpaceModel = 1;
pub const CGColorSpaceModel_kCGColorSpaceModelCMYK: CGColorSpaceModel = 2;
pub const CGColorSpaceModel_kCGColorSpaceModelLab: CGColorSpaceModel = 3;
pub const CGColorSpaceModel_kCGColorSpaceModelDeviceN: CGColorSpaceModel = 4;
pub const CGColorSpaceModel_kCGColorSpaceModelIndexed: CGColorSpaceModel = 5;
pub const CGColorSpaceModel_kCGColorSpaceModelPattern: CGColorSpaceModel = 6;
pub const CGColorSpaceModel_kCGColorSpaceModelXYZ: CGColorSpaceModel = 7;
pub type CGColorSpaceModel = i32;
extern "C" {
    pub static kCGColorSpaceGenericGray: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceGenericRGB: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceGenericCMYK: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceDisplayP3: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceGenericRGBLinear: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceAdobeRGB1998: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceSRGB: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceGenericGrayGamma2_2: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceGenericXYZ: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceGenericLab: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceACESCGLinear: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_709: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_709_PQ: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_709_HLG: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2020: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2020_sRGBGamma: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceROMMRGB: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceDCIP3: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceLinearITUR_2020: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedITUR_2020: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedLinearITUR_2020: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceLinearDisplayP3: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedDisplayP3: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedLinearDisplayP3: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2100_PQ: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2100_HLG: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceDisplayP3_PQ: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceDisplayP3_HLG: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2020_PQ: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2020_HLG: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceDisplayP3_PQ_EOTF: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceITUR_2020_PQ_EOTF: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedSRGB: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceLinearSRGB: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedLinearSRGB: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedGray: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceLinearGray: CFStringRef;
}
extern "C" {
    pub static kCGColorSpaceExtendedLinearGray: CFStringRef;
}
extern "C" {
    pub fn CGColorSpaceCreateDeviceGray() -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateDeviceRGB() -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateDeviceCMYK() -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateCalibratedGray(
        whitePoint: *const CGFloat,
        blackPoint: *const CGFloat,
        gamma: CGFloat,
    ) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateCalibratedRGB(
        whitePoint: *const CGFloat,
        blackPoint: *const CGFloat,
        gamma: *const CGFloat,
        matrix: *const CGFloat,
    ) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateLab(
        whitePoint: *const CGFloat,
        blackPoint: *const CGFloat,
        range: *const CGFloat,
    ) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateWithICCData(data: CFTypeRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateICCBased(
        nComponents: usize,
        range: *const CGFloat,
        profile: CGDataProviderRef,
        alternate: CGColorSpaceRef,
    ) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateIndexed(
        baseSpace: CGColorSpaceRef,
        lastIndex: usize,
        colorTable: *const ::std::os::raw::c_uchar,
    ) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreatePattern(baseSpace: CGColorSpaceRef) -> CGColorSpaceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColorSyncProfile {
    _unused: [u8; 0],
}
pub type ColorSyncProfileRef = *const ColorSyncProfile;
extern "C" {
    pub static kCGColorSpaceExtendedRange: CFStringRef;
}
extern "C" {
    pub fn CGColorSpaceCreateWithColorSyncProfile(
        arg1: ColorSyncProfileRef,
        options: CFDictionaryRef,
    ) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateWithName(name: CFStringRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceRetain(space: CGColorSpaceRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceRelease(space: CGColorSpaceRef);
}
extern "C" {
    pub fn CGColorSpaceGetName(space: CGColorSpaceRef) -> CFStringRef;
}
extern "C" {
    pub fn CGColorSpaceCopyName(space: CGColorSpaceRef) -> CFStringRef;
}
extern "C" {
    pub fn CGColorSpaceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGColorSpaceGetNumberOfComponents(space: CGColorSpaceRef) -> usize;
}
extern "C" {
    pub fn CGColorSpaceGetModel(space: CGColorSpaceRef) -> CGColorSpaceModel;
}
extern "C" {
    pub fn CGColorSpaceGetBaseColorSpace(space: CGColorSpaceRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceGetColorTableCount(space: CGColorSpaceRef) -> usize;
}
extern "C" {
    pub fn CGColorSpaceGetColorTable(space: CGColorSpaceRef, table: *mut u8);
}
extern "C" {
    pub fn CGColorSpaceCopyICCData(space: CGColorSpaceRef) -> CFDataRef;
}
extern "C" {
    pub fn CGColorSpaceIsWideGamutRGB(arg1: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceIsHDR(arg1: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceUsesITUR_2100TF(arg1: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceIsPQBased(s: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceIsHLGBased(s: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceSupportsOutput(space: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceCopyPropertyList(space: CGColorSpaceRef) -> CFPropertyListRef;
}
extern "C" {
    pub fn CGColorSpaceCreateWithPropertyList(plist: CFPropertyListRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceUsesExtendedRange(space: CGColorSpaceRef) -> bool;
}
extern "C" {
    pub fn CGColorSpaceCreateLinearized(space: CGColorSpaceRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateExtended(space: CGColorSpaceRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateExtendedLinearized(space: CGColorSpaceRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateCopyWithStandardRange(s: CGColorSpaceRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCreateWithICCProfile(data: CFDataRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorSpaceCopyICCProfile(space: CGColorSpaceRef) -> CFDataRef;
}
extern "C" {
    pub fn CGColorSpaceCreateWithPlatformColorSpace(
        ref_: *const ::std::os::raw::c_void,
    ) -> CGColorSpaceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPattern {
    _unused: [u8; 0],
}
pub type CGPatternRef = *mut CGPattern;
pub const CGPatternTiling_kCGPatternTilingNoDistortion: CGPatternTiling = 0;
pub const CGPatternTiling_kCGPatternTilingConstantSpacingMinimalDistortion: CGPatternTiling = 1;
pub const CGPatternTiling_kCGPatternTilingConstantSpacing: CGPatternTiling = 2;
pub type CGPatternTiling = i32;
pub type CGPatternDrawPatternCallback = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, context: CGContextRef),
>;
pub type CGPatternReleaseInfoCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPatternCallbacks {
    pub version: ::std::os::raw::c_uint,
    pub drawPattern: CGPatternDrawPatternCallback,
    pub releaseInfo: CGPatternReleaseInfoCallback,
}
extern "C" {
    pub fn CGPatternGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGPatternCreate(
        info: *mut ::std::os::raw::c_void,
        bounds: CGRect,
        matrix: CGAffineTransform,
        xStep: CGFloat,
        yStep: CGFloat,
        tiling: CGPatternTiling,
        isColored: bool,
        callbacks: *const CGPatternCallbacks,
    ) -> CGPatternRef;
}
extern "C" {
    pub fn CGPatternRetain(pattern: CGPatternRef) -> CGPatternRef;
}
extern "C" {
    pub fn CGPatternRelease(pattern: CGPatternRef);
}
extern "C" {
    pub fn CGColorCreate(space: CGColorSpaceRef, components: *const CGFloat) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateGenericGray(gray: CGFloat, alpha: CGFloat) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateGenericRGB(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateGenericCMYK(
        cyan: CGFloat,
        magenta: CGFloat,
        yellow: CGFloat,
        black: CGFloat,
        alpha: CGFloat,
    ) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateGenericGrayGamma2_2(gray: CGFloat, alpha: CGFloat) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateSRGB(
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    ) -> CGColorRef;
}
extern "C" {
    pub fn CGColorGetConstantColor(colorName: CFStringRef) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateWithPattern(
        space: CGColorSpaceRef,
        pattern: CGPatternRef,
        components: *const CGFloat,
    ) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateCopy(color: CGColorRef) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateCopyWithAlpha(color: CGColorRef, alpha: CGFloat) -> CGColorRef;
}
extern "C" {
    pub fn CGColorCreateCopyByMatchingToColorSpace(
        arg1: CGColorSpaceRef,
        intent: CGColorRenderingIntent,
        color: CGColorRef,
        options: CFDictionaryRef,
    ) -> CGColorRef;
}
extern "C" {
    pub fn CGColorRetain(color: CGColorRef) -> CGColorRef;
}
extern "C" {
    pub fn CGColorRelease(color: CGColorRef);
}
extern "C" {
    pub fn CGColorEqualToColor(color1: CGColorRef, color2: CGColorRef) -> bool;
}
extern "C" {
    pub fn CGColorGetNumberOfComponents(color: CGColorRef) -> usize;
}
extern "C" {
    pub fn CGColorGetComponents(color: CGColorRef) -> *const CGFloat;
}
extern "C" {
    pub fn CGColorGetAlpha(color: CGColorRef) -> CGFloat;
}
extern "C" {
    pub fn CGColorGetColorSpace(color: CGColorRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGColorGetPattern(color: CGColorRef) -> CGPatternRef;
}
extern "C" {
    pub fn CGColorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCGColorWhite: CFStringRef;
}
extern "C" {
    pub static kCGColorBlack: CFStringRef;
}
extern "C" {
    pub static kCGColorClear: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGFont {
    _unused: [u8; 0],
}
pub type CGFontRef = *mut CGFont;
pub type CGFontIndex = ::std::os::raw::c_ushort;
pub type CGGlyph = CGFontIndex;
pub const CGFontPostScriptFormat_kCGFontPostScriptFormatType1: CGFontPostScriptFormat = 1;
pub const CGFontPostScriptFormat_kCGFontPostScriptFormatType3: CGFontPostScriptFormat = 3;
pub const CGFontPostScriptFormat_kCGFontPostScriptFormatType42: CGFontPostScriptFormat = 42;
pub type CGFontPostScriptFormat = i32;
pub const kCGFontIndexMax: CGFontIndex = 65534;
pub const kCGFontIndexInvalid: CGFontIndex = 65535;
pub const kCGGlyphMax: CGFontIndex = 65534;
extern "C" {
    pub fn CGFontGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGFontCreateWithPlatformFont(
        platformFontReference: *mut ::std::os::raw::c_void,
    ) -> CGFontRef;
}
extern "C" {
    pub fn CGFontCreateWithDataProvider(provider: CGDataProviderRef) -> CGFontRef;
}
extern "C" {
    pub fn CGFontCreateWithFontName(name: CFStringRef) -> CGFontRef;
}
extern "C" {
    pub fn CGFontCreateCopyWithVariations(
        font: CGFontRef,
        variations: CFDictionaryRef,
    ) -> CGFontRef;
}
extern "C" {
    pub fn CGFontRetain(font: CGFontRef) -> CGFontRef;
}
extern "C" {
    pub fn CGFontRelease(font: CGFontRef);
}
extern "C" {
    pub fn CGFontGetNumberOfGlyphs(font: CGFontRef) -> usize;
}
extern "C" {
    pub fn CGFontGetUnitsPerEm(font: CGFontRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGFontCopyPostScriptName(font: CGFontRef) -> CFStringRef;
}
extern "C" {
    pub fn CGFontCopyFullName(font: CGFontRef) -> CFStringRef;
}
extern "C" {
    pub fn CGFontGetAscent(font: CGFontRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGFontGetDescent(font: CGFontRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGFontGetLeading(font: CGFontRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGFontGetCapHeight(font: CGFontRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGFontGetXHeight(font: CGFontRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGFontGetFontBBox(font: CGFontRef) -> CGRect;
}
extern "C" {
    pub fn CGFontGetItalicAngle(font: CGFontRef) -> CGFloat;
}
extern "C" {
    pub fn CGFontGetStemV(font: CGFontRef) -> CGFloat;
}
extern "C" {
    pub fn CGFontCopyVariationAxes(font: CGFontRef) -> CFArrayRef;
}
extern "C" {
    pub fn CGFontCopyVariations(font: CGFontRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGFontGetGlyphAdvances(
        font: CGFontRef,
        glyphs: *const CGGlyph,
        count: usize,
        advances: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn CGFontGetGlyphBBoxes(
        font: CGFontRef,
        glyphs: *const CGGlyph,
        count: usize,
        bboxes: *mut CGRect,
    ) -> bool;
}
extern "C" {
    pub fn CGFontGetGlyphWithGlyphName(font: CGFontRef, name: CFStringRef) -> CGGlyph;
}
extern "C" {
    pub fn CGFontCopyGlyphNameForGlyph(font: CGFontRef, glyph: CGGlyph) -> CFStringRef;
}
extern "C" {
    pub fn CGFontCanCreatePostScriptSubset(font: CGFontRef, format: CGFontPostScriptFormat)
        -> bool;
}
extern "C" {
    pub fn CGFontCreatePostScriptSubset(
        font: CGFontRef,
        subsetName: CFStringRef,
        format: CGFontPostScriptFormat,
        glyphs: *const CGGlyph,
        count: usize,
        encoding: *const CGGlyph,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CGFontCreatePostScriptEncoding(font: CGFontRef, encoding: *const CGGlyph) -> CFDataRef;
}
extern "C" {
    pub fn CGFontCopyTableTags(font: CGFontRef) -> CFArrayRef;
}
extern "C" {
    pub fn CGFontCopyTableForTag(font: CGFontRef, tag: u32) -> CFDataRef;
}
extern "C" {
    pub static kCGFontVariationAxisName: CFStringRef;
}
extern "C" {
    pub static kCGFontVariationAxisMinValue: CFStringRef;
}
extern "C" {
    pub static kCGFontVariationAxisMaxValue: CFStringRef;
}
extern "C" {
    pub static kCGFontVariationAxisDefaultValue: CFStringRef;
}
pub const CGGlyphDeprecatedEnum_CGGlyphMin: CGGlyphDeprecatedEnum = 0;
pub const CGGlyphDeprecatedEnum_CGGlyphMax: CGGlyphDeprecatedEnum = 1;
pub type CGGlyphDeprecatedEnum = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGGradient {
    _unused: [u8; 0],
}
pub type CGGradientRef = *mut CGGradient;
pub const CGGradientDrawingOptions_kCGGradientDrawsBeforeStartLocation: CGGradientDrawingOptions =
    1;
pub const CGGradientDrawingOptions_kCGGradientDrawsAfterEndLocation: CGGradientDrawingOptions = 2;
pub type CGGradientDrawingOptions = u32;
extern "C" {
    pub fn CGGradientGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGGradientCreateWithColorComponents(
        space: CGColorSpaceRef,
        components: *const CGFloat,
        locations: *const CGFloat,
        count: usize,
    ) -> CGGradientRef;
}
extern "C" {
    pub fn CGGradientCreateWithColors(
        space: CGColorSpaceRef,
        colors: CFArrayRef,
        locations: *const CGFloat,
    ) -> CGGradientRef;
}
extern "C" {
    pub fn CGGradientRetain(gradient: CGGradientRef) -> CGGradientRef;
}
extern "C" {
    pub fn CGGradientRelease(gradient: CGGradientRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGImage {
    _unused: [u8; 0],
}
pub type CGImageRef = *mut CGImage;
pub const CGImageAlphaInfo_kCGImageAlphaNone: CGImageAlphaInfo = 0;
pub const CGImageAlphaInfo_kCGImageAlphaPremultipliedLast: CGImageAlphaInfo = 1;
pub const CGImageAlphaInfo_kCGImageAlphaPremultipliedFirst: CGImageAlphaInfo = 2;
pub const CGImageAlphaInfo_kCGImageAlphaLast: CGImageAlphaInfo = 3;
pub const CGImageAlphaInfo_kCGImageAlphaFirst: CGImageAlphaInfo = 4;
pub const CGImageAlphaInfo_kCGImageAlphaNoneSkipLast: CGImageAlphaInfo = 5;
pub const CGImageAlphaInfo_kCGImageAlphaNoneSkipFirst: CGImageAlphaInfo = 6;
pub const CGImageAlphaInfo_kCGImageAlphaOnly: CGImageAlphaInfo = 7;
pub type CGImageAlphaInfo = u32;
pub const CGImageByteOrderInfo_kCGImageByteOrderMask: CGImageByteOrderInfo = 28672;
pub const CGImageByteOrderInfo_kCGImageByteOrderDefault: CGImageByteOrderInfo = 0;
pub const CGImageByteOrderInfo_kCGImageByteOrder16Little: CGImageByteOrderInfo = 4096;
pub const CGImageByteOrderInfo_kCGImageByteOrder32Little: CGImageByteOrderInfo = 8192;
pub const CGImageByteOrderInfo_kCGImageByteOrder16Big: CGImageByteOrderInfo = 12288;
pub const CGImageByteOrderInfo_kCGImageByteOrder32Big: CGImageByteOrderInfo = 16384;
pub type CGImageByteOrderInfo = u32;
pub const CGImagePixelFormatInfo_kCGImagePixelFormatMask: CGImagePixelFormatInfo = 983040;
pub const CGImagePixelFormatInfo_kCGImagePixelFormatPacked: CGImagePixelFormatInfo = 0;
pub const CGImagePixelFormatInfo_kCGImagePixelFormatRGB555: CGImagePixelFormatInfo = 65536;
pub const CGImagePixelFormatInfo_kCGImagePixelFormatRGB565: CGImagePixelFormatInfo = 131072;
pub const CGImagePixelFormatInfo_kCGImagePixelFormatRGB101010: CGImagePixelFormatInfo = 196608;
pub const CGImagePixelFormatInfo_kCGImagePixelFormatRGBCIF10: CGImagePixelFormatInfo = 262144;
pub type CGImagePixelFormatInfo = u32;
pub const CGBitmapInfo_kCGBitmapAlphaInfoMask: CGBitmapInfo = 31;
pub const CGBitmapInfo_kCGBitmapFloatInfoMask: CGBitmapInfo = 3840;
pub const CGBitmapInfo_kCGBitmapFloatComponents: CGBitmapInfo = 256;
pub const CGBitmapInfo_kCGBitmapByteOrderMask: CGBitmapInfo = 28672;
pub const CGBitmapInfo_kCGBitmapByteOrderDefault: CGBitmapInfo = 0;
pub const CGBitmapInfo_kCGBitmapByteOrder16Little: CGBitmapInfo = 4096;
pub const CGBitmapInfo_kCGBitmapByteOrder32Little: CGBitmapInfo = 8192;
pub const CGBitmapInfo_kCGBitmapByteOrder16Big: CGBitmapInfo = 12288;
pub const CGBitmapInfo_kCGBitmapByteOrder32Big: CGBitmapInfo = 16384;
pub type CGBitmapInfo = u32;
extern "C" {
    pub static kCGBitmapByteOrder16Host: CGBitmapInfo;
}
extern "C" {
    pub static kCGBitmapByteOrder32Host: CGBitmapInfo;
}
extern "C" {
    pub fn CGImageGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGImageCreate(
        width: usize,
        height: usize,
        bitsPerComponent: usize,
        bitsPerPixel: usize,
        bytesPerRow: usize,
        space: CGColorSpaceRef,
        bitmapInfo: CGBitmapInfo,
        provider: CGDataProviderRef,
        decode: *const CGFloat,
        shouldInterpolate: bool,
        intent: CGColorRenderingIntent,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGImageMaskCreate(
        width: usize,
        height: usize,
        bitsPerComponent: usize,
        bitsPerPixel: usize,
        bytesPerRow: usize,
        provider: CGDataProviderRef,
        decode: *const CGFloat,
        shouldInterpolate: bool,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateCopy(image: CGImageRef) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateWithJPEGDataProvider(
        source: CGDataProviderRef,
        decode: *const CGFloat,
        shouldInterpolate: bool,
        intent: CGColorRenderingIntent,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateWithPNGDataProvider(
        source: CGDataProviderRef,
        decode: *const CGFloat,
        shouldInterpolate: bool,
        intent: CGColorRenderingIntent,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateWithImageInRect(image: CGImageRef, rect: CGRect) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateWithMask(image: CGImageRef, mask: CGImageRef) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateWithMaskingColors(
        image: CGImageRef,
        components: *const CGFloat,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGImageCreateCopyWithColorSpace(image: CGImageRef, space: CGColorSpaceRef)
        -> CGImageRef;
}
extern "C" {
    pub fn CGImageRetain(image: CGImageRef) -> CGImageRef;
}
extern "C" {
    pub fn CGImageRelease(image: CGImageRef);
}
extern "C" {
    pub fn CGImageIsMask(image: CGImageRef) -> bool;
}
extern "C" {
    pub fn CGImageGetWidth(image: CGImageRef) -> usize;
}
extern "C" {
    pub fn CGImageGetHeight(image: CGImageRef) -> usize;
}
extern "C" {
    pub fn CGImageGetBitsPerComponent(image: CGImageRef) -> usize;
}
extern "C" {
    pub fn CGImageGetBitsPerPixel(image: CGImageRef) -> usize;
}
extern "C" {
    pub fn CGImageGetBytesPerRow(image: CGImageRef) -> usize;
}
extern "C" {
    pub fn CGImageGetColorSpace(image: CGImageRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGImageGetAlphaInfo(image: CGImageRef) -> CGImageAlphaInfo;
}
extern "C" {
    pub fn CGImageGetDataProvider(image: CGImageRef) -> CGDataProviderRef;
}
extern "C" {
    pub fn CGImageGetDecode(image: CGImageRef) -> *const CGFloat;
}
extern "C" {
    pub fn CGImageGetShouldInterpolate(image: CGImageRef) -> bool;
}
extern "C" {
    pub fn CGImageGetRenderingIntent(image: CGImageRef) -> CGColorRenderingIntent;
}
extern "C" {
    pub fn CGImageGetBitmapInfo(image: CGImageRef) -> CGBitmapInfo;
}
extern "C" {
    pub fn CGImageGetByteOrderInfo(image: CGImageRef) -> CGImageByteOrderInfo;
}
extern "C" {
    pub fn CGImageGetPixelFormatInfo(image: CGImageRef) -> CGImagePixelFormatInfo;
}
extern "C" {
    pub fn CGImageGetUTType(image: CGImageRef) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPath {
    _unused: [u8; 0],
}
pub type CGMutablePathRef = *mut CGPath;
pub type CGPathRef = *const CGPath;
pub const CGLineJoin_kCGLineJoinMiter: CGLineJoin = 0;
pub const CGLineJoin_kCGLineJoinRound: CGLineJoin = 1;
pub const CGLineJoin_kCGLineJoinBevel: CGLineJoin = 2;
pub type CGLineJoin = i32;
pub const CGLineCap_kCGLineCapButt: CGLineCap = 0;
pub const CGLineCap_kCGLineCapRound: CGLineCap = 1;
pub const CGLineCap_kCGLineCapSquare: CGLineCap = 2;
pub type CGLineCap = i32;
extern "C" {
    pub fn CGPathGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGPathCreateMutable() -> CGMutablePathRef;
}
extern "C" {
    pub fn CGPathCreateCopy(path: CGPathRef) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyByTransformingPath(
        path: CGPathRef,
        transform: *const CGAffineTransform,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateMutableCopy(path: CGPathRef) -> CGMutablePathRef;
}
extern "C" {
    pub fn CGPathCreateMutableCopyByTransformingPath(
        path: CGPathRef,
        transform: *const CGAffineTransform,
    ) -> CGMutablePathRef;
}
extern "C" {
    pub fn CGPathCreateWithRect(rect: CGRect, transform: *const CGAffineTransform) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateWithEllipseInRect(
        rect: CGRect,
        transform: *const CGAffineTransform,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateWithRoundedRect(
        rect: CGRect,
        cornerWidth: CGFloat,
        cornerHeight: CGFloat,
        transform: *const CGAffineTransform,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathAddRoundedRect(
        path: CGMutablePathRef,
        transform: *const CGAffineTransform,
        rect: CGRect,
        cornerWidth: CGFloat,
        cornerHeight: CGFloat,
    );
}
extern "C" {
    pub fn CGPathCreateCopyByDashingPath(
        path: CGPathRef,
        transform: *const CGAffineTransform,
        phase: CGFloat,
        lengths: *const CGFloat,
        count: usize,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyByStrokingPath(
        path: CGPathRef,
        transform: *const CGAffineTransform,
        lineWidth: CGFloat,
        lineCap: CGLineCap,
        lineJoin: CGLineJoin,
        miterLimit: CGFloat,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathRetain(path: CGPathRef) -> CGPathRef;
}
extern "C" {
    pub fn CGPathRelease(path: CGPathRef);
}
extern "C" {
    pub fn CGPathEqualToPath(path1: CGPathRef, path2: CGPathRef) -> bool;
}
extern "C" {
    pub fn CGPathMoveToPoint(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        x: CGFloat,
        y: CGFloat,
    );
}
extern "C" {
    pub fn CGPathAddLineToPoint(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        x: CGFloat,
        y: CGFloat,
    );
}
extern "C" {
    pub fn CGPathAddQuadCurveToPoint(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        cpx: CGFloat,
        cpy: CGFloat,
        x: CGFloat,
        y: CGFloat,
    );
}
extern "C" {
    pub fn CGPathAddCurveToPoint(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        cp1x: CGFloat,
        cp1y: CGFloat,
        cp2x: CGFloat,
        cp2y: CGFloat,
        x: CGFloat,
        y: CGFloat,
    );
}
extern "C" {
    pub fn CGPathCloseSubpath(path: CGMutablePathRef);
}
extern "C" {
    pub fn CGPathAddRect(path: CGMutablePathRef, m: *const CGAffineTransform, rect: CGRect);
}
extern "C" {
    pub fn CGPathAddRects(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        rects: *const CGRect,
        count: usize,
    );
}
extern "C" {
    pub fn CGPathAddLines(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        points: *const CGPoint,
        count: usize,
    );
}
extern "C" {
    pub fn CGPathAddEllipseInRect(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        rect: CGRect,
    );
}
extern "C" {
    pub fn CGPathAddRelativeArc(
        path: CGMutablePathRef,
        matrix: *const CGAffineTransform,
        x: CGFloat,
        y: CGFloat,
        radius: CGFloat,
        startAngle: CGFloat,
        delta: CGFloat,
    );
}
extern "C" {
    pub fn CGPathAddArc(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        x: CGFloat,
        y: CGFloat,
        radius: CGFloat,
        startAngle: CGFloat,
        endAngle: CGFloat,
        clockwise: bool,
    );
}
extern "C" {
    pub fn CGPathAddArcToPoint(
        path: CGMutablePathRef,
        m: *const CGAffineTransform,
        x1: CGFloat,
        y1: CGFloat,
        x2: CGFloat,
        y2: CGFloat,
        radius: CGFloat,
    );
}
extern "C" {
    pub fn CGPathAddPath(path1: CGMutablePathRef, m: *const CGAffineTransform, path2: CGPathRef);
}
extern "C" {
    pub fn CGPathIsEmpty(path: CGPathRef) -> bool;
}
extern "C" {
    pub fn CGPathIsRect(path: CGPathRef, rect: *mut CGRect) -> bool;
}
extern "C" {
    pub fn CGPathGetCurrentPoint(path: CGPathRef) -> CGPoint;
}
extern "C" {
    pub fn CGPathGetBoundingBox(path: CGPathRef) -> CGRect;
}
extern "C" {
    pub fn CGPathGetPathBoundingBox(path: CGPathRef) -> CGRect;
}
extern "C" {
    pub fn CGPathContainsPoint(
        path: CGPathRef,
        m: *const CGAffineTransform,
        point: CGPoint,
        eoFill: bool,
    ) -> bool;
}
pub const CGPathElementType_kCGPathElementMoveToPoint: CGPathElementType = 0;
pub const CGPathElementType_kCGPathElementAddLineToPoint: CGPathElementType = 1;
pub const CGPathElementType_kCGPathElementAddQuadCurveToPoint: CGPathElementType = 2;
pub const CGPathElementType_kCGPathElementAddCurveToPoint: CGPathElementType = 3;
pub const CGPathElementType_kCGPathElementCloseSubpath: CGPathElementType = 4;
pub type CGPathElementType = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPathElement {
    pub type_: CGPathElementType,
    pub points: *mut CGPoint,
}
pub type CGPathApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, element: *const CGPathElement),
>;
extern "C" {
    pub fn CGPathApply(
        path: CGPathRef,
        info: *mut ::std::os::raw::c_void,
        function: CGPathApplierFunction,
    );
}
pub type CGPathApplyBlock = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn CGPathApplyWithBlock(path: CGPathRef, block: CGPathApplyBlock);
}
extern "C" {
    pub fn CGPathCreateCopyByNormalizing(path: CGPathRef, evenOddFillRule: bool) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyByUnioningPath(
        path: CGPathRef,
        maskPath: CGPathRef,
        evenOddFillRule: bool,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyByIntersectingPath(
        path: CGPathRef,
        maskPath: CGPathRef,
        evenOddFillRule: bool,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyBySubtractingPath(
        path: CGPathRef,
        maskPath: CGPathRef,
        evenOddFillRule: bool,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyBySymmetricDifferenceOfPath(
        path: CGPathRef,
        maskPath: CGPathRef,
        evenOddFillRule: bool,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyOfLineBySubtractingPath(
        path: CGPathRef,
        maskPath: CGPathRef,
        evenOddFillRule: bool,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateCopyOfLineByIntersectingPath(
        path: CGPathRef,
        maskPath: CGPathRef,
        evenOddFillRule: bool,
    ) -> CGPathRef;
}
extern "C" {
    pub fn CGPathCreateSeparateComponents(path: CGPathRef, evenOddFillRule: bool) -> CFArrayRef;
}
extern "C" {
    pub fn CGPathCreateCopyByFlattening(path: CGPathRef, flatteningThreshold: CGFloat)
        -> CGPathRef;
}
extern "C" {
    pub fn CGPathIntersectsPath(path1: CGPathRef, path2: CGPathRef, evenOddFillRule: bool) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFDocument {
    _unused: [u8; 0],
}
pub type CGPDFDocumentRef = *mut CGPDFDocument;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFPage {
    _unused: [u8; 0],
}
pub type CGPDFPageRef = *mut CGPDFPage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFDictionary {
    _unused: [u8; 0],
}
pub type CGPDFDictionaryRef = *mut CGPDFDictionary;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFArray {
    _unused: [u8; 0],
}
pub type CGPDFArrayRef = *mut CGPDFArray;
pub type CGPDFBoolean = ::std::os::raw::c_uchar;
pub type CGPDFInteger = ::std::os::raw::c_long;
pub type CGPDFReal = CGFloat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFObject {
    _unused: [u8; 0],
}
pub type CGPDFObjectRef = *mut CGPDFObject;
pub const CGPDFObjectType_kCGPDFObjectTypeNull: CGPDFObjectType = 1;
pub const CGPDFObjectType_kCGPDFObjectTypeBoolean: CGPDFObjectType = 2;
pub const CGPDFObjectType_kCGPDFObjectTypeInteger: CGPDFObjectType = 3;
pub const CGPDFObjectType_kCGPDFObjectTypeReal: CGPDFObjectType = 4;
pub const CGPDFObjectType_kCGPDFObjectTypeName: CGPDFObjectType = 5;
pub const CGPDFObjectType_kCGPDFObjectTypeString: CGPDFObjectType = 6;
pub const CGPDFObjectType_kCGPDFObjectTypeArray: CGPDFObjectType = 7;
pub const CGPDFObjectType_kCGPDFObjectTypeDictionary: CGPDFObjectType = 8;
pub const CGPDFObjectType_kCGPDFObjectTypeStream: CGPDFObjectType = 9;
pub type CGPDFObjectType = i32;
extern "C" {
    pub fn CGPDFObjectGetType(object: CGPDFObjectRef) -> CGPDFObjectType;
}
extern "C" {
    pub fn CGPDFObjectGetValue(
        object: CGPDFObjectRef,
        type_: CGPDFObjectType,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFStream {
    _unused: [u8; 0],
}
pub type CGPDFStreamRef = *mut CGPDFStream;
pub const CGPDFDataFormat_CGPDFDataFormatRaw: CGPDFDataFormat = 0;
pub const CGPDFDataFormat_CGPDFDataFormatJPEGEncoded: CGPDFDataFormat = 1;
pub const CGPDFDataFormat_CGPDFDataFormatJPEG2000: CGPDFDataFormat = 2;
pub type CGPDFDataFormat = i32;
extern "C" {
    pub fn CGPDFStreamGetDictionary(stream: CGPDFStreamRef) -> CGPDFDictionaryRef;
}
extern "C" {
    pub fn CGPDFStreamCopyData(stream: CGPDFStreamRef, format: *mut CGPDFDataFormat) -> CFDataRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFString {
    _unused: [u8; 0],
}
pub type CGPDFStringRef = *mut CGPDFString;
extern "C" {
    pub fn CGPDFStringGetLength(string: CGPDFStringRef) -> usize;
}
extern "C" {
    pub fn CGPDFStringGetBytePtr(string: CGPDFStringRef) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn CGPDFStringCopyTextString(string: CGPDFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CGPDFStringCopyDate(string: CGPDFStringRef) -> CFDateRef;
}
extern "C" {
    pub fn CGPDFArrayGetCount(array: CGPDFArrayRef) -> usize;
}
extern "C" {
    pub fn CGPDFArrayGetObject(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFObjectRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetNull(array: CGPDFArrayRef, index: usize) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetBoolean(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFBoolean,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetInteger(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFInteger,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetNumber(array: CGPDFArrayRef, index: usize, value: *mut CGPDFReal) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetName(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetString(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFStringRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetArray(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFArrayRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetDictionary(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFDictionaryRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFArrayGetStream(
        array: CGPDFArrayRef,
        index: usize,
        value: *mut CGPDFStreamRef,
    ) -> bool;
}
pub type CGPDFArrayApplierBlock = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn CGPDFArrayApplyBlock(
        array: CGPDFArrayRef,
        block: CGPDFArrayApplierBlock,
        info: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CGPDFDictionaryGetCount(dict: CGPDFDictionaryRef) -> usize;
}
extern "C" {
    pub fn CGPDFDictionaryGetObject(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFObjectRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetBoolean(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFBoolean,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetInteger(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFInteger,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetNumber(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFReal,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetName(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetString(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFStringRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetArray(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFArrayRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetDictionary(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFDictionaryRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDictionaryGetStream(
        dict: CGPDFDictionaryRef,
        key: *const ::std::os::raw::c_char,
        value: *mut CGPDFStreamRef,
    ) -> bool;
}
pub type CGPDFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_char,
        value: CGPDFObjectRef,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CGPDFDictionaryApplyFunction(
        dict: CGPDFDictionaryRef,
        function: CGPDFDictionaryApplierFunction,
        info: *mut ::std::os::raw::c_void,
    );
}
pub type CGPDFDictionaryApplierBlock = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn CGPDFDictionaryApplyBlock(
        dict: CGPDFDictionaryRef,
        block: CGPDFDictionaryApplierBlock,
        info: *mut ::std::os::raw::c_void,
    );
}
pub const CGPDFBox_kCGPDFMediaBox: CGPDFBox = 0;
pub const CGPDFBox_kCGPDFCropBox: CGPDFBox = 1;
pub const CGPDFBox_kCGPDFBleedBox: CGPDFBox = 2;
pub const CGPDFBox_kCGPDFTrimBox: CGPDFBox = 3;
pub const CGPDFBox_kCGPDFArtBox: CGPDFBox = 4;
pub type CGPDFBox = i32;
extern "C" {
    pub fn CGPDFPageRetain(page: CGPDFPageRef) -> CGPDFPageRef;
}
extern "C" {
    pub fn CGPDFPageRelease(page: CGPDFPageRef);
}
extern "C" {
    pub fn CGPDFPageGetDocument(page: CGPDFPageRef) -> CGPDFDocumentRef;
}
extern "C" {
    pub fn CGPDFPageGetPageNumber(page: CGPDFPageRef) -> usize;
}
extern "C" {
    pub fn CGPDFPageGetBoxRect(page: CGPDFPageRef, box_: CGPDFBox) -> CGRect;
}
extern "C" {
    pub fn CGPDFPageGetRotationAngle(page: CGPDFPageRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CGPDFPageGetDrawingTransform(
        page: CGPDFPageRef,
        box_: CGPDFBox,
        rect: CGRect,
        rotate: ::std::os::raw::c_int,
        preserveAspectRatio: bool,
    ) -> CGAffineTransform;
}
extern "C" {
    pub fn CGPDFPageGetDictionary(page: CGPDFPageRef) -> CGPDFDictionaryRef;
}
extern "C" {
    pub fn CGPDFPageGetTypeID() -> CFTypeID;
}
pub const CGPDFAccessPermissions_kCGPDFAllowsLowQualityPrinting: CGPDFAccessPermissions = 1;
pub const CGPDFAccessPermissions_kCGPDFAllowsHighQualityPrinting: CGPDFAccessPermissions = 2;
pub const CGPDFAccessPermissions_kCGPDFAllowsDocumentChanges: CGPDFAccessPermissions = 4;
pub const CGPDFAccessPermissions_kCGPDFAllowsDocumentAssembly: CGPDFAccessPermissions = 8;
pub const CGPDFAccessPermissions_kCGPDFAllowsContentCopying: CGPDFAccessPermissions = 16;
pub const CGPDFAccessPermissions_kCGPDFAllowsContentAccessibility: CGPDFAccessPermissions = 32;
pub const CGPDFAccessPermissions_kCGPDFAllowsCommenting: CGPDFAccessPermissions = 64;
pub const CGPDFAccessPermissions_kCGPDFAllowsFormFieldEntry: CGPDFAccessPermissions = 128;
pub type CGPDFAccessPermissions = u32;
extern "C" {
    pub static kCGPDFOutlineTitle: CFStringRef;
}
extern "C" {
    pub static kCGPDFOutlineChildren: CFStringRef;
}
extern "C" {
    pub static kCGPDFOutlineDestination: CFStringRef;
}
extern "C" {
    pub static kCGPDFOutlineDestinationRect: CFStringRef;
}
extern "C" {
    pub fn CGPDFDocumentCreateWithProvider(provider: CGDataProviderRef) -> CGPDFDocumentRef;
}
extern "C" {
    pub fn CGPDFDocumentCreateWithURL(url: CFURLRef) -> CGPDFDocumentRef;
}
extern "C" {
    pub fn CGPDFDocumentRetain(document: CGPDFDocumentRef) -> CGPDFDocumentRef;
}
extern "C" {
    pub fn CGPDFDocumentRelease(document: CGPDFDocumentRef);
}
extern "C" {
    pub fn CGPDFDocumentGetVersion(
        document: CGPDFDocumentRef,
        majorVersion: *mut ::std::os::raw::c_int,
        minorVersion: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CGPDFDocumentIsEncrypted(document: CGPDFDocumentRef) -> bool;
}
extern "C" {
    pub fn CGPDFDocumentUnlockWithPassword(
        document: CGPDFDocumentRef,
        password: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFDocumentIsUnlocked(document: CGPDFDocumentRef) -> bool;
}
extern "C" {
    pub fn CGPDFDocumentAllowsPrinting(document: CGPDFDocumentRef) -> bool;
}
extern "C" {
    pub fn CGPDFDocumentAllowsCopying(document: CGPDFDocumentRef) -> bool;
}
extern "C" {
    pub fn CGPDFDocumentGetNumberOfPages(document: CGPDFDocumentRef) -> usize;
}
extern "C" {
    pub fn CGPDFDocumentGetPage(document: CGPDFDocumentRef, pageNumber: usize) -> CGPDFPageRef;
}
extern "C" {
    pub fn CGPDFDocumentGetCatalog(document: CGPDFDocumentRef) -> CGPDFDictionaryRef;
}
extern "C" {
    pub fn CGPDFDocumentGetInfo(document: CGPDFDocumentRef) -> CGPDFDictionaryRef;
}
extern "C" {
    pub fn CGPDFDocumentGetID(document: CGPDFDocumentRef) -> CGPDFArrayRef;
}
extern "C" {
    pub fn CGPDFDocumentGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGPDFDocumentGetOutline(document: CGPDFDocumentRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGPDFDocumentGetAccessPermissions(document: CGPDFDocumentRef) -> CGPDFAccessPermissions;
}
extern "C" {
    pub fn CGPDFDocumentGetMediaBox(
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    ) -> CGRect;
}
extern "C" {
    pub fn CGPDFDocumentGetCropBox(
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    ) -> CGRect;
}
extern "C" {
    pub fn CGPDFDocumentGetBleedBox(
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    ) -> CGRect;
}
extern "C" {
    pub fn CGPDFDocumentGetTrimBox(
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    ) -> CGRect;
}
extern "C" {
    pub fn CGPDFDocumentGetArtBox(
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    ) -> CGRect;
}
extern "C" {
    pub fn CGPDFDocumentGetRotationAngle(
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGShading {
    _unused: [u8; 0],
}
pub type CGShadingRef = *mut CGShading;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGFunction {
    _unused: [u8; 0],
}
pub type CGFunctionRef = *mut CGFunction;
pub type CGFunctionEvaluateCallback = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, in_: *const CGFloat, out: *mut CGFloat),
>;
pub type CGFunctionReleaseInfoCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGFunctionCallbacks {
    pub version: ::std::os::raw::c_uint,
    pub evaluate: CGFunctionEvaluateCallback,
    pub releaseInfo: CGFunctionReleaseInfoCallback,
}
extern "C" {
    pub fn CGFunctionGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGFunctionCreate(
        info: *mut ::std::os::raw::c_void,
        domainDimension: usize,
        domain: *const CGFloat,
        rangeDimension: usize,
        range: *const CGFloat,
        callbacks: *const CGFunctionCallbacks,
    ) -> CGFunctionRef;
}
extern "C" {
    pub fn CGFunctionRetain(function: CGFunctionRef) -> CGFunctionRef;
}
extern "C" {
    pub fn CGFunctionRelease(function: CGFunctionRef);
}
extern "C" {
    pub fn CGShadingGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGShadingCreateAxial(
        space: CGColorSpaceRef,
        start: CGPoint,
        end: CGPoint,
        function: CGFunctionRef,
        extendStart: bool,
        extendEnd: bool,
    ) -> CGShadingRef;
}
extern "C" {
    pub fn CGShadingCreateRadial(
        space: CGColorSpaceRef,
        start: CGPoint,
        startRadius: CGFloat,
        end: CGPoint,
        endRadius: CGFloat,
        function: CGFunctionRef,
        extendStart: bool,
        extendEnd: bool,
    ) -> CGShadingRef;
}
extern "C" {
    pub fn CGShadingRetain(shading: CGShadingRef) -> CGShadingRef;
}
extern "C" {
    pub fn CGShadingRelease(shading: CGShadingRef);
}
pub const CGPathDrawingMode_kCGPathFill: CGPathDrawingMode = 0;
pub const CGPathDrawingMode_kCGPathEOFill: CGPathDrawingMode = 1;
pub const CGPathDrawingMode_kCGPathStroke: CGPathDrawingMode = 2;
pub const CGPathDrawingMode_kCGPathFillStroke: CGPathDrawingMode = 3;
pub const CGPathDrawingMode_kCGPathEOFillStroke: CGPathDrawingMode = 4;
pub type CGPathDrawingMode = i32;
pub const CGTextDrawingMode_kCGTextFill: CGTextDrawingMode = 0;
pub const CGTextDrawingMode_kCGTextStroke: CGTextDrawingMode = 1;
pub const CGTextDrawingMode_kCGTextFillStroke: CGTextDrawingMode = 2;
pub const CGTextDrawingMode_kCGTextInvisible: CGTextDrawingMode = 3;
pub const CGTextDrawingMode_kCGTextFillClip: CGTextDrawingMode = 4;
pub const CGTextDrawingMode_kCGTextStrokeClip: CGTextDrawingMode = 5;
pub const CGTextDrawingMode_kCGTextFillStrokeClip: CGTextDrawingMode = 6;
pub const CGTextDrawingMode_kCGTextClip: CGTextDrawingMode = 7;
pub type CGTextDrawingMode = i32;
pub const CGTextEncoding_kCGEncodingFontSpecific: CGTextEncoding = 0;
pub const CGTextEncoding_kCGEncodingMacRoman: CGTextEncoding = 1;
pub type CGTextEncoding = i32;
pub const CGInterpolationQuality_kCGInterpolationDefault: CGInterpolationQuality = 0;
pub const CGInterpolationQuality_kCGInterpolationNone: CGInterpolationQuality = 1;
pub const CGInterpolationQuality_kCGInterpolationLow: CGInterpolationQuality = 2;
pub const CGInterpolationQuality_kCGInterpolationMedium: CGInterpolationQuality = 4;
pub const CGInterpolationQuality_kCGInterpolationHigh: CGInterpolationQuality = 3;
pub type CGInterpolationQuality = i32;
pub const CGBlendMode_kCGBlendModeNormal: CGBlendMode = 0;
pub const CGBlendMode_kCGBlendModeMultiply: CGBlendMode = 1;
pub const CGBlendMode_kCGBlendModeScreen: CGBlendMode = 2;
pub const CGBlendMode_kCGBlendModeOverlay: CGBlendMode = 3;
pub const CGBlendMode_kCGBlendModeDarken: CGBlendMode = 4;
pub const CGBlendMode_kCGBlendModeLighten: CGBlendMode = 5;
pub const CGBlendMode_kCGBlendModeColorDodge: CGBlendMode = 6;
pub const CGBlendMode_kCGBlendModeColorBurn: CGBlendMode = 7;
pub const CGBlendMode_kCGBlendModeSoftLight: CGBlendMode = 8;
pub const CGBlendMode_kCGBlendModeHardLight: CGBlendMode = 9;
pub const CGBlendMode_kCGBlendModeDifference: CGBlendMode = 10;
pub const CGBlendMode_kCGBlendModeExclusion: CGBlendMode = 11;
pub const CGBlendMode_kCGBlendModeHue: CGBlendMode = 12;
pub const CGBlendMode_kCGBlendModeSaturation: CGBlendMode = 13;
pub const CGBlendMode_kCGBlendModeColor: CGBlendMode = 14;
pub const CGBlendMode_kCGBlendModeLuminosity: CGBlendMode = 15;
pub const CGBlendMode_kCGBlendModeClear: CGBlendMode = 16;
pub const CGBlendMode_kCGBlendModeCopy: CGBlendMode = 17;
pub const CGBlendMode_kCGBlendModeSourceIn: CGBlendMode = 18;
pub const CGBlendMode_kCGBlendModeSourceOut: CGBlendMode = 19;
pub const CGBlendMode_kCGBlendModeSourceAtop: CGBlendMode = 20;
pub const CGBlendMode_kCGBlendModeDestinationOver: CGBlendMode = 21;
pub const CGBlendMode_kCGBlendModeDestinationIn: CGBlendMode = 22;
pub const CGBlendMode_kCGBlendModeDestinationOut: CGBlendMode = 23;
pub const CGBlendMode_kCGBlendModeDestinationAtop: CGBlendMode = 24;
pub const CGBlendMode_kCGBlendModeXOR: CGBlendMode = 25;
pub const CGBlendMode_kCGBlendModePlusDarker: CGBlendMode = 26;
pub const CGBlendMode_kCGBlendModePlusLighter: CGBlendMode = 27;
pub type CGBlendMode = i32;
extern "C" {
    pub fn CGContextGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGContextSaveGState(c: CGContextRef);
}
extern "C" {
    pub fn CGContextRestoreGState(c: CGContextRef);
}
extern "C" {
    pub fn CGContextScaleCTM(c: CGContextRef, sx: CGFloat, sy: CGFloat);
}
extern "C" {
    pub fn CGContextTranslateCTM(c: CGContextRef, tx: CGFloat, ty: CGFloat);
}
extern "C" {
    pub fn CGContextRotateCTM(c: CGContextRef, angle: CGFloat);
}
extern "C" {
    pub fn CGContextConcatCTM(c: CGContextRef, transform: CGAffineTransform);
}
extern "C" {
    pub fn CGContextGetCTM(c: CGContextRef) -> CGAffineTransform;
}
extern "C" {
    pub fn CGContextSetLineWidth(c: CGContextRef, width: CGFloat);
}
extern "C" {
    pub fn CGContextSetLineCap(c: CGContextRef, cap: CGLineCap);
}
extern "C" {
    pub fn CGContextSetLineJoin(c: CGContextRef, join: CGLineJoin);
}
extern "C" {
    pub fn CGContextSetMiterLimit(c: CGContextRef, limit: CGFloat);
}
extern "C" {
    pub fn CGContextSetLineDash(
        c: CGContextRef,
        phase: CGFloat,
        lengths: *const CGFloat,
        count: usize,
    );
}
extern "C" {
    pub fn CGContextSetFlatness(c: CGContextRef, flatness: CGFloat);
}
extern "C" {
    pub fn CGContextSetAlpha(c: CGContextRef, alpha: CGFloat);
}
extern "C" {
    pub fn CGContextSetBlendMode(c: CGContextRef, mode: CGBlendMode);
}
extern "C" {
    pub fn CGContextBeginPath(c: CGContextRef);
}
extern "C" {
    pub fn CGContextMoveToPoint(c: CGContextRef, x: CGFloat, y: CGFloat);
}
extern "C" {
    pub fn CGContextAddLineToPoint(c: CGContextRef, x: CGFloat, y: CGFloat);
}
extern "C" {
    pub fn CGContextAddCurveToPoint(
        c: CGContextRef,
        cp1x: CGFloat,
        cp1y: CGFloat,
        cp2x: CGFloat,
        cp2y: CGFloat,
        x: CGFloat,
        y: CGFloat,
    );
}
extern "C" {
    pub fn CGContextAddQuadCurveToPoint(
        c: CGContextRef,
        cpx: CGFloat,
        cpy: CGFloat,
        x: CGFloat,
        y: CGFloat,
    );
}
extern "C" {
    pub fn CGContextClosePath(c: CGContextRef);
}
extern "C" {
    pub fn CGContextAddRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextAddRects(c: CGContextRef, rects: *const CGRect, count: usize);
}
extern "C" {
    pub fn CGContextAddLines(c: CGContextRef, points: *const CGPoint, count: usize);
}
extern "C" {
    pub fn CGContextAddEllipseInRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextAddArc(
        c: CGContextRef,
        x: CGFloat,
        y: CGFloat,
        radius: CGFloat,
        startAngle: CGFloat,
        endAngle: CGFloat,
        clockwise: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn CGContextAddArcToPoint(
        c: CGContextRef,
        x1: CGFloat,
        y1: CGFloat,
        x2: CGFloat,
        y2: CGFloat,
        radius: CGFloat,
    );
}
extern "C" {
    pub fn CGContextAddPath(c: CGContextRef, path: CGPathRef);
}
extern "C" {
    pub fn CGContextReplacePathWithStrokedPath(c: CGContextRef);
}
extern "C" {
    pub fn CGContextIsPathEmpty(c: CGContextRef) -> bool;
}
extern "C" {
    pub fn CGContextGetPathCurrentPoint(c: CGContextRef) -> CGPoint;
}
extern "C" {
    pub fn CGContextGetPathBoundingBox(c: CGContextRef) -> CGRect;
}
extern "C" {
    pub fn CGContextCopyPath(c: CGContextRef) -> CGPathRef;
}
extern "C" {
    pub fn CGContextPathContainsPoint(
        c: CGContextRef,
        point: CGPoint,
        mode: CGPathDrawingMode,
    ) -> bool;
}
extern "C" {
    pub fn CGContextDrawPath(c: CGContextRef, mode: CGPathDrawingMode);
}
extern "C" {
    pub fn CGContextFillPath(c: CGContextRef);
}
extern "C" {
    pub fn CGContextEOFillPath(c: CGContextRef);
}
extern "C" {
    pub fn CGContextStrokePath(c: CGContextRef);
}
extern "C" {
    pub fn CGContextFillRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextFillRects(c: CGContextRef, rects: *const CGRect, count: usize);
}
extern "C" {
    pub fn CGContextStrokeRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextStrokeRectWithWidth(c: CGContextRef, rect: CGRect, width: CGFloat);
}
extern "C" {
    pub fn CGContextClearRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextFillEllipseInRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextStrokeEllipseInRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextStrokeLineSegments(c: CGContextRef, points: *const CGPoint, count: usize);
}
extern "C" {
    pub fn CGContextClip(c: CGContextRef);
}
extern "C" {
    pub fn CGContextEOClip(c: CGContextRef);
}
extern "C" {
    pub fn CGContextResetClip(c: CGContextRef);
}
extern "C" {
    pub fn CGContextClipToMask(c: CGContextRef, rect: CGRect, mask: CGImageRef);
}
extern "C" {
    pub fn CGContextGetClipBoundingBox(c: CGContextRef) -> CGRect;
}
extern "C" {
    pub fn CGContextClipToRect(c: CGContextRef, rect: CGRect);
}
extern "C" {
    pub fn CGContextClipToRects(c: CGContextRef, rects: *const CGRect, count: usize);
}
extern "C" {
    pub fn CGContextSetFillColorWithColor(c: CGContextRef, color: CGColorRef);
}
extern "C" {
    pub fn CGContextSetStrokeColorWithColor(c: CGContextRef, color: CGColorRef);
}
extern "C" {
    pub fn CGContextSetFillColorSpace(c: CGContextRef, space: CGColorSpaceRef);
}
extern "C" {
    pub fn CGContextSetStrokeColorSpace(c: CGContextRef, space: CGColorSpaceRef);
}
extern "C" {
    pub fn CGContextSetFillColor(c: CGContextRef, components: *const CGFloat);
}
extern "C" {
    pub fn CGContextSetStrokeColor(c: CGContextRef, components: *const CGFloat);
}
extern "C" {
    pub fn CGContextSetFillPattern(
        c: CGContextRef,
        pattern: CGPatternRef,
        components: *const CGFloat,
    );
}
extern "C" {
    pub fn CGContextSetStrokePattern(
        c: CGContextRef,
        pattern: CGPatternRef,
        components: *const CGFloat,
    );
}
extern "C" {
    pub fn CGContextSetPatternPhase(c: CGContextRef, phase: CGSize);
}
extern "C" {
    pub fn CGContextSetGrayFillColor(c: CGContextRef, gray: CGFloat, alpha: CGFloat);
}
extern "C" {
    pub fn CGContextSetGrayStrokeColor(c: CGContextRef, gray: CGFloat, alpha: CGFloat);
}
extern "C" {
    pub fn CGContextSetRGBFillColor(
        c: CGContextRef,
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    );
}
extern "C" {
    pub fn CGContextSetRGBStrokeColor(
        c: CGContextRef,
        red: CGFloat,
        green: CGFloat,
        blue: CGFloat,
        alpha: CGFloat,
    );
}
extern "C" {
    pub fn CGContextSetCMYKFillColor(
        c: CGContextRef,
        cyan: CGFloat,
        magenta: CGFloat,
        yellow: CGFloat,
        black: CGFloat,
        alpha: CGFloat,
    );
}
extern "C" {
    pub fn CGContextSetCMYKStrokeColor(
        c: CGContextRef,
        cyan: CGFloat,
        magenta: CGFloat,
        yellow: CGFloat,
        black: CGFloat,
        alpha: CGFloat,
    );
}
extern "C" {
    pub fn CGContextSetRenderingIntent(c: CGContextRef, intent: CGColorRenderingIntent);
}
extern "C" {
    pub fn CGContextDrawImage(c: CGContextRef, rect: CGRect, image: CGImageRef);
}
extern "C" {
    pub fn CGContextDrawTiledImage(c: CGContextRef, rect: CGRect, image: CGImageRef);
}
extern "C" {
    pub fn CGContextGetInterpolationQuality(c: CGContextRef) -> CGInterpolationQuality;
}
extern "C" {
    pub fn CGContextSetInterpolationQuality(c: CGContextRef, quality: CGInterpolationQuality);
}
extern "C" {
    pub fn CGContextSetShadowWithColor(
        c: CGContextRef,
        offset: CGSize,
        blur: CGFloat,
        color: CGColorRef,
    );
}
extern "C" {
    pub fn CGContextSetShadow(c: CGContextRef, offset: CGSize, blur: CGFloat);
}
extern "C" {
    pub fn CGContextDrawLinearGradient(
        c: CGContextRef,
        gradient: CGGradientRef,
        startPoint: CGPoint,
        endPoint: CGPoint,
        options: CGGradientDrawingOptions,
    );
}
extern "C" {
    pub fn CGContextDrawRadialGradient(
        c: CGContextRef,
        gradient: CGGradientRef,
        startCenter: CGPoint,
        startRadius: CGFloat,
        endCenter: CGPoint,
        endRadius: CGFloat,
        options: CGGradientDrawingOptions,
    );
}
extern "C" {
    pub fn CGContextDrawShading(c: CGContextRef, shading: CGShadingRef);
}
extern "C" {
    pub fn CGContextSetCharacterSpacing(c: CGContextRef, spacing: CGFloat);
}
extern "C" {
    pub fn CGContextSetTextPosition(c: CGContextRef, x: CGFloat, y: CGFloat);
}
extern "C" {
    pub fn CGContextGetTextPosition(c: CGContextRef) -> CGPoint;
}
extern "C" {
    pub fn CGContextSetTextMatrix(c: CGContextRef, t: CGAffineTransform);
}
extern "C" {
    pub fn CGContextGetTextMatrix(c: CGContextRef) -> CGAffineTransform;
}
extern "C" {
    pub fn CGContextSetTextDrawingMode(c: CGContextRef, mode: CGTextDrawingMode);
}
extern "C" {
    pub fn CGContextSetFont(c: CGContextRef, font: CGFontRef);
}
extern "C" {
    pub fn CGContextSetFontSize(c: CGContextRef, size: CGFloat);
}
extern "C" {
    pub fn CGContextShowGlyphsAtPositions(
        c: CGContextRef,
        glyphs: *const CGGlyph,
        Lpositions: *const CGPoint,
        count: usize,
    );
}
extern "C" {
    pub fn CGContextDrawPDFPage(c: CGContextRef, page: CGPDFPageRef);
}
extern "C" {
    pub fn CGContextBeginPage(c: CGContextRef, mediaBox: *const CGRect);
}
extern "C" {
    pub fn CGContextEndPage(c: CGContextRef);
}
extern "C" {
    pub fn CGContextRetain(c: CGContextRef) -> CGContextRef;
}
extern "C" {
    pub fn CGContextRelease(c: CGContextRef);
}
extern "C" {
    pub fn CGContextFlush(c: CGContextRef);
}
extern "C" {
    pub fn CGContextSynchronize(c: CGContextRef);
}
extern "C" {
    pub fn CGContextSetShouldAntialias(c: CGContextRef, shouldAntialias: bool);
}
extern "C" {
    pub fn CGContextSetAllowsAntialiasing(c: CGContextRef, allowsAntialiasing: bool);
}
extern "C" {
    pub fn CGContextSetShouldSmoothFonts(c: CGContextRef, shouldSmoothFonts: bool);
}
extern "C" {
    pub fn CGContextSetAllowsFontSmoothing(c: CGContextRef, allowsFontSmoothing: bool);
}
extern "C" {
    pub fn CGContextSetShouldSubpixelPositionFonts(
        c: CGContextRef,
        shouldSubpixelPositionFonts: bool,
    );
}
extern "C" {
    pub fn CGContextSetAllowsFontSubpixelPositioning(
        c: CGContextRef,
        allowsFontSubpixelPositioning: bool,
    );
}
extern "C" {
    pub fn CGContextSetShouldSubpixelQuantizeFonts(
        c: CGContextRef,
        shouldSubpixelQuantizeFonts: bool,
    );
}
extern "C" {
    pub fn CGContextSetAllowsFontSubpixelQuantization(
        c: CGContextRef,
        allowsFontSubpixelQuantization: bool,
    );
}
extern "C" {
    pub fn CGContextBeginTransparencyLayer(c: CGContextRef, auxiliaryInfo: CFDictionaryRef);
}
extern "C" {
    pub fn CGContextBeginTransparencyLayerWithRect(
        c: CGContextRef,
        rect: CGRect,
        auxInfo: CFDictionaryRef,
    );
}
extern "C" {
    pub fn CGContextEndTransparencyLayer(c: CGContextRef);
}
extern "C" {
    pub fn CGContextGetUserSpaceToDeviceSpaceTransform(c: CGContextRef) -> CGAffineTransform;
}
extern "C" {
    pub fn CGContextConvertPointToDeviceSpace(c: CGContextRef, point: CGPoint) -> CGPoint;
}
extern "C" {
    pub fn CGContextConvertPointToUserSpace(c: CGContextRef, point: CGPoint) -> CGPoint;
}
extern "C" {
    pub fn CGContextConvertSizeToDeviceSpace(c: CGContextRef, size: CGSize) -> CGSize;
}
extern "C" {
    pub fn CGContextConvertSizeToUserSpace(c: CGContextRef, size: CGSize) -> CGSize;
}
extern "C" {
    pub fn CGContextConvertRectToDeviceSpace(c: CGContextRef, rect: CGRect) -> CGRect;
}
extern "C" {
    pub fn CGContextConvertRectToUserSpace(c: CGContextRef, rect: CGRect) -> CGRect;
}
extern "C" {
    pub fn CGContextSelectFont(
        c: CGContextRef,
        name: *const ::std::os::raw::c_char,
        size: CGFloat,
        textEncoding: CGTextEncoding,
    );
}
extern "C" {
    pub fn CGContextShowText(c: CGContextRef, string: *const ::std::os::raw::c_char, length: usize);
}
extern "C" {
    pub fn CGContextShowTextAtPoint(
        c: CGContextRef,
        x: CGFloat,
        y: CGFloat,
        string: *const ::std::os::raw::c_char,
        length: usize,
    );
}
extern "C" {
    pub fn CGContextShowGlyphs(c: CGContextRef, g: *const CGGlyph, count: usize);
}
extern "C" {
    pub fn CGContextShowGlyphsAtPoint(
        c: CGContextRef,
        x: CGFloat,
        y: CGFloat,
        glyphs: *const CGGlyph,
        count: usize,
    );
}
extern "C" {
    pub fn CGContextShowGlyphsWithAdvances(
        c: CGContextRef,
        glyphs: *const CGGlyph,
        advances: *const CGSize,
        count: usize,
    );
}
extern "C" {
    pub fn CGContextDrawPDFDocument(
        c: CGContextRef,
        rect: CGRect,
        document: CGPDFDocumentRef,
        page: ::std::os::raw::c_int,
    );
}
pub type CGBitmapContextReleaseDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        releaseInfo: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CGBitmapContextCreateWithData(
        data: *mut ::std::os::raw::c_void,
        width: usize,
        height: usize,
        bitsPerComponent: usize,
        bytesPerRow: usize,
        space: CGColorSpaceRef,
        bitmapInfo: u32,
        releaseCallback: CGBitmapContextReleaseDataCallback,
        releaseInfo: *mut ::std::os::raw::c_void,
    ) -> CGContextRef;
}
extern "C" {
    pub fn CGBitmapContextCreate(
        data: *mut ::std::os::raw::c_void,
        width: usize,
        height: usize,
        bitsPerComponent: usize,
        bytesPerRow: usize,
        space: CGColorSpaceRef,
        bitmapInfo: u32,
    ) -> CGContextRef;
}
extern "C" {
    pub fn CGBitmapContextGetData(context: CGContextRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CGBitmapContextGetWidth(context: CGContextRef) -> usize;
}
extern "C" {
    pub fn CGBitmapContextGetHeight(context: CGContextRef) -> usize;
}
extern "C" {
    pub fn CGBitmapContextGetBitsPerComponent(context: CGContextRef) -> usize;
}
extern "C" {
    pub fn CGBitmapContextGetBitsPerPixel(context: CGContextRef) -> usize;
}
extern "C" {
    pub fn CGBitmapContextGetBytesPerRow(context: CGContextRef) -> usize;
}
extern "C" {
    pub fn CGBitmapContextGetColorSpace(context: CGContextRef) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGBitmapContextGetAlphaInfo(context: CGContextRef) -> CGImageAlphaInfo;
}
extern "C" {
    pub fn CGBitmapContextGetBitmapInfo(context: CGContextRef) -> CGBitmapInfo;
}
extern "C" {
    pub fn CGBitmapContextCreateImage(context: CGContextRef) -> CGImageRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGColorConversionInfo {
    _unused: [u8; 0],
}
pub type CGColorConversionInfoRef = *const CGColorConversionInfo;
extern "C" {
    pub fn CGColorConversionInfoGetTypeID() -> CFTypeID;
}
pub const CGColorConversionInfoTransformType_kCGColorConversionTransformFromSpace:
    CGColorConversionInfoTransformType = 0;
pub const CGColorConversionInfoTransformType_kCGColorConversionTransformToSpace:
    CGColorConversionInfoTransformType = 1;
pub const CGColorConversionInfoTransformType_kCGColorConversionTransformApplySpace:
    CGColorConversionInfoTransformType = 2;
pub type CGColorConversionInfoTransformType = u32;
extern "C" {
    pub fn CGColorConversionInfoCreate(
        src: CGColorSpaceRef,
        dst: CGColorSpaceRef,
    ) -> CGColorConversionInfoRef;
}
extern "C" {
    pub fn CGColorConversionInfoCreateWithOptions(
        src: CGColorSpaceRef,
        dst: CGColorSpaceRef,
        options: CFDictionaryRef,
    ) -> CGColorConversionInfoRef;
}
extern "C" {
    pub fn CGColorConversionInfoCreateFromList(
        options: CFDictionaryRef,
        arg1: CGColorSpaceRef,
        arg2: CGColorConversionInfoTransformType,
        arg3: CGColorRenderingIntent,
        ...
    ) -> CGColorConversionInfoRef;
}
extern "C" {
    pub fn CGColorConversionInfoCreateFromListWithArguments(
        options: CFDictionaryRef,
        arg1: CGColorSpaceRef,
        arg2: CGColorConversionInfoTransformType,
        arg3: CGColorRenderingIntent,
        arg4: *mut __va_list_tag,
    ) -> CGColorConversionInfoRef;
}
extern "C" {
    pub static kCGColorConversionBlackPointCompensation: CFStringRef;
}
extern "C" {
    pub static kCGColorConversionTRCSize: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGColorDataFormat {
    pub version: u32,
    pub colorspace_info: CFTypeRef,
    pub bitmap_info: CGBitmapInfo,
    pub bits_per_component: usize,
    pub bytes_per_row: usize,
    pub intent: CGColorRenderingIntent,
    pub decode: *mut CGFloat,
}
extern "C" {
    pub fn CGConvertColorDataWithFormat(
        width: usize,
        height: usize,
        dst_data: *mut ::std::os::raw::c_void,
        dst_format: CGColorDataFormat,
        src_data: *mut ::std::os::raw::c_void,
        src_format: CGColorDataFormat,
        options: CFDictionaryRef,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDataConsumer {
    _unused: [u8; 0],
}
pub type CGDataConsumerRef = *mut CGDataConsumer;
pub type CGDataConsumerPutBytesCallback = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        count: usize,
    ) -> usize,
>;
pub type CGDataConsumerReleaseInfoCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDataConsumerCallbacks {
    pub putBytes: CGDataConsumerPutBytesCallback,
    pub releaseConsumer: CGDataConsumerReleaseInfoCallback,
}
extern "C" {
    pub fn CGDataConsumerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGDataConsumerCreate(
        info: *mut ::std::os::raw::c_void,
        cbks: *const CGDataConsumerCallbacks,
    ) -> CGDataConsumerRef;
}
extern "C" {
    pub fn CGDataConsumerCreateWithURL(url: CFURLRef) -> CGDataConsumerRef;
}
extern "C" {
    pub fn CGDataConsumerCreateWithCFData(data: CFMutableDataRef) -> CGDataConsumerRef;
}
extern "C" {
    pub fn CGDataConsumerRetain(consumer: CGDataConsumerRef) -> CGDataConsumerRef;
}
extern "C" {
    pub fn CGDataConsumerRelease(consumer: CGDataConsumerRef);
}
pub const CGError_kCGErrorSuccess: CGError = 0;
pub const CGError_kCGErrorFailure: CGError = 1000;
pub const CGError_kCGErrorIllegalArgument: CGError = 1001;
pub const CGError_kCGErrorInvalidConnection: CGError = 1002;
pub const CGError_kCGErrorInvalidContext: CGError = 1003;
pub const CGError_kCGErrorCannotComplete: CGError = 1004;
pub const CGError_kCGErrorNotImplemented: CGError = 1006;
pub const CGError_kCGErrorRangeCheck: CGError = 1007;
pub const CGError_kCGErrorTypeCheck: CGError = 1008;
pub const CGError_kCGErrorInvalidOperation: CGError = 1010;
pub const CGError_kCGErrorNoneAvailable: CGError = 1011;
pub type CGError = i32;
pub type CGErrorCallback = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn CGErrorSetCallback(callback: CGErrorCallback);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGLayer {
    _unused: [u8; 0],
}
pub type CGLayerRef = *mut CGLayer;
extern "C" {
    pub fn CGLayerCreateWithContext(
        context: CGContextRef,
        size: CGSize,
        auxiliaryInfo: CFDictionaryRef,
    ) -> CGLayerRef;
}
extern "C" {
    pub fn CGLayerRetain(layer: CGLayerRef) -> CGLayerRef;
}
extern "C" {
    pub fn CGLayerRelease(layer: CGLayerRef);
}
extern "C" {
    pub fn CGLayerGetSize(layer: CGLayerRef) -> CGSize;
}
extern "C" {
    pub fn CGLayerGetContext(layer: CGLayerRef) -> CGContextRef;
}
extern "C" {
    pub fn CGContextDrawLayerInRect(context: CGContextRef, rect: CGRect, layer: CGLayerRef);
}
extern "C" {
    pub fn CGContextDrawLayerAtPoint(context: CGContextRef, point: CGPoint, layer: CGLayerRef);
}
extern "C" {
    pub fn CGLayerGetTypeID() -> CFTypeID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFContentStream {
    _unused: [u8; 0],
}
pub type CGPDFContentStreamRef = *mut CGPDFContentStream;
extern "C" {
    pub fn CGPDFContentStreamCreateWithPage(page: CGPDFPageRef) -> CGPDFContentStreamRef;
}
extern "C" {
    pub fn CGPDFContentStreamCreateWithStream(
        stream: CGPDFStreamRef,
        streamResources: CGPDFDictionaryRef,
        parent: CGPDFContentStreamRef,
    ) -> CGPDFContentStreamRef;
}
extern "C" {
    pub fn CGPDFContentStreamRetain(cs: CGPDFContentStreamRef) -> CGPDFContentStreamRef;
}
extern "C" {
    pub fn CGPDFContentStreamRelease(cs: CGPDFContentStreamRef);
}
extern "C" {
    pub fn CGPDFContentStreamGetStreams(cs: CGPDFContentStreamRef) -> CFArrayRef;
}
extern "C" {
    pub fn CGPDFContentStreamGetResource(
        cs: CGPDFContentStreamRef,
        category: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> CGPDFObjectRef;
}
extern "C" {
    pub fn CGPDFContextCreate(
        consumer: CGDataConsumerRef,
        mediaBox: *const CGRect,
        auxiliaryInfo: CFDictionaryRef,
    ) -> CGContextRef;
}
extern "C" {
    pub fn CGPDFContextCreateWithURL(
        url: CFURLRef,
        mediaBox: *const CGRect,
        auxiliaryInfo: CFDictionaryRef,
    ) -> CGContextRef;
}
extern "C" {
    pub fn CGPDFContextClose(context: CGContextRef);
}
extern "C" {
    pub fn CGPDFContextBeginPage(context: CGContextRef, pageInfo: CFDictionaryRef);
}
extern "C" {
    pub fn CGPDFContextEndPage(context: CGContextRef);
}
extern "C" {
    pub fn CGPDFContextAddDocumentMetadata(context: CGContextRef, metadata: CFDataRef);
}
extern "C" {
    pub fn CGPDFContextSetURLForRect(context: CGContextRef, url: CFURLRef, rect: CGRect);
}
extern "C" {
    pub fn CGPDFContextAddDestinationAtPoint(
        context: CGContextRef,
        name: CFStringRef,
        point: CGPoint,
    );
}
extern "C" {
    pub fn CGPDFContextSetDestinationForRect(
        context: CGContextRef,
        name: CFStringRef,
        rect: CGRect,
    );
}
extern "C" {
    pub static kCGPDFContextMediaBox: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextCropBox: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextBleedBox: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextTrimBox: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextArtBox: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextTitle: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextAuthor: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextSubject: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextKeywords: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextCreator: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextOwnerPassword: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextUserPassword: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextEncryptionKeyLength: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextAllowsPrinting: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextAllowsCopying: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextOutputIntent: CFStringRef;
}
extern "C" {
    pub static kCGPDFXOutputIntentSubtype: CFStringRef;
}
extern "C" {
    pub static kCGPDFXOutputConditionIdentifier: CFStringRef;
}
extern "C" {
    pub static kCGPDFXOutputCondition: CFStringRef;
}
extern "C" {
    pub static kCGPDFXRegistryName: CFStringRef;
}
extern "C" {
    pub static kCGPDFXInfo: CFStringRef;
}
extern "C" {
    pub static kCGPDFXDestinationOutputProfile: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextOutputIntents: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextAccessPermissions: CFStringRef;
}
extern "C" {
    pub fn CGPDFContextSetOutline(context: CGContextRef, outline: CFDictionaryRef);
}
extern "C" {
    pub static kCGPDFContextCreateLinearizedPDF: CFStringRef;
}
extern "C" {
    pub static kCGPDFContextCreatePDFA: CFStringRef;
}
pub const CGPDFTagType_CGPDFTagTypeDocument: CGPDFTagType = 100;
pub const CGPDFTagType_CGPDFTagTypePart: CGPDFTagType = 101;
pub const CGPDFTagType_CGPDFTagTypeArt: CGPDFTagType = 102;
pub const CGPDFTagType_CGPDFTagTypeSection: CGPDFTagType = 103;
pub const CGPDFTagType_CGPDFTagTypeDiv: CGPDFTagType = 104;
pub const CGPDFTagType_CGPDFTagTypeBlockQuote: CGPDFTagType = 105;
pub const CGPDFTagType_CGPDFTagTypeCaption: CGPDFTagType = 106;
pub const CGPDFTagType_CGPDFTagTypeTOC: CGPDFTagType = 107;
pub const CGPDFTagType_CGPDFTagTypeTOCI: CGPDFTagType = 108;
pub const CGPDFTagType_CGPDFTagTypeIndex: CGPDFTagType = 109;
pub const CGPDFTagType_CGPDFTagTypeNonStructure: CGPDFTagType = 110;
pub const CGPDFTagType_CGPDFTagTypePrivate: CGPDFTagType = 111;
pub const CGPDFTagType_CGPDFTagTypeParagraph: CGPDFTagType = 200;
pub const CGPDFTagType_CGPDFTagTypeHeader: CGPDFTagType = 201;
pub const CGPDFTagType_CGPDFTagTypeHeader1: CGPDFTagType = 202;
pub const CGPDFTagType_CGPDFTagTypeHeader2: CGPDFTagType = 203;
pub const CGPDFTagType_CGPDFTagTypeHeader3: CGPDFTagType = 204;
pub const CGPDFTagType_CGPDFTagTypeHeader4: CGPDFTagType = 205;
pub const CGPDFTagType_CGPDFTagTypeHeader5: CGPDFTagType = 206;
pub const CGPDFTagType_CGPDFTagTypeHeader6: CGPDFTagType = 207;
pub const CGPDFTagType_CGPDFTagTypeList: CGPDFTagType = 300;
pub const CGPDFTagType_CGPDFTagTypeListItem: CGPDFTagType = 301;
pub const CGPDFTagType_CGPDFTagTypeLabel: CGPDFTagType = 302;
pub const CGPDFTagType_CGPDFTagTypeListBody: CGPDFTagType = 303;
pub const CGPDFTagType_CGPDFTagTypeTable: CGPDFTagType = 400;
pub const CGPDFTagType_CGPDFTagTypeTableRow: CGPDFTagType = 401;
pub const CGPDFTagType_CGPDFTagTypeTableHeaderCell: CGPDFTagType = 402;
pub const CGPDFTagType_CGPDFTagTypeTableDataCell: CGPDFTagType = 403;
pub const CGPDFTagType_CGPDFTagTypeTableHeader: CGPDFTagType = 404;
pub const CGPDFTagType_CGPDFTagTypeTableBody: CGPDFTagType = 405;
pub const CGPDFTagType_CGPDFTagTypeTableFooter: CGPDFTagType = 406;
pub const CGPDFTagType_CGPDFTagTypeSpan: CGPDFTagType = 500;
pub const CGPDFTagType_CGPDFTagTypeQuote: CGPDFTagType = 501;
pub const CGPDFTagType_CGPDFTagTypeNote: CGPDFTagType = 502;
pub const CGPDFTagType_CGPDFTagTypeReference: CGPDFTagType = 503;
pub const CGPDFTagType_CGPDFTagTypeBibliography: CGPDFTagType = 504;
pub const CGPDFTagType_CGPDFTagTypeCode: CGPDFTagType = 505;
pub const CGPDFTagType_CGPDFTagTypeLink: CGPDFTagType = 506;
pub const CGPDFTagType_CGPDFTagTypeAnnotation: CGPDFTagType = 507;
pub const CGPDFTagType_CGPDFTagTypeRuby: CGPDFTagType = 600;
pub const CGPDFTagType_CGPDFTagTypeRubyBaseText: CGPDFTagType = 601;
pub const CGPDFTagType_CGPDFTagTypeRubyAnnotationText: CGPDFTagType = 602;
pub const CGPDFTagType_CGPDFTagTypeRubyPunctuation: CGPDFTagType = 603;
pub const CGPDFTagType_CGPDFTagTypeWarichu: CGPDFTagType = 604;
pub const CGPDFTagType_CGPDFTagTypeWarichuText: CGPDFTagType = 605;
pub const CGPDFTagType_CGPDFTagTypeWarichuPunctiation: CGPDFTagType = 606;
pub const CGPDFTagType_CGPDFTagTypeFigure: CGPDFTagType = 700;
pub const CGPDFTagType_CGPDFTagTypeFormula: CGPDFTagType = 701;
pub const CGPDFTagType_CGPDFTagTypeForm: CGPDFTagType = 702;
pub type CGPDFTagType = i32;
extern "C" {
    pub fn CGPDFTagTypeGetName(tagType: CGPDFTagType) -> *const ::std::os::raw::c_char;
}
pub type CGPDFTagProperty = CFStringRef;
extern "C" {
    pub static mut kCGPDFTagPropertyActualText: CGPDFTagProperty;
}
extern "C" {
    pub static mut kCGPDFTagPropertyAlternativeText: CGPDFTagProperty;
}
extern "C" {
    pub static mut kCGPDFTagPropertyTitleText: CGPDFTagProperty;
}
extern "C" {
    pub static mut kCGPDFTagPropertyLanguageText: CGPDFTagProperty;
}
extern "C" {
    pub fn CGPDFContextBeginTag(
        context: CGContextRef,
        tagType: CGPDFTagType,
        tagProperties: CFDictionaryRef,
    );
}
extern "C" {
    pub fn CGPDFContextEndTag(context: CGContextRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFOperatorTable {
    _unused: [u8; 0],
}
pub type CGPDFOperatorTableRef = *mut CGPDFOperatorTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPDFScanner {
    _unused: [u8; 0],
}
pub type CGPDFScannerRef = *mut CGPDFScanner;
extern "C" {
    pub fn CGPDFScannerCreate(
        cs: CGPDFContentStreamRef,
        table: CGPDFOperatorTableRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CGPDFScannerRef;
}
extern "C" {
    pub fn CGPDFScannerRetain(scanner: CGPDFScannerRef) -> CGPDFScannerRef;
}
extern "C" {
    pub fn CGPDFScannerRelease(scanner: CGPDFScannerRef);
}
extern "C" {
    pub fn CGPDFScannerScan(scanner: CGPDFScannerRef) -> bool;
}
extern "C" {
    pub fn CGPDFScannerGetContentStream(scanner: CGPDFScannerRef) -> CGPDFContentStreamRef;
}
extern "C" {
    pub fn CGPDFScannerPopObject(scanner: CGPDFScannerRef, value: *mut CGPDFObjectRef) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopBoolean(scanner: CGPDFScannerRef, value: *mut CGPDFBoolean) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopInteger(scanner: CGPDFScannerRef, value: *mut CGPDFInteger) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopNumber(scanner: CGPDFScannerRef, value: *mut CGPDFReal) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopName(
        scanner: CGPDFScannerRef,
        value: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopString(scanner: CGPDFScannerRef, value: *mut CGPDFStringRef) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopArray(scanner: CGPDFScannerRef, value: *mut CGPDFArrayRef) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopDictionary(
        scanner: CGPDFScannerRef,
        value: *mut CGPDFDictionaryRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPDFScannerPopStream(scanner: CGPDFScannerRef, value: *mut CGPDFStreamRef) -> bool;
}
extern "C" {
    pub fn CGPDFScannerStop(s: CGPDFScannerRef);
}
pub type CGPDFOperatorCallback = ::std::option::Option<
    unsafe extern "C" fn(scanner: CGPDFScannerRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CGPDFOperatorTableCreate() -> CGPDFOperatorTableRef;
}
extern "C" {
    pub fn CGPDFOperatorTableRetain(table: CGPDFOperatorTableRef) -> CGPDFOperatorTableRef;
}
extern "C" {
    pub fn CGPDFOperatorTableRelease(table: CGPDFOperatorTableRef);
}
extern "C" {
    pub fn CGPDFOperatorTableSetCallback(
        table: CGPDFOperatorTableRef,
        name: *const ::std::os::raw::c_char,
        callback: CGPDFOperatorCallback,
    );
}
pub type CGWindowID = u32;
pub const CGWindowSharingType_kCGWindowSharingNone: CGWindowSharingType = 0;
pub const CGWindowSharingType_kCGWindowSharingReadOnly: CGWindowSharingType = 1;
pub const CGWindowSharingType_kCGWindowSharingReadWrite: CGWindowSharingType = 2;
pub type CGWindowSharingType = u32;
pub const CGWindowBackingType_kCGBackingStoreRetained: CGWindowBackingType = 0;
pub const CGWindowBackingType_kCGBackingStoreNonretained: CGWindowBackingType = 1;
pub const CGWindowBackingType_kCGBackingStoreBuffered: CGWindowBackingType = 2;
pub type CGWindowBackingType = u32;
extern "C" {
    pub static kCGWindowNumber: CFStringRef;
}
extern "C" {
    pub static kCGWindowStoreType: CFStringRef;
}
extern "C" {
    pub static kCGWindowLayer: CFStringRef;
}
extern "C" {
    pub static kCGWindowBounds: CFStringRef;
}
extern "C" {
    pub static kCGWindowSharingState: CFStringRef;
}
extern "C" {
    pub static kCGWindowAlpha: CFStringRef;
}
extern "C" {
    pub static kCGWindowOwnerPID: CFStringRef;
}
extern "C" {
    pub static kCGWindowMemoryUsage: CFStringRef;
}
extern "C" {
    pub static kCGWindowWorkspace: CFStringRef;
}
extern "C" {
    pub static kCGWindowOwnerName: CFStringRef;
}
extern "C" {
    pub static kCGWindowName: CFStringRef;
}
extern "C" {
    pub static kCGWindowIsOnscreen: CFStringRef;
}
extern "C" {
    pub static kCGWindowBackingLocationVideoMemory: CFStringRef;
}
pub const CGWindowListOption_kCGWindowListOptionAll: CGWindowListOption = 0;
pub const CGWindowListOption_kCGWindowListOptionOnScreenOnly: CGWindowListOption = 1;
pub const CGWindowListOption_kCGWindowListOptionOnScreenAboveWindow: CGWindowListOption = 2;
pub const CGWindowListOption_kCGWindowListOptionOnScreenBelowWindow: CGWindowListOption = 4;
pub const CGWindowListOption_kCGWindowListOptionIncludingWindow: CGWindowListOption = 8;
pub const CGWindowListOption_kCGWindowListExcludeDesktopElements: CGWindowListOption = 16;
pub type CGWindowListOption = u32;
extern "C" {
    pub fn CGWindowListCopyWindowInfo(
        option: CGWindowListOption,
        relativeToWindow: CGWindowID,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CGWindowListCreate(
        option: CGWindowListOption,
        relativeToWindow: CGWindowID,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CGWindowListCreateDescriptionFromArray(windowArray: CFArrayRef) -> CFArrayRef;
}
pub const CGWindowImageOption_kCGWindowImageDefault: CGWindowImageOption = 0;
pub const CGWindowImageOption_kCGWindowImageBoundsIgnoreFraming: CGWindowImageOption = 1;
pub const CGWindowImageOption_kCGWindowImageShouldBeOpaque: CGWindowImageOption = 2;
pub const CGWindowImageOption_kCGWindowImageOnlyShadows: CGWindowImageOption = 4;
pub const CGWindowImageOption_kCGWindowImageBestResolution: CGWindowImageOption = 8;
pub const CGWindowImageOption_kCGWindowImageNominalResolution: CGWindowImageOption = 16;
pub type CGWindowImageOption = u32;
extern "C" {
    pub fn CGWindowListCreateImage(
        screenBounds: CGRect,
        listOption: CGWindowListOption,
        windowID: CGWindowID,
        imageOption: CGWindowImageOption,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGWindowListCreateImageFromArray(
        screenBounds: CGRect,
        windowArray: CFArrayRef,
        imageOption: CGWindowImageOption,
    ) -> CGImageRef;
}
extern "C" {
    pub fn CGPreflightScreenCaptureAccess() -> bool;
}
extern "C" {
    pub fn CGRequestScreenCaptureAccess() -> bool;
}
pub const CGWindowLevelKey_kCGBaseWindowLevelKey: CGWindowLevelKey = 0;
pub const CGWindowLevelKey_kCGMinimumWindowLevelKey: CGWindowLevelKey = 1;
pub const CGWindowLevelKey_kCGDesktopWindowLevelKey: CGWindowLevelKey = 2;
pub const CGWindowLevelKey_kCGBackstopMenuLevelKey: CGWindowLevelKey = 3;
pub const CGWindowLevelKey_kCGNormalWindowLevelKey: CGWindowLevelKey = 4;
pub const CGWindowLevelKey_kCGFloatingWindowLevelKey: CGWindowLevelKey = 5;
pub const CGWindowLevelKey_kCGTornOffMenuWindowLevelKey: CGWindowLevelKey = 6;
pub const CGWindowLevelKey_kCGDockWindowLevelKey: CGWindowLevelKey = 7;
pub const CGWindowLevelKey_kCGMainMenuWindowLevelKey: CGWindowLevelKey = 8;
pub const CGWindowLevelKey_kCGStatusWindowLevelKey: CGWindowLevelKey = 9;
pub const CGWindowLevelKey_kCGModalPanelWindowLevelKey: CGWindowLevelKey = 10;
pub const CGWindowLevelKey_kCGPopUpMenuWindowLevelKey: CGWindowLevelKey = 11;
pub const CGWindowLevelKey_kCGDraggingWindowLevelKey: CGWindowLevelKey = 12;
pub const CGWindowLevelKey_kCGScreenSaverWindowLevelKey: CGWindowLevelKey = 13;
pub const CGWindowLevelKey_kCGMaximumWindowLevelKey: CGWindowLevelKey = 14;
pub const CGWindowLevelKey_kCGOverlayWindowLevelKey: CGWindowLevelKey = 15;
pub const CGWindowLevelKey_kCGHelpWindowLevelKey: CGWindowLevelKey = 16;
pub const CGWindowLevelKey_kCGUtilityWindowLevelKey: CGWindowLevelKey = 17;
pub const CGWindowLevelKey_kCGDesktopIconWindowLevelKey: CGWindowLevelKey = 18;
pub const CGWindowLevelKey_kCGCursorWindowLevelKey: CGWindowLevelKey = 19;
pub const CGWindowLevelKey_kCGAssistiveTechHighWindowLevelKey: CGWindowLevelKey = 20;
pub const CGWindowLevelKey_kCGNumberOfWindowLevelKeys: CGWindowLevelKey = 21;
pub type CGWindowLevelKey = i32;
pub type CGWindowLevel = i32;
extern "C" {
    pub fn CGWindowLevelForKey(key: CGWindowLevelKey) -> CGWindowLevel;
}
pub type CGDirectDisplayID = u32;
pub type CGOpenGLDisplayMask = u32;
pub type CGRefreshRate = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDisplayMode {
    _unused: [u8; 0],
}
pub type CGDisplayModeRef = *mut CGDisplayMode;
extern "C" {
    pub fn CGMainDisplayID() -> CGDirectDisplayID;
}
extern "C" {
    pub fn CGGetDisplaysWithPoint(
        point: CGPoint,
        maxDisplays: u32,
        displays: *mut CGDirectDisplayID,
        matchingDisplayCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGGetDisplaysWithRect(
        rect: CGRect,
        maxDisplays: u32,
        displays: *mut CGDirectDisplayID,
        matchingDisplayCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGGetDisplaysWithOpenGLDisplayMask(
        mask: CGOpenGLDisplayMask,
        maxDisplays: u32,
        displays: *mut CGDirectDisplayID,
        matchingDisplayCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGGetActiveDisplayList(
        maxDisplays: u32,
        activeDisplays: *mut CGDirectDisplayID,
        displayCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGGetOnlineDisplayList(
        maxDisplays: u32,
        onlineDisplays: *mut CGDirectDisplayID,
        displayCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayIDToOpenGLDisplayMask(display: CGDirectDisplayID) -> CGOpenGLDisplayMask;
}
extern "C" {
    pub fn CGOpenGLDisplayMaskToDisplayID(mask: CGOpenGLDisplayMask) -> CGDirectDisplayID;
}
extern "C" {
    pub fn CGDisplayBounds(display: CGDirectDisplayID) -> CGRect;
}
extern "C" {
    pub fn CGDisplayPixelsWide(display: CGDirectDisplayID) -> usize;
}
extern "C" {
    pub fn CGDisplayPixelsHigh(display: CGDirectDisplayID) -> usize;
}
extern "C" {
    pub fn CGDisplayCopyAllDisplayModes(
        display: CGDirectDisplayID,
        options: CFDictionaryRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub static kCGDisplayShowDuplicateLowResolutionModes: CFStringRef;
}
extern "C" {
    pub fn CGDisplayCopyDisplayMode(display: CGDirectDisplayID) -> CGDisplayModeRef;
}
extern "C" {
    pub fn CGDisplaySetDisplayMode(
        display: CGDirectDisplayID,
        mode: CGDisplayModeRef,
        options: CFDictionaryRef,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayModeGetWidth(mode: CGDisplayModeRef) -> usize;
}
extern "C" {
    pub fn CGDisplayModeGetHeight(mode: CGDisplayModeRef) -> usize;
}
extern "C" {
    pub fn CGDisplayModeCopyPixelEncoding(mode: CGDisplayModeRef) -> CFStringRef;
}
extern "C" {
    pub fn CGDisplayModeGetRefreshRate(mode: CGDisplayModeRef) -> f64;
}
extern "C" {
    pub fn CGDisplayModeGetIOFlags(mode: CGDisplayModeRef) -> u32;
}
extern "C" {
    pub fn CGDisplayModeGetIODisplayModeID(mode: CGDisplayModeRef) -> i32;
}
extern "C" {
    pub fn CGDisplayModeIsUsableForDesktopGUI(mode: CGDisplayModeRef) -> bool;
}
extern "C" {
    pub fn CGDisplayModeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGDisplayModeRetain(mode: CGDisplayModeRef) -> CGDisplayModeRef;
}
extern "C" {
    pub fn CGDisplayModeRelease(mode: CGDisplayModeRef);
}
extern "C" {
    pub fn CGDisplayModeGetPixelWidth(mode: CGDisplayModeRef) -> usize;
}
extern "C" {
    pub fn CGDisplayModeGetPixelHeight(mode: CGDisplayModeRef) -> usize;
}
pub type CGGammaValue = f32;
extern "C" {
    pub fn CGSetDisplayTransferByFormula(
        display: CGDirectDisplayID,
        redMin: CGGammaValue,
        redMax: CGGammaValue,
        redGamma: CGGammaValue,
        greenMin: CGGammaValue,
        greenMax: CGGammaValue,
        greenGamma: CGGammaValue,
        blueMin: CGGammaValue,
        blueMax: CGGammaValue,
        blueGamma: CGGammaValue,
    ) -> CGError;
}
extern "C" {
    pub fn CGGetDisplayTransferByFormula(
        display: CGDirectDisplayID,
        redMin: *mut CGGammaValue,
        redMax: *mut CGGammaValue,
        redGamma: *mut CGGammaValue,
        greenMin: *mut CGGammaValue,
        greenMax: *mut CGGammaValue,
        greenGamma: *mut CGGammaValue,
        blueMin: *mut CGGammaValue,
        blueMax: *mut CGGammaValue,
        blueGamma: *mut CGGammaValue,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayGammaTableCapacity(display: CGDirectDisplayID) -> u32;
}
extern "C" {
    pub fn CGSetDisplayTransferByTable(
        display: CGDirectDisplayID,
        tableSize: u32,
        redTable: *const CGGammaValue,
        greenTable: *const CGGammaValue,
        blueTable: *const CGGammaValue,
    ) -> CGError;
}
extern "C" {
    pub fn CGGetDisplayTransferByTable(
        display: CGDirectDisplayID,
        capacity: u32,
        redTable: *mut CGGammaValue,
        greenTable: *mut CGGammaValue,
        blueTable: *mut CGGammaValue,
        sampleCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGSetDisplayTransferByByteTable(
        display: CGDirectDisplayID,
        tableSize: u32,
        redTable: *const u8,
        greenTable: *const u8,
        blueTable: *const u8,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayRestoreColorSyncSettings();
}
pub const CGCaptureOptions_kCGCaptureNoOptions: CGCaptureOptions = 0;
pub const CGCaptureOptions_kCGCaptureNoFill: CGCaptureOptions = 1;
pub type CGCaptureOptions = u32;
extern "C" {
    pub fn CGDisplayIsCaptured(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayCapture(display: CGDirectDisplayID) -> CGError;
}
extern "C" {
    pub fn CGDisplayCaptureWithOptions(
        display: CGDirectDisplayID,
        options: CGCaptureOptions,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayRelease(display: CGDirectDisplayID) -> CGError;
}
extern "C" {
    pub fn CGCaptureAllDisplays() -> CGError;
}
extern "C" {
    pub fn CGCaptureAllDisplaysWithOptions(options: CGCaptureOptions) -> CGError;
}
extern "C" {
    pub fn CGReleaseAllDisplays() -> CGError;
}
extern "C" {
    pub fn CGShieldingWindowID(display: CGDirectDisplayID) -> CGWindowID;
}
extern "C" {
    pub fn CGShieldingWindowLevel() -> CGWindowLevel;
}
extern "C" {
    pub fn CGDisplayCreateImage(displayID: CGDirectDisplayID) -> CGImageRef;
}
extern "C" {
    pub fn CGDisplayCreateImageForRect(display: CGDirectDisplayID, rect: CGRect) -> CGImageRef;
}
extern "C" {
    pub fn CGDisplayHideCursor(display: CGDirectDisplayID) -> CGError;
}
extern "C" {
    pub fn CGDisplayShowCursor(display: CGDirectDisplayID) -> CGError;
}
extern "C" {
    pub fn CGDisplayMoveCursorToPoint(display: CGDirectDisplayID, point: CGPoint) -> CGError;
}
extern "C" {
    pub fn CGGetLastMouseDelta(deltaX: *mut i32, deltaY: *mut i32);
}
extern "C" {
    pub fn CGDisplayGetDrawingContext(display: CGDirectDisplayID) -> CGContextRef;
}
pub type CGDisplayCount = u32;
pub use self::CGError as CGDisplayErr;
extern "C" {
    pub fn CGDisplayAvailableModes(dsp: CGDirectDisplayID) -> CFArrayRef;
}
extern "C" {
    pub fn CGDisplayBestModeForParameters(
        display: CGDirectDisplayID,
        bitsPerPixel: usize,
        width: usize,
        height: usize,
        exactMatch: *mut boolean_t,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGDisplayBestModeForParametersAndRefreshRate(
        display: CGDirectDisplayID,
        bitsPerPixel: usize,
        width: usize,
        height: usize,
        refreshRate: CGRefreshRate,
        exactMatch: *mut boolean_t,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGDisplayCurrentMode(display: CGDirectDisplayID) -> CFDictionaryRef;
}
extern "C" {
    pub fn CGDisplaySwitchToMode(display: CGDirectDisplayID, mode: CFDictionaryRef) -> CGError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDeviceColor {
    pub red: f32,
    pub green: f32,
    pub blue: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGDisplayConfigRef {
    _unused: [u8; 0],
}
pub type CGDisplayConfigRef = *mut _CGDisplayConfigRef;
extern "C" {
    pub fn CGBeginDisplayConfiguration(config: *mut CGDisplayConfigRef) -> CGError;
}
extern "C" {
    pub fn CGConfigureDisplayOrigin(
        config: CGDisplayConfigRef,
        display: CGDirectDisplayID,
        x: i32,
        y: i32,
    ) -> CGError;
}
extern "C" {
    pub fn CGConfigureDisplayWithDisplayMode(
        config: CGDisplayConfigRef,
        display: CGDirectDisplayID,
        mode: CGDisplayModeRef,
        options: CFDictionaryRef,
    ) -> CGError;
}
extern "C" {
    pub fn CGConfigureDisplayStereoOperation(
        config: CGDisplayConfigRef,
        display: CGDirectDisplayID,
        stereo: boolean_t,
        forceBlueLine: boolean_t,
    ) -> CGError;
}
extern "C" {
    pub fn CGConfigureDisplayMirrorOfDisplay(
        config: CGDisplayConfigRef,
        display: CGDirectDisplayID,
        master: CGDirectDisplayID,
    ) -> CGError;
}
extern "C" {
    pub fn CGCancelDisplayConfiguration(config: CGDisplayConfigRef) -> CGError;
}
pub const CGConfigureOption_kCGConfigureForAppOnly: CGConfigureOption = 0;
pub const CGConfigureOption_kCGConfigureForSession: CGConfigureOption = 1;
pub const CGConfigureOption_kCGConfigurePermanently: CGConfigureOption = 2;
pub type CGConfigureOption = u32;
extern "C" {
    pub fn CGCompleteDisplayConfiguration(
        config: CGDisplayConfigRef,
        option: CGConfigureOption,
    ) -> CGError;
}
extern "C" {
    pub fn CGRestorePermanentDisplayConfiguration();
}
pub const CGDisplayChangeSummaryFlags_kCGDisplayBeginConfigurationFlag:
    CGDisplayChangeSummaryFlags = 1;
pub const CGDisplayChangeSummaryFlags_kCGDisplayMovedFlag: CGDisplayChangeSummaryFlags = 2;
pub const CGDisplayChangeSummaryFlags_kCGDisplaySetMainFlag: CGDisplayChangeSummaryFlags = 4;
pub const CGDisplayChangeSummaryFlags_kCGDisplaySetModeFlag: CGDisplayChangeSummaryFlags = 8;
pub const CGDisplayChangeSummaryFlags_kCGDisplayAddFlag: CGDisplayChangeSummaryFlags = 16;
pub const CGDisplayChangeSummaryFlags_kCGDisplayRemoveFlag: CGDisplayChangeSummaryFlags = 32;
pub const CGDisplayChangeSummaryFlags_kCGDisplayEnabledFlag: CGDisplayChangeSummaryFlags = 256;
pub const CGDisplayChangeSummaryFlags_kCGDisplayDisabledFlag: CGDisplayChangeSummaryFlags = 512;
pub const CGDisplayChangeSummaryFlags_kCGDisplayMirrorFlag: CGDisplayChangeSummaryFlags = 1024;
pub const CGDisplayChangeSummaryFlags_kCGDisplayUnMirrorFlag: CGDisplayChangeSummaryFlags = 2048;
pub const CGDisplayChangeSummaryFlags_kCGDisplayDesktopShapeChangedFlag:
    CGDisplayChangeSummaryFlags = 4096;
pub type CGDisplayChangeSummaryFlags = u32;
pub type CGDisplayReconfigurationCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        display: CGDirectDisplayID,
        flags: CGDisplayChangeSummaryFlags,
        userInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CGDisplayRegisterReconfigurationCallback(
        callback: CGDisplayReconfigurationCallBack,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayRemoveReconfigurationCallback(
        callback: CGDisplayReconfigurationCallBack,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplaySetStereoOperation(
        display: CGDirectDisplayID,
        stereo: boolean_t,
        forceBlueLine: boolean_t,
        option: CGConfigureOption,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayIsActive(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsAsleep(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsOnline(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsMain(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsBuiltin(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsInMirrorSet(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsAlwaysInMirrorSet(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsInHWMirrorSet(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayMirrorsDisplay(display: CGDirectDisplayID) -> CGDirectDisplayID;
}
extern "C" {
    pub fn CGDisplayUsesOpenGLAcceleration(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayIsStereo(display: CGDirectDisplayID) -> boolean_t;
}
extern "C" {
    pub fn CGDisplayPrimaryDisplay(display: CGDirectDisplayID) -> CGDirectDisplayID;
}
extern "C" {
    pub fn CGDisplayUnitNumber(display: CGDirectDisplayID) -> u32;
}
extern "C" {
    pub fn CGDisplayVendorNumber(display: CGDirectDisplayID) -> u32;
}
extern "C" {
    pub fn CGDisplayModelNumber(display: CGDirectDisplayID) -> u32;
}
extern "C" {
    pub fn CGDisplaySerialNumber(display: CGDirectDisplayID) -> u32;
}
extern "C" {
    pub fn CGDisplayIOServicePort(display: CGDirectDisplayID) -> io_service_t;
}
extern "C" {
    pub fn CGDisplayScreenSize(display: CGDirectDisplayID) -> CGSize;
}
extern "C" {
    pub fn CGDisplayRotation(display: CGDirectDisplayID) -> f64;
}
extern "C" {
    pub fn CGDisplayCopyColorSpace(display: CGDirectDisplayID) -> CGColorSpaceRef;
}
extern "C" {
    pub fn CGConfigureDisplayMode(
        config: CGDisplayConfigRef,
        display: CGDirectDisplayID,
        mode: CFDictionaryRef,
    ) -> CGError;
}
pub type CGDisplayFadeReservationToken = u32;
pub type CGDisplayBlendFraction = f32;
pub type CGDisplayFadeInterval = f32;
extern "C" {
    pub fn CGConfigureDisplayFadeEffect(
        config: CGDisplayConfigRef,
        fadeOutSeconds: CGDisplayFadeInterval,
        fadeInSeconds: CGDisplayFadeInterval,
        fadeRed: f32,
        fadeGreen: f32,
        fadeBlue: f32,
    ) -> CGError;
}
pub type CGDisplayReservationInterval = f32;
extern "C" {
    pub fn CGAcquireDisplayFadeReservation(
        seconds: CGDisplayReservationInterval,
        token: *mut CGDisplayFadeReservationToken,
    ) -> CGError;
}
extern "C" {
    pub fn CGReleaseDisplayFadeReservation(token: CGDisplayFadeReservationToken) -> CGError;
}
extern "C" {
    pub fn CGDisplayFade(
        token: CGDisplayFadeReservationToken,
        duration: CGDisplayFadeInterval,
        startBlend: CGDisplayBlendFraction,
        endBlend: CGDisplayBlendFraction,
        redBlend: f32,
        greenBlend: f32,
        blueBlend: f32,
        synchronous: boolean_t,
    ) -> CGError;
}
extern "C" {
    pub fn CGDisplayFadeOperationInProgress() -> boolean_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDisplayStream {
    _unused: [u8; 0],
}
pub type CGDisplayStreamRef = *mut CGDisplayStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGDisplayStreamUpdate {
    _unused: [u8; 0],
}
pub type CGDisplayStreamUpdateRef = *const CGDisplayStreamUpdate;
pub const CGDisplayStreamUpdateRectType_kCGDisplayStreamUpdateRefreshedRects:
    CGDisplayStreamUpdateRectType = 0;
pub const CGDisplayStreamUpdateRectType_kCGDisplayStreamUpdateMovedRects:
    CGDisplayStreamUpdateRectType = 1;
pub const CGDisplayStreamUpdateRectType_kCGDisplayStreamUpdateDirtyRects:
    CGDisplayStreamUpdateRectType = 2;
pub const CGDisplayStreamUpdateRectType_kCGDisplayStreamUpdateReducedDirtyRects:
    CGDisplayStreamUpdateRectType = 3;
pub type CGDisplayStreamUpdateRectType = i32;
pub const CGDisplayStreamFrameStatus_kCGDisplayStreamFrameStatusFrameComplete:
    CGDisplayStreamFrameStatus = 0;
pub const CGDisplayStreamFrameStatus_kCGDisplayStreamFrameStatusFrameIdle:
    CGDisplayStreamFrameStatus = 1;
pub const CGDisplayStreamFrameStatus_kCGDisplayStreamFrameStatusFrameBlank:
    CGDisplayStreamFrameStatus = 2;
pub const CGDisplayStreamFrameStatus_kCGDisplayStreamFrameStatusStopped:
    CGDisplayStreamFrameStatus = 3;
pub type CGDisplayStreamFrameStatus = i32;
pub type CGDisplayStreamFrameAvailableHandler = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn CGDisplayStreamUpdateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGDisplayStreamUpdateGetRects(
        updateRef: CGDisplayStreamUpdateRef,
        rectType: CGDisplayStreamUpdateRectType,
        rectCount: *mut usize,
    ) -> *const CGRect;
}
extern "C" {
    pub fn CGDisplayStreamUpdateCreateMergedUpdate(
        firstUpdate: CGDisplayStreamUpdateRef,
        secondUpdate: CGDisplayStreamUpdateRef,
    ) -> CGDisplayStreamUpdateRef;
}
extern "C" {
    pub fn CGDisplayStreamUpdateGetMovedRectsDelta(
        updateRef: CGDisplayStreamUpdateRef,
        dx: *mut CGFloat,
        dy: *mut CGFloat,
    );
}
extern "C" {
    pub fn CGDisplayStreamUpdateGetDropCount(updateRef: CGDisplayStreamUpdateRef) -> usize;
}
extern "C" {
    pub static kCGDisplayStreamSourceRect: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamDestinationRect: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamPreserveAspectRatio: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamColorSpace: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamMinimumFrameTime: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamShowCursor: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamQueueDepth: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamYCbCrMatrix: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamYCbCrMatrix_ITU_R_709_2: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamYCbCrMatrix_ITU_R_601_4: CFStringRef;
}
extern "C" {
    pub static kCGDisplayStreamYCbCrMatrix_SMPTE_240M_1995: CFStringRef;
}
extern "C" {
    pub fn CGDisplayStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGDisplayStreamCreate(
        display: CGDirectDisplayID,
        outputWidth: usize,
        outputHeight: usize,
        pixelFormat: i32,
        properties: CFDictionaryRef,
        handler: CGDisplayStreamFrameAvailableHandler,
    ) -> CGDisplayStreamRef;
}
extern "C" {
    pub fn CGDisplayStreamCreateWithDispatchQueue(
        display: CGDirectDisplayID,
        outputWidth: usize,
        outputHeight: usize,
        pixelFormat: i32,
        properties: CFDictionaryRef,
        queue: NSObject,
        handler: CGDisplayStreamFrameAvailableHandler,
    ) -> CGDisplayStreamRef;
}
extern "C" {
    pub fn CGDisplayStreamStart(displayStream: CGDisplayStreamRef) -> CGError;
}
extern "C" {
    pub fn CGDisplayStreamStop(displayStream: CGDisplayStreamRef) -> CGError;
}
extern "C" {
    pub fn CGDisplayStreamGetRunLoopSource(displayStream: CGDisplayStreamRef)
        -> CFRunLoopSourceRef;
}
pub use self::CGError as CGEventErr;
pub type CGButtonCount = u32;
pub type CGWheelCount = u32;
pub type CGCharCode = u16;
pub type CGKeyCode = u16;
pub type CGScreenRefreshCallback = ::std::option::Option<
    unsafe extern "C" fn(count: u32, rects: *const CGRect, userInfo: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CGRegisterScreenRefreshCallback(
        callback: CGScreenRefreshCallback,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CGError;
}
extern "C" {
    pub fn CGUnregisterScreenRefreshCallback(
        callback: CGScreenRefreshCallback,
        userInfo: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CGWaitForScreenRefreshRects(rects: *mut *mut CGRect, count: *mut u32) -> CGError;
}
pub const CGScreenUpdateOperation_kCGScreenUpdateOperationRefresh: CGScreenUpdateOperation = 0;
pub const CGScreenUpdateOperation_kCGScreenUpdateOperationMove: CGScreenUpdateOperation = 1;
pub const CGScreenUpdateOperation_kCGScreenUpdateOperationReducedDirtyRectangleCount:
    CGScreenUpdateOperation = 2147483648;
pub type CGScreenUpdateOperation = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGScreenUpdateMoveDelta {
    pub dX: i32,
    pub dY: i32,
}
pub type CGScreenUpdateMoveCallback = ::std::option::Option<
    unsafe extern "C" fn(
        delta: CGScreenUpdateMoveDelta,
        count: usize,
        rects: *const CGRect,
        userInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CGScreenRegisterMoveCallback(
        callback: CGScreenUpdateMoveCallback,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CGError;
}
extern "C" {
    pub fn CGScreenUnregisterMoveCallback(
        callback: CGScreenUpdateMoveCallback,
        userInfo: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CGWaitForScreenUpdateRects(
        requestedOperations: CGScreenUpdateOperation,
        currentOperation: *mut CGScreenUpdateOperation,
        rects: *mut *mut CGRect,
        rectCount: *mut usize,
        delta: *mut CGScreenUpdateMoveDelta,
    ) -> CGError;
}
extern "C" {
    pub fn CGReleaseScreenRefreshRects(rects: *mut CGRect);
}
extern "C" {
    pub fn CGCursorIsVisible() -> boolean_t;
}
extern "C" {
    pub fn CGCursorIsDrawnInFramebuffer() -> boolean_t;
}
extern "C" {
    pub fn CGWarpMouseCursorPosition(newCursorPosition: CGPoint) -> CGError;
}
extern "C" {
    pub fn CGAssociateMouseAndMouseCursorPosition(connected: boolean_t) -> CGError;
}
extern "C" {
    pub fn CGWindowServerCreateServerPort() -> CFMachPortRef;
}
extern "C" {
    pub fn CGEnableEventStateCombining(combineState: boolean_t) -> CGError;
}
extern "C" {
    pub fn CGInhibitLocalEvents(inhibit: boolean_t) -> CGError;
}
extern "C" {
    pub fn CGPostMouseEvent(
        mouseCursorPosition: CGPoint,
        updateMouseCursorPosition: boolean_t,
        buttonCount: CGButtonCount,
        mouseButtonDown: boolean_t,
        ...
    ) -> CGError;
}
extern "C" {
    pub fn CGPostScrollWheelEvent(wheelCount: CGWheelCount, wheel1: i32, ...) -> CGError;
}
extern "C" {
    pub fn CGPostKeyboardEvent(
        keyChar: CGCharCode,
        virtualKey: CGKeyCode,
        keyDown: boolean_t,
    ) -> CGError;
}
pub const CGEventFilterMask_kCGEventFilterMaskPermitLocalMouseEvents: CGEventFilterMask = 1;
pub const CGEventFilterMask_kCGEventFilterMaskPermitLocalKeyboardEvents: CGEventFilterMask = 2;
pub const CGEventFilterMask_kCGEventFilterMaskPermitSystemDefinedEvents: CGEventFilterMask = 4;
pub type CGEventFilterMask = u32;
pub const CGEventSuppressionState_kCGEventSuppressionStateSuppressionInterval:
    CGEventSuppressionState = 0;
pub const CGEventSuppressionState_kCGEventSuppressionStateRemoteMouseDrag: CGEventSuppressionState =
    1;
pub const CGEventSuppressionState_kCGNumberOfEventSuppressionStates: CGEventSuppressionState = 2;
pub type CGEventSuppressionState = u32;
extern "C" {
    pub fn CGSetLocalEventsFilterDuringSuppressionState(
        filter: CGEventFilterMask,
        state: CGEventSuppressionState,
    ) -> CGError;
}
extern "C" {
    pub fn CGSetLocalEventsSuppressionInterval(seconds: CFTimeInterval) -> CGError;
}
extern "C" {
    pub fn CGWindowServerCFMachPort() -> CFMachPortRef;
}
pub type CGRectCount = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CGEvent {
    _unused: [u8; 0],
}
pub type CGEventRef = *mut __CGEvent;
pub const CGMouseButton_kCGMouseButtonLeft: CGMouseButton = 0;
pub const CGMouseButton_kCGMouseButtonRight: CGMouseButton = 1;
pub const CGMouseButton_kCGMouseButtonCenter: CGMouseButton = 2;
pub type CGMouseButton = u32;
pub const CGScrollEventUnit_kCGScrollEventUnitPixel: CGScrollEventUnit = 0;
pub const CGScrollEventUnit_kCGScrollEventUnitLine: CGScrollEventUnit = 1;
pub type CGScrollEventUnit = u32;
pub const CGMomentumScrollPhase_kCGMomentumScrollPhaseNone: CGMomentumScrollPhase = 0;
pub const CGMomentumScrollPhase_kCGMomentumScrollPhaseBegin: CGMomentumScrollPhase = 1;
pub const CGMomentumScrollPhase_kCGMomentumScrollPhaseContinue: CGMomentumScrollPhase = 2;
pub const CGMomentumScrollPhase_kCGMomentumScrollPhaseEnd: CGMomentumScrollPhase = 3;
pub type CGMomentumScrollPhase = u32;
pub const CGScrollPhase_kCGScrollPhaseBegan: CGScrollPhase = 1;
pub const CGScrollPhase_kCGScrollPhaseChanged: CGScrollPhase = 2;
pub const CGScrollPhase_kCGScrollPhaseEnded: CGScrollPhase = 4;
pub const CGScrollPhase_kCGScrollPhaseCancelled: CGScrollPhase = 8;
pub const CGScrollPhase_kCGScrollPhaseMayBegin: CGScrollPhase = 128;
pub type CGScrollPhase = u32;
pub const CGGesturePhase_kCGGesturePhaseNone: CGGesturePhase = 0;
pub const CGGesturePhase_kCGGesturePhaseBegan: CGGesturePhase = 1;
pub const CGGesturePhase_kCGGesturePhaseChanged: CGGesturePhase = 2;
pub const CGGesturePhase_kCGGesturePhaseEnded: CGGesturePhase = 4;
pub const CGGesturePhase_kCGGesturePhaseCancelled: CGGesturePhase = 8;
pub const CGGesturePhase_kCGGesturePhaseMayBegin: CGGesturePhase = 128;
pub type CGGesturePhase = u32;
pub const CGEventFlags_kCGEventFlagMaskAlphaShift: CGEventFlags = 65536;
pub const CGEventFlags_kCGEventFlagMaskShift: CGEventFlags = 131072;
pub const CGEventFlags_kCGEventFlagMaskControl: CGEventFlags = 262144;
pub const CGEventFlags_kCGEventFlagMaskAlternate: CGEventFlags = 524288;
pub const CGEventFlags_kCGEventFlagMaskCommand: CGEventFlags = 1048576;
pub const CGEventFlags_kCGEventFlagMaskHelp: CGEventFlags = 4194304;
pub const CGEventFlags_kCGEventFlagMaskSecondaryFn: CGEventFlags = 8388608;
pub const CGEventFlags_kCGEventFlagMaskNumericPad: CGEventFlags = 2097152;
pub const CGEventFlags_kCGEventFlagMaskNonCoalesced: CGEventFlags = 256;
pub type CGEventFlags = u64;
pub const CGEventType_kCGEventNull: CGEventType = 0;
pub const CGEventType_kCGEventLeftMouseDown: CGEventType = 1;
pub const CGEventType_kCGEventLeftMouseUp: CGEventType = 2;
pub const CGEventType_kCGEventRightMouseDown: CGEventType = 3;
pub const CGEventType_kCGEventRightMouseUp: CGEventType = 4;
pub const CGEventType_kCGEventMouseMoved: CGEventType = 5;
pub const CGEventType_kCGEventLeftMouseDragged: CGEventType = 6;
pub const CGEventType_kCGEventRightMouseDragged: CGEventType = 7;
pub const CGEventType_kCGEventKeyDown: CGEventType = 10;
pub const CGEventType_kCGEventKeyUp: CGEventType = 11;
pub const CGEventType_kCGEventFlagsChanged: CGEventType = 12;
pub const CGEventType_kCGEventScrollWheel: CGEventType = 22;
pub const CGEventType_kCGEventTabletPointer: CGEventType = 23;
pub const CGEventType_kCGEventTabletProximity: CGEventType = 24;
pub const CGEventType_kCGEventOtherMouseDown: CGEventType = 25;
pub const CGEventType_kCGEventOtherMouseUp: CGEventType = 26;
pub const CGEventType_kCGEventOtherMouseDragged: CGEventType = 27;
pub const CGEventType_kCGEventTapDisabledByTimeout: CGEventType = 4294967294;
pub const CGEventType_kCGEventTapDisabledByUserInput: CGEventType = 4294967295;
pub type CGEventType = u32;
pub type CGEventTimestamp = u64;
pub const CGEventField_kCGMouseEventNumber: CGEventField = 0;
pub const CGEventField_kCGMouseEventClickState: CGEventField = 1;
pub const CGEventField_kCGMouseEventPressure: CGEventField = 2;
pub const CGEventField_kCGMouseEventButtonNumber: CGEventField = 3;
pub const CGEventField_kCGMouseEventDeltaX: CGEventField = 4;
pub const CGEventField_kCGMouseEventDeltaY: CGEventField = 5;
pub const CGEventField_kCGMouseEventInstantMouser: CGEventField = 6;
pub const CGEventField_kCGMouseEventSubtype: CGEventField = 7;
pub const CGEventField_kCGKeyboardEventAutorepeat: CGEventField = 8;
pub const CGEventField_kCGKeyboardEventKeycode: CGEventField = 9;
pub const CGEventField_kCGKeyboardEventKeyboardType: CGEventField = 10;
pub const CGEventField_kCGScrollWheelEventDeltaAxis1: CGEventField = 11;
pub const CGEventField_kCGScrollWheelEventDeltaAxis2: CGEventField = 12;
pub const CGEventField_kCGScrollWheelEventDeltaAxis3: CGEventField = 13;
pub const CGEventField_kCGScrollWheelEventFixedPtDeltaAxis1: CGEventField = 93;
pub const CGEventField_kCGScrollWheelEventFixedPtDeltaAxis2: CGEventField = 94;
pub const CGEventField_kCGScrollWheelEventFixedPtDeltaAxis3: CGEventField = 95;
pub const CGEventField_kCGScrollWheelEventPointDeltaAxis1: CGEventField = 96;
pub const CGEventField_kCGScrollWheelEventPointDeltaAxis2: CGEventField = 97;
pub const CGEventField_kCGScrollWheelEventPointDeltaAxis3: CGEventField = 98;
pub const CGEventField_kCGScrollWheelEventScrollPhase: CGEventField = 99;
pub const CGEventField_kCGScrollWheelEventScrollCount: CGEventField = 100;
pub const CGEventField_kCGScrollWheelEventMomentumPhase: CGEventField = 123;
pub const CGEventField_kCGScrollWheelEventInstantMouser: CGEventField = 14;
pub const CGEventField_kCGTabletEventPointX: CGEventField = 15;
pub const CGEventField_kCGTabletEventPointY: CGEventField = 16;
pub const CGEventField_kCGTabletEventPointZ: CGEventField = 17;
pub const CGEventField_kCGTabletEventPointButtons: CGEventField = 18;
pub const CGEventField_kCGTabletEventPointPressure: CGEventField = 19;
pub const CGEventField_kCGTabletEventTiltX: CGEventField = 20;
pub const CGEventField_kCGTabletEventTiltY: CGEventField = 21;
pub const CGEventField_kCGTabletEventRotation: CGEventField = 22;
pub const CGEventField_kCGTabletEventTangentialPressure: CGEventField = 23;
pub const CGEventField_kCGTabletEventDeviceID: CGEventField = 24;
pub const CGEventField_kCGTabletEventVendor1: CGEventField = 25;
pub const CGEventField_kCGTabletEventVendor2: CGEventField = 26;
pub const CGEventField_kCGTabletEventVendor3: CGEventField = 27;
pub const CGEventField_kCGTabletProximityEventVendorID: CGEventField = 28;
pub const CGEventField_kCGTabletProximityEventTabletID: CGEventField = 29;
pub const CGEventField_kCGTabletProximityEventPointerID: CGEventField = 30;
pub const CGEventField_kCGTabletProximityEventDeviceID: CGEventField = 31;
pub const CGEventField_kCGTabletProximityEventSystemTabletID: CGEventField = 32;
pub const CGEventField_kCGTabletProximityEventVendorPointerType: CGEventField = 33;
pub const CGEventField_kCGTabletProximityEventVendorPointerSerialNumber: CGEventField = 34;
pub const CGEventField_kCGTabletProximityEventVendorUniqueID: CGEventField = 35;
pub const CGEventField_kCGTabletProximityEventCapabilityMask: CGEventField = 36;
pub const CGEventField_kCGTabletProximityEventPointerType: CGEventField = 37;
pub const CGEventField_kCGTabletProximityEventEnterProximity: CGEventField = 38;
pub const CGEventField_kCGEventTargetProcessSerialNumber: CGEventField = 39;
pub const CGEventField_kCGEventTargetUnixProcessID: CGEventField = 40;
pub const CGEventField_kCGEventSourceUnixProcessID: CGEventField = 41;
pub const CGEventField_kCGEventSourceUserData: CGEventField = 42;
pub const CGEventField_kCGEventSourceUserID: CGEventField = 43;
pub const CGEventField_kCGEventSourceGroupID: CGEventField = 44;
pub const CGEventField_kCGEventSourceStateID: CGEventField = 45;
pub const CGEventField_kCGScrollWheelEventIsContinuous: CGEventField = 88;
pub const CGEventField_kCGMouseEventWindowUnderMousePointer: CGEventField = 91;
pub const CGEventField_kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent: CGEventField =
    92;
pub const CGEventField_kCGEventUnacceleratedPointerMovementX: CGEventField = 170;
pub const CGEventField_kCGEventUnacceleratedPointerMovementY: CGEventField = 171;
pub type CGEventField = u32;
pub const CGEventMouseSubtype_kCGEventMouseSubtypeDefault: CGEventMouseSubtype = 0;
pub const CGEventMouseSubtype_kCGEventMouseSubtypeTabletPoint: CGEventMouseSubtype = 1;
pub const CGEventMouseSubtype_kCGEventMouseSubtypeTabletProximity: CGEventMouseSubtype = 2;
pub type CGEventMouseSubtype = u32;
pub const CGEventTapLocation_kCGHIDEventTap: CGEventTapLocation = 0;
pub const CGEventTapLocation_kCGSessionEventTap: CGEventTapLocation = 1;
pub const CGEventTapLocation_kCGAnnotatedSessionEventTap: CGEventTapLocation = 2;
pub type CGEventTapLocation = u32;
pub const CGEventTapPlacement_kCGHeadInsertEventTap: CGEventTapPlacement = 0;
pub const CGEventTapPlacement_kCGTailAppendEventTap: CGEventTapPlacement = 1;
pub type CGEventTapPlacement = u32;
pub const CGEventTapOptions_kCGEventTapOptionDefault: CGEventTapOptions = 0;
pub const CGEventTapOptions_kCGEventTapOptionListenOnly: CGEventTapOptions = 1;
pub type CGEventTapOptions = u32;
pub type CGEventMask = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CGEventTapProxy {
    _unused: [u8; 0],
}
pub type CGEventTapProxy = *mut __CGEventTapProxy;
pub type CGEventTapCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        proxy: CGEventTapProxy,
        type_: CGEventType,
        event: CGEventRef,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CGEventRef,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CGEventTapInformation {
    pub eventTapID: u32,
    pub tapPoint: CGEventTapLocation,
    pub options: CGEventTapOptions,
    pub eventsOfInterest: CGEventMask,
    pub tappingProcess: pid_t,
    pub processBeingTapped: pid_t,
    pub enabled: bool,
    pub minUsecLatency: f32,
    pub avgUsecLatency: f32,
    pub maxUsecLatency: f32,
}
pub type CGEventTapInformation = __CGEventTapInformation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CGEventSource {
    _unused: [u8; 0],
}
pub type CGEventSourceRef = *mut __CGEventSource;
pub const CGEventSourceStateID_kCGEventSourceStatePrivate: CGEventSourceStateID = -1;
pub const CGEventSourceStateID_kCGEventSourceStateCombinedSessionState: CGEventSourceStateID = 0;
pub const CGEventSourceStateID_kCGEventSourceStateHIDSystemState: CGEventSourceStateID = 1;
pub type CGEventSourceStateID = i32;
pub type CGEventSourceKeyboardType = u32;
extern "C" {
    pub fn CGEventGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGEventCreate(source: CGEventSourceRef) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateData(allocator: CFAllocatorRef, event: CGEventRef) -> CFDataRef;
}
extern "C" {
    pub fn CGEventCreateFromData(allocator: CFAllocatorRef, data: CFDataRef) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateMouseEvent(
        source: CGEventSourceRef,
        mouseType: CGEventType,
        mouseCursorPosition: CGPoint,
        mouseButton: CGMouseButton,
    ) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateKeyboardEvent(
        source: CGEventSourceRef,
        virtualKey: CGKeyCode,
        keyDown: bool,
    ) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateScrollWheelEvent(
        source: CGEventSourceRef,
        units: CGScrollEventUnit,
        wheelCount: u32,
        wheel1: i32,
        ...
    ) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateScrollWheelEvent2(
        source: CGEventSourceRef,
        units: CGScrollEventUnit,
        wheelCount: u32,
        wheel1: i32,
        wheel2: i32,
        wheel3: i32,
    ) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateCopy(event: CGEventRef) -> CGEventRef;
}
extern "C" {
    pub fn CGEventCreateSourceFromEvent(event: CGEventRef) -> CGEventSourceRef;
}
extern "C" {
    pub fn CGEventSetSource(event: CGEventRef, source: CGEventSourceRef);
}
extern "C" {
    pub fn CGEventGetType(event: CGEventRef) -> CGEventType;
}
extern "C" {
    pub fn CGEventSetType(event: CGEventRef, type_: CGEventType);
}
extern "C" {
    pub fn CGEventGetTimestamp(event: CGEventRef) -> CGEventTimestamp;
}
extern "C" {
    pub fn CGEventSetTimestamp(event: CGEventRef, timestamp: CGEventTimestamp);
}
extern "C" {
    pub fn CGEventGetLocation(event: CGEventRef) -> CGPoint;
}
extern "C" {
    pub fn CGEventGetUnflippedLocation(event: CGEventRef) -> CGPoint;
}
extern "C" {
    pub fn CGEventSetLocation(event: CGEventRef, location: CGPoint);
}
extern "C" {
    pub fn CGEventGetFlags(event: CGEventRef) -> CGEventFlags;
}
extern "C" {
    pub fn CGEventSetFlags(event: CGEventRef, flags: CGEventFlags);
}
extern "C" {
    pub fn CGEventKeyboardGetUnicodeString(
        event: CGEventRef,
        maxStringLength: UniCharCount,
        actualStringLength: *mut UniCharCount,
        unicodeString: *mut UniChar,
    );
}
extern "C" {
    pub fn CGEventKeyboardSetUnicodeString(
        event: CGEventRef,
        stringLength: UniCharCount,
        unicodeString: *const UniChar,
    );
}
extern "C" {
    pub fn CGEventGetIntegerValueField(event: CGEventRef, field: CGEventField) -> i64;
}
extern "C" {
    pub fn CGEventSetIntegerValueField(event: CGEventRef, field: CGEventField, value: i64);
}
extern "C" {
    pub fn CGEventGetDoubleValueField(event: CGEventRef, field: CGEventField) -> f64;
}
extern "C" {
    pub fn CGEventSetDoubleValueField(event: CGEventRef, field: CGEventField, value: f64);
}
extern "C" {
    pub fn CGEventTapCreate(
        tap: CGEventTapLocation,
        place: CGEventTapPlacement,
        options: CGEventTapOptions,
        eventsOfInterest: CGEventMask,
        callback: CGEventTapCallBack,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CGEventTapCreateForPSN(
        processSerialNumber: *mut ::std::os::raw::c_void,
        place: CGEventTapPlacement,
        options: CGEventTapOptions,
        eventsOfInterest: CGEventMask,
        callback: CGEventTapCallBack,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CGEventTapCreateForPid(
        pid: pid_t,
        place: CGEventTapPlacement,
        options: CGEventTapOptions,
        eventsOfInterest: CGEventMask,
        callback: CGEventTapCallBack,
        userInfo: *mut ::std::os::raw::c_void,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CGEventTapEnable(tap: CFMachPortRef, enable: bool);
}
extern "C" {
    pub fn CGEventTapIsEnabled(tap: CFMachPortRef) -> bool;
}
extern "C" {
    pub fn CGEventTapPostEvent(proxy: CGEventTapProxy, event: CGEventRef);
}
extern "C" {
    pub fn CGEventPost(tap: CGEventTapLocation, event: CGEventRef);
}
extern "C" {
    pub fn CGEventPostToPSN(processSerialNumber: *mut ::std::os::raw::c_void, event: CGEventRef);
}
extern "C" {
    pub fn CGEventPostToPid(pid: pid_t, event: CGEventRef);
}
extern "C" {
    pub fn CGGetEventTapList(
        maxNumberOfTaps: u32,
        tapList: *mut CGEventTapInformation,
        eventTapCount: *mut u32,
    ) -> CGError;
}
extern "C" {
    pub fn CGPreflightListenEventAccess() -> bool;
}
extern "C" {
    pub fn CGRequestListenEventAccess() -> bool;
}
extern "C" {
    pub fn CGPreflightPostEventAccess() -> bool;
}
extern "C" {
    pub fn CGRequestPostEventAccess() -> bool;
}
extern "C" {
    pub fn CGEventSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGEventSourceCreate(stateID: CGEventSourceStateID) -> CGEventSourceRef;
}
extern "C" {
    pub fn CGEventSourceGetKeyboardType(source: CGEventSourceRef) -> CGEventSourceKeyboardType;
}
extern "C" {
    pub fn CGEventSourceSetKeyboardType(
        source: CGEventSourceRef,
        keyboardType: CGEventSourceKeyboardType,
    );
}
extern "C" {
    pub fn CGEventSourceGetPixelsPerLine(source: CGEventSourceRef) -> f64;
}
extern "C" {
    pub fn CGEventSourceSetPixelsPerLine(source: CGEventSourceRef, pixelsPerLine: f64);
}
extern "C" {
    pub fn CGEventSourceGetSourceStateID(source: CGEventSourceRef) -> CGEventSourceStateID;
}
extern "C" {
    pub fn CGEventSourceButtonState(stateID: CGEventSourceStateID, button: CGMouseButton) -> bool;
}
extern "C" {
    pub fn CGEventSourceKeyState(stateID: CGEventSourceStateID, key: CGKeyCode) -> bool;
}
extern "C" {
    pub fn CGEventSourceFlagsState(stateID: CGEventSourceStateID) -> CGEventFlags;
}
extern "C" {
    pub fn CGEventSourceSecondsSinceLastEventType(
        stateID: CGEventSourceStateID,
        eventType: CGEventType,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CGEventSourceCounterForEventType(
        stateID: CGEventSourceStateID,
        eventType: CGEventType,
    ) -> u32;
}
extern "C" {
    pub fn CGEventSourceSetUserData(source: CGEventSourceRef, userData: i64);
}
extern "C" {
    pub fn CGEventSourceGetUserData(source: CGEventSourceRef) -> i64;
}
extern "C" {
    pub fn CGEventSourceSetLocalEventsFilterDuringSuppressionState(
        source: CGEventSourceRef,
        filter: CGEventFilterMask,
        state: CGEventSuppressionState,
    );
}
extern "C" {
    pub fn CGEventSourceGetLocalEventsFilterDuringSuppressionState(
        source: CGEventSourceRef,
        state: CGEventSuppressionState,
    ) -> CGEventFilterMask;
}
extern "C" {
    pub fn CGEventSourceSetLocalEventsSuppressionInterval(
        source: CGEventSourceRef,
        seconds: CFTimeInterval,
    );
}
extern "C" {
    pub fn CGEventSourceGetLocalEventsSuppressionInterval(
        source: CGEventSourceRef,
    ) -> CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPSConverter {
    _unused: [u8; 0],
}
pub type CGPSConverterRef = *mut CGPSConverter;
pub type CGPSConverterBeginDocumentCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
pub type CGPSConverterEndDocumentCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, success: bool)>;
pub type CGPSConverterBeginPageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        pageNumber: usize,
        pageInfo: CFDictionaryRef,
    ),
>;
pub type CGPSConverterEndPageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut ::std::os::raw::c_void,
        pageNumber: usize,
        pageInfo: CFDictionaryRef,
    ),
>;
pub type CGPSConverterProgressCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
pub type CGPSConverterMessageCallback = ::std::option::Option<
    unsafe extern "C" fn(info: *mut ::std::os::raw::c_void, message: CFStringRef),
>;
pub type CGPSConverterReleaseInfoCallback =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPSConverterCallbacks {
    pub version: ::std::os::raw::c_uint,
    pub beginDocument: CGPSConverterBeginDocumentCallback,
    pub endDocument: CGPSConverterEndDocumentCallback,
    pub beginPage: CGPSConverterBeginPageCallback,
    pub endPage: CGPSConverterEndPageCallback,
    pub noteProgress: CGPSConverterProgressCallback,
    pub noteMessage: CGPSConverterMessageCallback,
    pub releaseInfo: CGPSConverterReleaseInfoCallback,
}
extern "C" {
    pub fn CGPSConverterCreate(
        info: *mut ::std::os::raw::c_void,
        callbacks: *const CGPSConverterCallbacks,
        options: CFDictionaryRef,
    ) -> CGPSConverterRef;
}
extern "C" {
    pub fn CGPSConverterConvert(
        converter: CGPSConverterRef,
        provider: CGDataProviderRef,
        consumer: CGDataConsumerRef,
        options: CFDictionaryRef,
    ) -> bool;
}
extern "C" {
    pub fn CGPSConverterAbort(converter: CGPSConverterRef) -> bool;
}
extern "C" {
    pub fn CGPSConverterIsConverting(converter: CGPSConverterRef) -> bool;
}
extern "C" {
    pub fn CGPSConverterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CGSessionCopyCurrentDictionary() -> CFDictionaryRef;
}
extern "C" {
    pub fn CGDirectDisplayCopyCurrentMetalDevice(display: CGDirectDisplayID) -> *mut u64;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigacts {
    pub _address: u8,
}
pub type instancetype = id;

impl ::std::fmt::Debug for IORPCMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(stringify!(#ty))
            .finish()
    }
}
                