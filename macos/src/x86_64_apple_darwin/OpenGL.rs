/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const COPYFILE_STATE_SRC_FD: u32 = 1;
pub const COPYFILE_STATE_SRC_FILENAME: u32 = 2;
pub const COPYFILE_STATE_DST_FD: u32 = 3;
pub const COPYFILE_STATE_DST_FILENAME: u32 = 4;
pub const COPYFILE_STATE_QUARANTINE: u32 = 5;
pub const COPYFILE_STATE_STATUS_CB: u32 = 6;
pub const COPYFILE_STATE_STATUS_CTX: u32 = 7;
pub const COPYFILE_STATE_COPIED: u32 = 8;
pub const COPYFILE_STATE_XATTRNAME: u32 = 9;
pub const COPYFILE_STATE_WAS_CLONED: u32 = 10;
pub const COPYFILE_STATE_SRC_BSIZE: u32 = 11;
pub const COPYFILE_STATE_DST_BSIZE: u32 = 12;
pub const COPYFILE_STATE_BSIZE: u32 = 13;
pub const COPYFILE_DISABLE_VAR: &[u8; 17usize] = b"COPYFILE_DISABLE\0";
pub const COPYFILE_ACL: u32 = 1;
pub const COPYFILE_STAT: u32 = 2;
pub const COPYFILE_XATTR: u32 = 4;
pub const COPYFILE_DATA: u32 = 8;
pub const COPYFILE_SECURITY: u32 = 3;
pub const COPYFILE_METADATA: u32 = 7;
pub const COPYFILE_ALL: u32 = 15;
pub const COPYFILE_RECURSIVE: u32 = 32768;
pub const COPYFILE_CHECK: u32 = 65536;
pub const COPYFILE_EXCL: u32 = 131072;
pub const COPYFILE_NOFOLLOW_SRC: u32 = 262144;
pub const COPYFILE_NOFOLLOW_DST: u32 = 524288;
pub const COPYFILE_MOVE: u32 = 1048576;
pub const COPYFILE_UNLINK: u32 = 2097152;
pub const COPYFILE_NOFOLLOW: u32 = 786432;
pub const COPYFILE_PACK: u32 = 4194304;
pub const COPYFILE_UNPACK: u32 = 8388608;
pub const COPYFILE_CLONE: u32 = 16777216;
pub const COPYFILE_CLONE_FORCE: u32 = 33554432;
pub const COPYFILE_RUN_IN_PLACE: u32 = 67108864;
pub const COPYFILE_DATA_SPARSE: u32 = 134217728;
pub const COPYFILE_PRESERVE_DST_TRACKED: u32 = 268435456;
pub const COPYFILE_VERBOSE: u32 = 1073741824;
pub const COPYFILE_RECURSE_ERROR: u32 = 0;
pub const COPYFILE_RECURSE_FILE: u32 = 1;
pub const COPYFILE_RECURSE_DIR: u32 = 2;
pub const COPYFILE_RECURSE_DIR_CLEANUP: u32 = 3;
pub const COPYFILE_COPY_DATA: u32 = 4;
pub const COPYFILE_COPY_XATTR: u32 = 5;
pub const COPYFILE_START: u32 = 1;
pub const COPYFILE_FINISH: u32 = 2;
pub const COPYFILE_ERR: u32 = 3;
pub const COPYFILE_PROGRESS: u32 = 4;
pub const COPYFILE_CONTINUE: u32 = 0;
pub const COPYFILE_SKIP: u32 = 1;
pub const COPYFILE_QUIT: u32 = 2;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FE_INEXACT: u32 = 32;
pub const FE_UNDERFLOW: u32 = 16;
pub const FE_OVERFLOW: u32 = 8;
pub const FE_DIVBYZERO: u32 = 4;
pub const FE_INVALID: u32 = 1;
pub const FE_DENORMALOPERAND: u32 = 2;
pub const FE_ALL_EXCEPT: u32 = 63;
pub const FE_TONEAREST: u32 = 0;
pub const FE_DOWNWARD: u32 = 1024;
pub const FE_UPWARD: u32 = 2048;
pub const FE_TOWARDZERO: u32 = 3072;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const PRId8: &[u8; 4usize] = b"hhd\0";
pub const PRIi8: &[u8; 4usize] = b"hhi\0";
pub const PRIo8: &[u8; 4usize] = b"hho\0";
pub const PRIu8: &[u8; 4usize] = b"hhu\0";
pub const PRIx8: &[u8; 4usize] = b"hhx\0";
pub const PRIX8: &[u8; 4usize] = b"hhX\0";
pub const PRId16: &[u8; 3usize] = b"hd\0";
pub const PRIi16: &[u8; 3usize] = b"hi\0";
pub const PRIo16: &[u8; 3usize] = b"ho\0";
pub const PRIu16: &[u8; 3usize] = b"hu\0";
pub const PRIx16: &[u8; 3usize] = b"hx\0";
pub const PRIX16: &[u8; 3usize] = b"hX\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRId64: &[u8; 4usize] = b"lld\0";
pub const PRIi64: &[u8; 4usize] = b"lli\0";
pub const PRIo64: &[u8; 4usize] = b"llo\0";
pub const PRIu64: &[u8; 4usize] = b"llu\0";
pub const PRIx64: &[u8; 4usize] = b"llx\0";
pub const PRIX64: &[u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &[u8; 2usize] = b"d\0";
pub const PRIiFAST32: &[u8; 2usize] = b"i\0";
pub const PRIoFAST32: &[u8; 2usize] = b"o\0";
pub const PRIuFAST32: &[u8; 2usize] = b"u\0";
pub const PRIxFAST32: &[u8; 2usize] = b"x\0";
pub const PRIXFAST32: &[u8; 2usize] = b"X\0";
pub const PRIdFAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"jd\0";
pub const PRIiMAX: &[u8; 3usize] = b"ji\0";
pub const PRIoMAX: &[u8; 3usize] = b"jo\0";
pub const PRIuMAX: &[u8; 3usize] = b"ju\0";
pub const PRIxMAX: &[u8; 3usize] = b"jx\0";
pub const PRIXMAX: &[u8; 3usize] = b"jX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNd64: &[u8; 4usize] = b"lld\0";
pub const SCNi64: &[u8; 4usize] = b"lli\0";
pub const SCNo64: &[u8; 4usize] = b"llo\0";
pub const SCNu64: &[u8; 4usize] = b"llu\0";
pub const SCNx64: &[u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &[u8; 2usize] = b"d\0";
pub const SCNiFAST32: &[u8; 2usize] = b"i\0";
pub const SCNoFAST32: &[u8; 2usize] = b"o\0";
pub const SCNuFAST32: &[u8; 2usize] = b"u\0";
pub const SCNxFAST32: &[u8; 2usize] = b"x\0";
pub const SCNdFAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"jd\0";
pub const SCNiMAX: &[u8; 3usize] = b"ji\0";
pub const SCNoMAX: &[u8; 3usize] = b"jo\0";
pub const SCNuMAX: &[u8; 3usize] = b"ju\0";
pub const SCNxMAX: &[u8; 3usize] = b"jx\0";
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const RPP_ECHO_OFF: u32 = 0;
pub const RPP_ECHO_ON: u32 = 1;
pub const RPP_REQUIRE_TTY: u32 = 2;
pub const RPP_FORCELOWER: u32 = 4;
pub const RPP_FORCEUPPER: u32 = 8;
pub const RPP_SEVENBIT: u32 = 16;
pub const RPP_STDIN: u32 = 32;
pub const _JBLEN: u32 = 37;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const _PATH_PWD: &[u8; 5usize] = b"/etc\0";
pub const _PATH_PASSWD: &[u8; 12usize] = b"/etc/passwd\0";
pub const _PASSWD: &[u8; 7usize] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &[u8; 19usize] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &[u8; 10usize] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &[u8; 14usize] = b"master.passwd\0";
pub const _PATH_MP_DB: &[u8; 12usize] = b"/etc/pwd.db\0";
pub const _MP_DB: &[u8; 7usize] = b"pwd.db\0";
pub const _PATH_SMP_DB: &[u8; 13usize] = b"/etc/spwd.db\0";
pub const _SMP_DB: &[u8; 8usize] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &[u8; 19usize] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VEOL2: u32 = 2;
pub const VERASE: u32 = 3;
pub const VWERASE: u32 = 4;
pub const VKILL: u32 = 5;
pub const VREPRINT: u32 = 6;
pub const VINTR: u32 = 8;
pub const VQUIT: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VDSUSP: u32 = 11;
pub const VSTART: u32 = 12;
pub const VSTOP: u32 = 13;
pub const VLNEXT: u32 = 14;
pub const VDISCARD: u32 = 15;
pub const VMIN: u32 = 16;
pub const VTIME: u32 = 17;
pub const VSTATUS: u32 = 18;
pub const NCCS: u32 = 20;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IXON: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const ONLCR: u32 = 2;
pub const OXTABS: u32 = 4;
pub const ONOEOT: u32 = 8;
pub const OCRNL: u32 = 16;
pub const ONOCR: u32 = 32;
pub const ONLRET: u32 = 64;
pub const OFILL: u32 = 128;
pub const NLDLY: u32 = 768;
pub const TABDLY: u32 = 3076;
pub const CRDLY: u32 = 12288;
pub const FFDLY: u32 = 16384;
pub const BSDLY: u32 = 32768;
pub const VTDLY: u32 = 65536;
pub const OFDEL: u32 = 131072;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const NL2: u32 = 512;
pub const NL3: u32 = 768;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 4;
pub const CR0: u32 = 0;
pub const CR1: u32 = 4096;
pub const CR2: u32 = 8192;
pub const CR3: u32 = 12288;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const BS0: u32 = 0;
pub const BS1: u32 = 32768;
pub const VT0: u32 = 0;
pub const VT1: u32 = 65536;
pub const CIGNORE: u32 = 1;
pub const CSIZE: u32 = 768;
pub const CS5: u32 = 0;
pub const CS6: u32 = 256;
pub const CS7: u32 = 512;
pub const CS8: u32 = 768;
pub const CSTOPB: u32 = 1024;
pub const CREAD: u32 = 2048;
pub const PARENB: u32 = 4096;
pub const PARODD: u32 = 8192;
pub const HUPCL: u32 = 16384;
pub const CLOCAL: u32 = 32768;
pub const CCTS_OFLOW: u32 = 65536;
pub const CRTS_IFLOW: u32 = 131072;
pub const CDTR_IFLOW: u32 = 262144;
pub const CDSR_OFLOW: u32 = 524288;
pub const CCAR_OFLOW: u32 = 1048576;
pub const MDMBUF: u32 = 1048576;
pub const ECHOKE: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHONL: u32 = 16;
pub const ECHOPRT: u32 = 32;
pub const ECHOCTL: u32 = 64;
pub const ISIG: u32 = 128;
pub const ICANON: u32 = 256;
pub const ALTWERASE: u32 = 512;
pub const IEXTEN: u32 = 1024;
pub const EXTPROC: u32 = 2048;
pub const TOSTOP: u32 = 4194304;
pub const FLUSHO: u32 = 8388608;
pub const NOKERNINFO: u32 = 33554432;
pub const PENDIN: u32 = 536870912;
pub const NOFLSH: u32 = 2147483648;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCSASOFT: u32 = 16;
pub const B0: u32 = 0;
pub const B50: u32 = 50;
pub const B75: u32 = 75;
pub const B110: u32 = 110;
pub const B134: u32 = 134;
pub const B150: u32 = 150;
pub const B200: u32 = 200;
pub const B300: u32 = 300;
pub const B600: u32 = 600;
pub const B1200: u32 = 1200;
pub const B1800: u32 = 1800;
pub const B2400: u32 = 2400;
pub const B4800: u32 = 4800;
pub const B9600: u32 = 9600;
pub const B19200: u32 = 19200;
pub const B38400: u32 = 38400;
pub const B7200: u32 = 7200;
pub const B14400: u32 = 14400;
pub const B28800: u32 = 28800;
pub const B57600: u32 = 57600;
pub const B76800: u32 = 76800;
pub const B115200: u32 = 115200;
pub const B230400: u32 = 230400;
pub const EXTA: u32 = 19200;
pub const EXTB: u32 = 38400;
pub const TCIFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFLUSH: u32 = 3;
pub const TCOOFF: u32 = 1;
pub const TCOON: u32 = 2;
pub const TCIOFF: u32 = 3;
pub const TCION: u32 = 4;
pub const TTYDEF_IFLAG: u32 = 11010;
pub const TTYDEF_OFLAG: u32 = 3;
pub const TTYDEF_LFLAG: u32 = 1483;
pub const TTYDEF_CFLAG: u32 = 19200;
pub const TTYDEF_SPEED: u32 = 9600;
pub const CEOL: u32 = 255;
pub const CERASE: u32 = 127;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u32 = 255;
pub const PIDLOCK_NONBLOCK: u32 = 1;
pub const PIDLOCK_USEHOSTNAME: u32 = 2;
pub const FPARSELN_UNESCESC: u32 = 1;
pub const FPARSELN_UNESCCONT: u32 = 2;
pub const FPARSELN_UNESCCOMM: u32 = 4;
pub const FPARSELN_UNESCREST: u32 = 8;
pub const FPARSELN_UNESCALL: u32 = 15;
pub const OPENDEV_PART: u32 = 1;
pub const OPENDEV_BLCK: u32 = 4;
pub const _PATH_UTMP: &[u8; 14usize] = b"/var/run/utmp\0";
pub const _PATH_WTMP: &[u8; 14usize] = b"/var/log/wtmp\0";
pub const _PATH_LASTLOG: &[u8; 17usize] = b"/var/log/lastlog\0";
pub const UT_NAMESIZE: u32 = 8;
pub const UT_LINESIZE: u32 = 8;
pub const UT_HOSTSIZE: u32 = 16;
pub const LC_COLLATE_MASK: u32 = 1;
pub const LC_CTYPE_MASK: u32 = 2;
pub const LC_MESSAGES_MASK: u32 = 4;
pub const LC_MONETARY_MASK: u32 = 8;
pub const LC_NUMERIC_MASK: u32 = 16;
pub const LC_TIME_MASK: u32 = 32;
pub const _LC_NUM_MASK: u32 = 6;
pub const _LC_LAST_MASK: u32 = 32;
pub const XATTR_OPERATION_INTENT_COPY: u32 = 1;
pub const XATTR_OPERATION_INTENT_SAVE: u32 = 2;
pub const XATTR_OPERATION_INTENT_SHARE: u32 = 3;
pub const XATTR_OPERATION_INTENT_SYNC: u32 = 4;
pub const XATTR_OPERATION_INTENT_BACKUP: u32 = 5;
pub const O_SYNC: u32 = 128;
pub const O_DSYNC: u32 = 4194304;
pub const AIO_ALLDONE: u32 = 1;
pub const AIO_CANCELED: u32 = 2;
pub const AIO_NOTCANCELED: u32 = 4;
pub const LIO_NOP: u32 = 0;
pub const LIO_READ: u32 = 1;
pub const LIO_WRITE: u32 = 2;
pub const LIO_NOWAIT: u32 = 1;
pub const LIO_WAIT: u32 = 2;
pub const AIO_LISTIO_MAX: u32 = 16;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18usize] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const C_ISSOCK: u32 = 49152;
pub const C_ISLNK: u32 = 40960;
pub const C_ISCTG: u32 = 36864;
pub const C_ISREG: u32 = 32768;
pub const C_ISBLK: u32 = 24576;
pub const C_ISDIR: u32 = 16384;
pub const C_ISCHR: u32 = 8192;
pub const C_ISFIFO: u32 = 4096;
pub const C_ISUID: u32 = 2048;
pub const C_ISGID: u32 = 1024;
pub const C_ISVTX: u32 = 512;
pub const C_IRUSR: u32 = 256;
pub const C_IWUSR: u32 = 128;
pub const C_IXUSR: u32 = 64;
pub const C_IRGRP: u32 = 32;
pub const C_IWGRP: u32 = 16;
pub const C_IXGRP: u32 = 8;
pub const C_IROTH: u32 = 4;
pub const C_IWOTH: u32 = 2;
pub const C_IXOTH: u32 = 1;
pub const MAGIC: &[u8; 7usize] = b"070707\0";
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_LOCAL: u32 = 4;
pub const RTLD_GLOBAL: u32 = 8;
pub const RTLD_NOLOAD: u32 = 16;
pub const RTLD_NODELETE: u32 = 128;
pub const RTLD_FIRST: u32 = 256;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const MM_HARD: u32 = 1;
pub const MM_SOFT: u32 = 2;
pub const MM_FIRM: u32 = 4;
pub const MM_APPL: u32 = 16;
pub const MM_UTIL: u32 = 32;
pub const MM_OPSYS: u32 = 64;
pub const MM_PRINT: u32 = 256;
pub const MM_CONSOLE: u32 = 512;
pub const MM_RECOVER: u32 = 4096;
pub const MM_NRECOV: u32 = 8192;
pub const MM_NOSEV: u32 = 0;
pub const MM_HALT: u32 = 1;
pub const MM_ERROR: u32 = 2;
pub const MM_WARNING: u32 = 3;
pub const MM_INFO: u32 = 4;
pub const MM_NULLSEV: u32 = 0;
pub const MM_NULLMC: u32 = 0;
pub const MM_OK: u32 = 0;
pub const MM_NOMSG: u32 = 1;
pub const MM_NOCON: u32 = 2;
pub const MM_NOTOK: u32 = 3;
pub const FNM_NOMATCH: u32 = 1;
pub const FNM_NOESCAPE: u32 = 1;
pub const FNM_PATHNAME: u32 = 2;
pub const FNM_PERIOD: u32 = 4;
pub const FNM_NOSYS: i32 = -1;
pub const FNM_LEADING_DIR: u32 = 8;
pub const FNM_CASEFOLD: u32 = 16;
pub const FNM_IGNORECASE: u32 = 16;
pub const FNM_FILE_NAME: u32 = 2;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const EF_IS_SYNTHETIC: u32 = 32;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const FTW_F: u32 = 0;
pub const FTW_D: u32 = 1;
pub const FTW_DNR: u32 = 2;
pub const FTW_DP: u32 = 3;
pub const FTW_NS: u32 = 4;
pub const FTW_SL: u32 = 5;
pub const FTW_SLN: u32 = 6;
pub const FTW_PHYS: u32 = 1;
pub const FTW_MOUNT: u32 = 2;
pub const FTW_DEPTH: u32 = 4;
pub const FTW_CHDIR: u32 = 8;
pub const GLOB_APPEND: u32 = 1;
pub const GLOB_DOOFFS: u32 = 2;
pub const GLOB_ERR: u32 = 4;
pub const GLOB_MARK: u32 = 8;
pub const GLOB_NOCHECK: u32 = 16;
pub const GLOB_NOSORT: u32 = 32;
pub const GLOB_NOESCAPE: u32 = 8192;
pub const GLOB_NOSPACE: i32 = -1;
pub const GLOB_ABORTED: i32 = -2;
pub const GLOB_NOMATCH: i32 = -3;
pub const GLOB_NOSYS: i32 = -4;
pub const GLOB_ALTDIRFUNC: u32 = 64;
pub const GLOB_BRACE: u32 = 128;
pub const GLOB_MAGCHAR: u32 = 256;
pub const GLOB_NOMAGIC: u32 = 512;
pub const GLOB_QUOTE: u32 = 1024;
pub const GLOB_TILDE: u32 = 2048;
pub const GLOB_LIMIT: u32 = 4096;
pub const _GLOB_ERR_BLOCK: u32 = 2147483648;
pub const GLOB_MAXPATH: u32 = 4096;
pub const GLOB_ABEND: i32 = -2;
pub const _PATH_GROUP: &[u8; 11usize] = b"/etc/group\0";
pub const _LIBICONV_VERSION: u32 = 267;
pub const ICONV_TRIVIALP: u32 = 0;
pub const ICONV_GET_TRANSLITERATE: u32 = 1;
pub const ICONV_SET_TRANSLITERATE: u32 = 2;
pub const ICONV_GET_DISCARD_ILSEQ: u32 = 3;
pub const ICONV_SET_DISCARD_ILSEQ: u32 = 4;
pub const ICONV_SET_HOOKS: u32 = 5;
pub const ICONV_SET_FALLBACKS: u32 = 6;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const CODESET: u32 = 0;
pub const D_T_FMT: u32 = 1;
pub const D_FMT: u32 = 2;
pub const T_FMT: u32 = 3;
pub const T_FMT_AMPM: u32 = 4;
pub const AM_STR: u32 = 5;
pub const PM_STR: u32 = 6;
pub const DAY_1: u32 = 7;
pub const DAY_2: u32 = 8;
pub const DAY_3: u32 = 9;
pub const DAY_4: u32 = 10;
pub const DAY_5: u32 = 11;
pub const DAY_6: u32 = 12;
pub const DAY_7: u32 = 13;
pub const ABDAY_1: u32 = 14;
pub const ABDAY_2: u32 = 15;
pub const ABDAY_3: u32 = 16;
pub const ABDAY_4: u32 = 17;
pub const ABDAY_5: u32 = 18;
pub const ABDAY_6: u32 = 19;
pub const ABDAY_7: u32 = 20;
pub const MON_1: u32 = 21;
pub const MON_2: u32 = 22;
pub const MON_3: u32 = 23;
pub const MON_4: u32 = 24;
pub const MON_5: u32 = 25;
pub const MON_6: u32 = 26;
pub const MON_7: u32 = 27;
pub const MON_8: u32 = 28;
pub const MON_9: u32 = 29;
pub const MON_10: u32 = 30;
pub const MON_11: u32 = 31;
pub const MON_12: u32 = 32;
pub const ABMON_1: u32 = 33;
pub const ABMON_2: u32 = 34;
pub const ABMON_3: u32 = 35;
pub const ABMON_4: u32 = 36;
pub const ABMON_5: u32 = 37;
pub const ABMON_6: u32 = 38;
pub const ABMON_7: u32 = 39;
pub const ABMON_8: u32 = 40;
pub const ABMON_9: u32 = 41;
pub const ABMON_10: u32 = 42;
pub const ABMON_11: u32 = 43;
pub const ABMON_12: u32 = 44;
pub const ERA: u32 = 45;
pub const ERA_D_FMT: u32 = 46;
pub const ERA_D_T_FMT: u32 = 47;
pub const ERA_T_FMT: u32 = 48;
pub const ALT_DIGITS: u32 = 49;
pub const RADIXCHAR: u32 = 50;
pub const THOUSEP: u32 = 51;
pub const YESEXPR: u32 = 52;
pub const NOEXPR: u32 = 53;
pub const YESSTR: u32 = 54;
pub const NOSTR: u32 = 55;
pub const CRNCYSTR: u32 = 56;
pub const D_MD_ORDER: u32 = 57;
pub const DBM_RDONLY: u32 = 0;
pub const DBM_INSERT: u32 = 0;
pub const DBM_REPLACE: u32 = 1;
pub const DBM_SUFFIX: &[u8; 4usize] = b".db\0";
pub const _PATH_HEQUIV: &[u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14usize] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &[u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14usize] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const DLIL_SDLDATACOUNT: u32 = 12;
pub const IF_NAMESIZE: u32 = 16;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const APPLE_IF_FAM_LOOPBACK: u32 = 1;
pub const APPLE_IF_FAM_ETHERNET: u32 = 2;
pub const APPLE_IF_FAM_SLIP: u32 = 3;
pub const APPLE_IF_FAM_TUN: u32 = 4;
pub const APPLE_IF_FAM_VLAN: u32 = 5;
pub const APPLE_IF_FAM_PPP: u32 = 6;
pub const APPLE_IF_FAM_PVC: u32 = 7;
pub const APPLE_IF_FAM_DISC: u32 = 8;
pub const APPLE_IF_FAM_MDECAP: u32 = 9;
pub const APPLE_IF_FAM_GIF: u32 = 10;
pub const APPLE_IF_FAM_FAITH: u32 = 11;
pub const APPLE_IF_FAM_STF: u32 = 12;
pub const APPLE_IF_FAM_FIREWIRE: u32 = 13;
pub const APPLE_IF_FAM_BOND: u32 = 14;
pub const APPLE_IF_FAM_CELLULAR: u32 = 15;
pub const APPLE_IF_FAM_UNUSED_16: u32 = 16;
pub const APPLE_IF_FAM_UTUN: u32 = 17;
pub const APPLE_IF_FAM_IPSEC: u32 = 18;
pub const IF_MINMTU: u32 = 72;
pub const IF_MAXMTU: u32 = 65535;
pub const IFNAMSIZ: u32 = 16;
pub const IFF_UP: u32 = 1;
pub const IFF_BROADCAST: u32 = 2;
pub const IFF_DEBUG: u32 = 4;
pub const IFF_LOOPBACK: u32 = 8;
pub const IFF_POINTOPOINT: u32 = 16;
pub const IFF_NOTRAILERS: u32 = 32;
pub const IFF_RUNNING: u32 = 64;
pub const IFF_NOARP: u32 = 128;
pub const IFF_PROMISC: u32 = 256;
pub const IFF_ALLMULTI: u32 = 512;
pub const IFF_OACTIVE: u32 = 1024;
pub const IFF_SIMPLEX: u32 = 2048;
pub const IFF_LINK0: u32 = 4096;
pub const IFF_LINK1: u32 = 8192;
pub const IFF_LINK2: u32 = 16384;
pub const IFF_ALTPHYS: u32 = 16384;
pub const IFF_MULTICAST: u32 = 32768;
pub const IFCAP_RXCSUM: u32 = 1;
pub const IFCAP_TXCSUM: u32 = 2;
pub const IFCAP_VLAN_MTU: u32 = 4;
pub const IFCAP_VLAN_HWTAGGING: u32 = 8;
pub const IFCAP_JUMBO_MTU: u32 = 16;
pub const IFCAP_TSO4: u32 = 32;
pub const IFCAP_TSO6: u32 = 64;
pub const IFCAP_LRO: u32 = 128;
pub const IFCAP_AV: u32 = 256;
pub const IFCAP_TXSTATUS: u32 = 512;
pub const IFCAP_SKYWALK: u32 = 1024;
pub const IFCAP_HW_TIMESTAMP: u32 = 2048;
pub const IFCAP_SW_TIMESTAMP: u32 = 4096;
pub const IFCAP_CSUM_PARTIAL: u32 = 8192;
pub const IFCAP_CSUM_ZERO_INVERT: u32 = 16384;
pub const IFCAP_HWCSUM: u32 = 3;
pub const IFCAP_TSO: u32 = 96;
pub const IFCAP_VALID: u32 = 32767;
pub const IFQ_MAXLEN: u32 = 128;
pub const IFNET_SLOWHZ: u32 = 1;
pub const IFQ_DEF_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_DEF_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_DEF_L4S_TARGET_DELAY: u32 = 2000000;
pub const IFQ_DEF_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_L4S_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IF_WAKE_ON_MAGIC_PACKET: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_UNKNOWN: u32 = 0;
pub const IFRTYPE_FUNCTIONAL_LOOPBACK: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_WIRED: u32 = 2;
pub const IFRTYPE_FUNCTIONAL_WIFI_INFRA: u32 = 3;
pub const IFRTYPE_FUNCTIONAL_WIFI_AWDL: u32 = 4;
pub const IFRTYPE_FUNCTIONAL_CELLULAR: u32 = 5;
pub const IFRTYPE_FUNCTIONAL_INTCOPROC: u32 = 6;
pub const IFRTYPE_FUNCTIONAL_COMPANIONLINK: u32 = 7;
pub const IFRTYPE_FUNCTIONAL_LAST: u32 = 7;
pub const IFSTATMAX: u32 = 800;
pub const IFT_OTHER: u32 = 1;
pub const IFT_1822: u32 = 2;
pub const IFT_HDH1822: u32 = 3;
pub const IFT_X25DDN: u32 = 4;
pub const IFT_X25: u32 = 5;
pub const IFT_ETHER: u32 = 6;
pub const IFT_ISO88023: u32 = 7;
pub const IFT_ISO88024: u32 = 8;
pub const IFT_ISO88025: u32 = 9;
pub const IFT_ISO88026: u32 = 10;
pub const IFT_STARLAN: u32 = 11;
pub const IFT_P10: u32 = 12;
pub const IFT_P80: u32 = 13;
pub const IFT_HY: u32 = 14;
pub const IFT_FDDI: u32 = 15;
pub const IFT_LAPB: u32 = 16;
pub const IFT_SDLC: u32 = 17;
pub const IFT_T1: u32 = 18;
pub const IFT_CEPT: u32 = 19;
pub const IFT_ISDNBASIC: u32 = 20;
pub const IFT_ISDNPRIMARY: u32 = 21;
pub const IFT_PTPSERIAL: u32 = 22;
pub const IFT_PPP: u32 = 23;
pub const IFT_LOOP: u32 = 24;
pub const IFT_EON: u32 = 25;
pub const IFT_XETHER: u32 = 26;
pub const IFT_NSIP: u32 = 27;
pub const IFT_SLIP: u32 = 28;
pub const IFT_ULTRA: u32 = 29;
pub const IFT_DS3: u32 = 30;
pub const IFT_SIP: u32 = 31;
pub const IFT_FRELAY: u32 = 32;
pub const IFT_RS232: u32 = 33;
pub const IFT_PARA: u32 = 34;
pub const IFT_ARCNET: u32 = 35;
pub const IFT_ARCNETPLUS: u32 = 36;
pub const IFT_ATM: u32 = 37;
pub const IFT_MIOX25: u32 = 38;
pub const IFT_SONET: u32 = 39;
pub const IFT_X25PLE: u32 = 40;
pub const IFT_ISO88022LLC: u32 = 41;
pub const IFT_LOCALTALK: u32 = 42;
pub const IFT_SMDSDXI: u32 = 43;
pub const IFT_FRELAYDCE: u32 = 44;
pub const IFT_V35: u32 = 45;
pub const IFT_HSSI: u32 = 46;
pub const IFT_HIPPI: u32 = 47;
pub const IFT_MODEM: u32 = 48;
pub const IFT_AAL5: u32 = 49;
pub const IFT_SONETPATH: u32 = 50;
pub const IFT_SONETVT: u32 = 51;
pub const IFT_SMDSICIP: u32 = 52;
pub const IFT_PROPVIRTUAL: u32 = 53;
pub const IFT_PROPMUX: u32 = 54;
pub const IFT_GIF: u32 = 55;
pub const IFT_FAITH: u32 = 56;
pub const IFT_STF: u32 = 57;
pub const IFT_6LOWPAN: u32 = 64;
pub const IFT_L2VLAN: u32 = 135;
pub const IFT_IEEE8023ADLAG: u32 = 136;
pub const IFT_IEEE1394: u32 = 144;
pub const IFT_BRIDGE: u32 = 209;
pub const IFT_ENC: u32 = 244;
pub const IFT_PFLOG: u32 = 245;
pub const IFT_PFSYNC: u32 = 246;
pub const IFT_CARP: u32 = 248;
pub const IFT_PKTAP: u32 = 254;
pub const IFT_CELLULAR: u32 = 255;
pub const IFT_PDP: u32 = 255;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TH_ECE: u32 = 64;
pub const TH_CWR: u32 = 128;
pub const TH_AE: u32 = 256;
pub const TH_FLAGS: u32 = 247;
pub const TH_FLAGS_ALL: u32 = 255;
pub const TH_ACCEPT: u32 = 23;
pub const TH_ACE: u32 = 448;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOLEN_SACK: u32 = 8;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const MAX_TCPOPTLEN: u32 = 40;
pub const TCPOPT_CC: u32 = 11;
pub const TCPOPT_CCNEW: u32 = 12;
pub const TCPOPT_CCECHO: u32 = 13;
pub const TCPOLEN_CC: u32 = 6;
pub const TCPOLEN_CC_APPA: u32 = 8;
pub const TCPOPT_SIGNATURE: u32 = 19;
pub const TCPOLEN_SIGNATURE: u32 = 18;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOLEN_FASTOPEN_REQ: u32 = 2;
pub const TCPOPT_ACCECN0: u32 = 172;
pub const TCPOPT_ACCECN1: u32 = 174;
pub const TCPOLEN_ACCECN_EMPTY: u32 = 2;
pub const TCPOLEN_ACCECN_COUNTER: u32 = 3;
pub const TCPOPT_SACK_HDR: u32 = 16844032;
pub const MAX_SACK_BLKS: u32 = 6;
pub const TCP_MAX_SACK: u32 = 4;
pub const TCP_MSS: u32 = 512;
pub const TCP_MINMSS: u32 = 216;
pub const TCP6_MSS: u32 = 1024;
pub const TCP_MAXWIN: u32 = 65535;
pub const TTCP_CLIENT_SND_WND: u32 = 4096;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const TCP_MAXHLEN: u32 = 60;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_NOPUSH: u32 = 4;
pub const TCP_NOOPT: u32 = 8;
pub const TCP_KEEPALIVE: u32 = 16;
pub const TCP_CONNECTIONTIMEOUT: u32 = 32;
pub const PERSIST_TIMEOUT: u32 = 64;
pub const TCP_RXT_CONNDROPTIME: u32 = 128;
pub const TCP_RXT_FINDROP: u32 = 256;
pub const TCP_KEEPINTVL: u32 = 257;
pub const TCP_KEEPCNT: u32 = 258;
pub const TCP_SENDMOREACKS: u32 = 259;
pub const TCP_ENABLE_ECN: u32 = 260;
pub const TCP_FASTOPEN: u32 = 261;
pub const TCP_CONNECTION_INFO: u32 = 262;
pub const TCP_NOTSENT_LOWAT: u32 = 513;
pub const TCPCI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPCI_OPT_SACK: u32 = 2;
pub const TCPCI_OPT_WSCALE: u32 = 4;
pub const TCPCI_OPT_ECN: u32 = 8;
pub const TCPCI_FLAG_LOSSRECOVERY: u32 = 1;
pub const TCPCI_FLAG_REORDERING_DETECTED: u32 = 2;
pub const NL_SETD: u32 = 1;
pub const NL_CAT_LOCALE: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLWRNORM: u32 = 4;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRBAND: u32 = 256;
pub const POLLEXTEND: u32 = 512;
pub const POLLATTRIB: u32 = 1024;
pub const POLLNLINK: u32 = 2048;
pub const POLLWRITE: u32 = 4096;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const POLLSTANDARD: u32 = 511;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const POSIX_SPAWN_RESETIDS: u32 = 1;
pub const POSIX_SPAWN_SETPGROUP: u32 = 2;
pub const POSIX_SPAWN_SETSIGDEF: u32 = 4;
pub const POSIX_SPAWN_SETSIGMASK: u32 = 8;
pub const POSIX_SPAWN_SETEXEC: u32 = 64;
pub const POSIX_SPAWN_START_SUSPENDED: u32 = 128;
pub const POSIX_SPAWN_SETSID: u32 = 1024;
pub const POSIX_SPAWN_CLOEXEC_DEFAULT: u32 = 16384;
pub const _POSIX_SPAWN_RESLIDE: u32 = 2048;
pub const POSIX_SPAWN_PCONTROL_NONE: u32 = 0;
pub const POSIX_SPAWN_PCONTROL_THROTTLE: u32 = 1;
pub const POSIX_SPAWN_PCONTROL_SUSPEND: u32 = 2;
pub const POSIX_SPAWN_PCONTROL_KILL: u32 = 3;
pub const POSIX_SPAWN_PANIC_ON_CRASH: u32 = 1;
pub const POSIX_SPAWN_PANIC_ON_NON_ZERO_EXIT: u32 = 2;
pub const POSIX_SPAWN_PANIC_ON_EXIT: u32 = 4;
pub const POSIX_SPAWN_PANIC_ON_SPAWN_FAIL: u32 = 8;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_I386_INVOP: u32 = 1;
pub const EXC_I386_DIV: u32 = 1;
pub const EXC_I386_INTO: u32 = 2;
pub const EXC_I386_NOEXT: u32 = 3;
pub const EXC_I386_EXTOVR: u32 = 4;
pub const EXC_I386_EXTERR: u32 = 5;
pub const EXC_I386_EMERR: u32 = 6;
pub const EXC_I386_BOUND: u32 = 7;
pub const EXC_I386_SSEEXTERR: u32 = 8;
pub const EXC_I386_SGL: u32 = 1;
pub const EXC_I386_BPT: u32 = 2;
pub const EXC_I386_DIVERR: u32 = 0;
pub const EXC_I386_SGLSTP: u32 = 1;
pub const EXC_I386_NMIFLT: u32 = 2;
pub const EXC_I386_BPTFLT: u32 = 3;
pub const EXC_I386_INTOFLT: u32 = 4;
pub const EXC_I386_BOUNDFLT: u32 = 5;
pub const EXC_I386_INVOPFLT: u32 = 6;
pub const EXC_I386_NOEXTFLT: u32 = 7;
pub const EXC_I386_DBLFLT: u32 = 8;
pub const EXC_I386_EXTOVRFLT: u32 = 9;
pub const EXC_I386_INVTSSFLT: u32 = 10;
pub const EXC_I386_SEGNPFLT: u32 = 11;
pub const EXC_I386_STKFLT: u32 = 12;
pub const EXC_I386_GPFLT: u32 = 13;
pub const EXC_I386_PGFLT: u32 = 14;
pub const EXC_I386_EXTERRFLT: u32 = 16;
pub const EXC_I386_ALIGNFLT: u32 = 17;
pub const EXC_I386_ENDPERR: u32 = 33;
pub const EXC_I386_ENOEXTFLT: u32 = 32;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const I386_THREAD_STATE_MAX: u32 = 614;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const FPC_IE: u32 = 1;
pub const FPC_IM: u32 = 1;
pub const FPC_DE: u32 = 2;
pub const FPC_DM: u32 = 2;
pub const FPC_ZE: u32 = 4;
pub const FPC_ZM: u32 = 4;
pub const FPC_OE: u32 = 8;
pub const FPC_OM: u32 = 8;
pub const FPC_UE: u32 = 16;
pub const FPC_PE: u32 = 32;
pub const FPC_PC: u32 = 768;
pub const FPC_PC_24: u32 = 0;
pub const FPC_PC_53: u32 = 512;
pub const FPC_PC_64: u32 = 768;
pub const FPC_RC: u32 = 3072;
pub const FPC_RC_RN: u32 = 0;
pub const FPC_RC_RD: u32 = 1024;
pub const FPC_RC_RU: u32 = 2048;
pub const FPC_RC_CHOP: u32 = 3072;
pub const FPC_IC: u32 = 4096;
pub const FPC_IC_PROJ: u32 = 0;
pub const FPC_IC_AFF: u32 = 4096;
pub const FPS_IE: u32 = 1;
pub const FPS_DE: u32 = 2;
pub const FPS_ZE: u32 = 4;
pub const FPS_OE: u32 = 8;
pub const FPS_UE: u32 = 16;
pub const FPS_PE: u32 = 32;
pub const FPS_SF: u32 = 64;
pub const FPS_ES: u32 = 128;
pub const FPS_C0: u32 = 256;
pub const FPS_C1: u32 = 512;
pub const FPS_C2: u32 = 1024;
pub const FPS_TOS: u32 = 14336;
pub const FPS_TOS_SHIFT: u32 = 11;
pub const FPS_C3: u32 = 16384;
pub const FPS_BUSY: u32 = 32768;
pub const FP_NO: u32 = 0;
pub const FP_SOFT: u32 = 1;
pub const FP_287: u32 = 2;
pub const FP_387: u32 = 3;
pub const FP_FXSR: u32 = 4;
pub const EFL_CF: u32 = 1;
pub const EFL_PF: u32 = 4;
pub const EFL_AF: u32 = 16;
pub const EFL_ZF: u32 = 64;
pub const EFL_SF: u32 = 128;
pub const EFL_TF: u32 = 256;
pub const EFL_IF: u32 = 512;
pub const EFL_DF: u32 = 1024;
pub const EFL_OF: u32 = 2048;
pub const EFL_IOPL: u32 = 12288;
pub const EFL_IOPL_KERNEL: u32 = 0;
pub const EFL_IOPL_USER: u32 = 12288;
pub const EFL_NT: u32 = 16384;
pub const EFL_RF: u32 = 65536;
pub const EFL_VM: u32 = 131072;
pub const EFL_AC: u32 = 262144;
pub const EFL_VIF: u32 = 524288;
pub const EFL_VIP: u32 = 1048576;
pub const EFL_ID: u32 = 2097152;
pub const EFL_CLR: u32 = 4294475816;
pub const EFL_SET: u32 = 2;
pub const EFL_USER_SET: u32 = 512;
pub const EFL_USER_CLEAR: u32 = 94208;
pub const i386_THREAD_STATE: u32 = 1;
pub const i386_FLOAT_STATE: u32 = 2;
pub const i386_EXCEPTION_STATE: u32 = 3;
pub const x86_THREAD_STATE32: u32 = 1;
pub const x86_FLOAT_STATE32: u32 = 2;
pub const x86_EXCEPTION_STATE32: u32 = 3;
pub const x86_THREAD_STATE64: u32 = 4;
pub const x86_FLOAT_STATE64: u32 = 5;
pub const x86_EXCEPTION_STATE64: u32 = 6;
pub const x86_THREAD_STATE: u32 = 7;
pub const x86_FLOAT_STATE: u32 = 8;
pub const x86_EXCEPTION_STATE: u32 = 9;
pub const x86_DEBUG_STATE32: u32 = 10;
pub const x86_DEBUG_STATE64: u32 = 11;
pub const x86_DEBUG_STATE: u32 = 12;
pub const THREAD_STATE_NONE: u32 = 13;
pub const x86_AVX_STATE32: u32 = 16;
pub const x86_AVX_STATE64: u32 = 17;
pub const x86_AVX_STATE: u32 = 18;
pub const x86_AVX512_STATE32: u32 = 19;
pub const x86_AVX512_STATE64: u32 = 20;
pub const x86_AVX512_STATE: u32 = 21;
pub const x86_PAGEIN_STATE: u32 = 22;
pub const x86_THREAD_FULL_STATE64: u32 = 23;
pub const x86_INSTRUCTION_STATE: u32 = 24;
pub const x86_LAST_BRANCH_STATE: u32 = 25;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const USER_CODE_SELECTOR: u32 = 23;
pub const USER_DATA_SELECTOR: u32 = 31;
pub const KERN_CODE_SELECTOR: u32 = 8;
pub const KERN_DATA_SELECTOR: u32 = 16;
pub const MACHINE_THREAD_STATE: u32 = 7;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const POSIX_SPAWN_NP_CSM_ALL: u32 = 1;
pub const POSIX_SPAWN_NP_CSM_NOSMT: u32 = 2;
pub const POSIX_SPAWN_NP_CSM_TECS: u32 = 4;
pub const _PTHREAD_MUTEX_POLICY_FAIRSHARE: u32 = 1;
pub const _PTHREAD_MUTEX_POLICY_FIRSTFIT: u32 = 3;
pub const REG_BASIC: u32 = 0;
pub const REG_EXTENDED: u32 = 1;
pub const REG_ICASE: u32 = 2;
pub const REG_NOSUB: u32 = 4;
pub const REG_NEWLINE: u32 = 8;
pub const REG_NOSPEC: u32 = 16;
pub const REG_LITERAL: u32 = 16;
pub const REG_PEND: u32 = 32;
pub const REG_MINIMAL: u32 = 64;
pub const REG_UNGREEDY: u32 = 64;
pub const REG_DUMP: u32 = 128;
pub const REG_ENHANCED: u32 = 256;
pub const REG_ENOSYS: i32 = -1;
pub const REG_NOMATCH: u32 = 1;
pub const REG_BADPAT: u32 = 2;
pub const REG_ECOLLATE: u32 = 3;
pub const REG_ECTYPE: u32 = 4;
pub const REG_EESCAPE: u32 = 5;
pub const REG_ESUBREG: u32 = 6;
pub const REG_EBRACK: u32 = 7;
pub const REG_EPAREN: u32 = 8;
pub const REG_EBRACE: u32 = 9;
pub const REG_BADBR: u32 = 10;
pub const REG_ERANGE: u32 = 11;
pub const REG_ESPACE: u32 = 12;
pub const REG_BADRPT: u32 = 13;
pub const REG_EMPTY: u32 = 14;
pub const REG_ASSERT: u32 = 15;
pub const REG_INVARG: u32 = 16;
pub const REG_ILLSEQ: u32 = 17;
pub const REG_ATOI: u32 = 255;
pub const REG_ITOA: u32 = 256;
pub const REG_NOTBOL: u32 = 1;
pub const REG_NOTEOL: u32 = 2;
pub const REG_STARTEND: u32 = 4;
pub const REG_TRACE: u32 = 256;
pub const REG_LARGE: u32 = 512;
pub const REG_BACKR: u32 = 1024;
pub const REG_BACKTRACKING_MATCHER: u32 = 1024;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 131072;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const NMBCLUSTERS: u32 = 512;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 131072;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const EVFILT_READ: i32 = -1;
pub const EVFILT_WRITE: i32 = -2;
pub const EVFILT_AIO: i32 = -3;
pub const EVFILT_VNODE: i32 = -4;
pub const EVFILT_PROC: i32 = -5;
pub const EVFILT_SIGNAL: i32 = -6;
pub const EVFILT_TIMER: i32 = -7;
pub const EVFILT_MACHPORT: i32 = -8;
pub const EVFILT_FS: i32 = -9;
pub const EVFILT_USER: i32 = -10;
pub const EVFILT_VM: i32 = -12;
pub const EVFILT_EXCEPT: i32 = -15;
pub const EVFILT_SYSCOUNT: u32 = 17;
pub const EVFILT_THREADMARKER: u32 = 17;
pub const KEVENT_FLAG_NONE: u32 = 0;
pub const KEVENT_FLAG_IMMEDIATE: u32 = 1;
pub const KEVENT_FLAG_ERROR_EVENTS: u32 = 2;
pub const EV_ADD: u32 = 1;
pub const EV_DELETE: u32 = 2;
pub const EV_ENABLE: u32 = 4;
pub const EV_DISABLE: u32 = 8;
pub const EV_ONESHOT: u32 = 16;
pub const EV_CLEAR: u32 = 32;
pub const EV_RECEIPT: u32 = 64;
pub const EV_DISPATCH: u32 = 128;
pub const EV_UDATA_SPECIFIC: u32 = 256;
pub const EV_DISPATCH2: u32 = 384;
pub const EV_VANISHED: u32 = 512;
pub const EV_SYSFLAGS: u32 = 61440;
pub const EV_FLAG0: u32 = 4096;
pub const EV_FLAG1: u32 = 8192;
pub const EV_EOF: u32 = 32768;
pub const EV_ERROR: u32 = 16384;
pub const EV_POLL: u32 = 4096;
pub const EV_OOBAND: u32 = 8192;
pub const NOTE_TRIGGER: u32 = 16777216;
pub const NOTE_FFNOP: u32 = 0;
pub const NOTE_FFAND: u32 = 1073741824;
pub const NOTE_FFOR: u32 = 2147483648;
pub const NOTE_FFCOPY: u32 = 3221225472;
pub const NOTE_FFCTRLMASK: u32 = 3221225472;
pub const NOTE_FFLAGSMASK: u32 = 16777215;
pub const NOTE_LOWAT: u32 = 1;
pub const NOTE_OOB: u32 = 2;
pub const NOTE_DELETE: u32 = 1;
pub const NOTE_WRITE: u32 = 2;
pub const NOTE_EXTEND: u32 = 4;
pub const NOTE_ATTRIB: u32 = 8;
pub const NOTE_LINK: u32 = 16;
pub const NOTE_RENAME: u32 = 32;
pub const NOTE_REVOKE: u32 = 64;
pub const NOTE_NONE: u32 = 128;
pub const NOTE_FUNLOCK: u32 = 256;
pub const NOTE_LEASE_DOWNGRADE: u32 = 512;
pub const NOTE_LEASE_RELEASE: u32 = 1024;
pub const NOTE_EXIT: u32 = 2147483648;
pub const NOTE_FORK: u32 = 1073741824;
pub const NOTE_EXEC: u32 = 536870912;
pub const NOTE_SIGNAL: u32 = 134217728;
pub const NOTE_EXITSTATUS: u32 = 67108864;
pub const NOTE_EXIT_DETAIL: u32 = 33554432;
pub const NOTE_PDATAMASK: u32 = 1048575;
pub const NOTE_PCTRLMASK: i32 = -1048576;
pub const NOTE_EXIT_DETAIL_MASK: u32 = 458752;
pub const NOTE_EXIT_DECRYPTFAIL: u32 = 65536;
pub const NOTE_EXIT_MEMORY: u32 = 131072;
pub const NOTE_EXIT_CSERROR: u32 = 262144;
pub const NOTE_VM_PRESSURE: u32 = 2147483648;
pub const NOTE_VM_PRESSURE_TERMINATE: u32 = 1073741824;
pub const NOTE_VM_PRESSURE_SUDDEN_TERMINATE: u32 = 536870912;
pub const NOTE_VM_ERROR: u32 = 268435456;
pub const NOTE_SECONDS: u32 = 1;
pub const NOTE_USECONDS: u32 = 2;
pub const NOTE_NSECONDS: u32 = 4;
pub const NOTE_ABSOLUTE: u32 = 8;
pub const NOTE_LEEWAY: u32 = 16;
pub const NOTE_CRITICAL: u32 = 32;
pub const NOTE_BACKGROUND: u32 = 64;
pub const NOTE_MACH_CONTINUOUS_TIME: u32 = 128;
pub const NOTE_MACHTIME: u32 = 256;
pub const NOTE_TRACK: u32 = 1;
pub const NOTE_TRACKERR: u32 = 2;
pub const NOTE_CHILD: u32 = 4;
pub const SIDL: u32 = 1;
pub const SRUN: u32 = 2;
pub const SSLEEP: u32 = 3;
pub const SSTOP: u32 = 4;
pub const SZOMB: u32 = 5;
pub const P_ADVLOCK: u32 = 1;
pub const P_CONTROLT: u32 = 2;
pub const P_LP64: u32 = 4;
pub const P_NOCLDSTOP: u32 = 8;
pub const P_PPWAIT: u32 = 16;
pub const P_PROFIL: u32 = 32;
pub const P_SELECT: u32 = 64;
pub const P_CONTINUED: u32 = 128;
pub const P_SUGID: u32 = 256;
pub const P_SYSTEM: u32 = 512;
pub const P_TIMEOUT: u32 = 1024;
pub const P_TRACED: u32 = 2048;
pub const P_DISABLE_ASLR: u32 = 4096;
pub const P_WEXIT: u32 = 8192;
pub const P_EXEC: u32 = 16384;
pub const P_OWEUPC: u32 = 32768;
pub const P_AFFINITY: u32 = 65536;
pub const P_TRANSLATED: u32 = 131072;
pub const P_CLASSIC: u32 = 131072;
pub const P_DELAYIDLESLEEP: u32 = 262144;
pub const P_CHECKOPENEVT: u32 = 524288;
pub const P_DEPENDENCY_CAPABLE: u32 = 1048576;
pub const P_REBOOT: u32 = 2097152;
pub const P_RESV6: u32 = 4194304;
pub const P_RESV7: u32 = 8388608;
pub const P_THCWD: u32 = 16777216;
pub const P_RESV9: u32 = 33554432;
pub const P_ADOPTPERSONA: u32 = 67108864;
pub const P_RESV11: u32 = 134217728;
pub const P_NOSHLIB: u32 = 268435456;
pub const P_FORCEQUOTA: u32 = 536870912;
pub const P_NOCLDWAIT: u32 = 1073741824;
pub const P_NOREMOTEHANG: u32 = 2147483648;
pub const P_INMEM: u32 = 0;
pub const P_NOSWAP: u32 = 0;
pub const P_PHYSIO: u32 = 0;
pub const P_FSTRACE: u32 = 0;
pub const P_SSTEP: u32 = 0;
pub const P_DIRTY_TRACK: u32 = 1;
pub const P_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const P_DIRTY_DEFER: u32 = 4;
pub const P_DIRTY: u32 = 8;
pub const P_DIRTY_SHUTDOWN: u32 = 16;
pub const P_DIRTY_TERMINATED: u32 = 32;
pub const P_DIRTY_BUSY: u32 = 64;
pub const P_DIRTY_MARKED: u32 = 128;
pub const P_DIRTY_AGING_IN_PROGRESS: u32 = 256;
pub const P_DIRTY_LAUNCH_IN_PROGRESS: u32 = 512;
pub const P_DIRTY_DEFER_ALWAYS: u32 = 1024;
pub const P_DIRTY_IS_DIRTY: u32 = 24;
pub const P_DIRTY_IDLE_EXIT_ENABLED: u32 = 3;
pub const PSEMNAMLEN: u32 = 31;
pub const PSEM_NONE: u32 = 1;
pub const PSEM_DEFINED: u32 = 2;
pub const PSEM_ALLOCATED: u32 = 4;
pub const PSEM_MAPPED: u32 = 8;
pub const PSEM_INUSE: u32 = 16;
pub const PSEM_REMOVED: u32 = 32;
pub const PSEM_INCREATE: u32 = 64;
pub const PSEM_INDELETE: u32 = 128;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_R: u32 = 256;
pub const IPC_W: u32 = 128;
pub const IPC_M: u32 = 4096;
pub const PROT_NONE: u32 = 0;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_COPY: u32 = 2;
pub const MAP_FIXED: u32 = 16;
pub const MAP_RENAME: u32 = 32;
pub const MAP_NORESERVE: u32 = 64;
pub const MAP_RESERVED0080: u32 = 128;
pub const MAP_NOEXTEND: u32 = 256;
pub const MAP_HASSEMAPHORE: u32 = 512;
pub const MAP_NOCACHE: u32 = 1024;
pub const MAP_JIT: u32 = 2048;
pub const MAP_FILE: u32 = 0;
pub const MAP_ANON: u32 = 4096;
pub const MAP_ANONYMOUS: u32 = 4096;
pub const MAP_RESILIENT_CODESIGN: u32 = 8192;
pub const MAP_RESILIENT_MEDIA: u32 = 16384;
pub const MAP_32BIT: u32 = 32768;
pub const MAP_TRANSLATED_ALLOW_EXECUTE: u32 = 131072;
pub const MAP_UNIX03: u32 = 262144;
pub const MCL_CURRENT: u32 = 1;
pub const MCL_FUTURE: u32 = 2;
pub const MS_ASYNC: u32 = 1;
pub const MS_INVALIDATE: u32 = 2;
pub const MS_SYNC: u32 = 16;
pub const MS_KILLPAGES: u32 = 4;
pub const MS_DEACTIVATE: u32 = 8;
pub const POSIX_MADV_NORMAL: u32 = 0;
pub const POSIX_MADV_RANDOM: u32 = 1;
pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
pub const POSIX_MADV_WILLNEED: u32 = 3;
pub const POSIX_MADV_DONTNEED: u32 = 4;
pub const MADV_NORMAL: u32 = 0;
pub const MADV_RANDOM: u32 = 1;
pub const MADV_SEQUENTIAL: u32 = 2;
pub const MADV_WILLNEED: u32 = 3;
pub const MADV_DONTNEED: u32 = 4;
pub const MADV_FREE: u32 = 5;
pub const MADV_ZERO_WIRED_PAGES: u32 = 6;
pub const MADV_FREE_REUSABLE: u32 = 7;
pub const MADV_FREE_REUSE: u32 = 8;
pub const MADV_CAN_REUSE: u32 = 9;
pub const MADV_PAGEOUT: u32 = 10;
pub const MINCORE_INCORE: u32 = 1;
pub const MINCORE_REFERENCED: u32 = 2;
pub const MINCORE_MODIFIED: u32 = 4;
pub const MINCORE_REFERENCED_OTHER: u32 = 8;
pub const MINCORE_MODIFIED_OTHER: u32 = 16;
pub const MINCORE_PAGED_OUT: u32 = 32;
pub const MINCORE_COPIED: u32 = 64;
pub const MINCORE_ANONYMOUS: u32 = 128;
pub const MSG_NOERROR: u32 = 4096;
pub const GETNCNT: u32 = 3;
pub const GETPID: u32 = 4;
pub const GETVAL: u32 = 5;
pub const GETALL: u32 = 6;
pub const GETZCNT: u32 = 7;
pub const SETVAL: u32 = 8;
pub const SETALL: u32 = 9;
pub const SEM_UNDO: u32 = 4096;
pub const SEM_A: u32 = 128;
pub const SEM_R: u32 = 256;
pub const SHM_RDONLY: u32 = 4096;
pub const SHM_RND: u32 = 8192;
pub const SHMLBA: u32 = 4096;
pub const SHM_R: u32 = 256;
pub const SHM_W: u32 = 128;
pub const PSHMNAMLEN: u32 = 31;
pub const ST_RDONLY: u32 = 1;
pub const ST_NOSUID: u32 = 2;
pub const GRAFTDMG_SECURE_BOOT_CRYPTEX_ARGS_VERSION: u32 = 1;
pub const MAX_GRAFT_ARGS_SIZE: u32 = 512;
pub const SBC_PRESERVE_MOUNT: u32 = 1;
pub const SBC_ALTERNATE_SHARED_REGION: u32 = 2;
pub const SBC_SYSTEM_CONTENT: u32 = 4;
pub const SBC_PANIC_ON_AUTHFAIL: u32 = 8;
pub const SBC_STRICT_AUTH: u32 = 16;
pub const SBC_PRESERVE_GRAFT: u32 = 32;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const SOL_LOCAL: u32 = 0;
pub const LOCAL_PEERCRED: u32 = 1;
pub const LOCAL_PEERPID: u32 = 2;
pub const LOCAL_PEEREPID: u32 = 3;
pub const LOCAL_PEERUUID: u32 = 4;
pub const LOCAL_PEEREUUID: u32 = 5;
pub const LOCAL_PEERTOKEN: u32 = 6;
pub const _SYS_NAMELEN: u32 = 256;
pub const XATTR_NOFOLLOW: u32 = 1;
pub const XATTR_CREATE: u32 = 2;
pub const XATTR_REPLACE: u32 = 4;
pub const XATTR_NOSECURITY: u32 = 8;
pub const XATTR_NODEFAULT: u32 = 16;
pub const XATTR_SHOWCOMPRESSION: u32 = 32;
pub const XATTR_MAXNAMELEN: u32 = 127;
pub const XATTR_FINDERINFO_NAME: &[u8; 21usize] = b"com.apple.FinderInfo\0";
pub const XATTR_RESOURCEFORK_NAME: &[u8; 23usize] = b"com.apple.ResourceFork\0";
pub const _PATH_LOG: &[u8; 16usize] = b"/var/run/syslog\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_NETINFO: u32 = 96;
pub const LOG_REMOTEAUTH: u32 = 104;
pub const LOG_INSTALL: u32 = 112;
pub const LOG_RAS: u32 = 120;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_LAUNCHD: u32 = 192;
pub const LOG_NFACILITIES: u32 = 25;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const TMAGIC: &[u8; 6usize] = b"ustar\0";
pub const TMAGLEN: u32 = 6;
pub const TVERSION: &[u8; 3usize] = b"00\0";
pub const TVERSLEN: u32 = 2;
pub const REGTYPE: u8 = 48u8;
pub const AREGTYPE: u8 = 0u8;
pub const LNKTYPE: u8 = 49u8;
pub const SYMTYPE: u8 = 50u8;
pub const CHRTYPE: u8 = 51u8;
pub const BLKTYPE: u8 = 52u8;
pub const DIRTYPE: u8 = 53u8;
pub const FIFOTYPE: u8 = 54u8;
pub const CONTTYPE: u8 = 55u8;
pub const TSUID: u32 = 2048;
pub const TSGID: u32 = 1024;
pub const TSVTX: u32 = 512;
pub const TUREAD: u32 = 256;
pub const TUWRITE: u32 = 128;
pub const TUEXEC: u32 = 64;
pub const TGREAD: u32 = 32;
pub const TGWRITE: u32 = 16;
pub const TGEXEC: u32 = 8;
pub const TOREAD: u32 = 4;
pub const TOWRITE: u32 = 2;
pub const TOEXEC: u32 = 1;
pub const UL_GETFSIZE: u32 = 1;
pub const UL_SETFSIZE: u32 = 2;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const _PATH_UTMPX: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const UTMPX_FILE: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const _UTX_USERSIZE: u32 = 256;
pub const _UTX_LINESIZE: u32 = 32;
pub const _UTX_IDSIZE: u32 = 4;
pub const _UTX_HOSTSIZE: u32 = 256;
pub const EMPTY: u32 = 0;
pub const RUN_LVL: u32 = 1;
pub const BOOT_TIME: u32 = 2;
pub const OLD_TIME: u32 = 3;
pub const NEW_TIME: u32 = 4;
pub const INIT_PROCESS: u32 = 5;
pub const LOGIN_PROCESS: u32 = 6;
pub const USER_PROCESS: u32 = 7;
pub const DEAD_PROCESS: u32 = 8;
pub const ACCOUNTING: u32 = 9;
pub const SIGNATURE: u32 = 10;
pub const SHUTDOWN_TIME: u32 = 11;
pub const UTMPX_AUTOFILL_MASK: u32 = 32768;
pub const UTMPX_DEAD_IF_CORRESPONDING_MASK: u32 = 16384;
pub const UTMPX_CHANGE_NOTIFICATION: &[u8; 23usize] = b"com.apple.system.utmpx\0";
pub const WRDE_APPEND: u32 = 1;
pub const WRDE_DOOFFS: u32 = 2;
pub const WRDE_NOCMD: u32 = 4;
pub const WRDE_REUSE: u32 = 8;
pub const WRDE_SHOWERR: u32 = 16;
pub const WRDE_UNDEF: u32 = 32;
pub const WRDE_BADCHAR: u32 = 1;
pub const WRDE_BADVAL: u32 = 2;
pub const WRDE_CMDSUB: u32 = 3;
pub const WRDE_NOSPACE: u32 = 4;
pub const WRDE_NOSYS: u32 = 5;
pub const WRDE_SYNTAX: u32 = 6;
pub const BPF_RELEASE: u32 = 199606;
pub const BPF_MAXINSNS: u32 = 512;
pub const BPF_MAXBUFSIZE: u32 = 524288;
pub const BPF_MINBUFSIZE: u32 = 32;
pub const BPF_MAJOR_VERSION: u32 = 1;
pub const BPF_MINOR_VERSION: u32 = 1;
pub const DLT_NULL: u32 = 0;
pub const DLT_EN10MB: u32 = 1;
pub const DLT_EN3MB: u32 = 2;
pub const DLT_AX25: u32 = 3;
pub const DLT_PRONET: u32 = 4;
pub const DLT_CHAOS: u32 = 5;
pub const DLT_IEEE802: u32 = 6;
pub const DLT_ARCNET: u32 = 7;
pub const DLT_SLIP: u32 = 8;
pub const DLT_PPP: u32 = 9;
pub const DLT_FDDI: u32 = 10;
pub const DLT_ATM_RFC1483: u32 = 11;
pub const DLT_RAW: u32 = 12;
pub const DLT_SLIP_BSDOS: u32 = 15;
pub const DLT_PPP_BSDOS: u32 = 16;
pub const DLT_PFSYNC: u32 = 18;
pub const DLT_ATM_CLIP: u32 = 19;
pub const DLT_PPP_SERIAL: u32 = 50;
pub const DLT_PPP_ETHER: u32 = 51;
pub const DLT_SYMANTEC_FIREWALL: u32 = 99;
pub const DLT_MATCHING_MIN: u32 = 104;
pub const DLT_C_HDLC: u32 = 104;
pub const DLT_CHDLC: u32 = 104;
pub const DLT_IEEE802_11: u32 = 105;
pub const DLT_FRELAY: u32 = 107;
pub const DLT_LOOP: u32 = 108;
pub const DLT_ENC: u32 = 109;
pub const DLT_LINUX_SLL: u32 = 113;
pub const DLT_LTALK: u32 = 114;
pub const DLT_ECONET: u32 = 115;
pub const DLT_IPFILTER: u32 = 116;
pub const DLT_PFLOG: u32 = 117;
pub const DLT_CISCO_IOS: u32 = 118;
pub const DLT_PRISM_HEADER: u32 = 119;
pub const DLT_AIRONET_HEADER: u32 = 120;
pub const DLT_HHDLC: u32 = 121;
pub const DLT_IP_OVER_FC: u32 = 122;
pub const DLT_SUNATM: u32 = 123;
pub const DLT_RIO: u32 = 124;
pub const DLT_PCI_EXP: u32 = 125;
pub const DLT_AURORA: u32 = 126;
pub const DLT_IEEE802_11_RADIO: u32 = 127;
pub const DLT_TZSP: u32 = 128;
pub const DLT_ARCNET_LINUX: u32 = 129;
pub const DLT_JUNIPER_MLPPP: u32 = 130;
pub const DLT_JUNIPER_MLFR: u32 = 131;
pub const DLT_JUNIPER_ES: u32 = 132;
pub const DLT_JUNIPER_GGSN: u32 = 133;
pub const DLT_JUNIPER_MFR: u32 = 134;
pub const DLT_JUNIPER_ATM2: u32 = 135;
pub const DLT_JUNIPER_SERVICES: u32 = 136;
pub const DLT_JUNIPER_ATM1: u32 = 137;
pub const DLT_APPLE_IP_OVER_IEEE1394: u32 = 138;
pub const DLT_MTP2_WITH_PHDR: u32 = 139;
pub const DLT_MTP2: u32 = 140;
pub const DLT_MTP3: u32 = 141;
pub const DLT_SCCP: u32 = 142;
pub const DLT_DOCSIS: u32 = 143;
pub const DLT_LINUX_IRDA: u32 = 144;
pub const DLT_IBM_SP: u32 = 145;
pub const DLT_IBM_SN: u32 = 146;
pub const DLT_USER0: u32 = 147;
pub const DLT_USER1: u32 = 148;
pub const DLT_USER2: u32 = 149;
pub const DLT_USER3: u32 = 150;
pub const DLT_USER4: u32 = 151;
pub const DLT_USER5: u32 = 152;
pub const DLT_USER6: u32 = 153;
pub const DLT_USER7: u32 = 154;
pub const DLT_USER8: u32 = 155;
pub const DLT_USER9: u32 = 156;
pub const DLT_USER10: u32 = 157;
pub const DLT_USER11: u32 = 158;
pub const DLT_USER12: u32 = 159;
pub const DLT_USER13: u32 = 160;
pub const DLT_USER14: u32 = 161;
pub const DLT_USER15: u32 = 162;
pub const DLT_IEEE802_11_RADIO_AVS: u32 = 163;
pub const DLT_JUNIPER_MONITOR: u32 = 164;
pub const DLT_BACNET_MS_TP: u32 = 165;
pub const DLT_PPP_PPPD: u32 = 166;
pub const DLT_PPP_WITH_DIRECTION: u32 = 166;
pub const DLT_LINUX_PPP_WITHDIRECTION: u32 = 166;
pub const DLT_JUNIPER_PPPOE: u32 = 167;
pub const DLT_JUNIPER_PPPOE_ATM: u32 = 168;
pub const DLT_GPRS_LLC: u32 = 169;
pub const DLT_GPF_T: u32 = 170;
pub const DLT_GPF_F: u32 = 171;
pub const DLT_GCOM_T1E1: u32 = 172;
pub const DLT_GCOM_SERIAL: u32 = 173;
pub const DLT_JUNIPER_PIC_PEER: u32 = 174;
pub const DLT_ERF_ETH: u32 = 175;
pub const DLT_ERF_POS: u32 = 176;
pub const DLT_LINUX_LAPD: u32 = 177;
pub const DLT_JUNIPER_ETHER: u32 = 178;
pub const DLT_JUNIPER_PPP: u32 = 179;
pub const DLT_JUNIPER_FRELAY: u32 = 180;
pub const DLT_JUNIPER_CHDLC: u32 = 181;
pub const DLT_MFR: u32 = 182;
pub const DLT_JUNIPER_VP: u32 = 183;
pub const DLT_A429: u32 = 184;
pub const DLT_A653_ICM: u32 = 185;
pub const DLT_USB: u32 = 186;
pub const DLT_BLUETOOTH_HCI_H4: u32 = 187;
pub const DLT_IEEE802_16_MAC_CPS: u32 = 188;
pub const DLT_USB_LINUX: u32 = 189;
pub const DLT_CAN20B: u32 = 190;
pub const DLT_IEEE802_15_4_LINUX: u32 = 191;
pub const DLT_PPI: u32 = 192;
pub const DLT_IEEE802_16_MAC_CPS_RADIO: u32 = 193;
pub const DLT_JUNIPER_ISM: u32 = 194;
pub const DLT_IEEE802_15_4: u32 = 195;
pub const DLT_SITA: u32 = 196;
pub const DLT_ERF: u32 = 197;
pub const DLT_RAIF1: u32 = 198;
pub const DLT_IPMB: u32 = 199;
pub const DLT_JUNIPER_ST: u32 = 200;
pub const DLT_BLUETOOTH_HCI_H4_WITH_PHDR: u32 = 201;
pub const DLT_AX25_KISS: u32 = 202;
pub const DLT_LAPD: u32 = 203;
pub const DLT_PPP_WITH_DIR: u32 = 204;
pub const DLT_C_HDLC_WITH_DIR: u32 = 205;
pub const DLT_FRELAY_WITH_DIR: u32 = 206;
pub const DLT_LAPB_WITH_DIR: u32 = 207;
pub const DLT_IPMB_LINUX: u32 = 209;
pub const DLT_FLEXRAY: u32 = 210;
pub const DLT_MOST: u32 = 211;
pub const DLT_LIN: u32 = 212;
pub const DLT_X2E_SERIAL: u32 = 213;
pub const DLT_X2E_XORAYA: u32 = 214;
pub const DLT_IEEE802_15_4_NONASK_PHY: u32 = 215;
pub const DLT_LINUX_EVDEV: u32 = 216;
pub const DLT_GSMTAP_UM: u32 = 217;
pub const DLT_GSMTAP_ABIS: u32 = 218;
pub const DLT_MPLS: u32 = 219;
pub const DLT_USB_LINUX_MMAPPED: u32 = 220;
pub const DLT_DECT: u32 = 221;
pub const DLT_AOS: u32 = 222;
pub const DLT_WIHART: u32 = 223;
pub const DLT_FC_2: u32 = 224;
pub const DLT_FC_2_WITH_FRAME_DELIMS: u32 = 225;
pub const DLT_IPNET: u32 = 226;
pub const DLT_CAN_SOCKETCAN: u32 = 227;
pub const DLT_IPV4: u32 = 228;
pub const DLT_IPV6: u32 = 229;
pub const DLT_IEEE802_15_4_NOFCS: u32 = 230;
pub const DLT_DBUS: u32 = 231;
pub const DLT_JUNIPER_VS: u32 = 232;
pub const DLT_JUNIPER_SRX_E2E: u32 = 233;
pub const DLT_JUNIPER_FIBRECHANNEL: u32 = 234;
pub const DLT_DVB_CI: u32 = 235;
pub const DLT_MUX27010: u32 = 236;
pub const DLT_STANAG_5066_D_PDU: u32 = 237;
pub const DLT_JUNIPER_ATM_CEMIC: u32 = 238;
pub const DLT_NFLOG: u32 = 239;
pub const DLT_NETANALYZER: u32 = 240;
pub const DLT_NETANALYZER_TRANSPARENT: u32 = 241;
pub const DLT_IPOIB: u32 = 242;
pub const DLT_MPEG_2_TS: u32 = 243;
pub const DLT_NG40: u32 = 244;
pub const DLT_NFC_LLCP: u32 = 245;
pub const DLT_USB_DARWIN: u32 = 266;
pub const DLT_MATCHING_MAX: u32 = 266;
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_A: u32 = 16;
pub const BPF_TAX: u32 = 0;
pub const BPF_TXA: u32 = 128;
pub const BPF_MEMWORDS: u32 = 16;
pub const ETHER_ADDR_LEN: u32 = 6;
pub const ETHER_TYPE_LEN: u32 = 2;
pub const ETHER_CRC_LEN: u32 = 4;
pub const ETHER_HDR_LEN: u32 = 14;
pub const ETHER_MIN_LEN: u32 = 64;
pub const ETHER_MAX_LEN: u32 = 1518;
pub const ETHER_ALIGN: u32 = 2;
pub const ETHERTYPE_PUP: u32 = 512;
pub const ETHERTYPE_IP: u32 = 2048;
pub const ETHERTYPE_ARP: u32 = 2054;
pub const ETHERTYPE_REVARP: u32 = 32821;
pub const ETHERTYPE_VLAN: u32 = 33024;
pub const ETHERTYPE_IPV6: u32 = 34525;
pub const ETHERTYPE_PAE: u32 = 34958;
pub const ETHERTYPE_RSN_PREAUTH: u32 = 35015;
pub const ETHERTYPE_PTP: u32 = 35063;
pub const ETHERTYPE_LOOPBACK: u32 = 36864;
pub const ETHERTYPE_TRAIL: u32 = 4096;
pub const ETHERTYPE_NTRAILER: u32 = 16;
pub const ETHERMTU: u32 = 1500;
pub const ETHERMIN: u32 = 46;
pub const ARPHRD_ETHER: u32 = 1;
pub const ARPHRD_IEEE802: u32 = 6;
pub const ARPHRD_FRELAY: u32 = 15;
pub const ARPHRD_IEEE1394: u32 = 24;
pub const ARPHRD_IEEE1394_EUI64: u32 = 27;
pub const ARPOP_REQUEST: u32 = 1;
pub const ARPOP_REPLY: u32 = 2;
pub const ARPOP_REVREQUEST: u32 = 3;
pub const ARPOP_REVREPLY: u32 = 4;
pub const ARPOP_INVREQUEST: u32 = 8;
pub const ARPOP_INVREPLY: u32 = 9;
pub const ATF_INUSE: u32 = 1;
pub const ATF_COM: u32 = 2;
pub const ATF_PERM: u32 = 4;
pub const ATF_PUBL: u32 = 8;
pub const ATF_USETRAILERS: u32 = 16;
pub const LLC_ISFRAMELEN: u32 = 4;
pub const LLC_UFRAMELEN: u32 = 3;
pub const LLC_FRMRLEN: u32 = 7;
pub const LLC_SNAPFRAMELEN: u32 = 8;
pub const LLC_UI: u32 = 3;
pub const LLC_UI_P: u32 = 19;
pub const LLC_DISC: u32 = 67;
pub const LLC_DISC_P: u32 = 83;
pub const LLC_UA: u32 = 99;
pub const LLC_UA_P: u32 = 115;
pub const LLC_TEST: u32 = 227;
pub const LLC_TEST_P: u32 = 243;
pub const LLC_FRMR: u32 = 135;
pub const LLC_FRMR_P: u32 = 151;
pub const LLC_DM: u32 = 15;
pub const LLC_DM_P: u32 = 31;
pub const LLC_XID: u32 = 175;
pub const LLC_XID_P: u32 = 191;
pub const LLC_SABME: u32 = 111;
pub const LLC_SABME_P: u32 = 127;
pub const LLC_RR: u32 = 1;
pub const LLC_RNR: u32 = 5;
pub const LLC_REJ: u32 = 9;
pub const LLC_INFO: u32 = 0;
pub const LLC_8021D_LSAP: u32 = 66;
pub const LLC_X25_LSAP: u32 = 126;
pub const LLC_SNAP_LSAP: u32 = 170;
pub const LLC_ISO_LSAP: u32 = 254;
pub const LLC_XID_FORMAT_BASIC: u32 = 129;
pub const LLC_XID_BASIC_MINLEN: u32 = 6;
pub const LLC_XID_CLASS_I: u32 = 1;
pub const LLC_XID_CLASS_II: u32 = 3;
pub const LLC_XID_CLASS_III: u32 = 5;
pub const LLC_XID_CLASS_IV: u32 = 7;
pub const IFM_ETHER: u32 = 32;
pub const IFM_10_T: u32 = 3;
pub const IFM_10_2: u32 = 4;
pub const IFM_10_5: u32 = 5;
pub const IFM_100_TX: u32 = 6;
pub const IFM_100_FX: u32 = 7;
pub const IFM_100_T4: u32 = 8;
pub const IFM_100_VG: u32 = 9;
pub const IFM_100_T2: u32 = 10;
pub const IFM_1000_SX: u32 = 11;
pub const IFM_10_STP: u32 = 12;
pub const IFM_10_FL: u32 = 13;
pub const IFM_1000_LX: u32 = 14;
pub const IFM_1000_CX: u32 = 15;
pub const IFM_1000_T: u32 = 16;
pub const IFM_HPNA_1: u32 = 17;
pub const IFM_10G_SR: u32 = 18;
pub const IFM_10G_LR: u32 = 19;
pub const IFM_10G_CX4: u32 = 20;
pub const IFM_10G_T: u32 = 21;
pub const IFM_2500_T: u32 = 22;
pub const IFM_5000_T: u32 = 23;
pub const IFM_1000_CX_SGMII: u32 = 24;
pub const IFM_1000_KX: u32 = 25;
pub const IFM_10G_KX4: u32 = 26;
pub const IFM_10G_KR: u32 = 27;
pub const IFM_10G_CR1: u32 = 28;
pub const IFM_10G_ER: u32 = 29;
pub const IFM_20G_KR2: u32 = 30;
pub const IFM_OTHER: u32 = 31;
pub const IFM_TOKEN: u32 = 64;
pub const IFM_TOK_STP4: u32 = 3;
pub const IFM_TOK_STP16: u32 = 4;
pub const IFM_TOK_UTP4: u32 = 5;
pub const IFM_TOK_UTP16: u32 = 6;
pub const IFM_TOK_STP100: u32 = 7;
pub const IFM_TOK_UTP100: u32 = 8;
pub const IFM_TOK_ETR: u32 = 512;
pub const IFM_TOK_SRCRT: u32 = 1024;
pub const IFM_TOK_ALLR: u32 = 2048;
pub const IFM_TOK_DTR: u32 = 8192;
pub const IFM_TOK_CLASSIC: u32 = 16384;
pub const IFM_TOK_AUTO: u32 = 32768;
pub const IFM_FDDI: u32 = 96;
pub const IFM_FDDI_SMF: u32 = 3;
pub const IFM_FDDI_MMF: u32 = 4;
pub const IFM_FDDI_UTP: u32 = 5;
pub const IFM_FDDI_DA: u32 = 256;
pub const IFM_IEEE80211: u32 = 128;
pub const IFM_IEEE80211_FH1: u32 = 3;
pub const IFM_IEEE80211_FH2: u32 = 4;
pub const IFM_IEEE80211_DS2: u32 = 5;
pub const IFM_IEEE80211_DS5: u32 = 6;
pub const IFM_IEEE80211_DS11: u32 = 7;
pub const IFM_IEEE80211_DS1: u32 = 8;
pub const IFM_IEEE80211_DS22: u32 = 9;
pub const IFM_IEEE80211_ADHOC: u32 = 256;
pub const IFM_AUTO: u32 = 0;
pub const IFM_MANUAL: u32 = 1;
pub const IFM_NONE: u32 = 2;
pub const IFM_FDX: u32 = 1048576;
pub const IFM_HDX: u32 = 2097152;
pub const IFM_FLOW: u32 = 4194304;
pub const IFM_EEE: u32 = 8388608;
pub const IFM_FLAG0: u32 = 16777216;
pub const IFM_FLAG1: u32 = 33554432;
pub const IFM_FLAG2: u32 = 67108864;
pub const IFM_LOOP: u32 = 134217728;
pub const IFM_TMASK_COMPAT: u32 = 31;
pub const IFM_TMASK_EXT: u32 = 983040;
pub const IFM_TMASK_EXT_SHIFT: u32 = 11;
pub const IFM_NMASK: u32 = 224;
pub const IFM_TMASK: u32 = 983071;
pub const IFM_IMASK: u32 = 4026531840;
pub const IFM_ISHIFT: u32 = 28;
pub const IFM_OMASK: u32 = 65280;
pub const IFM_GMASK: u32 = 267386880;
pub const IFM_AVALID: u32 = 1;
pub const IFM_ACTIVE: u32 = 2;
pub const IFM_WAKESAMENET: u32 = 4;
pub const _NET_IF_MIB_H: u32 = 1;
pub const IFMIB_SYSTEM: u32 = 1;
pub const IFMIB_IFDATA: u32 = 2;
pub const IFMIB_IFALLDATA: u32 = 3;
pub const IFDATA_GENERAL: u32 = 1;
pub const IFDATA_LINKSPECIFIC: u32 = 2;
pub const IFDATA_ADDRS: u32 = 3;
pub const IFDATA_MULTIADDRS: u32 = 4;
pub const IFMIB_IFCOUNT: u32 = 1;
pub const NETLINK_GENERIC: u32 = 0;
pub const DOT3COMPLIANCE_STATS: u32 = 1;
pub const DOT3COMPLIANCE_COLLS: u32 = 2;
pub const UTUN_CONTROL_NAME: &[u8; 27usize] = b"com.apple.net.utun_control\0";
pub const UTUN_OPT_FLAGS: u32 = 1;
pub const UTUN_OPT_IFNAME: u32 = 2;
pub const UTUN_OPT_EXT_IFDATA_STATS: u32 = 3;
pub const UTUN_OPT_INC_IFDATA_STATS_IN: u32 = 4;
pub const UTUN_OPT_INC_IFDATA_STATS_OUT: u32 = 5;
pub const UTUN_OPT_SET_DELEGATE_INTERFACE: u32 = 15;
pub const UTUN_OPT_MAX_PENDING_PACKETS: u32 = 16;
pub const UTUN_OPT_ENABLE_CHANNEL: u32 = 17;
pub const UTUN_OPT_GET_CHANNEL_UUID: u32 = 18;
pub const UTUN_OPT_ENABLE_FLOWSWITCH: u32 = 19;
pub const UTUN_OPT_ENABLE_NETIF: u32 = 20;
pub const UTUN_OPT_SLOT_SIZE: u32 = 21;
pub const UTUN_OPT_NETIF_RING_SIZE: u32 = 22;
pub const UTUN_OPT_TX_FSW_RING_SIZE: u32 = 23;
pub const UTUN_OPT_RX_FSW_RING_SIZE: u32 = 24;
pub const UTUN_OPT_KPIPE_TX_RING_SIZE: u32 = 25;
pub const UTUN_OPT_KPIPE_RX_RING_SIZE: u32 = 26;
pub const UTUN_OPT_ATTACH_FLOWSWITCH: u32 = 27;
pub const UTUN_FLAGS_NO_OUTPUT: u32 = 1;
pub const UTUN_FLAGS_NO_INPUT: u32 = 2;
pub const UTUN_FLAGS_ENABLE_PROC_UUID: u32 = 4;
pub const IF_CELLULAR_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_CELLULAR_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_CELL_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_CELL_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_CELL_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_CELL_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_CELL_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_CELL_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_CELL_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_CELL_UL_BYTES_LOST_VALID: u32 = 128;
pub const IF_CELL_UL_MIN_QUEUE_SIZE_VALID: u32 = 256;
pub const IF_CELL_UL_AVG_QUEUE_SIZE_VALID: u32 = 512;
pub const IF_CELL_UL_MAX_QUEUE_SIZE_VALID: u32 = 1024;
pub const IF_CELL_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2048;
pub const IF_CELL_DL_MAX_BANDWIDTH_VALID: u32 = 4096;
pub const IF_CELL_CONFIG_INACTIVITY_TIME_VALID: u32 = 8192;
pub const IF_CELL_CONFIG_BACKOFF_TIME_VALID: u32 = 16384;
pub const IF_CELL_UL_MSS_RECOMMENDED_VALID: u32 = 32768;
pub const IF_CELL_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_CELL_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_CELL_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_CELL_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_CELL_UL_MSS_RECOMMENDED_NONE: u32 = 0;
pub const IF_CELL_UL_MSS_RECOMMENDED_MEDIUM: u32 = 1;
pub const IF_CELL_UL_MSS_RECOMMENDED_LOW: u32 = 2;
pub const IF_WIFI_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_WIFI_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_WIFI_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_WIFI_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_WIFI_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_WIFI_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_WIFI_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_WIFI_UL_ERROR_RATE_VALID: u32 = 128;
pub const IF_WIFI_UL_BYTES_LOST_VALID: u32 = 256;
pub const IF_WIFI_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 512;
pub const IF_WIFI_DL_MAX_BANDWIDTH_VALID: u32 = 1024;
pub const IF_WIFI_DL_MIN_LATENCY_VALID: u32 = 2048;
pub const IF_WIFI_DL_EFFECTIVE_LATENCY_VALID: u32 = 4096;
pub const IF_WIFI_DL_MAX_LATENCY_VALID: u32 = 8192;
pub const IF_WIFI_DL_ERROR_RATE_VALID: u32 = 16384;
pub const IF_WIFI_CONFIG_FREQUENCY_VALID: u32 = 32768;
pub const IF_WIFI_CONFIG_MULTICAST_RATE_VALID: u32 = 65536;
pub const IF_WIFI_CONFIG_SCAN_COUNT_VALID: u32 = 131072;
pub const IF_WIFI_CONFIG_SCAN_DURATION_VALID: u32 = 262144;
pub const IF_WIFI_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_WIFI_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_WIFI_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_WIFI_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_WIFI_CONFIG_FREQUENCY_2_4_GHZ: u32 = 1;
pub const IF_WIFI_CONFIG_FREQUENCY_5_0_GHZ: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_BT: u32 = 1;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_AWDL: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_TX_QUEUE_COUNT: u32 = 6;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_NO: u32 = 0;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_YES: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_TYPE_INET: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_INBOUND: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_OUTBOUND: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_IPVER: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_PROTO: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LADDR: u32 = 4;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RADDR: u32 = 8;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LPORT: u32 = 16;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RPORT: u32 = 32;
pub const IFNET_TRAFFIC_RULE_ACTION_STEER: u32 = 1;
pub const NFF_BEFORE: u32 = 1;
pub const NFF_AFTER: u32 = 2;
pub const NKE_OK: u32 = 0;
pub const NKE_REMOVE: i32 = -1;
pub const NDRV_DEMUXTYPE_ETHERTYPE: u32 = 4;
pub const NDRV_DEMUXTYPE_SAP: u32 = 5;
pub const NDRV_DEMUXTYPE_SNAP: u32 = 6;
pub const NDRVPROTO_NDRV: u32 = 0;
pub const NDRV_PROTOCOL_DESC_VERS: u32 = 1;
pub const SOL_NDRVPROTO: u32 = 0;
pub const NDRV_DELDMXSPEC: u32 = 2;
pub const NDRV_SETDMXSPEC: u32 = 4;
pub const NDRV_ADDMULTICAST: u32 = 5;
pub const NDRV_DELMULTICAST: u32 = 6;
pub const NDRV_DMUX_MAX_DESCR: u32 = 1024;
pub const NRDV_MULTICAST_ADDRS_PER_SOCK: u32 = 1;
pub const __PFKEY_V2_H: u32 = 1;
pub const PF_KEY_V2: u32 = 2;
pub const PFKEYV2_REVISION: u32 = 199806;
pub const SADB_RESERVED: u32 = 0;
pub const SADB_GETSPI: u32 = 1;
pub const SADB_UPDATE: u32 = 2;
pub const SADB_ADD: u32 = 3;
pub const SADB_DELETE: u32 = 4;
pub const SADB_GET: u32 = 5;
pub const SADB_ACQUIRE: u32 = 6;
pub const SADB_REGISTER: u32 = 7;
pub const SADB_EXPIRE: u32 = 8;
pub const SADB_FLUSH: u32 = 9;
pub const SADB_DUMP: u32 = 10;
pub const SADB_X_PROMISC: u32 = 11;
pub const SADB_X_PCHANGE: u32 = 12;
pub const SADB_X_SPDUPDATE: u32 = 13;
pub const SADB_X_SPDADD: u32 = 14;
pub const SADB_X_SPDDELETE: u32 = 15;
pub const SADB_X_SPDGET: u32 = 16;
pub const SADB_X_SPDACQUIRE: u32 = 17;
pub const SADB_X_SPDDUMP: u32 = 18;
pub const SADB_X_SPDFLUSH: u32 = 19;
pub const SADB_X_SPDSETIDX: u32 = 20;
pub const SADB_X_SPDEXPIRE: u32 = 21;
pub const SADB_X_SPDDELETE2: u32 = 22;
pub const SADB_GETSASTAT: u32 = 23;
pub const SADB_X_SPDENABLE: u32 = 24;
pub const SADB_X_SPDDISABLE: u32 = 25;
pub const SADB_MIGRATE: u32 = 26;
pub const SADB_MAX: u32 = 26;
pub const SADB_EXT_RESERVED: u32 = 0;
pub const SADB_EXT_SA: u32 = 1;
pub const SADB_EXT_LIFETIME_CURRENT: u32 = 2;
pub const SADB_EXT_LIFETIME_HARD: u32 = 3;
pub const SADB_EXT_LIFETIME_SOFT: u32 = 4;
pub const SADB_EXT_ADDRESS_SRC: u32 = 5;
pub const SADB_EXT_ADDRESS_DST: u32 = 6;
pub const SADB_EXT_ADDRESS_PROXY: u32 = 7;
pub const SADB_EXT_KEY_AUTH: u32 = 8;
pub const SADB_EXT_KEY_ENCRYPT: u32 = 9;
pub const SADB_EXT_IDENTITY_SRC: u32 = 10;
pub const SADB_EXT_IDENTITY_DST: u32 = 11;
pub const SADB_EXT_SENSITIVITY: u32 = 12;
pub const SADB_EXT_PROPOSAL: u32 = 13;
pub const SADB_EXT_SUPPORTED_AUTH: u32 = 14;
pub const SADB_EXT_SUPPORTED_ENCRYPT: u32 = 15;
pub const SADB_EXT_SPIRANGE: u32 = 16;
pub const SADB_X_EXT_KMPRIVATE: u32 = 17;
pub const SADB_X_EXT_POLICY: u32 = 18;
pub const SADB_X_EXT_SA2: u32 = 19;
pub const SADB_EXT_SESSION_ID: u32 = 20;
pub const SADB_EXT_SASTAT: u32 = 21;
pub const SADB_X_EXT_IPSECIF: u32 = 22;
pub const SADB_X_EXT_ADDR_RANGE_SRC_START: u32 = 23;
pub const SADB_X_EXT_ADDR_RANGE_SRC_END: u32 = 24;
pub const SADB_X_EXT_ADDR_RANGE_DST_START: u32 = 25;
pub const SADB_X_EXT_ADDR_RANGE_DST_END: u32 = 26;
pub const SADB_EXT_MIGRATE_ADDRESS_SRC: u32 = 27;
pub const SADB_EXT_MIGRATE_ADDRESS_DST: u32 = 28;
pub const SADB_X_EXT_MIGRATE_IPSECIF: u32 = 29;
pub const SADB_EXT_MAX: u32 = 29;
pub const SADB_SATYPE_UNSPEC: u32 = 0;
pub const SADB_SATYPE_AH: u32 = 2;
pub const SADB_SATYPE_ESP: u32 = 3;
pub const SADB_SATYPE_RSVP: u32 = 5;
pub const SADB_SATYPE_OSPFV2: u32 = 6;
pub const SADB_SATYPE_RIPV2: u32 = 7;
pub const SADB_SATYPE_MIP: u32 = 8;
pub const SADB_X_SATYPE_IPCOMP: u32 = 9;
pub const SADB_X_SATYPE_POLICY: u32 = 10;
pub const SADB_SATYPE_MAX: u32 = 11;
pub const SADB_SASTATE_LARVAL: u32 = 0;
pub const SADB_SASTATE_MATURE: u32 = 1;
pub const SADB_SASTATE_DYING: u32 = 2;
pub const SADB_SASTATE_DEAD: u32 = 3;
pub const SADB_SASTATE_MAX: u32 = 3;
pub const SADB_SAFLAGS_PFS: u32 = 1;
pub const SADB_AALG_NONE: u32 = 0;
pub const SADB_AALG_MD5HMAC: u32 = 1;
pub const SADB_AALG_SHA1HMAC: u32 = 2;
pub const SADB_AALG_MAX: u32 = 8;
pub const SADB_X_AALG_SHA2_256: u32 = 6;
pub const SADB_X_AALG_SHA2_384: u32 = 7;
pub const SADB_X_AALG_SHA2_512: u32 = 8;
pub const SADB_X_AALG_MD5: u32 = 3;
pub const SADB_X_AALG_SHA: u32 = 4;
pub const SADB_X_AALG_NULL: u32 = 5;
pub const SADB_EALG_NONE: u32 = 0;
pub const SADB_EALG_DESCBC: u32 = 1;
pub const SADB_EALG_3DESCBC: u32 = 2;
pub const SADB_EALG_NULL: u32 = 3;
pub const SADB_EALG_MAX: u32 = 12;
pub const SADB_X_EALG_CAST128CBC: u32 = 5;
pub const SADB_X_EALG_BLOWFISHCBC: u32 = 4;
pub const SADB_X_EALG_RIJNDAELCBC: u32 = 12;
pub const SADB_X_EALG_AESCBC: u32 = 12;
pub const SADB_X_EALG_AES: u32 = 12;
pub const SADB_X_EALG_AES_GCM: u32 = 13;
pub const SADB_X_EALG_CHACHA20POLY1305: u32 = 14;
pub const SADB_X_CALG_NONE: u32 = 0;
pub const SADB_X_CALG_OUI: u32 = 1;
pub const SADB_X_CALG_DEFLATE: u32 = 2;
pub const SADB_X_CALG_LZS: u32 = 3;
pub const SADB_X_CALG_MAX: u32 = 4;
pub const SADB_IDENTTYPE_RESERVED: u32 = 0;
pub const SADB_IDENTTYPE_PREFIX: u32 = 1;
pub const SADB_IDENTTYPE_FQDN: u32 = 2;
pub const SADB_IDENTTYPE_USERFQDN: u32 = 3;
pub const SADB_X_IDENTTYPE_ADDR: u32 = 4;
pub const SADB_IDENTTYPE_MAX: u32 = 4;
pub const SADB_X_EXT_NONE: u32 = 0;
pub const SADB_X_EXT_OLD: u32 = 1;
pub const SADB_X_EXT_IV4B: u32 = 16;
pub const SADB_X_EXT_DERIV: u32 = 32;
pub const SADB_X_EXT_CYCSEQ: u32 = 64;
pub const SADB_X_EXT_PSEQ: u32 = 0;
pub const SADB_X_EXT_PRAND: u32 = 256;
pub const SADB_X_EXT_PZERO: u32 = 512;
pub const SADB_X_EXT_PMASK: u32 = 768;
pub const SADB_X_EXT_IIV: u32 = 1024;
pub const SADB_X_EXT_RAWCPI: u32 = 128;
pub const SADB_KEY_FLAGS_MAX: u32 = 32767;
pub const SADB_X_LIFETIME_ALLOCATIONS: u32 = 0;
pub const SADB_X_LIFETIME_BYTES: u32 = 1;
pub const SADB_X_LIFETIME_ADDTIME: u32 = 2;
pub const SADB_X_LIFETIME_USETIME: u32 = 3;
pub const PFKEY_SOFT_LIFETIME_RATE: u32 = 80;
pub const RTM_RTTUNIT: u32 = 1000000;
pub const RTF_UP: u32 = 1;
pub const RTF_GATEWAY: u32 = 2;
pub const RTF_HOST: u32 = 4;
pub const RTF_REJECT: u32 = 8;
pub const RTF_DYNAMIC: u32 = 16;
pub const RTF_MODIFIED: u32 = 32;
pub const RTF_DONE: u32 = 64;
pub const RTF_DELCLONE: u32 = 128;
pub const RTF_CLONING: u32 = 256;
pub const RTF_XRESOLVE: u32 = 512;
pub const RTF_LLINFO: u32 = 1024;
pub const RTF_LLDATA: u32 = 1024;
pub const RTF_STATIC: u32 = 2048;
pub const RTF_BLACKHOLE: u32 = 4096;
pub const RTF_NOIFREF: u32 = 8192;
pub const RTF_PROTO2: u32 = 16384;
pub const RTF_PROTO1: u32 = 32768;
pub const RTF_PRCLONING: u32 = 65536;
pub const RTF_WASCLONED: u32 = 131072;
pub const RTF_PROTO3: u32 = 262144;
pub const RTF_PINNED: u32 = 1048576;
pub const RTF_LOCAL: u32 = 2097152;
pub const RTF_BROADCAST: u32 = 4194304;
pub const RTF_MULTICAST: u32 = 8388608;
pub const RTF_IFSCOPE: u32 = 16777216;
pub const RTF_CONDEMNED: u32 = 33554432;
pub const RTF_IFREF: u32 = 67108864;
pub const RTF_PROXY: u32 = 134217728;
pub const RTF_ROUTER: u32 = 268435456;
pub const RTF_DEAD: u32 = 536870912;
pub const RTF_GLOBAL: u32 = 1073741824;
pub const RTPRF_OURS: u32 = 262144;
pub const RTF_BITS : & [u8 ; 223usize] = b"\x10\x01UP\x02GATEWAY\x03HOST\x04REJECT\x05DYNAMIC\x06MODIFIED\x07DONE\x08DELCLONE\tCLONING\nXRESOLVE\x0BLLINFO\x0CSTATIC\rBLACKHOLE\x0ENOIFREF\x0FPROTO2\x10PROTO1\x11PRCLONING\x12WASCLONED\x13PROTO3\x15PINNED\x16LOCAL\x17BROADCAST\x18MULTICAST\x19IFSCOPE\x1ACONDEMNED\x1BIFREF\x1CPROXY\x1DROUTER\x1FGLOBAL\0" ;
pub const RTM_VERSION: u32 = 5;
pub const RTM_ADD: u32 = 1;
pub const RTM_DELETE: u32 = 2;
pub const RTM_CHANGE: u32 = 3;
pub const RTM_GET: u32 = 4;
pub const RTM_LOSING: u32 = 5;
pub const RTM_REDIRECT: u32 = 6;
pub const RTM_MISS: u32 = 7;
pub const RTM_LOCK: u32 = 8;
pub const RTM_OLDADD: u32 = 9;
pub const RTM_OLDDEL: u32 = 10;
pub const RTM_RESOLVE: u32 = 11;
pub const RTM_NEWADDR: u32 = 12;
pub const RTM_DELADDR: u32 = 13;
pub const RTM_IFINFO: u32 = 14;
pub const RTM_NEWMADDR: u32 = 15;
pub const RTM_DELMADDR: u32 = 16;
pub const RTM_IFINFO2: u32 = 18;
pub const RTM_NEWMADDR2: u32 = 19;
pub const RTM_GET2: u32 = 20;
pub const RTV_MTU: u32 = 1;
pub const RTV_HOPCOUNT: u32 = 2;
pub const RTV_EXPIRE: u32 = 4;
pub const RTV_RPIPE: u32 = 8;
pub const RTV_SPIPE: u32 = 16;
pub const RTV_SSTHRESH: u32 = 32;
pub const RTV_RTT: u32 = 64;
pub const RTV_RTTVAR: u32 = 128;
pub const RTA_DST: u32 = 1;
pub const RTA_GATEWAY: u32 = 2;
pub const RTA_NETMASK: u32 = 4;
pub const RTA_GENMASK: u32 = 8;
pub const RTA_IFP: u32 = 16;
pub const RTA_IFA: u32 = 32;
pub const RTA_AUTHOR: u32 = 64;
pub const RTA_BRD: u32 = 128;
pub const RTAX_DST: u32 = 0;
pub const RTAX_GATEWAY: u32 = 1;
pub const RTAX_NETMASK: u32 = 2;
pub const RTAX_GENMASK: u32 = 3;
pub const RTAX_IFP: u32 = 4;
pub const RTAX_IFA: u32 = 5;
pub const RTAX_AUTHOR: u32 = 6;
pub const RTAX_BRD: u32 = 7;
pub const RTAX_MAX: u32 = 8;
pub const IPVERSION: u32 = 4;
pub const IP_RF: u32 = 32768;
pub const IP_DF: u32 = 16384;
pub const IP_MF: u32 = 8192;
pub const IP_OFFMASK: u32 = 8191;
pub const IP_MAXPACKET: u32 = 65535;
pub const IPTOS_LOWDELAY: u32 = 16;
pub const IPTOS_THROUGHPUT: u32 = 8;
pub const IPTOS_RELIABILITY: u32 = 4;
pub const IPTOS_MINCOST: u32 = 2;
pub const IPTOS_CE: u32 = 1;
pub const IPTOS_ECT: u32 = 2;
pub const IPTOS_DSCP_SHIFT: u32 = 2;
pub const IPTOS_ECN_NOTECT: u32 = 0;
pub const IPTOS_ECN_ECT1: u32 = 1;
pub const IPTOS_ECN_ECT0: u32 = 2;
pub const IPTOS_ECN_CE: u32 = 3;
pub const IPTOS_ECN_MASK: u32 = 3;
pub const IPTOS_PREC_NETCONTROL: u32 = 224;
pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
pub const IPTOS_PREC_FLASH: u32 = 96;
pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
pub const IPTOS_PREC_PRIORITY: u32 = 32;
pub const IPTOS_PREC_ROUTINE: u32 = 0;
pub const IPOPT_CONTROL: u32 = 0;
pub const IPOPT_RESERVED1: u32 = 32;
pub const IPOPT_DEBMEAS: u32 = 64;
pub const IPOPT_RESERVED2: u32 = 96;
pub const IPOPT_EOL: u32 = 0;
pub const IPOPT_NOP: u32 = 1;
pub const IPOPT_RR: u32 = 7;
pub const IPOPT_TS: u32 = 68;
pub const IPOPT_SECURITY: u32 = 130;
pub const IPOPT_LSRR: u32 = 131;
pub const IPOPT_SATID: u32 = 136;
pub const IPOPT_SSRR: u32 = 137;
pub const IPOPT_RA: u32 = 148;
pub const IPOPT_OPTVAL: u32 = 0;
pub const IPOPT_OLEN: u32 = 1;
pub const IPOPT_OFFSET: u32 = 2;
pub const IPOPT_MINOFF: u32 = 4;
pub const IPOPT_TS_TSONLY: u32 = 0;
pub const IPOPT_TS_TSANDADDR: u32 = 1;
pub const IPOPT_TS_PRESPEC: u32 = 3;
pub const IPOPT_SECUR_UNCLASS: u32 = 0;
pub const IPOPT_SECUR_CONFID: u32 = 61749;
pub const IPOPT_SECUR_EFTO: u32 = 30874;
pub const IPOPT_SECUR_MMMM: u32 = 48205;
pub const IPOPT_SECUR_RESTR: u32 = 44819;
pub const IPOPT_SECUR_SECRET: u32 = 55176;
pub const IPOPT_SECUR_TOPSECRET: u32 = 27589;
pub const MAXTTL: u32 = 255;
pub const IPDEFTTL: u32 = 64;
pub const IPFRAGTTL: u32 = 30;
pub const IPTTLDEC: u32 = 1;
pub const IP_MSS: u32 = 576;
pub const UDP_NOCKSUM: u32 = 1;
pub const BOOTREQUEST: u32 = 1;
pub const BOOTREPLY: u32 = 2;
pub const IPPORT_BOOTPS: u32 = 67;
pub const IPPORT_BOOTPC: u32 = 68;
pub const VM_STANFORD: &[u8; 5usize] = b"STAN\0";
pub const VF_PCBOOT: u32 = 1;
pub const VF_HELP: u32 = 2;
pub const NVMAXTEXT: u32 = 55;
pub const VM_NEXT: &[u8; 5usize] = b"NeXT\0";
pub const BPOP_OK: u32 = 0;
pub const BPOP_QUERY: u32 = 1;
pub const BPOP_QUERY_NE: u32 = 2;
pub const BPOP_ERROR: u32 = 3;
pub const BOOTP_MIN_BACKOFF: u32 = 2047;
pub const BOOTP_MAX_BACKOFF: u32 = 65535;
pub const BOOTP_RETRY: u32 = 6;
pub const ICMPV6_PLD_MAXLEN: u32 = 1232;
pub const ICMP6_DST_UNREACH: u32 = 1;
pub const ICMP6_PACKET_TOO_BIG: u32 = 2;
pub const ICMP6_TIME_EXCEEDED: u32 = 3;
pub const ICMP6_PARAM_PROB: u32 = 4;
pub const ICMP6_ECHO_REQUEST: u32 = 128;
pub const ICMP6_ECHO_REPLY: u32 = 129;
pub const MLD_LISTENER_QUERY: u32 = 130;
pub const MLD_LISTENER_REPORT: u32 = 131;
pub const MLD_LISTENER_DONE: u32 = 132;
pub const MLD_LISTENER_REDUCTION: u32 = 132;
pub const ICMP6_MEMBERSHIP_QUERY: u32 = 130;
pub const ICMP6_MEMBERSHIP_REPORT: u32 = 131;
pub const ICMP6_MEMBERSHIP_REDUCTION: u32 = 132;
pub const MLD6_LISTENER_QUERY: u32 = 130;
pub const MLD6_LISTENER_REPORT: u32 = 131;
pub const MLD6_LISTENER_DONE: u32 = 132;
pub const ND_ROUTER_SOLICIT: u32 = 133;
pub const ND_ROUTER_ADVERT: u32 = 134;
pub const ND_NEIGHBOR_SOLICIT: u32 = 135;
pub const ND_NEIGHBOR_ADVERT: u32 = 136;
pub const ND_REDIRECT: u32 = 137;
pub const ICMP6_ROUTER_RENUMBERING: u32 = 138;
pub const ICMP6_WRUREQUEST: u32 = 139;
pub const ICMP6_WRUREPLY: u32 = 140;
pub const ICMP6_FQDN_QUERY: u32 = 139;
pub const ICMP6_FQDN_REPLY: u32 = 140;
pub const ICMP6_NI_QUERY: u32 = 139;
pub const ICMP6_NI_REPLY: u32 = 140;
pub const MLDV2_LISTENER_REPORT: u32 = 143;
pub const MLD_MTRACE_RESP: u32 = 200;
pub const MLD_MTRACE: u32 = 201;
pub const MLD6_MTRACE_RESP: u32 = 200;
pub const MLD6_MTRACE: u32 = 201;
pub const ICMP6_MAXTYPE: u32 = 201;
pub const ICMP6_DST_UNREACH_NOROUTE: u32 = 0;
pub const ICMP6_DST_UNREACH_ADMIN: u32 = 1;
pub const ICMP6_DST_UNREACH_NOTNEIGHBOR: u32 = 2;
pub const ICMP6_DST_UNREACH_BEYONDSCOPE: u32 = 2;
pub const ICMP6_DST_UNREACH_ADDR: u32 = 3;
pub const ICMP6_DST_UNREACH_NOPORT: u32 = 4;
pub const ICMP6_TIME_EXCEED_TRANSIT: u32 = 0;
pub const ICMP6_TIME_EXCEED_REASSEMBLY: u32 = 1;
pub const ICMP6_PARAMPROB_HEADER: u32 = 0;
pub const ICMP6_PARAMPROB_NEXTHEADER: u32 = 1;
pub const ICMP6_PARAMPROB_OPTION: u32 = 2;
pub const ICMP6_PARAMPROB_FIRSTFRAG_INCOMP_HDR: u32 = 3;
pub const ICMP6_INFOMSG_MASK: u32 = 128;
pub const ICMP6_NI_SUBJ_IPV6: u32 = 0;
pub const ICMP6_NI_SUBJ_FQDN: u32 = 1;
pub const ICMP6_NI_SUBJ_IPV4: u32 = 2;
pub const ICMP6_NI_SUCCESS: u32 = 0;
pub const ICMP6_NI_REFUSED: u32 = 1;
pub const ICMP6_NI_UNKNOWN: u32 = 2;
pub const ICMP6_ROUTER_RENUMBERING_COMMAND: u32 = 0;
pub const ICMP6_ROUTER_RENUMBERING_RESULT: u32 = 1;
pub const ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET: u32 = 255;
pub const ND_REDIRECT_ONLINK: u32 = 0;
pub const ND_REDIRECT_ROUTER: u32 = 1;
pub const ND_RA_FLAG_MANAGED: u32 = 128;
pub const ND_RA_FLAG_OTHER: u32 = 64;
pub const ND_RA_FLAG_HA: u32 = 32;
pub const ND_RA_FLAG_RTPREF_MASK: u32 = 24;
pub const ND_RA_FLAG_RTPREF_HIGH: u32 = 8;
pub const ND_RA_FLAG_RTPREF_MEDIUM: u32 = 0;
pub const ND_RA_FLAG_RTPREF_LOW: u32 = 24;
pub const ND_RA_FLAG_RTPREF_RSV: u32 = 16;
pub const ND_NA_FLAG_ROUTER: u32 = 128;
pub const ND_NA_FLAG_SOLICITED: u32 = 64;
pub const ND_NA_FLAG_OVERRIDE: u32 = 32;
pub const ND_OPT_SOURCE_LINKADDR: u32 = 1;
pub const ND_OPT_TARGET_LINKADDR: u32 = 2;
pub const ND_OPT_PREFIX_INFORMATION: u32 = 3;
pub const ND_OPT_REDIRECTED_HEADER: u32 = 4;
pub const ND_OPT_MTU: u32 = 5;
pub const ND_OPT_NONCE: u32 = 14;
pub const ND_OPT_ROUTE_INFO: u32 = 24;
pub const ND_OPT_RDNSS: u32 = 25;
pub const ND_OPT_DNSSL: u32 = 31;
pub const ND_OPT_CAPTIVE_PORTAL: u32 = 37;
pub const ND_OPT_PREF64: u32 = 38;
pub const ND_OPT_PI_FLAG_ONLINK: u32 = 128;
pub const ND_OPT_PI_FLAG_AUTO: u32 = 64;
pub const ND_OPT_NONCE_LEN: u32 = 6;
pub const ND_OPT_PREF64_SCALED_LIFETIME_MASK: u32 = 65528;
pub const ND_OPT_PREF64_PLC_MASK: u32 = 7;
pub const ND_OPT_PREF64_LIFETIME_MAX: u32 = 65528;
pub const ND_OPT_PREF64_PLC_32: u32 = 5;
pub const ND_OPT_PREF64_PLC_40: u32 = 4;
pub const ND_OPT_PREF64_PLC_48: u32 = 3;
pub const ND_OPT_PREF64_PLC_56: u32 = 2;
pub const ND_OPT_PREF64_PLC_64: u32 = 1;
pub const ND_OPT_PREF64_PLC_96: u32 = 0;
pub const NI_QTYPE_NOOP: u32 = 0;
pub const NI_QTYPE_SUPTYPES: u32 = 1;
pub const NI_QTYPE_FQDN: u32 = 2;
pub const NI_QTYPE_DNSNAME: u32 = 2;
pub const NI_QTYPE_NODEADDR: u32 = 3;
pub const NI_QTYPE_IPV4ADDR: u32 = 4;
pub const NI_SUPTYPE_FLAG_COMPRESS: u32 = 256;
pub const NI_FQDN_FLAG_VALIDTTL: u32 = 256;
pub const NI_NODEADDR_FLAG_TRUNCATE: u32 = 256;
pub const NI_NODEADDR_FLAG_ALL: u32 = 512;
pub const NI_NODEADDR_FLAG_COMPAT: u32 = 1024;
pub const NI_NODEADDR_FLAG_LINKLOCAL: u32 = 2048;
pub const NI_NODEADDR_FLAG_SITELOCAL: u32 = 4096;
pub const NI_NODEADDR_FLAG_GLOBAL: u32 = 8192;
pub const NI_NODEADDR_FLAG_ANYCAST: u32 = 16384;
pub const ICMP6_RR_FLAGS_TEST: u32 = 128;
pub const ICMP6_RR_FLAGS_REQRESULT: u32 = 64;
pub const ICMP6_RR_FLAGS_FORCEAPPLY: u32 = 32;
pub const ICMP6_RR_FLAGS_SPECSITE: u32 = 16;
pub const ICMP6_RR_FLAGS_PREVDONE: u32 = 8;
pub const RPM_PCO_ADD: u32 = 1;
pub const RPM_PCO_CHANGE: u32 = 2;
pub const RPM_PCO_SETGLOBAL: u32 = 3;
pub const RPM_PCO_MAX: u32 = 4;
pub const ICMP6_RR_PCOUSE_RAFLAGS_ONLINK: u32 = 128;
pub const ICMP6_RR_PCOUSE_RAFLAGS_AUTO: u32 = 64;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME: u32 = 128;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME: u32 = 64;
pub const ICMP6_RR_RESULT_FLAGS_OOB: u32 = 512;
pub const ICMP6_RR_RESULT_FLAGS_FORBIDDEN: u32 = 256;
pub const ICMPV6CTL_STATS: u32 = 1;
pub const ICMPV6CTL_REDIRACCEPT: u32 = 2;
pub const ICMPV6CTL_REDIRTIMEOUT: u32 = 3;
pub const ICMPV6CTL_ND6_PRUNE: u32 = 6;
pub const ICMPV6CTL_ND6_DELAY: u32 = 8;
pub const ICMPV6CTL_ND6_UMAXTRIES: u32 = 9;
pub const ICMPV6CTL_ND6_MMAXTRIES: u32 = 10;
pub const ICMPV6CTL_ND6_USELOOPBACK: u32 = 11;
pub const ICMPV6CTL_NODEINFO: u32 = 13;
pub const ICMPV6CTL_ERRPPSLIMIT: u32 = 14;
pub const ICMPV6CTL_ND6_MAXNUDHINT: u32 = 15;
pub const ICMPV6CTL_MTUDISC_HIWAT: u32 = 16;
pub const ICMPV6CTL_MTUDISC_LOWAT: u32 = 17;
pub const ICMPV6CTL_ND6_DEBUG: u32 = 18;
pub const ICMPV6CTL_ND6_DRLIST: u32 = 19;
pub const ICMPV6CTL_ND6_PRLIST: u32 = 20;
pub const ICMPV6CTL_MLD_MAXSRCFILTER: u32 = 21;
pub const ICMPV6CTL_MLD_SOMAXSRC: u32 = 22;
pub const ICMPV6CTL_MLD_VERSION: u32 = 23;
pub const ICMPV6CTL_ND6_MAXQLEN: u32 = 24;
pub const ICMPV6CTL_ND6_ACCEPT_6TO4: u32 = 25;
pub const ICMPV6CTL_ND6_OPTIMISTIC_DAD: u32 = 26;
pub const ICMPV6CTL_ERRPPSLIMIT_RANDOM_INCR: u32 = 27;
pub const ICMPV6CTL_MAXID: u32 = 28;
pub const ICMP_MINLEN: u32 = 8;
pub const ICMP_MASKLEN: u32 = 12;
pub const ICMP_ECHOREPLY: u32 = 0;
pub const ICMP_UNREACH: u32 = 3;
pub const ICMP_UNREACH_NET: u32 = 0;
pub const ICMP_UNREACH_HOST: u32 = 1;
pub const ICMP_UNREACH_PROTOCOL: u32 = 2;
pub const ICMP_UNREACH_PORT: u32 = 3;
pub const ICMP_UNREACH_NEEDFRAG: u32 = 4;
pub const ICMP_UNREACH_SRCFAIL: u32 = 5;
pub const ICMP_UNREACH_NET_UNKNOWN: u32 = 6;
pub const ICMP_UNREACH_HOST_UNKNOWN: u32 = 7;
pub const ICMP_UNREACH_ISOLATED: u32 = 8;
pub const ICMP_UNREACH_NET_PROHIB: u32 = 9;
pub const ICMP_UNREACH_HOST_PROHIB: u32 = 10;
pub const ICMP_UNREACH_TOSNET: u32 = 11;
pub const ICMP_UNREACH_TOSHOST: u32 = 12;
pub const ICMP_UNREACH_FILTER_PROHIB: u32 = 13;
pub const ICMP_UNREACH_HOST_PRECEDENCE: u32 = 14;
pub const ICMP_UNREACH_PRECEDENCE_CUTOFF: u32 = 15;
pub const ICMP_SOURCEQUENCH: u32 = 4;
pub const ICMP_REDIRECT: u32 = 5;
pub const ICMP_REDIRECT_NET: u32 = 0;
pub const ICMP_REDIRECT_HOST: u32 = 1;
pub const ICMP_REDIRECT_TOSNET: u32 = 2;
pub const ICMP_REDIRECT_TOSHOST: u32 = 3;
pub const ICMP_ALTHOSTADDR: u32 = 6;
pub const ICMP_ECHO: u32 = 8;
pub const ICMP_ROUTERADVERT: u32 = 9;
pub const ICMP_ROUTERADVERT_NORMAL: u32 = 0;
pub const ICMP_ROUTERADVERT_NOROUTE_COMMON: u32 = 16;
pub const ICMP_ROUTERSOLICIT: u32 = 10;
pub const ICMP_TIMXCEED: u32 = 11;
pub const ICMP_TIMXCEED_INTRANS: u32 = 0;
pub const ICMP_TIMXCEED_REASS: u32 = 1;
pub const ICMP_PARAMPROB: u32 = 12;
pub const ICMP_PARAMPROB_ERRATPTR: u32 = 0;
pub const ICMP_PARAMPROB_OPTABSENT: u32 = 1;
pub const ICMP_PARAMPROB_LENGTH: u32 = 2;
pub const ICMP_TSTAMP: u32 = 13;
pub const ICMP_TSTAMPREPLY: u32 = 14;
pub const ICMP_IREQ: u32 = 15;
pub const ICMP_IREQREPLY: u32 = 16;
pub const ICMP_MASKREQ: u32 = 17;
pub const ICMP_MASKREPLY: u32 = 18;
pub const ICMP_TRACEROUTE: u32 = 30;
pub const ICMP_DATACONVERR: u32 = 31;
pub const ICMP_MOBILE_REDIRECT: u32 = 32;
pub const ICMP_IPV6_WHEREAREYOU: u32 = 33;
pub const ICMP_IPV6_IAMHERE: u32 = 34;
pub const ICMP_MOBILE_REGREQUEST: u32 = 35;
pub const ICMP_MOBILE_REGREPLY: u32 = 36;
pub const ICMP_SKIP: u32 = 39;
pub const ICMP_PHOTURIS: u32 = 40;
pub const ICMP_PHOTURIS_UNKNOWN_INDEX: u32 = 1;
pub const ICMP_PHOTURIS_AUTH_FAILED: u32 = 2;
pub const ICMP_PHOTURIS_DECRYPT_FAILED: u32 = 3;
pub const ICMP_MAXTYPE: u32 = 40;
pub const ICMPCTL_MASKREPL: u32 = 1;
pub const ICMPCTL_STATS: u32 = 2;
pub const ICMPCTL_ICMPLIM: u32 = 3;
pub const ICMPCTL_TIMESTAMP: u32 = 4;
pub const ICMPCTL_ICMPLIM_INCR: u32 = 5;
pub const ICMPCTL_MAXID: u32 = 6;
pub const SIN_PROXY: u32 = 1;
pub const SIN_ROUTER: u32 = 2;
pub const RTF_USETRAILERS: u32 = 32768;
pub const RTF_ANNOUNCE: u32 = 16384;
pub const IGMP_MINLEN: u32 = 8;
pub const IGMP_V3_QUERY_MINLEN: u32 = 12;
pub const IGMP_V3_QUERY_MAX_SRCS: u32 = 366;
pub const IGMP_GRPREC_HDRLEN: u32 = 8;
pub const IGMP_V3_REPORT_MINLEN: u32 = 8;
pub const IGMP_V3_REPORT_MAXRECS: u32 = 65535;
pub const IGMP_HOST_MEMBERSHIP_QUERY: u32 = 17;
pub const IGMP_v1_HOST_MEMBERSHIP_REPORT: u32 = 18;
pub const IGMP_DVMRP: u32 = 19;
pub const IGMP_PIM: u32 = 20;
pub const IGMP_v2_HOST_MEMBERSHIP_REPORT: u32 = 22;
pub const IGMP_HOST_LEAVE_MESSAGE: u32 = 23;
pub const IGMP_MTRACE_REPLY: u32 = 30;
pub const IGMP_MTRACE_QUERY: u32 = 31;
pub const IGMP_v3_HOST_MEMBERSHIP_REPORT: u32 = 34;
pub const IGMP_DO_NOTHING: u32 = 0;
pub const IGMP_MODE_IS_INCLUDE: u32 = 1;
pub const IGMP_MODE_IS_EXCLUDE: u32 = 2;
pub const IGMP_CHANGE_TO_INCLUDE_MODE: u32 = 3;
pub const IGMP_CHANGE_TO_EXCLUDE_MODE: u32 = 4;
pub const IGMP_ALLOW_NEW_SOURCES: u32 = 5;
pub const IGMP_BLOCK_OLD_SOURCES: u32 = 6;
pub const IGMP_V3_GENERAL_QUERY: u32 = 1;
pub const IGMP_V3_GROUP_QUERY: u32 = 2;
pub const IGMP_V3_GROUP_SOURCE_QUERY: u32 = 3;
pub const IGMP_V1V2_MAX_RI: u32 = 10;
pub const IGMP_MAX_HOST_REPORT_DELAY: u32 = 10;
pub const IGMP_TIMER_SCALE: u32 = 10;
pub const IGPS_VERSION_3: u32 = 3;
pub const IGPS_VERSION3_LEN: u32 = 168;
pub const IGMPCTL_STATS: u32 = 1;
pub const IGMPCTL_MAXID: u32 = 2;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 1;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_APP_APPROVED: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_TRACKER: u32 = 2;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_DOMAIN_SHORT: u32 = 4;
pub const SO_TRACKER_TRANSPARENCY_VERSION: u32 = 3;
pub const INP_IPV4: u32 = 1;
pub const INP_IPV6: u32 = 2;
pub const INP_V4MAPPEDV6: u32 = 4;
pub const INP_ANONPORT: u32 = 64;
pub const IN6P_IPV6_V6ONLY: u32 = 32768;
pub const IN6P_BINDV6ONLY: u32 = 16777216;
pub const SYSPROTO_EVENT: u32 = 1;
pub const SYSPROTO_CONTROL: u32 = 2;
pub const AF_SYS_CONTROL: u32 = 2;
pub const KEV_SNDSPACE: u32 = 4096;
pub const KEV_RECVSPACE: u32 = 32768;
pub const KEV_ANY_VENDOR: u32 = 0;
pub const KEV_ANY_CLASS: u32 = 0;
pub const KEV_ANY_SUBCLASS: u32 = 0;
pub const KEV_VENDOR_APPLE: u32 = 1;
pub const KEV_NETWORK_CLASS: u32 = 1;
pub const KEV_IOKIT_CLASS: u32 = 2;
pub const KEV_SYSTEM_CLASS: u32 = 3;
pub const KEV_APPLESHARE_CLASS: u32 = 4;
pub const KEV_FIREWALL_CLASS: u32 = 5;
pub const KEV_IEEE80211_CLASS: u32 = 6;
pub const KEV_NKE_CLASS: u32 = 7;
pub const KEV_NKE_ALF_SUBCLASS: u32 = 1;
pub const KEV_NKE_ALF_STATE_CHANGED: u32 = 1;
pub const XNU_KERN_EVENT_DATA_SIZE: u32 = 1;
pub const KEV_VENDOR_CODE_MAX_STR_LEN: u32 = 200;
pub const SCOPE6_ID_MAX: u32 = 16;
pub const IN6_PREFIX_ND: u32 = 1;
pub const IN6_PREFIX_RR: u32 = 2;
pub const PR_ORIG_RA: u32 = 0;
pub const PR_ORIG_RR: u32 = 1;
pub const PR_ORIG_STATIC: u32 = 2;
pub const PR_ORIG_KERNEL: u32 = 3;
pub const IN6_IFF_ANYCAST: u32 = 1;
pub const IN6_IFF_TENTATIVE: u32 = 2;
pub const IN6_IFF_DUPLICATED: u32 = 4;
pub const IN6_IFF_DETACHED: u32 = 8;
pub const IN6_IFF_DEPRECATED: u32 = 16;
pub const IN6_IFF_NODAD: u32 = 32;
pub const IN6_IFF_AUTOCONF: u32 = 64;
pub const IN6_IFF_TEMPORARY: u32 = 128;
pub const IN6_IFF_DYNAMIC: u32 = 256;
pub const IN6_IFF_OPTIMISTIC: u32 = 512;
pub const IN6_IFF_SECURED: u32 = 1024;
pub const IN6_IFF_CLAT46: u32 = 4096;
pub const IN6_IFF_NOPFX: u32 = 32768;
pub const IN6_IFF_DADPROGRESS: u32 = 514;
pub const IN6_IFF_NOTREADY: u32 = 6;
pub const IN6_IFF_NOTMANUAL: u32 = 320;
pub const IPV6_VERSION: u32 = 96;
pub const IPV6_VERSION_MASK: u32 = 240;
pub const IPV6_FLOWINFO_MASK: u32 = 4294967055;
pub const IPV6_FLOWLABEL_MASK: u32 = 4294905600;
pub const IPV6_FLOW_ECN_MASK: u32 = 12288;
pub const IP6TOS_CE: u32 = 1;
pub const IP6TOS_ECT: u32 = 2;
pub const IP6FLOW_DSCP_MASK: u32 = 264241152;
pub const IP6FLOW_DSCP_SHIFT: u32 = 22;
pub const IP6OPT_PAD1: u32 = 0;
pub const IP6OPT_PADN: u32 = 1;
pub const IP6OPT_JUMBO: u32 = 194;
pub const IP6OPT_NSAP_ADDR: u32 = 195;
pub const IP6OPT_TUNNEL_LIMIT: u32 = 4;
pub const IP6OPT_RTALERT: u32 = 5;
pub const IP6OPT_ROUTER_ALERT: u32 = 5;
pub const IP6OPT_RTALERT_LEN: u32 = 4;
pub const IP6OPT_RTALERT_MLD: u32 = 0;
pub const IP6OPT_RTALERT_RSVP: u32 = 1;
pub const IP6OPT_RTALERT_ACTNET: u32 = 2;
pub const IP6OPT_MINLEN: u32 = 2;
pub const IP6OPT_EID: u32 = 138;
pub const IP6OPT_TYPE_SKIP: u32 = 0;
pub const IP6OPT_TYPE_DISCARD: u32 = 64;
pub const IP6OPT_TYPE_FORCEICMP: u32 = 128;
pub const IP6OPT_TYPE_ICMP: u32 = 192;
pub const IP6OPT_MUTABLE: u32 = 32;
pub const IP6OPT_JUMBO_LEN: u32 = 6;
pub const IP6_ALERT_MLD: u32 = 0;
pub const IP6_ALERT_RSVP: u32 = 256;
pub const IP6_ALERT_AN: u32 = 512;
pub const IP6F_OFF_MASK: u32 = 63743;
pub const IP6F_RESERVED_MASK: u32 = 1536;
pub const IP6F_MORE_FRAG: u32 = 256;
pub const IPV6_MAXHLIM: u32 = 255;
pub const IPV6_DEFHLIM: u32 = 64;
pub const IPV6_FRAGTTL: u32 = 60;
pub const IPV6_HLIMDEC: u32 = 1;
pub const IPV6_MMTU: u32 = 1280;
pub const IPV6_MAXPACKET: u32 = 65535;
pub const IPV6_MAXOPTHDR: u32 = 2048;
pub const MAX_IPOPTLEN: u32 = 40;
pub const TCP_NSTATES: u32 = 11;
pub const TCPS_CLOSED: u32 = 0;
pub const TCPS_LISTEN: u32 = 1;
pub const TCPS_SYN_SENT: u32 = 2;
pub const TCPS_SYN_RECEIVED: u32 = 3;
pub const TCPS_ESTABLISHED: u32 = 4;
pub const TCPS_CLOSE_WAIT: u32 = 5;
pub const TCPS_FIN_WAIT_1: u32 = 6;
pub const TCPS_CLOSING: u32 = 7;
pub const TCPS_LAST_ACK: u32 = 8;
pub const TCPS_FIN_WAIT_2: u32 = 9;
pub const TCPS_TIME_WAIT: u32 = 10;
pub const TCP6_NSTATES: u32 = 11;
pub const TCP6S_CLOSED: u32 = 0;
pub const TCP6S_LISTEN: u32 = 1;
pub const TCP6S_SYN_SENT: u32 = 2;
pub const TCP6S_SYN_RECEIVED: u32 = 3;
pub const TCP6S_ESTABLISHED: u32 = 4;
pub const TCP6S_CLOSE_WAIT: u32 = 5;
pub const TCP6S_FIN_WAIT_1: u32 = 6;
pub const TCP6S_CLOSING: u32 = 7;
pub const TCP6S_LAST_ACK: u32 = 8;
pub const TCP6S_FIN_WAIT_2: u32 = 9;
pub const TCP6S_TIME_WAIT: u32 = 10;
pub const TCPT_NTIMERS_EXT: u32 = 4;
pub const TCPT_REXMT: u32 = 0;
pub const TCPT_PERSIST: u32 = 1;
pub const TCPT_KEEP: u32 = 2;
pub const TCPT_2MSL: u32 = 3;
pub const TCPT_DELACK: u32 = 4;
pub const TCPT_MAX: u32 = 4;
pub const TCPT_NONE: u32 = 5;
pub const TCPT_NTIMERS: u32 = 5;
pub const TF_ACKNOW: u32 = 1;
pub const TF_DELACK: u32 = 2;
pub const TF_NODELAY: u32 = 4;
pub const TF_NOOPT: u32 = 8;
pub const TF_SENTFIN: u32 = 16;
pub const TF_REQ_SCALE: u32 = 32;
pub const TF_RCVD_SCALE: u32 = 64;
pub const TF_REQ_TSTMP: u32 = 128;
pub const TF_RCVD_TSTMP: u32 = 256;
pub const TF_SACK_PERMIT: u32 = 512;
pub const TF_NEEDSYN: u32 = 1024;
pub const TF_NEEDFIN: u32 = 2048;
pub const TF_NOPUSH: u32 = 4096;
pub const TF_REQ_CC: u32 = 8192;
pub const TF_RCVD_CC: u32 = 16384;
pub const TF_SENDCCNEW: u32 = 32768;
pub const TF_MORETOCOME: u32 = 65536;
pub const TF_LQ_OVERFLOW: u32 = 131072;
pub const TF_RXWIN0SENT: u32 = 262144;
pub const TF_SLOWLINK: u32 = 524288;
pub const TCPOOB_HAVEDATA: u32 = 1;
pub const TCPOOB_HADDATA: u32 = 2;
pub const TCPCTL_DO_RFC1323: u32 = 1;
pub const TCPCTL_DO_RFC1644: u32 = 2;
pub const TCPCTL_MSSDFLT: u32 = 3;
pub const TCPCTL_STATS: u32 = 4;
pub const TCPCTL_RTTDFLT: u32 = 5;
pub const TCPCTL_KEEPIDLE: u32 = 6;
pub const TCPCTL_KEEPINTVL: u32 = 7;
pub const TCPCTL_SENDSPACE: u32 = 8;
pub const TCPCTL_RECVSPACE: u32 = 9;
pub const TCPCTL_KEEPINIT: u32 = 10;
pub const TCPCTL_PCBLIST: u32 = 11;
pub const TCPCTL_DELACKTIME: u32 = 12;
pub const TCPCTL_V6MSSDFLT: u32 = 13;
pub const TCPCTL_MAXID: u32 = 14;
pub const AUDIT_RECORD_MAGIC: u32 = 2190085915;
pub const MAX_AUDIT_RECORDS: u32 = 20;
pub const MAXAUDITDATA: u32 = 32767;
pub const MAX_AUDIT_RECORD_SIZE: u32 = 32767;
pub const MIN_AUDIT_FILE_SIZE: u32 = 524288;
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS: u32 = 4;
pub const AUDIT_TRIGGER_MIN: u32 = 1;
pub const AUDIT_TRIGGER_LOW_SPACE: u32 = 1;
pub const AUDIT_TRIGGER_ROTATE_KERNEL: u32 = 2;
pub const AUDIT_TRIGGER_READ_FILE: u32 = 3;
pub const AUDIT_TRIGGER_CLOSE_AND_DIE: u32 = 4;
pub const AUDIT_TRIGGER_NO_SPACE: u32 = 5;
pub const AUDIT_TRIGGER_ROTATE_USER: u32 = 6;
pub const AUDIT_TRIGGER_INITIALIZE: u32 = 7;
pub const AUDIT_TRIGGER_EXPIRE_TRAILS: u32 = 8;
pub const AUDIT_TRIGGER_MAX: u32 = 8;
pub const AUDITDEV_FILENAME: &[u8; 6usize] = b"audit\0";
pub const AUDIT_TRIGGER_FILE: &[u8; 11usize] = b"/dev/audit\0";
pub const AU_DEFAUDITSID: u32 = 0;
pub const AU_ASSIGN_ASID: i32 = -1;
pub const AUC_UNSET: u32 = 0;
pub const AUC_AUDITING: u32 = 1;
pub const AUC_NOAUDIT: u32 = 2;
pub const AUC_DISABLED: i32 = -1;
pub const A_OLDGETPOLICY: u32 = 2;
pub const A_OLDSETPOLICY: u32 = 3;
pub const A_GETKMASK: u32 = 4;
pub const A_SETKMASK: u32 = 5;
pub const A_OLDGETQCTRL: u32 = 6;
pub const A_OLDSETQCTRL: u32 = 7;
pub const A_GETCWD: u32 = 8;
pub const A_GETCAR: u32 = 9;
pub const A_GETSTAT: u32 = 12;
pub const A_SETSTAT: u32 = 13;
pub const A_SETUMASK: u32 = 14;
pub const A_SETSMASK: u32 = 15;
pub const A_OLDGETCOND: u32 = 20;
pub const A_OLDSETCOND: u32 = 21;
pub const A_GETCLASS: u32 = 22;
pub const A_SETCLASS: u32 = 23;
pub const A_GETPINFO: u32 = 24;
pub const A_SETPMASK: u32 = 25;
pub const A_SETFSIZE: u32 = 26;
pub const A_GETFSIZE: u32 = 27;
pub const A_GETPINFO_ADDR: u32 = 28;
pub const A_GETKAUDIT: u32 = 29;
pub const A_SETKAUDIT: u32 = 30;
pub const A_SENDTRIGGER: u32 = 31;
pub const A_GETSINFO_ADDR: u32 = 32;
pub const A_GETPOLICY: u32 = 33;
pub const A_SETPOLICY: u32 = 34;
pub const A_GETQCTRL: u32 = 35;
pub const A_SETQCTRL: u32 = 36;
pub const A_GETCOND: u32 = 37;
pub const A_SETCOND: u32 = 38;
pub const A_GETSFLAGS: u32 = 39;
pub const A_SETSFLAGS: u32 = 40;
pub const A_GETCTLMODE: u32 = 41;
pub const A_SETCTLMODE: u32 = 42;
pub const A_GETEXPAFTER: u32 = 43;
pub const A_SETEXPAFTER: u32 = 44;
pub const AUDIT_CNT: u32 = 1;
pub const AUDIT_AHLT: u32 = 2;
pub const AUDIT_ARGV: u32 = 4;
pub const AUDIT_ARGE: u32 = 8;
pub const AUDIT_SEQ: u32 = 16;
pub const AUDIT_WINDATA: u32 = 32;
pub const AUDIT_USER: u32 = 64;
pub const AUDIT_GROUP: u32 = 128;
pub const AUDIT_TRAIL: u32 = 256;
pub const AUDIT_PATH: u32 = 512;
pub const AUDIT_SCNT: u32 = 1024;
pub const AUDIT_PUBLIC: u32 = 2048;
pub const AUDIT_ZONENAME: u32 = 4096;
pub const AUDIT_PERZONE: u32 = 8192;
pub const AQ_HIWATER: u32 = 100;
pub const AQ_MAXHIGH: u32 = 10000;
pub const AQ_LOWATER: u32 = 10;
pub const AQ_BUFSZ: u32 = 32767;
pub const AQ_MAXBUFSZ: u32 = 1048576;
pub const AU_FS_MINFREE: u32 = 20;
pub const AU_IPv4: u32 = 4;
pub const AU_IPv6: u32 = 16;
pub const AU_CLASS_MASK_RESERVED: u32 = 268435456;
pub const CRF_NOMEMBERD: u32 = 1;
pub const CRF_MAC_ENFORCE: u32 = 2;
pub const XUCRED_VERSION: u32 = 0;
pub const CTL_MAXNAME: u32 = 12;
pub const CTLTYPE: u32 = 15;
pub const CTLTYPE_NODE: u32 = 1;
pub const CTLTYPE_INT: u32 = 2;
pub const CTLTYPE_STRING: u32 = 3;
pub const CTLTYPE_QUAD: u32 = 4;
pub const CTLTYPE_OPAQUE: u32 = 5;
pub const CTLTYPE_STRUCT: u32 = 5;
pub const CTLFLAG_RD: u32 = 2147483648;
pub const CTLFLAG_WR: u32 = 1073741824;
pub const CTLFLAG_RW: u32 = 3221225472;
pub const CTLFLAG_NOLOCK: u32 = 536870912;
pub const CTLFLAG_ANYBODY: u32 = 268435456;
pub const CTLFLAG_SECURE: u32 = 134217728;
pub const CTLFLAG_MASKED: u32 = 67108864;
pub const CTLFLAG_NOAUTO: u32 = 33554432;
pub const CTLFLAG_KERN: u32 = 16777216;
pub const CTLFLAG_LOCKED: u32 = 8388608;
pub const CTLFLAG_OID2: u32 = 4194304;
pub const CTLFLAG_EXPERIMENT: u32 = 1048576;
pub const OID_AUTO: i32 = -1;
pub const OID_AUTO_START: u32 = 100;
pub const CTL_UNSPEC: u32 = 0;
pub const CTL_KERN: u32 = 1;
pub const CTL_VM: u32 = 2;
pub const CTL_VFS: u32 = 3;
pub const CTL_NET: u32 = 4;
pub const CTL_DEBUG: u32 = 5;
pub const CTL_HW: u32 = 6;
pub const CTL_MACHDEP: u32 = 7;
pub const CTL_USER: u32 = 8;
pub const CTL_MAXID: u32 = 9;
pub const KERN_OSTYPE: u32 = 1;
pub const KERN_OSRELEASE: u32 = 2;
pub const KERN_OSREV: u32 = 3;
pub const KERN_VERSION: u32 = 4;
pub const KERN_MAXVNODES: u32 = 5;
pub const KERN_MAXPROC: u32 = 6;
pub const KERN_MAXFILES: u32 = 7;
pub const KERN_ARGMAX: u32 = 8;
pub const KERN_SECURELVL: u32 = 9;
pub const KERN_HOSTNAME: u32 = 10;
pub const KERN_HOSTID: u32 = 11;
pub const KERN_CLOCKRATE: u32 = 12;
pub const KERN_VNODE: u32 = 13;
pub const KERN_PROC: u32 = 14;
pub const KERN_FILE: u32 = 15;
pub const KERN_PROF: u32 = 16;
pub const KERN_POSIX1: u32 = 17;
pub const KERN_NGROUPS: u32 = 18;
pub const KERN_JOB_CONTROL: u32 = 19;
pub const KERN_SAVED_IDS: u32 = 20;
pub const KERN_BOOTTIME: u32 = 21;
pub const KERN_NISDOMAINNAME: u32 = 22;
pub const KERN_DOMAINNAME: u32 = 22;
pub const KERN_MAXPARTITIONS: u32 = 23;
pub const KERN_KDEBUG: u32 = 24;
pub const KERN_UPDATEINTERVAL: u32 = 25;
pub const KERN_OSRELDATE: u32 = 26;
pub const KERN_NTP_PLL: u32 = 27;
pub const KERN_BOOTFILE: u32 = 28;
pub const KERN_MAXFILESPERPROC: u32 = 29;
pub const KERN_MAXPROCPERUID: u32 = 30;
pub const KERN_DUMPDEV: u32 = 31;
pub const KERN_IPC: u32 = 32;
pub const KERN_DUMMY: u32 = 33;
pub const KERN_PS_STRINGS: u32 = 34;
pub const KERN_USRSTACK32: u32 = 35;
pub const KERN_LOGSIGEXIT: u32 = 36;
pub const KERN_SYMFILE: u32 = 37;
pub const KERN_PROCARGS: u32 = 38;
pub const KERN_NETBOOT: u32 = 40;
pub const KERN_SYSV: u32 = 42;
pub const KERN_AFFINITY: u32 = 43;
pub const KERN_TRANSLATE: u32 = 44;
pub const KERN_CLASSIC: u32 = 44;
pub const KERN_EXEC: u32 = 45;
pub const KERN_CLASSICHANDLER: u32 = 45;
pub const KERN_AIOMAX: u32 = 46;
pub const KERN_AIOPROCMAX: u32 = 47;
pub const KERN_AIOTHREADS: u32 = 48;
pub const KERN_PROCARGS2: u32 = 49;
pub const KERN_COREFILE: u32 = 50;
pub const KERN_COREDUMP: u32 = 51;
pub const KERN_SUGID_COREDUMP: u32 = 52;
pub const KERN_PROCDELAYTERM: u32 = 53;
pub const KERN_SHREG_PRIVATIZABLE: u32 = 54;
pub const KERN_LOW_PRI_WINDOW: u32 = 56;
pub const KERN_LOW_PRI_DELAY: u32 = 57;
pub const KERN_POSIX: u32 = 58;
pub const KERN_USRSTACK64: u32 = 59;
pub const KERN_NX_PROTECTION: u32 = 60;
pub const KERN_TFP: u32 = 61;
pub const KERN_PROCNAME: u32 = 62;
pub const KERN_THALTSTACK: u32 = 63;
pub const KERN_SPECULATIVE_READS: u32 = 64;
pub const KERN_OSVERSION: u32 = 65;
pub const KERN_SAFEBOOT: u32 = 66;
pub const KERN_RAGEVNODE: u32 = 68;
pub const KERN_TTY: u32 = 69;
pub const KERN_CHECKOPENEVT: u32 = 70;
pub const KERN_THREADNAME: u32 = 71;
pub const KERN_MAXID: u32 = 72;
pub const KERN_USRSTACK: u32 = 59;
pub const KERN_RAGE_PROC: u32 = 1;
pub const KERN_RAGE_THREAD: u32 = 2;
pub const KERN_UNRAGE_PROC: u32 = 3;
pub const KERN_UNRAGE_THREAD: u32 = 4;
pub const KERN_OPENEVT_PROC: u32 = 1;
pub const KERN_UNOPENEVT_PROC: u32 = 2;
pub const KERN_TFP_POLICY: u32 = 1;
pub const KERN_TFP_POLICY_DENY: u32 = 0;
pub const KERN_TFP_POLICY_DEFAULT: u32 = 2;
pub const KERN_KDEFLAGS: u32 = 1;
pub const KERN_KDDFLAGS: u32 = 2;
pub const KERN_KDENABLE: u32 = 3;
pub const KERN_KDSETBUF: u32 = 4;
pub const KERN_KDGETBUF: u32 = 5;
pub const KERN_KDSETUP: u32 = 6;
pub const KERN_KDREMOVE: u32 = 7;
pub const KERN_KDSETREG: u32 = 8;
pub const KERN_KDGETREG: u32 = 9;
pub const KERN_KDREADTR: u32 = 10;
pub const KERN_KDPIDTR: u32 = 11;
pub const KERN_KDTHRMAP: u32 = 12;
pub const KERN_KDPIDEX: u32 = 14;
pub const KERN_KDSETRTCDEC: u32 = 15;
pub const KERN_KDGETENTROPY: u32 = 16;
pub const KERN_KDWRITETR: u32 = 17;
pub const KERN_KDWRITEMAP: u32 = 18;
pub const KERN_KDTEST: u32 = 19;
pub const KERN_KDREADCURTHRMAP: u32 = 21;
pub const KERN_KDSET_TYPEFILTER: u32 = 22;
pub const KERN_KDBUFWAIT: u32 = 23;
pub const KERN_KDCPUMAP: u32 = 24;
pub const KERN_KDCPUMAP_EXT: u32 = 25;
pub const KERN_KDSET_EDM: u32 = 26;
pub const KERN_KDGET_EDM: u32 = 27;
pub const KERN_KDWRITETR_V3: u32 = 28;
pub const KERN_PROC_ALL: u32 = 0;
pub const KERN_PROC_PID: u32 = 1;
pub const KERN_PROC_PGRP: u32 = 2;
pub const KERN_PROC_SESSION: u32 = 3;
pub const KERN_PROC_TTY: u32 = 4;
pub const KERN_PROC_UID: u32 = 5;
pub const KERN_PROC_RUID: u32 = 6;
pub const KERN_PROC_LCID: u32 = 7;
pub const KERN_VFSNSPACE_HANDLE_PROC: u32 = 1;
pub const KERN_VFSNSPACE_UNHANDLE_PROC: u32 = 2;
pub const WMESGLEN: u32 = 7;
pub const EPROC_CTTY: u32 = 1;
pub const EPROC_SLEADER: u32 = 2;
pub const COMAPT_MAXLOGNAME: u32 = 12;
pub const KIPC_MAXSOCKBUF: u32 = 1;
pub const KIPC_SOCKBUF_WASTE: u32 = 2;
pub const KIPC_SOMAXCONN: u32 = 3;
pub const KIPC_MAX_LINKHDR: u32 = 4;
pub const KIPC_MAX_PROTOHDR: u32 = 5;
pub const KIPC_MAX_HDR: u32 = 6;
pub const KIPC_MAX_DATALEN: u32 = 7;
pub const KIPC_MBSTAT: u32 = 8;
pub const KIPC_NMBCLUSTERS: u32 = 9;
pub const KIPC_SOQLIMITCOMPAT: u32 = 10;
pub const VM_METER: u32 = 1;
pub const VM_LOADAVG: u32 = 2;
pub const VM_MACHFACTOR: u32 = 4;
pub const VM_SWAPUSAGE: u32 = 5;
pub const VM_MAXID: u32 = 6;
pub const LSCALE: u32 = 1000;
pub const HW_MACHINE: u32 = 1;
pub const HW_MODEL: u32 = 2;
pub const HW_NCPU: u32 = 3;
pub const HW_BYTEORDER: u32 = 4;
pub const HW_PHYSMEM: u32 = 5;
pub const HW_USERMEM: u32 = 6;
pub const HW_PAGESIZE: u32 = 7;
pub const HW_DISKNAMES: u32 = 8;
pub const HW_DISKSTATS: u32 = 9;
pub const HW_EPOCH: u32 = 10;
pub const HW_FLOATINGPT: u32 = 11;
pub const HW_MACHINE_ARCH: u32 = 12;
pub const HW_VECTORUNIT: u32 = 13;
pub const HW_BUS_FREQ: u32 = 14;
pub const HW_CPU_FREQ: u32 = 15;
pub const HW_CACHELINE: u32 = 16;
pub const HW_L1ICACHESIZE: u32 = 17;
pub const HW_L1DCACHESIZE: u32 = 18;
pub const HW_L2SETTINGS: u32 = 19;
pub const HW_L2CACHESIZE: u32 = 20;
pub const HW_L3SETTINGS: u32 = 21;
pub const HW_L3CACHESIZE: u32 = 22;
pub const HW_TB_FREQ: u32 = 23;
pub const HW_MEMSIZE: u32 = 24;
pub const HW_AVAILCPU: u32 = 25;
pub const HW_TARGET: u32 = 26;
pub const HW_PRODUCT: u32 = 27;
pub const HW_MAXID: u32 = 28;
pub const USER_CS_PATH: u32 = 1;
pub const USER_BC_BASE_MAX: u32 = 2;
pub const USER_BC_DIM_MAX: u32 = 3;
pub const USER_BC_SCALE_MAX: u32 = 4;
pub const USER_BC_STRING_MAX: u32 = 5;
pub const USER_COLL_WEIGHTS_MAX: u32 = 6;
pub const USER_EXPR_NEST_MAX: u32 = 7;
pub const USER_LINE_MAX: u32 = 8;
pub const USER_RE_DUP_MAX: u32 = 9;
pub const USER_POSIX2_VERSION: u32 = 10;
pub const USER_POSIX2_C_BIND: u32 = 11;
pub const USER_POSIX2_C_DEV: u32 = 12;
pub const USER_POSIX2_CHAR_TERM: u32 = 13;
pub const USER_POSIX2_FORT_DEV: u32 = 14;
pub const USER_POSIX2_FORT_RUN: u32 = 15;
pub const USER_POSIX2_LOCALEDEF: u32 = 16;
pub const USER_POSIX2_SW_DEV: u32 = 17;
pub const USER_POSIX2_UPE: u32 = 18;
pub const USER_STREAM_MAX: u32 = 19;
pub const USER_TZNAME_MAX: u32 = 20;
pub const USER_MAXID: u32 = 21;
pub const CTL_DEBUG_NAME: u32 = 0;
pub const CTL_DEBUG_VALUE: u32 = 1;
pub const CTL_DEBUG_MAXID: u32 = 20;
pub const UDPCTL_CHECKSUM: u32 = 1;
pub const UDPCTL_STATS: u32 = 2;
pub const UDPCTL_MAXDGRAM: u32 = 3;
pub const UDPCTL_RECVSPACE: u32 = 4;
pub const UDPCTL_PCBLIST: u32 = 5;
pub const UDPCTL_MAXID: u32 = 6;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PGUARD: u32 = 13;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MAX_SPECIAL_PORT: u32 = 33;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const PPNUM_MAX: u32 = 4294967295;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_BASIC_INFO_64: u32 = 5;
pub const TASK_BASIC_INFO: u32 = 5;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const I386_PGBYTES: u32 = 4096;
pub const I386_PGSHIFT: u32 = 12;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const MACH_VOUCHER_BANK_CONTENT_SIZE: u32 = 500;
pub const BANK_ORIGINATOR_PID: u32 = 1;
pub const BANK_PERSONA_TOKEN: u32 = 2;
pub const BANK_PERSONA_ID: u32 = 3;
pub const BANK_PERSONA_ADOPT_ANY: u32 = 4;
pub const PROC_PERSONA_INFO_FLAG_ADOPTION_ALLOWED: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const DEBUG_ASSERT_COMPONENT_NAME_STRING: &[u8; 1usize] = b"\0";
pub const __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const task_MSG_COUNT: u32 = 65;
pub const thread_act_MSG_COUNT: u32 = 31;
pub const vm_map_MSG_COUNT: u32 = 33;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const _MACH_INIT_: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const clock_MSG_COUNT: u32 = 3;
pub const clock_reply_MSG_COUNT: u32 = 1;
pub const exc_MSG_COUNT: u32 = 3;
pub const HOST_REBOOT_HALT: u32 = 8;
pub const HOST_REBOOT_UPSDELAY: u32 = 256;
pub const HOST_REBOOT_DEBUGGER: u32 = 4096;
pub const TASK_PORT_REGISTER_MAX: u32 = 3;
pub const TASK_MAX_WATCHPORT_COUNT: u32 = 32;
pub const TASK_SELF_PORT_COUNT: u32 = 4;
pub const THREAD_SELF_PORT_COUNT: u32 = 3;
pub const mach_vm_MSG_COUNT: u32 = 25;
pub const mach_voucher_MSG_COUNT: u32 = 5;
pub const memory_entry_MSG_COUNT: u32 = 3;
pub const SHARED_REGION_BASE_I386: u32 = 2415919104;
pub const SHARED_REGION_SIZE_I386: u32 = 536870912;
pub const SHARED_REGION_NESTING_BASE_I386: u32 = 2415919104;
pub const SHARED_REGION_NESTING_SIZE_I386: u32 = 536870912;
pub const SHARED_REGION_NESTING_MIN_I386: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX_I386: u32 = 4292870144;
pub const SHARED_REGION_BASE_X86_64: u64 = 140703128616960;
pub const SHARED_REGION_SIZE_X86_64: u64 = 34326183936;
pub const SHARED_REGION_NESTING_BASE_X86_64: u64 = 140703128616960;
pub const SHARED_REGION_NESTING_SIZE_X86_64: u64 = 34326183936;
pub const SHARED_REGION_NESTING_MIN_X86_64: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX_X86_64: i32 = -2097152;
pub const SHARED_REGION_BASE_PPC: u32 = 2415919104;
pub const SHARED_REGION_SIZE_PPC: u32 = 536870912;
pub const SHARED_REGION_NESTING_BASE_PPC: u32 = 2415919104;
pub const SHARED_REGION_NESTING_SIZE_PPC: u32 = 268435456;
pub const SHARED_REGION_NESTING_MIN_PPC: u32 = 268435456;
pub const SHARED_REGION_NESTING_MAX_PPC: u32 = 268435456;
pub const SHARED_REGION_BASE_PPC64: u64 = 140734804000768;
pub const SHARED_REGION_SIZE_PPC64: u32 = 2684354560;
pub const SHARED_REGION_NESTING_BASE_PPC64: u64 = 140734804000768;
pub const SHARED_REGION_NESTING_SIZE_PPC64: u32 = 2684354560;
pub const SHARED_REGION_NESTING_MIN_PPC64: u32 = 268435456;
pub const SHARED_REGION_NESTING_MAX_PPC64: u32 = 268435456;
pub const SHARED_REGION_BASE_ARM: u32 = 1073741824;
pub const SHARED_REGION_SIZE_ARM: u32 = 1073741824;
pub const SHARED_REGION_NESTING_BASE_ARM: u32 = 1073741824;
pub const SHARED_REGION_NESTING_SIZE_ARM: u32 = 1073741824;
pub const SHARED_REGION_BASE_ARM64_32: u32 = 436207616;
pub const SHARED_REGION_SIZE_ARM64_32: u32 = 2785017856;
pub const SHARED_REGION_NESTING_BASE_ARM64_32: u32 = 436207616;
pub const SHARED_REGION_NESTING_SIZE_ARM64_32: u32 = 2785017856;
pub const SHARED_REGION_BASE_ARM64: u64 = 6442450944;
pub const SHARED_REGION_SIZE_ARM64: u64 = 4294967296;
pub const SHARED_REGION_NESTING_BASE_ARM64: u64 = 6442450944;
pub const SHARED_REGION_NESTING_SIZE_ARM64: u64 = 4294967296;
pub const SHARED_REGION_BASE: u64 = 140703128616960;
pub const SHARED_REGION_SIZE: u64 = 34326183936;
pub const SHARED_REGION_NESTING_BASE: u64 = 140703128616960;
pub const SHARED_REGION_NESTING_SIZE: u64 = 34326183936;
pub const SHARED_REGION_NESTING_MIN: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX: i32 = -2097152;
pub const VM_PROT_COW: u32 = 8;
pub const VM_PROT_ZF: u32 = 16;
pub const VM_PROT_SLIDE: u32 = 32;
pub const VM_PROT_NOAUTH: u32 = 64;
pub const VM_PROT_TRANSLATED_ALLOW_EXECUTE: u32 = 128;
pub const Gstack: u32 = 0;
pub const CC_SYM_PREFIX: &[u8; 2usize] = b"_\0";
pub const DTRACE_NOPS: &[u8; 16usize] = b"nop\n\tnop\n\tnop\n\t\0";
pub const DEVICE_PAGER_GUARDED: u32 = 1;
pub const DEVICE_PAGER_COHERENT: u32 = 2;
pub const DEVICE_PAGER_CACHE_INHIB: u32 = 4;
pub const DEVICE_PAGER_WRITE_THROUGH: u32 = 8;
pub const DEVICE_PAGER_CONTIGUOUS: u32 = 256;
pub const DEVICE_PAGER_NOPHYSCACHE: u32 = 512;
pub const OSATOMIC_DEPRECATED: u32 = 1;
pub const OSSPINLOCK_DEPRECATED: u32 = 1;
pub const OS_SPINLOCK_INIT: u32 = 0;
pub const OS_LOCK_API_VERSION: u32 = 20160309;
pub const MALLOC_PTR_IN_USE_RANGE_TYPE: u32 = 1;
pub const MALLOC_PTR_REGION_RANGE_TYPE: u32 = 2;
pub const MALLOC_ADMIN_REGION_RANGE_TYPE: u32 = 4;
pub const MALLOC_ZONE_SPECIFIC_FLAGS: u32 = 65280;
pub const MALLOC_VERBOSE_PRINT_LEVEL: u32 = 2;
pub const FASTTRAP_MAX_INSTR_SIZE: u32 = 15;
pub const FASTTRAP_INSTR: u32 = 204;
pub const FASTTRAP_SUNWDTRACE_SIZE: u32 = 64;
pub const FASTTRAP_T_COMMON: u32 = 0;
pub const FASTTRAP_T_JCC: u32 = 1;
pub const FASTTRAP_T_LOOP: u32 = 2;
pub const FASTTRAP_T_JCXZ: u32 = 3;
pub const FASTTRAP_T_JMP: u32 = 4;
pub const FASTTRAP_T_CALL: u32 = 5;
pub const FASTTRAP_T_RET: u32 = 6;
pub const FASTTRAP_T_RET16: u32 = 7;
pub const FASTTRAP_T_PUSHL_EBP: u32 = 16;
pub const FASTTRAP_T_NOP: u32 = 17;
pub const FASTTRAP_RIP_1: u32 = 1;
pub const FASTTRAP_RIP_2: u32 = 2;
pub const FASTTRAP_RIP_X: u32 = 4;
pub const FASTTRAP_SEG_NONE: u32 = 0;
pub const FASTTRAP_SEG_CS: u32 = 1;
pub const FASTTRAP_SEG_DS: u32 = 2;
pub const FASTTRAP_SEG_ES: u32 = 3;
pub const FASTTRAP_SEG_FS: u32 = 4;
pub const FASTTRAP_SEG_GS: u32 = 5;
pub const FASTTRAP_SEG_SS: u32 = 6;
pub const FASTTRAP_RETURN_AFRAMES: u32 = 6;
pub const FASTTRAP_ENTRY_AFRAMES: u32 = 5;
pub const FASTTRAP_OFFSET_AFRAMES: u32 = 5;
pub const _ARM_SIGNAL_: u32 = 1;
pub const LDT_AUTO_ALLOC: u32 = 4294967295;
pub const _BSD_I386_VMPARAM_H_: u32 = 1;
pub const DFLSSIZ: u32 = 8388608;
pub const MAXSSIZ: u32 = 67108864;
pub const DFLCSIZ: u32 = 0;
pub const _BSD_ARM_VMPARAM_H_: u32 = 1;
pub const BSM_PF_UNSPEC: u32 = 0;
pub const BSM_PF_LOCAL: u32 = 1;
pub const BSM_PF_INET: u32 = 2;
pub const BSM_PF_IMPLINK: u32 = 3;
pub const BSM_PF_PUP: u32 = 4;
pub const BSM_PF_CHAOS: u32 = 5;
pub const BSM_PF_NS: u32 = 6;
pub const BSM_PF_NBS: u32 = 7;
pub const BSM_PF_ECMA: u32 = 8;
pub const BSM_PF_DATAKIT: u32 = 9;
pub const BSM_PF_CCITT: u32 = 10;
pub const BSM_PF_SNA: u32 = 11;
pub const BSM_PF_DECnet: u32 = 12;
pub const BSM_PF_DLI: u32 = 13;
pub const BSM_PF_LAT: u32 = 14;
pub const BSM_PF_HYLINK: u32 = 15;
pub const BSM_PF_APPLETALK: u32 = 16;
pub const BSM_PF_NIT: u32 = 17;
pub const BSM_PF_802: u32 = 18;
pub const BSM_PF_OSI: u32 = 19;
pub const BSM_PF_X25: u32 = 20;
pub const BSM_PF_OSINET: u32 = 21;
pub const BSM_PF_GOSIP: u32 = 22;
pub const BSM_PF_IPX: u32 = 23;
pub const BSM_PF_ROUTE: u32 = 24;
pub const BSM_PF_LINK: u32 = 25;
pub const BSM_PF_INET6: u32 = 26;
pub const BSM_PF_KEY: u32 = 27;
pub const BSM_PF_NCA: u32 = 28;
pub const BSM_PF_POLICY: u32 = 29;
pub const BSM_PF_INET_OFFLOAD: u32 = 30;
pub const BSM_PF_NETBIOS: u32 = 500;
pub const BSM_PF_ISO: u32 = 501;
pub const BSM_PF_XTP: u32 = 502;
pub const BSM_PF_COIP: u32 = 503;
pub const BSM_PF_CNT: u32 = 504;
pub const BSM_PF_RTIP: u32 = 505;
pub const BSM_PF_SIP: u32 = 506;
pub const BSM_PF_PIP: u32 = 507;
pub const BSM_PF_ISDN: u32 = 508;
pub const BSM_PF_E164: u32 = 509;
pub const BSM_PF_NATM: u32 = 510;
pub const BSM_PF_ATM: u32 = 511;
pub const BSM_PF_NETGRAPH: u32 = 512;
pub const BSM_PF_SLOW: u32 = 513;
pub const BSM_PF_SCLUSTER: u32 = 514;
pub const BSM_PF_ARP: u32 = 515;
pub const BSM_PF_BLUETOOTH: u32 = 516;
pub const BSM_PF_IEEE80211: u32 = 517;
pub const BSM_PF_AX25: u32 = 518;
pub const BSM_PF_ROSE: u32 = 519;
pub const BSM_PF_NETBEUI: u32 = 520;
pub const BSM_PF_SECURITY: u32 = 521;
pub const BSM_PF_PACKET: u32 = 522;
pub const BSM_PF_ASH: u32 = 523;
pub const BSM_PF_ECONET: u32 = 524;
pub const BSM_PF_ATMSVC: u32 = 525;
pub const BSM_PF_IRDA: u32 = 526;
pub const BSM_PF_PPPOX: u32 = 527;
pub const BSM_PF_WANPIPE: u32 = 528;
pub const BSM_PF_LLC: u32 = 529;
pub const BSM_PF_CAN: u32 = 530;
pub const BSM_PF_TIPC: u32 = 531;
pub const BSM_PF_IUCV: u32 = 532;
pub const BSM_PF_RXRPC: u32 = 533;
pub const BSM_PF_PHONET: u32 = 534;
pub const BSM_PF_UNKNOWN: u32 = 700;
pub const BSM_ERRNO_ESUCCESS: u32 = 0;
pub const BSM_ERRNO_EPERM: u32 = 1;
pub const BSM_ERRNO_ENOENT: u32 = 2;
pub const BSM_ERRNO_ESRCH: u32 = 3;
pub const BSM_ERRNO_EINTR: u32 = 4;
pub const BSM_ERRNO_EIO: u32 = 5;
pub const BSM_ERRNO_ENXIO: u32 = 6;
pub const BSM_ERRNO_E2BIG: u32 = 7;
pub const BSM_ERRNO_ENOEXEC: u32 = 8;
pub const BSM_ERRNO_EBADF: u32 = 9;
pub const BSM_ERRNO_ECHILD: u32 = 10;
pub const BSM_ERRNO_EAGAIN: u32 = 11;
pub const BSM_ERRNO_ENOMEM: u32 = 12;
pub const BSM_ERRNO_EACCES: u32 = 13;
pub const BSM_ERRNO_EFAULT: u32 = 14;
pub const BSM_ERRNO_ENOTBLK: u32 = 15;
pub const BSM_ERRNO_EBUSY: u32 = 16;
pub const BSM_ERRNO_EEXIST: u32 = 17;
pub const BSM_ERRNO_EXDEV: u32 = 18;
pub const BSM_ERRNO_ENODEV: u32 = 19;
pub const BSM_ERRNO_ENOTDIR: u32 = 20;
pub const BSM_ERRNO_EISDIR: u32 = 21;
pub const BSM_ERRNO_EINVAL: u32 = 22;
pub const BSM_ERRNO_ENFILE: u32 = 23;
pub const BSM_ERRNO_EMFILE: u32 = 24;
pub const BSM_ERRNO_ENOTTY: u32 = 25;
pub const BSM_ERRNO_ETXTBSY: u32 = 26;
pub const BSM_ERRNO_EFBIG: u32 = 27;
pub const BSM_ERRNO_ENOSPC: u32 = 28;
pub const BSM_ERRNO_ESPIPE: u32 = 29;
pub const BSM_ERRNO_EROFS: u32 = 30;
pub const BSM_ERRNO_EMLINK: u32 = 31;
pub const BSM_ERRNO_EPIPE: u32 = 32;
pub const BSM_ERRNO_EDOM: u32 = 33;
pub const BSM_ERRNO_ERANGE: u32 = 34;
pub const BSM_ERRNO_ENOMSG: u32 = 35;
pub const BSM_ERRNO_EIDRM: u32 = 36;
pub const BSM_ERRNO_ECHRNG: u32 = 37;
pub const BSM_ERRNO_EL2NSYNC: u32 = 38;
pub const BSM_ERRNO_EL3HLT: u32 = 39;
pub const BSM_ERRNO_EL3RST: u32 = 40;
pub const BSM_ERRNO_ELNRNG: u32 = 41;
pub const BSM_ERRNO_EUNATCH: u32 = 42;
pub const BSM_ERRNO_ENOCSI: u32 = 43;
pub const BSM_ERRNO_EL2HLT: u32 = 44;
pub const BSM_ERRNO_EDEADLK: u32 = 45;
pub const BSM_ERRNO_ENOLCK: u32 = 46;
pub const BSM_ERRNO_ECANCELED: u32 = 47;
pub const BSM_ERRNO_ENOTSUP: u32 = 48;
pub const BSM_ERRNO_EDQUOT: u32 = 49;
pub const BSM_ERRNO_EBADE: u32 = 50;
pub const BSM_ERRNO_EBADR: u32 = 51;
pub const BSM_ERRNO_EXFULL: u32 = 52;
pub const BSM_ERRNO_ENOANO: u32 = 53;
pub const BSM_ERRNO_EBADRQC: u32 = 54;
pub const BSM_ERRNO_EBADSLT: u32 = 55;
pub const BSM_ERRNO_EDEADLOCK: u32 = 56;
pub const BSM_ERRNO_EBFONT: u32 = 57;
pub const BSM_ERRNO_EOWNERDEAD: u32 = 58;
pub const BSM_ERRNO_ENOTRECOVERABLE: u32 = 59;
pub const BSM_ERRNO_ENOSTR: u32 = 60;
pub const BSM_ERRNO_ENODATA: u32 = 61;
pub const BSM_ERRNO_ETIME: u32 = 62;
pub const BSM_ERRNO_ENOSR: u32 = 63;
pub const BSM_ERRNO_ENONET: u32 = 64;
pub const BSM_ERRNO_ENOPKG: u32 = 65;
pub const BSM_ERRNO_EREMOTE: u32 = 66;
pub const BSM_ERRNO_ENOLINK: u32 = 67;
pub const BSM_ERRNO_EADV: u32 = 68;
pub const BSM_ERRNO_ESRMNT: u32 = 69;
pub const BSM_ERRNO_ECOMM: u32 = 70;
pub const BSM_ERRNO_EPROTO: u32 = 71;
pub const BSM_ERRNO_ELOCKUNMAPPED: u32 = 72;
pub const BSM_ERRNO_ENOTACTIVE: u32 = 73;
pub const BSM_ERRNO_EMULTIHOP: u32 = 74;
pub const BSM_ERRNO_EBADMSG: u32 = 77;
pub const BSM_ERRNO_ENAMETOOLONG: u32 = 78;
pub const BSM_ERRNO_EOVERFLOW: u32 = 79;
pub const BSM_ERRNO_ENOTUNIQ: u32 = 80;
pub const BSM_ERRNO_EBADFD: u32 = 81;
pub const BSM_ERRNO_EREMCHG: u32 = 82;
pub const BSM_ERRNO_ELIBACC: u32 = 83;
pub const BSM_ERRNO_ELIBBAD: u32 = 84;
pub const BSM_ERRNO_ELIBSCN: u32 = 85;
pub const BSM_ERRNO_ELIBMAX: u32 = 86;
pub const BSM_ERRNO_ELIBEXEC: u32 = 87;
pub const BSM_ERRNO_EILSEQ: u32 = 88;
pub const BSM_ERRNO_ENOSYS: u32 = 89;
pub const BSM_ERRNO_ELOOP: u32 = 90;
pub const BSM_ERRNO_ERESTART: u32 = 91;
pub const BSM_ERRNO_ESTRPIPE: u32 = 92;
pub const BSM_ERRNO_ENOTEMPTY: u32 = 93;
pub const BSM_ERRNO_EUSERS: u32 = 94;
pub const BSM_ERRNO_ENOTSOCK: u32 = 95;
pub const BSM_ERRNO_EDESTADDRREQ: u32 = 96;
pub const BSM_ERRNO_EMSGSIZE: u32 = 97;
pub const BSM_ERRNO_EPROTOTYPE: u32 = 98;
pub const BSM_ERRNO_ENOPROTOOPT: u32 = 99;
pub const BSM_ERRNO_EPROTONOSUPPORT: u32 = 120;
pub const BSM_ERRNO_ESOCKTNOSUPPORT: u32 = 121;
pub const BSM_ERRNO_EOPNOTSUPP: u32 = 122;
pub const BSM_ERRNO_EPFNOSUPPORT: u32 = 123;
pub const BSM_ERRNO_EAFNOSUPPORT: u32 = 124;
pub const BSM_ERRNO_EADDRINUSE: u32 = 125;
pub const BSM_ERRNO_EADDRNOTAVAIL: u32 = 126;
pub const BSM_ERRNO_ENETDOWN: u32 = 127;
pub const BSM_ERRNO_ENETUNREACH: u32 = 128;
pub const BSM_ERRNO_ENETRESET: u32 = 129;
pub const BSM_ERRNO_ECONNABORTED: u32 = 130;
pub const BSM_ERRNO_ECONNRESET: u32 = 131;
pub const BSM_ERRNO_ENOBUFS: u32 = 132;
pub const BSM_ERRNO_EISCONN: u32 = 133;
pub const BSM_ERRNO_ENOTCONN: u32 = 134;
pub const BSM_ERRNO_ESHUTDOWN: u32 = 143;
pub const BSM_ERRNO_ETOOMANYREFS: u32 = 144;
pub const BSM_ERRNO_ETIMEDOUT: u32 = 145;
pub const BSM_ERRNO_ECONNREFUSED: u32 = 146;
pub const BSM_ERRNO_EHOSTDOWN: u32 = 147;
pub const BSM_ERRNO_EHOSTUNREACH: u32 = 148;
pub const BSM_ERRNO_EALREADY: u32 = 149;
pub const BSM_ERRNO_EINPROGRESS: u32 = 150;
pub const BSM_ERRNO_ESTALE: u32 = 151;
pub const BSM_ERRNO_EQFULL: u32 = 152;
pub const BSM_ERRNO_EPROCLIM: u32 = 190;
pub const BSM_ERRNO_EBADRPC: u32 = 191;
pub const BSM_ERRNO_ERPCMISMATCH: u32 = 192;
pub const BSM_ERRNO_EPROGUNAVAIL: u32 = 193;
pub const BSM_ERRNO_EPROGMISMATCH: u32 = 194;
pub const BSM_ERRNO_EPROCUNAVAIL: u32 = 195;
pub const BSM_ERRNO_EFTYPE: u32 = 196;
pub const BSM_ERRNO_EAUTH: u32 = 197;
pub const BSM_ERRNO_ENEEDAUTH: u32 = 198;
pub const BSM_ERRNO_ENOATTR: u32 = 199;
pub const BSM_ERRNO_EDOOFUS: u32 = 200;
pub const BSM_ERRNO_EJUSTRETURN: u32 = 201;
pub const BSM_ERRNO_ENOIOCTL: u32 = 202;
pub const BSM_ERRNO_EDIRIOCTL: u32 = 203;
pub const BSM_ERRNO_EPWROFF: u32 = 204;
pub const BSM_ERRNO_EDEVERR: u32 = 205;
pub const BSM_ERRNO_EBADEXEC: u32 = 206;
pub const BSM_ERRNO_EBADARCH: u32 = 207;
pub const BSM_ERRNO_ESHLIBVERS: u32 = 208;
pub const BSM_ERRNO_EBADMACHO: u32 = 209;
pub const BSM_ERRNO_EPOLICY: u32 = 210;
pub const BSM_ERRNO_EDOTDOT: u32 = 211;
pub const BSM_ERRNO_EUCLEAN: u32 = 212;
pub const BSM_ERRNO_ENOTNAM: u32 = 213;
pub const BSM_ERRNO_ENAVAIL: u32 = 214;
pub const BSM_ERRNO_EISNAM: u32 = 215;
pub const BSM_ERRNO_EREMOTEIO: u32 = 216;
pub const BSM_ERRNO_ENOMEDIUM: u32 = 217;
pub const BSM_ERRNO_EMEDIUMTYPE: u32 = 218;
pub const BSM_ERRNO_ENOKEY: u32 = 219;
pub const BSM_ERRNO_EKEYEXPIRED: u32 = 220;
pub const BSM_ERRNO_EKEYREVOKED: u32 = 221;
pub const BSM_ERRNO_EKEYREJECTED: u32 = 222;
pub const BSM_ERRNO_UNKNOWN: u32 = 250;
pub const BSM_F_DUPFD: u32 = 0;
pub const BSM_F_GETFD: u32 = 1;
pub const BSM_F_SETFD: u32 = 2;
pub const BSM_F_GETFL: u32 = 3;
pub const BSM_F_SETFL: u32 = 4;
pub const BSM_F_O_GETLK: u32 = 5;
pub const BSM_F_SETLK: u32 = 6;
pub const BSM_F_SETLKW: u32 = 7;
pub const BSM_F_CHKFL: u32 = 8;
pub const BSM_F_DUP2FD: u32 = 9;
pub const BSM_F_ALLOCSP: u32 = 10;
pub const BSM_F_FREESP: u32 = 11;
pub const BSM_F_ISSTREAM: u32 = 13;
pub const BSM_F_GETLK: u32 = 14;
pub const BSM_F_PRIV: u32 = 15;
pub const BSM_F_NPRIV: u32 = 16;
pub const BSM_F_QUOTACTL: u32 = 17;
pub const BSM_F_BLOCKS: u32 = 18;
pub const BSM_F_BLKSIZE: u32 = 19;
pub const BSM_F_GETOWN: u32 = 23;
pub const BSM_F_SETOWN: u32 = 24;
pub const BSM_F_REVOKE: u32 = 25;
pub const BSM_F_HASREMOTELOCKS: u32 = 26;
pub const BSM_F_FREESP64: u32 = 27;
pub const BSM_F_ALLOCSP64: u32 = 28;
pub const BSM_F_GETLK64: u32 = 33;
pub const BSM_F_SETLK64: u32 = 34;
pub const BSM_F_SETLKW64: u32 = 35;
pub const BSM_F_SHARE: u32 = 40;
pub const BSM_F_UNSHARE: u32 = 41;
pub const BSM_F_SETLK_NBMAND: u32 = 42;
pub const BSM_F_SHARE_NBMAND: u32 = 43;
pub const BSM_F_SETLK64_NBMAND: u32 = 44;
pub const BSM_F_GETXFL: u32 = 45;
pub const BSM_F_BADFD: u32 = 46;
pub const BSM_F_OGETLK: u32 = 107;
pub const BSM_F_OSETLK: u32 = 108;
pub const BSM_F_OSETLKW: u32 = 109;
pub const BSM_F_SETLK_REMOTE: u32 = 114;
pub const BSM_F_SETSIG: u32 = 210;
pub const BSM_F_GETSIG: u32 = 211;
pub const BSM_F_CHKCLEAN: u32 = 341;
pub const BSM_F_PREALLOCATE: u32 = 342;
pub const BSM_F_SETSIZE: u32 = 343;
pub const BSM_F_RDADVISE: u32 = 344;
pub const BSM_F_RDAHEAD: u32 = 345;
pub const BSM_F_NOCACHE: u32 = 348;
pub const BSM_F_LOG2PHYS: u32 = 349;
pub const BSM_F_GETPATH: u32 = 350;
pub const BSM_F_FULLFSYNC: u32 = 351;
pub const BSM_F_PATHPKG_CHECK: u32 = 352;
pub const BSM_F_FREEZE_FS: u32 = 353;
pub const BSM_F_THAW_FS: u32 = 354;
pub const BSM_F_GLOBAL_NOCACHE: u32 = 355;
pub const BSM_F_OPENFROM: u32 = 356;
pub const BSM_F_UNLINKFROM: u32 = 357;
pub const BSM_F_CHECK_OPENEVT: u32 = 358;
pub const BSM_F_ADDSIGS: u32 = 359;
pub const BSM_F_MARKDEPENDENCY: u32 = 360;
pub const BSM_F_BARRIERFSYNC: u32 = 361;
pub const BSM_F_PUNCHHOLE: u32 = 362;
pub const BSM_F_TRIM_ACTIVE_FILE: u32 = 363;
pub const BSM_F_SPECULATIVE_READ: u32 = 364;
pub const BSM_F_FS_SPECIFIC_0: u32 = 400;
pub const BSM_F_FS_SPECIFIC_1: u32 = 401;
pub const BSM_F_FS_SPECIFIC_2: u32 = 402;
pub const BSM_F_FS_SPECIFIC_3: u32 = 403;
pub const BSM_F_FS_SPECIFIC_4: u32 = 404;
pub const BSM_F_FS_SPECIFIC_5: u32 = 405;
pub const BSM_F_FS_SPECIFIC_6: u32 = 406;
pub const BSM_F_FS_SPECIFIC_7: u32 = 407;
pub const BSM_F_FS_SPECIFIC_8: u32 = 408;
pub const BSM_F_FS_SPECIFIC_9: u32 = 409;
pub const BSM_F_FS_SPECIFIC_10: u32 = 410;
pub const BSM_F_FS_SPECIFIC_11: u32 = 411;
pub const BSM_F_FS_SPECIFIC_12: u32 = 412;
pub const BSM_F_FS_SPECIFIC_13: u32 = 413;
pub const BSM_F_FS_SPECIFIC_14: u32 = 414;
pub const BSM_F_FS_SPECIFIC_15: u32 = 415;
pub const BSM_F_UNKNOWN: u32 = 65535;
pub const AUT_INVALID: u32 = 0;
pub const AUT_OTHER_FILE32: u32 = 17;
pub const AUT_OHEADER: u32 = 18;
pub const AUT_TRAILER: u32 = 19;
pub const AUT_HEADER32: u32 = 20;
pub const AUT_HEADER32_EX: u32 = 21;
pub const AUT_DATA: u32 = 33;
pub const AUT_IPC: u32 = 34;
pub const AUT_PATH: u32 = 35;
pub const AUT_SUBJECT32: u32 = 36;
pub const AUT_XATPATH: u32 = 37;
pub const AUT_PROCESS32: u32 = 38;
pub const AUT_RETURN32: u32 = 39;
pub const AUT_TEXT: u32 = 40;
pub const AUT_OPAQUE: u32 = 41;
pub const AUT_IN_ADDR: u32 = 42;
pub const AUT_IP: u32 = 43;
pub const AUT_IPORT: u32 = 44;
pub const AUT_ARG32: u32 = 45;
pub const AUT_SOCKET: u32 = 46;
pub const AUT_SEQ: u32 = 47;
pub const AUT_ACL: u32 = 48;
pub const AUT_ATTR: u32 = 49;
pub const AUT_IPC_PERM: u32 = 50;
pub const AUT_LABEL: u32 = 51;
pub const AUT_GROUPS: u32 = 52;
pub const AUT_ACE: u32 = 53;
pub const AUT_PRIV: u32 = 56;
pub const AUT_UPRIV: u32 = 57;
pub const AUT_LIAISON: u32 = 58;
pub const AUT_NEWGROUPS: u32 = 59;
pub const AUT_EXEC_ARGS: u32 = 60;
pub const AUT_EXEC_ENV: u32 = 61;
pub const AUT_ATTR32: u32 = 62;
pub const AUT_UNAUTH: u32 = 63;
pub const AUT_XATOM: u32 = 64;
pub const AUT_XOBJ: u32 = 65;
pub const AUT_XPROTO: u32 = 66;
pub const AUT_XSELECT: u32 = 67;
pub const AUT_XCOLORMAP: u32 = 68;
pub const AUT_XCURSOR: u32 = 69;
pub const AUT_XFONT: u32 = 70;
pub const AUT_XGC: u32 = 71;
pub const AUT_XPIXMAP: u32 = 72;
pub const AUT_XPROPERTY: u32 = 73;
pub const AUT_XWINDOW: u32 = 74;
pub const AUT_XCLIENT: u32 = 75;
pub const AUT_CMD: u32 = 81;
pub const AUT_EXIT: u32 = 82;
pub const AUT_ZONENAME: u32 = 96;
pub const AUT_HOST: u32 = 112;
pub const AUT_ARG64: u32 = 113;
pub const AUT_RETURN64: u32 = 114;
pub const AUT_ATTR64: u32 = 115;
pub const AUT_HEADER64: u32 = 116;
pub const AUT_SUBJECT64: u32 = 117;
pub const AUT_PROCESS64: u32 = 119;
pub const AUT_OTHER_FILE64: u32 = 120;
pub const AUT_HEADER64_EX: u32 = 121;
pub const AUT_SUBJECT32_EX: u32 = 122;
pub const AUT_PROCESS32_EX: u32 = 123;
pub const AUT_SUBJECT64_EX: u32 = 124;
pub const AUT_PROCESS64_EX: u32 = 125;
pub const AUT_IN_ADDR_EX: u32 = 126;
pub const AUT_SOCKET_EX: u32 = 127;
pub const AUT_HEADER: u32 = 20;
pub const AUT_ARG: u32 = 45;
pub const AUT_RETURN: u32 = 39;
pub const AUT_SUBJECT: u32 = 36;
pub const AUT_PROCESS: u32 = 38;
pub const AUT_OTHER_FILE: u32 = 17;
pub const AUT_SOCKINET32: u32 = 128;
pub const AUT_SOCKINET128: u32 = 129;
pub const AUT_SOCKUNIX: u32 = 130;
pub const AUT_IDENTITY: u32 = 237;
pub const AUT_KRB5_PRINCIPAL: u32 = 238;
pub const AUT_CERT_HASH: u32 = 239;
pub const AUP_BINARY: u32 = 0;
pub const AUP_OCTAL: u32 = 1;
pub const AUP_DECIMAL: u32 = 2;
pub const AUP_HEX: u32 = 3;
pub const AUP_STRING: u32 = 4;
pub const AUR_BYTE: u32 = 0;
pub const AUR_CHAR: u32 = 0;
pub const AUR_SHORT: u32 = 1;
pub const AUR_INT32: u32 = 2;
pub const AUR_INT: u32 = 2;
pub const AUR_INT64: u32 = 3;
pub const PAD_NOTATTR: u32 = 16384;
pub const PAD_FAILURE: u32 = 32768;
pub const AUDIT_MAX_GROUPS: u32 = 16;
pub const AUDIT_HEADER_VERSION_OLDDARWIN: u32 = 1;
pub const AUDIT_HEADER_VERSION_SOLARIS: u32 = 2;
pub const AUDIT_HEADER_VERSION_TSOL25: u32 = 3;
pub const AUDIT_HEADER_VERSION_TSOL: u32 = 4;
pub const AUDIT_HEADER_VERSION_OPENBSM10: u32 = 10;
pub const AUDIT_HEADER_VERSION_OPENBSM11: u32 = 11;
pub const AUDIT_HEADER_VERSION_OPENBSM: u32 = 11;
pub const AUT_TRAILER_MAGIC: u32 = 45317;
pub const AUDIT_MAX_ARGS: u32 = 128;
pub const AUDIT_MAX_ENV: u32 = 128;
pub const AUDIT_MAX_CERT_HASH: u32 = 32;
pub const AUDIT_MAX_KRB5_PRINCIPAL: u32 = 32;
pub const AU_PRS_USECACHE: u32 = 0;
pub const AU_PRS_REREAD: u32 = 1;
pub const AU_PRS_SUCCESS: u32 = 1;
pub const AU_PRS_FAILURE: u32 = 2;
pub const AU_PRS_BOTH: u32 = 3;
pub const AUDIT_EVENT_FILE: &[u8; 26usize] = b"/etc/security/audit_event\0";
pub const AUDIT_CLASS_FILE: &[u8; 26usize] = b"/etc/security/audit_class\0";
pub const AUDIT_CONTROL_FILE: &[u8; 28usize] = b"/etc/security/audit_control\0";
pub const AUDIT_USER_FILE: &[u8; 25usize] = b"/etc/security/audit_user\0";
pub const DIR_CONTROL_ENTRY: &[u8; 4usize] = b"dir\0";
pub const MINFREE_CONTROL_ENTRY: &[u8; 8usize] = b"minfree\0";
pub const FILESZ_CONTROL_ENTRY: &[u8; 7usize] = b"filesz\0";
pub const FLAGS_CONTROL_ENTRY: &[u8; 6usize] = b"flags\0";
pub const NA_CONTROL_ENTRY: &[u8; 8usize] = b"naflags\0";
pub const POLICY_CONTROL_ENTRY: &[u8; 7usize] = b"policy\0";
pub const AUDIT_HOST_CONTROL_ENTRY: &[u8; 5usize] = b"host\0";
pub const EXPIRE_AFTER_CONTROL_ENTRY: &[u8; 13usize] = b"expire-after\0";
pub const MEMBER_SET_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 23usize] = b"member-set-sflags-mask\0";
pub const MEMBER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 25usize] = b"member-clear-sflags-mask\0";
pub const SUPERUSER_SET_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 26usize] = b"superuser-set-sflags-mask\0";
pub const SUPERUSER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 28usize] =
    b"superuser-clear-sflags-mask\0";
pub const AU_CLASS_NAME_MAX: u32 = 8;
pub const AU_CLASS_DESC_MAX: u32 = 72;
pub const AU_EVENT_NAME_MAX: u32 = 30;
pub const AU_EVENT_DESC_MAX: u32 = 50;
pub const AU_USER_NAME_MAX: u32 = 50;
pub const AU_LINE_MAX: u32 = 256;
pub const MAX_AUDITSTRING_LEN: u32 = 256;
pub const BSM_TEXTBUFSZ: u32 = 256;
pub const AU_TO_NO_WRITE: u32 = 0;
pub const AU_TO_WRITE: u32 = 1;
pub const AU_OFLAG_NONE: u32 = 0;
pub const AU_OFLAG_RAW: u32 = 1;
pub const AU_OFLAG_SHORT: u32 = 2;
pub const AU_OFLAG_XML: u32 = 4;
pub const AU_OFLAG_NORESOLVE: u32 = 8;
pub const __BSM_INTERNAL_NOTIFY_KEY: &[u8; 23usize] = b"com.apple.audit.change\0";
pub const AUDIT_OFF: u32 = 2;
pub const AUDIT_ON: u32 = 1;
pub const AUDIT_FILTER_SUCCESS: u32 = 0;
pub const AUDIT_FILTER_FAILURE: i32 = -1;
pub const AUDIT_FILTER_ATTACH_STRING: &[u8; 20usize] = b"audit_filter_attach\0";
pub const AUDIT_FILTER_REINIT_STRING: &[u8; 20usize] = b"audit_filter_reinit\0";
pub const AUDIT_FILTER_RECORD_STRING: &[u8; 20usize] = b"audit_filter_record\0";
pub const AUDIT_FILTER_RAWRECORD_STRING: &[u8; 23usize] = b"audit_filter_rawrecord\0";
pub const AUDIT_FILTER_DETACH_STRING: &[u8; 20usize] = b"audit_filter_detach\0";
pub const AUDIT_HEADER_SIZE: u32 = 18;
pub const AUDIT_TRAILER_SIZE: u32 = 7;
pub const MAX_AUDIT_IDENTITY_SIZE: u32 = 179;
pub const AUE_NULL: u32 = 0;
pub const AUE_EXIT: u32 = 1;
pub const AUE_FORK: u32 = 2;
pub const AUE_FORKALL: u32 = 2;
pub const AUE_OPEN: u32 = 3;
pub const AUE_CREAT: u32 = 4;
pub const AUE_LINK: u32 = 5;
pub const AUE_UNLINK: u32 = 6;
pub const AUE_DELETE: u32 = 6;
pub const AUE_EXEC: u32 = 7;
pub const AUE_CHDIR: u32 = 8;
pub const AUE_MKNOD: u32 = 9;
pub const AUE_CHMOD: u32 = 10;
pub const AUE_CHOWN: u32 = 11;
pub const AUE_UMOUNT: u32 = 12;
pub const AUE_JUNK: u32 = 13;
pub const AUE_ACCESS: u32 = 14;
pub const AUE_KILL: u32 = 15;
pub const AUE_STAT: u32 = 16;
pub const AUE_LSTAT: u32 = 17;
pub const AUE_ACCT: u32 = 18;
pub const AUE_MCTL: u32 = 19;
pub const AUE_REBOOT: u32 = 20;
pub const AUE_SYMLINK: u32 = 21;
pub const AUE_READLINK: u32 = 22;
pub const AUE_EXECVE: u32 = 23;
pub const AUE_CHROOT: u32 = 24;
pub const AUE_VFORK: u32 = 25;
pub const AUE_SETGROUPS: u32 = 26;
pub const AUE_SETPGRP: u32 = 27;
pub const AUE_SWAPON: u32 = 28;
pub const AUE_SETHOSTNAME: u32 = 29;
pub const AUE_FCNTL: u32 = 30;
pub const AUE_SETPRIORITY: u32 = 31;
pub const AUE_CONNECT: u32 = 32;
pub const AUE_ACCEPT: u32 = 33;
pub const AUE_BIND: u32 = 34;
pub const AUE_SETSOCKOPT: u32 = 35;
pub const AUE_VTRACE: u32 = 36;
pub const AUE_SETTIMEOFDAY: u32 = 37;
pub const AUE_FCHOWN: u32 = 38;
pub const AUE_FCHMOD: u32 = 39;
pub const AUE_SETREUID: u32 = 40;
pub const AUE_SETREGID: u32 = 41;
pub const AUE_RENAME: u32 = 42;
pub const AUE_TRUNCATE: u32 = 43;
pub const AUE_FTRUNCATE: u32 = 44;
pub const AUE_FLOCK: u32 = 45;
pub const AUE_SHUTDOWN: u32 = 46;
pub const AUE_MKDIR: u32 = 47;
pub const AUE_RMDIR: u32 = 48;
pub const AUE_UTIMES: u32 = 49;
pub const AUE_ADJTIME: u32 = 50;
pub const AUE_SETRLIMIT: u32 = 51;
pub const AUE_KILLPG: u32 = 52;
pub const AUE_NFS_SVC: u32 = 53;
pub const AUE_STATFS: u32 = 54;
pub const AUE_FSTATFS: u32 = 55;
pub const AUE_UNMOUNT: u32 = 56;
pub const AUE_ASYNC_DAEMON: u32 = 57;
pub const AUE_NFS_GETFH: u32 = 58;
pub const AUE_SETDOMAINNAME: u32 = 59;
pub const AUE_QUOTACTL: u32 = 60;
pub const AUE_EXPORTFS: u32 = 61;
pub const AUE_MOUNT: u32 = 62;
pub const AUE_SEMSYS: u32 = 63;
pub const AUE_MSGSYS: u32 = 64;
pub const AUE_SHMSYS: u32 = 65;
pub const AUE_BSMSYS: u32 = 66;
pub const AUE_RFSSYS: u32 = 67;
pub const AUE_FCHDIR: u32 = 68;
pub const AUE_FCHROOT: u32 = 69;
pub const AUE_VPIXSYS: u32 = 70;
pub const AUE_PATHCONF: u32 = 71;
pub const AUE_OPEN_R: u32 = 72;
pub const AUE_OPEN_RC: u32 = 73;
pub const AUE_OPEN_RT: u32 = 74;
pub const AUE_OPEN_RTC: u32 = 75;
pub const AUE_OPEN_W: u32 = 76;
pub const AUE_OPEN_WC: u32 = 77;
pub const AUE_OPEN_WT: u32 = 78;
pub const AUE_OPEN_WTC: u32 = 79;
pub const AUE_OPEN_RW: u32 = 80;
pub const AUE_OPEN_RWC: u32 = 81;
pub const AUE_OPEN_RWT: u32 = 82;
pub const AUE_OPEN_RWTC: u32 = 83;
pub const AUE_MSGCTL: u32 = 84;
pub const AUE_MSGCTL_RMID: u32 = 85;
pub const AUE_MSGCTL_SET: u32 = 86;
pub const AUE_MSGCTL_STAT: u32 = 87;
pub const AUE_MSGGET: u32 = 88;
pub const AUE_MSGRCV: u32 = 89;
pub const AUE_MSGSND: u32 = 90;
pub const AUE_SHMCTL: u32 = 91;
pub const AUE_SHMCTL_RMID: u32 = 92;
pub const AUE_SHMCTL_SET: u32 = 93;
pub const AUE_SHMCTL_STAT: u32 = 94;
pub const AUE_SHMGET: u32 = 95;
pub const AUE_SHMAT: u32 = 96;
pub const AUE_SHMDT: u32 = 97;
pub const AUE_SEMCTL: u32 = 98;
pub const AUE_SEMCTL_RMID: u32 = 99;
pub const AUE_SEMCTL_SET: u32 = 100;
pub const AUE_SEMCTL_STAT: u32 = 101;
pub const AUE_SEMCTL_GETNCNT: u32 = 102;
pub const AUE_SEMCTL_GETPID: u32 = 103;
pub const AUE_SEMCTL_GETVAL: u32 = 104;
pub const AUE_SEMCTL_GETALL: u32 = 105;
pub const AUE_SEMCTL_GETZCNT: u32 = 106;
pub const AUE_SEMCTL_SETVAL: u32 = 107;
pub const AUE_SEMCTL_SETALL: u32 = 108;
pub const AUE_SEMGET: u32 = 109;
pub const AUE_SEMOP: u32 = 110;
pub const AUE_CORE: u32 = 111;
pub const AUE_CLOSE: u32 = 112;
pub const AUE_SYSTEMBOOT: u32 = 113;
pub const AUE_ASYNC_DAEMON_EXIT: u32 = 114;
pub const AUE_NFSSVC_EXIT: u32 = 115;
pub const AUE_WRITEL: u32 = 128;
pub const AUE_WRITEVL: u32 = 129;
pub const AUE_GETAUID: u32 = 130;
pub const AUE_SETAUID: u32 = 131;
pub const AUE_GETAUDIT: u32 = 132;
pub const AUE_SETAUDIT: u32 = 133;
pub const AUE_GETUSERAUDIT: u32 = 134;
pub const AUE_SETUSERAUDIT: u32 = 135;
pub const AUE_AUDITSVC: u32 = 136;
pub const AUE_AUDITUSER: u32 = 137;
pub const AUE_AUDITON: u32 = 138;
pub const AUE_AUDITON_GTERMID: u32 = 139;
pub const AUE_AUDITON_STERMID: u32 = 140;
pub const AUE_AUDITON_GPOLICY: u32 = 141;
pub const AUE_AUDITON_SPOLICY: u32 = 142;
pub const AUE_AUDITON_GQCTRL: u32 = 145;
pub const AUE_AUDITON_SQCTRL: u32 = 146;
pub const AUE_GETKERNSTATE: u32 = 147;
pub const AUE_SETKERNSTATE: u32 = 148;
pub const AUE_GETPORTAUDIT: u32 = 149;
pub const AUE_AUDITSTAT: u32 = 150;
pub const AUE_REVOKE: u32 = 151;
pub const AUE_MAC: u32 = 152;
pub const AUE_ENTERPROM: u32 = 153;
pub const AUE_EXITPROM: u32 = 154;
pub const AUE_IFLOAT: u32 = 155;
pub const AUE_PFLOAT: u32 = 156;
pub const AUE_UPRIV: u32 = 157;
pub const AUE_IOCTL: u32 = 158;
pub const AUE_SOCKET: u32 = 183;
pub const AUE_SENDTO: u32 = 184;
pub const AUE_PIPE: u32 = 185;
pub const AUE_SOCKETPAIR: u32 = 186;
pub const AUE_SEND: u32 = 187;
pub const AUE_SENDMSG: u32 = 188;
pub const AUE_RECV: u32 = 189;
pub const AUE_RECVMSG: u32 = 190;
pub const AUE_RECVFROM: u32 = 191;
pub const AUE_READ: u32 = 192;
pub const AUE_GETDENTS: u32 = 193;
pub const AUE_LSEEK: u32 = 194;
pub const AUE_WRITE: u32 = 195;
pub const AUE_WRITEV: u32 = 196;
pub const AUE_NFS: u32 = 197;
pub const AUE_READV: u32 = 198;
pub const AUE_OSTAT: u32 = 199;
pub const AUE_SETUID: u32 = 200;
pub const AUE_STIME: u32 = 201;
pub const AUE_UTIME: u32 = 202;
pub const AUE_NICE: u32 = 203;
pub const AUE_OSETPGRP: u32 = 204;
pub const AUE_SETGID: u32 = 205;
pub const AUE_READL: u32 = 206;
pub const AUE_READVL: u32 = 207;
pub const AUE_FSTAT: u32 = 208;
pub const AUE_DUP2: u32 = 209;
pub const AUE_MMAP: u32 = 210;
pub const AUE_AUDIT: u32 = 211;
pub const AUE_PRIOCNTLSYS: u32 = 212;
pub const AUE_MUNMAP: u32 = 213;
pub const AUE_SETEGID: u32 = 214;
pub const AUE_SETEUID: u32 = 215;
pub const AUE_PUTMSG: u32 = 216;
pub const AUE_GETMSG: u32 = 217;
pub const AUE_PUTPMSG: u32 = 218;
pub const AUE_GETPMSG: u32 = 219;
pub const AUE_AUDITSYS: u32 = 220;
pub const AUE_AUDITON_GETKMASK: u32 = 221;
pub const AUE_AUDITON_SETKMASK: u32 = 222;
pub const AUE_AUDITON_GETCWD: u32 = 223;
pub const AUE_AUDITON_GETCAR: u32 = 224;
pub const AUE_AUDITON_GETSTAT: u32 = 225;
pub const AUE_AUDITON_SETSTAT: u32 = 226;
pub const AUE_AUDITON_SETUMASK: u32 = 227;
pub const AUE_AUDITON_SETSMASK: u32 = 228;
pub const AUE_AUDITON_GETCOND: u32 = 229;
pub const AUE_AUDITON_SETCOND: u32 = 230;
pub const AUE_AUDITON_GETCLASS: u32 = 231;
pub const AUE_AUDITON_SETCLASS: u32 = 232;
pub const AUE_FUSERS: u32 = 233;
pub const AUE_STATVFS: u32 = 234;
pub const AUE_XSTAT: u32 = 235;
pub const AUE_LXSTAT: u32 = 236;
pub const AUE_LCHOWN: u32 = 237;
pub const AUE_MEMCNTL: u32 = 238;
pub const AUE_SYSINFO: u32 = 239;
pub const AUE_XMKNOD: u32 = 240;
pub const AUE_FORK1: u32 = 241;
pub const AUE_MODCTL: u32 = 242;
pub const AUE_MODLOAD: u32 = 243;
pub const AUE_MODUNLOAD: u32 = 244;
pub const AUE_MODCONFIG: u32 = 245;
pub const AUE_MODADDMAJ: u32 = 246;
pub const AUE_SOCKACCEPT: u32 = 247;
pub const AUE_SOCKCONNECT: u32 = 248;
pub const AUE_SOCKSEND: u32 = 249;
pub const AUE_SOCKRECEIVE: u32 = 250;
pub const AUE_ACLSET: u32 = 251;
pub const AUE_FACLSET: u32 = 252;
pub const AUE_DOORFS: u32 = 253;
pub const AUE_DOORFS_DOOR_CALL: u32 = 254;
pub const AUE_DOORFS_DOOR_RETURN: u32 = 255;
pub const AUE_DOORFS_DOOR_CREATE: u32 = 256;
pub const AUE_DOORFS_DOOR_REVOKE: u32 = 257;
pub const AUE_DOORFS_DOOR_INFO: u32 = 258;
pub const AUE_DOORFS_DOOR_CRED: u32 = 259;
pub const AUE_DOORFS_DOOR_BIND: u32 = 260;
pub const AUE_DOORFS_DOOR_UNBIND: u32 = 261;
pub const AUE_P_ONLINE: u32 = 262;
pub const AUE_PROCESSOR_BIND: u32 = 263;
pub const AUE_INST_SYNC: u32 = 264;
pub const AUE_SOCKCONFIG: u32 = 265;
pub const AUE_SETAUDIT_ADDR: u32 = 266;
pub const AUE_GETAUDIT_ADDR: u32 = 267;
pub const AUE_UMOUNT2: u32 = 268;
pub const AUE_FSAT: u32 = 269;
pub const AUE_OPENAT_R: u32 = 270;
pub const AUE_OPENAT_RC: u32 = 271;
pub const AUE_OPENAT_RT: u32 = 272;
pub const AUE_OPENAT_RTC: u32 = 273;
pub const AUE_OPENAT_W: u32 = 274;
pub const AUE_OPENAT_WC: u32 = 275;
pub const AUE_OPENAT_WT: u32 = 276;
pub const AUE_OPENAT_WTC: u32 = 277;
pub const AUE_OPENAT_RW: u32 = 278;
pub const AUE_OPENAT_RWC: u32 = 279;
pub const AUE_OPENAT_RWT: u32 = 280;
pub const AUE_OPENAT_RWTC: u32 = 281;
pub const AUE_RENAMEAT: u32 = 282;
pub const AUE_FSTATAT: u32 = 283;
pub const AUE_FCHOWNAT: u32 = 284;
pub const AUE_FUTIMESAT: u32 = 285;
pub const AUE_UNLINKAT: u32 = 286;
pub const AUE_CLOCK_SETTIME: u32 = 287;
pub const AUE_NTP_ADJTIME: u32 = 288;
pub const AUE_SETPPRIV: u32 = 289;
pub const AUE_MODDEVPLCY: u32 = 290;
pub const AUE_MODADDPRIV: u32 = 291;
pub const AUE_CRYPTOADM: u32 = 292;
pub const AUE_CONFIGKSSL: u32 = 293;
pub const AUE_BRANDSYS: u32 = 294;
pub const AUE_PF_POLICY_ADDRULE: u32 = 295;
pub const AUE_PF_POLICY_DELRULE: u32 = 296;
pub const AUE_PF_POLICY_CLONE: u32 = 297;
pub const AUE_PF_POLICY_FLIP: u32 = 298;
pub const AUE_PF_POLICY_FLUSH: u32 = 299;
pub const AUE_PF_POLICY_ALGS: u32 = 300;
pub const AUE_PORTFS: u32 = 301;
pub const AUE_DARWIN_GETFSSTAT: u32 = 301;
pub const AUE_DARWIN_PTRACE: u32 = 302;
pub const AUE_DARWIN_CHFLAGS: u32 = 303;
pub const AUE_DARWIN_FCHFLAGS: u32 = 304;
pub const AUE_DARWIN_PROFILE: u32 = 305;
pub const AUE_DARWIN_KTRACE: u32 = 306;
pub const AUE_DARWIN_SETLOGIN: u32 = 307;
pub const AUE_DARWIN_REBOOT: u32 = 308;
pub const AUE_DARWIN_REVOKE: u32 = 309;
pub const AUE_DARWIN_UMASK: u32 = 310;
pub const AUE_DARWIN_MPROTECT: u32 = 311;
pub const AUE_DARWIN_SETPRIORITY: u32 = 312;
pub const AUE_DARWIN_SETTIMEOFDAY: u32 = 313;
pub const AUE_DARWIN_FLOCK: u32 = 314;
pub const AUE_DARWIN_MKFIFO: u32 = 315;
pub const AUE_DARWIN_POLL: u32 = 316;
pub const AUE_DARWIN_SOCKETPAIR: u32 = 317;
pub const AUE_DARWIN_FUTIMES: u32 = 318;
pub const AUE_DARWIN_SETSID: u32 = 319;
pub const AUE_DARWIN_SETPRIVEXEC: u32 = 320;
pub const AUE_DARWIN_NFSSVC: u32 = 321;
pub const AUE_DARWIN_GETFH: u32 = 322;
pub const AUE_DARWIN_QUOTACTL: u32 = 323;
pub const AUE_DARWIN_ADDPROFILE: u32 = 324;
pub const AUE_DARWIN_KDEBUGTRACE: u32 = 325;
pub const AUE_DARWIN_FSTAT: u32 = 326;
pub const AUE_DARWIN_FPATHCONF: u32 = 327;
pub const AUE_DARWIN_GETDIRENTRIES: u32 = 328;
pub const AUE_DARWIN_TRUNCATE: u32 = 329;
pub const AUE_DARWIN_FTRUNCATE: u32 = 330;
pub const AUE_DARWIN_SYSCTL: u32 = 331;
pub const AUE_DARWIN_MLOCK: u32 = 332;
pub const AUE_DARWIN_MUNLOCK: u32 = 333;
pub const AUE_DARWIN_UNDELETE: u32 = 334;
pub const AUE_DARWIN_GETATTRLIST: u32 = 335;
pub const AUE_DARWIN_SETATTRLIST: u32 = 336;
pub const AUE_DARWIN_GETDIRENTRIESATTR: u32 = 337;
pub const AUE_DARWIN_EXCHANGEDATA: u32 = 338;
pub const AUE_DARWIN_SEARCHFS: u32 = 339;
pub const AUE_DARWIN_MINHERIT: u32 = 340;
pub const AUE_DARWIN_SEMCONFIG: u32 = 341;
pub const AUE_DARWIN_SEMOPEN: u32 = 342;
pub const AUE_DARWIN_SEMCLOSE: u32 = 343;
pub const AUE_DARWIN_SEMUNLINK: u32 = 344;
pub const AUE_DARWIN_SHMOPEN: u32 = 345;
pub const AUE_DARWIN_SHMUNLINK: u32 = 346;
pub const AUE_DARWIN_LOADSHFILE: u32 = 347;
pub const AUE_DARWIN_RESETSHFILE: u32 = 348;
pub const AUE_DARWIN_NEWSYSTEMSHREG: u32 = 349;
pub const AUE_DARWIN_PTHREADKILL: u32 = 350;
pub const AUE_DARWIN_PTHREADSIGMASK: u32 = 351;
pub const AUE_DARWIN_AUDITCTL: u32 = 352;
pub const AUE_DARWIN_RFORK: u32 = 353;
pub const AUE_DARWIN_LCHMOD: u32 = 354;
pub const AUE_DARWIN_SWAPOFF: u32 = 355;
pub const AUE_DARWIN_INITPROCESS: u32 = 356;
pub const AUE_DARWIN_MAPFD: u32 = 357;
pub const AUE_DARWIN_TASKFORPID: u32 = 358;
pub const AUE_DARWIN_PIDFORTASK: u32 = 359;
pub const AUE_DARWIN_SYSCTL_NONADMIN: u32 = 360;
pub const AUE_DARWIN_COPYFILE: u32 = 361;
pub const AUE_TRACKERACTION: u32 = 362;
pub const AUE_GETFSSTAT: u32 = 43001;
pub const AUE_PTRACE: u32 = 43002;
pub const AUE_CHFLAGS: u32 = 43003;
pub const AUE_FCHFLAGS: u32 = 43004;
pub const AUE_PROFILE: u32 = 43005;
pub const AUE_KTRACE: u32 = 43006;
pub const AUE_SETLOGIN: u32 = 43007;
pub const AUE_OPENBSM_REVOKE: u32 = 43008;
pub const AUE_UMASK: u32 = 43009;
pub const AUE_MPROTECT: u32 = 43010;
pub const AUE_MKFIFO: u32 = 43011;
pub const AUE_POLL: u32 = 43012;
pub const AUE_FUTIMES: u32 = 43013;
pub const AUE_SETSID: u32 = 43014;
pub const AUE_SETPRIVEXEC: u32 = 43015;
pub const AUE_ADDPROFILE: u32 = 43016;
pub const AUE_KDEBUGTRACE: u32 = 43017;
pub const AUE_KDBUGTRACE: u32 = 43017;
pub const AUE_OPENBSM_FSTAT: u32 = 43018;
pub const AUE_FPATHCONF: u32 = 43019;
pub const AUE_GETDIRENTRIES: u32 = 43020;
pub const AUE_SYSCTL: u32 = 43021;
pub const AUE_MLOCK: u32 = 43022;
pub const AUE_MUNLOCK: u32 = 43023;
pub const AUE_UNDELETE: u32 = 43024;
pub const AUE_GETATTRLIST: u32 = 43025;
pub const AUE_SETATTRLIST: u32 = 43026;
pub const AUE_GETDIRENTRIESATTR: u32 = 43027;
pub const AUE_EXCHANGEDATA: u32 = 43028;
pub const AUE_SEARCHFS: u32 = 43029;
pub const AUE_MINHERIT: u32 = 43030;
pub const AUE_SEMCONFIG: u32 = 43031;
pub const AUE_SEMOPEN: u32 = 43032;
pub const AUE_SEMCLOSE: u32 = 43033;
pub const AUE_SEMUNLINK: u32 = 43034;
pub const AUE_SHMOPEN: u32 = 43035;
pub const AUE_SHMUNLINK: u32 = 43036;
pub const AUE_LOADSHFILE: u32 = 43037;
pub const AUE_RESETSHFILE: u32 = 43038;
pub const AUE_NEWSYSTEMSHREG: u32 = 43039;
pub const AUE_PTHREADKILL: u32 = 43040;
pub const AUE_PTHREADSIGMASK: u32 = 43041;
pub const AUE_AUDITCTL: u32 = 43042;
pub const AUE_RFORK: u32 = 43043;
pub const AUE_LCHMOD: u32 = 43044;
pub const AUE_SWAPOFF: u32 = 43045;
pub const AUE_INITPROCESS: u32 = 43046;
pub const AUE_MAPFD: u32 = 43047;
pub const AUE_TASKFORPID: u32 = 43048;
pub const AUE_PIDFORTASK: u32 = 43049;
pub const AUE_SYSCTL_NONADMIN: u32 = 43050;
pub const AUE_COPYFILE: u32 = 43051;
pub const AUE_LUTIMES: u32 = 43052;
pub const AUE_LCHFLAGS: u32 = 43053;
pub const AUE_SENDFILE: u32 = 43054;
pub const AUE_USELIB: u32 = 43055;
pub const AUE_GETRESUID: u32 = 43056;
pub const AUE_SETRESUID: u32 = 43057;
pub const AUE_GETRESGID: u32 = 43058;
pub const AUE_SETRESGID: u32 = 43059;
pub const AUE_WAIT4: u32 = 43060;
pub const AUE_LGETFH: u32 = 43061;
pub const AUE_FHSTATFS: u32 = 43062;
pub const AUE_FHOPEN: u32 = 43063;
pub const AUE_FHSTAT: u32 = 43064;
pub const AUE_JAIL: u32 = 43065;
pub const AUE_EACCESS: u32 = 43066;
pub const AUE_KQUEUE: u32 = 43067;
pub const AUE_KEVENT: u32 = 43068;
pub const AUE_FSYNC: u32 = 43069;
pub const AUE_NMOUNT: u32 = 43070;
pub const AUE_BDFLUSH: u32 = 43071;
pub const AUE_SETFSUID: u32 = 43072;
pub const AUE_SETFSGID: u32 = 43073;
pub const AUE_PERSONALITY: u32 = 43074;
pub const AUE_SCHED_GETSCHEDULER: u32 = 43075;
pub const AUE_SCHED_SETSCHEDULER: u32 = 43076;
pub const AUE_PRCTL: u32 = 43077;
pub const AUE_GETCWD: u32 = 43078;
pub const AUE_CAPGET: u32 = 43079;
pub const AUE_CAPSET: u32 = 43080;
pub const AUE_PIVOT_ROOT: u32 = 43081;
pub const AUE_RTPRIO: u32 = 43082;
pub const AUE_SCHED_GETPARAM: u32 = 43083;
pub const AUE_SCHED_SETPARAM: u32 = 43084;
pub const AUE_SCHED_GET_PRIORITY_MAX: u32 = 43085;
pub const AUE_SCHED_GET_PRIORITY_MIN: u32 = 43086;
pub const AUE_SCHED_RR_GET_INTERVAL: u32 = 43087;
pub const AUE_ACL_GET_FILE: u32 = 43088;
pub const AUE_ACL_SET_FILE: u32 = 43089;
pub const AUE_ACL_GET_FD: u32 = 43090;
pub const AUE_ACL_SET_FD: u32 = 43091;
pub const AUE_ACL_DELETE_FILE: u32 = 43092;
pub const AUE_ACL_DELETE_FD: u32 = 43093;
pub const AUE_ACL_CHECK_FILE: u32 = 43094;
pub const AUE_ACL_CHECK_FD: u32 = 43095;
pub const AUE_ACL_GET_LINK: u32 = 43096;
pub const AUE_ACL_SET_LINK: u32 = 43097;
pub const AUE_ACL_DELETE_LINK: u32 = 43098;
pub const AUE_ACL_CHECK_LINK: u32 = 43099;
pub const AUE_SYSARCH: u32 = 43100;
pub const AUE_EXTATTRCTL: u32 = 43101;
pub const AUE_EXTATTR_GET_FILE: u32 = 43102;
pub const AUE_EXTATTR_SET_FILE: u32 = 43103;
pub const AUE_EXTATTR_LIST_FILE: u32 = 43104;
pub const AUE_EXTATTR_DELETE_FILE: u32 = 43105;
pub const AUE_EXTATTR_GET_FD: u32 = 43106;
pub const AUE_EXTATTR_SET_FD: u32 = 43107;
pub const AUE_EXTATTR_LIST_FD: u32 = 43108;
pub const AUE_EXTATTR_DELETE_FD: u32 = 43109;
pub const AUE_EXTATTR_GET_LINK: u32 = 43110;
pub const AUE_EXTATTR_SET_LINK: u32 = 43111;
pub const AUE_EXTATTR_LIST_LINK: u32 = 43112;
pub const AUE_EXTATTR_DELETE_LINK: u32 = 43113;
pub const AUE_KENV: u32 = 43114;
pub const AUE_JAIL_ATTACH: u32 = 43115;
pub const AUE_SYSCTL_WRITE: u32 = 43116;
pub const AUE_IOPERM: u32 = 43117;
pub const AUE_READDIR: u32 = 43118;
pub const AUE_IOPL: u32 = 43119;
pub const AUE_VM86: u32 = 43120;
pub const AUE_MAC_GET_PROC: u32 = 43121;
pub const AUE_MAC_SET_PROC: u32 = 43122;
pub const AUE_MAC_GET_FD: u32 = 43123;
pub const AUE_MAC_GET_FILE: u32 = 43124;
pub const AUE_MAC_SET_FD: u32 = 43125;
pub const AUE_MAC_SET_FILE: u32 = 43126;
pub const AUE_MAC_SYSCALL: u32 = 43127;
pub const AUE_MAC_GET_PID: u32 = 43128;
pub const AUE_MAC_GET_LINK: u32 = 43129;
pub const AUE_MAC_SET_LINK: u32 = 43130;
pub const AUE_MAC_EXECVE: u32 = 43131;
pub const AUE_GETPATH_FROMFD: u32 = 43132;
pub const AUE_GETPATH_FROMADDR: u32 = 43133;
pub const AUE_MQ_OPEN: u32 = 43134;
pub const AUE_MQ_SETATTR: u32 = 43135;
pub const AUE_MQ_TIMEDRECEIVE: u32 = 43136;
pub const AUE_MQ_TIMEDSEND: u32 = 43137;
pub const AUE_MQ_NOTIFY: u32 = 43138;
pub const AUE_MQ_UNLINK: u32 = 43139;
pub const AUE_LISTEN: u32 = 43140;
pub const AUE_MLOCKALL: u32 = 43141;
pub const AUE_MUNLOCKALL: u32 = 43142;
pub const AUE_CLOSEFROM: u32 = 43143;
pub const AUE_FEXECVE: u32 = 43144;
pub const AUE_FACCESSAT: u32 = 43145;
pub const AUE_FCHMODAT: u32 = 43146;
pub const AUE_LINKAT: u32 = 43147;
pub const AUE_MKDIRAT: u32 = 43148;
pub const AUE_MKFIFOAT: u32 = 43149;
pub const AUE_MKNODAT: u32 = 43150;
pub const AUE_READLINKAT: u32 = 43151;
pub const AUE_SYMLINKAT: u32 = 43152;
pub const AUE_MAC_GETFSSTAT: u32 = 43153;
pub const AUE_MAC_GET_MOUNT: u32 = 43154;
pub const AUE_MAC_GET_LCID: u32 = 43155;
pub const AUE_MAC_GET_LCTX: u32 = 43156;
pub const AUE_MAC_SET_LCTX: u32 = 43157;
pub const AUE_MAC_MOUNT: u32 = 43158;
pub const AUE_GETLCID: u32 = 43159;
pub const AUE_SETLCID: u32 = 43160;
pub const AUE_TASKNAMEFORPID: u32 = 43161;
pub const AUE_ACCESS_EXTENDED: u32 = 43162;
pub const AUE_CHMOD_EXTENDED: u32 = 43163;
pub const AUE_FCHMOD_EXTENDED: u32 = 43164;
pub const AUE_FSTAT_EXTENDED: u32 = 43165;
pub const AUE_LSTAT_EXTENDED: u32 = 43166;
pub const AUE_MKDIR_EXTENDED: u32 = 43167;
pub const AUE_MKFIFO_EXTENDED: u32 = 43168;
pub const AUE_OPEN_EXTENDED: u32 = 43169;
pub const AUE_OPEN_EXTENDED_R: u32 = 43170;
pub const AUE_OPEN_EXTENDED_RC: u32 = 43171;
pub const AUE_OPEN_EXTENDED_RT: u32 = 43172;
pub const AUE_OPEN_EXTENDED_RTC: u32 = 43173;
pub const AUE_OPEN_EXTENDED_W: u32 = 43174;
pub const AUE_OPEN_EXTENDED_WC: u32 = 43175;
pub const AUE_OPEN_EXTENDED_WT: u32 = 43176;
pub const AUE_OPEN_EXTENDED_WTC: u32 = 43177;
pub const AUE_OPEN_EXTENDED_RW: u32 = 43178;
pub const AUE_OPEN_EXTENDED_RWC: u32 = 43179;
pub const AUE_OPEN_EXTENDED_RWT: u32 = 43180;
pub const AUE_OPEN_EXTENDED_RWTC: u32 = 43181;
pub const AUE_STAT_EXTENDED: u32 = 43182;
pub const AUE_UMASK_EXTENDED: u32 = 43183;
pub const AUE_OPENAT: u32 = 43184;
pub const AUE_POSIX_OPENPT: u32 = 43185;
pub const AUE_CAP_NEW: u32 = 43186;
pub const AUE_CAP_GETRIGHTS: u32 = 43187;
pub const AUE_CAP_ENTER: u32 = 43188;
pub const AUE_CAP_GETMODE: u32 = 43189;
pub const AUE_POSIX_SPAWN: u32 = 43190;
pub const AUE_FSGETPATH: u32 = 43191;
pub const AUE_PREAD: u32 = 43192;
pub const AUE_PWRITE: u32 = 43193;
pub const AUE_FSCTL: u32 = 43194;
pub const AUE_FFSCTL: u32 = 43195;
pub const AUE_LPATHCONF: u32 = 43196;
pub const AUE_PDFORK: u32 = 43197;
pub const AUE_PDKILL: u32 = 43198;
pub const AUE_PDGETPID: u32 = 43199;
pub const AUE_PDWAIT: u32 = 43200;
pub const AUE_GETATTRLISTBULK: u32 = 43201;
pub const AUE_GETATTRLISTAT: u32 = 43202;
pub const AUE_OPENBYID: u32 = 43203;
pub const AUE_OPENBYID_R: u32 = 43204;
pub const AUE_OPENBYID_RT: u32 = 43205;
pub const AUE_OPENBYID_W: u32 = 43206;
pub const AUE_OPENBYID_WT: u32 = 43207;
pub const AUE_OPENBYID_RW: u32 = 43208;
pub const AUE_OPENBYID_RWT: u32 = 43209;
pub const AUE_CLONEFILEAT: u32 = 43210;
pub const AUE_FCLONEFILEAT: u32 = 43211;
pub const AUE_SETATTRLISTAT: u32 = 43212;
pub const AUE_FMOUNT: u32 = 43213;
pub const AUE_FSGETPATH_EXTENDED: u32 = 43214;
pub const AUE_DBGPORTFORPID: u32 = 43215;
pub const AUE_PREADV: u32 = 43216;
pub const AUE_PWRITEV: u32 = 43217;
pub const AUE_FREADLINK: u32 = 43218;
pub const AUE_SESSION_START: u32 = 44901;
pub const AUE_SESSION_UPDATE: u32 = 44902;
pub const AUE_SESSION_END: u32 = 44903;
pub const AUE_SESSION_CLOSE: u32 = 44904;
pub const AUE_O_CREAT: u32 = 83;
pub const AUE_O_EXECVE: u32 = 0;
pub const AUE_O_SBREAK: u32 = 0;
pub const AUE_O_LSEEK: u32 = 0;
pub const AUE_O_MOUNT: u32 = 0;
pub const AUE_O_UMOUNT: u32 = 0;
pub const AUE_O_STAT: u32 = 16;
pub const AUE_O_LSTAT: u32 = 17;
pub const AUE_O_FSTAT: u32 = 208;
pub const AUE_O_GETPAGESIZE: u32 = 0;
pub const AUE_O_VREAD: u32 = 0;
pub const AUE_O_VWRITE: u32 = 0;
pub const AUE_O_MMAP: u32 = 210;
pub const AUE_O_VADVISE: u32 = 0;
pub const AUE_O_VHANGUP: u32 = 0;
pub const AUE_O_VLIMIT: u32 = 0;
pub const AUE_O_WAIT: u32 = 0;
pub const AUE_O_GETHOSTNAME: u32 = 0;
pub const AUE_O_SETHOSTNAME: u32 = 43021;
pub const AUE_O_GETDOPT: u32 = 0;
pub const AUE_O_SETDOPT: u32 = 0;
pub const AUE_O_ACCEPT: u32 = 0;
pub const AUE_O_SEND: u32 = 188;
pub const AUE_O_RECV: u32 = 190;
pub const AUE_O_VTIMES: u32 = 0;
pub const AUE_O_SIGVEC: u32 = 0;
pub const AUE_O_SIGBLOCK: u32 = 0;
pub const AUE_O_SIGSETMASK: u32 = 0;
pub const AUE_O_SIGSTACK: u32 = 0;
pub const AUE_O_RECVMSG: u32 = 190;
pub const AUE_O_SENDMSG: u32 = 188;
pub const AUE_O_VTRACE: u32 = 0;
pub const AUE_O_RESUBA: u32 = 0;
pub const AUE_O_RECVFROM: u32 = 191;
pub const AUE_O_SETREUID: u32 = 40;
pub const AUE_O_SETREGID: u32 = 41;
pub const AUE_O_GETDIRENTRIES: u32 = 43020;
pub const AUE_O_TRUNCATE: u32 = 43;
pub const AUE_O_FTRUNCATE: u32 = 44;
pub const AUE_O_GETPEERNAME: u32 = 0;
pub const AUE_O_GETHOSTID: u32 = 0;
pub const AUE_O_SETHOSTID: u32 = 0;
pub const AUE_O_GETRLIMIT: u32 = 0;
pub const AUE_O_SETRLIMIT: u32 = 51;
pub const AUE_O_KILLPG: u32 = 15;
pub const AUE_O_SETQUOTA: u32 = 0;
pub const AUE_O_QUOTA: u32 = 0;
pub const AUE_O_GETSOCKNAME: u32 = 0;
pub const AUE_O_ASYNCDAEMON: u32 = 0;
pub const AUE_O_GETDOMAINNAME: u32 = 0;
pub const AUE_O_SETDOMAINNAME: u32 = 43021;
pub const AUE_O_PCFS_MOUNT: u32 = 0;
pub const AUE_O_EXPORTFS: u32 = 0;
pub const AUE_O_USTATE: u32 = 0;
pub const AUE_O_WAIT3: u32 = 0;
pub const AUE_O_RPAUSE: u32 = 0;
pub const AUE_O_GETDENTS: u32 = 0;
pub const AUE_ATGETMSG: u32 = 0;
pub const AUE_ATPUTMSG: u32 = 0;
pub const AUE_ATSOCKET: u32 = 0;
pub const AUE_ATPGETREQ: u32 = 0;
pub const AUE_ATPGETRSP: u32 = 0;
pub const AUE_ATPSNDREQ: u32 = 0;
pub const AUE_ATPSNDRSP: u32 = 0;
pub const AUE_BSDTHREADCREATE: u32 = 0;
pub const AUE_BSDTHREADTERMINATE: u32 = 0;
pub const AUE_BSDTHREADREGISTER: u32 = 0;
pub const AUE_CSOPS: u32 = 0;
pub const AUE_DUP: u32 = 0;
pub const AUE_FDATASYNC: u32 = 0;
pub const AUE_FGETATTRLIST: u32 = 0;
pub const AUE_FGETXATTR: u32 = 0;
pub const AUE_FLISTXATTR: u32 = 0;
pub const AUE_FREMOVEXATTR: u32 = 0;
pub const AUE_FSETATTRLIST: u32 = 0;
pub const AUE_FSETXATTR: u32 = 0;
pub const AUE_FSTATFS64: u32 = 0;
pub const AUE_FSTATV: u32 = 0;
pub const AUE_FSTAT64: u32 = 0;
pub const AUE_FSTAT64_EXTENDED: u32 = 0;
pub const AUE_GCCONTROL: u32 = 0;
pub const AUE_GETDIRENTRIES64: u32 = 0;
pub const AUE_GETDTABLESIZE: u32 = 0;
pub const AUE_GETEGID: u32 = 0;
pub const AUE_GETEUID: u32 = 0;
pub const AUE_GETFSSTAT64: u32 = 0;
pub const AUE_GETGID: u32 = 0;
pub const AUE_GETGROUPS: u32 = 0;
pub const AUE_GETITIMER: u32 = 0;
pub const AUE_GETLOGIN: u32 = 0;
pub const AUE_GETPEERNAME: u32 = 0;
pub const AUE_GETPGID: u32 = 0;
pub const AUE_GETPGRP: u32 = 0;
pub const AUE_GETPID: u32 = 0;
pub const AUE_GETPPID: u32 = 0;
pub const AUE_GETPRIORITY: u32 = 0;
pub const AUE_GETRLIMIT: u32 = 0;
pub const AUE_GETRUSAGE: u32 = 0;
pub const AUE_GETSGROUPS: u32 = 0;
pub const AUE_GETSID: u32 = 0;
pub const AUE_GETSOCKNAME: u32 = 0;
pub const AUE_GETTIMEOFDAY: u32 = 0;
pub const AUE_GETTID: u32 = 0;
pub const AUE_GETUID: u32 = 0;
pub const AUE_GETSOCKOPT: u32 = 0;
pub const AUE_GETWGROUPS: u32 = 0;
pub const AUE_GETXATTR: u32 = 0;
pub const AUE_IDENTITYSVC: u32 = 0;
pub const AUE_INITGROUPS: u32 = 0;
pub const AUE_IOPOLICYSYS: u32 = 0;
pub const AUE_ISSETUGID: u32 = 0;
pub const AUE_LEDGER: u32 = 0;
pub const AUE_LIOLISTIO: u32 = 0;
pub const AUE_LISTXATTR: u32 = 0;
pub const AUE_LSTATV: u32 = 0;
pub const AUE_LSTAT64: u32 = 0;
pub const AUE_LSTAT64_EXTENDED: u32 = 0;
pub const AUE_MADVISE: u32 = 0;
pub const AUE_MINCORE: u32 = 0;
pub const AUE_MKCOMPLEX: u32 = 0;
pub const AUE_MSGCL: u32 = 0;
pub const AUE_MSYNC: u32 = 0;
pub const AUE_NECP: u32 = 0;
pub const AUE_NETAGENT: u32 = 0;
pub const AUE_PROCINFO: u32 = 0;
pub const AUE_PTHREADCANCELED: u32 = 0;
pub const AUE_PTHREADCHDIR: u32 = 0;
pub const AUE_PTHREADCONDBROADCAST: u32 = 0;
pub const AUE_PTHREADCONDDESTORY: u32 = 0;
pub const AUE_PTHREADCONDINIT: u32 = 0;
pub const AUE_PTHREADCONDSIGNAL: u32 = 0;
pub const AUE_PTHREADCONDWAIT: u32 = 0;
pub const AUE_PTHREADFCHDIR: u32 = 0;
pub const AUE_PTHREADMARK: u32 = 0;
pub const AUE_PTHREADMUTEXDESTROY: u32 = 0;
pub const AUE_PTHREADMUTEXINIT: u32 = 0;
pub const AUE_PTHREADMUTEXTRYLOCK: u32 = 0;
pub const AUE_PTHREADMUTEXUNLOCK: u32 = 0;
pub const AUE_REMOVEXATTR: u32 = 0;
pub const AUE_SBRK: u32 = 0;
pub const AUE_SELECT: u32 = 0;
pub const AUE_SEMDESTROY: u32 = 0;
pub const AUE_SEMGETVALUE: u32 = 0;
pub const AUE_SEMINIT: u32 = 0;
pub const AUE_SEMPOST: u32 = 0;
pub const AUE_SEMTRYWAIT: u32 = 0;
pub const AUE_SEMWAIT: u32 = 0;
pub const AUE_SEMWAITSIGNAL: u32 = 0;
pub const AUE_SETITIMER: u32 = 0;
pub const AUE_SETSGROUPS: u32 = 0;
pub const AUE_SETTID: u32 = 0;
pub const AUE_SETTIDWITHPID: u32 = 0;
pub const AUE_SETWGROUPS: u32 = 0;
pub const AUE_SETXATTR: u32 = 0;
pub const AUE_SHAREDREGIONCHECK: u32 = 0;
pub const AUE_SHAREDREGIONMAP: u32 = 0;
pub const AUE_SIGACTION: u32 = 0;
pub const AUE_SIGALTSTACK: u32 = 0;
pub const AUE_SIGPENDING: u32 = 0;
pub const AUE_SIGPROCMASK: u32 = 0;
pub const AUE_SIGRETURN: u32 = 0;
pub const AUE_SIGSUSPEND: u32 = 0;
pub const AUE_SIGWAIT: u32 = 0;
pub const AUE_SSTK: u32 = 0;
pub const AUE_STACKSNAPSHOT: u32 = 0;
pub const AUE_STATFS64: u32 = 0;
pub const AUE_STATV: u32 = 0;
pub const AUE_STAT64: u32 = 0;
pub const AUE_STAT64_EXTENDED: u32 = 0;
pub const AUE_SYNC: u32 = 0;
pub const AUE_SYSCALL: u32 = 0;
pub const AUE_TABLE: u32 = 0;
pub const AUE_VMPRESSUREMONITOR: u32 = 0;
pub const AUE_WAITID: u32 = 0;
pub const AUE_WORKQOPEN: u32 = 0;
pub const AUE_WORKQOPS: u32 = 0;
pub const AUE_WORKLOOPCTL: u32 = 0;
pub const AUE_PERSONA: u32 = 0;
pub const AUE_USRCTL: u32 = 0;
pub const AUE_NEXUS: u32 = 0;
pub const AUE_CHANNEL: u32 = 0;
pub const AUE_NET: u32 = 0;
pub const AUE_TASKREADFORPID: u32 = 0;
pub const AUE_TASKINSPECTFORPID: u32 = 0;
pub const AUE_DEBUG_SYSCALL_REJECT: u32 = 0;
pub const AUE_DEBUG_SYSCALL_REJECT_CONFIG: u32 = 0;
pub const AUDIT_SDEV_PATH: &[u8; 19usize] = b"/dev/auditsessions\0";
pub const BSM_SOCK_DGRAM: u32 = 1;
pub const BSM_SOCK_STREAM: u32 = 2;
pub const BSM_SOCK_RAW: u32 = 4;
pub const BSM_SOCK_RDM: u32 = 5;
pub const BSM_SOCK_SEQPACKET: u32 = 6;
pub const BSM_SOCK_UNKNOWN: u32 = 500;
pub const AUE_at_create: u32 = 6144;
pub const AUE_at_delete: u32 = 6145;
pub const AUE_at_perm: u32 = 6146;
pub const AUE_cron_invoke: u32 = 6147;
pub const AUE_crontab_create: u32 = 6148;
pub const AUE_crontab_delete: u32 = 6149;
pub const AUE_crontab_perm: u32 = 6150;
pub const AUE_inetd_connect: u32 = 6151;
pub const AUE_login: u32 = 6152;
pub const AUE_logout: u32 = 6153;
pub const AUE_telnet: u32 = 6154;
pub const AUE_rlogin: u32 = 6155;
pub const AUE_mountd_mount: u32 = 6156;
pub const AUE_mountd_umount: u32 = 6157;
pub const AUE_rshd: u32 = 6158;
pub const AUE_su: u32 = 6159;
pub const AUE_halt: u32 = 6160;
pub const AUE_reboot: u32 = 6161;
pub const AUE_rexecd: u32 = 6162;
pub const AUE_passwd: u32 = 6163;
pub const AUE_rexd: u32 = 6164;
pub const AUE_ftpd: u32 = 6165;
pub const AUE_init: u32 = 6166;
pub const AUE_uadmin: u32 = 6167;
pub const AUE_shutdown: u32 = 6168;
pub const AUE_poweroff: u32 = 6169;
pub const AUE_crontab_mod: u32 = 6170;
pub const AUE_ftpd_logout: u32 = 6171;
pub const AUE_ssh: u32 = 6172;
pub const AUE_role_login: u32 = 6173;
pub const AUE_prof_cmd: u32 = 6180;
pub const AUE_filesystem_add: u32 = 6181;
pub const AUE_filesystem_delete: u32 = 6182;
pub const AUE_filesystem_modify: u32 = 6183;
pub const AUE_allocate_succ: u32 = 6200;
pub const AUE_allocate_fail: u32 = 6201;
pub const AUE_deallocate_succ: u32 = 6202;
pub const AUE_deallocate_fail: u32 = 6203;
pub const AUE_listdevice_succ: u32 = 6205;
pub const AUE_listdevice_fail: u32 = 6206;
pub const AUE_create_user: u32 = 6207;
pub const AUE_modify_user: u32 = 6208;
pub const AUE_delete_user: u32 = 6209;
pub const AUE_disable_user: u32 = 6210;
pub const AUE_enable_user: u32 = 6211;
pub const AUE_newgrp_login: u32 = 6212;
pub const AUE_admin_authentication: u32 = 6213;
pub const AUE_kadmind_auth: u32 = 6214;
pub const AUE_kadmind_unauth: u32 = 6215;
pub const AUE_krb5kdc_as_req: u32 = 6216;
pub const AUE_krb5kdc_tgs_req: u32 = 6217;
pub const AUE_krb5kdc_tgs_req_2ndtktmm: u32 = 6218;
pub const AUE_krb5kdc_tgs_req_alt_tgt: u32 = 6219;
pub const AUE_DARWIN_audit_startup: u32 = 6171;
pub const AUE_DARWIN_audit_shutdown: u32 = 6172;
pub const AUE_DARWIN_sudo: u32 = 6300;
pub const AUE_DARWIN_modify_password: u32 = 6501;
pub const AUE_DARWIN_create_group: u32 = 6511;
pub const AUE_DARWIN_delete_group: u32 = 6512;
pub const AUE_DARWIN_modify_group: u32 = 6513;
pub const AUE_DARWIN_add_to_group: u32 = 6514;
pub const AUE_DARWIN_remove_from_group: u32 = 6515;
pub const AUE_DARWIN_revoke_obj: u32 = 6521;
pub const AUE_DARWIN_lw_login: u32 = 6600;
pub const AUE_DARWIN_lw_logout: u32 = 6601;
pub const AUE_DARWIN_auth_user: u32 = 7000;
pub const AUE_DARWIN_ssconn: u32 = 7001;
pub const AUE_DARWIN_ssauthorize: u32 = 7002;
pub const AUE_DARWIN_ssauthint: u32 = 7003;
pub const AUE_openssh: u32 = 32800;
pub const AUE_audit_startup: u32 = 45000;
pub const AUE_audit_shutdown: u32 = 45001;
pub const AUE_modify_password: u32 = 45014;
pub const AUE_create_group: u32 = 45015;
pub const AUE_delete_group: u32 = 45016;
pub const AUE_modify_group: u32 = 45017;
pub const AUE_add_to_group: u32 = 45018;
pub const AUE_remove_from_group: u32 = 45019;
pub const AUE_revoke_obj: u32 = 45020;
pub const AUE_lw_login: u32 = 45021;
pub const AUE_lw_logout: u32 = 45022;
pub const AUE_auth_user: u32 = 45023;
pub const AUE_ssconn: u32 = 45024;
pub const AUE_ssauthorize: u32 = 45025;
pub const AUE_ssauthint: u32 = 45026;
pub const AUE_calife: u32 = 45027;
pub const AUE_sudo: u32 = 45028;
pub const AUE_audit_recovery: u32 = 45029;
pub const AUE_ssauthmech: u32 = 45030;
pub const AUE_sec_assessment: u32 = 45031;
pub const HFSPLUSMETADATAFOLDER: &[u8; 30usize] =
    b"\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80HFS+ Private Data\0";
pub const HFSPLUS_DIR_METADATA_FOLDER: &[u8; 30usize] = b".HFS+ Private Directory Data\r\0";
pub const HFS_INODE_PREFIX: &[u8; 6usize] = b"iNode\0";
pub const HFS_DELETE_PREFIX: &[u8; 5usize] = b"temp\0";
pub const HFS_DIRINODE_PREFIX: &[u8; 5usize] = b"dir_\0";
pub const FIRST_LINK_XATTR_NAME: &[u8; 31usize] = b"com.apple.system.hfs.firstlink\0";
pub const HFS_UUID_NAMESPACE_ID: [u8; 17usize] = [
    179u8, 226u8, 15u8, 57u8, 242u8, 146u8, 17u8, 214u8, 151u8, 164u8, 0u8, 48u8, 101u8, 67u8,
    236u8, 172u8, 0u8,
];
pub const EXTJNL_CONTENT_TYPE_UUID: &[u8; 37usize] = b"4A6F7572-6E61-11AA-AA11-00306543ECAC\0";
pub const FSOPT_NOFOLLOW: u32 = 1;
pub const FSOPT_NOINMEMUPDATE: u32 = 2;
pub const FSOPT_REPORT_FULLSIZE: u32 = 4;
pub const FSOPT_PACK_INVAL_ATTRS: u32 = 8;
pub const FSOPT_ATTR_CMN_EXTENDED: u32 = 32;
pub const FSOPT_RETURN_REALDEV: u32 = 512;
pub const FSOPT_NOFOLLOW_ANY: u32 = 2048;
pub const SEARCHFS_MAX_SEARCHPARMS: u32 = 4096;
pub const ATTR_BIT_MAP_COUNT: u32 = 5;
pub const VOL_CAPABILITIES_FORMAT: u32 = 0;
pub const VOL_CAPABILITIES_INTERFACES: u32 = 1;
pub const VOL_CAPABILITIES_RESERVED1: u32 = 2;
pub const VOL_CAPABILITIES_RESERVED2: u32 = 3;
pub const ATTR_MAX_BUFFER: u32 = 8192;
pub const VOL_CAP_FMT_PERSISTENTOBJECTIDS: u32 = 1;
pub const VOL_CAP_FMT_SYMBOLICLINKS: u32 = 2;
pub const VOL_CAP_FMT_HARDLINKS: u32 = 4;
pub const VOL_CAP_FMT_JOURNAL: u32 = 8;
pub const VOL_CAP_FMT_JOURNAL_ACTIVE: u32 = 16;
pub const VOL_CAP_FMT_NO_ROOT_TIMES: u32 = 32;
pub const VOL_CAP_FMT_SPARSE_FILES: u32 = 64;
pub const VOL_CAP_FMT_ZERO_RUNS: u32 = 128;
pub const VOL_CAP_FMT_CASE_SENSITIVE: u32 = 256;
pub const VOL_CAP_FMT_CASE_PRESERVING: u32 = 512;
pub const VOL_CAP_FMT_FAST_STATFS: u32 = 1024;
pub const VOL_CAP_FMT_2TB_FILESIZE: u32 = 2048;
pub const VOL_CAP_FMT_OPENDENYMODES: u32 = 4096;
pub const VOL_CAP_FMT_HIDDEN_FILES: u32 = 8192;
pub const VOL_CAP_FMT_PATH_FROM_ID: u32 = 16384;
pub const VOL_CAP_FMT_NO_VOLUME_SIZES: u32 = 32768;
pub const VOL_CAP_FMT_DECMPFS_COMPRESSION: u32 = 65536;
pub const VOL_CAP_FMT_64BIT_OBJECT_IDS: u32 = 131072;
pub const VOL_CAP_FMT_DIR_HARDLINKS: u32 = 262144;
pub const VOL_CAP_FMT_DOCUMENT_ID: u32 = 524288;
pub const VOL_CAP_FMT_WRITE_GENERATION_COUNT: u32 = 1048576;
pub const VOL_CAP_FMT_NO_IMMUTABLE_FILES: u32 = 2097152;
pub const VOL_CAP_FMT_NO_PERMISSIONS: u32 = 4194304;
pub const VOL_CAP_FMT_SHARED_SPACE: u32 = 8388608;
pub const VOL_CAP_FMT_VOL_GROUPS: u32 = 16777216;
pub const VOL_CAP_FMT_SEALED: u32 = 33554432;
pub const VOL_CAP_INT_SEARCHFS: u32 = 1;
pub const VOL_CAP_INT_ATTRLIST: u32 = 2;
pub const VOL_CAP_INT_NFSEXPORT: u32 = 4;
pub const VOL_CAP_INT_READDIRATTR: u32 = 8;
pub const VOL_CAP_INT_EXCHANGEDATA: u32 = 16;
pub const VOL_CAP_INT_COPYFILE: u32 = 32;
pub const VOL_CAP_INT_ALLOCATE: u32 = 64;
pub const VOL_CAP_INT_VOL_RENAME: u32 = 128;
pub const VOL_CAP_INT_ADVLOCK: u32 = 256;
pub const VOL_CAP_INT_FLOCK: u32 = 512;
pub const VOL_CAP_INT_EXTENDED_SECURITY: u32 = 1024;
pub const VOL_CAP_INT_USERACCESS: u32 = 2048;
pub const VOL_CAP_INT_MANLOCK: u32 = 4096;
pub const VOL_CAP_INT_NAMEDSTREAMS: u32 = 8192;
pub const VOL_CAP_INT_EXTENDED_ATTR: u32 = 16384;
pub const VOL_CAP_INT_CLONE: u32 = 65536;
pub const VOL_CAP_INT_SNAPSHOT: u32 = 131072;
pub const VOL_CAP_INT_RENAME_SWAP: u32 = 262144;
pub const VOL_CAP_INT_RENAME_EXCL: u32 = 524288;
pub const VOL_CAP_INT_RENAME_OPENFAIL: u32 = 1048576;
pub const ATTR_CMN_NAME: u32 = 1;
pub const ATTR_CMN_DEVID: u32 = 2;
pub const ATTR_CMN_FSID: u32 = 4;
pub const ATTR_CMN_OBJTYPE: u32 = 8;
pub const ATTR_CMN_OBJTAG: u32 = 16;
pub const ATTR_CMN_OBJID: u32 = 32;
pub const ATTR_CMN_OBJPERMANENTID: u32 = 64;
pub const ATTR_CMN_PAROBJID: u32 = 128;
pub const ATTR_CMN_SCRIPT: u32 = 256;
pub const ATTR_CMN_CRTIME: u32 = 512;
pub const ATTR_CMN_MODTIME: u32 = 1024;
pub const ATTR_CMN_CHGTIME: u32 = 2048;
pub const ATTR_CMN_ACCTIME: u32 = 4096;
pub const ATTR_CMN_BKUPTIME: u32 = 8192;
pub const ATTR_CMN_FNDRINFO: u32 = 16384;
pub const ATTR_CMN_OWNERID: u32 = 32768;
pub const ATTR_CMN_GRPID: u32 = 65536;
pub const ATTR_CMN_ACCESSMASK: u32 = 131072;
pub const ATTR_CMN_FLAGS: u32 = 262144;
pub const ATTR_CMN_GEN_COUNT: u32 = 524288;
pub const ATTR_CMN_DOCUMENT_ID: u32 = 1048576;
pub const ATTR_CMN_USERACCESS: u32 = 2097152;
pub const ATTR_CMN_EXTENDED_SECURITY: u32 = 4194304;
pub const ATTR_CMN_UUID: u32 = 8388608;
pub const ATTR_CMN_GRPUUID: u32 = 16777216;
pub const ATTR_CMN_FILEID: u32 = 33554432;
pub const ATTR_CMN_PARENTID: u32 = 67108864;
pub const ATTR_CMN_FULLPATH: u32 = 134217728;
pub const ATTR_CMN_ADDEDTIME: u32 = 268435456;
pub const ATTR_CMN_ERROR: u32 = 536870912;
pub const ATTR_CMN_DATA_PROTECT_FLAGS: u32 = 1073741824;
pub const ATTR_CMN_RETURNED_ATTRS: u32 = 2147483648;
pub const ATTR_CMN_VALIDMASK: u32 = 4294967295;
pub const ATTR_CMN_SETMASK: u32 = 1372061440;
pub const ATTR_CMN_VOLSETMASK: u32 = 26368;
pub const ATTR_VOL_FSTYPE: u32 = 1;
pub const ATTR_VOL_SIGNATURE: u32 = 2;
pub const ATTR_VOL_SIZE: u32 = 4;
pub const ATTR_VOL_SPACEFREE: u32 = 8;
pub const ATTR_VOL_SPACEAVAIL: u32 = 16;
pub const ATTR_VOL_MINALLOCATION: u32 = 32;
pub const ATTR_VOL_ALLOCATIONCLUMP: u32 = 64;
pub const ATTR_VOL_IOBLOCKSIZE: u32 = 128;
pub const ATTR_VOL_OBJCOUNT: u32 = 256;
pub const ATTR_VOL_FILECOUNT: u32 = 512;
pub const ATTR_VOL_DIRCOUNT: u32 = 1024;
pub const ATTR_VOL_MAXOBJCOUNT: u32 = 2048;
pub const ATTR_VOL_MOUNTPOINT: u32 = 4096;
pub const ATTR_VOL_NAME: u32 = 8192;
pub const ATTR_VOL_MOUNTFLAGS: u32 = 16384;
pub const ATTR_VOL_MOUNTEDDEVICE: u32 = 32768;
pub const ATTR_VOL_ENCODINGSUSED: u32 = 65536;
pub const ATTR_VOL_CAPABILITIES: u32 = 131072;
pub const ATTR_VOL_UUID: u32 = 262144;
pub const ATTR_VOL_SPACEUSED: u32 = 8388608;
pub const ATTR_VOL_QUOTA_SIZE: u32 = 268435456;
pub const ATTR_VOL_RESERVED_SIZE: u32 = 536870912;
pub const ATTR_VOL_ATTRIBUTES: u32 = 1073741824;
pub const ATTR_VOL_INFO: u32 = 2147483648;
pub const ATTR_VOL_VALIDMASK: u32 = 4035444735;
pub const ATTR_VOL_SETMASK: u32 = 2147491840;
pub const ATTR_DIR_LINKCOUNT: u32 = 1;
pub const ATTR_DIR_ENTRYCOUNT: u32 = 2;
pub const ATTR_DIR_MOUNTSTATUS: u32 = 4;
pub const ATTR_DIR_ALLOCSIZE: u32 = 8;
pub const ATTR_DIR_IOBLOCKSIZE: u32 = 16;
pub const ATTR_DIR_DATALENGTH: u32 = 32;
pub const DIR_MNTSTATUS_MNTPOINT: u32 = 1;
pub const DIR_MNTSTATUS_TRIGGER: u32 = 2;
pub const ATTR_DIR_VALIDMASK: u32 = 63;
pub const ATTR_DIR_SETMASK: u32 = 0;
pub const ATTR_FILE_LINKCOUNT: u32 = 1;
pub const ATTR_FILE_TOTALSIZE: u32 = 2;
pub const ATTR_FILE_ALLOCSIZE: u32 = 4;
pub const ATTR_FILE_IOBLOCKSIZE: u32 = 8;
pub const ATTR_FILE_DEVTYPE: u32 = 32;
pub const ATTR_FILE_FORKCOUNT: u32 = 128;
pub const ATTR_FILE_FORKLIST: u32 = 256;
pub const ATTR_FILE_DATALENGTH: u32 = 512;
pub const ATTR_FILE_DATAALLOCSIZE: u32 = 1024;
pub const ATTR_FILE_RSRCLENGTH: u32 = 4096;
pub const ATTR_FILE_RSRCALLOCSIZE: u32 = 8192;
pub const ATTR_FILE_VALIDMASK: u32 = 14335;
pub const ATTR_FILE_SETMASK: u32 = 32;
pub const ATTR_CMNEXT_RELPATH: u32 = 4;
pub const ATTR_CMNEXT_PRIVATESIZE: u32 = 8;
pub const ATTR_CMNEXT_LINKID: u32 = 16;
pub const ATTR_CMNEXT_NOFIRMLINKPATH: u32 = 32;
pub const ATTR_CMNEXT_REALDEVID: u32 = 64;
pub const ATTR_CMNEXT_REALFSID: u32 = 128;
pub const ATTR_CMNEXT_CLONEID: u32 = 256;
pub const ATTR_CMNEXT_EXT_FLAGS: u32 = 512;
pub const ATTR_CMNEXT_RECURSIVE_GENCOUNT: u32 = 1024;
pub const ATTR_CMNEXT_VALIDMASK: u32 = 2044;
pub const ATTR_CMNEXT_SETMASK: u32 = 0;
pub const ATTR_FORK_TOTALSIZE: u32 = 1;
pub const ATTR_FORK_ALLOCSIZE: u32 = 2;
pub const ATTR_FORK_RESERVED: u32 = 4294967295;
pub const ATTR_FORK_VALIDMASK: u32 = 3;
pub const ATTR_FORK_SETMASK: u32 = 0;
pub const ATTR_CMN_NAMEDATTRCOUNT: u32 = 524288;
pub const ATTR_CMN_NAMEDATTRLIST: u32 = 1048576;
pub const ATTR_FILE_CLUMPSIZE: u32 = 16;
pub const ATTR_FILE_FILETYPE: u32 = 64;
pub const ATTR_FILE_DATAEXTENTS: u32 = 2048;
pub const ATTR_FILE_RSRCEXTENTS: u32 = 16384;
pub const ATTR_BULK_REQUIRED: u32 = 2147483649;
pub const SRCHFS_START: u32 = 1;
pub const SRCHFS_MATCHPARTIALNAMES: u32 = 2;
pub const SRCHFS_MATCHDIRS: u32 = 4;
pub const SRCHFS_MATCHFILES: u32 = 8;
pub const SRCHFS_SKIPLINKS: u32 = 16;
pub const SRCHFS_SKIPINVISIBLE: u32 = 32;
pub const SRCHFS_SKIPPACKAGES: u32 = 64;
pub const SRCHFS_SKIPINAPPROPRIATE: u32 = 128;
pub const SRCHFS_NEGATEPARAMS: u32 = 2147483648;
pub const SRCHFS_VALIDOPTIONSMASK: u32 = 2147483903;
pub const FST_EOF: i32 = -1;
pub const MFSNAMELEN: u32 = 15;
pub const MFSTYPENAMELEN: u32 = 16;
pub const MNAMELEN: u32 = 1024;
pub const MNT_EXT_ROOT_DATA_VOL: u32 = 1;
pub const MNT_RDONLY: u32 = 1;
pub const MNT_SYNCHRONOUS: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOSUID: u32 = 8;
pub const MNT_NODEV: u32 = 16;
pub const MNT_UNION: u32 = 32;
pub const MNT_ASYNC: u32 = 64;
pub const MNT_CPROTECT: u32 = 128;
pub const MNT_EXPORTED: u32 = 256;
pub const MNT_REMOVABLE: u32 = 512;
pub const MNT_QUARANTINE: u32 = 1024;
pub const MNT_LOCAL: u32 = 4096;
pub const MNT_QUOTA: u32 = 8192;
pub const MNT_ROOTFS: u32 = 16384;
pub const MNT_DOVOLFS: u32 = 32768;
pub const MNT_DONTBROWSE: u32 = 1048576;
pub const MNT_IGNORE_OWNERSHIP: u32 = 2097152;
pub const MNT_AUTOMOUNTED: u32 = 4194304;
pub const MNT_JOURNALED: u32 = 8388608;
pub const MNT_NOUSERXATTR: u32 = 16777216;
pub const MNT_DEFWRITE: u32 = 33554432;
pub const MNT_MULTILABEL: u32 = 67108864;
pub const MNT_NOFOLLOW: u32 = 134217728;
pub const MNT_NOATIME: u32 = 268435456;
pub const MNT_SNAPSHOT: u32 = 1073741824;
pub const MNT_STRICTATIME: u32 = 2147483648;
pub const MNT_UNKNOWNPERMISSIONS: u32 = 2097152;
pub const MNT_VISFLAGMASK: u32 = 3757111295;
pub const MNT_UPDATE: u32 = 65536;
pub const MNT_NOBLOCK: u32 = 131072;
pub const MNT_RELOAD: u32 = 262144;
pub const MNT_FORCE: u32 = 524288;
pub const MNT_CMDFLAGS: u32 = 983040;
pub const VFS_GENERIC: u32 = 0;
pub const VFS_NUMMNTOPS: u32 = 1;
pub const VFS_MAXTYPENUM: u32 = 1;
pub const VFS_CONF: u32 = 2;
pub const MNT_WAIT: u32 = 1;
pub const MNT_NOWAIT: u32 = 2;
pub const MNT_DWAIT: u32 = 4;
pub const VFS_CTL_VERS1: u32 = 1;
pub const VFS_CTL_OSTATFS: u32 = 65537;
pub const VFS_CTL_UMOUNT: u32 = 65538;
pub const VFS_CTL_QUERY: u32 = 65539;
pub const VFS_CTL_NEWADDR: u32 = 65540;
pub const VFS_CTL_TIMEO: u32 = 65541;
pub const VFS_CTL_NOLOCKS: u32 = 65542;
pub const VFS_CTL_SADDR: u32 = 65543;
pub const VFS_CTL_DISC: u32 = 65544;
pub const VFS_CTL_SERVERINFO: u32 = 65545;
pub const VFS_CTL_NSTATUS: u32 = 65546;
pub const VFS_CTL_STATFS64: u32 = 65547;
pub const VFS_CTL_STATFS: u32 = 65547;
pub const VQ_NOTRESP: u32 = 1;
pub const VQ_NEEDAUTH: u32 = 2;
pub const VQ_LOWDISK: u32 = 4;
pub const VQ_MOUNT: u32 = 8;
pub const VQ_UNMOUNT: u32 = 16;
pub const VQ_DEAD: u32 = 32;
pub const VQ_ASSIST: u32 = 64;
pub const VQ_NOTRESPLOCK: u32 = 128;
pub const VQ_UPDATE: u32 = 256;
pub const VQ_VERYLOWDISK: u32 = 512;
pub const VQ_SYNCEVENT: u32 = 1024;
pub const VQ_SERVEREVENT: u32 = 2048;
pub const VQ_QUOTA: u32 = 4096;
pub const VQ_NEARLOWDISK: u32 = 8192;
pub const VQ_DESIRED_DISK: u32 = 16384;
pub const VQ_FREE_SPACE_CHANGE: u32 = 32768;
pub const VQ_FLAG10000: u32 = 65536;
pub const NFSV4_MAX_FH_SIZE: u32 = 128;
pub const NFSV3_MAX_FH_SIZE: u32 = 64;
pub const NFSV2_MAX_FH_SIZE: u32 = 32;
pub const OVERRIDE_UNKNOWN_PERMISSIONS: u32 = 0;
pub const UNKNOWNPERMISSIONS: u32 = 453;
pub const HFSFSMNT_NOXONFILES: u32 = 1;
pub const HFSFSMNT_WRAPPER: u32 = 2;
pub const HFSFSMNT_EXTENDED_ARGS: u32 = 4;
pub const HFS_ENCODINGBIAS: u32 = 1;
pub const HFS_EXTEND_FS: u32 = 2;
pub const HFS_ENABLE_JOURNALING: u32 = 534889;
pub const HFS_DISABLE_JOURNALING: u32 = 201330;
pub const HFS_REPLAY_JOURNAL: u32 = 1785621618;
pub const HFS_ENABLE_RESIZE_DEBUG: u32 = 4;
pub const CURSES: u32 = 1;
pub const CURSES_H: u32 = 1;
pub const NCURSES_VERSION_MAJOR: u32 = 5;
pub const NCURSES_VERSION_MINOR: u32 = 7;
pub const NCURSES_VERSION_PATCH: u32 = 20081102;
pub const NCURSES_VERSION: &[u8; 4usize] = b"5.7\0";
pub const NCURSES_MOUSE_VERSION: u32 = 1;
pub const NCURSES_DLL_H_incl: u32 = 1;
pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
pub const NCURSES_OPAQUE: u32 = 1;
pub const NCURSES_TPARM_VARARGS: u32 = 1;
pub const NCURSES_UNCTRL_H_incl: u32 = 1;
pub const COLOR_BLACK: u32 = 0;
pub const COLOR_RED: u32 = 1;
pub const COLOR_GREEN: u32 = 2;
pub const COLOR_YELLOW: u32 = 3;
pub const COLOR_BLUE: u32 = 4;
pub const COLOR_MAGENTA: u32 = 5;
pub const COLOR_CYAN: u32 = 6;
pub const COLOR_WHITE: u32 = 7;
pub const ERR: i32 = -1;
pub const OK: u32 = 0;
pub const _SUBWIN: u32 = 1;
pub const _ENDLINE: u32 = 2;
pub const _FULLWIN: u32 = 4;
pub const _SCROLLWIN: u32 = 8;
pub const _ISPAD: u32 = 16;
pub const _HASMOVED: u32 = 32;
pub const _WRAPPED: u32 = 64;
pub const _NOCHANGE: i32 = -1;
pub const _NEWINDEX: i32 = -1;
pub const NCURSES_EXT_FUNCS: u32 = 20081102;
pub const NCURSES_ATTR_SHIFT: u32 = 8;
pub const A_NORMAL: u32 = 0;
pub const KEY_CODE_YES: u32 = 256;
pub const KEY_MIN: u32 = 257;
pub const KEY_BREAK: u32 = 257;
pub const KEY_SRESET: u32 = 344;
pub const KEY_RESET: u32 = 345;
pub const KEY_DOWN: u32 = 258;
pub const KEY_UP: u32 = 259;
pub const KEY_LEFT: u32 = 260;
pub const KEY_RIGHT: u32 = 261;
pub const KEY_HOME: u32 = 262;
pub const KEY_BACKSPACE: u32 = 263;
pub const KEY_F0: u32 = 264;
pub const KEY_DL: u32 = 328;
pub const KEY_IL: u32 = 329;
pub const KEY_DC: u32 = 330;
pub const KEY_IC: u32 = 331;
pub const KEY_EIC: u32 = 332;
pub const KEY_CLEAR: u32 = 333;
pub const KEY_EOS: u32 = 334;
pub const KEY_EOL: u32 = 335;
pub const KEY_SF: u32 = 336;
pub const KEY_SR: u32 = 337;
pub const KEY_NPAGE: u32 = 338;
pub const KEY_PPAGE: u32 = 339;
pub const KEY_STAB: u32 = 340;
pub const KEY_CTAB: u32 = 341;
pub const KEY_CATAB: u32 = 342;
pub const KEY_ENTER: u32 = 343;
pub const KEY_PRINT: u32 = 346;
pub const KEY_LL: u32 = 347;
pub const KEY_A1: u32 = 348;
pub const KEY_A3: u32 = 349;
pub const KEY_B2: u32 = 350;
pub const KEY_C1: u32 = 351;
pub const KEY_C3: u32 = 352;
pub const KEY_BTAB: u32 = 353;
pub const KEY_BEG: u32 = 354;
pub const KEY_CANCEL: u32 = 355;
pub const KEY_CLOSE: u32 = 356;
pub const KEY_COMMAND: u32 = 357;
pub const KEY_COPY: u32 = 358;
pub const KEY_CREATE: u32 = 359;
pub const KEY_END: u32 = 360;
pub const KEY_EXIT: u32 = 361;
pub const KEY_FIND: u32 = 362;
pub const KEY_HELP: u32 = 363;
pub const KEY_MARK: u32 = 364;
pub const KEY_MESSAGE: u32 = 365;
pub const KEY_MOVE: u32 = 366;
pub const KEY_NEXT: u32 = 367;
pub const KEY_OPEN: u32 = 368;
pub const KEY_OPTIONS: u32 = 369;
pub const KEY_PREVIOUS: u32 = 370;
pub const KEY_REDO: u32 = 371;
pub const KEY_REFERENCE: u32 = 372;
pub const KEY_REFRESH: u32 = 373;
pub const KEY_REPLACE: u32 = 374;
pub const KEY_RESTART: u32 = 375;
pub const KEY_RESUME: u32 = 376;
pub const KEY_SAVE: u32 = 377;
pub const KEY_SBEG: u32 = 378;
pub const KEY_SCANCEL: u32 = 379;
pub const KEY_SCOMMAND: u32 = 380;
pub const KEY_SCOPY: u32 = 381;
pub const KEY_SCREATE: u32 = 382;
pub const KEY_SDC: u32 = 383;
pub const KEY_SDL: u32 = 384;
pub const KEY_SELECT: u32 = 385;
pub const KEY_SEND: u32 = 386;
pub const KEY_SEOL: u32 = 387;
pub const KEY_SEXIT: u32 = 388;
pub const KEY_SFIND: u32 = 389;
pub const KEY_SHELP: u32 = 390;
pub const KEY_SHOME: u32 = 391;
pub const KEY_SIC: u32 = 392;
pub const KEY_SLEFT: u32 = 393;
pub const KEY_SMESSAGE: u32 = 394;
pub const KEY_SMOVE: u32 = 395;
pub const KEY_SNEXT: u32 = 396;
pub const KEY_SOPTIONS: u32 = 397;
pub const KEY_SPREVIOUS: u32 = 398;
pub const KEY_SPRINT: u32 = 399;
pub const KEY_SREDO: u32 = 400;
pub const KEY_SREPLACE: u32 = 401;
pub const KEY_SRIGHT: u32 = 402;
pub const KEY_SRSUME: u32 = 403;
pub const KEY_SSAVE: u32 = 404;
pub const KEY_SSUSPEND: u32 = 405;
pub const KEY_SUNDO: u32 = 406;
pub const KEY_SUSPEND: u32 = 407;
pub const KEY_UNDO: u32 = 408;
pub const KEY_MOUSE: u32 = 409;
pub const KEY_RESIZE: u32 = 410;
pub const KEY_EVENT: u32 = 411;
pub const KEY_MAX: u32 = 511;
pub const NCURSES_BUTTON_RELEASED: u32 = 1;
pub const NCURSES_BUTTON_PRESSED: u32 = 2;
pub const NCURSES_BUTTON_CLICKED: u32 = 4;
pub const NCURSES_DOUBLE_CLICKED: u32 = 8;
pub const NCURSES_TRIPLE_CLICKED: u32 = 16;
pub const NCURSES_RESERVED_EVENT: u32 = 32;
pub const TRACE_DISABLE: u32 = 0;
pub const TRACE_TIMES: u32 = 1;
pub const TRACE_TPUTS: u32 = 2;
pub const TRACE_UPDATE: u32 = 4;
pub const TRACE_MOVE: u32 = 8;
pub const TRACE_CHARPUT: u32 = 16;
pub const TRACE_ORDINARY: u32 = 31;
pub const TRACE_CALLS: u32 = 32;
pub const TRACE_VIRTPUT: u32 = 64;
pub const TRACE_IEVENT: u32 = 128;
pub const TRACE_BITS: u32 = 256;
pub const TRACE_ICALLS: u32 = 512;
pub const TRACE_CCALLS: u32 = 1024;
pub const TRACE_DATABASE: u32 = 2048;
pub const TRACE_ATTRS: u32 = 4096;
pub const TRACE_SHIFT: u32 = 13;
pub const TRACE_MAXIMUM: u32 = 8191;
pub const IPSEC_PORT_ANY: u32 = 0;
pub const IPSEC_ULPROTO_ANY: u32 = 255;
pub const IPSEC_PROTO_ANY: u32 = 255;
pub const IPSEC_MODE_ANY: u32 = 0;
pub const IPSEC_MODE_TRANSPORT: u32 = 1;
pub const IPSEC_MODE_TUNNEL: u32 = 2;
pub const IPSEC_DIR_ANY: u32 = 0;
pub const IPSEC_DIR_INBOUND: u32 = 1;
pub const IPSEC_DIR_OUTBOUND: u32 = 2;
pub const IPSEC_DIR_MAX: u32 = 3;
pub const IPSEC_DIR_INVALID: u32 = 4;
pub const IPSEC_POLICY_DISCARD: u32 = 0;
pub const IPSEC_POLICY_NONE: u32 = 1;
pub const IPSEC_POLICY_IPSEC: u32 = 2;
pub const IPSEC_POLICY_ENTRUST: u32 = 3;
pub const IPSEC_POLICY_BYPASS: u32 = 4;
pub const IPSEC_POLICY_GENERATE: u32 = 5;
pub const IPSEC_LEVEL_DEFAULT: u32 = 0;
pub const IPSEC_LEVEL_USE: u32 = 1;
pub const IPSEC_LEVEL_REQUIRE: u32 = 2;
pub const IPSEC_LEVEL_UNIQUE: u32 = 3;
pub const IPSEC_MANUAL_REQID_MAX: u32 = 16383;
pub const IPSEC_REPLAYWSIZE: u32 = 32;
pub const IPSEC_KEY_AUTH_MAX_BYTES: u32 = 256;
pub const IPSEC_KEY_ENCRYPT_MAX_BYTES: u32 = 256;
pub const IPSEC_MAX_WAKE_PKT_LEN: u32 = 100;
pub const IPCOMP_OUI: u32 = 1;
pub const IPCOMP_DEFLATE: u32 = 2;
pub const IPCOMP_LZS: u32 = 3;
pub const IPCOMP_MAX: u32 = 4;
pub const IPCOMP_CPI_NEGOTIATE_MIN: u32 = 256;
pub const AFORK: u32 = 1;
pub const ASU: u32 = 2;
pub const ACOMPAT: u32 = 4;
pub const ACORE: u32 = 8;
pub const AXSIG: u32 = 16;
pub const AHZ: u32 = 64;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &[u8; 30usize] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &[u8; 26usize] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const B_WRITE: u32 = 0;
pub const B_READ: u32 = 1;
pub const B_ASYNC: u32 = 2;
pub const B_NOCACHE: u32 = 4;
pub const B_DELWRI: u32 = 8;
pub const B_LOCKED: u32 = 16;
pub const B_PHYS: u32 = 32;
pub const B_CLUSTER: u32 = 64;
pub const B_PAGEIO: u32 = 128;
pub const B_META: u32 = 256;
pub const B_RAW: u32 = 512;
pub const B_FUA: u32 = 1024;
pub const B_PASSIVE: u32 = 2048;
pub const B_IOSTREAMING: u32 = 4096;
pub const B_THROTTLED_IO: u32 = 8192;
pub const B_ENCRYPTED_IO: u32 = 16384;
pub const B_STATICCONTENT: u32 = 32768;
pub const BUF_WAIT: u32 = 1;
pub const BUF_WRITE_DATA: u32 = 1;
pub const BUF_SKIP_META: u32 = 2;
pub const BUF_INVALIDATE_LOCKED: u32 = 4;
pub const BUF_SKIP_NONLOCKED: u32 = 1;
pub const BUF_SKIP_LOCKED: u32 = 2;
pub const BUF_SCAN_CLEAN: u32 = 4;
pub const BUF_SCAN_DIRTY: u32 = 8;
pub const BUF_NOTIFY_BUSY: u32 = 16;
pub const BUF_RETURNED: u32 = 0;
pub const BUF_RETURNED_DONE: u32 = 1;
pub const BUF_CLAIMED: u32 = 2;
pub const BUF_CLAIMED_DONE: u32 = 3;
pub const BLK_READ: u32 = 1;
pub const BLK_WRITE: u32 = 2;
pub const BLK_META: u32 = 16;
pub const BLK_ONLYVALID: u32 = 2147483648;
pub const CLONE_NOFOLLOW: u32 = 1;
pub const CLONE_NOOWNERCOPY: u32 = 2;
pub const CLONE_ACL: u32 = 4;
pub const _SYS_CONF_H_: u32 = 1;
pub const D_TAPE: u32 = 1;
pub const D_DISK: u32 = 2;
pub const D_TTY: u32 = 3;
pub const DK_FEATURE_BARRIER: u32 = 2;
pub const DK_FEATURE_PRIORITY: u32 = 4;
pub const DK_FEATURE_UNMAP: u32 = 16;
pub const DK_SYNCHRONIZE_OPTION_BARRIER: u32 = 2;
pub const DK_CORESTORAGE_PIN_YOUR_METADATA: u32 = 1;
pub const DK_CORESTORAGE_ENABLE_HOTFILES: u32 = 2;
pub const DK_CORESTORAGE_PIN_YOUR_SWAPFILE: u32 = 4;
pub const DK_PROVISION_TYPE_MAPPED: u32 = 0;
pub const DK_PROVISION_TYPE_DEALLOCATED: u32 = 1;
pub const DK_PROVISION_TYPE_ANCHORED: u32 = 2;
pub const DK_LOCATION_INTERNAL: u32 = 0;
pub const DK_LOCATION_EXTERNAL: u32 = 1;
pub const EV_FD: u32 = 1;
pub const EV_RE: u32 = 1;
pub const EV_WR: u32 = 2;
pub const EV_EX: u32 = 4;
pub const EV_RM: u32 = 8;
pub const EV_MASK: u32 = 15;
pub const EV_RBYTES: u32 = 256;
pub const EV_WBYTES: u32 = 512;
pub const EV_RWBYTES: u32 = 768;
pub const EV_RCLOSED: u32 = 1024;
pub const EV_RCONN: u32 = 2048;
pub const EV_WCLOSED: u32 = 4096;
pub const EV_WCONN: u32 = 8192;
pub const EV_OOB: u32 = 16384;
pub const EV_FIN: u32 = 32768;
pub const EV_RESET: u32 = 65536;
pub const EV_TIMEOUT: u32 = 131072;
pub const EV_DMASK: u32 = 4294967040;
pub const NDFILE: u32 = 25;
pub const NDEXTENT: u32 = 50;
pub const GMONVERSION: u32 = 333945;
pub const HISTFRACTION: u32 = 2;
pub const HASHFRACTION: u32 = 2;
pub const ARCDENSITY: u32 = 2;
pub const MINARCS: u32 = 50;
pub const GMON_PROF_ON: u32 = 0;
pub const GMON_PROF_BUSY: u32 = 1;
pub const GMON_PROF_ERROR: u32 = 2;
pub const GMON_PROF_OFF: u32 = 3;
pub const GMON_MAGIC: u32 = 3203381950;
pub const GMON_MAGIC_64: u32 = 3203381951;
pub const GMONTYPE_SAMPLES: u32 = 1;
pub const GMONTYPE_RAWARCS: u32 = 2;
pub const GMONTYPE_ARCS_ORDERS: u32 = 3;
pub const GMONTYPE_DYLD_STATE: u32 = 4;
pub const GMONTYPE_DYLD2_STATE: u32 = 5;
pub const TANDEM: u32 = 1;
pub const CBREAK: u32 = 2;
pub const LCASE: u32 = 4;
pub const CRMOD: u32 = 16;
pub const RAW: u32 = 32;
pub const ODDP: u32 = 64;
pub const EVENP: u32 = 128;
pub const ANYP: u32 = 192;
pub const NLDELAY: u32 = 768;
pub const TBDELAY: u32 = 3072;
pub const XTABS: u32 = 3072;
pub const CRDELAY: u32 = 12288;
pub const VTDELAY: u32 = 16384;
pub const BSDELAY: u32 = 32768;
pub const ALLDELAY: u32 = 65280;
pub const CRTBS: u32 = 65536;
pub const PRTERA: u32 = 131072;
pub const CRTERA: u32 = 262144;
pub const TILDE: u32 = 524288;
pub const LITOUT: u32 = 2097152;
pub const NOHANG: u32 = 16777216;
pub const L001000: u32 = 33554432;
pub const CRTKIL: u32 = 67108864;
pub const PASS8: u32 = 134217728;
pub const CTLECH: u32 = 268435456;
pub const DECCTQ: u32 = 1073741824;
pub const LCRTBS: u32 = 1;
pub const LPRTERA: u32 = 2;
pub const LCRTERA: u32 = 4;
pub const LTILDE: u32 = 8;
pub const LMDMBUF: u32 = 16;
pub const LLITOUT: u32 = 32;
pub const LTOSTOP: u32 = 64;
pub const LFLUSHO: u32 = 128;
pub const LNOHANG: u32 = 256;
pub const LCRTKIL: u32 = 1024;
pub const LPASS8: u32 = 2048;
pub const LCTLECH: u32 = 4096;
pub const LPENDIN: u32 = 8192;
pub const LDECCTQ: u32 = 16384;
pub const LNOFLSH: u32 = 32768;
pub const OTTYDISC: u32 = 0;
pub const NETLDISC: u32 = 1;
pub const NTTYDISC: u32 = 2;
pub const KDBG_CLASS_MASK: u32 = 4278190080;
pub const KDBG_CLASS_OFFSET: u32 = 24;
pub const KDBG_CLASS_MAX: u32 = 255;
pub const KDBG_SUBCLASS_MASK: u32 = 16711680;
pub const KDBG_SUBCLASS_OFFSET: u32 = 16;
pub const KDBG_SUBCLASS_MAX: u32 = 255;
pub const KDBG_CSC_MASK: u32 = 4294901760;
pub const KDBG_CSC_OFFSET: u32 = 16;
pub const KDBG_CSC_MAX: u32 = 65535;
pub const KDBG_CODE_MASK: u32 = 65532;
pub const KDBG_CODE_OFFSET: u32 = 2;
pub const KDBG_CODE_MAX: u32 = 16383;
pub const KDBG_EVENTID_MASK: u32 = 4294967292;
pub const KDBG_FUNC_MASK: u32 = 3;
pub const DBG_FUNC_START: u32 = 1;
pub const DBG_FUNC_END: u32 = 2;
pub const DBG_FUNC_NONE: u32 = 0;
pub const DBG_MACH: u32 = 1;
pub const DBG_NETWORK: u32 = 2;
pub const DBG_FSYSTEM: u32 = 3;
pub const DBG_BSD: u32 = 4;
pub const DBG_IOKIT: u32 = 5;
pub const DBG_DRIVERS: u32 = 6;
pub const DBG_TRACE: u32 = 7;
pub const DBG_DLIL: u32 = 8;
pub const DBG_PTHREAD: u32 = 9;
pub const DBG_CORESTORAGE: u32 = 10;
pub const DBG_CG: u32 = 11;
pub const DBG_MONOTONIC: u32 = 12;
pub const DBG_MISC: u32 = 20;
pub const DBG_SECURITY: u32 = 30;
pub const DBG_DYLD: u32 = 31;
pub const DBG_QT: u32 = 32;
pub const DBG_APPS: u32 = 33;
pub const DBG_LAUNCHD: u32 = 34;
pub const DBG_SILICON: u32 = 35;
pub const DBG_PERF: u32 = 37;
pub const DBG_IMPORTANCE: u32 = 38;
pub const DBG_BANK: u32 = 40;
pub const DBG_XPC: u32 = 41;
pub const DBG_ATM: u32 = 42;
pub const DBG_ARIADNE: u32 = 43;
pub const DBG_DAEMON: u32 = 44;
pub const DBG_ENERGYTRACE: u32 = 45;
pub const DBG_DISPATCH: u32 = 46;
pub const DBG_IMG: u32 = 49;
pub const DBG_UMALLOC: u32 = 51;
pub const DBG_TURNSTILE: u32 = 53;
pub const DBG_AUDIO: u32 = 54;
pub const DBG_MIG: u32 = 255;
pub const DBG_MACH_EXCP_KTRAP_x86: u32 = 2;
pub const DBG_MACH_EXCP_DFLT: u32 = 3;
pub const DBG_MACH_EXCP_SYNC_ARM: u32 = 3;
pub const DBG_MACH_EXCP_IFLT: u32 = 4;
pub const DBG_MACH_EXCP_SERR_ARM: u32 = 4;
pub const DBG_MACH_EXCP_INTR: u32 = 5;
pub const DBG_MACH_EXCP_ALNG: u32 = 6;
pub const DBG_MACH_EXCP_UTRAP_x86: u32 = 7;
pub const DBG_MACH_EXCP_FP: u32 = 8;
pub const DBG_MACH_EXCP_DECI: u32 = 9;
pub const DBG_MACH_CHUD: u32 = 10;
pub const DBG_MACH_SIGNPOST: u32 = 10;
pub const DBG_MACH_EXCP_SC: u32 = 12;
pub const DBG_MACH_EXCP_TRACE: u32 = 13;
pub const DBG_MACH_EXCP_EMUL: u32 = 14;
pub const DBG_MACH_IHDLR: u32 = 16;
pub const DBG_MACH_IPC: u32 = 32;
pub const DBG_MACH_RESOURCE: u32 = 37;
pub const DBG_MACH_VM: u32 = 48;
pub const DBG_MACH_LEAKS: u32 = 49;
pub const DBG_MACH_WORKINGSET: u32 = 50;
pub const DBG_MACH_SCHED: u32 = 64;
pub const DBG_MACH_MSGID_INVALID: u32 = 80;
pub const DBG_MACH_LOCKS: u32 = 96;
pub const DBG_MACH_PMAP: u32 = 112;
pub const DBG_MACH_CLOCK: u32 = 128;
pub const DBG_MACH_MP: u32 = 144;
pub const DBG_MACH_VM_PRESSURE: u32 = 160;
pub const DBG_MACH_STACKSHOT: u32 = 161;
pub const DBG_MACH_SFI: u32 = 162;
pub const DBG_MACH_ENERGY_PERF: u32 = 163;
pub const DBG_MACH_SYSDIAGNOSE: u32 = 164;
pub const DBG_MACH_ZALLOC: u32 = 165;
pub const DBG_MACH_THREAD_GROUP: u32 = 166;
pub const DBG_MACH_COALITION: u32 = 167;
pub const DBG_MACH_SHAREDREGION: u32 = 168;
pub const DBG_MACH_SCHED_CLUTCH: u32 = 169;
pub const DBG_MACH_IO: u32 = 170;
pub const DBG_MACH_WORKGROUP: u32 = 171;
pub const DBG_MACH_HV: u32 = 172;
pub const DBG_MACH_KCOV: u32 = 173;
pub const DBG_MACH_MACHDEP_EXCP_SC_x86: u32 = 174;
pub const DBG_MACH_MACHDEP_EXCP_SC_ARM: u32 = 175;
pub const DBC_MACH_IO_MMIO_READ: u32 = 1;
pub const DBC_MACH_IO_MMIO_WRITE: u32 = 2;
pub const DBC_MACH_IO_PHYS_READ: u32 = 3;
pub const DBC_MACH_IO_PHYS_WRITE: u32 = 4;
pub const DBC_MACH_IO_PORTIO_READ: u32 = 5;
pub const DBC_MACH_IO_PORTIO_WRITE: u32 = 6;
pub const DBG_INTR_TYPE_UNKNOWN: u32 = 0;
pub const DBG_INTR_TYPE_IPI: u32 = 1;
pub const DBG_INTR_TYPE_TIMER: u32 = 2;
pub const DBG_INTR_TYPE_OTHER: u32 = 3;
pub const DBG_INTR_TYPE_PMI: u32 = 4;
pub const MACH_SCHED: u32 = 0;
pub const MACH_STACK_ATTACH: u32 = 1;
pub const MACH_STACK_HANDOFF: u32 = 2;
pub const MACH_CALL_CONT: u32 = 3;
pub const MACH_CALLOUT: u32 = 4;
pub const MACH_STACK_DETACH: u32 = 5;
pub const MACH_MAKE_RUNNABLE: u32 = 6;
pub const MACH_PROMOTE: u32 = 7;
pub const MACH_DEMOTE: u32 = 8;
pub const MACH_IDLE: u32 = 9;
pub const MACH_STACK_DEPTH: u32 = 10;
pub const MACH_MOVED: u32 = 11;
pub const MACH_PSET_LOAD_AVERAGE: u32 = 12;
pub const MACH_AMP_DEBUG: u32 = 13;
pub const MACH_FAILSAFE: u32 = 14;
pub const MACH_BLOCK: u32 = 15;
pub const MACH_WAIT: u32 = 16;
pub const MACH_GET_URGENCY: u32 = 20;
pub const MACH_URGENCY: u32 = 21;
pub const MACH_REDISPATCH: u32 = 22;
pub const MACH_REMOTE_AST: u32 = 23;
pub const MACH_SCHED_CHOOSE_PROCESSOR: u32 = 24;
pub const MACH_DEEP_IDLE: u32 = 25;
pub const MACH_CPU_THROTTLE_DISABLE: u32 = 27;
pub const MACH_RW_PROMOTE: u32 = 28;
pub const MACH_RW_DEMOTE: u32 = 29;
pub const MACH_SCHED_MAINTENANCE: u32 = 31;
pub const MACH_DISPATCH: u32 = 32;
pub const MACH_QUANTUM_HANDOFF: u32 = 33;
pub const MACH_MULTIQ_DEQUEUE: u32 = 34;
pub const MACH_SCHED_THREAD_SWITCH: u32 = 35;
pub const MACH_SCHED_SMT_BALANCE: u32 = 36;
pub const MACH_REMOTE_DEFERRED_AST: u32 = 37;
pub const MACH_REMOTE_CANCEL_AST: u32 = 38;
pub const MACH_SCHED_CHANGE_PRIORITY: u32 = 39;
pub const MACH_SCHED_UPDATE_REC_CORES: u32 = 40;
pub const MACH_STACK_WAIT: u32 = 41;
pub const MACH_THREAD_BIND: u32 = 42;
pub const MACH_WAITQ_PROMOTE: u32 = 43;
pub const MACH_WAITQ_DEMOTE: u32 = 44;
pub const MACH_SCHED_LOAD: u32 = 45;
pub const MACH_REC_CORES_FAILSAFE: u32 = 46;
pub const MACH_SCHED_QUANTUM_EXPIRED: u32 = 47;
pub const MACH_EXEC_PROMOTE: u32 = 48;
pub const MACH_EXEC_DEMOTE: u32 = 49;
pub const MACH_AMP_SIGNAL_SPILL: u32 = 50;
pub const MACH_AMP_STEAL: u32 = 51;
pub const MACH_SCHED_LOAD_EFFECTIVE: u32 = 52;
pub const MACH_QUIESCENT_COUNTER: u32 = 56;
pub const MACH_TURNSTILE_USER_CHANGE: u32 = 57;
pub const MACH_AMP_RECOMMENDATION_CHANGE: u32 = 58;
pub const MACH_AMP_PERFCTL_POLICY_CHANGE: u32 = 59;
pub const MACH_TURNSTILE_KERNEL_CHANGE: u32 = 64;
pub const MACH_SCHED_WI_AUTO_JOIN: u32 = 65;
pub const MACH_SCHED_WI_DEFERRED_FINISH: u32 = 66;
pub const MACH_SET_RT_DEADLINE: u32 = 67;
pub const MACH_CANCEL_RT_DEADLINE: u32 = 68;
pub const MACH_RT_SIGNAL_SPILL: u32 = 69;
pub const MACH_RT_STEAL: u32 = 70;
pub const MACH_PENDING_AST_URGENT: u32 = 71;
pub const MACH_SCHED_THREAD_SELECT: u32 = 72;
pub const MACH_SCHED_NEXT_PROCESSOR: u32 = 73;
pub const MACH_PSET_AVG_EXEC_TIME: u32 = 80;
pub const MACH_SUSPEND_USERSPACE: u32 = 81;
pub const MACH_PREEMPTION_EXPIRED: u32 = 82;
pub const MACH_FLOOR_PROMOTE: u32 = 83;
pub const MACH_FLOOR_DEMOTE: u32 = 84;
pub const MACH_INT_MASKED_EXPIRED: u32 = 85;
pub const MACH_INT_HANDLED_EXPIRED: u32 = 86;
pub const MACH_UPDATE_POWERED_CORES: u32 = 88;
pub const MACH_MODE_DEMOTE_THROTTLED: u32 = 89;
pub const MACH_MODE_DEMOTE_FAILSAFE: u32 = 90;
pub const MACH_MODE_DEMOTE_RT_RESTRICTED: u32 = 91;
pub const MACH_MODE_UNDEMOTE_THROTTLED: u32 = 92;
pub const MACH_MODE_UNDEMOTE_FAILSAFE: u32 = 93;
pub const MACH_MODE_UNDEMOTE_RT_RESTRICTED: u32 = 94;
pub const MACH_INT_MASKED_RESET: u32 = 95;
pub const MACH_SCHED_CLUTCH_ROOT_BUCKET_STATE: u32 = 0;
pub const MACH_SCHED_CLUTCH_TG_BUCKET_STATE: u32 = 1;
pub const MACH_SCHED_CLUTCH_THREAD_SELECT: u32 = 2;
pub const MACH_SCHED_CLUTCH_THREAD_STATE: u32 = 3;
pub const MACH_SCHED_CLUTCH_TG_BUCKET_PRI: u32 = 4;
pub const MACH_SCHED_EDGE_CLUSTER_OVERLOAD: u32 = 5;
pub const MACH_SCHED_EDGE_STEAL: u32 = 6;
pub const MACH_SCHED_EDGE_REBAL_RUNNABLE: u32 = 7;
pub const MACH_SCHED_EDGE_REBAL_RUNNING: u32 = 8;
pub const MACH_SCHED_EDGE_SHOULD_YIELD: u32 = 9;
pub const MACH_SCHED_CLUTCH_THR_COUNT: u32 = 10;
pub const MACH_SCHED_EDGE_LOAD_AVG: u32 = 11;
pub const MACH_SCHED_EDGE_CLUSTER_SHARED_LOAD: u32 = 12;
pub const MACH_SCHED_EDGE_RSRC_HEAVY_THREAD: u32 = 13;
pub const MACH_SCHED_EDGE_SHARED_RSRC_MIGRATE: u32 = 14;
pub const WORKGROUP_INTERVAL_CREATE: u32 = 0;
pub const WORKGROUP_INTERVAL_DESTROY: u32 = 1;
pub const WORKGROUP_INTERVAL_CHANGE: u32 = 2;
pub const WORKGROUP_INTERVAL_START: u32 = 3;
pub const WORKGROUP_INTERVAL_UPDATE: u32 = 4;
pub const WORKGROUP_INTERVAL_FINISH: u32 = 5;
pub const WORKGROUP_INTERVAL_SET_WORKLOAD_ID: u32 = 6;
pub const WORKGROUP_INTERVAL_SET_WORKLOAD_ID_NAME: u32 = 7;
pub const KCOV_STKSZ_THRESHOLD_ABOVE: u32 = 0;
pub const KCOV_STKSZ_THRESHOLD_BELOW: u32 = 1;
pub const KCOV_STKSZ_DELTA: u32 = 2;
pub const MACH_MULTIQ_BOUND: u32 = 1;
pub const MACH_MULTIQ_GROUP: u32 = 2;
pub const MACH_MULTIQ_GLOBAL: u32 = 3;
pub const DBG_ZERO_FILL_FAULT: u32 = 1;
pub const DBG_PAGEIN_FAULT: u32 = 2;
pub const DBG_COW_FAULT: u32 = 3;
pub const DBG_CACHE_HIT_FAULT: u32 = 4;
pub const DBG_NZF_PAGE_FAULT: u32 = 5;
pub const DBG_GUARD_FAULT: u32 = 6;
pub const DBG_PAGEINV_FAULT: u32 = 7;
pub const DBG_PAGEIND_FAULT: u32 = 8;
pub const DBG_COMPRESSOR_FAULT: u32 = 9;
pub const DBG_COMPRESSOR_SWAPIN_FAULT: u32 = 10;
pub const DBG_COR_FAULT: u32 = 11;
pub const MACH_TASK_SUSPEND: u32 = 0;
pub const MACH_TASK_RESUME: u32 = 1;
pub const MACH_THREAD_SET_VOUCHER: u32 = 2;
pub const MACH_IPC_MSG_SEND: u32 = 3;
pub const MACH_IPC_MSG_RECV: u32 = 4;
pub const MACH_IPC_MSG_RECV_VOUCHER_REFUSED: u32 = 5;
pub const MACH_IPC_KMSG_FREE: u32 = 6;
pub const MACH_IPC_VOUCHER_CREATE: u32 = 7;
pub const MACH_IPC_VOUCHER_CREATE_ATTR_DATA: u32 = 8;
pub const MACH_IPC_VOUCHER_DESTROY: u32 = 9;
pub const MACH_IPC_KMSG_INFO: u32 = 10;
pub const MACH_IPC_KMSG_LINK: u32 = 11;
pub const MACH_IPC_PORT_ENTRY_MODIFY: u32 = 12;
pub const MACH_IPC_DESTROY_GUARDED_DESC: u32 = 13;
pub const MACH_THREAD_GROUP_NEW: u32 = 0;
pub const MACH_THREAD_GROUP_FREE: u32 = 1;
pub const MACH_THREAD_GROUP_SET: u32 = 2;
pub const MACH_THREAD_GROUP_NAME: u32 = 3;
pub const MACH_THREAD_GROUP_NAME_FREE: u32 = 4;
pub const MACH_THREAD_GROUP_FLAGS: u32 = 5;
pub const MACH_THREAD_GROUP_BLOCK: u32 = 6;
pub const MACH_THREAD_GROUP_PREADOPT: u32 = 7;
pub const MACH_THREAD_GROUP_PREADOPT_NEXTTIME: u32 = 8;
pub const MACH_THREAD_GROUP_PREADOPT_CLEAR: u32 = 9;
pub const MACH_THREAD_GROUP_PREADOPT_NA: u32 = 10;
pub const MACH_COALITION_NEW: u32 = 0;
pub const MACH_COALITION_FREE: u32 = 1;
pub const MACH_COALITION_ADOPT: u32 = 2;
pub const MACH_COALITION_REMOVE: u32 = 3;
pub const MACH_COALITION_THREAD_GROUP_SET: u32 = 4;
pub const PMAP__CREATE: u32 = 0;
pub const PMAP__DESTROY: u32 = 1;
pub const PMAP__PROTECT: u32 = 2;
pub const PMAP__PAGE_PROTECT: u32 = 3;
pub const PMAP__ENTER: u32 = 4;
pub const PMAP__REMOVE: u32 = 5;
pub const PMAP__NEST: u32 = 6;
pub const PMAP__UNNEST: u32 = 7;
pub const PMAP__FLUSH_TLBS: u32 = 8;
pub const PMAP__UPDATE_INTERRUPT: u32 = 9;
pub const PMAP__ATTRIBUTE_CLEAR: u32 = 10;
pub const PMAP__REUSABLE: u32 = 11;
pub const PMAP__QUERY_RESIDENT: u32 = 12;
pub const PMAP__FLUSH_KERN_TLBS: u32 = 13;
pub const PMAP__FLUSH_DELAYED_TLBS: u32 = 14;
pub const PMAP__FLUSH_TLBS_TO: u32 = 15;
pub const PMAP__FLUSH_EPT: u32 = 16;
pub const PMAP__FAST_FAULT: u32 = 17;
pub const PMAP__SWITCH: u32 = 18;
pub const PMAP__TTE: u32 = 19;
pub const PMAP__SWITCH_USER_TTB: u32 = 20;
pub const PMAP__UPDATE_CACHING: u32 = 21;
pub const PMAP__ATTRIBUTE_CLEAR_RANGE: u32 = 22;
pub const PMAP__CLEAR_USER_TTB: u32 = 23;
pub const PMAP__IOMMU_INIT: u32 = 24;
pub const PMAP__IOMMU_IOVMALLOC: u32 = 25;
pub const PMAP__IOMMU_IOVMFREE: u32 = 26;
pub const PMAP__IOMMU_MAP: u32 = 27;
pub const PMAP__IOMMU_UNMAP: u32 = 28;
pub const PMAP__IOMMU_IOCTL: u32 = 29;
pub const PMAP__IOMMU_GRANT_PAGE: u32 = 30;
pub const PMAP__BATCH_UPDATE_CACHING: u32 = 31;
pub const MACH_EPOCH_CHANGE: u32 = 0;
pub const MACH_BRIDGE_RCV_TS: u32 = 1;
pub const MACH_BRIDGE_REMOTE_TIME: u32 = 2;
pub const MACH_BRIDGE_RESET_TS: u32 = 3;
pub const MACH_BRIDGE_TS_PARAMS: u32 = 4;
pub const MACH_BRIDGE_SKIP_TS: u32 = 5;
pub const MACH_BRIDGE_TS_MISMATCH: u32 = 6;
pub const MACH_BRIDGE_OBSV_RATE: u32 = 7;
pub const MICROSTACKSHOT_RECORD: u32 = 0;
pub const MICROSTACKSHOT_GATHER: u32 = 1;
pub const STACKSHOT_RECORD: u32 = 2;
pub const STACKSHOT_RECORD_SHORT: u32 = 3;
pub const STACKSHOT_KERN_RECORD: u32 = 4;
pub const SYSDIAGNOSE_NOTIFY_USER: u32 = 0;
pub const SYSDIAGNOSE_FULL: u32 = 1;
pub const SYSDIAGNOSE_STACKSHOT: u32 = 2;
pub const SYSDIAGNOSE_TAILSPIN: u32 = 3;
pub const SFI_SET_WINDOW: u32 = 0;
pub const SFI_CANCEL_WINDOW: u32 = 1;
pub const SFI_SET_CLASS_OFFTIME: u32 = 2;
pub const SFI_CANCEL_CLASS_OFFTIME: u32 = 3;
pub const SFI_THREAD_DEFER: u32 = 4;
pub const SFI_OFF_TIMER: u32 = 5;
pub const SFI_ON_TIMER: u32 = 6;
pub const SFI_WAIT_CANCELED: u32 = 7;
pub const SFI_PID_SET_MANAGED: u32 = 8;
pub const SFI_PID_CLEAR_MANAGED: u32 = 9;
pub const SFI_GLOBAL_DEFER: u32 = 10;
pub const ZALLOC_ZCRAM: u32 = 0;
pub const RMON_ENABLE_CPUUSAGE_MONITOR: u32 = 1;
pub const RMON_CPUUSAGE_VIOLATED: u32 = 2;
pub const RMON_CPUUSAGE_SUSPENDED: u32 = 3;
pub const RMON_CPUUSAGE_VIOLATED_K32A: u32 = 4;
pub const RMON_CPUUSAGE_VIOLATED_K32B: u32 = 5;
pub const RMON_CPUUSAGE_RESUMED: u32 = 6;
pub const RMON_DISABLE_CPUUSAGE_MONITOR: u32 = 15;
pub const RMON_ENABLE_CPUWAKES_MONITOR: u32 = 17;
pub const RMON_CPUWAKES_VIOLATED: u32 = 18;
pub const RMON_CPUWAKES_VIOLATED_K32A: u32 = 20;
pub const RMON_CPUWAKES_VIOLATED_K32B: u32 = 21;
pub const RMON_DISABLE_CPUWAKES_MONITOR: u32 = 31;
pub const RMON_ENABLE_IO_MONITOR: u32 = 33;
pub const RMON_LOGWRITES_VIOLATED: u32 = 34;
pub const RMON_PHYSWRITES_VIOLATED: u32 = 35;
pub const RMON_LOGWRITES_VIOLATED_K32A: u32 = 36;
pub const RMON_LOGWRITES_VIOLATED_K32B: u32 = 37;
pub const RMON_DISABLE_IO_MONITOR: u32 = 47;
pub const HV_X86_ENTER: u32 = 0;
pub const HV_X86_ENTER_ERROR: u32 = 1;
pub const HV_X86_TRAP_TASK: u32 = 2;
pub const HV_X86_TRAP_THREAD: u32 = 3;
pub const HV_X86_INTERRUPT_INJECT: u32 = 4;
pub const HV_X86_INTERRUPT_RECV: u32 = 5;
pub const HV_X86_INTERRUPT_SEND: u32 = 6;
pub const HV_X86_IPI_SEND: u32 = 7;
pub const HV_X86_NMI_INJECT: u32 = 8;
pub const HV_X86_NMI_SEND: u32 = 9;
pub const HV_X86_LSC_HIT: u32 = 10;
pub const HV_X86_LSC_INSERT: u32 = 11;
pub const HV_X86_LSC_INSERT_IMM32: u32 = 12;
pub const HV_X86_LSC_INVALID: u32 = 13;
pub const HV_X86_LSC_INVALIDATE: u32 = 14;
pub const HV_X86_LSC_MISS: u32 = 15;
pub const HV_X86_TIMER_CANCEL: u32 = 16;
pub const HV_X86_TIMER_FIRE: u32 = 17;
pub const HV_X86_TIMER_SCHEDULE: u32 = 18;
pub const HV_X86_APIC_ACCESS_EXIT: u32 = 19;
pub const HV_X86_APIC_WRITE_EXIT: u32 = 20;
pub const HV_X86_EPT_VIOLATION_EXIT: u32 = 21;
pub const HV_X86_EXC_NMI_EXIT: u32 = 22;
pub const HV_X86_HLT_EXIT: u32 = 23;
pub const HV_X86_IO_EXIT: u32 = 24;
pub const HV_X86_IRQ_EXIT: u32 = 25;
pub const HV_X86_IRQ_WND_EXIT: u32 = 26;
pub const HV_X86_MOV_DR_EXIT: u32 = 27;
pub const HV_X86_NMI_WND_EXIT: u32 = 28;
pub const HV_X86_RDMSR_EXIT: u32 = 29;
pub const HV_X86_RDPMC_EXIT: u32 = 30;
pub const HV_X86_TPR_THRESHOLD_EXIT: u32 = 31;
pub const HV_X86_VMX_TIMER_EXPIRED_EXIT: u32 = 32;
pub const HV_X86_WRMSR_EXIT: u32 = 33;
pub const HV_X86_VCPU_READ_APIC_TRAP: u32 = 34;
pub const HV_X86_VCPU_READ_VMCS_TRAP: u32 = 35;
pub const HV_X86_VCPU_RUN_TRAP: u32 = 36;
pub const HV_X86_VCPU_RUN_UNTIL_TRAP: u32 = 37;
pub const HV_X86_VCPU_WRITE_APIC_TRAP: u32 = 38;
pub const HV_X86_VM_ADDRSPACE_CREATE_TRAP: u32 = 39;
pub const HV_X86_VM_ADDRSPACE_DESTROY_TRAP: u32 = 40;
pub const HV_X86_VM_INTR_MSI_TRAP: u32 = 41;
pub const HV_X86_VM_MAP_TRAP: u32 = 42;
pub const HV_X86_VM_PROTECT_TRAP: u32 = 43;
pub const HV_X86_VM_UNMAP_TRAP: u32 = 44;
pub const HV_X86_TSC_OFFSET_SET: u32 = 45;
pub const DBG_NETIP: u32 = 1;
pub const DBG_NETARP: u32 = 2;
pub const DBG_NETUDP: u32 = 3;
pub const DBG_NETTCP: u32 = 4;
pub const DBG_NETICMP: u32 = 5;
pub const DBG_NETIGMP: u32 = 6;
pub const DBG_NETRIP: u32 = 7;
pub const DBG_NETOSPF: u32 = 8;
pub const DBG_NETISIS: u32 = 9;
pub const DBG_NETSNMP: u32 = 10;
pub const DBG_NETSOCK: u32 = 11;
pub const DBG_NETAARP: u32 = 100;
pub const DBG_NETDDP: u32 = 101;
pub const DBG_NETNBP: u32 = 102;
pub const DBG_NETZIP: u32 = 103;
pub const DBG_NETADSP: u32 = 104;
pub const DBG_NETATP: u32 = 105;
pub const DBG_NETASP: u32 = 106;
pub const DBG_NETAFP: u32 = 107;
pub const DBG_NETRTMP: u32 = 108;
pub const DBG_NETAURP: u32 = 109;
pub const DBG_NETIPSEC: u32 = 128;
pub const DBG_NETVMNET: u32 = 129;
pub const DBG_IOINTC: u32 = 0;
pub const DBG_IOWORKLOOP: u32 = 1;
pub const DBG_IOINTES: u32 = 2;
pub const DBG_IOCLKES: u32 = 3;
pub const DBG_IOCMDQ: u32 = 4;
pub const DBG_IOMCURS: u32 = 5;
pub const DBG_IOMDESC: u32 = 6;
pub const DBG_IOPOWER: u32 = 7;
pub const DBG_IOSERVICE: u32 = 8;
pub const DBG_IOREGISTRY: u32 = 9;
pub const DBG_IOSTORAGE: u32 = 32;
pub const DBG_IONETWORK: u32 = 33;
pub const DBG_IOKEYBOARD: u32 = 34;
pub const DBG_IOHID: u32 = 35;
pub const DBG_IOAUDIO: u32 = 36;
pub const DBG_IOSERIAL: u32 = 37;
pub const DBG_IOTTY: u32 = 38;
pub const DBG_IOSAM: u32 = 39;
pub const DBG_IOPARALLELATA: u32 = 40;
pub const DBG_IOPARALLELSCSI: u32 = 41;
pub const DBG_IOSATA: u32 = 42;
pub const DBG_IOSAS: u32 = 43;
pub const DBG_IOFIBRECHANNEL: u32 = 44;
pub const DBG_IOUSB: u32 = 45;
pub const DBG_IOBLUETOOTH: u32 = 46;
pub const DBG_IOFIREWIRE: u32 = 47;
pub const DBG_IOINFINIBAND: u32 = 48;
pub const DBG_IOCPUPM: u32 = 49;
pub const DBG_IOGRAPHICS: u32 = 50;
pub const DBG_HIBERNATE: u32 = 51;
pub const DBG_IOTHUNDERBOLT: u32 = 52;
pub const DBG_BOOTER: u32 = 53;
pub const DBG_IOAUDIO2: u32 = 54;
pub const DBG_IOAFK: u32 = 55;
pub const DBG_IOSURFACEPA: u32 = 64;
pub const DBG_IOMDPA: u32 = 65;
pub const DBG_IODARTPA: u32 = 66;
pub const DBG_IOPOINTING: u32 = 35;
pub const DBG_IODISK: u32 = 32;
pub const DBG_DRVSTORAGE: u32 = 1;
pub const DBG_DRVNETWORK: u32 = 2;
pub const DBG_DRVKEYBOARD: u32 = 3;
pub const DBG_DRVHID: u32 = 4;
pub const DBG_DRVAUDIO: u32 = 5;
pub const DBG_DRVSERIAL: u32 = 7;
pub const DBG_DRVSAM: u32 = 8;
pub const DBG_DRVPARALLELATA: u32 = 9;
pub const DBG_DRVPARALLELSCSI: u32 = 10;
pub const DBG_DRVSATA: u32 = 11;
pub const DBG_DRVSAS: u32 = 12;
pub const DBG_DRVFIBRECHANNEL: u32 = 13;
pub const DBG_DRVUSB: u32 = 14;
pub const DBG_DRVBLUETOOTH: u32 = 15;
pub const DBG_DRVFIREWIRE: u32 = 16;
pub const DBG_DRVINFINIBAND: u32 = 17;
pub const DBG_DRVGRAPHICS: u32 = 18;
pub const DBG_DRVSD: u32 = 19;
pub const DBG_DRVNAND: u32 = 20;
pub const DBG_SSD: u32 = 21;
pub const DBG_DRVSPI: u32 = 22;
pub const DBG_DRVWLAN_802_11: u32 = 23;
pub const DBG_DRVSSM: u32 = 24;
pub const DBG_DRVSMC: u32 = 25;
pub const DBG_DRVMACEFIMANAGER: u32 = 26;
pub const DBG_DRVANE: u32 = 27;
pub const DBG_DRVETHERNET: u32 = 28;
pub const DBG_DRVMCC: u32 = 29;
pub const DBG_DRVACCESSORY: u32 = 30;
pub const DBG_SOCDIAGS: u32 = 31;
pub const DBG_DRVVIRTIO: u32 = 32;
pub const DBG_DRVCELLULAR: u32 = 33;
pub const DBG_DRVPOINTING: u32 = 4;
pub const DBG_DRVDISK: u32 = 1;
pub const DBG_DLIL_STATIC: u32 = 1;
pub const DBG_DLIL_PR_MOD: u32 = 2;
pub const DBG_DLIL_IF_MOD: u32 = 3;
pub const DBG_DLIL_PR_FLT: u32 = 4;
pub const DBG_DLIL_IF_FLT: u32 = 5;
pub const DBG_FSRW: u32 = 1;
pub const DBG_DKRW: u32 = 2;
pub const DBG_FSVN: u32 = 3;
pub const DBG_FSLOOOKUP: u32 = 4;
pub const DBG_JOURNAL: u32 = 5;
pub const DBG_IOCTL: u32 = 6;
pub const DBG_BOOTCACHE: u32 = 7;
pub const DBG_HFS: u32 = 8;
pub const DBG_APFS: u32 = 9;
pub const DBG_SMB: u32 = 10;
pub const DBG_MOUNT: u32 = 11;
pub const DBG_EXFAT: u32 = 14;
pub const DBG_MSDOS: u32 = 15;
pub const DBG_ACFS: u32 = 16;
pub const DBG_THROTTLE: u32 = 17;
pub const DBG_DECMP: u32 = 18;
pub const DBG_VFS: u32 = 19;
pub const DBG_LIVEFS: u32 = 20;
pub const DBG_CONTENT_PROT: u32 = 207;
pub const DBG_HFS_UPDATE_ACCTIME: u32 = 1;
pub const DBG_HFS_UPDATE_MODTIME: u32 = 2;
pub const DBG_HFS_UPDATE_CHGTIME: u32 = 4;
pub const DBG_HFS_UPDATE_MODIFIED: u32 = 8;
pub const DBG_HFS_UPDATE_FORCE: u32 = 16;
pub const DBG_HFS_UPDATE_DATEADDED: u32 = 32;
pub const DBG_HFS_UPDATE_MINOR: u32 = 64;
pub const DBG_HFS_UPDATE_SKIPPED: u32 = 128;
pub const DBG_VFS_IO_COMPRESSION_STATS: u32 = 4096;
pub const DBG_BSD_PROC: u32 = 1;
pub const DBG_BSD_MEMSTAT: u32 = 2;
pub const DBG_BSD_KEVENT: u32 = 3;
pub const DBG_BSD_EXCP_SC: u32 = 12;
pub const DBG_BSD_AIO: u32 = 13;
pub const DBG_BSD_SC_EXTENDED_INFO: u32 = 14;
pub const DBG_BSD_SC_EXTENDED_INFO2: u32 = 15;
pub const DBG_BSD_KDEBUG_TEST: u32 = 255;
pub const BSD_PROC_EXIT: u32 = 1;
pub const BSD_PROC_FRCEXIT: u32 = 2;
pub const BSD_PROC_EXEC: u32 = 3;
pub const BSD_PROC_EXITREASON_CREATE: u32 = 4;
pub const BSD_PROC_EXITREASON_COMMIT: u32 = 5;
pub const BSD_MEMSTAT_SCAN: u32 = 1;
pub const BSD_MEMSTAT_JETSAM: u32 = 2;
pub const BSD_MEMSTAT_JETSAM_HIWAT: u32 = 3;
pub const BSD_MEMSTAT_FREEZE: u32 = 4;
pub const BSD_MEMSTAT_FREEZE_SCAN: u32 = 5;
pub const BSD_MEMSTAT_UPDATE: u32 = 6;
pub const BSD_MEMSTAT_IDLE_DEMOTE: u32 = 7;
pub const BSD_MEMSTAT_CLEAR_ERRORS: u32 = 8;
pub const BSD_MEMSTAT_DIRTY_TRACK: u32 = 9;
pub const BSD_MEMSTAT_DIRTY_SET: u32 = 10;
pub const BSD_MEMSTAT_DIRTY_CLEAR: u32 = 11;
pub const BSD_MEMSTAT_FAST_JETSAM: u32 = 15;
pub const BSD_MEMSTAT_COMPACTOR_RUN: u32 = 16;
pub const BSD_MEMSTAT_FREEZE_DISABLE: u32 = 17;
pub const BSD_MEMSTAT_RELAUNCH_FLAGS: u32 = 18;
pub const BSD_KEVENT_KQ_PROCESS_BEGIN: u32 = 1;
pub const BSD_KEVENT_KQ_PROCESS_END: u32 = 2;
pub const BSD_KEVENT_KQWQ_PROCESS_BEGIN: u32 = 3;
pub const BSD_KEVENT_KQWQ_PROCESS_END: u32 = 4;
pub const BSD_KEVENT_KQWQ_BIND: u32 = 5;
pub const BSD_KEVENT_KQWQ_UNBIND: u32 = 6;
pub const BSD_KEVENT_KQWQ_THREQUEST: u32 = 7;
pub const BSD_KEVENT_KQWL_PROCESS_BEGIN: u32 = 8;
pub const BSD_KEVENT_KQWL_PROCESS_END: u32 = 9;
pub const BSD_KEVENT_KQWL_THREQUEST: u32 = 10;
pub const BSD_KEVENT_KQWL_THADJUST: u32 = 11;
pub const BSD_KEVENT_KQ_REGISTER: u32 = 12;
pub const BSD_KEVENT_KQWQ_REGISTER: u32 = 13;
pub const BSD_KEVENT_KQWL_REGISTER: u32 = 14;
pub const BSD_KEVENT_KNOTE_ACTIVATE: u32 = 15;
pub const BSD_KEVENT_KQ_PROCESS: u32 = 16;
pub const BSD_KEVENT_KQWQ_PROCESS: u32 = 17;
pub const BSD_KEVENT_KQWL_PROCESS: u32 = 18;
pub const BSD_KEVENT_KQWL_BIND: u32 = 19;
pub const BSD_KEVENT_KQWL_UNBIND: u32 = 20;
pub const BSD_KEVENT_KNOTE_ENABLE: u32 = 21;
pub const BSD_KEVENT_KNOTE_VANISHED: u32 = 22;
pub const DBG_TRACE_DATA: u32 = 0;
pub const DBG_TRACE_STRING: u32 = 1;
pub const DBG_TRACE_INFO: u32 = 2;
pub const DBG_CS_IO: u32 = 0;
pub const DBG_SEC_KERNEL: u32 = 0;
pub const DBG_SEC_SANDBOX: u32 = 1;
pub const DBG_MT_INSTRS_CYCLES: u32 = 1;
pub const DBG_MT_DEBUG: u32 = 2;
pub const DBG_MT_RESOURCES_PROC_EXIT: u32 = 3;
pub const DBG_MT_RESOURCES_THR_EXIT: u32 = 4;
pub const DBG_MT_TMPTH: u32 = 254;
pub const DBG_MT_TMPCPU: u32 = 255;
pub const DBG_MISC_COREBRIGHTNESS: u32 = 1;
pub const DBG_MISC_VIDEOENG: u32 = 2;
pub const DBG_EVENT: u32 = 16;
pub const DBG_MISC_INSTRUMENTS: u32 = 17;
pub const DBG_MISC_INSTRUMENTSBT: u32 = 18;
pub const DBG_MISC_RUNLOOP_DETAILS: u32 = 19;
pub const DBG_MISC_RUNLOOP_BUSY: u32 = 20;
pub const DBG_MISC_LAYOUT: u32 = 26;
pub const DBG_BUFFER: u32 = 32;
pub const DBG_DYLD_UUID: u32 = 5;
pub const DBG_DYLD_UUID_MAP_A: u32 = 0;
pub const DBG_DYLD_UUID_MAP_B: u32 = 1;
pub const DBG_DYLD_UUID_MAP_32_A: u32 = 2;
pub const DBG_DYLD_UUID_MAP_32_B: u32 = 3;
pub const DBG_DYLD_UUID_MAP_32_C: u32 = 4;
pub const DBG_DYLD_UUID_UNMAP_A: u32 = 5;
pub const DBG_DYLD_UUID_UNMAP_B: u32 = 6;
pub const DBG_DYLD_UUID_UNMAP_32_A: u32 = 7;
pub const DBG_DYLD_UUID_UNMAP_32_B: u32 = 8;
pub const DBG_DYLD_UUID_UNMAP_32_C: u32 = 9;
pub const DBG_DYLD_UUID_SHARED_CACHE_A: u32 = 10;
pub const DBG_DYLD_UUID_SHARED_CACHE_B: u32 = 11;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_A: u32 = 12;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_B: u32 = 13;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_C: u32 = 14;
pub const DBG_DYLD_AOT_UUID_MAP_A: u32 = 15;
pub const DBG_DYLD_AOT_UUID_MAP_B: u32 = 16;
pub const DKIO_DONE: u32 = 1;
pub const DKIO_READ: u32 = 2;
pub const DKIO_ASYNC: u32 = 4;
pub const DKIO_META: u32 = 8;
pub const DKIO_PAGING: u32 = 16;
pub const DKIO_THROTTLE: u32 = 32;
pub const DKIO_PASSIVE: u32 = 64;
pub const DKIO_NOCACHE: u32 = 128;
pub const DKIO_TIER_MASK: u32 = 3840;
pub const DKIO_TIER_SHIFT: u32 = 8;
pub const DKIO_TIER_UPGRADE: u32 = 4096;
pub const DBG_APP_LOGINWINDOW: u32 = 3;
pub const DBG_APP_AUDIO: u32 = 4;
pub const DBG_APP_SYSTEMUI: u32 = 5;
pub const DBG_APP_SIGNPOST: u32 = 10;
pub const DBG_APP_TAL: u32 = 11;
pub const DBG_APP_APPKIT: u32 = 12;
pub const DBG_APP_UIKIT: u32 = 13;
pub const DBG_APP_DFR: u32 = 14;
pub const DBG_APP_LAYOUT: u32 = 15;
pub const DBG_APP_COREDATA: u32 = 16;
pub const DBG_APP_RUNLOOP_BASIC: u32 = 17;
pub const DBG_APP_RUNLOOP_ADVANCED: u32 = 18;
pub const DBG_APP_SAMBA: u32 = 128;
pub const DBG_APP_EOSSUPPORT: u32 = 129;
pub const DBG_APP_MACEFIMANAGER: u32 = 130;
pub const OPEN_THROTTLE_WINDOW: u32 = 1;
pub const PROCESS_THROTTLED: u32 = 2;
pub const IO_THROTTLE_DISABLE: u32 = 3;
pub const IO_TIER_UPL_MISMATCH: u32 = 4;
pub const IMP_ASSERTION: u32 = 16;
pub const IMP_BOOST: u32 = 17;
pub const IMP_MSG: u32 = 18;
pub const IMP_WATCHPORT: u32 = 19;
pub const IMP_TASK_SUPPRESSION: u32 = 23;
pub const IMP_TASK_APPTYPE: u32 = 24;
pub const IMP_UPDATE: u32 = 25;
pub const IMP_USYNCH_QOS_OVERRIDE: u32 = 26;
pub const IMP_DONOR_CHANGE: u32 = 27;
pub const IMP_MAIN_THREAD_QOS: u32 = 28;
pub const IMP_SYNC_IPC_QOS: u32 = 29;
pub const IMP_TASK_POLICY_DARWIN_BG: u32 = 33;
pub const IMP_TASK_POLICY_IOPOL: u32 = 34;
pub const IMP_TASK_POLICY_IO: u32 = 35;
pub const IMP_TASK_POLICY_PASSIVE_IO: u32 = 36;
pub const IMP_TASK_POLICY_DARWIN_BG_IOPOL: u32 = 39;
pub const IMP_TASK_POLICY_BOOST: u32 = 41;
pub const IMP_TASK_POLICY_ROLE: u32 = 42;
pub const IMP_TASK_POLICY_TERMINATED: u32 = 44;
pub const IMP_TASK_POLICY_NEW_SOCKETS_BG: u32 = 45;
pub const IMP_TASK_POLICY_SUP_ACTIVE: u32 = 46;
pub const IMP_TASK_POLICY_LATENCY_QOS: u32 = 47;
pub const IMP_TASK_POLICY_THROUGH_QOS: u32 = 48;
pub const IMP_TASK_POLICY_WATCHERS_BG: u32 = 49;
pub const IMP_TASK_POLICY_SFI_MANAGED: u32 = 52;
pub const IMP_TASK_POLICY_ALL_SOCKETS_BG: u32 = 55;
pub const IMP_TASK_POLICY_BASE_LATENCY_AND_THROUGHPUT_QOS: u32 = 57;
pub const IMP_TASK_POLICY_OVERRIDE_LATENCY_AND_THROUGHPUT_QOS: u32 = 58;
pub const IMP_TASK_POLICY_PIDBIND_BG: u32 = 50;
pub const IMP_TASK_POLICY_QOS_OVERRIDE: u32 = 54;
pub const IMP_TASK_POLICY_QOS_AND_RELPRIO: u32 = 56;
pub const IMP_TASK_POLICY_QOS_WORKQ_OVERRIDE: u32 = 59;
pub const IMP_TASK_POLICY_QOS_PROMOTE: u32 = 60;
pub const IMP_TASK_POLICY_QOS_KEVENT_OVERRIDE: u32 = 61;
pub const IMP_TASK_POLICY_QOS_IPC_OVERRIDE: u32 = 61;
pub const IMP_TASK_POLICY_QOS_SERVICER_OVERRIDE: u32 = 62;
pub const IMP_TASK_POLICY_IOTIER_KEVENT_OVERRIDE: u32 = 63;
pub const IMP_TASK_POLICY_WI_DRIVEN: u32 = 64;
pub const IMP_HOLD: u32 = 2;
pub const IMP_DROP: u32 = 4;
pub const IMP_EXTERN: u32 = 8;
pub const IMP_BOOSTED: u32 = 1;
pub const IMP_UNBOOSTED: u32 = 2;
pub const IMP_MSG_SEND: u32 = 1;
pub const IMP_MSG_DELV: u32 = 2;
pub const IMP_UPDATE_TASK_CREATE: u32 = 1;
pub const IMP_USYNCH_ADD_OVERRIDE: u32 = 0;
pub const IMP_USYNCH_REMOVE_OVERRIDE: u32 = 1;
pub const IMP_DONOR_UPDATE_LIVE_DONOR_STATE: u32 = 0;
pub const IMP_DONOR_INIT_DONOR_STATE: u32 = 1;
pub const IMP_SYNC_IPC_QOS_APPLIED: u32 = 0;
pub const IMP_SYNC_IPC_QOS_REMOVED: u32 = 1;
pub const IMP_SYNC_IPC_QOS_OVERFLOW: u32 = 2;
pub const IMP_SYNC_IPC_QOS_UNDERFLOW: u32 = 3;
pub const TURNSTILE_HEAP_OPERATIONS: u32 = 16;
pub const TURNSTILE_PRIORITY_OPERATIONS: u32 = 32;
pub const TURNSTILE_FREELIST_OPERATIONS: u32 = 48;
pub const THREAD_ADDED_TO_TURNSTILE_WAITQ: u32 = 1;
pub const THREAD_REMOVED_FROM_TURNSTILE_WAITQ: u32 = 2;
pub const THREAD_MOVED_IN_TURNSTILE_WAITQ: u32 = 3;
pub const TURNSTILE_ADDED_TO_TURNSTILE_HEAP: u32 = 4;
pub const TURNSTILE_REMOVED_FROM_TURNSTILE_HEAP: u32 = 5;
pub const TURNSTILE_MOVED_IN_TURNSTILE_HEAP: u32 = 6;
pub const TURNSTILE_ADDED_TO_THREAD_HEAP: u32 = 7;
pub const TURNSTILE_REMOVED_FROM_THREAD_HEAP: u32 = 8;
pub const TURNSTILE_MOVED_IN_THREAD_HEAP: u32 = 9;
pub const TURNSTILE_UPDATE_STOPPED_BY_LIMIT: u32 = 10;
pub const THREAD_NOT_WAITING_ON_TURNSTILE: u32 = 11;
pub const TURNSTILE_PRIORITY_CHANGE: u32 = 1;
pub const THREAD_USER_PROMOTION_CHANGE: u32 = 2;
pub const TURNSTILE_PREPARE: u32 = 1;
pub const TURNSTILE_COMPLETE: u32 = 2;
pub const BANK_ACCOUNT_INFO: u32 = 16;
pub const BANK_TASK_INFO: u32 = 17;
pub const ATM_SUBAID_INFO: u32 = 16;
pub const ATM_GETVALUE_INFO: u32 = 32;
pub const ATM_UNREGISTER_INFO: u32 = 48;
pub const BANK_SETTLE_CPU_TIME: u32 = 1;
pub const BANK_SECURE_ORIGINATOR_CHANGED: u32 = 2;
pub const BANK_SETTLE_ENERGY: u32 = 3;
pub const ATM_MIN_CALLED: u32 = 1;
pub const ATM_LINK_LIST_TRIM: u32 = 2;
pub const ATM_VALUE_REPLACED: u32 = 1;
pub const ATM_VALUE_ADDED: u32 = 2;
pub const ATM_VALUE_UNREGISTERED: u32 = 1;
pub const ATM_VALUE_DIFF_MAILBOX: u32 = 2;
pub const DBG_DAEMON_COREDUET: u32 = 1;
pub const DBG_DAEMON_POWERD: u32 = 2;
pub const DBG_UMALLOC_EXTERNAL: u32 = 1;
pub const DBG_UMALLOC_INTERNAL: u32 = 2;
pub const LCID_PROC_SELF: u32 = 0;
pub const LCID_REMOVE: i32 = -1;
pub const LCID_CREATE: u32 = 0;
pub const KEV_CTL_SUBCLASS: u32 = 2;
pub const KEV_CTL_REGISTERED: u32 = 1;
pub const KEV_CTL_DEREGISTERED: u32 = 2;
pub const MAX_KCTL_NAME: u32 = 96;
pub const MT_FREE: u32 = 0;
pub const MT_DATA: u32 = 1;
pub const MT_HEADER: u32 = 2;
pub const MT_SOCKET: u32 = 3;
pub const MT_PCB: u32 = 4;
pub const MT_RTABLE: u32 = 5;
pub const MT_HTABLE: u32 = 6;
pub const MT_ATABLE: u32 = 7;
pub const MT_SONAME: u32 = 8;
pub const MT_SOOPTS: u32 = 10;
pub const MT_FTABLE: u32 = 11;
pub const MT_RIGHTS: u32 = 12;
pub const MT_IFADDR: u32 = 13;
pub const MT_CONTROL: u32 = 14;
pub const MT_OOBDATA: u32 = 15;
pub const MT_TAG: u32 = 16;
pub const MT_MAX: u32 = 32;
pub const MAX_MBUF_CNAME: u32 = 15;
pub const MCS_DISABLED: u32 = 0;
pub const MCS_ONLINE: u32 = 1;
pub const MCS_PURGING: u32 = 2;
pub const MCS_OFFLINE: u32 = 3;
pub const MAX_MSG_BSIZE: u32 = 1048576;
pub const MSG_MAGIC: u32 = 405601;
pub const _PATH_FORKSPECIFIER: &[u8; 14usize] = b"/..namedfork/\0";
pub const _PATH_DATANAME: &[u8; 5usize] = b"data\0";
pub const _PATH_RSRCNAME: &[u8; 5usize] = b"rsrc\0";
pub const _PATH_RSRCFORKSPEC: &[u8; 18usize] = b"/..namedfork/rsrc\0";
pub const PIPE_SIZE: u32 = 16384;
pub const PIPE_KVAMAX: u32 = 16777216;
pub const BIG_PIPE_SIZE: u32 = 65536;
pub const PIPE_MINDIRECT: u32 = 8192;
pub const PIPE_ASYNC: u32 = 4;
pub const PIPE_WANTR: u32 = 8;
pub const PIPE_WANTW: u32 = 16;
pub const PIPE_WANT: u32 = 32;
pub const PIPE_EOF: u32 = 128;
pub const PIPE_LOCKFL: u32 = 256;
pub const PIPE_LWANT: u32 = 512;
pub const PIPE_DIRECTW: u32 = 1024;
pub const PIPE_DIRECTOK: u32 = 2048;
pub const PIPE_DRAIN: u32 = 8192;
pub const PIPE_WSELECT: u32 = 16384;
pub const PIPE_DEAD: u32 = 32768;
pub const PROC_ALL_PIDS: u32 = 1;
pub const PROC_PGRP_ONLY: u32 = 2;
pub const PROC_TTY_ONLY: u32 = 3;
pub const PROC_UID_ONLY: u32 = 4;
pub const PROC_RUID_ONLY: u32 = 5;
pub const PROC_PPID_ONLY: u32 = 6;
pub const PROC_KDBG_ONLY: u32 = 7;
pub const PROC_FLAG_SYSTEM: u32 = 1;
pub const PROC_FLAG_TRACED: u32 = 2;
pub const PROC_FLAG_INEXIT: u32 = 4;
pub const PROC_FLAG_PPWAIT: u32 = 8;
pub const PROC_FLAG_LP64: u32 = 16;
pub const PROC_FLAG_SLEADER: u32 = 32;
pub const PROC_FLAG_CTTY: u32 = 64;
pub const PROC_FLAG_CONTROLT: u32 = 128;
pub const PROC_FLAG_THCWD: u32 = 256;
pub const PROC_FLAG_PC_THROTTLE: u32 = 512;
pub const PROC_FLAG_PC_SUSP: u32 = 1024;
pub const PROC_FLAG_PC_KILL: u32 = 1536;
pub const PROC_FLAG_PC_MASK: u32 = 1536;
pub const PROC_FLAG_PA_THROTTLE: u32 = 2048;
pub const PROC_FLAG_PA_SUSP: u32 = 4096;
pub const PROC_FLAG_PSUGID: u32 = 8192;
pub const PROC_FLAG_EXEC: u32 = 16384;
pub const PROC_REGION_SUBMAP: u32 = 1;
pub const PROC_REGION_SHARED: u32 = 2;
pub const WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT: u32 = 1;
pub const WQ_EXCEEDED_TOTAL_THREAD_LIMIT: u32 = 2;
pub const WQ_FLAGS_AVAILABLE: u32 = 4;
pub const PROC_FP_SHARED: u32 = 1;
pub const PROC_FP_CLEXEC: u32 = 2;
pub const PROC_FP_GUARDED: u32 = 4;
pub const PROC_FP_CLFORK: u32 = 8;
pub const PROC_FI_GUARD_CLOSE: u32 = 1;
pub const PROC_FI_GUARD_DUP: u32 = 2;
pub const PROC_FI_GUARD_SOCKET_IPC: u32 = 4;
pub const PROC_FI_GUARD_FILEPORT: u32 = 8;
pub const INI_IPV4: u32 = 1;
pub const INI_IPV6: u32 = 2;
pub const TSI_T_REXMT: u32 = 0;
pub const TSI_T_PERSIST: u32 = 1;
pub const TSI_T_KEEP: u32 = 2;
pub const TSI_T_2MSL: u32 = 3;
pub const TSI_T_NTIMERS: u32 = 4;
pub const TSI_S_CLOSED: u32 = 0;
pub const TSI_S_LISTEN: u32 = 1;
pub const TSI_S_SYN_SENT: u32 = 2;
pub const TSI_S_SYN_RECEIVED: u32 = 3;
pub const TSI_S_ESTABLISHED: u32 = 4;
pub const TSI_S__CLOSE_WAIT: u32 = 5;
pub const TSI_S_FIN_WAIT_1: u32 = 6;
pub const TSI_S_CLOSING: u32 = 7;
pub const TSI_S_LAST_ACK: u32 = 8;
pub const TSI_S_FIN_WAIT_2: u32 = 9;
pub const TSI_S_TIME_WAIT: u32 = 10;
pub const TSI_S_RESERVED: u32 = 11;
pub const SOI_S_NOFDREF: u32 = 1;
pub const SOI_S_ISCONNECTED: u32 = 2;
pub const SOI_S_ISCONNECTING: u32 = 4;
pub const SOI_S_ISDISCONNECTING: u32 = 8;
pub const SOI_S_CANTSENDMORE: u32 = 16;
pub const SOI_S_CANTRCVMORE: u32 = 32;
pub const SOI_S_RCVATMARK: u32 = 64;
pub const SOI_S_PRIV: u32 = 128;
pub const SOI_S_NBIO: u32 = 256;
pub const SOI_S_ASYNC: u32 = 512;
pub const SOI_S_INCOMP: u32 = 2048;
pub const SOI_S_COMP: u32 = 4096;
pub const SOI_S_ISDISCONNECTED: u32 = 8192;
pub const SOI_S_DRAINING: u32 = 16384;
pub const PROC_KQUEUE_SELECT: u32 = 1;
pub const PROC_KQUEUE_SLEEP: u32 = 2;
pub const PROC_KQUEUE_32: u32 = 8;
pub const PROC_KQUEUE_64: u32 = 16;
pub const PROC_KQUEUE_QOS: u32 = 32;
pub const PROX_FDTYPE_ATALK: u32 = 0;
pub const PROX_FDTYPE_VNODE: u32 = 1;
pub const PROX_FDTYPE_SOCKET: u32 = 2;
pub const PROX_FDTYPE_PSHM: u32 = 3;
pub const PROX_FDTYPE_PSEM: u32 = 4;
pub const PROX_FDTYPE_KQUEUE: u32 = 5;
pub const PROX_FDTYPE_PIPE: u32 = 6;
pub const PROX_FDTYPE_FSEVENTS: u32 = 7;
pub const PROX_FDTYPE_NETPOLICY: u32 = 9;
pub const PROX_FDTYPE_CHANNEL: u32 = 10;
pub const PROX_FDTYPE_NEXUS: u32 = 11;
pub const PROC_CHANNEL_TYPE_USER_PIPE: u32 = 0;
pub const PROC_CHANNEL_TYPE_KERNEL_PIPE: u32 = 1;
pub const PROC_CHANNEL_TYPE_NET_IF: u32 = 2;
pub const PROC_CHANNEL_TYPE_FLOW_SWITCH: u32 = 3;
pub const PROC_CHANNEL_FLAGS_MONITOR_TX: u32 = 1;
pub const PROC_CHANNEL_FLAGS_MONITOR_RX: u32 = 2;
pub const PROC_CHANNEL_FLAGS_MONITOR_NO_COPY: u32 = 4;
pub const PROC_CHANNEL_FLAGS_EXCLUSIVE: u32 = 16;
pub const PROC_CHANNEL_FLAGS_USER_PACKET_POOL: u32 = 32;
pub const PROC_CHANNEL_FLAGS_DEFUNCT_OK: u32 = 64;
pub const PROC_CHANNEL_FLAGS_LOW_LATENCY: u32 = 128;
pub const PROC_CHANNEL_FLAGS_MONITOR: u32 = 3;
pub const PROC_PIDLISTFDS: u32 = 1;
pub const PROC_PIDTASKALLINFO: u32 = 2;
pub const PROC_PIDTBSDINFO: u32 = 3;
pub const PROC_PIDTASKINFO: u32 = 4;
pub const PROC_PIDTHREADINFO: u32 = 5;
pub const PROC_PIDLISTTHREADS: u32 = 6;
pub const PROC_PIDREGIONINFO: u32 = 7;
pub const PROC_PIDREGIONPATHINFO: u32 = 8;
pub const PROC_PIDVNODEPATHINFO: u32 = 9;
pub const PROC_PIDTHREADPATHINFO: u32 = 10;
pub const PROC_PIDPATHINFO: u32 = 11;
pub const PROC_PIDPATHINFO_SIZE: u32 = 1024;
pub const PROC_PIDPATHINFO_MAXSIZE: u32 = 4096;
pub const PROC_PIDWORKQUEUEINFO: u32 = 12;
pub const PROC_PIDT_SHORTBSDINFO: u32 = 13;
pub const PROC_PIDLISTFILEPORTS: u32 = 14;
pub const PROC_PIDTHREADID64INFO: u32 = 15;
pub const PROC_PID_RUSAGE: u32 = 16;
pub const PROC_PID_RUSAGE_SIZE: u32 = 0;
pub const PROC_PIDFDVNODEINFO: u32 = 1;
pub const PROC_PIDFDVNODEPATHINFO: u32 = 2;
pub const PROC_PIDFDSOCKETINFO: u32 = 3;
pub const PROC_PIDFDPSEMINFO: u32 = 4;
pub const PROC_PIDFDPSHMINFO: u32 = 5;
pub const PROC_PIDFDPIPEINFO: u32 = 6;
pub const PROC_PIDFDKQUEUEINFO: u32 = 7;
pub const PROC_PIDFDATALKINFO: u32 = 8;
pub const PROC_PIDFDCHANNELINFO: u32 = 10;
pub const PROC_PIDFILEPORTVNODEPATHINFO: u32 = 2;
pub const PROC_PIDFILEPORTSOCKETINFO: u32 = 3;
pub const PROC_PIDFILEPORTPSHMINFO: u32 = 5;
pub const PROC_PIDFILEPORTPIPEINFO: u32 = 6;
pub const PROC_SELFSET_PCONTROL: u32 = 1;
pub const PROC_SELFSET_THREADNAME: u32 = 2;
pub const PROC_SELFSET_THREADNAME_SIZE: u32 = 63;
pub const PROC_SELFSET_VMRSRCOWNER: u32 = 3;
pub const PROC_SELFSET_DELAYIDLESLEEP: u32 = 4;
pub const PROC_DIRTYCONTROL_TRACK: u32 = 1;
pub const PROC_DIRTYCONTROL_SET: u32 = 2;
pub const PROC_DIRTYCONTROL_GET: u32 = 3;
pub const PROC_DIRTYCONTROL_CLEAR: u32 = 4;
pub const PROC_DIRTY_TRACK: u32 = 1;
pub const PROC_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const PROC_DIRTY_DEFER: u32 = 4;
pub const PROC_DIRTY_LAUNCH_IN_PROGRESS: u32 = 8;
pub const PROC_DIRTY_DEFER_ALWAYS: u32 = 16;
pub const PROC_DIRTY_TRACKED: u32 = 1;
pub const PROC_DIRTY_ALLOWS_IDLE_EXIT: u32 = 2;
pub const PROC_DIRTY_IS_DIRTY: u32 = 4;
pub const PROC_DIRTY_LAUNCH_IS_IN_PROGRESS: u32 = 8;
pub const PROC_UDATA_INFO_GET: u32 = 1;
pub const PROC_UDATA_INFO_SET: u32 = 2;
pub const MAX_IQ_TIME: u32 = 604800;
pub const MAX_DQ_TIME: u32 = 604800;
pub const MAXQUOTAS: u32 = 2;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const QUOTAFILENAME: &[u8; 7usize] = b".quota\0";
pub const QUOTAOPSNAME: &[u8; 11usize] = b".quota.ops\0";
pub const QUOTAGROUP: &[u8; 9usize] = b"operator\0";
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_QUOTAON: u32 = 256;
pub const Q_QUOTAOFF: u32 = 512;
pub const Q_GETQUOTA: u32 = 768;
pub const Q_SETQUOTA: u32 = 1024;
pub const Q_SETUSE: u32 = 1280;
pub const Q_SYNC: u32 = 1536;
pub const Q_QUOTASTAT: u32 = 1792;
pub const QF_VERSION: u32 = 1;
pub const QF_STRING_TAG: &[u8; 16usize] = b"QUOTA HASH FILE\0";
pub const QF_USERS_PER_GB: u32 = 256;
pub const QF_MIN_USERS: u32 = 2048;
pub const QF_MAX_USERS: u32 = 2097152;
pub const QF_GROUPS_PER_GB: u32 = 32;
pub const QF_MIN_GROUPS: u32 = 2048;
pub const QF_MAX_GROUPS: u32 = 262144;
pub const RB_DIR_LEFT: u32 = 0;
pub const RB_DIR_RIGHT: u32 = 1;
pub const RB_AUTOBOOT: u32 = 0;
pub const RB_ASKNAME: u32 = 1;
pub const RB_SINGLE: u32 = 2;
pub const RB_NOSYNC: u32 = 4;
pub const RB_HALT: u32 = 8;
pub const RB_INITNAME: u32 = 16;
pub const RB_DFLTROOT: u32 = 32;
pub const RB_ALTBOOT: u32 = 64;
pub const RB_UNIPROC: u32 = 128;
pub const RB_SAFEBOOT: u32 = 256;
pub const RB_UPSDELAY: u32 = 512;
pub const RB_QUICK: u32 = 1024;
pub const RB_PANIC: u32 = 2048;
pub const RB_PANIC_ZPRINT: u32 = 4096;
pub const RB_PANIC_FORCERESET: u32 = 8192;
pub const B_ADAPTORSHIFT: u32 = 24;
pub const B_ADAPTORMASK: u32 = 15;
pub const B_CONTROLLERSHIFT: u32 = 20;
pub const B_CONTROLLERMASK: u32 = 15;
pub const B_UNITSHIFT: u32 = 16;
pub const B_UNITMASK: u32 = 255;
pub const B_PARTITIONSHIFT: u32 = 8;
pub const B_PARTITIONMASK: u32 = 255;
pub const B_TYPESHIFT: u32 = 0;
pub const B_TYPEMASK: u32 = 255;
pub const B_MAGICMASK: u32 = 4026531840;
pub const B_DEVMAGIC: u32 = 2684354560;
pub const SBUF_FIXEDLEN: u32 = 0;
pub const SBUF_AUTOEXTEND: u32 = 1;
pub const SBUF_USRFLAGMSK: u32 = 65535;
pub const SBUF_DYNAMIC: u32 = 65536;
pub const SBUF_FINISHED: u32 = 131072;
pub const SBUF_OVERFLOWED: u32 = 262144;
pub const SBUF_DYNSTRUCT: u32 = 524288;
pub const SYS_syscall: u32 = 0;
pub const SYS_exit: u32 = 1;
pub const SYS_fork: u32 = 2;
pub const SYS_read: u32 = 3;
pub const SYS_write: u32 = 4;
pub const SYS_open: u32 = 5;
pub const SYS_close: u32 = 6;
pub const SYS_wait4: u32 = 7;
pub const SYS_link: u32 = 9;
pub const SYS_unlink: u32 = 10;
pub const SYS_chdir: u32 = 12;
pub const SYS_fchdir: u32 = 13;
pub const SYS_mknod: u32 = 14;
pub const SYS_chmod: u32 = 15;
pub const SYS_chown: u32 = 16;
pub const SYS_getfsstat: u32 = 18;
pub const SYS_getpid: u32 = 20;
pub const SYS_setuid: u32 = 23;
pub const SYS_getuid: u32 = 24;
pub const SYS_geteuid: u32 = 25;
pub const SYS_ptrace: u32 = 26;
pub const SYS_recvmsg: u32 = 27;
pub const SYS_sendmsg: u32 = 28;
pub const SYS_recvfrom: u32 = 29;
pub const SYS_accept: u32 = 30;
pub const SYS_getpeername: u32 = 31;
pub const SYS_getsockname: u32 = 32;
pub const SYS_access: u32 = 33;
pub const SYS_chflags: u32 = 34;
pub const SYS_fchflags: u32 = 35;
pub const SYS_sync: u32 = 36;
pub const SYS_kill: u32 = 37;
pub const SYS_getppid: u32 = 39;
pub const SYS_dup: u32 = 41;
pub const SYS_pipe: u32 = 42;
pub const SYS_getegid: u32 = 43;
pub const SYS_sigaction: u32 = 46;
pub const SYS_getgid: u32 = 47;
pub const SYS_sigprocmask: u32 = 48;
pub const SYS_getlogin: u32 = 49;
pub const SYS_setlogin: u32 = 50;
pub const SYS_acct: u32 = 51;
pub const SYS_sigpending: u32 = 52;
pub const SYS_sigaltstack: u32 = 53;
pub const SYS_ioctl: u32 = 54;
pub const SYS_reboot: u32 = 55;
pub const SYS_revoke: u32 = 56;
pub const SYS_symlink: u32 = 57;
pub const SYS_readlink: u32 = 58;
pub const SYS_execve: u32 = 59;
pub const SYS_umask: u32 = 60;
pub const SYS_chroot: u32 = 61;
pub const SYS_msync: u32 = 65;
pub const SYS_vfork: u32 = 66;
pub const SYS_munmap: u32 = 73;
pub const SYS_mprotect: u32 = 74;
pub const SYS_madvise: u32 = 75;
pub const SYS_mincore: u32 = 78;
pub const SYS_getgroups: u32 = 79;
pub const SYS_setgroups: u32 = 80;
pub const SYS_getpgrp: u32 = 81;
pub const SYS_setpgid: u32 = 82;
pub const SYS_setitimer: u32 = 83;
pub const SYS_swapon: u32 = 85;
pub const SYS_getitimer: u32 = 86;
pub const SYS_getdtablesize: u32 = 89;
pub const SYS_dup2: u32 = 90;
pub const SYS_fcntl: u32 = 92;
pub const SYS_select: u32 = 93;
pub const SYS_fsync: u32 = 95;
pub const SYS_setpriority: u32 = 96;
pub const SYS_socket: u32 = 97;
pub const SYS_connect: u32 = 98;
pub const SYS_getpriority: u32 = 100;
pub const SYS_bind: u32 = 104;
pub const SYS_setsockopt: u32 = 105;
pub const SYS_listen: u32 = 106;
pub const SYS_sigsuspend: u32 = 111;
pub const SYS_gettimeofday: u32 = 116;
pub const SYS_getrusage: u32 = 117;
pub const SYS_getsockopt: u32 = 118;
pub const SYS_readv: u32 = 120;
pub const SYS_writev: u32 = 121;
pub const SYS_settimeofday: u32 = 122;
pub const SYS_fchown: u32 = 123;
pub const SYS_fchmod: u32 = 124;
pub const SYS_setreuid: u32 = 126;
pub const SYS_setregid: u32 = 127;
pub const SYS_rename: u32 = 128;
pub const SYS_flock: u32 = 131;
pub const SYS_mkfifo: u32 = 132;
pub const SYS_sendto: u32 = 133;
pub const SYS_shutdown: u32 = 134;
pub const SYS_socketpair: u32 = 135;
pub const SYS_mkdir: u32 = 136;
pub const SYS_rmdir: u32 = 137;
pub const SYS_utimes: u32 = 138;
pub const SYS_futimes: u32 = 139;
pub const SYS_adjtime: u32 = 140;
pub const SYS_gethostuuid: u32 = 142;
pub const SYS_setsid: u32 = 147;
pub const SYS_getpgid: u32 = 151;
pub const SYS_setprivexec: u32 = 152;
pub const SYS_pread: u32 = 153;
pub const SYS_pwrite: u32 = 154;
pub const SYS_nfssvc: u32 = 155;
pub const SYS_statfs: u32 = 157;
pub const SYS_fstatfs: u32 = 158;
pub const SYS_unmount: u32 = 159;
pub const SYS_getfh: u32 = 161;
pub const SYS_quotactl: u32 = 165;
pub const SYS_mount: u32 = 167;
pub const SYS_csops: u32 = 169;
pub const SYS_csops_audittoken: u32 = 170;
pub const SYS_waitid: u32 = 173;
pub const SYS_kdebug_typefilter: u32 = 177;
pub const SYS_kdebug_trace_string: u32 = 178;
pub const SYS_kdebug_trace64: u32 = 179;
pub const SYS_kdebug_trace: u32 = 180;
pub const SYS_setgid: u32 = 181;
pub const SYS_setegid: u32 = 182;
pub const SYS_seteuid: u32 = 183;
pub const SYS_sigreturn: u32 = 184;
pub const SYS_thread_selfcounts: u32 = 186;
pub const SYS_fdatasync: u32 = 187;
pub const SYS_stat: u32 = 188;
pub const SYS_fstat: u32 = 189;
pub const SYS_lstat: u32 = 190;
pub const SYS_pathconf: u32 = 191;
pub const SYS_fpathconf: u32 = 192;
pub const SYS_getrlimit: u32 = 194;
pub const SYS_setrlimit: u32 = 195;
pub const SYS_getdirentries: u32 = 196;
pub const SYS_mmap: u32 = 197;
pub const SYS_lseek: u32 = 199;
pub const SYS_truncate: u32 = 200;
pub const SYS_ftruncate: u32 = 201;
pub const SYS_sysctl: u32 = 202;
pub const SYS_mlock: u32 = 203;
pub const SYS_munlock: u32 = 204;
pub const SYS_undelete: u32 = 205;
pub const SYS_open_dprotected_np: u32 = 216;
pub const SYS_fsgetpath_ext: u32 = 217;
pub const SYS_openat_dprotected_np: u32 = 218;
pub const SYS_getattrlist: u32 = 220;
pub const SYS_setattrlist: u32 = 221;
pub const SYS_getdirentriesattr: u32 = 222;
pub const SYS_exchangedata: u32 = 223;
pub const SYS_searchfs: u32 = 225;
pub const SYS_delete: u32 = 226;
pub const SYS_copyfile: u32 = 227;
pub const SYS_fgetattrlist: u32 = 228;
pub const SYS_fsetattrlist: u32 = 229;
pub const SYS_poll: u32 = 230;
pub const SYS_getxattr: u32 = 234;
pub const SYS_fgetxattr: u32 = 235;
pub const SYS_setxattr: u32 = 236;
pub const SYS_fsetxattr: u32 = 237;
pub const SYS_removexattr: u32 = 238;
pub const SYS_fremovexattr: u32 = 239;
pub const SYS_listxattr: u32 = 240;
pub const SYS_flistxattr: u32 = 241;
pub const SYS_fsctl: u32 = 242;
pub const SYS_initgroups: u32 = 243;
pub const SYS_posix_spawn: u32 = 244;
pub const SYS_ffsctl: u32 = 245;
pub const SYS_fhopen: u32 = 248;
pub const SYS_minherit: u32 = 250;
pub const SYS_semsys: u32 = 251;
pub const SYS_msgsys: u32 = 252;
pub const SYS_shmsys: u32 = 253;
pub const SYS_semctl: u32 = 254;
pub const SYS_semget: u32 = 255;
pub const SYS_semop: u32 = 256;
pub const SYS_msgctl: u32 = 258;
pub const SYS_msgget: u32 = 259;
pub const SYS_msgsnd: u32 = 260;
pub const SYS_msgrcv: u32 = 261;
pub const SYS_shmat: u32 = 262;
pub const SYS_shmctl: u32 = 263;
pub const SYS_shmdt: u32 = 264;
pub const SYS_shmget: u32 = 265;
pub const SYS_shm_open: u32 = 266;
pub const SYS_shm_unlink: u32 = 267;
pub const SYS_sem_open: u32 = 268;
pub const SYS_sem_close: u32 = 269;
pub const SYS_sem_unlink: u32 = 270;
pub const SYS_sem_wait: u32 = 271;
pub const SYS_sem_trywait: u32 = 272;
pub const SYS_sem_post: u32 = 273;
pub const SYS_sysctlbyname: u32 = 274;
pub const SYS_open_extended: u32 = 277;
pub const SYS_umask_extended: u32 = 278;
pub const SYS_stat_extended: u32 = 279;
pub const SYS_lstat_extended: u32 = 280;
pub const SYS_fstat_extended: u32 = 281;
pub const SYS_chmod_extended: u32 = 282;
pub const SYS_fchmod_extended: u32 = 283;
pub const SYS_access_extended: u32 = 284;
pub const SYS_settid: u32 = 285;
pub const SYS_gettid: u32 = 286;
pub const SYS_setsgroups: u32 = 287;
pub const SYS_getsgroups: u32 = 288;
pub const SYS_setwgroups: u32 = 289;
pub const SYS_getwgroups: u32 = 290;
pub const SYS_mkfifo_extended: u32 = 291;
pub const SYS_mkdir_extended: u32 = 292;
pub const SYS_identitysvc: u32 = 293;
pub const SYS_shared_region_check_np: u32 = 294;
pub const SYS_vm_pressure_monitor: u32 = 296;
pub const SYS_psynch_rw_longrdlock: u32 = 297;
pub const SYS_psynch_rw_yieldwrlock: u32 = 298;
pub const SYS_psynch_rw_downgrade: u32 = 299;
pub const SYS_psynch_rw_upgrade: u32 = 300;
pub const SYS_psynch_mutexwait: u32 = 301;
pub const SYS_psynch_mutexdrop: u32 = 302;
pub const SYS_psynch_cvbroad: u32 = 303;
pub const SYS_psynch_cvsignal: u32 = 304;
pub const SYS_psynch_cvwait: u32 = 305;
pub const SYS_psynch_rw_rdlock: u32 = 306;
pub const SYS_psynch_rw_wrlock: u32 = 307;
pub const SYS_psynch_rw_unlock: u32 = 308;
pub const SYS_psynch_rw_unlock2: u32 = 309;
pub const SYS_getsid: u32 = 310;
pub const SYS_settid_with_pid: u32 = 311;
pub const SYS_psynch_cvclrprepost: u32 = 312;
pub const SYS_aio_fsync: u32 = 313;
pub const SYS_aio_return: u32 = 314;
pub const SYS_aio_suspend: u32 = 315;
pub const SYS_aio_cancel: u32 = 316;
pub const SYS_aio_error: u32 = 317;
pub const SYS_aio_read: u32 = 318;
pub const SYS_aio_write: u32 = 319;
pub const SYS_lio_listio: u32 = 320;
pub const SYS_iopolicysys: u32 = 322;
pub const SYS_process_policy: u32 = 323;
pub const SYS_mlockall: u32 = 324;
pub const SYS_munlockall: u32 = 325;
pub const SYS_issetugid: u32 = 327;
pub const SYS___pthread_kill: u32 = 328;
pub const SYS___pthread_sigmask: u32 = 329;
pub const SYS___sigwait: u32 = 330;
pub const SYS___disable_threadsignal: u32 = 331;
pub const SYS___pthread_markcancel: u32 = 332;
pub const SYS___pthread_canceled: u32 = 333;
pub const SYS___semwait_signal: u32 = 334;
pub const SYS_proc_info: u32 = 336;
pub const SYS_sendfile: u32 = 337;
pub const SYS_stat64: u32 = 338;
pub const SYS_fstat64: u32 = 339;
pub const SYS_lstat64: u32 = 340;
pub const SYS_stat64_extended: u32 = 341;
pub const SYS_lstat64_extended: u32 = 342;
pub const SYS_fstat64_extended: u32 = 343;
pub const SYS_getdirentries64: u32 = 344;
pub const SYS_statfs64: u32 = 345;
pub const SYS_fstatfs64: u32 = 346;
pub const SYS_getfsstat64: u32 = 347;
pub const SYS___pthread_chdir: u32 = 348;
pub const SYS___pthread_fchdir: u32 = 349;
pub const SYS_audit: u32 = 350;
pub const SYS_auditon: u32 = 351;
pub const SYS_getauid: u32 = 353;
pub const SYS_setauid: u32 = 354;
pub const SYS_getaudit_addr: u32 = 357;
pub const SYS_setaudit_addr: u32 = 358;
pub const SYS_auditctl: u32 = 359;
pub const SYS_bsdthread_create: u32 = 360;
pub const SYS_bsdthread_terminate: u32 = 361;
pub const SYS_kqueue: u32 = 362;
pub const SYS_kevent: u32 = 363;
pub const SYS_lchown: u32 = 364;
pub const SYS_bsdthread_register: u32 = 366;
pub const SYS_workq_open: u32 = 367;
pub const SYS_workq_kernreturn: u32 = 368;
pub const SYS_kevent64: u32 = 369;
pub const SYS_thread_selfid: u32 = 372;
pub const SYS_ledger: u32 = 373;
pub const SYS_kevent_qos: u32 = 374;
pub const SYS_kevent_id: u32 = 375;
pub const SYS___mac_execve: u32 = 380;
pub const SYS___mac_syscall: u32 = 381;
pub const SYS___mac_get_file: u32 = 382;
pub const SYS___mac_set_file: u32 = 383;
pub const SYS___mac_get_link: u32 = 384;
pub const SYS___mac_set_link: u32 = 385;
pub const SYS___mac_get_proc: u32 = 386;
pub const SYS___mac_set_proc: u32 = 387;
pub const SYS___mac_get_fd: u32 = 388;
pub const SYS___mac_set_fd: u32 = 389;
pub const SYS___mac_get_pid: u32 = 390;
pub const SYS_pselect: u32 = 394;
pub const SYS_pselect_nocancel: u32 = 395;
pub const SYS_read_nocancel: u32 = 396;
pub const SYS_write_nocancel: u32 = 397;
pub const SYS_open_nocancel: u32 = 398;
pub const SYS_close_nocancel: u32 = 399;
pub const SYS_wait4_nocancel: u32 = 400;
pub const SYS_recvmsg_nocancel: u32 = 401;
pub const SYS_sendmsg_nocancel: u32 = 402;
pub const SYS_recvfrom_nocancel: u32 = 403;
pub const SYS_accept_nocancel: u32 = 404;
pub const SYS_msync_nocancel: u32 = 405;
pub const SYS_fcntl_nocancel: u32 = 406;
pub const SYS_select_nocancel: u32 = 407;
pub const SYS_fsync_nocancel: u32 = 408;
pub const SYS_connect_nocancel: u32 = 409;
pub const SYS_sigsuspend_nocancel: u32 = 410;
pub const SYS_readv_nocancel: u32 = 411;
pub const SYS_writev_nocancel: u32 = 412;
pub const SYS_sendto_nocancel: u32 = 413;
pub const SYS_pread_nocancel: u32 = 414;
pub const SYS_pwrite_nocancel: u32 = 415;
pub const SYS_waitid_nocancel: u32 = 416;
pub const SYS_poll_nocancel: u32 = 417;
pub const SYS_msgsnd_nocancel: u32 = 418;
pub const SYS_msgrcv_nocancel: u32 = 419;
pub const SYS_sem_wait_nocancel: u32 = 420;
pub const SYS_aio_suspend_nocancel: u32 = 421;
pub const SYS___sigwait_nocancel: u32 = 422;
pub const SYS___semwait_signal_nocancel: u32 = 423;
pub const SYS___mac_mount: u32 = 424;
pub const SYS___mac_get_mount: u32 = 425;
pub const SYS___mac_getfsstat: u32 = 426;
pub const SYS_fsgetpath: u32 = 427;
pub const SYS_audit_session_self: u32 = 428;
pub const SYS_audit_session_join: u32 = 429;
pub const SYS_fileport_makeport: u32 = 430;
pub const SYS_fileport_makefd: u32 = 431;
pub const SYS_audit_session_port: u32 = 432;
pub const SYS_pid_suspend: u32 = 433;
pub const SYS_pid_resume: u32 = 434;
pub const SYS_pid_hibernate: u32 = 435;
pub const SYS_pid_shutdown_sockets: u32 = 436;
pub const SYS_kas_info: u32 = 439;
pub const SYS_memorystatus_control: u32 = 440;
pub const SYS_guarded_open_np: u32 = 441;
pub const SYS_guarded_close_np: u32 = 442;
pub const SYS_guarded_kqueue_np: u32 = 443;
pub const SYS_change_fdguard_np: u32 = 444;
pub const SYS_usrctl: u32 = 445;
pub const SYS_proc_rlimit_control: u32 = 446;
pub const SYS_connectx: u32 = 447;
pub const SYS_disconnectx: u32 = 448;
pub const SYS_peeloff: u32 = 449;
pub const SYS_socket_delegate: u32 = 450;
pub const SYS_telemetry: u32 = 451;
pub const SYS_proc_uuid_policy: u32 = 452;
pub const SYS_memorystatus_get_level: u32 = 453;
pub const SYS_system_override: u32 = 454;
pub const SYS_vfs_purge: u32 = 455;
pub const SYS_sfi_ctl: u32 = 456;
pub const SYS_sfi_pidctl: u32 = 457;
pub const SYS_coalition: u32 = 458;
pub const SYS_coalition_info: u32 = 459;
pub const SYS_necp_match_policy: u32 = 460;
pub const SYS_getattrlistbulk: u32 = 461;
pub const SYS_clonefileat: u32 = 462;
pub const SYS_openat: u32 = 463;
pub const SYS_openat_nocancel: u32 = 464;
pub const SYS_renameat: u32 = 465;
pub const SYS_faccessat: u32 = 466;
pub const SYS_fchmodat: u32 = 467;
pub const SYS_fchownat: u32 = 468;
pub const SYS_fstatat: u32 = 469;
pub const SYS_fstatat64: u32 = 470;
pub const SYS_linkat: u32 = 471;
pub const SYS_unlinkat: u32 = 472;
pub const SYS_readlinkat: u32 = 473;
pub const SYS_symlinkat: u32 = 474;
pub const SYS_mkdirat: u32 = 475;
pub const SYS_getattrlistat: u32 = 476;
pub const SYS_proc_trace_log: u32 = 477;
pub const SYS_bsdthread_ctl: u32 = 478;
pub const SYS_openbyid_np: u32 = 479;
pub const SYS_recvmsg_x: u32 = 480;
pub const SYS_sendmsg_x: u32 = 481;
pub const SYS_thread_selfusage: u32 = 482;
pub const SYS_csrctl: u32 = 483;
pub const SYS_guarded_open_dprotected_np: u32 = 484;
pub const SYS_guarded_write_np: u32 = 485;
pub const SYS_guarded_pwrite_np: u32 = 486;
pub const SYS_guarded_writev_np: u32 = 487;
pub const SYS_renameatx_np: u32 = 488;
pub const SYS_mremap_encrypted: u32 = 489;
pub const SYS_netagent_trigger: u32 = 490;
pub const SYS_stack_snapshot_with_config: u32 = 491;
pub const SYS_microstackshot: u32 = 492;
pub const SYS_grab_pgo_data: u32 = 493;
pub const SYS_persona: u32 = 494;
pub const SYS_mach_eventlink_signal: u32 = 496;
pub const SYS_mach_eventlink_wait_until: u32 = 497;
pub const SYS_mach_eventlink_signal_wait_until: u32 = 498;
pub const SYS_work_interval_ctl: u32 = 499;
pub const SYS_getentropy: u32 = 500;
pub const SYS_necp_open: u32 = 501;
pub const SYS_necp_client_action: u32 = 502;
pub const SYS___nexus_open: u32 = 503;
pub const SYS___nexus_register: u32 = 504;
pub const SYS___nexus_deregister: u32 = 505;
pub const SYS___nexus_create: u32 = 506;
pub const SYS___nexus_destroy: u32 = 507;
pub const SYS___nexus_get_opt: u32 = 508;
pub const SYS___nexus_set_opt: u32 = 509;
pub const SYS___channel_open: u32 = 510;
pub const SYS___channel_get_info: u32 = 511;
pub const SYS___channel_sync: u32 = 512;
pub const SYS___channel_get_opt: u32 = 513;
pub const SYS___channel_set_opt: u32 = 514;
pub const SYS_ulock_wait: u32 = 515;
pub const SYS_ulock_wake: u32 = 516;
pub const SYS_fclonefileat: u32 = 517;
pub const SYS_fs_snapshot: u32 = 518;
pub const SYS_register_uexc_handler: u32 = 519;
pub const SYS_terminate_with_payload: u32 = 520;
pub const SYS_abort_with_payload: u32 = 521;
pub const SYS_necp_session_open: u32 = 522;
pub const SYS_necp_session_action: u32 = 523;
pub const SYS_setattrlistat: u32 = 524;
pub const SYS_net_qos_guideline: u32 = 525;
pub const SYS_fmount: u32 = 526;
pub const SYS_ntp_adjtime: u32 = 527;
pub const SYS_ntp_gettime: u32 = 528;
pub const SYS_os_fault_with_payload: u32 = 529;
pub const SYS_kqueue_workloop_ctl: u32 = 530;
pub const SYS___mach_bridge_remote_time: u32 = 531;
pub const SYS_coalition_ledger: u32 = 532;
pub const SYS_log_data: u32 = 533;
pub const SYS_memorystatus_available_memory: u32 = 534;
pub const SYS_objc_bp_assist_cfg_np: u32 = 535;
pub const SYS_shared_region_map_and_slide_2_np: u32 = 536;
pub const SYS_pivot_root: u32 = 537;
pub const SYS_task_inspect_for_pid: u32 = 538;
pub const SYS_task_read_for_pid: u32 = 539;
pub const SYS_preadv: u32 = 540;
pub const SYS_pwritev: u32 = 541;
pub const SYS_preadv_nocancel: u32 = 542;
pub const SYS_pwritev_nocancel: u32 = 543;
pub const SYS_ulock_wait2: u32 = 544;
pub const SYS_proc_info_extended_id: u32 = 545;
pub const SYS_tracker_action: u32 = 546;
pub const SYS_debug_syscall_reject: u32 = 547;
pub const SYS_debug_syscall_reject_config: u32 = 548;
pub const SYS_graftdmg: u32 = 549;
pub const SYS_map_with_linking_np: u32 = 550;
pub const SYS_freadlink: u32 = 551;
pub const SYS_record_system_event: u32 = 552;
pub const SYS_mkfifoat: u32 = 553;
pub const SYS_mknodat: u32 = 554;
pub const SYS_ungraftdmg: u32 = 555;
pub const SYS_MAXSYSCALL: u32 = 556;
pub const SYS_invalid: u32 = 63;
pub const TR_BREADHIT: u32 = 0;
pub const TR_BREADMISS: u32 = 1;
pub const TR_BWRITE: u32 = 2;
pub const TR_BREADHITRA: u32 = 3;
pub const TR_BREADMISSRA: u32 = 4;
pub const TR_XFODMISS: u32 = 5;
pub const TR_XFODHIT: u32 = 6;
pub const TR_BRELSE: u32 = 7;
pub const TR_BREALLOC: u32 = 8;
pub const TR_MALL: u32 = 10;
pub const TR_INTRANS: u32 = 20;
pub const TR_EINTRANS: u32 = 21;
pub const TR_FRECLAIM: u32 = 22;
pub const TR_RECLAIM: u32 = 23;
pub const TR_XSFREC: u32 = 24;
pub const TR_XIFREC: u32 = 25;
pub const TR_WAITMEM: u32 = 26;
pub const TR_EWAITMEM: u32 = 27;
pub const TR_ZFOD: u32 = 28;
pub const TR_EXFOD: u32 = 29;
pub const TR_VRFOD: u32 = 30;
pub const TR_CACHEFOD: u32 = 31;
pub const TR_SWAPIN: u32 = 32;
pub const TR_PGINDONE: u32 = 33;
pub const TR_SWAPIO: u32 = 34;
pub const TR_VADVISE: u32 = 40;
pub const TR_STAMP: u32 = 45;
pub const TR_NFLAGS: u32 = 100;
pub const TRCSIZ: u32 = 4096;
pub const VTRACE: u32 = 115;
pub const VTR_DISABLE: u32 = 0;
pub const VTR_ENABLE: u32 = 1;
pub const VTR_VALUE: u32 = 2;
pub const VTR_UALARM: u32 = 3;
pub const VTR_STAMP: u32 = 4;
pub const TS_SO_OLOWAT: u32 = 1;
pub const TS_ASYNC: u32 = 2;
pub const TS_BUSY: u32 = 4;
pub const TS_CARR_ON: u32 = 8;
pub const TS_FLUSH: u32 = 16;
pub const TS_ISOPEN: u32 = 32;
pub const TS_TBLOCK: u32 = 64;
pub const TS_TIMEOUT: u32 = 128;
pub const TS_TTSTOP: u32 = 256;
pub const TS_XCLUDE: u32 = 1024;
pub const TS_BKSL: u32 = 2048;
pub const TS_CNTTB: u32 = 4096;
pub const TS_ERASE: u32 = 8192;
pub const TS_LNCH: u32 = 16384;
pub const TS_TYPEN: u32 = 32768;
pub const TS_LOCAL: u32 = 63488;
pub const TS_CAN_BYPASS_L_RINT: u32 = 65536;
pub const TS_CONNECTED: u32 = 131072;
pub const TS_SNOOP: u32 = 262144;
pub const TS_SO_OCOMPLETE: u32 = 524288;
pub const TS_ZOMBIE: u32 = 1048576;
pub const TS_CAR_OFLOW: u32 = 2097152;
pub const TS_IOCTL_NOT_OK: u32 = 16777216;
pub const TS_REVOKE: u32 = 33554432;
pub const ORDINARY: u32 = 0;
pub const CONTROL: u32 = 1;
pub const BACKSPACE: u32 = 2;
pub const NEWLINE: u32 = 3;
pub const TAB: u32 = 4;
pub const VTAB: u32 = 5;
pub const RETURN: u32 = 6;
pub const DMSET: u32 = 0;
pub const DMBIS: u32 = 1;
pub const DMBIC: u32 = 2;
pub const DMGET: u32 = 3;
pub const TTY_CHARMASK: u32 = 255;
pub const TTY_QUOTE: u32 = 256;
pub const TTY_ERRORMASK: u32 = 4278190080;
pub const TTY_FE: u32 = 16777216;
pub const TTY_PE: u32 = 33554432;
pub const TTY_OE: u32 = 67108864;
pub const TTY_BI: u32 = 134217728;
pub const VPRINT: u32 = 64;
pub const VPLOT: u32 = 128;
pub const VPRINTPLOT: u32 = 256;
pub const HAVE_VT_LOCKERFS: u32 = 1;
pub const VNODE_READ: u32 = 1;
pub const VNODE_WRITE: u32 = 2;
pub const VNODE_BLOCKMAP_NO_TRACK: u32 = 4;
pub const VNODE_CLUSTER_VERIFY: u32 = 8;
pub const PREALLOCATE: u32 = 1;
pub const ALLOCATECONTIG: u32 = 2;
pub const ALLOCATEALL: u32 = 4;
pub const ALLOCATEPERSIST: u32 = 8;
pub const ALLOCATEFROMPEOF: u32 = 16;
pub const ALLOCATEFROMVOL: u32 = 32;
pub const VNOVAL: i32 = -1;
pub const IOCS_BUFFER_NUM_SIZE_BUCKETS: u32 = 10;
pub const IOCS_BUFFER_MAX_BUCKET: u32 = 9;
pub const IOCS_BUFFER_NUM_COMPRESSION_BUCKETS: u32 = 7;
pub const IOCS_BLOCK_NUM_SIZE_BUCKETS: u32 = 16;
pub const IOCS_SBE_PATH_LEN: u32 = 128;
pub const IOCS_PATH_START_BYTES_TO_COPY: u32 = 108;
pub const IOCS_PATH_END_BYTES_TO_COPY: u32 = 20;
pub const IOCS_SYSCTL_LIVE: u32 = 1;
pub const IOCS_SYSCTL_STORE_BUFFER_RD_ONLY: u32 = 2;
pub const IOCS_SYSCTL_STORE_BUFFER_MARK: u32 = 4;
pub const _PATH_DEFPATH: &[u8; 14usize] = b"/usr/bin:/bin\0";
pub const _PATH_STDPATH: &[u8; 30usize] = b"/usr/bin:/bin:/usr/sbin:/sbin\0";
pub const _PATH_BSHELL: &[u8; 8usize] = b"/bin/sh\0";
pub const _PATH_CONSOLE: &[u8; 13usize] = b"/dev/console\0";
pub const _PATH_CSHELL: &[u8; 9usize] = b"/bin/csh\0";
pub const _PATH_DEFTAPE: &[u8; 11usize] = b"/dev/nrst0\0";
pub const _PATH_DEVDB: &[u8; 16usize] = b"/var/run/dev.db\0";
pub const _PATH_DEVNULL: &[u8; 10usize] = b"/dev/null\0";
pub const _PATH_DRUM: &[u8; 10usize] = b"/dev/drum\0";
pub const _PATH_FSIRAND: &[u8; 14usize] = b"/sbin/fsirand\0";
pub const _PATH_KMEM: &[u8; 10usize] = b"/dev/kmem\0";
pub const _PATH_KVMDB: &[u8; 15usize] = b"/var/db/kvm.db\0";
pub const _PATH_LOCALE: &[u8; 18usize] = b"/usr/share/locale\0";
pub const _PATH_MAILDIR: &[u8; 10usize] = b"/var/mail\0";
pub const _PATH_MAN: &[u8; 15usize] = b"/usr/share/man\0";
pub const _PATH_MEM: &[u8; 9usize] = b"/dev/mem\0";
pub const _PATH_NOLOGIN: &[u8; 13usize] = b"/etc/nologin\0";
pub const _PATH_RSH: &[u8; 13usize] = b"/usr/bin/rsh\0";
pub const _PATH_SENDMAIL: &[u8; 19usize] = b"/usr/sbin/sendmail\0";
pub const _PATH_SHELLS: &[u8; 12usize] = b"/etc/shells\0";
pub const _PATH_TTY: &[u8; 9usize] = b"/dev/tty\0";
pub const _PATH_UNIX: &[u8; 6usize] = b"/mach\0";
pub const _PATH_VI: &[u8; 12usize] = b"/usr/bin/vi\0";
pub const _PATH_DEV: &[u8; 6usize] = b"/dev/\0";
pub const _PATH_TMP: &[u8; 6usize] = b"/tmp/\0";
pub const _PATH_UUCPLOCK: &[u8; 17usize] = b"/var/spool/lock/\0";
pub const _PATH_VARDB: &[u8; 9usize] = b"/var/db/\0";
pub const _PATH_VARRUN: &[u8; 10usize] = b"/var/run/\0";
pub const _PATH_VARTMP: &[u8; 10usize] = b"/var/tmp/\0";
pub const EX_OK: u32 = 0;
pub const EX__BASE: u32 = 64;
pub const EX_USAGE: u32 = 64;
pub const EX_DATAERR: u32 = 65;
pub const EX_NOINPUT: u32 = 66;
pub const EX_NOUSER: u32 = 67;
pub const EX_NOHOST: u32 = 68;
pub const EX_UNAVAILABLE: u32 = 69;
pub const EX_SOFTWARE: u32 = 70;
pub const EX_OSERR: u32 = 71;
pub const EX_OSFILE: u32 = 72;
pub const EX_CANTCREAT: u32 = 73;
pub const EX_IOERR: u32 = 74;
pub const EX_TEMPFAIL: u32 = 75;
pub const EX_PROTOCOL: u32 = 76;
pub const EX_NOPERM: u32 = 77;
pub const EX_CONFIG: u32 = 78;
pub const EX__MAX: u32 = 78;
pub const kCGLMonoscopicBit: u32 = 1;
pub const kCGLStereoscopicBit: u32 = 2;
pub const kCGLSingleBufferBit: u32 = 4;
pub const kCGLDoubleBufferBit: u32 = 8;
pub const kCGLTripleBufferBit: u32 = 16;
pub const kCGL0Bit: u32 = 1;
pub const kCGL1Bit: u32 = 2;
pub const kCGL2Bit: u32 = 4;
pub const kCGL3Bit: u32 = 8;
pub const kCGL4Bit: u32 = 16;
pub const kCGL5Bit: u32 = 32;
pub const kCGL6Bit: u32 = 64;
pub const kCGL8Bit: u32 = 128;
pub const kCGL10Bit: u32 = 256;
pub const kCGL12Bit: u32 = 512;
pub const kCGL16Bit: u32 = 1024;
pub const kCGL24Bit: u32 = 2048;
pub const kCGL32Bit: u32 = 4096;
pub const kCGL48Bit: u32 = 8192;
pub const kCGL64Bit: u32 = 16384;
pub const kCGL96Bit: u32 = 32768;
pub const kCGL128Bit: u32 = 65536;
pub const kCGLRGB444Bit: u32 = 64;
pub const kCGLARGB4444Bit: u32 = 128;
pub const kCGLRGB444A8Bit: u32 = 256;
pub const kCGLRGB555Bit: u32 = 512;
pub const kCGLARGB1555Bit: u32 = 1024;
pub const kCGLRGB555A8Bit: u32 = 2048;
pub const kCGLRGB565Bit: u32 = 4096;
pub const kCGLRGB565A8Bit: u32 = 8192;
pub const kCGLRGB888Bit: u32 = 16384;
pub const kCGLARGB8888Bit: u32 = 32768;
pub const kCGLRGB888A8Bit: u32 = 65536;
pub const kCGLRGB101010Bit: u32 = 131072;
pub const kCGLARGB2101010Bit: u32 = 262144;
pub const kCGLRGB101010_A8Bit: u32 = 524288;
pub const kCGLRGB121212Bit: u32 = 1048576;
pub const kCGLARGB12121212Bit: u32 = 2097152;
pub const kCGLRGB161616Bit: u32 = 4194304;
pub const kCGLRGBA16161616Bit: u32 = 8388608;
pub const kCGLRGBFloat64Bit: u32 = 16777216;
pub const kCGLRGBAFloat64Bit: u32 = 33554432;
pub const kCGLRGBFloat128Bit: u32 = 67108864;
pub const kCGLRGBAFloat128Bit: u32 = 134217728;
pub const kCGLRGBFloat256Bit: u32 = 268435456;
pub const kCGLRGBAFloat256Bit: u32 = 536870912;
pub const kCGLSupersampleBit: u32 = 1;
pub const kCGLMultisampleBit: u32 = 2;
pub const kCGLARGB16161616Bit: u32 = 8388608;
pub const kCGLRendererIDMatchingMask: u32 = 16678656;
pub const CGL_VERSION_1_0: u32 = 1;
pub const CGL_VERSION_1_1: u32 = 1;
pub const CGL_VERSION_1_2: u32 = 1;
pub const CGL_VERSION_1_3: u32 = 1;
pub const GL_DO_NOT_WARN_IF_MULTI_GL_VERSION_HEADERS_INCLUDED: u32 = 1;
pub const GL_DEPTH_BUFFER_BIT: u32 = 256;
pub const GL_STENCIL_BUFFER_BIT: u32 = 1024;
pub const GL_COLOR_BUFFER_BIT: u32 = 16384;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const GL_POINTS: u32 = 0;
pub const GL_LINES: u32 = 1;
pub const GL_LINE_LOOP: u32 = 2;
pub const GL_LINE_STRIP: u32 = 3;
pub const GL_TRIANGLES: u32 = 4;
pub const GL_TRIANGLE_STRIP: u32 = 5;
pub const GL_TRIANGLE_FAN: u32 = 6;
pub const GL_NEVER: u32 = 512;
pub const GL_LESS: u32 = 513;
pub const GL_EQUAL: u32 = 514;
pub const GL_LEQUAL: u32 = 515;
pub const GL_GREATER: u32 = 516;
pub const GL_NOTEQUAL: u32 = 517;
pub const GL_GEQUAL: u32 = 518;
pub const GL_ALWAYS: u32 = 519;
pub const GL_ZERO: u32 = 0;
pub const GL_ONE: u32 = 1;
pub const GL_SRC_COLOR: u32 = 768;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 769;
pub const GL_SRC_ALPHA: u32 = 770;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 771;
pub const GL_DST_ALPHA: u32 = 772;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 773;
pub const GL_DST_COLOR: u32 = 774;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 775;
pub const GL_SRC_ALPHA_SATURATE: u32 = 776;
pub const GL_NONE: u32 = 0;
pub const GL_FRONT_LEFT: u32 = 1024;
pub const GL_FRONT_RIGHT: u32 = 1025;
pub const GL_BACK_LEFT: u32 = 1026;
pub const GL_BACK_RIGHT: u32 = 1027;
pub const GL_FRONT: u32 = 1028;
pub const GL_BACK: u32 = 1029;
pub const GL_LEFT: u32 = 1030;
pub const GL_RIGHT: u32 = 1031;
pub const GL_FRONT_AND_BACK: u32 = 1032;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_INVALID_ENUM: u32 = 1280;
pub const GL_INVALID_VALUE: u32 = 1281;
pub const GL_INVALID_OPERATION: u32 = 1282;
pub const GL_OUT_OF_MEMORY: u32 = 1285;
pub const GL_CW: u32 = 2304;
pub const GL_CCW: u32 = 2305;
pub const GL_POINT_SIZE: u32 = 2833;
pub const GL_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_POINT_SIZE_GRANULARITY: u32 = 2835;
pub const GL_LINE_SMOOTH: u32 = 2848;
pub const GL_LINE_WIDTH: u32 = 2849;
pub const GL_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_LINE_WIDTH_GRANULARITY: u32 = 2851;
pub const GL_POLYGON_MODE: u32 = 2880;
pub const GL_POLYGON_SMOOTH: u32 = 2881;
pub const GL_CULL_FACE: u32 = 2884;
pub const GL_CULL_FACE_MODE: u32 = 2885;
pub const GL_FRONT_FACE: u32 = 2886;
pub const GL_DEPTH_RANGE: u32 = 2928;
pub const GL_DEPTH_TEST: u32 = 2929;
pub const GL_DEPTH_WRITEMASK: u32 = 2930;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 2931;
pub const GL_DEPTH_FUNC: u32 = 2932;
pub const GL_STENCIL_TEST: u32 = 2960;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 2961;
pub const GL_STENCIL_FUNC: u32 = 2962;
pub const GL_STENCIL_VALUE_MASK: u32 = 2963;
pub const GL_STENCIL_FAIL: u32 = 2964;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 2965;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 2966;
pub const GL_STENCIL_REF: u32 = 2967;
pub const GL_STENCIL_WRITEMASK: u32 = 2968;
pub const GL_VIEWPORT: u32 = 2978;
pub const GL_DITHER: u32 = 3024;
pub const GL_BLEND_DST: u32 = 3040;
pub const GL_BLEND_SRC: u32 = 3041;
pub const GL_BLEND: u32 = 3042;
pub const GL_LOGIC_OP_MODE: u32 = 3056;
pub const GL_COLOR_LOGIC_OP: u32 = 3058;
pub const GL_DRAW_BUFFER: u32 = 3073;
pub const GL_READ_BUFFER: u32 = 3074;
pub const GL_SCISSOR_BOX: u32 = 3088;
pub const GL_SCISSOR_TEST: u32 = 3089;
pub const GL_COLOR_CLEAR_VALUE: u32 = 3106;
pub const GL_COLOR_WRITEMASK: u32 = 3107;
pub const GL_DOUBLEBUFFER: u32 = 3122;
pub const GL_STEREO: u32 = 3123;
pub const GL_LINE_SMOOTH_HINT: u32 = 3154;
pub const GL_POLYGON_SMOOTH_HINT: u32 = 3155;
pub const GL_UNPACK_SWAP_BYTES: u32 = 3312;
pub const GL_UNPACK_LSB_FIRST: u32 = 3313;
pub const GL_UNPACK_ROW_LENGTH: u32 = 3314;
pub const GL_UNPACK_SKIP_ROWS: u32 = 3315;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 3316;
pub const GL_UNPACK_ALIGNMENT: u32 = 3317;
pub const GL_PACK_SWAP_BYTES: u32 = 3328;
pub const GL_PACK_LSB_FIRST: u32 = 3329;
pub const GL_PACK_ROW_LENGTH: u32 = 3330;
pub const GL_PACK_SKIP_ROWS: u32 = 3331;
pub const GL_PACK_SKIP_PIXELS: u32 = 3332;
pub const GL_PACK_ALIGNMENT: u32 = 3333;
pub const GL_MAX_TEXTURE_SIZE: u32 = 3379;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 3386;
pub const GL_SUBPIXEL_BITS: u32 = 3408;
pub const GL_TEXTURE_1D: u32 = 3552;
pub const GL_TEXTURE_2D: u32 = 3553;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 10752;
pub const GL_POLYGON_OFFSET_POINT: u32 = 10753;
pub const GL_POLYGON_OFFSET_LINE: u32 = 10754;
pub const GL_POLYGON_OFFSET_FILL: u32 = 32823;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 32824;
pub const GL_TEXTURE_BINDING_1D: u32 = 32872;
pub const GL_TEXTURE_BINDING_2D: u32 = 32873;
pub const GL_TEXTURE_WIDTH: u32 = 4096;
pub const GL_TEXTURE_HEIGHT: u32 = 4097;
pub const GL_TEXTURE_INTERNAL_FORMAT: u32 = 4099;
pub const GL_TEXTURE_BORDER_COLOR: u32 = 4100;
pub const GL_TEXTURE_RED_SIZE: u32 = 32860;
pub const GL_TEXTURE_GREEN_SIZE: u32 = 32861;
pub const GL_TEXTURE_BLUE_SIZE: u32 = 32862;
pub const GL_TEXTURE_ALPHA_SIZE: u32 = 32863;
pub const GL_DONT_CARE: u32 = 4352;
pub const GL_FASTEST: u32 = 4353;
pub const GL_NICEST: u32 = 4354;
pub const GL_BYTE: u32 = 5120;
pub const GL_UNSIGNED_BYTE: u32 = 5121;
pub const GL_SHORT: u32 = 5122;
pub const GL_UNSIGNED_SHORT: u32 = 5123;
pub const GL_INT: u32 = 5124;
pub const GL_UNSIGNED_INT: u32 = 5125;
pub const GL_FLOAT: u32 = 5126;
pub const GL_DOUBLE: u32 = 5130;
pub const GL_CLEAR: u32 = 5376;
pub const GL_AND: u32 = 5377;
pub const GL_AND_REVERSE: u32 = 5378;
pub const GL_COPY: u32 = 5379;
pub const GL_AND_INVERTED: u32 = 5380;
pub const GL_NOOP: u32 = 5381;
pub const GL_XOR: u32 = 5382;
pub const GL_OR: u32 = 5383;
pub const GL_NOR: u32 = 5384;
pub const GL_EQUIV: u32 = 5385;
pub const GL_INVERT: u32 = 5386;
pub const GL_OR_REVERSE: u32 = 5387;
pub const GL_COPY_INVERTED: u32 = 5388;
pub const GL_OR_INVERTED: u32 = 5389;
pub const GL_NAND: u32 = 5390;
pub const GL_SET: u32 = 5391;
pub const GL_TEXTURE: u32 = 5890;
pub const GL_COLOR: u32 = 6144;
pub const GL_DEPTH: u32 = 6145;
pub const GL_STENCIL: u32 = 6146;
pub const GL_STENCIL_INDEX: u32 = 6401;
pub const GL_DEPTH_COMPONENT: u32 = 6402;
pub const GL_RED: u32 = 6403;
pub const GL_GREEN: u32 = 6404;
pub const GL_BLUE: u32 = 6405;
pub const GL_ALPHA: u32 = 6406;
pub const GL_RGB: u32 = 6407;
pub const GL_RGBA: u32 = 6408;
pub const GL_POINT: u32 = 6912;
pub const GL_LINE: u32 = 6913;
pub const GL_FILL: u32 = 6914;
pub const GL_KEEP: u32 = 7680;
pub const GL_REPLACE: u32 = 7681;
pub const GL_INCR: u32 = 7682;
pub const GL_DECR: u32 = 7683;
pub const GL_VENDOR: u32 = 7936;
pub const GL_RENDERER: u32 = 7937;
pub const GL_VERSION: u32 = 7938;
pub const GL_EXTENSIONS: u32 = 7939;
pub const GL_NEAREST: u32 = 9728;
pub const GL_LINEAR: u32 = 9729;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 9984;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 9985;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 9986;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 9987;
pub const GL_TEXTURE_MAG_FILTER: u32 = 10240;
pub const GL_TEXTURE_MIN_FILTER: u32 = 10241;
pub const GL_TEXTURE_WRAP_S: u32 = 10242;
pub const GL_TEXTURE_WRAP_T: u32 = 10243;
pub const GL_PROXY_TEXTURE_1D: u32 = 32867;
pub const GL_PROXY_TEXTURE_2D: u32 = 32868;
pub const GL_REPEAT: u32 = 10497;
pub const GL_R3_G3_B2: u32 = 10768;
pub const GL_RGB4: u32 = 32847;
pub const GL_RGB5: u32 = 32848;
pub const GL_RGB8: u32 = 32849;
pub const GL_RGB10: u32 = 32850;
pub const GL_RGB12: u32 = 32851;
pub const GL_RGB16: u32 = 32852;
pub const GL_RGBA2: u32 = 32853;
pub const GL_RGBA4: u32 = 32854;
pub const GL_RGB5_A1: u32 = 32855;
pub const GL_RGBA8: u32 = 32856;
pub const GL_RGB10_A2: u32 = 32857;
pub const GL_RGBA12: u32 = 32858;
pub const GL_RGBA16: u32 = 32859;
pub const GL_UNSIGNED_BYTE_3_3_2: u32 = 32818;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 32819;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 32820;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 32821;
pub const GL_UNSIGNED_INT_10_10_10_2: u32 = 32822;
pub const GL_TEXTURE_BINDING_3D: u32 = 32874;
pub const GL_PACK_SKIP_IMAGES: u32 = 32875;
pub const GL_PACK_IMAGE_HEIGHT: u32 = 32876;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 32877;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 32878;
pub const GL_TEXTURE_3D: u32 = 32879;
pub const GL_PROXY_TEXTURE_3D: u32 = 32880;
pub const GL_TEXTURE_DEPTH: u32 = 32881;
pub const GL_TEXTURE_WRAP_R: u32 = 32882;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 32883;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: u32 = 33634;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 33635;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: u32 = 33636;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: u32 = 33637;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 33638;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 33639;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 33640;
pub const GL_BGR: u32 = 32992;
pub const GL_BGRA: u32 = 32993;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 33000;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 33001;
pub const GL_CLAMP_TO_EDGE: u32 = 33071;
pub const GL_TEXTURE_MIN_LOD: u32 = 33082;
pub const GL_TEXTURE_MAX_LOD: u32 = 33083;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 33084;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 33085;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 2834;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: u32 = 2835;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 2850;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: u32 = 2851;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 33902;
pub const GL_CONSTANT_COLOR: u32 = 32769;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 32770;
pub const GL_CONSTANT_ALPHA: u32 = 32771;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 32772;
pub const GL_BLEND_COLOR: u32 = 32773;
pub const GL_FUNC_ADD: u32 = 32774;
pub const GL_MIN: u32 = 32775;
pub const GL_MAX: u32 = 32776;
pub const GL_BLEND_EQUATION: u32 = 32777;
pub const GL_FUNC_SUBTRACT: u32 = 32778;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 32779;
pub const GL_TEXTURE0: u32 = 33984;
pub const GL_TEXTURE1: u32 = 33985;
pub const GL_TEXTURE2: u32 = 33986;
pub const GL_TEXTURE3: u32 = 33987;
pub const GL_TEXTURE4: u32 = 33988;
pub const GL_TEXTURE5: u32 = 33989;
pub const GL_TEXTURE6: u32 = 33990;
pub const GL_TEXTURE7: u32 = 33991;
pub const GL_TEXTURE8: u32 = 33992;
pub const GL_TEXTURE9: u32 = 33993;
pub const GL_TEXTURE10: u32 = 33994;
pub const GL_TEXTURE11: u32 = 33995;
pub const GL_TEXTURE12: u32 = 33996;
pub const GL_TEXTURE13: u32 = 33997;
pub const GL_TEXTURE14: u32 = 33998;
pub const GL_TEXTURE15: u32 = 33999;
pub const GL_TEXTURE16: u32 = 34000;
pub const GL_TEXTURE17: u32 = 34001;
pub const GL_TEXTURE18: u32 = 34002;
pub const GL_TEXTURE19: u32 = 34003;
pub const GL_TEXTURE20: u32 = 34004;
pub const GL_TEXTURE21: u32 = 34005;
pub const GL_TEXTURE22: u32 = 34006;
pub const GL_TEXTURE23: u32 = 34007;
pub const GL_TEXTURE24: u32 = 34008;
pub const GL_TEXTURE25: u32 = 34009;
pub const GL_TEXTURE26: u32 = 34010;
pub const GL_TEXTURE27: u32 = 34011;
pub const GL_TEXTURE28: u32 = 34012;
pub const GL_TEXTURE29: u32 = 34013;
pub const GL_TEXTURE30: u32 = 34014;
pub const GL_TEXTURE31: u32 = 34015;
pub const GL_ACTIVE_TEXTURE: u32 = 34016;
pub const GL_MULTISAMPLE: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 32927;
pub const GL_SAMPLE_COVERAGE: u32 = 32928;
pub const GL_SAMPLE_BUFFERS: u32 = 32936;
pub const GL_SAMPLES: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 32939;
pub const GL_TEXTURE_CUBE_MAP: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 34074;
pub const GL_PROXY_TEXTURE_CUBE_MAP: u32 = 34075;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 34076;
pub const GL_COMPRESSED_RGB: u32 = 34029;
pub const GL_COMPRESSED_RGBA: u32 = 34030;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 34031;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: u32 = 34464;
pub const GL_TEXTURE_COMPRESSED: u32 = 34465;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 34467;
pub const GL_CLAMP_TO_BORDER: u32 = 33069;
pub const GL_BLEND_DST_RGB: u32 = 32968;
pub const GL_BLEND_SRC_RGB: u32 = 32969;
pub const GL_BLEND_DST_ALPHA: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA: u32 = 32971;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 33064;
pub const GL_DEPTH_COMPONENT16: u32 = 33189;
pub const GL_DEPTH_COMPONENT24: u32 = 33190;
pub const GL_DEPTH_COMPONENT32: u32 = 33191;
pub const GL_MIRRORED_REPEAT: u32 = 33648;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 34045;
pub const GL_TEXTURE_LOD_BIAS: u32 = 34049;
pub const GL_INCR_WRAP: u32 = 34055;
pub const GL_DECR_WRAP: u32 = 34056;
pub const GL_TEXTURE_DEPTH_SIZE: u32 = 34890;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 34892;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 34893;
pub const GL_BUFFER_SIZE: u32 = 34660;
pub const GL_BUFFER_USAGE: u32 = 34661;
pub const GL_QUERY_COUNTER_BITS: u32 = 34916;
pub const GL_CURRENT_QUERY: u32 = 34917;
pub const GL_QUERY_RESULT: u32 = 34918;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 34919;
pub const GL_ARRAY_BUFFER: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 34975;
pub const GL_READ_ONLY: u32 = 35000;
pub const GL_WRITE_ONLY: u32 = 35001;
pub const GL_READ_WRITE: u32 = 35002;
pub const GL_BUFFER_ACCESS: u32 = 35003;
pub const GL_BUFFER_MAPPED: u32 = 35004;
pub const GL_BUFFER_MAP_POINTER: u32 = 35005;
pub const GL_STREAM_DRAW: u32 = 35040;
pub const GL_STREAM_READ: u32 = 35041;
pub const GL_STREAM_COPY: u32 = 35042;
pub const GL_STATIC_DRAW: u32 = 35044;
pub const GL_STATIC_READ: u32 = 35045;
pub const GL_STATIC_COPY: u32 = 35046;
pub const GL_DYNAMIC_DRAW: u32 = 35048;
pub const GL_DYNAMIC_READ: u32 = 35049;
pub const GL_DYNAMIC_COPY: u32 = 35050;
pub const GL_SAMPLES_PASSED: u32 = 35092;
pub const GL_BLEND_EQUATION_RGB: u32 = 32777;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 34341;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 34342;
pub const GL_VERTEX_PROGRAM_POINT_SIZE: u32 = 34370;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 34373;
pub const GL_STENCIL_BACK_FUNC: u32 = 34816;
pub const GL_STENCIL_BACK_FAIL: u32 = 34817;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 34819;
pub const GL_MAX_DRAW_BUFFERS: u32 = 34852;
pub const GL_DRAW_BUFFER0: u32 = 34853;
pub const GL_DRAW_BUFFER1: u32 = 34854;
pub const GL_DRAW_BUFFER2: u32 = 34855;
pub const GL_DRAW_BUFFER3: u32 = 34856;
pub const GL_DRAW_BUFFER4: u32 = 34857;
pub const GL_DRAW_BUFFER5: u32 = 34858;
pub const GL_DRAW_BUFFER6: u32 = 34859;
pub const GL_DRAW_BUFFER7: u32 = 34860;
pub const GL_DRAW_BUFFER8: u32 = 34861;
pub const GL_DRAW_BUFFER9: u32 = 34862;
pub const GL_DRAW_BUFFER10: u32 = 34863;
pub const GL_DRAW_BUFFER11: u32 = 34864;
pub const GL_DRAW_BUFFER12: u32 = 34865;
pub const GL_DRAW_BUFFER13: u32 = 34866;
pub const GL_DRAW_BUFFER14: u32 = 34867;
pub const GL_DRAW_BUFFER15: u32 = 34868;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 34877;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 34921;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 34922;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 34930;
pub const GL_FRAGMENT_SHADER: u32 = 35632;
pub const GL_VERTEX_SHADER: u32 = 35633;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35657;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 35658;
pub const GL_MAX_VARYING_FLOATS: u32 = 35659;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 35660;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 35661;
pub const GL_SHADER_TYPE: u32 = 35663;
pub const GL_FLOAT_VEC2: u32 = 35664;
pub const GL_FLOAT_VEC3: u32 = 35665;
pub const GL_FLOAT_VEC4: u32 = 35666;
pub const GL_INT_VEC2: u32 = 35667;
pub const GL_INT_VEC3: u32 = 35668;
pub const GL_INT_VEC4: u32 = 35669;
pub const GL_BOOL: u32 = 35670;
pub const GL_BOOL_VEC2: u32 = 35671;
pub const GL_BOOL_VEC3: u32 = 35672;
pub const GL_BOOL_VEC4: u32 = 35673;
pub const GL_FLOAT_MAT2: u32 = 35674;
pub const GL_FLOAT_MAT3: u32 = 35675;
pub const GL_FLOAT_MAT4: u32 = 35676;
pub const GL_SAMPLER_1D: u32 = 35677;
pub const GL_SAMPLER_2D: u32 = 35678;
pub const GL_SAMPLER_3D: u32 = 35679;
pub const GL_SAMPLER_CUBE: u32 = 35680;
pub const GL_SAMPLER_1D_SHADOW: u32 = 35681;
pub const GL_SAMPLER_2D_SHADOW: u32 = 35682;
pub const GL_DELETE_STATUS: u32 = 35712;
pub const GL_COMPILE_STATUS: u32 = 35713;
pub const GL_LINK_STATUS: u32 = 35714;
pub const GL_VALIDATE_STATUS: u32 = 35715;
pub const GL_INFO_LOG_LENGTH: u32 = 35716;
pub const GL_ATTACHED_SHADERS: u32 = 35717;
pub const GL_ACTIVE_UNIFORMS: u32 = 35718;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 35719;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 35720;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 35721;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 35722;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 35723;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 35724;
pub const GL_CURRENT_PROGRAM: u32 = 35725;
pub const GL_POINT_SPRITE_COORD_ORIGIN: u32 = 36000;
pub const GL_LOWER_LEFT: u32 = 36001;
pub const GL_UPPER_LEFT: u32 = 36002;
pub const GL_STENCIL_BACK_REF: u32 = 36003;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 36004;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 36005;
pub const GL_PIXEL_PACK_BUFFER: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 35055;
pub const GL_FLOAT_MAT2x3: u32 = 35685;
pub const GL_FLOAT_MAT2x4: u32 = 35686;
pub const GL_FLOAT_MAT3x2: u32 = 35687;
pub const GL_FLOAT_MAT3x4: u32 = 35688;
pub const GL_FLOAT_MAT4x2: u32 = 35689;
pub const GL_FLOAT_MAT4x3: u32 = 35690;
pub const GL_SRGB: u32 = 35904;
pub const GL_SRGB8: u32 = 35905;
pub const GL_SRGB_ALPHA: u32 = 35906;
pub const GL_SRGB8_ALPHA8: u32 = 35907;
pub const GL_COMPRESSED_SRGB: u32 = 35912;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 35913;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 34894;
pub const GL_CLIP_DISTANCE0: u32 = 12288;
pub const GL_CLIP_DISTANCE1: u32 = 12289;
pub const GL_CLIP_DISTANCE2: u32 = 12290;
pub const GL_CLIP_DISTANCE3: u32 = 12291;
pub const GL_CLIP_DISTANCE4: u32 = 12292;
pub const GL_CLIP_DISTANCE5: u32 = 12293;
pub const GL_CLIP_DISTANCE6: u32 = 12294;
pub const GL_CLIP_DISTANCE7: u32 = 12295;
pub const GL_MAX_CLIP_DISTANCES: u32 = 3378;
pub const GL_MAJOR_VERSION: u32 = 33307;
pub const GL_MINOR_VERSION: u32 = 33308;
pub const GL_NUM_EXTENSIONS: u32 = 33309;
pub const GL_CONTEXT_FLAGS: u32 = 33310;
pub const GL_COMPRESSED_RED: u32 = 33317;
pub const GL_COMPRESSED_RG: u32 = 33318;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: u32 = 1;
pub const GL_RGBA32F: u32 = 34836;
pub const GL_RGB32F: u32 = 34837;
pub const GL_RGBA16F: u32 = 34842;
pub const GL_RGB16F: u32 = 34843;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 35069;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 35071;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 35076;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 35077;
pub const GL_CLAMP_READ_COLOR: u32 = 35100;
pub const GL_FIXED_ONLY: u32 = 35101;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 35659;
pub const GL_TEXTURE_1D_ARRAY: u32 = 35864;
pub const GL_PROXY_TEXTURE_1D_ARRAY: u32 = 35865;
pub const GL_TEXTURE_2D_ARRAY: u32 = 35866;
pub const GL_PROXY_TEXTURE_2D_ARRAY: u32 = 35867;
pub const GL_TEXTURE_BINDING_1D_ARRAY: u32 = 35868;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 35869;
pub const GL_R11F_G11F_B10F: u32 = 35898;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 35899;
pub const GL_RGB9_E5: u32 = 35901;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 35902;
pub const GL_TEXTURE_SHARED_SIZE: u32 = 35903;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 35958;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 35967;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 35968;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 35971;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 35972;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 35973;
pub const GL_PRIMITIVES_GENERATED: u32 = 35975;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 35976;
pub const GL_RASTERIZER_DISCARD: u32 = 35977;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 35978;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 35979;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 35980;
pub const GL_SEPARATE_ATTRIBS: u32 = 35981;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 35982;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 35983;
pub const GL_RGBA32UI: u32 = 36208;
pub const GL_RGB32UI: u32 = 36209;
pub const GL_RGBA16UI: u32 = 36214;
pub const GL_RGB16UI: u32 = 36215;
pub const GL_RGBA8UI: u32 = 36220;
pub const GL_RGB8UI: u32 = 36221;
pub const GL_RGBA32I: u32 = 36226;
pub const GL_RGB32I: u32 = 36227;
pub const GL_RGBA16I: u32 = 36232;
pub const GL_RGB16I: u32 = 36233;
pub const GL_RGBA8I: u32 = 36238;
pub const GL_RGB8I: u32 = 36239;
pub const GL_RED_INTEGER: u32 = 36244;
pub const GL_GREEN_INTEGER: u32 = 36245;
pub const GL_BLUE_INTEGER: u32 = 36246;
pub const GL_RGB_INTEGER: u32 = 36248;
pub const GL_RGBA_INTEGER: u32 = 36249;
pub const GL_BGR_INTEGER: u32 = 36250;
pub const GL_BGRA_INTEGER: u32 = 36251;
pub const GL_SAMPLER_1D_ARRAY: u32 = 36288;
pub const GL_SAMPLER_2D_ARRAY: u32 = 36289;
pub const GL_SAMPLER_1D_ARRAY_SHADOW: u32 = 36291;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 36292;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 36293;
pub const GL_UNSIGNED_INT_VEC2: u32 = 36294;
pub const GL_UNSIGNED_INT_VEC3: u32 = 36295;
pub const GL_UNSIGNED_INT_VEC4: u32 = 36296;
pub const GL_INT_SAMPLER_1D: u32 = 36297;
pub const GL_INT_SAMPLER_2D: u32 = 36298;
pub const GL_INT_SAMPLER_3D: u32 = 36299;
pub const GL_INT_SAMPLER_CUBE: u32 = 36300;
pub const GL_INT_SAMPLER_1D_ARRAY: u32 = 36302;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 36303;
pub const GL_UNSIGNED_INT_SAMPLER_1D: u32 = 36305;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 36306;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 36307;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 36308;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: u32 = 36310;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 36311;
pub const GL_QUERY_WAIT: u32 = 36371;
pub const GL_QUERY_NO_WAIT: u32 = 36372;
pub const GL_QUERY_BY_REGION_WAIT: u32 = 36373;
pub const GL_QUERY_BY_REGION_NO_WAIT: u32 = 36374;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 37151;
pub const GL_BUFFER_MAP_LENGTH: u32 = 37152;
pub const GL_BUFFER_MAP_OFFSET: u32 = 37153;
pub const GL_SAMPLER_2D_RECT: u32 = 35683;
pub const GL_SAMPLER_2D_RECT_SHADOW: u32 = 35684;
pub const GL_SAMPLER_BUFFER: u32 = 36290;
pub const GL_INT_SAMPLER_2D_RECT: u32 = 36301;
pub const GL_INT_SAMPLER_BUFFER: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: u32 = 36309;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: u32 = 36312;
pub const GL_TEXTURE_BUFFER: u32 = 35882;
pub const GL_MAX_TEXTURE_BUFFER_SIZE: u32 = 35883;
pub const GL_TEXTURE_BINDING_BUFFER: u32 = 35884;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: u32 = 35885;
pub const GL_TEXTURE_RECTANGLE: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: u32 = 34040;
pub const GL_R8_SNORM: u32 = 36756;
pub const GL_RG8_SNORM: u32 = 36757;
pub const GL_RGB8_SNORM: u32 = 36758;
pub const GL_RGBA8_SNORM: u32 = 36759;
pub const GL_R16_SNORM: u32 = 36760;
pub const GL_RG16_SNORM: u32 = 36761;
pub const GL_RGB16_SNORM: u32 = 36762;
pub const GL_RGBA16_SNORM: u32 = 36763;
pub const GL_SIGNED_NORMALIZED: u32 = 36764;
pub const GL_PRIMITIVE_RESTART: u32 = 36765;
pub const GL_PRIMITIVE_RESTART_INDEX: u32 = 36766;
pub const GL_CONTEXT_CORE_PROFILE_BIT: u32 = 1;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: u32 = 2;
pub const GL_LINES_ADJACENCY: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY: u32 = 13;
pub const GL_PROGRAM_POINT_SIZE: u32 = 34370;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: u32 = 35881;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: u32 = 36263;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: u32 = 36264;
pub const GL_GEOMETRY_SHADER: u32 = 36313;
pub const GL_GEOMETRY_VERTICES_OUT: u32 = 35094;
pub const GL_GEOMETRY_INPUT_TYPE: u32 = 35095;
pub const GL_GEOMETRY_OUTPUT_TYPE: u32 = 35096;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: u32 = 36319;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: u32 = 36321;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 37154;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: u32 = 37155;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: u32 = 37156;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 37157;
pub const GL_CONTEXT_PROFILE_MASK: u32 = 37158;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 35070;
pub const GL_SAMPLE_SHADING: u32 = 35894;
pub const GL_MIN_SAMPLE_SHADING_VALUE: u32 = 35895;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 36446;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 36447;
pub const GL_TEXTURE_CUBE_MAP_ARRAY: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: u32 = 36874;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY: u32 = 36875;
pub const GL_SAMPLER_CUBE_MAP_ARRAY: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 36879;
pub const GL_DEPTH_COMPONENT32F: u32 = 36012;
pub const GL_DEPTH32F_STENCIL8: u32 = 36013;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 36269;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 1286;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 33296;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 33297;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 33298;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 33299;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 33300;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 33301;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 33302;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 33303;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 33304;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 33305;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 33306;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 34024;
pub const GL_DEPTH_STENCIL: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8: u32 = 34042;
pub const GL_DEPTH24_STENCIL8: u32 = 35056;
pub const GL_TEXTURE_STENCIL_SIZE: u32 = 35057;
pub const GL_TEXTURE_RED_TYPE: u32 = 35856;
pub const GL_TEXTURE_GREEN_TYPE: u32 = 35857;
pub const GL_TEXTURE_BLUE_TYPE: u32 = 35858;
pub const GL_TEXTURE_ALPHA_TYPE: u32 = 35859;
pub const GL_TEXTURE_DEPTH_TYPE: u32 = 35862;
pub const GL_UNSIGNED_NORMALIZED: u32 = 35863;
pub const GL_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING: u32 = 36007;
pub const GL_READ_FRAMEBUFFER: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER: u32 = 36009;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 36010;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 36011;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 36051;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 36052;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: u32 = 36059;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: u32 = 36060;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 36061;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 36063;
pub const GL_COLOR_ATTACHMENT0: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15: u32 = 36079;
pub const GL_DEPTH_ATTACHMENT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT: u32 = 36128;
pub const GL_FRAMEBUFFER: u32 = 36160;
pub const GL_RENDERBUFFER: u32 = 36161;
pub const GL_RENDERBUFFER_WIDTH: u32 = 36162;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 36164;
pub const GL_STENCIL_INDEX1: u32 = 36166;
pub const GL_STENCIL_INDEX4: u32 = 36167;
pub const GL_STENCIL_INDEX8: u32 = 36168;
pub const GL_STENCIL_INDEX16: u32 = 36169;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 36176;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 36177;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 36178;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 36179;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 36180;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 36181;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 36182;
pub const GL_MAX_SAMPLES: u32 = 36183;
pub const GL_FRAMEBUFFER_SRGB: u32 = 36281;
pub const GL_HALF_FLOAT: u32 = 5131;
pub const GL_MAP_READ_BIT: u32 = 1;
pub const GL_MAP_WRITE_BIT: u32 = 2;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 4;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 8;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 16;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 32;
pub const GL_COMPRESSED_RED_RGTC1: u32 = 36283;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1: u32 = 36284;
pub const GL_COMPRESSED_RG_RGTC2: u32 = 36285;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2: u32 = 36286;
pub const GL_RG: u32 = 33319;
pub const GL_RG_INTEGER: u32 = 33320;
pub const GL_R8: u32 = 33321;
pub const GL_R16: u32 = 33322;
pub const GL_RG8: u32 = 33323;
pub const GL_RG16: u32 = 33324;
pub const GL_R16F: u32 = 33325;
pub const GL_R32F: u32 = 33326;
pub const GL_RG16F: u32 = 33327;
pub const GL_RG32F: u32 = 33328;
pub const GL_R8I: u32 = 33329;
pub const GL_R8UI: u32 = 33330;
pub const GL_R16I: u32 = 33331;
pub const GL_R16UI: u32 = 33332;
pub const GL_R32I: u32 = 33333;
pub const GL_R32UI: u32 = 33334;
pub const GL_RG8I: u32 = 33335;
pub const GL_RG8UI: u32 = 33336;
pub const GL_RG16I: u32 = 33337;
pub const GL_RG16UI: u32 = 33338;
pub const GL_RG32I: u32 = 33339;
pub const GL_RG32UI: u32 = 33340;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 34229;
pub const GL_UNIFORM_BUFFER: u32 = 35345;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 35368;
pub const GL_UNIFORM_BUFFER_START: u32 = 35369;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 35370;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 35371;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: u32 = 35372;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 35373;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 35374;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 35375;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 35376;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 35377;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: u32 = 35378;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35379;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 35380;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 35381;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 35382;
pub const GL_UNIFORM_TYPE: u32 = 35383;
pub const GL_UNIFORM_SIZE: u32 = 35384;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 35385;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 35386;
pub const GL_UNIFORM_OFFSET: u32 = 35387;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 35388;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 35389;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 35390;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 35391;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 35392;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 35393;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 35394;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 35395;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 35396;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: u32 = 35397;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 35398;
pub const GL_INVALID_INDEX: u32 = 4294967295;
pub const GL_COPY_READ_BUFFER: u32 = 36662;
pub const GL_COPY_WRITE_BUFFER: u32 = 36663;
pub const GL_DEPTH_CLAMP: u32 = 34383;
pub const GL_FIRST_VERTEX_CONVENTION: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION: u32 = 36430;
pub const GL_PROVOKING_VERTEX: u32 = 36431;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: u32 = 34895;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 37137;
pub const GL_OBJECT_TYPE: u32 = 37138;
pub const GL_SYNC_CONDITION: u32 = 37139;
pub const GL_SYNC_STATUS: u32 = 37140;
pub const GL_SYNC_FLAGS: u32 = 37141;
pub const GL_SYNC_FENCE: u32 = 37142;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 37143;
pub const GL_UNSIGNALED: u32 = 37144;
pub const GL_SIGNALED: u32 = 37145;
pub const GL_ALREADY_SIGNALED: u32 = 37146;
pub const GL_TIMEOUT_EXPIRED: u32 = 37147;
pub const GL_CONDITION_SATISFIED: u32 = 37148;
pub const GL_WAIT_FAILED: u32 = 37149;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 1;
pub const GL_TIMEOUT_IGNORED: i32 = -1;
pub const GL_SAMPLE_POSITION: u32 = 36432;
pub const GL_SAMPLE_MASK: u32 = 36433;
pub const GL_SAMPLE_MASK_VALUE: u32 = 36434;
pub const GL_MAX_SAMPLE_MASK_WORDS: u32 = 36441;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 37120;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: u32 = 37121;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37122;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 37123;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: u32 = 37124;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: u32 = 37125;
pub const GL_TEXTURE_SAMPLES: u32 = 37126;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: u32 = 37127;
pub const GL_SAMPLER_2D_MULTISAMPLE: u32 = 37128;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE: u32 = 37129;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: u32 = 37130;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37131;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37132;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 37133;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES: u32 = 37134;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: u32 = 37135;
pub const GL_MAX_INTEGER_SAMPLES: u32 = 37136;
pub const GL_SRC1_COLOR: u32 = 35065;
pub const GL_SRC1_ALPHA: u32 = 34185;
pub const GL_ONE_MINUS_SRC1_COLOR: u32 = 35066;
pub const GL_ONE_MINUS_SRC1_ALPHA: u32 = 35067;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: u32 = 35068;
pub const GL_ANY_SAMPLES_PASSED: u32 = 35887;
pub const GL_SAMPLER_BINDING: u32 = 35097;
pub const GL_RGB10_A2UI: u32 = 36975;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 36418;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 36419;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 36420;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 36421;
pub const GL_TEXTURE_SWIZZLE_RGBA: u32 = 36422;
pub const GL_TIME_ELAPSED: u32 = 35007;
pub const GL_TIMESTAMP: u32 = 36392;
pub const GL_INT_2_10_10_10_REV: u32 = 36255;
pub const GL_DRAW_INDIRECT_BUFFER: u32 = 36671;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING: u32 = 36675;
pub const GL_GEOMETRY_SHADER_INVOCATIONS: u32 = 34943;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: u32 = 36442;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: u32 = 36443;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: u32 = 36444;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: u32 = 36445;
pub const GL_DOUBLE_VEC2: u32 = 36860;
pub const GL_DOUBLE_VEC3: u32 = 36861;
pub const GL_DOUBLE_VEC4: u32 = 36862;
pub const GL_DOUBLE_MAT2: u32 = 36678;
pub const GL_DOUBLE_MAT3: u32 = 36679;
pub const GL_DOUBLE_MAT4: u32 = 36680;
pub const GL_DOUBLE_MAT2x3: u32 = 36681;
pub const GL_DOUBLE_MAT2x4: u32 = 36682;
pub const GL_DOUBLE_MAT3x2: u32 = 36683;
pub const GL_DOUBLE_MAT3x4: u32 = 36684;
pub const GL_DOUBLE_MAT4x2: u32 = 36685;
pub const GL_DOUBLE_MAT4x3: u32 = 36686;
pub const GL_ACTIVE_SUBROUTINES: u32 = 36325;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: u32 = 36326;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 36423;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: u32 = 36424;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: u32 = 36425;
pub const GL_MAX_SUBROUTINES: u32 = 36327;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 36328;
pub const GL_NUM_COMPATIBLE_SUBROUTINES: u32 = 36426;
pub const GL_COMPATIBLE_SUBROUTINES: u32 = 36427;
pub const GL_PATCHES: u32 = 14;
pub const GL_PATCH_VERTICES: u32 = 36466;
pub const GL_PATCH_DEFAULT_INNER_LEVEL: u32 = 36467;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL: u32 = 36468;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES: u32 = 36469;
pub const GL_TESS_GEN_MODE: u32 = 36470;
pub const GL_TESS_GEN_SPACING: u32 = 36471;
pub const GL_TESS_GEN_VERTEX_ORDER: u32 = 36472;
pub const GL_TESS_GEN_POINT_MODE: u32 = 36473;
pub const GL_QUADS: u32 = 7;
pub const GL_ISOLINES: u32 = 36474;
pub const GL_FRACTIONAL_ODD: u32 = 36475;
pub const GL_FRACTIONAL_EVEN: u32 = 36476;
pub const GL_MAX_PATCH_VERTICES: u32 = 36477;
pub const GL_MAX_TESS_GEN_LEVEL: u32 = 36478;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 36479;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 36480;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: u32 = 36481;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: u32 = 36482;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: u32 = 36483;
pub const GL_MAX_TESS_PATCH_COMPONENTS: u32 = 36484;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: u32 = 36485;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: u32 = 36486;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: u32 = 36489;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: u32 = 36490;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: u32 = 34924;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: u32 = 34925;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 36382;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 36383;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 34032;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 34033;
pub const GL_TESS_EVALUATION_SHADER: u32 = 36487;
pub const GL_TESS_CONTROL_SHADER: u32 = 36488;
pub const GL_TRANSFORM_FEEDBACK: u32 = 36386;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: u32 = 36387;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: u32 = 36388;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 36389;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: u32 = 36464;
pub const GL_MAX_VERTEX_STREAMS: u32 = 36465;
pub const GL_FIXED: u32 = 5132;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 35738;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 35739;
pub const GL_LOW_FLOAT: u32 = 36336;
pub const GL_MEDIUM_FLOAT: u32 = 36337;
pub const GL_HIGH_FLOAT: u32 = 36338;
pub const GL_LOW_INT: u32 = 36339;
pub const GL_MEDIUM_INT: u32 = 36340;
pub const GL_HIGH_INT: u32 = 36341;
pub const GL_SHADER_COMPILER: u32 = 36346;
pub const GL_SHADER_BINARY_FORMATS: u32 = 36344;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 36345;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 36347;
pub const GL_MAX_VARYING_VECTORS: u32 = 36348;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 36349;
pub const GL_RGB565: u32 = 36194;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 33367;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 34625;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 34814;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 34815;
pub const GL_VERTEX_SHADER_BIT: u32 = 1;
pub const GL_FRAGMENT_SHADER_BIT: u32 = 2;
pub const GL_GEOMETRY_SHADER_BIT: u32 = 4;
pub const GL_TESS_CONTROL_SHADER_BIT: u32 = 8;
pub const GL_TESS_EVALUATION_SHADER_BIT: u32 = 16;
pub const GL_ALL_SHADER_BITS: u32 = 4294967295;
pub const GL_PROGRAM_SEPARABLE: u32 = 33368;
pub const GL_ACTIVE_PROGRAM: u32 = 33369;
pub const GL_PROGRAM_PIPELINE_BINDING: u32 = 33370;
pub const GL_MAX_VIEWPORTS: u32 = 33371;
pub const GL_VIEWPORT_SUBPIXEL_BITS: u32 = 33372;
pub const GL_VIEWPORT_BOUNDS_RANGE: u32 = 33373;
pub const GL_LAYER_PROVOKING_VERTEX: u32 = 33374;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: u32 = 33375;
pub const GL_UNDEFINED_VERTEX: u32 = 33376;
pub const GL_VERSION_1_0: u32 = 1;
pub const GL_VERSION_1_1: u32 = 1;
pub const GL_VERSION_1_2: u32 = 1;
pub const GL_VERSION_1_3: u32 = 1;
pub const GL_VERSION_1_4: u32 = 1;
pub const GL_VERSION_1_5: u32 = 1;
pub const GL_VERSION_2_0: u32 = 1;
pub const GL_VERSION_2_1: u32 = 1;
pub const GL_VERSION_3_0: u32 = 1;
pub const GL_VERSION_3_1: u32 = 1;
pub const GL_VERSION_3_2: u32 = 1;
pub const GL_VERSION_3_3: u32 = 1;
pub const GL_VERSION_4_0: u32 = 1;
pub const GL_VERSION_4_1: u32 = 1;
pub const GL_ARB_depth_buffer_float: u32 = 1;
pub const GL_ARB_framebuffer_object: u32 = 1;
pub const GL_ARB_framebuffer_sRGB: u32 = 1;
pub const GL_ARB_half_float_vertex: u32 = 1;
pub const GL_ARB_map_buffer_range: u32 = 1;
pub const GL_ARB_texture_compression_rgtc: u32 = 1;
pub const GL_ARB_texture_rg: u32 = 1;
pub const GL_ARB_vertex_array_object: u32 = 1;
pub const GL_ARB_uniform_buffer_object: u32 = 1;
pub const GL_ARB_copy_buffer: u32 = 1;
pub const GL_ARB_depth_clamp: u32 = 1;
pub const GL_ARB_draw_elements_base_vertex: u32 = 1;
pub const GL_ARB_fragment_coord_conventions: u32 = 1;
pub const GL_ARB_provoking_vertex: u32 = 1;
pub const GL_ARB_seamless_cube_map: u32 = 1;
pub const GL_ARB_sync: u32 = 1;
pub const GL_ARB_texture_multisample: u32 = 1;
pub const GL_ARB_vertex_array_bgra: u32 = 1;
pub const GL_ARB_texture_query_lod: u32 = 1;
pub const GL_ARB_blend_func_extended: u32 = 1;
pub const GL_ARB_explicit_attrib_location: u32 = 1;
pub const GL_ARB_occlusion_query2: u32 = 1;
pub const GL_ARB_sampler_objects: u32 = 1;
pub const GL_ARB_shader_bit_encoding: u32 = 1;
pub const GL_ARB_texture_rgb10_a2ui: u32 = 1;
pub const GL_ARB_texture_swizzle: u32 = 1;
pub const GL_ARB_timer_query: u32 = 1;
pub const GL_ARB_vertex_type_2_10_10_10_rev: u32 = 1;
pub const GL_ARB_draw_indirect: u32 = 1;
pub const GL_ARB_gpu_shader5: u32 = 1;
pub const GL_ARB_gpu_shader_fp64: u32 = 1;
pub const GL_ARB_shader_subroutine: u32 = 1;
pub const GL_ARB_tessellation_shader: u32 = 1;
pub const GL_ARB_texture_buffer_object_rgb32: u32 = 1;
pub const GL_ARB_transform_feedback2: u32 = 1;
pub const GL_ARB_transform_feedback3: u32 = 1;
pub const GL_ARB_ES2_compatibility: u32 = 1;
pub const GL_ARB_get_program_binary: u32 = 1;
pub const GL_ARB_separate_shader_objects: u32 = 1;
pub const GL_ARB_shader_precision: u32 = 1;
pub const GL_ARB_vertex_attrib_64bit: u32 = 1;
pub const GL_ARB_viewport_array: u32 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: u32 = 35070;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 37760;
pub const GL_SAMPLE_SHADING_ARB: u32 = 35894;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB: u32 = 35895;
pub const GL_SHADER_INCLUDE_ARB: u32 = 36270;
pub const GL_NAMED_STRING_LENGTH_ARB: u32 = 36329;
pub const GL_NAMED_STRING_TYPE_ARB: u32 = 36330;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 36873;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: u32 = 36874;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 36875;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 36876;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: u32 = 36877;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 36878;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 36879;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 36446;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: u32 = 36447;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: u32 = 36767;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 37167;
pub const GL_BUFFER_OBJECT_EXT: u32 = 37201;
pub const GL_SHADER_OBJECT_EXT: u32 = 35656;
pub const GL_PROGRAM_OBJECT_EXT: u32 = 35648;
pub const GL_VERTEX_ARRAY_OBJECT_EXT: u32 = 37204;
pub const GL_QUERY_OBJECT_EXT: u32 = 37203;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT: u32 = 35407;
pub const GL_SYNC_OBJECT_APPLE: u32 = 35411;
pub const GL_SAMPLER: u32 = 33510;
pub const GL_DEPTH_BOUNDS_TEST_EXT: u32 = 34960;
pub const GL_DEPTH_BOUNDS_EXT: u32 = 34961;
pub const GL_SCALED_RESOLVE_FASTEST_EXT: u32 = 37050;
pub const GL_SCALED_RESOLVE_NICEST_EXT: u32 = 37051;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 33776;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 33777;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 33778;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 33779;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT: u32 = 35916;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: u32 = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: u32 = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: u32 = 35919;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34046;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34047;
pub const GL_MIRROR_CLAMP_EXT: u32 = 34626;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 34627;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT: u32 = 35090;
pub const GL_TEXTURE_SRGB_DECODE_EXT: u32 = 35400;
pub const GL_DECODE_EXT: u32 = 35401;
pub const GL_SKIP_DECODE_EXT: u32 = 35402;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE: u32 = 34226;
pub const GL_RELEASED_APPLE: u32 = 35353;
pub const GL_VOLATILE_APPLE: u32 = 35354;
pub const GL_RETAINED_APPLE: u32 = 35355;
pub const GL_UNDEFINED_APPLE: u32 = 35356;
pub const GL_PURGEABLE_APPLE: u32 = 35357;
pub const GL_RGB_422_APPLE: u32 = 35359;
pub const GL_UNSIGNED_SHORT_8_8_APPLE: u32 = 34234;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE: u32 = 34235;
pub const GL_RGB_RAW_422_APPLE: u32 = 35409;
pub const GL_PACK_ROW_BYTES_APPLE: u32 = 35349;
pub const GL_UNPACK_ROW_BYTES_APPLE: u32 = 35350;
pub const GL_PACK_IMAGE_BYTES_APPLE: u32 = 35351;
pub const GL_UNPACK_IMAGE_BYTES_APPLE: u32 = 35352;
pub const GL_TEXTURE_RANGE_LENGTH_APPLE: u32 = 34231;
pub const GL_TEXTURE_RANGE_POINTER_APPLE: u32 = 34232;
pub const GL_TEXTURE_STORAGE_HINT_APPLE: u32 = 34236;
pub const GL_TEXTURE_MINIMIZE_STORAGE_APPLE: u32 = 34230;
pub const GL_STORAGE_PRIVATE_APPLE: u32 = 34237;
pub const GL_STORAGE_CACHED_APPLE: u32 = 34238;
pub const GL_STORAGE_SHARED_APPLE: u32 = 34239;
pub const GL_MIRROR_CLAMP_ATI: u32 = 34626;
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI: u32 = 34627;
pub const GL_ARB_draw_buffers_blend: u32 = 1;
pub const GL_ARB_instanced_arrays: u32 = 1;
pub const GL_ARB_internalformat_query: u32 = 1;
pub const GL_ARB_sample_shading: u32 = 1;
pub const GL_ARB_shading_language_include: u32 = 1;
pub const GL_ARB_texture_cube_map_array: u32 = 1;
pub const GL_ARB_texture_gather: u32 = 1;
pub const GL_ARB_texture_storage: u32 = 1;
pub const GL_EXT_debug_label: u32 = 1;
pub const GL_EXT_debug_marker: u32 = 1;
pub const GL_EXT_depth_bounds_test: u32 = 1;
pub const GL_EXT_framebuffer_multisample_blit_scaled: u32 = 1;
pub const GL_EXT_texture_compression_s3tc: u32 = 1;
pub const GL_EXT_texture_filter_anisotropic: u32 = 1;
pub const GL_EXT_texture_mirror_clamp: u32 = 1;
pub const GL_EXT_texture_sRGB_decode: u32 = 1;
pub const GL_APPLE_client_storage: u32 = 1;
pub const GL_APPLE_container_object_shareable: u32 = 1;
pub const GL_APPLE_flush_render: u32 = 1;
pub const GL_APPLE_object_purgeable: u32 = 1;
pub const GL_APPLE_rgb_422: u32 = 1;
pub const GL_APPLE_row_bytes: u32 = 1;
pub const GL_APPLE_texture_range: u32 = 1;
pub const GL_ATI_texture_mirror_once: u32 = 1;
pub const GL_NV_texture_barrier: u32 = 1;
pub const GL_ARB_color_buffer_float: u32 = 1;
pub const GL_ARB_depth_texture: u32 = 1;
pub const GL_ARB_draw_buffers: u32 = 1;
pub const GL_ARB_draw_instanced: u32 = 1;
pub const GL_ARB_fragment_program: u32 = 1;
pub const GL_ARB_fragment_program_shadow: u32 = 1;
pub const GL_ARB_fragment_shader: u32 = 1;
pub const GL_ARB_half_float_pixel: u32 = 1;
pub const GL_ARB_imaging: u32 = 1;
pub const GL_ARB_multisample: u32 = 1;
pub const GL_ARB_multitexture: u32 = 1;
pub const GL_ARB_occlusion_query: u32 = 1;
pub const GL_ARB_pixel_buffer_object: u32 = 1;
pub const GL_ARB_point_parameters: u32 = 1;
pub const GL_ARB_point_sprite: u32 = 1;
pub const GL_ARB_shader_objects: u32 = 1;
pub const GL_ARB_shader_texture_lod: u32 = 1;
pub const GL_ARB_shading_language_100: u32 = 1;
pub const GL_ARB_shadow: u32 = 1;
pub const GL_ARB_shadow_ambient: u32 = 1;
pub const GL_ARB_texture_border_clamp: u32 = 1;
pub const GL_ARB_texture_compression: u32 = 1;
pub const GL_ARB_texture_cube_map: u32 = 1;
pub const GL_ARB_texture_env_add: u32 = 1;
pub const GL_ARB_texture_env_combine: u32 = 1;
pub const GL_ARB_texture_env_crossbar: u32 = 1;
pub const GL_ARB_texture_env_dot3: u32 = 1;
pub const GL_ARB_texture_float: u32 = 1;
pub const GL_ARB_texture_mirrored_repeat: u32 = 1;
pub const GL_ARB_texture_non_power_of_two: u32 = 1;
pub const GL_ARB_texture_rectangle: u32 = 1;
pub const GL_ARB_transpose_matrix: u32 = 1;
pub const GL_ARB_vertex_blend: u32 = 1;
pub const GL_ARB_vertex_buffer_object: u32 = 1;
pub const GL_ARB_vertex_program: u32 = 1;
pub const GL_ARB_vertex_shader: u32 = 1;
pub const GL_ARB_window_pos: u32 = 1;
pub const GL_EXT_abgr: u32 = 1;
pub const GL_EXT_bgra: u32 = 1;
pub const GL_EXT_bindable_uniform: u32 = 1;
pub const GL_EXT_blend_color: u32 = 1;
pub const GL_EXT_blend_equation_separate: u32 = 1;
pub const GL_EXT_blend_func_separate: u32 = 1;
pub const GL_EXT_blend_minmax: u32 = 1;
pub const GL_EXT_blend_subtract: u32 = 1;
pub const GL_EXT_clip_volume_hint: u32 = 1;
pub const GL_EXT_draw_buffers2: u32 = 1;
pub const GL_EXT_draw_range_elements: u32 = 1;
pub const GL_EXT_fog_coord: u32 = 1;
pub const GL_EXT_framebuffer_blit: u32 = 1;
pub const GL_EXT_framebuffer_multisample: u32 = 1;
pub const GL_EXT_framebuffer_object: u32 = 1;
pub const GL_EXT_framebuffer_sRGB: u32 = 1;
pub const GL_EXT_geometry_shader4: u32 = 1;
pub const GL_EXT_gpu_program_parameters: u32 = 1;
pub const GL_EXT_gpu_shader4: u32 = 1;
pub const GL_EXT_multi_draw_arrays: u32 = 1;
pub const GL_EXT_packed_depth_stencil: u32 = 1;
pub const GL_EXT_packed_float: u32 = 1;
pub const GL_EXT_provoking_vertex: u32 = 1;
pub const GL_EXT_rescale_normal: u32 = 1;
pub const GL_EXT_secondary_color: u32 = 1;
pub const GL_EXT_separate_specular_color: u32 = 1;
pub const GL_EXT_shadow_funcs: u32 = 1;
pub const GL_EXT_stencil_two_side: u32 = 1;
pub const GL_EXT_stencil_wrap: u32 = 1;
pub const GL_EXT_texture_array: u32 = 1;
pub const GL_EXT_texture_compression_dxt1: u32 = 1;
pub const GL_EXT_texture_env_add: u32 = 1;
pub const GL_EXT_texture_integer: u32 = 1;
pub const GL_EXT_texture_lod_bias: u32 = 1;
pub const GL_EXT_texture_rectangle: u32 = 1;
pub const GL_EXT_texture_shared_exponent: u32 = 1;
pub const GL_EXT_texture_sRGB: u32 = 1;
pub const GL_EXT_timer_query: u32 = 1;
pub const GL_EXT_transform_feedback: u32 = 1;
pub const GL_EXT_vertex_array_bgra: u32 = 1;
pub const GL_APPLE_aux_depth_stencil: u32 = 1;
pub const GL_APPLE_element_array: u32 = 1;
pub const GL_APPLE_fence: u32 = 1;
pub const GL_APPLE_float_pixels: u32 = 1;
pub const GL_APPLE_flush_buffer_range: u32 = 1;
pub const GL_APPLE_packed_pixels: u32 = 1;
pub const GL_APPLE_pixel_buffer: u32 = 1;
pub const GL_APPLE_specular_vector: u32 = 1;
pub const GL_APPLE_transform_hint: u32 = 1;
pub const GL_APPLE_vertex_array_object: u32 = 1;
pub const GL_APPLE_vertex_array_range: u32 = 1;
pub const GL_APPLE_vertex_point_size: u32 = 1;
pub const GL_APPLE_vertex_program_evaluators: u32 = 1;
pub const GL_APPLE_ycbcr_422: u32 = 1;
pub const GL_ATI_blend_equation_separate: u32 = 1;
pub const GL_ATI_blend_weighted_minmax: u32 = 1;
pub const GL_ATI_separate_stencil: u32 = 1;
pub const GL_ATI_texture_compression_3dc: u32 = 1;
pub const GL_ATI_texture_env_combine3: u32 = 1;
pub const GL_ATI_texture_float: u32 = 1;
pub const GL_IBM_rasterpos_clip: u32 = 1;
pub const GL_NV_blend_square: u32 = 1;
pub const GL_NV_conditional_render: u32 = 1;
pub const GL_NV_depth_clamp: u32 = 1;
pub const GL_NV_fog_distance: u32 = 1;
pub const GL_NV_fragment_program_option: u32 = 1;
pub const GL_NV_fragment_program2: u32 = 1;
pub const GL_NV_light_max_exponent: u32 = 1;
pub const GL_NV_multisample_filter_hint: u32 = 1;
pub const GL_NV_point_sprite: u32 = 1;
pub const GL_NV_texgen_reflection: u32 = 1;
pub const GL_NV_vertex_program2_option: u32 = 1;
pub const GL_NV_vertex_program3: u32 = 1;
pub const GL_SGI_color_matrix: u32 = 1;
pub const GL_SGIS_generate_mipmap: u32 = 1;
pub const GL_SGIS_texture_edge_clamp: u32 = 1;
pub const GL_SGIS_texture_lod: u32 = 1;
pub const GL_GLEXT_VERSION: u32 = 8;
pub const GL_RGBA_FLOAT_MODE_ARB: u32 = 34848;
pub const GL_CLAMP_VERTEX_COLOR_ARB: u32 = 35098;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB: u32 = 35099;
pub const GL_CLAMP_READ_COLOR_ARB: u32 = 35100;
pub const GL_FIXED_ONLY_ARB: u32 = 35101;
pub const GL_DEPTH_COMPONENT16_ARB: u32 = 33189;
pub const GL_DEPTH_COMPONENT24_ARB: u32 = 33190;
pub const GL_DEPTH_COMPONENT32_ARB: u32 = 33191;
pub const GL_TEXTURE_DEPTH_SIZE_ARB: u32 = 34890;
pub const GL_DEPTH_TEXTURE_MODE_ARB: u32 = 34891;
pub const GL_MAX_DRAW_BUFFERS_ARB: u32 = 34852;
pub const GL_DRAW_BUFFER0_ARB: u32 = 34853;
pub const GL_DRAW_BUFFER1_ARB: u32 = 34854;
pub const GL_DRAW_BUFFER2_ARB: u32 = 34855;
pub const GL_DRAW_BUFFER3_ARB: u32 = 34856;
pub const GL_DRAW_BUFFER4_ARB: u32 = 34857;
pub const GL_DRAW_BUFFER5_ARB: u32 = 34858;
pub const GL_DRAW_BUFFER6_ARB: u32 = 34859;
pub const GL_DRAW_BUFFER7_ARB: u32 = 34860;
pub const GL_DRAW_BUFFER8_ARB: u32 = 34861;
pub const GL_DRAW_BUFFER9_ARB: u32 = 34862;
pub const GL_DRAW_BUFFER10_ARB: u32 = 34863;
pub const GL_DRAW_BUFFER11_ARB: u32 = 34864;
pub const GL_DRAW_BUFFER12_ARB: u32 = 34865;
pub const GL_DRAW_BUFFER13_ARB: u32 = 34866;
pub const GL_DRAW_BUFFER14_ARB: u32 = 34867;
pub const GL_DRAW_BUFFER15_ARB: u32 = 34868;
pub const GL_FRAGMENT_PROGRAM_ARB: u32 = 34820;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 34821;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 34822;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 34823;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 34824;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 34825;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 34826;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 34827;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 34828;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 34829;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 34830;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 34831;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 34832;
pub const GL_MAX_TEXTURE_COORDS_ARB: u32 = 34929;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB: u32 = 34930;
pub const GL_FRAGMENT_SHADER_ARB: u32 = 35632;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: u32 = 35657;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: u32 = 35723;
pub const GL_HALF_FLOAT_ARB: u32 = 5131;
pub const GL_MULTISAMPLE_ARB: u32 = 32925;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB: u32 = 32926;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB: u32 = 32927;
pub const GL_SAMPLE_COVERAGE_ARB: u32 = 32928;
pub const GL_SAMPLE_BUFFERS_ARB: u32 = 32936;
pub const GL_SAMPLES_ARB: u32 = 32937;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB: u32 = 32938;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB: u32 = 32939;
pub const GL_MULTISAMPLE_BIT_ARB: u32 = 536870912;
pub const GL_TEXTURE0_ARB: u32 = 33984;
pub const GL_TEXTURE1_ARB: u32 = 33985;
pub const GL_TEXTURE2_ARB: u32 = 33986;
pub const GL_TEXTURE3_ARB: u32 = 33987;
pub const GL_TEXTURE4_ARB: u32 = 33988;
pub const GL_TEXTURE5_ARB: u32 = 33989;
pub const GL_TEXTURE6_ARB: u32 = 33990;
pub const GL_TEXTURE7_ARB: u32 = 33991;
pub const GL_TEXTURE8_ARB: u32 = 33992;
pub const GL_TEXTURE9_ARB: u32 = 33993;
pub const GL_TEXTURE10_ARB: u32 = 33994;
pub const GL_TEXTURE11_ARB: u32 = 33995;
pub const GL_TEXTURE12_ARB: u32 = 33996;
pub const GL_TEXTURE13_ARB: u32 = 33997;
pub const GL_TEXTURE14_ARB: u32 = 33998;
pub const GL_TEXTURE15_ARB: u32 = 33999;
pub const GL_TEXTURE16_ARB: u32 = 34000;
pub const GL_TEXTURE17_ARB: u32 = 34001;
pub const GL_TEXTURE18_ARB: u32 = 34002;
pub const GL_TEXTURE19_ARB: u32 = 34003;
pub const GL_TEXTURE20_ARB: u32 = 34004;
pub const GL_TEXTURE21_ARB: u32 = 34005;
pub const GL_TEXTURE22_ARB: u32 = 34006;
pub const GL_TEXTURE23_ARB: u32 = 34007;
pub const GL_TEXTURE24_ARB: u32 = 34008;
pub const GL_TEXTURE25_ARB: u32 = 34009;
pub const GL_TEXTURE26_ARB: u32 = 34010;
pub const GL_TEXTURE27_ARB: u32 = 34011;
pub const GL_TEXTURE28_ARB: u32 = 34012;
pub const GL_TEXTURE29_ARB: u32 = 34013;
pub const GL_TEXTURE30_ARB: u32 = 34014;
pub const GL_TEXTURE31_ARB: u32 = 34015;
pub const GL_ACTIVE_TEXTURE_ARB: u32 = 34016;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB: u32 = 34017;
pub const GL_MAX_TEXTURE_UNITS_ARB: u32 = 34018;
pub const GL_SAMPLES_PASSED_ARB: u32 = 35092;
pub const GL_QUERY_COUNTER_BITS_ARB: u32 = 34916;
pub const GL_CURRENT_QUERY_ARB: u32 = 34917;
pub const GL_QUERY_RESULT_ARB: u32 = 34918;
pub const GL_QUERY_RESULT_AVAILABLE_ARB: u32 = 34919;
pub const GL_PIXEL_PACK_BUFFER_ARB: u32 = 35051;
pub const GL_PIXEL_UNPACK_BUFFER_ARB: u32 = 35052;
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB: u32 = 35053;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB: u32 = 35055;
pub const GL_POINT_SIZE_MIN_ARB: u32 = 33062;
pub const GL_POINT_SIZE_MAX_ARB: u32 = 33063;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB: u32 = 33064;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB: u32 = 33065;
pub const GL_POINT_SPRITE_ARB: u32 = 34913;
pub const GL_COORD_REPLACE_ARB: u32 = 34914;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: u32 = 36428;
pub const GL_PROGRAM_OBJECT_ARB: u32 = 35648;
pub const GL_OBJECT_TYPE_ARB: u32 = 35662;
pub const GL_OBJECT_SUBTYPE_ARB: u32 = 35663;
pub const GL_OBJECT_DELETE_STATUS_ARB: u32 = 35712;
pub const GL_OBJECT_COMPILE_STATUS_ARB: u32 = 35713;
pub const GL_OBJECT_LINK_STATUS_ARB: u32 = 35714;
pub const GL_OBJECT_VALIDATE_STATUS_ARB: u32 = 35715;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB: u32 = 35716;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB: u32 = 35717;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB: u32 = 35718;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: u32 = 35719;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB: u32 = 35720;
pub const GL_SHADER_OBJECT_ARB: u32 = 35656;
pub const GL_FLOAT_VEC2_ARB: u32 = 35664;
pub const GL_FLOAT_VEC3_ARB: u32 = 35665;
pub const GL_FLOAT_VEC4_ARB: u32 = 35666;
pub const GL_INT_VEC2_ARB: u32 = 35667;
pub const GL_INT_VEC3_ARB: u32 = 35668;
pub const GL_INT_VEC4_ARB: u32 = 35669;
pub const GL_BOOL_ARB: u32 = 35670;
pub const GL_BOOL_VEC2_ARB: u32 = 35671;
pub const GL_BOOL_VEC3_ARB: u32 = 35672;
pub const GL_BOOL_VEC4_ARB: u32 = 35673;
pub const GL_FLOAT_MAT2_ARB: u32 = 35674;
pub const GL_FLOAT_MAT3_ARB: u32 = 35675;
pub const GL_FLOAT_MAT4_ARB: u32 = 35676;
pub const GL_SAMPLER_1D_ARB: u32 = 35677;
pub const GL_SAMPLER_2D_ARB: u32 = 35678;
pub const GL_SAMPLER_3D_ARB: u32 = 35679;
pub const GL_SAMPLER_CUBE_ARB: u32 = 35680;
pub const GL_SAMPLER_1D_SHADOW_ARB: u32 = 35681;
pub const GL_SAMPLER_2D_SHADOW_ARB: u32 = 35682;
pub const GL_SAMPLER_2D_RECT_ARB: u32 = 35683;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB: u32 = 35684;
pub const GL_SHADING_LANGUAGE_VERSION_ARB: u32 = 35724;
pub const GL_TEXTURE_COMPARE_MODE_ARB: u32 = 34892;
pub const GL_TEXTURE_COMPARE_FUNC_ARB: u32 = 34893;
pub const GL_COMPARE_R_TO_TEXTURE_ARB: u32 = 34894;
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB: u32 = 32959;
pub const GL_CLAMP_TO_BORDER_ARB: u32 = 33069;
pub const GL_COMPRESSED_ALPHA_ARB: u32 = 34025;
pub const GL_COMPRESSED_LUMINANCE_ARB: u32 = 34026;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB: u32 = 34027;
pub const GL_COMPRESSED_INTENSITY_ARB: u32 = 34028;
pub const GL_COMPRESSED_RGB_ARB: u32 = 34029;
pub const GL_COMPRESSED_RGBA_ARB: u32 = 34030;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB: u32 = 34031;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: u32 = 34464;
pub const GL_TEXTURE_COMPRESSED_ARB: u32 = 34465;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 34467;
pub const GL_NORMAL_MAP_ARB: u32 = 34065;
pub const GL_REFLECTION_MAP_ARB: u32 = 34066;
pub const GL_TEXTURE_CUBE_MAP_ARB: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: u32 = 34074;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB: u32 = 34075;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: u32 = 34076;
pub const GL_COMBINE_ARB: u32 = 34160;
pub const GL_COMBINE_RGB_ARB: u32 = 34161;
pub const GL_COMBINE_ALPHA_ARB: u32 = 34162;
pub const GL_RGB_SCALE_ARB: u32 = 34163;
pub const GL_ADD_SIGNED_ARB: u32 = 34164;
pub const GL_INTERPOLATE_ARB: u32 = 34165;
pub const GL_CONSTANT_ARB: u32 = 34166;
pub const GL_PRIMARY_COLOR_ARB: u32 = 34167;
pub const GL_PREVIOUS_ARB: u32 = 34168;
pub const GL_SUBTRACT_ARB: u32 = 34023;
pub const GL_SOURCE0_RGB_ARB: u32 = 34176;
pub const GL_SOURCE1_RGB_ARB: u32 = 34177;
pub const GL_SOURCE2_RGB_ARB: u32 = 34178;
pub const GL_SOURCE0_ALPHA_ARB: u32 = 34184;
pub const GL_SOURCE1_ALPHA_ARB: u32 = 34185;
pub const GL_SOURCE2_ALPHA_ARB: u32 = 34186;
pub const GL_OPERAND0_RGB_ARB: u32 = 34192;
pub const GL_OPERAND1_RGB_ARB: u32 = 34193;
pub const GL_OPERAND2_RGB_ARB: u32 = 34194;
pub const GL_OPERAND0_ALPHA_ARB: u32 = 34200;
pub const GL_OPERAND1_ALPHA_ARB: u32 = 34201;
pub const GL_OPERAND2_ALPHA_ARB: u32 = 34202;
pub const GL_DOT3_RGB_ARB: u32 = 34478;
pub const GL_DOT3_RGBA_ARB: u32 = 34479;
pub const GL_TEXTURE_RED_TYPE_ARB: u32 = 35856;
pub const GL_TEXTURE_GREEN_TYPE_ARB: u32 = 35857;
pub const GL_TEXTURE_BLUE_TYPE_ARB: u32 = 35858;
pub const GL_TEXTURE_ALPHA_TYPE_ARB: u32 = 35859;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB: u32 = 35860;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB: u32 = 35861;
pub const GL_TEXTURE_DEPTH_TYPE_ARB: u32 = 35862;
pub const GL_UNSIGNED_NORMALIZED_ARB: u32 = 35863;
pub const GL_RGBA32F_ARB: u32 = 34836;
pub const GL_RGB32F_ARB: u32 = 34837;
pub const GL_ALPHA32F_ARB: u32 = 34838;
pub const GL_INTENSITY32F_ARB: u32 = 34839;
pub const GL_LUMINANCE32F_ARB: u32 = 34840;
pub const GL_LUMINANCE_ALPHA32F_ARB: u32 = 34841;
pub const GL_RGBA16F_ARB: u32 = 34842;
pub const GL_RGB16F_ARB: u32 = 34843;
pub const GL_ALPHA16F_ARB: u32 = 34844;
pub const GL_INTENSITY16F_ARB: u32 = 34845;
pub const GL_LUMINANCE16F_ARB: u32 = 34846;
pub const GL_LUMINANCE_ALPHA16F_ARB: u32 = 34847;
pub const GL_MIRRORED_REPEAT_ARB: u32 = 33648;
pub const GL_TEXTURE_RECTANGLE_ARB: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB: u32 = 34040;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB: u32 = 34019;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB: u32 = 34020;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB: u32 = 34021;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB: u32 = 34022;
pub const GL_MAX_VERTEX_UNITS_ARB: u32 = 34468;
pub const GL_ACTIVE_VERTEX_UNITS_ARB: u32 = 34469;
pub const GL_WEIGHT_SUM_UNITY_ARB: u32 = 34470;
pub const GL_VERTEX_BLEND_ARB: u32 = 34471;
pub const GL_CURRENT_WEIGHT_ARB: u32 = 34472;
pub const GL_WEIGHT_ARRAY_TYPE_ARB: u32 = 34473;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB: u32 = 34474;
pub const GL_WEIGHT_ARRAY_SIZE_ARB: u32 = 34475;
pub const GL_WEIGHT_ARRAY_POINTER_ARB: u32 = 34476;
pub const GL_WEIGHT_ARRAY_ARB: u32 = 34477;
pub const GL_MODELVIEW0_ARB: u32 = 5888;
pub const GL_MODELVIEW1_ARB: u32 = 34058;
pub const GL_MODELVIEW2_ARB: u32 = 34594;
pub const GL_MODELVIEW3_ARB: u32 = 34595;
pub const GL_MODELVIEW4_ARB: u32 = 34596;
pub const GL_MODELVIEW5_ARB: u32 = 34597;
pub const GL_MODELVIEW6_ARB: u32 = 34598;
pub const GL_MODELVIEW7_ARB: u32 = 34599;
pub const GL_MODELVIEW8_ARB: u32 = 34600;
pub const GL_MODELVIEW9_ARB: u32 = 34601;
pub const GL_MODELVIEW10_ARB: u32 = 34602;
pub const GL_MODELVIEW11_ARB: u32 = 34603;
pub const GL_MODELVIEW12_ARB: u32 = 34604;
pub const GL_MODELVIEW13_ARB: u32 = 34605;
pub const GL_MODELVIEW14_ARB: u32 = 34606;
pub const GL_MODELVIEW15_ARB: u32 = 34607;
pub const GL_MODELVIEW16_ARB: u32 = 34608;
pub const GL_MODELVIEW17_ARB: u32 = 34609;
pub const GL_MODELVIEW18_ARB: u32 = 34610;
pub const GL_MODELVIEW19_ARB: u32 = 34611;
pub const GL_MODELVIEW20_ARB: u32 = 34612;
pub const GL_MODELVIEW21_ARB: u32 = 34613;
pub const GL_MODELVIEW22_ARB: u32 = 34614;
pub const GL_MODELVIEW23_ARB: u32 = 34615;
pub const GL_MODELVIEW24_ARB: u32 = 34616;
pub const GL_MODELVIEW25_ARB: u32 = 34617;
pub const GL_MODELVIEW26_ARB: u32 = 34618;
pub const GL_MODELVIEW27_ARB: u32 = 34619;
pub const GL_MODELVIEW28_ARB: u32 = 34620;
pub const GL_MODELVIEW29_ARB: u32 = 34621;
pub const GL_MODELVIEW30_ARB: u32 = 34622;
pub const GL_MODELVIEW31_ARB: u32 = 34623;
pub const GL_ARRAY_BUFFER_ARB: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING_ARB: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: u32 = 34965;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB: u32 = 34966;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB: u32 = 34967;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 34968;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB: u32 = 34969;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: u32 = 34970;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: u32 = 34971;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 34972;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING_ARB: u32 = 34973;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: u32 = 34974;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: u32 = 34975;
pub const GL_STREAM_DRAW_ARB: u32 = 35040;
pub const GL_STREAM_READ_ARB: u32 = 35041;
pub const GL_STREAM_COPY_ARB: u32 = 35042;
pub const GL_STATIC_DRAW_ARB: u32 = 35044;
pub const GL_STATIC_READ_ARB: u32 = 35045;
pub const GL_STATIC_COPY_ARB: u32 = 35046;
pub const GL_DYNAMIC_DRAW_ARB: u32 = 35048;
pub const GL_DYNAMIC_READ_ARB: u32 = 35049;
pub const GL_DYNAMIC_COPY_ARB: u32 = 35050;
pub const GL_READ_ONLY_ARB: u32 = 35000;
pub const GL_WRITE_ONLY_ARB: u32 = 35001;
pub const GL_READ_WRITE_ARB: u32 = 35002;
pub const GL_BUFFER_SIZE_ARB: u32 = 34660;
pub const GL_BUFFER_USAGE_ARB: u32 = 34661;
pub const GL_BUFFER_ACCESS_ARB: u32 = 35003;
pub const GL_BUFFER_MAPPED_ARB: u32 = 35004;
pub const GL_BUFFER_MAP_POINTER_ARB: u32 = 35005;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: u32 = 34973;
pub const GL_VERTEX_PROGRAM_ARB: u32 = 34336;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB: u32 = 34370;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB: u32 = 34371;
pub const GL_PROGRAM_FORMAT_ASCII_ARB: u32 = 34933;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB: u32 = 34341;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: u32 = 34922;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB: u32 = 34342;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB: u32 = 34373;
pub const GL_PROGRAM_LENGTH_ARB: u32 = 34343;
pub const GL_PROGRAM_FORMAT_ARB: u32 = 34934;
pub const GL_PROGRAM_NAME_ARB: u32 = 34423;
pub const GL_PROGRAM_BINDING_ARB: u32 = 34423;
pub const GL_PROGRAM_INSTRUCTIONS_ARB: u32 = 34976;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB: u32 = 34977;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 34978;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 34979;
pub const GL_PROGRAM_TEMPORARIES_ARB: u32 = 34980;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB: u32 = 34981;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 34982;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 34983;
pub const GL_PROGRAM_PARAMETERS_ARB: u32 = 34984;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB: u32 = 34985;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 34986;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 34987;
pub const GL_PROGRAM_ATTRIBS_ARB: u32 = 34988;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB: u32 = 34989;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 34990;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 34991;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 34992;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 34993;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 34994;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 34995;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: u32 = 34996;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: u32 = 34997;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: u32 = 34998;
pub const GL_PROGRAM_STRING_ARB: u32 = 34344;
pub const GL_PROGRAM_ERROR_POSITION_ARB: u32 = 34379;
pub const GL_CURRENT_MATRIX_ARB: u32 = 34369;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB: u32 = 34999;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB: u32 = 34368;
pub const GL_MAX_VERTEX_ATTRIBS_ARB: u32 = 34921;
pub const GL_MAX_PROGRAM_MATRICES_ARB: u32 = 34351;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: u32 = 34350;
pub const GL_PROGRAM_ERROR_STRING_ARB: u32 = 34932;
pub const GL_MATRIX0_ARB: u32 = 35008;
pub const GL_MATRIX1_ARB: u32 = 35009;
pub const GL_MATRIX2_ARB: u32 = 35010;
pub const GL_MATRIX3_ARB: u32 = 35011;
pub const GL_MATRIX4_ARB: u32 = 35012;
pub const GL_MATRIX5_ARB: u32 = 35013;
pub const GL_MATRIX6_ARB: u32 = 35014;
pub const GL_MATRIX7_ARB: u32 = 35015;
pub const GL_MATRIX8_ARB: u32 = 35016;
pub const GL_MATRIX9_ARB: u32 = 35017;
pub const GL_MATRIX10_ARB: u32 = 35018;
pub const GL_MATRIX11_ARB: u32 = 35019;
pub const GL_MATRIX12_ARB: u32 = 35020;
pub const GL_MATRIX13_ARB: u32 = 35021;
pub const GL_MATRIX14_ARB: u32 = 35022;
pub const GL_MATRIX15_ARB: u32 = 35023;
pub const GL_MATRIX16_ARB: u32 = 35024;
pub const GL_MATRIX17_ARB: u32 = 35025;
pub const GL_MATRIX18_ARB: u32 = 35026;
pub const GL_MATRIX19_ARB: u32 = 35027;
pub const GL_MATRIX20_ARB: u32 = 35028;
pub const GL_MATRIX21_ARB: u32 = 35029;
pub const GL_MATRIX22_ARB: u32 = 35030;
pub const GL_MATRIX23_ARB: u32 = 35031;
pub const GL_MATRIX24_ARB: u32 = 35032;
pub const GL_MATRIX25_ARB: u32 = 35033;
pub const GL_MATRIX26_ARB: u32 = 35034;
pub const GL_MATRIX27_ARB: u32 = 35035;
pub const GL_MATRIX28_ARB: u32 = 35036;
pub const GL_MATRIX29_ARB: u32 = 35037;
pub const GL_MATRIX30_ARB: u32 = 35038;
pub const GL_MATRIX31_ARB: u32 = 35039;
pub const GL_COLOR_SUM_ARB: u32 = 33880;
pub const GL_VERTEX_SHADER_ARB: u32 = 35633;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: u32 = 35658;
pub const GL_MAX_VARYING_FLOATS_ARB: u32 = 35659;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: u32 = 35661;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB: u32 = 35721;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: u32 = 35722;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: u32 = 35660;
pub const GL_ABGR_EXT: u32 = 32768;
pub const GL_BGR_EXT: u32 = 32992;
pub const GL_BGRA_EXT: u32 = 32993;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT: u32 = 36322;
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: u32 = 36323;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: u32 = 36324;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT: u32 = 36333;
pub const GL_UNIFORM_BUFFER_BINDING_EXT: u32 = 36335;
pub const GL_UNIFORM_BUFFER_EXT: u32 = 36334;
pub const GL_CONSTANT_COLOR_EXT: u32 = 32769;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT: u32 = 32770;
pub const GL_CONSTANT_ALPHA_EXT: u32 = 32771;
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT: u32 = 32772;
pub const GL_BLEND_COLOR_EXT: u32 = 32773;
pub const GL_BLEND_EQUATION_RGB_EXT: u32 = 32777;
pub const GL_BLEND_EQUATION_ALPHA_EXT: u32 = 34877;
pub const GL_BLEND_DST_RGB_EXT: u32 = 32968;
pub const GL_BLEND_SRC_RGB_EXT: u32 = 32969;
pub const GL_BLEND_DST_ALPHA_EXT: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA_EXT: u32 = 32971;
pub const GL_FUNC_ADD_EXT: u32 = 32774;
pub const GL_MIN_EXT: u32 = 32775;
pub const GL_MAX_EXT: u32 = 32776;
pub const GL_BLEND_EQUATION_EXT: u32 = 32777;
pub const GL_FUNC_SUBTRACT_EXT: u32 = 32778;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT: u32 = 32779;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT: u32 = 33008;
pub const GL_MAX_ELEMENTS_VERTICES_EXT: u32 = 33000;
pub const GL_MAX_ELEMENTS_INDICES_EXT: u32 = 33001;
pub const GL_FOG_COORDINATE_SOURCE_EXT: u32 = 33872;
pub const GL_FOG_COORDINATE_EXT: u32 = 33873;
pub const GL_FRAGMENT_DEPTH_EXT: u32 = 33874;
pub const GL_CURRENT_FOG_COORDINATE_EXT: u32 = 33875;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT: u32 = 33876;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT: u32 = 33877;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT: u32 = 33878;
pub const GL_FOG_COORDINATE_ARRAY_EXT: u32 = 33879;
pub const GL_READ_FRAMEBUFFER_EXT: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER_EXT: u32 = 36009;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT: u32 = 36006;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT: u32 = 36010;
pub const GL_RENDERBUFFER_SAMPLES_EXT: u32 = 36011;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: u32 = 36182;
pub const GL_MAX_SAMPLES_EXT: u32 = 36183;
pub const GL_FRAMEBUFFER_EXT: u32 = 36160;
pub const GL_RENDERBUFFER_EXT: u32 = 36161;
pub const GL_STENCIL_INDEX1_EXT: u32 = 36166;
pub const GL_STENCIL_INDEX4_EXT: u32 = 36167;
pub const GL_STENCIL_INDEX8_EXT: u32 = 36168;
pub const GL_STENCIL_INDEX16_EXT: u32 = 36169;
pub const GL_RENDERBUFFER_WIDTH_EXT: u32 = 36162;
pub const GL_RENDERBUFFER_HEIGHT_EXT: u32 = 36163;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT: u32 = 36164;
pub const GL_RENDERBUFFER_RED_SIZE_EXT: u32 = 36176;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT: u32 = 36177;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT: u32 = 36178;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT: u32 = 36179;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT: u32 = 36180;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT: u32 = 36181;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: u32 = 36048;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: u32 = 36049;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: u32 = 36050;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: u32 = 36051;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: u32 = 36052;
pub const GL_COLOR_ATTACHMENT0_EXT: u32 = 36064;
pub const GL_COLOR_ATTACHMENT1_EXT: u32 = 36065;
pub const GL_COLOR_ATTACHMENT2_EXT: u32 = 36066;
pub const GL_COLOR_ATTACHMENT3_EXT: u32 = 36067;
pub const GL_COLOR_ATTACHMENT4_EXT: u32 = 36068;
pub const GL_COLOR_ATTACHMENT5_EXT: u32 = 36069;
pub const GL_COLOR_ATTACHMENT6_EXT: u32 = 36070;
pub const GL_COLOR_ATTACHMENT7_EXT: u32 = 36071;
pub const GL_COLOR_ATTACHMENT8_EXT: u32 = 36072;
pub const GL_COLOR_ATTACHMENT9_EXT: u32 = 36073;
pub const GL_COLOR_ATTACHMENT10_EXT: u32 = 36074;
pub const GL_COLOR_ATTACHMENT11_EXT: u32 = 36075;
pub const GL_COLOR_ATTACHMENT12_EXT: u32 = 36076;
pub const GL_COLOR_ATTACHMENT13_EXT: u32 = 36077;
pub const GL_COLOR_ATTACHMENT14_EXT: u32 = 36078;
pub const GL_COLOR_ATTACHMENT15_EXT: u32 = 36079;
pub const GL_DEPTH_ATTACHMENT_EXT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT_EXT: u32 = 36128;
pub const GL_FRAMEBUFFER_COMPLETE_EXT: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: u32 = 36054;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: u32 = 36055;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: u32 = 36057;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: u32 = 36058;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: u32 = 36059;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: u32 = 36060;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT: u32 = 36061;
pub const GL_FRAMEBUFFER_BINDING_EXT: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING_EXT: u32 = 36007;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT: u32 = 36063;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT: u32 = 34024;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT: u32 = 1286;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 36281;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: u32 = 36282;
pub const GL_GEOMETRY_SHADER_EXT: u32 = 36313;
pub const GL_GEOMETRY_VERTICES_OUT_EXT: u32 = 36314;
pub const GL_GEOMETRY_INPUT_TYPE_EXT: u32 = 36315;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT: u32 = 36316;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: u32 = 35881;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT: u32 = 36317;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT: u32 = 36318;
pub const GL_MAX_VARYING_COMPONENTS_EXT: u32 = 35659;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: u32 = 36319;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT: u32 = 36320;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: u32 = 36321;
pub const GL_LINES_ADJACENCY_EXT: u32 = 10;
pub const GL_LINE_STRIP_ADJACENCY_EXT: u32 = 11;
pub const GL_TRIANGLES_ADJACENCY_EXT: u32 = 12;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT: u32 = 13;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: u32 = 36264;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: u32 = 36265;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: u32 = 36263;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: u32 = 36052;
pub const GL_PROGRAM_POINT_SIZE_EXT: u32 = 34370;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT: u32 = 35069;
pub const GL_SAMPLER_1D_ARRAY_EXT: u32 = 36288;
pub const GL_SAMPLER_2D_ARRAY_EXT: u32 = 36289;
pub const GL_SAMPLER_BUFFER_EXT: u32 = 36290;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT: u32 = 36291;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT: u32 = 36292;
pub const GL_SAMPLER_CUBE_SHADOW_EXT: u32 = 36293;
pub const GL_UNSIGNED_INT_VEC2_EXT: u32 = 36294;
pub const GL_UNSIGNED_INT_VEC3_EXT: u32 = 36295;
pub const GL_UNSIGNED_INT_VEC4_EXT: u32 = 36296;
pub const GL_INT_SAMPLER_1D_EXT: u32 = 36297;
pub const GL_INT_SAMPLER_2D_EXT: u32 = 36298;
pub const GL_INT_SAMPLER_3D_EXT: u32 = 36299;
pub const GL_INT_SAMPLER_CUBE_EXT: u32 = 36300;
pub const GL_INT_SAMPLER_2D_RECT_EXT: u32 = 36301;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT: u32 = 36302;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT: u32 = 36303;
pub const GL_INT_SAMPLER_BUFFER_EXT: u32 = 36304;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT: u32 = 36305;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT: u32 = 36306;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT: u32 = 36307;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT: u32 = 36308;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT: u32 = 36309;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: u32 = 36310;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: u32 = 36311;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT: u32 = 36312;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT: u32 = 35076;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT: u32 = 35077;
pub const GL_DEPTH_STENCIL_EXT: u32 = 34041;
pub const GL_UNSIGNED_INT_24_8_EXT: u32 = 34042;
pub const GL_DEPTH24_STENCIL8_EXT: u32 = 35056;
pub const GL_TEXTURE_STENCIL_SIZE_EXT: u32 = 35057;
pub const GL_R11F_G11F_B10F_EXT: u32 = 35898;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT: u32 = 35899;
pub const GL_RGBA_SIGNED_COMPONENTS_EXT: u32 = 35900;
pub const GL_FIRST_VERTEX_CONVENTION_EXT: u32 = 36429;
pub const GL_LAST_VERTEX_CONVENTION_EXT: u32 = 36430;
pub const GL_PROVOKING_VERTEX_EXT: u32 = 36431;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: u32 = 36428;
pub const GL_RESCALE_NORMAL_EXT: u32 = 32826;
pub const GL_COLOR_SUM_EXT: u32 = 33880;
pub const GL_CURRENT_SECONDARY_COLOR_EXT: u32 = 33881;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT: u32 = 33882;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT: u32 = 33883;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT: u32 = 33884;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT: u32 = 33885;
pub const GL_SECONDARY_COLOR_ARRAY_EXT: u32 = 33886;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT: u32 = 33272;
pub const GL_SINGLE_COLOR_EXT: u32 = 33273;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT: u32 = 33274;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT: u32 = 35088;
pub const GL_ACTIVE_STENCIL_FACE_EXT: u32 = 35089;
pub const GL_INCR_WRAP_EXT: u32 = 34055;
pub const GL_DECR_WRAP_EXT: u32 = 34056;
pub const GL_TEXTURE_1D_ARRAY_EXT: u32 = 35864;
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT: u32 = 35865;
pub const GL_TEXTURE_2D_ARRAY_EXT: u32 = 35866;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT: u32 = 35867;
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT: u32 = 35868;
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT: u32 = 35869;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT: u32 = 35071;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT: u32 = 34894;
pub const GL_RGBA_INTEGER_MODE_EXT: u32 = 36254;
pub const GL_RGBA32UI_EXT: u32 = 36208;
pub const GL_RGB32UI_EXT: u32 = 36209;
pub const GL_ALPHA32UI_EXT: u32 = 36210;
pub const GL_INTENSITY32UI_EXT: u32 = 36211;
pub const GL_LUMINANCE32UI_EXT: u32 = 36212;
pub const GL_LUMINANCE_ALPHA32UI_EXT: u32 = 36213;
pub const GL_RGBA16UI_EXT: u32 = 36214;
pub const GL_RGB16UI_EXT: u32 = 36215;
pub const GL_ALPHA16UI_EXT: u32 = 36216;
pub const GL_INTENSITY16UI_EXT: u32 = 36217;
pub const GL_LUMINANCE16UI_EXT: u32 = 36218;
pub const GL_LUMINANCE_ALPHA16UI_EXT: u32 = 36219;
pub const GL_RGBA8UI_EXT: u32 = 36220;
pub const GL_RGB8UI_EXT: u32 = 36221;
pub const GL_ALPHA8UI_EXT: u32 = 36222;
pub const GL_INTENSITY8UI_EXT: u32 = 36223;
pub const GL_LUMINANCE8UI_EXT: u32 = 36224;
pub const GL_LUMINANCE_ALPHA8UI_EXT: u32 = 36225;
pub const GL_RGBA32I_EXT: u32 = 36226;
pub const GL_RGB32I_EXT: u32 = 36227;
pub const GL_ALPHA32I_EXT: u32 = 36228;
pub const GL_INTENSITY32I_EXT: u32 = 36229;
pub const GL_LUMINANCE32I_EXT: u32 = 36230;
pub const GL_LUMINANCE_ALPHA32I_EXT: u32 = 36231;
pub const GL_RGBA16I_EXT: u32 = 36232;
pub const GL_RGB16I_EXT: u32 = 36233;
pub const GL_ALPHA16I_EXT: u32 = 36234;
pub const GL_INTENSITY16I_EXT: u32 = 36235;
pub const GL_LUMINANCE16I_EXT: u32 = 36236;
pub const GL_LUMINANCE_ALPHA16I_EXT: u32 = 36237;
pub const GL_RGBA8I_EXT: u32 = 36238;
pub const GL_RGB8I_EXT: u32 = 36239;
pub const GL_ALPHA8I_EXT: u32 = 36240;
pub const GL_INTENSITY8I_EXT: u32 = 36241;
pub const GL_LUMINANCE8I_EXT: u32 = 36242;
pub const GL_LUMINANCE_ALPHA8I_EXT: u32 = 36243;
pub const GL_RED_INTEGER_EXT: u32 = 36244;
pub const GL_GREEN_INTEGER_EXT: u32 = 36245;
pub const GL_BLUE_INTEGER_EXT: u32 = 36246;
pub const GL_ALPHA_INTEGER_EXT: u32 = 36247;
pub const GL_RGB_INTEGER_EXT: u32 = 36248;
pub const GL_RGBA_INTEGER_EXT: u32 = 36249;
pub const GL_BGR_INTEGER_EXT: u32 = 36250;
pub const GL_BGRA_INTEGER_EXT: u32 = 36251;
pub const GL_LUMINANCE_INTEGER_EXT: u32 = 36252;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT: u32 = 36253;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT: u32 = 34045;
pub const GL_TEXTURE_FILTER_CONTROL_EXT: u32 = 34048;
pub const GL_TEXTURE_LOD_BIAS_EXT: u32 = 34049;
pub const GL_TEXTURE_RECTANGLE_EXT: u32 = 34037;
pub const GL_TEXTURE_BINDING_RECTANGLE_EXT: u32 = 34038;
pub const GL_PROXY_TEXTURE_RECTANGLE_EXT: u32 = 34039;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT: u32 = 34040;
pub const GL_RGB9_E5_EXT: u32 = 35901;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT: u32 = 35902;
pub const GL_TEXTURE_SHARED_SIZE_EXT: u32 = 35903;
pub const GL_SRGB_EXT: u32 = 35904;
pub const GL_SRGB8_EXT: u32 = 35905;
pub const GL_SRGB_ALPHA_EXT: u32 = 35906;
pub const GL_SRGB8_ALPHA8_EXT: u32 = 35907;
pub const GL_SLUMINANCE_ALPHA_EXT: u32 = 35908;
pub const GL_SLUMINANCE8_ALPHA8_EXT: u32 = 35909;
pub const GL_SLUMINANCE_EXT: u32 = 35910;
pub const GL_SLUMINANCE8_EXT: u32 = 35911;
pub const GL_COMPRESSED_SRGB_EXT: u32 = 35912;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT: u32 = 35913;
pub const GL_COMPRESSED_SLUMINANCE_EXT: u32 = 35914;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT: u32 = 35915;
pub const GL_TIME_ELAPSED_EXT: u32 = 35007;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT: u32 = 35982;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT: u32 = 35972;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: u32 = 35973;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: u32 = 35983;
pub const GL_INTERLEAVED_ATTRIBS_EXT: u32 = 35980;
pub const GL_SEPARATE_ATTRIBS_EXT: u32 = 35981;
pub const GL_PRIMITIVES_GENERATED_EXT: u32 = 35975;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: u32 = 35976;
pub const GL_RASTERIZER_DISCARD_EXT: u32 = 35977;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: u32 = 35978;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: u32 = 35979;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: u32 = 35968;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT: u32 = 35971;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: u32 = 35967;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: u32 = 35958;
pub const GL_AUX_DEPTH_STENCIL_APPLE: u32 = 35348;
pub const GL_ELEMENT_ARRAY_APPLE: u32 = 35340;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE: u32 = 35341;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE: u32 = 35342;
pub const GL_DRAW_PIXELS_APPLE: u32 = 35338;
pub const GL_FENCE_APPLE: u32 = 35339;
pub const GL_BUFFER_OBJECT_APPLE: u32 = 34227;
pub const GL_HALF_APPLE: u32 = 5131;
pub const GL_COLOR_FLOAT_APPLE: u32 = 35343;
pub const GL_RGBA_FLOAT32_APPLE: u32 = 34836;
pub const GL_RGB_FLOAT32_APPLE: u32 = 34837;
pub const GL_ALPHA_FLOAT32_APPLE: u32 = 34838;
pub const GL_INTENSITY_FLOAT32_APPLE: u32 = 34839;
pub const GL_LUMINANCE_FLOAT32_APPLE: u32 = 34840;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE: u32 = 34841;
pub const GL_RGBA_FLOAT16_APPLE: u32 = 34842;
pub const GL_RGB_FLOAT16_APPLE: u32 = 34843;
pub const GL_ALPHA_FLOAT16_APPLE: u32 = 34844;
pub const GL_INTENSITY_FLOAT16_APPLE: u32 = 34845;
pub const GL_LUMINANCE_FLOAT16_APPLE: u32 = 34846;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE: u32 = 34847;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE: u32 = 35346;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE: u32 = 35347;
pub const GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE: u32 = 35344;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE: u32 = 34224;
pub const GL_TRANSFORM_HINT_APPLE: u32 = 34225;
pub const GL_VERTEX_ARRAY_BINDING_APPLE: u32 = 34229;
pub const GL_VERTEX_ARRAY_RANGE_APPLE: u32 = 34077;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE: u32 = 34078;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE: u32 = 34080;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE: u32 = 34081;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE: u32 = 34079;
pub const GL_STORAGE_CLIENT_APPLE: u32 = 34228;
pub const GL_VERTEX_POINT_SIZE_APPLE: u32 = 35366;
pub const GL_CURRENT_POINT_SIZE_APPLE: u32 = 35367;
pub const GL_POINT_SIZE_ARRAY_APPLE: u32 = 35740;
pub const GL_POINT_SIZE_ARRAY_TYPE_APPLE: u32 = 35210;
pub const GL_POINT_SIZE_ARRAY_STRIDE_APPLE: u32 = 35211;
pub const GL_POINT_SIZE_ARRAY_POINTER_APPLE: u32 = 35212;
pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_APPLE: u32 = 35743;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE: u32 = 35328;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE: u32 = 35329;
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE: u32 = 35330;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE: u32 = 35331;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE: u32 = 35332;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: u32 = 35333;
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE: u32 = 35334;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE: u32 = 35335;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE: u32 = 35336;
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: u32 = 35337;
pub const GL_YCBCR_422_APPLE: u32 = 34233;
pub const GL_ALPHA_BLEND_EQUATION_ATI: u32 = 34877;
pub const GL_MIN_WEIGHTED_ATI: u32 = 34685;
pub const GL_MAX_WEIGHTED_ATI: u32 = 34686;
pub const GL_STENCIL_BACK_FUNC_ATI: u32 = 34816;
pub const GL_STENCIL_BACK_FAIL_ATI: u32 = 34817;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI: u32 = 34818;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI: u32 = 34819;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI: u32 = 34871;
pub const GL_MODULATE_ADD_ATI: u32 = 34628;
pub const GL_MODULATE_SIGNED_ADD_ATI: u32 = 34629;
pub const GL_MODULATE_SUBTRACT_ATI: u32 = 34630;
pub const GL_RGBA_FLOAT32_ATI: u32 = 34836;
pub const GL_RGB_FLOAT32_ATI: u32 = 34837;
pub const GL_ALPHA_FLOAT32_ATI: u32 = 34838;
pub const GL_INTENSITY_FLOAT32_ATI: u32 = 34839;
pub const GL_LUMINANCE_FLOAT32_ATI: u32 = 34840;
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI: u32 = 34841;
pub const GL_RGBA_FLOAT16_ATI: u32 = 34842;
pub const GL_RGB_FLOAT16_ATI: u32 = 34843;
pub const GL_ALPHA_FLOAT16_ATI: u32 = 34844;
pub const GL_INTENSITY_FLOAT16_ATI: u32 = 34845;
pub const GL_LUMINANCE_FLOAT16_ATI: u32 = 34846;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI: u32 = 34847;
pub const GL_RASTER_POSITION_UNCLIPPED_IBM: u32 = 103010;
pub const GL_QUERY_WAIT_NV: u32 = 36371;
pub const GL_QUERY_NO_WAIT_NV: u32 = 36372;
pub const GL_QUERY_BY_REGION_WAIT_NV: u32 = 36373;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV: u32 = 36374;
pub const GL_DEPTH_CLAMP_NV: u32 = 34383;
pub const GL_FOG_DISTANCE_MODE_NV: u32 = 34138;
pub const GL_EYE_RADIAL_NV: u32 = 34139;
pub const GL_EYE_PLANE_ABSOLUTE_NV: u32 = 34140;
pub const GL_MAX_PROGRAM_IF_DEPTH_NV: u32 = 35062;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV: u32 = 35063;
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV: u32 = 35064;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: u32 = 35060;
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV: u32 = 35061;
pub const GL_MAX_SHININESS_NV: u32 = 34052;
pub const GL_MAX_SPOT_EXPONENT_NV: u32 = 34053;
pub const GL_MULTISAMPLE_FILTER_HINT_NV: u32 = 34100;
pub const GL_POINT_SPRITE_NV: u32 = 34913;
pub const GL_COORD_REPLACE_NV: u32 = 34914;
pub const GL_POINT_SPRITE_R_MODE_NV: u32 = 34915;
pub const GL_NORMAL_MAP_NV: u32 = 34065;
pub const GL_REFLECTION_MAP_NV: u32 = 34066;
pub const GL_COLOR_MATRIX_SGI: u32 = 32945;
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 32946;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI: u32 = 32947;
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI: u32 = 32948;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI: u32 = 32949;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI: u32 = 32950;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI: u32 = 32951;
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI: u32 = 32952;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI: u32 = 32953;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI: u32 = 32954;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI: u32 = 32955;
pub const GL_GENERATE_MIPMAP_SGIS: u32 = 33169;
pub const GL_GENERATE_MIPMAP_HINT_SGIS: u32 = 33170;
pub const GL_CLAMP_TO_EDGE_SGIS: u32 = 33071;
pub const GL_TEXTURE_MIN_LOD_SGIS: u32 = 33082;
pub const GL_TEXTURE_MAX_LOD_SGIS: u32 = 33083;
pub const GL_TEXTURE_BASE_LEVEL_SGIS: u32 = 33084;
pub const GL_TEXTURE_MAX_LEVEL_SGIS: u32 = 33085;
pub const GL_TEXTURE_COMPONENTS: u32 = 4099;
pub const GL_ACCUM: u32 = 256;
pub const GL_LOAD: u32 = 257;
pub const GL_RETURN: u32 = 258;
pub const GL_MULT: u32 = 259;
pub const GL_ADD: u32 = 260;
pub const GL_CURRENT_BIT: u32 = 1;
pub const GL_POINT_BIT: u32 = 2;
pub const GL_LINE_BIT: u32 = 4;
pub const GL_POLYGON_BIT: u32 = 8;
pub const GL_POLYGON_STIPPLE_BIT: u32 = 16;
pub const GL_PIXEL_MODE_BIT: u32 = 32;
pub const GL_LIGHTING_BIT: u32 = 64;
pub const GL_FOG_BIT: u32 = 128;
pub const GL_ACCUM_BUFFER_BIT: u32 = 512;
pub const GL_VIEWPORT_BIT: u32 = 2048;
pub const GL_TRANSFORM_BIT: u32 = 4096;
pub const GL_ENABLE_BIT: u32 = 8192;
pub const GL_HINT_BIT: u32 = 32768;
pub const GL_EVAL_BIT: u32 = 65536;
pub const GL_LIST_BIT: u32 = 131072;
pub const GL_TEXTURE_BIT: u32 = 262144;
pub const GL_SCISSOR_BIT: u32 = 524288;
pub const GL_ALL_ATTRIB_BITS: u32 = 1048575;
pub const GL_QUAD_STRIP: u32 = 8;
pub const GL_POLYGON: u32 = 9;
pub const GL_CLIP_PLANE0: u32 = 12288;
pub const GL_CLIP_PLANE1: u32 = 12289;
pub const GL_CLIP_PLANE2: u32 = 12290;
pub const GL_CLIP_PLANE3: u32 = 12291;
pub const GL_CLIP_PLANE4: u32 = 12292;
pub const GL_CLIP_PLANE5: u32 = 12293;
pub const GL_2_BYTES: u32 = 5127;
pub const GL_3_BYTES: u32 = 5128;
pub const GL_4_BYTES: u32 = 5129;
pub const GL_AUX0: u32 = 1033;
pub const GL_AUX1: u32 = 1034;
pub const GL_AUX2: u32 = 1035;
pub const GL_AUX3: u32 = 1036;
pub const GL_STACK_OVERFLOW: u32 = 1283;
pub const GL_STACK_UNDERFLOW: u32 = 1284;
pub const GL_2D: u32 = 1536;
pub const GL_3D: u32 = 1537;
pub const GL_3D_COLOR: u32 = 1538;
pub const GL_3D_COLOR_TEXTURE: u32 = 1539;
pub const GL_4D_COLOR_TEXTURE: u32 = 1540;
pub const GL_PASS_THROUGH_TOKEN: u32 = 1792;
pub const GL_POINT_TOKEN: u32 = 1793;
pub const GL_LINE_TOKEN: u32 = 1794;
pub const GL_POLYGON_TOKEN: u32 = 1795;
pub const GL_BITMAP_TOKEN: u32 = 1796;
pub const GL_DRAW_PIXEL_TOKEN: u32 = 1797;
pub const GL_COPY_PIXEL_TOKEN: u32 = 1798;
pub const GL_LINE_RESET_TOKEN: u32 = 1799;
pub const GL_EXP: u32 = 2048;
pub const GL_EXP2: u32 = 2049;
pub const GL_COEFF: u32 = 2560;
pub const GL_ORDER: u32 = 2561;
pub const GL_DOMAIN: u32 = 2562;
pub const GL_CURRENT_COLOR: u32 = 2816;
pub const GL_CURRENT_INDEX: u32 = 2817;
pub const GL_CURRENT_NORMAL: u32 = 2818;
pub const GL_CURRENT_TEXTURE_COORDS: u32 = 2819;
pub const GL_CURRENT_RASTER_COLOR: u32 = 2820;
pub const GL_CURRENT_RASTER_INDEX: u32 = 2821;
pub const GL_CURRENT_RASTER_TEXTURE_COORDS: u32 = 2822;
pub const GL_CURRENT_RASTER_POSITION: u32 = 2823;
pub const GL_CURRENT_RASTER_POSITION_VALID: u32 = 2824;
pub const GL_CURRENT_RASTER_DISTANCE: u32 = 2825;
pub const GL_POINT_SMOOTH: u32 = 2832;
pub const GL_LINE_STIPPLE: u32 = 2852;
pub const GL_LINE_STIPPLE_PATTERN: u32 = 2853;
pub const GL_LINE_STIPPLE_REPEAT: u32 = 2854;
pub const GL_LIST_MODE: u32 = 2864;
pub const GL_MAX_LIST_NESTING: u32 = 2865;
pub const GL_LIST_BASE: u32 = 2866;
pub const GL_LIST_INDEX: u32 = 2867;
pub const GL_POLYGON_STIPPLE: u32 = 2882;
pub const GL_EDGE_FLAG: u32 = 2883;
pub const GL_LIGHTING: u32 = 2896;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER: u32 = 2897;
pub const GL_LIGHT_MODEL_TWO_SIDE: u32 = 2898;
pub const GL_LIGHT_MODEL_AMBIENT: u32 = 2899;
pub const GL_SHADE_MODEL: u32 = 2900;
pub const GL_COLOR_MATERIAL_FACE: u32 = 2901;
pub const GL_COLOR_MATERIAL_PARAMETER: u32 = 2902;
pub const GL_COLOR_MATERIAL: u32 = 2903;
pub const GL_FOG: u32 = 2912;
pub const GL_FOG_INDEX: u32 = 2913;
pub const GL_FOG_DENSITY: u32 = 2914;
pub const GL_FOG_START: u32 = 2915;
pub const GL_FOG_END: u32 = 2916;
pub const GL_FOG_MODE: u32 = 2917;
pub const GL_FOG_COLOR: u32 = 2918;
pub const GL_ACCUM_CLEAR_VALUE: u32 = 2944;
pub const GL_MATRIX_MODE: u32 = 2976;
pub const GL_NORMALIZE: u32 = 2977;
pub const GL_MODELVIEW_STACK_DEPTH: u32 = 2979;
pub const GL_PROJECTION_STACK_DEPTH: u32 = 2980;
pub const GL_TEXTURE_STACK_DEPTH: u32 = 2981;
pub const GL_MODELVIEW_MATRIX: u32 = 2982;
pub const GL_PROJECTION_MATRIX: u32 = 2983;
pub const GL_TEXTURE_MATRIX: u32 = 2984;
pub const GL_ATTRIB_STACK_DEPTH: u32 = 2992;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH: u32 = 2993;
pub const GL_ALPHA_TEST: u32 = 3008;
pub const GL_ALPHA_TEST_FUNC: u32 = 3009;
pub const GL_ALPHA_TEST_REF: u32 = 3010;
pub const GL_INDEX_LOGIC_OP: u32 = 3057;
pub const GL_AUX_BUFFERS: u32 = 3072;
pub const GL_INDEX_CLEAR_VALUE: u32 = 3104;
pub const GL_INDEX_WRITEMASK: u32 = 3105;
pub const GL_INDEX_MODE: u32 = 3120;
pub const GL_RGBA_MODE: u32 = 3121;
pub const GL_RENDER_MODE: u32 = 3136;
pub const GL_PERSPECTIVE_CORRECTION_HINT: u32 = 3152;
pub const GL_POINT_SMOOTH_HINT: u32 = 3153;
pub const GL_FOG_HINT: u32 = 3156;
pub const GL_TEXTURE_GEN_S: u32 = 3168;
pub const GL_TEXTURE_GEN_T: u32 = 3169;
pub const GL_TEXTURE_GEN_R: u32 = 3170;
pub const GL_TEXTURE_GEN_Q: u32 = 3171;
pub const GL_PIXEL_MAP_I_TO_I: u32 = 3184;
pub const GL_PIXEL_MAP_S_TO_S: u32 = 3185;
pub const GL_PIXEL_MAP_I_TO_R: u32 = 3186;
pub const GL_PIXEL_MAP_I_TO_G: u32 = 3187;
pub const GL_PIXEL_MAP_I_TO_B: u32 = 3188;
pub const GL_PIXEL_MAP_I_TO_A: u32 = 3189;
pub const GL_PIXEL_MAP_R_TO_R: u32 = 3190;
pub const GL_PIXEL_MAP_G_TO_G: u32 = 3191;
pub const GL_PIXEL_MAP_B_TO_B: u32 = 3192;
pub const GL_PIXEL_MAP_A_TO_A: u32 = 3193;
pub const GL_PIXEL_MAP_I_TO_I_SIZE: u32 = 3248;
pub const GL_PIXEL_MAP_S_TO_S_SIZE: u32 = 3249;
pub const GL_PIXEL_MAP_I_TO_R_SIZE: u32 = 3250;
pub const GL_PIXEL_MAP_I_TO_G_SIZE: u32 = 3251;
pub const GL_PIXEL_MAP_I_TO_B_SIZE: u32 = 3252;
pub const GL_PIXEL_MAP_I_TO_A_SIZE: u32 = 3253;
pub const GL_PIXEL_MAP_R_TO_R_SIZE: u32 = 3254;
pub const GL_PIXEL_MAP_G_TO_G_SIZE: u32 = 3255;
pub const GL_PIXEL_MAP_B_TO_B_SIZE: u32 = 3256;
pub const GL_PIXEL_MAP_A_TO_A_SIZE: u32 = 3257;
pub const GL_MAP_COLOR: u32 = 3344;
pub const GL_MAP_STENCIL: u32 = 3345;
pub const GL_INDEX_SHIFT: u32 = 3346;
pub const GL_INDEX_OFFSET: u32 = 3347;
pub const GL_RED_SCALE: u32 = 3348;
pub const GL_RED_BIAS: u32 = 3349;
pub const GL_ZOOM_X: u32 = 3350;
pub const GL_ZOOM_Y: u32 = 3351;
pub const GL_GREEN_SCALE: u32 = 3352;
pub const GL_GREEN_BIAS: u32 = 3353;
pub const GL_BLUE_SCALE: u32 = 3354;
pub const GL_BLUE_BIAS: u32 = 3355;
pub const GL_ALPHA_SCALE: u32 = 3356;
pub const GL_ALPHA_BIAS: u32 = 3357;
pub const GL_DEPTH_SCALE: u32 = 3358;
pub const GL_DEPTH_BIAS: u32 = 3359;
pub const GL_MAX_EVAL_ORDER: u32 = 3376;
pub const GL_MAX_LIGHTS: u32 = 3377;
pub const GL_MAX_CLIP_PLANES: u32 = 3378;
pub const GL_MAX_PIXEL_MAP_TABLE: u32 = 3380;
pub const GL_MAX_ATTRIB_STACK_DEPTH: u32 = 3381;
pub const GL_MAX_MODELVIEW_STACK_DEPTH: u32 = 3382;
pub const GL_MAX_NAME_STACK_DEPTH: u32 = 3383;
pub const GL_MAX_PROJECTION_STACK_DEPTH: u32 = 3384;
pub const GL_MAX_TEXTURE_STACK_DEPTH: u32 = 3385;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH: u32 = 3387;
pub const GL_INDEX_BITS: u32 = 3409;
pub const GL_RED_BITS: u32 = 3410;
pub const GL_GREEN_BITS: u32 = 3411;
pub const GL_BLUE_BITS: u32 = 3412;
pub const GL_ALPHA_BITS: u32 = 3413;
pub const GL_DEPTH_BITS: u32 = 3414;
pub const GL_STENCIL_BITS: u32 = 3415;
pub const GL_ACCUM_RED_BITS: u32 = 3416;
pub const GL_ACCUM_GREEN_BITS: u32 = 3417;
pub const GL_ACCUM_BLUE_BITS: u32 = 3418;
pub const GL_ACCUM_ALPHA_BITS: u32 = 3419;
pub const GL_NAME_STACK_DEPTH: u32 = 3440;
pub const GL_AUTO_NORMAL: u32 = 3456;
pub const GL_MAP1_COLOR_4: u32 = 3472;
pub const GL_MAP1_INDEX: u32 = 3473;
pub const GL_MAP1_NORMAL: u32 = 3474;
pub const GL_MAP1_TEXTURE_COORD_1: u32 = 3475;
pub const GL_MAP1_TEXTURE_COORD_2: u32 = 3476;
pub const GL_MAP1_TEXTURE_COORD_3: u32 = 3477;
pub const GL_MAP1_TEXTURE_COORD_4: u32 = 3478;
pub const GL_MAP1_VERTEX_3: u32 = 3479;
pub const GL_MAP1_VERTEX_4: u32 = 3480;
pub const GL_MAP2_COLOR_4: u32 = 3504;
pub const GL_MAP2_INDEX: u32 = 3505;
pub const GL_MAP2_NORMAL: u32 = 3506;
pub const GL_MAP2_TEXTURE_COORD_1: u32 = 3507;
pub const GL_MAP2_TEXTURE_COORD_2: u32 = 3508;
pub const GL_MAP2_TEXTURE_COORD_3: u32 = 3509;
pub const GL_MAP2_TEXTURE_COORD_4: u32 = 3510;
pub const GL_MAP2_VERTEX_3: u32 = 3511;
pub const GL_MAP2_VERTEX_4: u32 = 3512;
pub const GL_MAP1_GRID_DOMAIN: u32 = 3536;
pub const GL_MAP1_GRID_SEGMENTS: u32 = 3537;
pub const GL_MAP2_GRID_DOMAIN: u32 = 3538;
pub const GL_MAP2_GRID_SEGMENTS: u32 = 3539;
pub const GL_FEEDBACK_BUFFER_POINTER: u32 = 3568;
pub const GL_FEEDBACK_BUFFER_SIZE: u32 = 3569;
pub const GL_FEEDBACK_BUFFER_TYPE: u32 = 3570;
pub const GL_SELECTION_BUFFER_POINTER: u32 = 3571;
pub const GL_SELECTION_BUFFER_SIZE: u32 = 3572;
pub const GL_TEXTURE_BORDER: u32 = 4101;
pub const GL_LIGHT0: u32 = 16384;
pub const GL_LIGHT1: u32 = 16385;
pub const GL_LIGHT2: u32 = 16386;
pub const GL_LIGHT3: u32 = 16387;
pub const GL_LIGHT4: u32 = 16388;
pub const GL_LIGHT5: u32 = 16389;
pub const GL_LIGHT6: u32 = 16390;
pub const GL_LIGHT7: u32 = 16391;
pub const GL_AMBIENT: u32 = 4608;
pub const GL_DIFFUSE: u32 = 4609;
pub const GL_SPECULAR: u32 = 4610;
pub const GL_POSITION: u32 = 4611;
pub const GL_SPOT_DIRECTION: u32 = 4612;
pub const GL_SPOT_EXPONENT: u32 = 4613;
pub const GL_SPOT_CUTOFF: u32 = 4614;
pub const GL_CONSTANT_ATTENUATION: u32 = 4615;
pub const GL_LINEAR_ATTENUATION: u32 = 4616;
pub const GL_QUADRATIC_ATTENUATION: u32 = 4617;
pub const GL_COMPILE: u32 = 4864;
pub const GL_COMPILE_AND_EXECUTE: u32 = 4865;
pub const GL_EMISSION: u32 = 5632;
pub const GL_SHININESS: u32 = 5633;
pub const GL_AMBIENT_AND_DIFFUSE: u32 = 5634;
pub const GL_COLOR_INDEXES: u32 = 5635;
pub const GL_MODELVIEW: u32 = 5888;
pub const GL_PROJECTION: u32 = 5889;
pub const GL_COLOR_INDEX: u32 = 6400;
pub const GL_LUMINANCE: u32 = 6409;
pub const GL_LUMINANCE_ALPHA: u32 = 6410;
pub const GL_BITMAP: u32 = 6656;
pub const GL_RENDER: u32 = 7168;
pub const GL_FEEDBACK: u32 = 7169;
pub const GL_SELECT: u32 = 7170;
pub const GL_FLAT: u32 = 7424;
pub const GL_SMOOTH: u32 = 7425;
pub const GL_S: u32 = 8192;
pub const GL_T: u32 = 8193;
pub const GL_R: u32 = 8194;
pub const GL_Q: u32 = 8195;
pub const GL_MODULATE: u32 = 8448;
pub const GL_DECAL: u32 = 8449;
pub const GL_TEXTURE_ENV_MODE: u32 = 8704;
pub const GL_TEXTURE_ENV_COLOR: u32 = 8705;
pub const GL_TEXTURE_ENV: u32 = 8960;
pub const GL_EYE_LINEAR: u32 = 9216;
pub const GL_OBJECT_LINEAR: u32 = 9217;
pub const GL_SPHERE_MAP: u32 = 9218;
pub const GL_TEXTURE_GEN_MODE: u32 = 9472;
pub const GL_OBJECT_PLANE: u32 = 9473;
pub const GL_EYE_PLANE: u32 = 9474;
pub const GL_CLAMP: u32 = 10496;
pub const GL_CLIENT_PIXEL_STORE_BIT: u32 = 1;
pub const GL_CLIENT_VERTEX_ARRAY_BIT: u32 = 2;
pub const GL_CLIENT_ALL_ATTRIB_BITS: u32 = 4294967295;
pub const GL_ALPHA4: u32 = 32827;
pub const GL_ALPHA8: u32 = 32828;
pub const GL_ALPHA12: u32 = 32829;
pub const GL_ALPHA16: u32 = 32830;
pub const GL_LUMINANCE4: u32 = 32831;
pub const GL_LUMINANCE8: u32 = 32832;
pub const GL_LUMINANCE12: u32 = 32833;
pub const GL_LUMINANCE16: u32 = 32834;
pub const GL_LUMINANCE4_ALPHA4: u32 = 32835;
pub const GL_LUMINANCE6_ALPHA2: u32 = 32836;
pub const GL_LUMINANCE8_ALPHA8: u32 = 32837;
pub const GL_LUMINANCE12_ALPHA4: u32 = 32838;
pub const GL_LUMINANCE12_ALPHA12: u32 = 32839;
pub const GL_LUMINANCE16_ALPHA16: u32 = 32840;
pub const GL_INTENSITY: u32 = 32841;
pub const GL_INTENSITY4: u32 = 32842;
pub const GL_INTENSITY8: u32 = 32843;
pub const GL_INTENSITY12: u32 = 32844;
pub const GL_INTENSITY16: u32 = 32845;
pub const GL_TEXTURE_LUMINANCE_SIZE: u32 = 32864;
pub const GL_TEXTURE_INTENSITY_SIZE: u32 = 32865;
pub const GL_TEXTURE_PRIORITY: u32 = 32870;
pub const GL_TEXTURE_RESIDENT: u32 = 32871;
pub const GL_VERTEX_ARRAY: u32 = 32884;
pub const GL_NORMAL_ARRAY: u32 = 32885;
pub const GL_COLOR_ARRAY: u32 = 32886;
pub const GL_INDEX_ARRAY: u32 = 32887;
pub const GL_TEXTURE_COORD_ARRAY: u32 = 32888;
pub const GL_EDGE_FLAG_ARRAY: u32 = 32889;
pub const GL_VERTEX_ARRAY_SIZE: u32 = 32890;
pub const GL_VERTEX_ARRAY_TYPE: u32 = 32891;
pub const GL_VERTEX_ARRAY_STRIDE: u32 = 32892;
pub const GL_NORMAL_ARRAY_TYPE: u32 = 32894;
pub const GL_NORMAL_ARRAY_STRIDE: u32 = 32895;
pub const GL_COLOR_ARRAY_SIZE: u32 = 32897;
pub const GL_COLOR_ARRAY_TYPE: u32 = 32898;
pub const GL_COLOR_ARRAY_STRIDE: u32 = 32899;
pub const GL_INDEX_ARRAY_TYPE: u32 = 32901;
pub const GL_INDEX_ARRAY_STRIDE: u32 = 32902;
pub const GL_TEXTURE_COORD_ARRAY_SIZE: u32 = 32904;
pub const GL_TEXTURE_COORD_ARRAY_TYPE: u32 = 32905;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE: u32 = 32906;
pub const GL_EDGE_FLAG_ARRAY_STRIDE: u32 = 32908;
pub const GL_VERTEX_ARRAY_POINTER: u32 = 32910;
pub const GL_NORMAL_ARRAY_POINTER: u32 = 32911;
pub const GL_COLOR_ARRAY_POINTER: u32 = 32912;
pub const GL_INDEX_ARRAY_POINTER: u32 = 32913;
pub const GL_TEXTURE_COORD_ARRAY_POINTER: u32 = 32914;
pub const GL_EDGE_FLAG_ARRAY_POINTER: u32 = 32915;
pub const GL_V2F: u32 = 10784;
pub const GL_V3F: u32 = 10785;
pub const GL_C4UB_V2F: u32 = 10786;
pub const GL_C4UB_V3F: u32 = 10787;
pub const GL_C3F_V3F: u32 = 10788;
pub const GL_N3F_V3F: u32 = 10789;
pub const GL_C4F_N3F_V3F: u32 = 10790;
pub const GL_T2F_V3F: u32 = 10791;
pub const GL_T4F_V4F: u32 = 10792;
pub const GL_T2F_C4UB_V3F: u32 = 10793;
pub const GL_T2F_C3F_V3F: u32 = 10794;
pub const GL_T2F_N3F_V3F: u32 = 10795;
pub const GL_T2F_C4F_N3F_V3F: u32 = 10796;
pub const GL_T4F_C4F_N3F_V4F: u32 = 10797;
pub const GL_COLOR_MATRIX: u32 = 32945;
pub const GL_COLOR_MATRIX_STACK_DEPTH: u32 = 32946;
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH: u32 = 32947;
pub const GL_POST_COLOR_MATRIX_RED_SCALE: u32 = 32948;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE: u32 = 32949;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE: u32 = 32950;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE: u32 = 32951;
pub const GL_POST_COLOR_MATRIX_RED_BIAS: u32 = 32952;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS: u32 = 32953;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS: u32 = 32954;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS: u32 = 32955;
pub const GL_COLOR_TABLE: u32 = 32976;
pub const GL_POST_CONVOLUTION_COLOR_TABLE: u32 = 32977;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE: u32 = 32978;
pub const GL_PROXY_COLOR_TABLE: u32 = 32979;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE: u32 = 32980;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE: u32 = 32981;
pub const GL_COLOR_TABLE_SCALE: u32 = 32982;
pub const GL_COLOR_TABLE_BIAS: u32 = 32983;
pub const GL_COLOR_TABLE_FORMAT: u32 = 32984;
pub const GL_COLOR_TABLE_WIDTH: u32 = 32985;
pub const GL_COLOR_TABLE_RED_SIZE: u32 = 32986;
pub const GL_COLOR_TABLE_GREEN_SIZE: u32 = 32987;
pub const GL_COLOR_TABLE_BLUE_SIZE: u32 = 32988;
pub const GL_COLOR_TABLE_ALPHA_SIZE: u32 = 32989;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE: u32 = 32990;
pub const GL_COLOR_TABLE_INTENSITY_SIZE: u32 = 32991;
pub const GL_CONVOLUTION_1D: u32 = 32784;
pub const GL_CONVOLUTION_2D: u32 = 32785;
pub const GL_SEPARABLE_2D: u32 = 32786;
pub const GL_CONVOLUTION_BORDER_MODE: u32 = 32787;
pub const GL_CONVOLUTION_FILTER_SCALE: u32 = 32788;
pub const GL_CONVOLUTION_FILTER_BIAS: u32 = 32789;
pub const GL_REDUCE: u32 = 32790;
pub const GL_CONVOLUTION_FORMAT: u32 = 32791;
pub const GL_CONVOLUTION_WIDTH: u32 = 32792;
pub const GL_CONVOLUTION_HEIGHT: u32 = 32793;
pub const GL_MAX_CONVOLUTION_WIDTH: u32 = 32794;
pub const GL_MAX_CONVOLUTION_HEIGHT: u32 = 32795;
pub const GL_POST_CONVOLUTION_RED_SCALE: u32 = 32796;
pub const GL_POST_CONVOLUTION_GREEN_SCALE: u32 = 32797;
pub const GL_POST_CONVOLUTION_BLUE_SCALE: u32 = 32798;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE: u32 = 32799;
pub const GL_POST_CONVOLUTION_RED_BIAS: u32 = 32800;
pub const GL_POST_CONVOLUTION_GREEN_BIAS: u32 = 32801;
pub const GL_POST_CONVOLUTION_BLUE_BIAS: u32 = 32802;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS: u32 = 32803;
pub const GL_CONSTANT_BORDER: u32 = 33105;
pub const GL_REPLICATE_BORDER: u32 = 33107;
pub const GL_CONVOLUTION_BORDER_COLOR: u32 = 33108;
pub const GL_HISTOGRAM: u32 = 32804;
pub const GL_PROXY_HISTOGRAM: u32 = 32805;
pub const GL_HISTOGRAM_WIDTH: u32 = 32806;
pub const GL_HISTOGRAM_FORMAT: u32 = 32807;
pub const GL_HISTOGRAM_RED_SIZE: u32 = 32808;
pub const GL_HISTOGRAM_GREEN_SIZE: u32 = 32809;
pub const GL_HISTOGRAM_BLUE_SIZE: u32 = 32810;
pub const GL_HISTOGRAM_ALPHA_SIZE: u32 = 32811;
pub const GL_HISTOGRAM_LUMINANCE_SIZE: u32 = 32812;
pub const GL_HISTOGRAM_SINK: u32 = 32813;
pub const GL_MINMAX: u32 = 32814;
pub const GL_MINMAX_FORMAT: u32 = 32815;
pub const GL_MINMAX_SINK: u32 = 32816;
pub const GL_TABLE_TOO_LARGE: u32 = 32817;
pub const GL_RESCALE_NORMAL: u32 = 32826;
pub const GL_LIGHT_MODEL_COLOR_CONTROL: u32 = 33272;
pub const GL_SINGLE_COLOR: u32 = 33273;
pub const GL_SEPARATE_SPECULAR_COLOR: u32 = 33274;
pub const GL_ALIASED_POINT_SIZE_RANGE: u32 = 33901;
pub const GL_CLIENT_ACTIVE_TEXTURE: u32 = 34017;
pub const GL_MAX_TEXTURE_UNITS: u32 = 34018;
pub const GL_COMBINE: u32 = 34160;
pub const GL_COMBINE_RGB: u32 = 34161;
pub const GL_COMBINE_ALPHA: u32 = 34162;
pub const GL_RGB_SCALE: u32 = 34163;
pub const GL_ADD_SIGNED: u32 = 34164;
pub const GL_INTERPOLATE: u32 = 34165;
pub const GL_CONSTANT: u32 = 34166;
pub const GL_PRIMARY_COLOR: u32 = 34167;
pub const GL_PREVIOUS: u32 = 34168;
pub const GL_SUBTRACT: u32 = 34023;
pub const GL_SRC0_RGB: u32 = 34176;
pub const GL_SRC1_RGB: u32 = 34177;
pub const GL_SRC2_RGB: u32 = 34178;
pub const GL_SRC0_ALPHA: u32 = 34184;
pub const GL_SRC2_ALPHA: u32 = 34186;
pub const GL_SOURCE0_RGB: u32 = 34176;
pub const GL_SOURCE1_RGB: u32 = 34177;
pub const GL_SOURCE2_RGB: u32 = 34178;
pub const GL_SOURCE0_ALPHA: u32 = 34184;
pub const GL_SOURCE1_ALPHA: u32 = 34185;
pub const GL_SOURCE2_ALPHA: u32 = 34186;
pub const GL_OPERAND0_RGB: u32 = 34192;
pub const GL_OPERAND1_RGB: u32 = 34193;
pub const GL_OPERAND2_RGB: u32 = 34194;
pub const GL_OPERAND0_ALPHA: u32 = 34200;
pub const GL_OPERAND1_ALPHA: u32 = 34201;
pub const GL_OPERAND2_ALPHA: u32 = 34202;
pub const GL_DOT3_RGB: u32 = 34478;
pub const GL_DOT3_RGBA: u32 = 34479;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX: u32 = 34019;
pub const GL_TRANSPOSE_PROJECTION_MATRIX: u32 = 34020;
pub const GL_TRANSPOSE_TEXTURE_MATRIX: u32 = 34021;
pub const GL_TRANSPOSE_COLOR_MATRIX: u32 = 34022;
pub const GL_NORMAL_MAP: u32 = 34065;
pub const GL_REFLECTION_MAP: u32 = 34066;
pub const GL_COMPRESSED_ALPHA: u32 = 34025;
pub const GL_COMPRESSED_LUMINANCE: u32 = 34026;
pub const GL_COMPRESSED_LUMINANCE_ALPHA: u32 = 34027;
pub const GL_COMPRESSED_INTENSITY: u32 = 34028;
pub const GL_MULTISAMPLE_BIT: u32 = 536870912;
pub const GL_DEPTH_TEXTURE_MODE: u32 = 34891;
pub const GL_COMPARE_R_TO_TEXTURE: u32 = 34894;
pub const GL_FOG_COORD_SRC: u32 = 33872;
pub const GL_FOG_COORD: u32 = 33873;
pub const GL_FRAGMENT_DEPTH: u32 = 33874;
pub const GL_CURRENT_FOG_COORD: u32 = 33875;
pub const GL_FOG_COORD_ARRAY_TYPE: u32 = 33876;
pub const GL_FOG_COORD_ARRAY_STRIDE: u32 = 33877;
pub const GL_FOG_COORD_ARRAY_POINTER: u32 = 33878;
pub const GL_FOG_COORD_ARRAY: u32 = 33879;
pub const GL_FOG_COORDINATE_SOURCE: u32 = 33872;
pub const GL_FOG_COORDINATE: u32 = 33873;
pub const GL_CURRENT_FOG_COORDINATE: u32 = 33875;
pub const GL_FOG_COORDINATE_ARRAY_TYPE: u32 = 33876;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE: u32 = 33877;
pub const GL_FOG_COORDINATE_ARRAY_POINTER: u32 = 33878;
pub const GL_FOG_COORDINATE_ARRAY: u32 = 33879;
pub const GL_COLOR_SUM: u32 = 33880;
pub const GL_CURRENT_SECONDARY_COLOR: u32 = 33881;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE: u32 = 33882;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE: u32 = 33883;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE: u32 = 33884;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER: u32 = 33885;
pub const GL_SECONDARY_COLOR_ARRAY: u32 = 33886;
pub const GL_POINT_SIZE_MIN: u32 = 33062;
pub const GL_POINT_SIZE_MAX: u32 = 33063;
pub const GL_POINT_DISTANCE_ATTENUATION: u32 = 33065;
pub const GL_GENERATE_MIPMAP: u32 = 33169;
pub const GL_GENERATE_MIPMAP_HINT: u32 = 33170;
pub const GL_TEXTURE_FILTER_CONTROL: u32 = 34048;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING: u32 = 34966;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING: u32 = 34967;
pub const GL_COLOR_ARRAY_BUFFER_BINDING: u32 = 34968;
pub const GL_INDEX_ARRAY_BUFFER_BINDING: u32 = 34969;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: u32 = 34970;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING: u32 = 34971;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING: u32 = 34972;
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING: u32 = 34973;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING: u32 = 34974;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING: u32 = 34973;
pub const GL_VERTEX_PROGRAM_TWO_SIDE: u32 = 34371;
pub const GL_MAX_TEXTURE_COORDS: u32 = 34929;
pub const GL_POINT_SPRITE: u32 = 34913;
pub const GL_COORD_REPLACE: u32 = 34914;
pub const GL_CURRENT_RASTER_SECONDARY_COLOR: u32 = 33887;
pub const GL_SLUMINANCE_ALPHA: u32 = 35908;
pub const GL_SLUMINANCE8_ALPHA8: u32 = 35909;
pub const GL_SLUMINANCE: u32 = 35910;
pub const GL_SLUMINANCE8: u32 = 35911;
pub const GL_COMPRESSED_SLUMINANCE: u32 = 35914;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA: u32 = 35915;
pub const GLU_EXT_object_space_tess: u32 = 1;
pub const GLU_EXT_nurbs_tessellator: u32 = 1;
pub const GLU_FALSE: u32 = 0;
pub const GLU_TRUE: u32 = 1;
pub const GLU_VERSION_1_1: u32 = 1;
pub const GLU_VERSION_1_2: u32 = 1;
pub const GLU_VERSION_1_3: u32 = 1;
pub const GLU_VERSION: u32 = 100800;
pub const GLU_EXTENSIONS: u32 = 100801;
pub const GLU_INVALID_ENUM: u32 = 100900;
pub const GLU_INVALID_VALUE: u32 = 100901;
pub const GLU_OUT_OF_MEMORY: u32 = 100902;
pub const GLU_INCOMPATIBLE_GL_VERSION: u32 = 100903;
pub const GLU_INVALID_OPERATION: u32 = 100904;
pub const GLU_OUTLINE_POLYGON: u32 = 100240;
pub const GLU_OUTLINE_PATCH: u32 = 100241;
pub const GLU_NURBS_ERROR: u32 = 100103;
pub const GLU_ERROR: u32 = 100103;
pub const GLU_NURBS_BEGIN: u32 = 100164;
pub const GLU_NURBS_BEGIN_EXT: u32 = 100164;
pub const GLU_NURBS_VERTEX: u32 = 100165;
pub const GLU_NURBS_VERTEX_EXT: u32 = 100165;
pub const GLU_NURBS_NORMAL: u32 = 100166;
pub const GLU_NURBS_NORMAL_EXT: u32 = 100166;
pub const GLU_NURBS_COLOR: u32 = 100167;
pub const GLU_NURBS_COLOR_EXT: u32 = 100167;
pub const GLU_NURBS_TEXTURE_COORD: u32 = 100168;
pub const GLU_NURBS_TEX_COORD_EXT: u32 = 100168;
pub const GLU_NURBS_END: u32 = 100169;
pub const GLU_NURBS_END_EXT: u32 = 100169;
pub const GLU_NURBS_BEGIN_DATA: u32 = 100170;
pub const GLU_NURBS_BEGIN_DATA_EXT: u32 = 100170;
pub const GLU_NURBS_VERTEX_DATA: u32 = 100171;
pub const GLU_NURBS_VERTEX_DATA_EXT: u32 = 100171;
pub const GLU_NURBS_NORMAL_DATA: u32 = 100172;
pub const GLU_NURBS_NORMAL_DATA_EXT: u32 = 100172;
pub const GLU_NURBS_COLOR_DATA: u32 = 100173;
pub const GLU_NURBS_COLOR_DATA_EXT: u32 = 100173;
pub const GLU_NURBS_TEXTURE_COORD_DATA: u32 = 100174;
pub const GLU_NURBS_TEX_COORD_DATA_EXT: u32 = 100174;
pub const GLU_NURBS_END_DATA: u32 = 100175;
pub const GLU_NURBS_END_DATA_EXT: u32 = 100175;
pub const GLU_NURBS_ERROR1: u32 = 100251;
pub const GLU_NURBS_ERROR2: u32 = 100252;
pub const GLU_NURBS_ERROR3: u32 = 100253;
pub const GLU_NURBS_ERROR4: u32 = 100254;
pub const GLU_NURBS_ERROR5: u32 = 100255;
pub const GLU_NURBS_ERROR6: u32 = 100256;
pub const GLU_NURBS_ERROR7: u32 = 100257;
pub const GLU_NURBS_ERROR8: u32 = 100258;
pub const GLU_NURBS_ERROR9: u32 = 100259;
pub const GLU_NURBS_ERROR10: u32 = 100260;
pub const GLU_NURBS_ERROR11: u32 = 100261;
pub const GLU_NURBS_ERROR12: u32 = 100262;
pub const GLU_NURBS_ERROR13: u32 = 100263;
pub const GLU_NURBS_ERROR14: u32 = 100264;
pub const GLU_NURBS_ERROR15: u32 = 100265;
pub const GLU_NURBS_ERROR16: u32 = 100266;
pub const GLU_NURBS_ERROR17: u32 = 100267;
pub const GLU_NURBS_ERROR18: u32 = 100268;
pub const GLU_NURBS_ERROR19: u32 = 100269;
pub const GLU_NURBS_ERROR20: u32 = 100270;
pub const GLU_NURBS_ERROR21: u32 = 100271;
pub const GLU_NURBS_ERROR22: u32 = 100272;
pub const GLU_NURBS_ERROR23: u32 = 100273;
pub const GLU_NURBS_ERROR24: u32 = 100274;
pub const GLU_NURBS_ERROR25: u32 = 100275;
pub const GLU_NURBS_ERROR26: u32 = 100276;
pub const GLU_NURBS_ERROR27: u32 = 100277;
pub const GLU_NURBS_ERROR28: u32 = 100278;
pub const GLU_NURBS_ERROR29: u32 = 100279;
pub const GLU_NURBS_ERROR30: u32 = 100280;
pub const GLU_NURBS_ERROR31: u32 = 100281;
pub const GLU_NURBS_ERROR32: u32 = 100282;
pub const GLU_NURBS_ERROR33: u32 = 100283;
pub const GLU_NURBS_ERROR34: u32 = 100284;
pub const GLU_NURBS_ERROR35: u32 = 100285;
pub const GLU_NURBS_ERROR36: u32 = 100286;
pub const GLU_NURBS_ERROR37: u32 = 100287;
pub const GLU_AUTO_LOAD_MATRIX: u32 = 100200;
pub const GLU_CULLING: u32 = 100201;
pub const GLU_SAMPLING_TOLERANCE: u32 = 100203;
pub const GLU_DISPLAY_MODE: u32 = 100204;
pub const GLU_PARAMETRIC_TOLERANCE: u32 = 100202;
pub const GLU_SAMPLING_METHOD: u32 = 100205;
pub const GLU_U_STEP: u32 = 100206;
pub const GLU_V_STEP: u32 = 100207;
pub const GLU_NURBS_MODE: u32 = 100160;
pub const GLU_NURBS_MODE_EXT: u32 = 100160;
pub const GLU_NURBS_TESSELLATOR: u32 = 100161;
pub const GLU_NURBS_TESSELLATOR_EXT: u32 = 100161;
pub const GLU_NURBS_RENDERER: u32 = 100162;
pub const GLU_NURBS_RENDERER_EXT: u32 = 100162;
pub const GLU_OBJECT_PARAMETRIC_ERROR: u32 = 100208;
pub const GLU_OBJECT_PARAMETRIC_ERROR_EXT: u32 = 100208;
pub const GLU_OBJECT_PATH_LENGTH: u32 = 100209;
pub const GLU_OBJECT_PATH_LENGTH_EXT: u32 = 100209;
pub const GLU_PATH_LENGTH: u32 = 100215;
pub const GLU_PARAMETRIC_ERROR: u32 = 100216;
pub const GLU_DOMAIN_DISTANCE: u32 = 100217;
pub const GLU_MAP1_TRIM_2: u32 = 100210;
pub const GLU_MAP1_TRIM_3: u32 = 100211;
pub const GLU_POINT: u32 = 100010;
pub const GLU_LINE: u32 = 100011;
pub const GLU_FILL: u32 = 100012;
pub const GLU_SILHOUETTE: u32 = 100013;
pub const GLU_SMOOTH: u32 = 100000;
pub const GLU_FLAT: u32 = 100001;
pub const GLU_NONE: u32 = 100002;
pub const GLU_OUTSIDE: u32 = 100020;
pub const GLU_INSIDE: u32 = 100021;
pub const GLU_TESS_BEGIN: u32 = 100100;
pub const GLU_BEGIN: u32 = 100100;
pub const GLU_TESS_VERTEX: u32 = 100101;
pub const GLU_VERTEX: u32 = 100101;
pub const GLU_TESS_END: u32 = 100102;
pub const GLU_END: u32 = 100102;
pub const GLU_TESS_ERROR: u32 = 100103;
pub const GLU_TESS_EDGE_FLAG: u32 = 100104;
pub const GLU_EDGE_FLAG: u32 = 100104;
pub const GLU_TESS_COMBINE: u32 = 100105;
pub const GLU_TESS_BEGIN_DATA: u32 = 100106;
pub const GLU_TESS_VERTEX_DATA: u32 = 100107;
pub const GLU_TESS_END_DATA: u32 = 100108;
pub const GLU_TESS_ERROR_DATA: u32 = 100109;
pub const GLU_TESS_EDGE_FLAG_DATA: u32 = 100110;
pub const GLU_TESS_COMBINE_DATA: u32 = 100111;
pub const GLU_CW: u32 = 100120;
pub const GLU_CCW: u32 = 100121;
pub const GLU_INTERIOR: u32 = 100122;
pub const GLU_EXTERIOR: u32 = 100123;
pub const GLU_UNKNOWN: u32 = 100124;
pub const GLU_TESS_WINDING_RULE: u32 = 100140;
pub const GLU_TESS_BOUNDARY_ONLY: u32 = 100141;
pub const GLU_TESS_TOLERANCE: u32 = 100142;
pub const GLU_TESS_ERROR1: u32 = 100151;
pub const GLU_TESS_ERROR2: u32 = 100152;
pub const GLU_TESS_ERROR3: u32 = 100153;
pub const GLU_TESS_ERROR4: u32 = 100154;
pub const GLU_TESS_ERROR5: u32 = 100155;
pub const GLU_TESS_ERROR6: u32 = 100156;
pub const GLU_TESS_ERROR7: u32 = 100157;
pub const GLU_TESS_ERROR8: u32 = 100158;
pub const GLU_TESS_MISSING_BEGIN_POLYGON: u32 = 100151;
pub const GLU_TESS_MISSING_BEGIN_CONTOUR: u32 = 100152;
pub const GLU_TESS_MISSING_END_POLYGON: u32 = 100153;
pub const GLU_TESS_MISSING_END_CONTOUR: u32 = 100154;
pub const GLU_TESS_COORD_TOO_LARGE: u32 = 100155;
pub const GLU_TESS_NEED_COMBINE_CALLBACK: u32 = 100156;
pub const GLU_TESS_WINDING_ODD: u32 = 100130;
pub const GLU_TESS_WINDING_NONZERO: u32 = 100131;
pub const GLU_TESS_WINDING_POSITIVE: u32 = 100132;
pub const GLU_TESS_WINDING_NEGATIVE: u32 = 100133;
pub const GLU_TESS_WINDING_ABS_GEQ_TWO: u32 = 100134;
pub type max_align_t = u128;
extern "C" {
    pub fn cacosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexp(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clog(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabsf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cabs(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cabsl(arg1: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cpowf(arg1: __BindgenComplex<f32>, arg2: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpow(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>)
        -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrt(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cargf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn carg(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cargl(arg1: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cimagf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cimag(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cimagl(arg1: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn conjf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn conj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn conjl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cproj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn crealf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn creal(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creall(arg1: __BindgenComplex<f64>) -> u128;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _copyfile_state {
    _unused: [u8; 0],
}
pub type copyfile_state_t = *mut _copyfile_state;
pub type copyfile_flags_t = u32;
extern "C" {
    pub fn copyfile(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        state: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcopyfile(
        from_fd: ::std::os::raw::c_int,
        to_fd: ::std::os::raw::c_int,
        arg1: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_free(arg1: copyfile_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_alloc() -> copyfile_state_t;
}
extern "C" {
    pub fn copyfile_state_get(
        s: copyfile_state_t,
        flag: u32,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_set(
        s: copyfile_state_t,
        flag: u32,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type copyfile_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: copyfile_state_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn err(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn errc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn verrc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn errx(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verrx(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> !;
}
extern "C" {
    pub fn warn(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarn(arg1: *const ::std::os::raw::c_char, arg2: *mut __va_list_tag);
}
extern "C" {
    pub fn warnc(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnc(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn warnx(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnx(arg1: *const ::std::os::raw::c_char, arg2: *mut __va_list_tag);
}
extern "C" {
    pub fn err_set_file(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn err_set_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn err_set_exit_b(arg1: *mut ::std::os::raw::c_void);
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fenv_t {
    pub __control: ::std::os::raw::c_ushort,
    pub __status: ::std::os::raw::c_ushort,
    pub __mxcsr: ::std::os::raw::c_uint,
    pub __reserved: [::std::os::raw::c_char; 8usize],
}
pub type fexcept_t = ::std::os::raw::c_ushort;
extern "C" {
    pub static _FE_DFL_ENV: fenv_t;
}
extern "C" {
    pub static _FE_DFL_DISABLE_SSE_DENORMS_ENV: fenv_t;
}
extern "C" {
    pub fn feclearexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetexceptflag(
        arg1: *mut fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feraiseexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetexceptflag(
        arg1: *const fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fetestexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetround() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetround(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetenv(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feholdexcept(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feupdateenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    pub fn __inff() -> f32;
}
extern "C" {
    pub fn __inf() -> f64;
}
extern "C" {
    pub fn __infl() -> u128;
}
extern "C" {
    pub fn __nan() -> f32;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
extern "C" {
    pub fn readpassphrase(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn longjmperror();
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
pub type ucontext_t = __darwin_ucontext;
pub type pid_t = __darwin_pid_t;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type pthread_t = __darwin_pthread_t;
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type rsize_t = ::std::os::raw::c_ulong;
pub const memory_order_memory_order_relaxed: memory_order = 0;
pub const memory_order_memory_order_consume: memory_order = 1;
pub const memory_order_memory_order_acquire: memory_order = 2;
pub const memory_order_memory_order_release: memory_order = 3;
pub const memory_order_memory_order_acq_rel: memory_order = 4;
pub const memory_order_memory_order_seq_cst: memory_order = 5;
pub type memory_order = ::std::os::raw::c_uint;
extern "C" {
    pub fn atomic_thread_fence(arg1: memory_order);
}
extern "C" {
    pub fn atomic_signal_fence(arg1: memory_order);
}
pub type atomic_bool = u8;
pub type atomic_char = u8;
pub type atomic_schar = u8;
pub type atomic_uchar = u8;
pub type atomic_short = u16;
pub type atomic_ushort = u16;
pub type atomic_int = u32;
pub type atomic_uint = u32;
pub type atomic_long = u64;
pub type atomic_ulong = u64;
pub type atomic_llong = u64;
pub type atomic_ullong = u64;
pub type atomic_char16_t = u16;
pub type atomic_char32_t = u32;
pub type atomic_wchar_t = u32;
pub type atomic_int_least8_t = u8;
pub type atomic_uint_least8_t = u8;
pub type atomic_int_least16_t = u16;
pub type atomic_uint_least16_t = u16;
pub type atomic_int_least32_t = u32;
pub type atomic_uint_least32_t = u32;
pub type atomic_int_least64_t = u64;
pub type atomic_uint_least64_t = u64;
pub type atomic_int_fast8_t = u8;
pub type atomic_uint_fast8_t = u8;
pub type atomic_int_fast16_t = u16;
pub type atomic_uint_fast16_t = u16;
pub type atomic_int_fast32_t = u32;
pub type atomic_uint_fast32_t = u32;
pub type atomic_int_fast64_t = u64;
pub type atomic_uint_fast64_t = u64;
pub type atomic_intptr_t = u64;
pub type atomic_uintptr_t = u64;
pub type atomic_size_t = u64;
pub type atomic_ptrdiff_t = u64;
pub type atomic_intmax_t = u64;
pub type atomic_uintmax_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic_flag {
    pub _Value: atomic_bool,
}
extern "C" {
    pub fn atomic_flag_test_and_set(arg1: *mut atomic_flag) -> bool;
}
extern "C" {
    pub fn atomic_flag_test_and_set_explicit(arg1: *mut atomic_flag, arg2: memory_order) -> bool;
}
extern "C" {
    pub fn atomic_flag_clear(arg1: *mut atomic_flag);
}
extern "C" {
    pub fn atomic_flag_clear_explicit(arg1: *mut atomic_flag, arg2: memory_order);
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type id_t = __darwin_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub __bindgen_anon_1: wait__bindgen_ty_1,
    pub __bindgen_anon_2: wait__bindgen_ty_2,
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon$1050"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type _Argument_type_is_not_arithmetic = ::std::os::raw::c_void;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
extern "C" {
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
pub type uuid_t = __darwin_uuid_t;
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_compare(
        uu1: *mut ::std::os::raw::c_uchar,
        uu2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_is_null(uu: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(
        in_: *mut ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_unparse(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_lower(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_upper(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
extern "C" {
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type tcflag_t = ::std::os::raw::c_ulong;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 20usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
extern "C" {
    pub fn cfgetispeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetospeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetispeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetospeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(arg1: ::std::os::raw::c_int, arg2: *mut termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsendbreak(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(arg1: *mut termios);
}
extern "C" {
    pub fn cfsetspeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn login(arg1: *mut utmp);
}
extern "C" {
    pub fn login_tty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logwtmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn opendev(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut termios,
        arg5: *mut winsize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fparseln(
        arg1: *mut FILE,
        arg2: *mut usize,
        arg3: *mut usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn forkpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut termios,
        arg4: *mut winsize,
    ) -> pid_t;
}
extern "C" {
    pub fn pidlock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttylock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyunlock(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyaction(
        tty: *mut ::std::os::raw::c_char,
        act: *mut ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttymsg(
        arg1: *mut iovec,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlog {
    pub ll_time: time_t,
    pub ll_line: [::std::os::raw::c_char; 8usize],
    pub ll_host: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmp {
    pub ut_line: [::std::os::raw::c_char; 8usize],
    pub ut_name: [::std::os::raw::c_char; 8usize],
    pub ut_host: [::std::os::raw::c_char; 16usize],
    pub ut_time: ::std::os::raw::c_long,
}
pub type mbstate_t = __darwin_mbstate_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int, arg3: *mut FILE)
        -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const ::std::os::raw::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t, arg3: *mut mbstate_t)
        -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut wchar_t, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
pub type wctrans_t = __darwin_wctrans_t;
extern "C" {
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(arg1: *const ::std::os::raw::c_char) -> wctrans_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
extern "C" {
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _c_locale: locale_t;
}
extern "C" {
    pub fn duplocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn localeconv_l(arg1: locale_t) -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn querylocale(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn ___runetype_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune_l(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctype_t;
}
extern "C" {
    pub fn strtoimax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn fprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> f64;
}
extern "C" {
    pub fn atoi_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mblen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtod_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtouq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasestr_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn btowc_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_l(
        arg1: *mut wchar_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: locale_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn fputws_l(arg1: *const wchar_t, arg2: *mut FILE, arg3: locale_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn getwchar_l(arg1: locale_t) -> wint_t;
}
extern "C" {
    pub fn mbrlen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit_l(arg1: *const mbstate_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn putwchar_l(arg1: wchar_t, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn swprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc_l(arg1: wint_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn vfwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime_l(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstol_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswidth_l(arg1: *const wchar_t, arg2: usize, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob_l(arg1: wint_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth_l(arg1: wchar_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> u128;
}
extern "C" {
    pub fn wcstoll_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn fgetwln_l(arg1: *mut FILE, arg2: *mut usize, arg3: locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn nextwctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn towctrans_l(arg1: wint_t, arg2: wctrans_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctrans_t;
}
pub type nl_item = __darwin_nl_item;
extern "C" {
    pub fn nl_langinfo_l(arg1: nl_item, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
pub type regoff_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: usize,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
extern "C" {
    pub fn regcomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regncomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp_l(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec_l(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
        arg6: locale_t,
    ) -> ::std::os::raw::c_int;
}
pub type xattr_operation_intent_t = ::std::os::raw::c_uint;
pub type xattr_flags_t = u64;
extern "C" {
    pub fn xattr_preserve_for_intent(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_operation_intent_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xattr_name_with_flags(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_flags_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_name_without_flags(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_flags_from_name(arg1: *const ::std::os::raw::c_char) -> xattr_flags_t;
}
extern "C" {
    pub fn xattr_intent_with_flags(
        arg1: xattr_operation_intent_t,
        arg2: xattr_flags_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aiocb {
    pub aio_fildes: ::std::os::raw::c_int,
    pub aio_offset: off_t,
    pub aio_buf: *mut ::std::os::raw::c_void,
    pub aio_nbytes: usize,
    pub aio_reqprio: ::std::os::raw::c_int,
    pub aio_sigevent: sigevent,
    pub aio_lio_opcode: ::std::os::raw::c_int,
}
extern "C" {
    pub fn aio_cancel(fd: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_error(aiocbp: *const aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_fsync(op: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_read(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_return(aiocbp: *mut aiocb) -> isize;
}
extern "C" {
    pub fn aio_suspend(
        aiocblist: *const *const aiocb,
        nent: ::std::os::raw::c_int,
        timeoutp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_write(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lio_listio(
        mode: ::std::os::raw::c_int,
        aiocblist: *const *mut aiocb,
        nent: ::std::os::raw::c_int,
        sigp: *mut sigevent,
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opendir$INODE64"]
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_readdir$INODE64"]
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    #[link_name = "\u{1}_readdir_r$INODE64"]
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewinddir$INODE64"]
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    #[link_name = "\u{1}_seekdir$INODE64"]
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_telldir$INODE64"]
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fdopendir$INODE64"]
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    #[link_name = "\u{1}_alphasort$INODE64"]
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir$INODE64"]
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scandir_b$INODE64"]
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___opendir2$INODE64"]
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
pub type Dl_info = dl_info;
extern "C" {
    pub fn dladdr(arg1: *const ::std::os::raw::c_void, arg2: *mut Dl_info)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dlopen(
        __path: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlopen_preflight(__path: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
pub type fspecread_t = fspecread;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmtmsg(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fnmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat$INODE64"]
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat$INODE64"]
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat$INODE64"]
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatat$INODE64"]
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx_np$INODE64"]
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx_np$INODE64"]
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx_np$INODE64"]
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatx64_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstatx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTW {
    pub base: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}_ftw$INODE64"]
    pub fn ftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nftw$INODE64"]
    pub fn nftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
                arg4: *mut FTW,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glob_t {
    pub __bindgen_anon_1: glob_t__bindgen_ty_1,
    pub gl_pathc: usize,
    pub gl_matchc: ::std::os::raw::c_int,
    pub gl_offs: usize,
    pub gl_flags: ::std::os::raw::c_int,
    pub gl_pathv: *mut *mut ::std::os::raw::c_char,
    pub gl_closedir: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub gl_readdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut dirent,
    >,
    pub gl_opendir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_lstat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_stat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union glob_t__bindgen_ty_1 {
    pub gl_errfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_errblk: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_glob$INODE64"]
    pub fn glob(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_glob_b$INODE64"]
    pub fn glob_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn globfree(arg1: *mut glob_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn getgrgid(arg1: gid_t) -> *mut group;
}
extern "C" {
    pub fn getgrnam(arg1: *const ::std::os::raw::c_char) -> *mut group;
}
extern "C" {
    pub fn getgrgid_r(
        arg1: gid_t,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrent() -> *mut group;
}
extern "C" {
    pub fn setgrent();
}
extern "C" {
    pub fn endgrent();
}
extern "C" {
    pub fn group_from_gid(arg1: gid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getgruuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut group;
}
extern "C" {
    pub fn getgruuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgrfile(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setgroupent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _libiconv_version: ::std::os::raw::c_int;
}
pub type iconv_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn iconv_open(
        __tocode: *const ::std::os::raw::c_char,
        __fromcode: *const ::std::os::raw::c_char,
    ) -> iconv_t;
}
extern "C" {
    pub fn iconv(
        __cd: iconv_t,
        __inbuf: *mut *mut ::std::os::raw::c_char,
        __inbytesleft: *mut usize,
        __outbuf: *mut *mut ::std::os::raw::c_char,
        __outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn iconv_close(_cd: iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconvctl(
        cd: iconv_t,
        request: ::std::os::raw::c_int,
        argument: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type iconv_unicode_char_hook = ::std::option::Option<
    unsafe extern "C" fn(uc: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void),
>;
pub type iconv_wide_char_hook =
    ::std::option::Option<unsafe extern "C" fn(wc: wchar_t, data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_hooks {
    pub uc_hook: iconv_unicode_char_hook,
    pub wc_hook: iconv_wide_char_hook,
    pub data: *mut ::std::os::raw::c_void,
}
pub type iconv_unicode_mb_to_uc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_uint,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_unicode_uc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: ::std::os::raw::c_uint,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_mb_to_wc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const wchar_t,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_wc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: wchar_t,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_fallbacks {
    pub mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback,
    pub uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback,
    pub mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback,
    pub wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback,
    pub data: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn iconvlist(
        do_one: ::std::option::Option<
            unsafe extern "C" fn(
                namescount: ::std::os::raw::c_uint,
                names: *const *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn iconv_canonicalize(name: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libiconv_set_relocation_prefix(
        orig_prefix: *const ::std::os::raw::c_char,
        curr_prefix: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_dstaddr: *mut sockaddr,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmaddrs {
    pub ifma_next: *mut ifmaddrs,
    pub ifma_name: *mut sockaddr,
    pub ifma_addr: *mut sockaddr,
    pub ifma_lladdr: *mut sockaddr,
}
extern "C" {
    pub fn getifaddrs(arg1: *mut *mut ifaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifaddrs(arg1: *mut ifaddrs);
}
extern "C" {
    pub fn getifmaddrs(arg1: *mut *mut ifmaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifmaddrs(arg1: *mut ifmaddrs);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nl_langinfo(arg1: nl_item) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct datum {
    pub dptr: *mut ::std::os::raw::c_void,
    pub dsize: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBM {
    pub __opaque: [::std::os::raw::c_char; 68usize],
}
extern "C" {
    pub fn dbm_clearerr(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_close(arg1: *mut DBM);
}
extern "C" {
    pub fn dbm_delete(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_dirfno(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_error(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_fetch(arg1: *mut DBM, arg2: datum) -> datum;
}
extern "C" {
    pub fn dbm_firstkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_forder(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dbm_nextkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mode_t,
    ) -> *mut DBM;
}
extern "C" {
    pub fn dbm_store(
        arg1: *mut DBM,
        arg2: datum,
        arg3: datum,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub sdl_len: u_char,
    pub sdl_family: u_char,
    pub sdl_index: u_short,
    pub sdl_type: u_char,
    pub sdl_nlen: u_char,
    pub sdl_alen: u_char,
    pub sdl_slen: u_char,
    pub sdl_data: [::std::os::raw::c_char; 12usize],
}
extern "C" {
    pub fn link_addr(arg1: *const ::std::os::raw::c_char, arg2: *mut sockaddr_dl);
}
extern "C" {
    pub fn link_ntoa(arg1: *const sockaddr_dl) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select$1050"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_event_data {
    pub if_family: u_int32_t,
    pub if_unit: u_int32_t,
    pub if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval32 {
    pub tv_sec: __int32_t,
    pub tv_usec: __int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_data {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int32_t,
    pub ifi_ipackets: u_int32_t,
    pub ifi_ierrors: u_int32_t,
    pub ifi_opackets: u_int32_t,
    pub ifi_oerrors: u_int32_t,
    pub ifi_collisions: u_int32_t,
    pub ifi_ibytes: u_int32_t,
    pub ifi_obytes: u_int32_t,
    pub ifi_imcasts: u_int32_t,
    pub ifi_omcasts: u_int32_t,
    pub ifi_iqdrops: u_int32_t,
    pub ifi_noproto: u_int32_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
    pub ifi_unused2: u_int32_t,
    pub ifi_hwassist: u_int32_t,
    pub ifi_reserved1: u_int32_t,
    pub ifi_reserved2: u_int32_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct if_data64 {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int64_t,
    pub ifi_ipackets: u_int64_t,
    pub ifi_ierrors: u_int64_t,
    pub ifi_opackets: u_int64_t,
    pub ifi_oerrors: u_int64_t,
    pub ifi_collisions: u_int64_t,
    pub ifi_ibytes: u_int64_t,
    pub ifi_obytes: u_int64_t,
    pub ifi_imcasts: u_int64_t,
    pub ifi_omcasts: u_int64_t,
    pub ifi_iqdrops: u_int64_t,
    pub ifi_noproto: u_int64_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifqueue {
    pub ifq_head: *mut ::std::os::raw::c_void,
    pub ifq_tail: *mut ::std::os::raw::c_void,
    pub ifq_len: ::std::os::raw::c_int,
    pub ifq_maxlen: ::std::os::raw::c_int,
    pub ifq_drops: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_clonereq {
    pub ifcr_total: ::std::os::raw::c_int,
    pub ifcr_count: ::std::os::raw::c_int,
    pub ifcr_buffer: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr {
    pub ifm_msglen: ::std::os::raw::c_ushort,
    pub ifm_version: ::std::os::raw::c_uchar,
    pub ifm_type: ::std::os::raw::c_uchar,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: ::std::os::raw::c_ushort,
    pub ifm_data: if_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifa_msghdr {
    pub ifam_msglen: ::std::os::raw::c_ushort,
    pub ifam_version: ::std::os::raw::c_uchar,
    pub ifam_type: ::std::os::raw::c_uchar,
    pub ifam_addrs: ::std::os::raw::c_int,
    pub ifam_flags: ::std::os::raw::c_int,
    pub ifam_index: ::std::os::raw::c_ushort,
    pub ifam_metric: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr {
    pub ifmam_msglen: ::std::os::raw::c_ushort,
    pub ifmam_version: ::std::os::raw::c_uchar,
    pub ifmam_type: ::std::os::raw::c_uchar,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr2 {
    pub ifm_msglen: u_short,
    pub ifm_version: u_char,
    pub ifm_type: u_char,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: u_short,
    pub ifm_snd_len: ::std::os::raw::c_int,
    pub ifm_snd_maxlen: ::std::os::raw::c_int,
    pub ifm_snd_drops: ::std::os::raw::c_int,
    pub ifm_timer: ::std::os::raw::c_int,
    pub ifm_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr2 {
    pub ifmam_msglen: u_short,
    pub ifmam_version: u_char,
    pub ifmam_type: u_char,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: u_short,
    pub ifmam_refcount: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifdevmtu {
    pub ifdm_current: ::std::os::raw::c_int,
    pub ifdm_min: ::std::os::raw::c_int,
    pub ifdm_max: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifkpi {
    pub __bindgen_anon_1: ifkpi__bindgen_ty_1,
    pub ifk_module_id: ::std::os::raw::c_uint,
    pub ifk_type: ::std::os::raw::c_uint,
    pub ifk_data: ifkpi__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifkpi__bindgen_ty_1 {
    pub ifk_ptr: *mut ::std::os::raw::c_void,
    pub ifk_value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub __bindgen_anon_1: ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_phys: ::std::os::raw::c_int,
    pub ifru_media: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_devmtu: ifdevmtu,
    pub ifru_kpi: ifkpi,
    pub ifru_wake_flags: u_int32_t,
    pub ifru_route_refcnt: u_int32_t,
    pub ifru_cap: [::std::os::raw::c_int; 2usize],
    pub ifru_functional_type: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr,
    pub ifra_broadaddr: sockaddr,
    pub ifra_mask: sockaddr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rslvmulti_req {
    pub sa: *mut sockaddr,
    pub llsa: *mut *mut sockaddr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifmediareq {
    pub ifm_name: [::std::os::raw::c_char; 16usize],
    pub ifm_current: ::std::os::raw::c_int,
    pub ifm_mask: ::std::os::raw::c_int,
    pub ifm_status: ::std::os::raw::c_int,
    pub ifm_active: ::std::os::raw::c_int,
    pub ifm_count: ::std::os::raw::c_int,
    pub ifm_ulist: *mut ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifdrv {
    pub ifd_name: [::std::os::raw::c_char; 16usize],
    pub ifd_cmd: ::std::os::raw::c_ulong,
    pub ifd_len: usize,
    pub ifd_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifstat {
    pub ifs_name: [::std::os::raw::c_char; 16usize],
    pub ascii: [::std::os::raw::c_char; 801usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub __bindgen_anon_1: ifconf__bindgen_ty_1,
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: caddr_t,
    pub ifcu_req: *mut ifreq,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_dl_proto_data {
    pub link_data: net_event_data,
    pub proto_family: u_int32_t,
    pub proto_remaining_count: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_nameindex {
    pub if_index: ::std::os::raw::c_uint,
    pub if_name: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn if_nametoindex(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn if_indextoname(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn if_nameindex() -> *mut if_nameindex;
}
extern "C" {
    pub fn if_freenameindex(arg1: *mut if_nameindex);
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
impl tcphdr {
    #[inline]
    pub fn th_x2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: ::std::os::raw::c_uint,
        th_off: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u32 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u32 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
    pub tcpi_txretransmitpackets: u_int64_t,
}
impl tcp_connection_info {
    #[inline]
    pub fn tcpi_tfo_cookie_req(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_loss(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_loss(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_acked(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_acked(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_req_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_invalid(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_invalid(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_wrong(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_wrong(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_no_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_no_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_heuristics_disable(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_heuristics_disable(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_send_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_send_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_recv_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_recv_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_onebyte_proxy(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_onebyte_proxy(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pad2(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set___pad2(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_tfo_cookie_req: u_int32_t,
        tcpi_tfo_cookie_rcv: u_int32_t,
        tcpi_tfo_syn_loss: u_int32_t,
        tcpi_tfo_syn_data_sent: u_int32_t,
        tcpi_tfo_syn_data_acked: u_int32_t,
        tcpi_tfo_syn_data_rcv: u_int32_t,
        tcpi_tfo_cookie_req_rcv: u_int32_t,
        tcpi_tfo_cookie_sent: u_int32_t,
        tcpi_tfo_cookie_invalid: u_int32_t,
        tcpi_tfo_cookie_wrong: u_int32_t,
        tcpi_tfo_no_cookie_rcv: u_int32_t,
        tcpi_tfo_heuristics_disable: u_int32_t,
        tcpi_tfo_send_blackhole: u_int32_t,
        tcpi_tfo_recv_blackhole: u_int32_t,
        tcpi_tfo_onebyte_proxy: u_int32_t,
        __pad2: u_int32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcpi_tfo_cookie_req: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req) };
            tcpi_tfo_cookie_req as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcpi_tfo_cookie_rcv: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_rcv) };
            tcpi_tfo_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tcpi_tfo_syn_loss: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_syn_loss) };
            tcpi_tfo_syn_loss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tcpi_tfo_syn_data_sent: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_sent) };
            tcpi_tfo_syn_data_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tcpi_tfo_syn_data_acked: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_acked) };
            tcpi_tfo_syn_data_acked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tcpi_tfo_syn_data_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_rcv) };
            tcpi_tfo_syn_data_rcv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tcpi_tfo_cookie_req_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req_rcv) };
            tcpi_tfo_cookie_req_rcv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tcpi_tfo_cookie_sent: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_sent) };
            tcpi_tfo_cookie_sent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_tfo_cookie_invalid: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_invalid) };
            tcpi_tfo_cookie_invalid as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tcpi_tfo_cookie_wrong: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_wrong) };
            tcpi_tfo_cookie_wrong as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tcpi_tfo_no_cookie_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_no_cookie_rcv) };
            tcpi_tfo_no_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tcpi_tfo_heuristics_disable: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_heuristics_disable) };
            tcpi_tfo_heuristics_disable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tcpi_tfo_send_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_send_blackhole) };
            tcpi_tfo_send_blackhole as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tcpi_tfo_recv_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_recv_blackhole) };
            tcpi_tfo_recv_blackhole as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tcpi_tfo_onebyte_proxy: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_onebyte_proxy) };
            tcpi_tfo_onebyte_proxy as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let __pad2: u32 = unsafe { ::std::mem::transmute(__pad2) };
            __pad2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __nl_cat_d {
    pub __data: *mut ::std::os::raw::c_void,
    pub __size: ::std::os::raw::c_int,
}
pub type nl_catd = *mut __nl_cat_d;
extern "C" {
    pub fn catopen(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> nl_catd;
}
extern "C" {
    pub fn catgets(
        arg1: nl_catd,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn catclose(arg1: nl_catd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
pub type nfds_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn poll(
        arg1: *mut pollfd,
        arg2: nfds_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_yield_np();
}
extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
pub type posix_spawnattr_t = *mut ::std::os::raw::c_void;
pub type posix_spawn_file_actions_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn posix_spawn(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnp(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addclose(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_adddup2(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addopen(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_destroy(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_init(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_destroy(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigdefault(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getflags(
        arg1: *const posix_spawnattr_t,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getpgroup(
        arg1: *const posix_spawnattr_t,
        arg2: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigmask(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_init(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigdefault(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setflags(
        arg1: *mut posix_spawnattr_t,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setpgroup(
        arg1: *mut posix_spawnattr_t,
        arg2: pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigmask(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
    pub flags: u32,
    pub mpl: mach_port_limits_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type x86_avx512_state32_t = __darwin_i386_avx512_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_thread_full_state64_t = __darwin_x86_thread_full_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_avx512_state64_t = __darwin_x86_avx512_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
pub type x86_pagein_state_t = __x86_pagein_state;
pub type x86_instruction_state_t = __x86_instruction_state;
pub type last_branch_state_t = __last_branch_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_thread_state {
    pub __bindgen_anon_1: x86_thread_state__bindgen_ty_1,
    pub tsh: x86_state_hdr_t,
    pub uts: x86_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_thread_state__bindgen_ty_1 {
    pub ts32: x86_thread_state32_t,
    pub ts64: x86_thread_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_float_state {
    pub __bindgen_anon_1: x86_float_state__bindgen_ty_1,
    pub fsh: x86_state_hdr_t,
    pub ufs: x86_float_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_float_state__bindgen_ty_1 {
    pub fs32: x86_float_state32_t,
    pub fs64: x86_float_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_exception_state {
    pub __bindgen_anon_1: x86_exception_state__bindgen_ty_1,
    pub esh: x86_state_hdr_t,
    pub ues: x86_exception_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_exception_state__bindgen_ty_1 {
    pub es32: x86_exception_state32_t,
    pub es64: x86_exception_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_debug_state {
    pub __bindgen_anon_1: x86_debug_state__bindgen_ty_1,
    pub dsh: x86_state_hdr_t,
    pub uds: x86_debug_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_debug_state__bindgen_ty_1 {
    pub ds32: x86_debug_state32_t,
    pub ds64: x86_debug_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx_state {
    pub __bindgen_anon_1: x86_avx_state__bindgen_ty_1,
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx_state__bindgen_ty_1 {
    pub as32: x86_avx_state32_t,
    pub as64: x86_avx_state64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx512_state {
    pub __bindgen_anon_1: x86_avx512_state__bindgen_ty_1,
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx512_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx512_state__bindgen_ty_1 {
    pub as32: x86_avx512_state32_t,
    pub as64: x86_avx512_state64_t,
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
pub type x86_avx512_state_t = x86_avx512_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
extern "C" {
    pub fn posix_spawnattr_getbinpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getarchpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setauditsessionport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setbinpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setarchpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setexceptionports_np(
        arg1: *mut posix_spawnattr_t,
        arg2: exception_mask_t,
        arg3: mach_port_t,
        arg4: exception_behavior_t,
        arg5: thread_state_flavor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setspecialport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setnosmt_np(attr: *const posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_csm_np(
        attr: *const posix_spawnattr_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addinherit_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addfchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_qos_class_np(
        __attr: *mut posix_spawnattr_t,
        __qos_class: qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_get_qos_class_np(
        __attr: *const posix_spawnattr_t,
        __qos_class: *mut qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pthread_mutex_enable_legacy_mode();
}
extern "C" {
    pub fn pthread_create_from_mach_thread(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regcomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regerror(
        arg1: ::std::os::raw::c_int,
        arg2: *const regex_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> usize;
}
extern "C" {
    pub fn regexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regfree(arg1: *mut regex_t);
}
extern "C" {
    pub fn regncomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regnexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwncomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
pub type ENTRY = entry;
pub const ACTION_FIND: ACTION = 0;
pub const ACTION_ENTER: ACTION = 1;
pub type ACTION = ::std::os::raw::c_uint;
pub const VISIT_preorder: VISIT = 0;
pub const VISIT_postorder: VISIT = 1;
pub const VISIT_endorder: VISIT = 2;
pub const VISIT_leaf: VISIT = 3;
pub type VISIT = ::std::os::raw::c_uint;
extern "C" {
    pub fn hcreate(arg1: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdestroy();
}
extern "C" {
    pub fn hsearch(arg1: ENTRY, arg2: ACTION) -> *mut ENTRY;
}
extern "C" {
    pub fn insque(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn remque(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn tdelete(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn twalk(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: VISIT,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
pub type sem_t = ::std::os::raw::c_int;
extern "C" {
    pub fn sem_close(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_destroy(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_getvalue(
        arg1: *mut sem_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_init(
        arg1: *mut sem_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> *mut sem_t;
}
extern "C" {
    pub fn sem_post(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_trywait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_wait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pselect$1050"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kevent {
    pub ident: usize,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: isize,
    pub udata: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kevent64_s {
    pub ident: u64,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: i64,
    pub udata: u64,
    pub ext: [u64; 2usize],
}
pub const eNoteReapDeprecated: _bindgen_ty_1 = 268435456;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const eNoteExitReparentedDeprecated: _bindgen_ty_2 = 524288;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist {
    pub slh_first: *mut knote,
}
extern "C" {
    pub fn kqueue() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent,
        nevents: ::std::os::raw::c_int,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent64(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent64_s,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent64_s,
        nevents: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgrp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ident {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct extern_proc {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1,
    pub p_un: extern_proc__bindgen_ty_1,
    pub p_vmspace: *mut vmspace,
    pub p_sigacts: *mut sigacts,
    pub p_flag: ::std::os::raw::c_int,
    pub p_stat: ::std::os::raw::c_char,
    pub p_pid: pid_t,
    pub p_oppid: pid_t,
    pub p_dupfd: ::std::os::raw::c_int,
    pub user_stack: caddr_t,
    pub exit_thread: *mut ::std::os::raw::c_void,
    pub p_debugger: ::std::os::raw::c_int,
    pub sigwait: boolean_t,
    pub p_estcpu: u_int,
    pub p_cpticks: ::std::os::raw::c_int,
    pub p_pctcpu: fixpt_t,
    pub p_wchan: *mut ::std::os::raw::c_void,
    pub p_wmesg: *mut ::std::os::raw::c_char,
    pub p_swtime: u_int,
    pub p_slptime: u_int,
    pub p_realtimer: itimerval,
    pub p_rtime: timeval,
    pub p_uticks: u_quad_t,
    pub p_sticks: u_quad_t,
    pub p_iticks: u_quad_t,
    pub p_traceflag: ::std::os::raw::c_int,
    pub p_tracep: *mut vnode,
    pub p_siglist: ::std::os::raw::c_int,
    pub p_textvp: *mut vnode,
    pub p_holdcnt: ::std::os::raw::c_int,
    pub p_sigmask: sigset_t,
    pub p_sigignore: sigset_t,
    pub p_sigcatch: sigset_t,
    pub p_priority: u_char,
    pub p_usrpri: u_char,
    pub p_nice: ::std::os::raw::c_char,
    pub p_comm: [::std::os::raw::c_char; 17usize],
    pub p_pgrp: *mut pgrp,
    pub p_addr: *mut user,
    pub p_xstat: u_short,
    pub p_acflag: u_short,
    pub p_ru: *mut rusage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union extern_proc__bindgen_ty_1 {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub p_st1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub __p_starttime: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extern_proc__bindgen_ty_1__bindgen_ty_1 {
    pub __p_forw: *mut proc_,
    pub __p_back: *mut proc_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct label {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pseminfo {
    pub psem_flags: ::std::os::raw::c_uint,
    pub psem_usecount: ::std::os::raw::c_uint,
    pub psem_mode: mode_t,
    pub psem_uid: uid_t,
    pub psem_gid: gid_t,
    pub psem_name: [::std::os::raw::c_char; 32usize],
    pub psem_semobject: *mut ::std::os::raw::c_void,
    pub psem_label: *mut label,
    pub psem_creator_pid: pid_t,
    pub psem_creator_uniqueid: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
    pub uid: uid_t,
    pub gid: gid_t,
    pub cuid: uid_t,
    pub cgid: gid_t,
    pub mode: mode_t,
    pub _seq: ::std::os::raw::c_ushort,
    pub _key: key_t,
}
extern "C" {
    pub fn ftok(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> key_t;
}
extern "C" {
    pub fn mlockall(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlockall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mprotect(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msync(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munmap(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mincore(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn minherit(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type msgqnum_t = ::std::os::raw::c_ulong;
pub type msglen_t = ::std::os::raw::c_ulong;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msqid_ds_new {
    pub msg_perm: ipc_perm,
    pub msg_first: __int32_t,
    pub msg_last: __int32_t,
    pub msg_cbytes: msglen_t,
    pub msg_qnum: msgqnum_t,
    pub msg_qbytes: msglen_t,
    pub msg_lspid: pid_t,
    pub msg_lrpid: pid_t,
    pub msg_stime: time_t,
    pub msg_pad1: __int32_t,
    pub msg_rtime: time_t,
    pub msg_pad2: __int32_t,
    pub msg_ctime: time_t,
    pub msg_pad3: __int32_t,
    pub msg_pad4: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg {
    pub msg_next: *mut msg,
    pub msg_type: ::std::os::raw::c_long,
    pub msg_ts: ::std::os::raw::c_ushort,
    pub msg_spot: ::std::os::raw::c_short,
    pub label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mymsg {
    pub mtype: ::std::os::raw::c_long,
    pub mtext: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msginfo {
    pub msgmax: ::std::os::raw::c_int,
    pub msgmni: ::std::os::raw::c_int,
    pub msgmnb: ::std::os::raw::c_int,
    pub msgtql: ::std::os::raw::c_int,
    pub msgssz: ::std::os::raw::c_int,
    pub msgseg: ::std::os::raw::c_int,
}
extern "C" {
    pub fn msgsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __msqid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgget(arg1: key_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgrcv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn msgsnd(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __semid_ds_new {
    pub sem_perm: ipc_perm,
    pub sem_base: __int32_t,
    pub sem_nsems: ::std::os::raw::c_ushort,
    pub sem_otime: time_t,
    pub sem_pad1: __int32_t,
    pub sem_ctime: time_t,
    pub sem_pad2: __int32_t,
    pub sem_pad3: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem {
    pub semval: ::std::os::raw::c_ushort,
    pub sempid: pid_t,
    pub semncnt: ::std::os::raw::c_ushort,
    pub semzcnt: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sembuf {
    pub sem_num: ::std::os::raw::c_ushort,
    pub sem_op: ::std::os::raw::c_short,
    pub sem_flg: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union semun {
    pub val: ::std::os::raw::c_int,
    pub buf: *mut __semid_ds_new,
    pub array: *mut ::std::os::raw::c_ushort,
}
pub type semun_t = semun;
extern "C" {
    pub fn semsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semget(
        arg1: key_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semop(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sembuf,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
pub type shmatt_t = ::std::os::raw::c_ushort;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __shmid_ds_new {
    pub shm_perm: ipc_perm,
    pub shm_segsz: usize,
    pub shm_lpid: pid_t,
    pub shm_cpid: pid_t,
    pub shm_nattch: shmatt_t,
    pub shm_atime: time_t,
    pub shm_dtime: time_t,
    pub shm_ctime: time_t,
    pub shm_internal: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn shmsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn shmctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __shmid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmdt(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmget(arg1: key_t, arg2: usize, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshminfo {
    pub pshm_flags: ::std::os::raw::c_uint,
    pub pshm_usecount: ::std::os::raw::c_uint,
    pub pshm_length: off_t,
    pub pshm_mode: mode_t,
    pub pshm_uid: uid_t,
    pub pshm_gid: gid_t,
    pub pshm_name: [::std::os::raw::c_char; 32usize],
    pub pshm_memobject: *mut ::std::os::raw::c_void,
    pub pshm_label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: fsblkcnt_t,
    pub f_bfree: fsblkcnt_t,
    pub f_bavail: fsblkcnt_t,
    pub f_files: fsfilcnt_t,
    pub f_ffree: fsfilcnt_t,
    pub f_favail: fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
}
extern "C" {
    pub fn fstatvfs(arg1: ::std::os::raw::c_int, arg2: *mut statvfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statvfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
extern "C" {
    pub fn times(arg1: *mut tms) -> clock_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
pub type fsobj_id_t = fsobj_id;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct secure_boot_cryptex_args {
    pub sbc_version: u_int32_t,
    pub sbc_4cc: u_int32_t,
    pub sbc_authentic_manifest_fd: ::std::os::raw::c_int,
    pub sbc_user_manifest_fd: ::std::os::raw::c_int,
    pub sbc_payload_fd: ::std::os::raw::c_int,
    pub sbc_flags: u_int64_t,
}
pub type secure_boot_cryptex_args_t = secure_boot_cryptex_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union graft_args {
    pub max_size: [u_int8_t; 512usize],
    pub sbc_args: secure_boot_cryptex_args_t,
}
pub type graftdmg_args_un = graft_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext64 {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext64,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext64: *mut __darwin_mcontext64,
}
pub type ucontext64_t = __darwin_ucontext64;
pub const uio_rw_UIO_READ: uio_rw = 0;
pub const uio_rw_UIO_WRITE: uio_rw = 1;
pub type uio_rw = ::std::os::raw::c_uint;
extern "C" {
    pub fn readv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_len: ::std::os::raw::c_uchar,
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utsname {
    pub sysname: [::std::os::raw::c_char; 256usize],
    pub nodename: [::std::os::raw::c_char; 256usize],
    pub release: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub machine: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn uname(arg1: *mut utsname) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn fgetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn setxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn removexattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fremovexattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listxattr(
        path: *const ::std::os::raw::c_char,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn flistxattr(
        fd: ::std::os::raw::c_int,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_syslog$DARWIN_EXTSN"]
    pub fn syslog(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn ulimit(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
extern "C" {
    pub fn utime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmpx {
    pub ut_user: [::std::os::raw::c_char; 256usize],
    pub ut_id: [::std::os::raw::c_char; 4usize],
    pub ut_line: [::std::os::raw::c_char; 32usize],
    pub ut_pid: pid_t,
    pub ut_type: ::std::os::raw::c_short,
    pub ut_tv: timeval,
    pub ut_host: [::std::os::raw::c_char; 256usize],
    pub ut_pad: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlogx {
    pub ll_tv: timeval,
    pub ll_line: [::std::os::raw::c_char; 32usize],
    pub ll_host: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn endutxent();
}
extern "C" {
    pub fn endutxent_wtmp();
}
extern "C" {
    pub fn getlastlogx(arg1: uid_t, arg2: *mut lastlogx) -> *mut lastlogx;
}
extern "C" {
    pub fn getlastlogxbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut lastlogx,
    ) -> *mut lastlogx;
}
extern "C" {
    pub fn getutmp(arg1: *const utmpx, arg2: *mut utmp);
}
extern "C" {
    pub fn getutmpx(arg1: *const utmp, arg2: *mut utmpx);
}
extern "C" {
    pub fn getutxent() -> *mut utmpx;
}
extern "C" {
    pub fn getutxent_wtmp() -> *mut utmpx;
}
extern "C" {
    pub fn getutxid(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn getutxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn pututxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn setutxent();
}
extern "C" {
    pub fn setutxent_wtmp(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn utmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wtmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wordexp_t {
    pub we_wordc: usize,
    pub we_wordv: *mut *mut ::std::os::raw::c_char,
    pub we_offs: usize,
}
extern "C" {
    pub fn wordexp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut wordexp_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wordfree(arg1: *mut wordexp_t);
}
pub type bpf_int32 = i32;
pub type bpf_u_int32 = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
    pub bf_len: u_int,
    pub bf_insns: *mut bpf_insn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_stat {
    pub bs_recv: u_int,
    pub bs_drop: u_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_version {
    pub bv_major: u_short,
    pub bv_minor: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_hdr {
    pub bh_tstamp: timeval32,
    pub bh_caplen: bpf_u_int32,
    pub bh_datalen: bpf_u_int32,
    pub bh_hdrlen: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
    pub code: u_short,
    pub jt: u_char,
    pub jf: u_char,
    pub k: bpf_u_int32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dltlist {
    pub __bindgen_anon_1: bpf_dltlist__bindgen_ty_1,
    pub bfl_len: u_int32_t,
    pub bfl_u: bpf_dltlist__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union bpf_dltlist__bindgen_ty_1 {
    pub bflu_list: *mut u_int32_t,
    pub bflu_pad: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_header {
    pub ether_dhost: [u_char; 6usize],
    pub ether_shost: [u_char; 6usize],
    pub ether_type: u_short,
}
pub type ether_header_t = ether_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_addr {
    pub octet: [u_char; 6usize],
}
pub type ether_addr_t = ether_addr;
extern "C" {
    pub fn ether_hostton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_line(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_ntoa(arg1: *const ether_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ether_aton(arg1: *const ::std::os::raw::c_char) -> *mut ether_addr;
}
extern "C" {
    pub fn ether_ntohost(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ether_addr,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arphdr {
    pub ar_hrd: u_short,
    pub ar_pro: u_short,
    pub ar_hln: u_char,
    pub ar_pln: u_char,
    pub ar_op: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arpreq {
    pub arp_pa: sockaddr,
    pub arp_ha: sockaddr,
    pub arp_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arpstat {
    pub txrequests: u32,
    pub txreplies: u32,
    pub txannounces: u32,
    pub rxrequests: u32,
    pub rxreplies: u32,
    pub received: u32,
    pub txconflicts: u32,
    pub invalidreqs: u32,
    pub reqnobufs: u32,
    pub dropped: u32,
    pub purged: u32,
    pub timeouts: u32,
    pub dupips: u32,
    pub inuse: u32,
    pub txurequests: u32,
    pub held: u32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct llc {
    pub __bindgen_anon_1: llc__bindgen_ty_1,
    pub llc_dsap: u_int8_t,
    pub llc_ssap: u_int8_t,
    pub llc_un: llc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union llc__bindgen_ty_1 {
    pub __bindgen_anon_1: llc__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: llc__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: llc__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: llc__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: llc__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: llc__bindgen_ty_1__bindgen_ty_6,
    pub type_u: llc__bindgen_ty_1__bindgen_ty_1,
    pub type_i: llc__bindgen_ty_1__bindgen_ty_2,
    pub type_s: llc__bindgen_ty_1__bindgen_ty_3,
    pub type_frmr: llc__bindgen_ty_1__bindgen_ty_4,
    pub type_snap: llc__bindgen_ty_1__bindgen_ty_5,
    pub type_raw: llc__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_1 {
    pub control: u_int8_t,
    pub format_id: u_int8_t,
    pub class_id: u_int8_t,
    pub window_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_2 {
    pub num_snd_x2: u_int8_t,
    pub num_rcv_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_3 {
    pub control: u_int8_t,
    pub num_rcv_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_4 {
    pub control: u_int8_t,
    pub frmr_rej_pdu0: u_int8_t,
    pub frmr_rej_pdu1: u_int8_t,
    pub frmr_control: u_int8_t,
    pub frmr_control_ext: u_int8_t,
    pub frmr_cause: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_5 {
    pub control: u_int8_t,
    pub org_code: [u_int8_t; 3usize],
    pub ether_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_6 {
    pub control: u_int8_t,
    pub control_ext: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct frmrinfo {
    pub frmr_rej_pdu0: u_int8_t,
    pub frmr_rej_pdu1: u_int8_t,
    pub frmr_control: u_int8_t,
    pub frmr_control_ext: u_int8_t,
    pub frmr_cause: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmedia_description {
    pub ifmt_word: ::std::os::raw::c_int,
    pub ifmt_string: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmibdata {
    pub ifmd_name: [::std::os::raw::c_char; 16usize],
    pub ifmd_pcount: ::std::os::raw::c_uint,
    pub ifmd_flags: ::std::os::raw::c_uint,
    pub ifmd_snd_len: ::std::os::raw::c_uint,
    pub ifmd_snd_maxlen: ::std::os::raw::c_uint,
    pub ifmd_snd_drops: ::std::os::raw::c_uint,
    pub ifmd_filler: [::std::os::raw::c_uint; 4usize],
    pub ifmd_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifs_iso_8802_3 {
    pub dot3StatsAlignmentErrors: u_int32_t,
    pub dot3StatsFCSErrors: u_int32_t,
    pub dot3StatsSingleCollisionFrames: u_int32_t,
    pub dot3StatsMultipleCollisionFrames: u_int32_t,
    pub dot3StatsSQETestErrors: u_int32_t,
    pub dot3StatsDeferredTransmissions: u_int32_t,
    pub dot3StatsLateCollisions: u_int32_t,
    pub dot3StatsExcessiveCollisions: u_int32_t,
    pub dot3StatsInternalMacTransmitErrors: u_int32_t,
    pub dot3StatsCarrierSenseErrors: u_int32_t,
    pub dot3StatsFrameTooLongs: u_int32_t,
    pub dot3StatsInternalMacReceiveErrors: u_int32_t,
    pub dot3StatsEtherChipSet: u_int32_t,
    pub dot3StatsMissedFrames: u_int32_t,
    pub dot3StatsCollFrequencies: [u_int32_t; 16usize],
    pub dot3Compliance: u_int32_t,
}
pub const dot3Vendors_dot3VendorAMD: dot3Vendors = 1;
pub const dot3Vendors_dot3VendorIntel: dot3Vendors = 2;
pub const dot3Vendors_dot3VendorNational: dot3Vendors = 4;
pub const dot3Vendors_dot3VendorFujitsu: dot3Vendors = 5;
pub const dot3Vendors_dot3VendorDigital: dot3Vendors = 6;
pub const dot3Vendors_dot3VendorWesternDigital: dot3Vendors = 7;
pub type dot3Vendors = ::std::os::raw::c_uint;
pub const dot3ChipSetAMD7990: _bindgen_ty_3 = 1;
pub const dot3ChipSetAMD79900: _bindgen_ty_3 = 2;
pub const dot3ChipSetAMD79C940: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const dot3ChipSetIntel82586: _bindgen_ty_4 = 1;
pub const dot3ChipSetIntel82596: _bindgen_ty_4 = 2;
pub const dot3ChipSetIntel82557: _bindgen_ty_4 = 3;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const dot3ChipSetNational8390: _bindgen_ty_5 = 1;
pub const dot3ChipSetNationalSonic: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const dot3ChipSetFujitsu86950: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const dot3ChipSetDigitalDC21040: _bindgen_ty_7 = 1;
pub const dot3ChipSetDigitalDC21140: _bindgen_ty_7 = 2;
pub const dot3ChipSetDigitalDC21041: _bindgen_ty_7 = 3;
pub const dot3ChipSetDigitalDC21140A: _bindgen_ty_7 = 4;
pub const dot3ChipSetDigitalDC21142: _bindgen_ty_7 = 5;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const dot3ChipSetWesternDigital83C690: _bindgen_ty_8 = 1;
pub const dot3ChipSetWesternDigital83C790: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_family_id {
    pub iffmid_len: u_int32_t,
    pub iffmid_id: u_int32_t,
    pub iffmid_str: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utun_stats_param {
    pub utsp_packets: u_int64_t,
    pub utsp_bytes: u_int64_t,
    pub utsp_errors: u_int64_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_cellular_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_min_queue_size: u_int32_t,
    pub ul_avg_queue_size: u_int32_t,
    pub ul_max_queue_size: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub config_inactivity_time: u_int32_t,
    pub config_backoff_time: u_int32_t,
    pub mss_recommended: u_int16_t,
    pub reserved_1: u_int16_t,
    pub reserved_2: u_int32_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
    pub reserved_5: u_int64_t,
    pub reserved_6: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_cellular_status {
    pub if_cell_u: if_cellular_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_cellular_status__bindgen_ty_1 {
    pub if_status_v1: if_cellular_status_v1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_wifi_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_error_rate: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub dl_min_latency: u_int32_t,
    pub dl_effective_latency: u_int32_t,
    pub dl_max_latency: u_int32_t,
    pub dl_error_rate: u_int32_t,
    pub config_frequency: u_int32_t,
    pub config_multicast_rate: u_int32_t,
    pub scan_count: u_int32_t,
    pub scan_duration: u_int32_t,
    pub reserved_1: u_int64_t,
    pub reserved_2: u_int64_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_wifi_status {
    pub if_wifi_u: if_wifi_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_wifi_status__bindgen_ty_1 {
    pub if_status_v1: if_wifi_status_v1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_link_status {
    pub __bindgen_anon_1: if_link_status__bindgen_ty_1,
    pub ifsr_version: u_int32_t,
    pub ifsr_len: u_int32_t,
    pub ifsr_u: if_link_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_link_status__bindgen_ty_1 {
    pub ifsr_cell: if_cellular_status,
    pub ifsr_wifi: if_wifi_status,
}
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_1:
    ifnet_interface_advisory_version = 1;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_2:
    ifnet_interface_advisory_version = 2;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_CURRENT:
    ifnet_interface_advisory_version = 2;
pub type ifnet_interface_advisory_version = u8;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_TX:
    ifnet_interface_advisory_direction = 1;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_RX:
    ifnet_interface_advisory_direction = 2;
pub type ifnet_interface_advisory_direction = u8;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_WIFI:
    ifnet_interface_advisory_interface_type = 1;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_CELL:
    ifnet_interface_advisory_interface_type = 2;
pub type ifnet_interface_advisory_interface_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_header {
    pub version: ifnet_interface_advisory_version,
    pub direction: ifnet_interface_advisory_direction,
    pub interface_type: ifnet_interface_advisory_interface_type,
    pub reserved: u8,
}
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_UP:
    ifnet_interface_advisory_rate_trend = 2147483647;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_DOWN:
    ifnet_interface_advisory_rate_trend = -2147483648;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_NEUTRAL:
    ifnet_interface_advisory_rate_trend = 0;
pub type ifnet_interface_advisory_rate_trend = i32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_capacity {
    pub rate_trend_suggestion: ifnet_interface_advisory_rate_trend,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
}
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_NOT_AVAIL:
    ifnet_interface_advisory_wifi_freq_band = 0;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_24GHZ:
    ifnet_interface_advisory_wifi_freq_band = 1;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_5GHZ:
    ifnet_interface_advisory_wifi_freq_band = 2;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_6GHZ:
    ifnet_interface_advisory_wifi_freq_band = 3;
pub type ifnet_interface_advisory_wifi_freq_band = u8;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_wifi_context {
    pub frequency_band: ifnet_interface_advisory_wifi_freq_band,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
    pub radio_coex: u8,
    pub wlan_duty_cycle: u16,
    pub wifi_observed_tx_bitrate: [u32; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_cell_context {
    pub radio_access_technology: u8,
    pub reference_signal_level: i16,
    pub signal_level: i16,
    pub signal_quality: i8,
    pub uplink_bler: u8,
    pub downlink_bler: u8,
    pub bandwidth_limitation_indication: u8,
    pub cdrx_state: u8,
    pub cdrx_cycle: u16,
    pub estimated_outage_period: u16,
    pub outage_state: u8,
    pub __pad: u8,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1 {
    pub version: u8,
    pub direction: u8,
    pub _reserved: u16,
    pub rate_trend_suggestion: i32,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
    pub frequency_band: u8,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub header: ifnet_interface_advisory_header,
    pub capacity: ifnet_interface_advisory_capacity,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub wifi_context: ifnet_interface_advisory_wifi_context,
    pub cell_context: ifnet_interface_advisory_cell_context,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_descriptor_common {
    pub itd_type: u8,
    pub _reserved: u8,
    pub itd_len: u16,
    pub itd_flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_ip_addr {
    pub __bindgen_anon_1: ifnet_ip_addr__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union ifnet_ip_addr__bindgen_ty_1 {
    pub addr8: [u8; 16usize],
    pub addr16: [u16; 8usize],
    pub addr32: [u32; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ifnet_traffic_descriptor_inet {
    pub inet_common: ifnet_traffic_descriptor_common,
    pub inet_mask: u8,
    pub inet_ipver: u8,
    pub inet_proto: u8,
    pub _reserved: u8,
    pub inet_laddr: ifnet_ip_addr,
    pub inet_raddr: ifnet_ip_addr,
    pub inet_lport: u16,
    pub inet_rport: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action {
    pub ra_type: u8,
    pub _reserved: u8,
    pub ra_len: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action_steer {
    pub ras_common: ifnet_traffic_rule_action,
    pub ras_qset_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_nke {
    pub nke_handle: ::std::os::raw::c_uint,
    pub nke_where: ::std::os::raw::c_uint,
    pub nke_flags: ::std::os::raw::c_int,
    pub reserved: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ndrv {
    pub snd_len: ::std::os::raw::c_uchar,
    pub snd_family: ::std::os::raw::c_uchar,
    pub snd_name: [::std::os::raw::c_uchar; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ndrv_demux_desc {
    pub __bindgen_anon_1: ndrv_demux_desc__bindgen_ty_1,
    pub type_: u_int16_t,
    pub length: u_int16_t,
    pub data: ndrv_demux_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ndrv_demux_desc__bindgen_ty_1 {
    pub ether_type: u_int16_t,
    pub sap: [u_int8_t; 3usize],
    pub snap: [u_int8_t; 5usize],
    pub other: [u_int8_t; 28usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndrv_protocol_desc {
    pub version: u_int32_t,
    pub protocol_family: u_int32_t,
    pub demux_count: u_int32_t,
    pub demux_list: *mut ndrv_demux_desc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_msg {
    pub sadb_msg_version: u_int8_t,
    pub sadb_msg_type: u_int8_t,
    pub sadb_msg_errno: u_int8_t,
    pub sadb_msg_satype: u_int8_t,
    pub sadb_msg_len: u_int16_t,
    pub sadb_msg_reserved: u_int16_t,
    pub sadb_msg_seq: u_int32_t,
    pub sadb_msg_pid: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ext {
    pub sadb_ext_len: u_int16_t,
    pub sadb_ext_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sa {
    pub sadb_sa_len: u_int16_t,
    pub sadb_sa_exttype: u_int16_t,
    pub sadb_sa_spi: u_int32_t,
    pub sadb_sa_replay: u_int8_t,
    pub sadb_sa_state: u_int8_t,
    pub sadb_sa_auth: u_int8_t,
    pub sadb_sa_encrypt: u_int8_t,
    pub sadb_sa_flags: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_lifetime {
    pub sadb_lifetime_len: u_int16_t,
    pub sadb_lifetime_exttype: u_int16_t,
    pub sadb_lifetime_allocations: u_int32_t,
    pub sadb_lifetime_bytes: u_int64_t,
    pub sadb_lifetime_addtime: u_int64_t,
    pub sadb_lifetime_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_address {
    pub sadb_address_len: u_int16_t,
    pub sadb_address_exttype: u_int16_t,
    pub sadb_address_proto: u_int8_t,
    pub sadb_address_prefixlen: u_int8_t,
    pub sadb_address_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_key {
    pub sadb_key_len: u_int16_t,
    pub sadb_key_exttype: u_int16_t,
    pub sadb_key_bits: u_int16_t,
    pub sadb_key_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ident {
    pub sadb_ident_len: u_int16_t,
    pub sadb_ident_exttype: u_int16_t,
    pub sadb_ident_type: u_int16_t,
    pub sadb_ident_reserved: u_int16_t,
    pub sadb_ident_id: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sens {
    pub sadb_sens_len: u_int16_t,
    pub sadb_sens_exttype: u_int16_t,
    pub sadb_sens_dpd: u_int32_t,
    pub sadb_sens_sens_level: u_int8_t,
    pub sadb_sens_sens_len: u_int8_t,
    pub sadb_sens_integ_level: u_int8_t,
    pub sadb_sens_integ_len: u_int8_t,
    pub sadb_sens_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_prop {
    pub sadb_prop_len: u_int16_t,
    pub sadb_prop_exttype: u_int16_t,
    pub sadb_prop_replay: u_int8_t,
    pub sadb_prop_reserved: [u_int8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_comb {
    pub sadb_comb_auth: u_int8_t,
    pub sadb_comb_encrypt: u_int8_t,
    pub sadb_comb_flags: u_int16_t,
    pub sadb_comb_auth_minbits: u_int16_t,
    pub sadb_comb_auth_maxbits: u_int16_t,
    pub sadb_comb_encrypt_minbits: u_int16_t,
    pub sadb_comb_encrypt_maxbits: u_int16_t,
    pub sadb_comb_reserved: u_int32_t,
    pub sadb_comb_soft_allocations: u_int32_t,
    pub sadb_comb_hard_allocations: u_int32_t,
    pub sadb_comb_soft_bytes: u_int64_t,
    pub sadb_comb_hard_bytes: u_int64_t,
    pub sadb_comb_soft_addtime: u_int64_t,
    pub sadb_comb_hard_addtime: u_int64_t,
    pub sadb_comb_soft_usetime: u_int64_t,
    pub sadb_comb_hard_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_supported {
    pub sadb_supported_len: u_int16_t,
    pub sadb_supported_exttype: u_int16_t,
    pub sadb_supported_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_alg {
    pub sadb_alg_id: u_int8_t,
    pub sadb_alg_ivlen: u_int8_t,
    pub sadb_alg_minbits: u_int16_t,
    pub sadb_alg_maxbits: u_int16_t,
    pub sadb_alg_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_spirange {
    pub sadb_spirange_len: u_int16_t,
    pub sadb_spirange_exttype: u_int16_t,
    pub sadb_spirange_min: u_int32_t,
    pub sadb_spirange_max: u_int32_t,
    pub sadb_spirange_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_kmprivate {
    pub sadb_x_kmprivate_len: u_int16_t,
    pub sadb_x_kmprivate_exttype: u_int16_t,
    pub sadb_x_kmprivate_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sadb_x_sa2 {
    pub __bindgen_anon_1: sadb_x_sa2__bindgen_ty_1,
    pub __bindgen_anon_2: sadb_x_sa2__bindgen_ty_2,
    pub sadb_x_sa2_len: u_int16_t,
    pub sadb_x_sa2_exttype: u_int16_t,
    pub sadb_x_sa2_mode: u_int8_t,
    pub sadb_x_sa2_sequence: u_int32_t,
    pub sadb_x_sa2_reqid: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_1 {
    pub sadb_x_sa2_reserved1: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_2 {
    pub sadb_x_sa2_reserved2: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_policy {
    pub sadb_x_policy_len: u_int16_t,
    pub sadb_x_policy_exttype: u_int16_t,
    pub sadb_x_policy_type: u_int16_t,
    pub sadb_x_policy_dir: u_int8_t,
    pub sadb_x_policy_reserved: u_int8_t,
    pub sadb_x_policy_id: u_int32_t,
    pub sadb_x_policy_reserved2: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_ipsecrequest {
    pub sadb_x_ipsecrequest_len: u_int16_t,
    pub sadb_x_ipsecrequest_proto: u_int16_t,
    pub sadb_x_ipsecrequest_mode: u_int8_t,
    pub sadb_x_ipsecrequest_level: u_int8_t,
    pub sadb_x_ipsecrequest_reqid: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_session_id {
    pub sadb_session_id_len: u_int16_t,
    pub sadb_session_id_exttype: u_int16_t,
    pub sadb_session_id_v: [u_int64_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sastat {
    pub spi: u_int32_t,
    pub created: u_int32_t,
    pub lft_c: sadb_lifetime,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sastat {
    pub sadb_sastat_len: u_int16_t,
    pub sadb_sastat_exttype: u_int16_t,
    pub sadb_sastat_dir: u_int32_t,
    pub sadb_sastat_reserved: u_int32_t,
    pub sadb_sastat_list_len: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_metrics {
    pub rmx_locks: u_int32_t,
    pub rmx_mtu: u_int32_t,
    pub rmx_hopcount: u_int32_t,
    pub rmx_expire: i32,
    pub rmx_recvpipe: u_int32_t,
    pub rmx_sendpipe: u_int32_t,
    pub rmx_ssthresh: u_int32_t,
    pub rmx_rtt: u_int32_t,
    pub rmx_rttvar: u_int32_t,
    pub rmx_pksent: u_int32_t,
    pub rmx_state: u_int32_t,
    pub rmx_filler: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtstat {
    pub rts_badredirect: ::std::os::raw::c_short,
    pub rts_dynamic: ::std::os::raw::c_short,
    pub rts_newgateway: ::std::os::raw::c_short,
    pub rts_unreach: ::std::os::raw::c_short,
    pub rts_wildcard: ::std::os::raw::c_short,
    pub rts_badrtgwroute: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_pid: pid_t,
    pub rtm_seq: ::std::os::raw::c_int,
    pub rtm_errno: ::std::os::raw::c_int,
    pub rtm_use: ::std::os::raw::c_int,
    pub rtm_inits: u_int32_t,
    pub rtm_rmx: rt_metrics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr2 {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_refcnt: i32,
    pub rtm_parentflags: ::std::os::raw::c_int,
    pub rtm_reserved: ::std::os::raw::c_int,
    pub rtm_use: ::std::os::raw::c_int,
    pub rtm_inits: u_int32_t,
    pub rtm_rmx: rt_metrics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_addrinfo {
    pub rti_addrs: ::std::os::raw::c_int,
    pub rti_info: [*mut sockaddr; 8usize],
}
pub type n_short = __uint16_t;
pub type n_long = __uint32_t;
pub type n_time = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ip_tos: u_char,
    pub ip_len: u_short,
    pub ip_id: u_short,
    pub ip_off: u_short,
    pub ip_ttl: u_char,
    pub ip_p: u_char,
    pub ip_sum: u_short,
    pub ip_src: in_addr,
    pub ip_dst: in_addr,
}
impl ip {
    #[inline]
    pub fn ip_hl(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_hl(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_v(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_v(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ip_hl: u_int, ip_v: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ip_hl: u32 = unsafe { ::std::mem::transmute(ip_hl) };
            ip_hl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ip_v: u32 = unsafe { ::std::mem::transmute(ip_v) };
            ip_v as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_timestamp {
    pub ipt_code: u_char,
    pub ipt_len: u_char,
    pub ipt_ptr: u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ipt_timestamp: ip_timestamp_ipt_timestamp,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip_timestamp_ipt_timestamp {
    pub ipt_time: [n_long; 1usize],
    pub ipt_ta: [ip_timestamp_ipt_timestamp_ipt_ta; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_timestamp_ipt_timestamp_ipt_ta {
    pub ipt_addr: in_addr,
    pub ipt_time: n_long,
}
impl ip_timestamp {
    #[inline]
    pub fn ipt_flg(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_flg(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ipt_oflw(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_oflw(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ipt_flg: u_int, ipt_oflw: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ipt_flg: u32 = unsafe { ::std::mem::transmute(ipt_flg) };
            ipt_flg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ipt_oflw: u32 = unsafe { ::std::mem::transmute(ipt_oflw) };
            ipt_oflw as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udphdr {
    pub uh_sport: u_short,
    pub uh_dport: u_short,
    pub uh_ulen: u_short,
    pub uh_sum: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bootp {
    pub bp_op: u_char,
    pub bp_htype: u_char,
    pub bp_hlen: u_char,
    pub bp_hops: u_char,
    pub bp_xid: u_int32_t,
    pub bp_secs: u_short,
    pub bp_unused: u_short,
    pub bp_ciaddr: in_addr,
    pub bp_yiaddr: in_addr,
    pub bp_siaddr: in_addr,
    pub bp_giaddr: in_addr,
    pub bp_chaddr: [u_char; 16usize],
    pub bp_sname: [u_char; 64usize],
    pub bp_file: [u_char; 128usize],
    pub bp_vend: [u_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vend {
    pub v_magic: [u_char; 4usize],
    pub v_flags: u_int32_t,
    pub v_unused: [u_char; 56usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nextvend {
    pub __bindgen_anon_1: nextvend__bindgen_ty_1,
    pub nv_magic: [u_char; 4usize],
    pub nv_version: u_char,
    pub nv_U: nextvend__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nextvend__bindgen_ty_1 {
    pub __bindgen_anon_1: nextvend__bindgen_ty_1__bindgen_ty_1,
    pub NV0: [u_char; 58usize],
    pub NV1: nextvend__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nextvend__bindgen_ty_1__bindgen_ty_1 {
    pub NV1_opcode: u_char,
    pub NV1_xid: u_char,
    pub NV1_text: [u_char; 55usize],
    pub NV1_null: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bootp_packet {
    pub bp_ip: ip,
    pub bp_udp: udphdr,
    pub bp_bootp: bootp,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_hdr {
    pub __bindgen_anon_1: icmp6_hdr__bindgen_ty_1,
    pub icmp6_type: u_int8_t,
    pub icmp6_code: u_int8_t,
    pub icmp6_cksum: u_int16_t,
    pub icmp6_dataun: icmp6_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp6_hdr__bindgen_ty_1 {
    pub icmp6_un_data32: [u_int32_t; 1usize],
    pub icmp6_un_data16: [u_int16_t; 2usize],
    pub icmp6_un_data8: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mld_hdr {
    pub mld_icmp6_hdr: icmp6_hdr,
    pub mld_addr: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_solicit {
    pub nd_rs_hdr: icmp6_hdr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_advert {
    pub nd_ra_hdr: icmp6_hdr,
    pub nd_ra_reachable: u_int32_t,
    pub nd_ra_retransmit: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_solicit {
    pub nd_ns_hdr: icmp6_hdr,
    pub nd_ns_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_advert {
    pub nd_na_hdr: icmp6_hdr,
    pub nd_na_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_redirect {
    pub nd_rd_hdr: icmp6_hdr,
    pub nd_rd_target: in6_addr,
    pub nd_rd_dst: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_hdr {
    pub nd_opt_type: u_int8_t,
    pub nd_opt_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_prefix_info {
    pub nd_opt_pi_type: u_int8_t,
    pub nd_opt_pi_len: u_int8_t,
    pub nd_opt_pi_prefix_len: u_int8_t,
    pub nd_opt_pi_flags_reserved: u_int8_t,
    pub nd_opt_pi_valid_time: u_int32_t,
    pub nd_opt_pi_preferred_time: u_int32_t,
    pub nd_opt_pi_reserved2: u_int32_t,
    pub nd_opt_pi_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_nonce {
    pub nd_opt_nonce_type: u_int8_t,
    pub nd_opt_nonce_len: u_int8_t,
    pub nd_opt_nonce: [u_int8_t; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_rd_hdr {
    pub nd_opt_rh_type: u_int8_t,
    pub nd_opt_rh_len: u_int8_t,
    pub nd_opt_rh_reserved1: u_int16_t,
    pub nd_opt_rh_reserved2: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_mtu {
    pub nd_opt_mtu_type: u_int8_t,
    pub nd_opt_mtu_len: u_int8_t,
    pub nd_opt_mtu_reserved: u_int16_t,
    pub nd_opt_mtu_mtu: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_route_info {
    pub nd_opt_rti_type: u_int8_t,
    pub nd_opt_rti_len: u_int8_t,
    pub nd_opt_rti_prefixlen: u_int8_t,
    pub nd_opt_rti_flags: u_int8_t,
    pub nd_opt_rti_lifetime: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_rdnss {
    pub nd_opt_rdnss_type: u_int8_t,
    pub nd_opt_rdnss_len: u_int8_t,
    pub nd_opt_rdnss_reserved: u_int16_t,
    pub nd_opt_rdnss_lifetime: u_int32_t,
    pub nd_opt_rdnss_addr: [in6_addr; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_dnssl {
    pub nd_opt_dnssl_type: u_int8_t,
    pub nd_opt_dnssl_len: u_int8_t,
    pub nd_opt_dnssl_reserved: u_int16_t,
    pub nd_opt_dnssl_lifetime: u_int32_t,
    pub nd_opt_dnssl_domains: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_pref64 {
    pub nd_opt_pref64_type: u_int8_t,
    pub nd_opt_pref64_len: u_int8_t,
    pub nd_opt_pref64_scaled_lifetime_plc: u_int16_t,
    pub nd_opt_pref64_prefix: [u_int32_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_namelookup {
    pub icmp6_nl_hdr: icmp6_hdr,
    pub icmp6_nl_nonce: [u_int8_t; 8usize],
    pub icmp6_nl_ttl: i32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_nodeinfo {
    pub icmp6_ni_hdr: icmp6_hdr,
    pub icmp6_ni_nonce: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ni_reply_fqdn {
    pub ni_fqdn_ttl: u_int32_t,
    pub ni_fqdn_namelen: u_int8_t,
    pub ni_fqdn_name: [u_int8_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_router_renum {
    pub rr_hdr: icmp6_hdr,
    pub rr_segnum: u_int8_t,
    pub rr_flags: u_int8_t,
    pub rr_maxdelay: u_int16_t,
    pub rr_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_match {
    pub rpm_code: u_int8_t,
    pub rpm_len: u_int8_t,
    pub rpm_ordinal: u_int8_t,
    pub rpm_matchlen: u_int8_t,
    pub rpm_minlen: u_int8_t,
    pub rpm_maxlen: u_int8_t,
    pub rpm_reserved: u_int16_t,
    pub rpm_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_use {
    pub rpu_uselen: u_int8_t,
    pub rpu_keeplen: u_int8_t,
    pub rpu_ramask: u_int8_t,
    pub rpu_raflags: u_int8_t,
    pub rpu_vltime: u_int32_t,
    pub rpu_pltime: u_int32_t,
    pub rpu_flags: u_int32_t,
    pub rpu_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_result {
    pub rrr_flags: u_int16_t,
    pub rrr_ordinal: u_int8_t,
    pub rrr_matchedlen: u_int8_t,
    pub rrr_ifid: u_int32_t,
    pub rrr_prefix: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_filter {
    pub icmp6_filt: [u_int32_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6errstat {
    pub icp6errs_dst_unreach_noroute: u_quad_t,
    pub icp6errs_dst_unreach_admin: u_quad_t,
    pub icp6errs_dst_unreach_beyondscope: u_quad_t,
    pub icp6errs_dst_unreach_addr: u_quad_t,
    pub icp6errs_dst_unreach_noport: u_quad_t,
    pub icp6errs_packet_too_big: u_quad_t,
    pub icp6errs_time_exceed_transit: u_quad_t,
    pub icp6errs_time_exceed_reassembly: u_quad_t,
    pub icp6errs_paramprob_header: u_quad_t,
    pub icp6errs_paramprob_nextheader: u_quad_t,
    pub icp6errs_paramprob_option: u_quad_t,
    pub icp6errs_redirect: u_quad_t,
    pub icp6errs_unknown: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6stat {
    pub icp6s_error: u_quad_t,
    pub icp6s_canterror: u_quad_t,
    pub icp6s_toofreq: u_quad_t,
    pub icp6s_outhist: [u_quad_t; 256usize],
    pub icp6s_badcode: u_quad_t,
    pub icp6s_tooshort: u_quad_t,
    pub icp6s_checksum: u_quad_t,
    pub icp6s_badlen: u_quad_t,
    pub icp6s_reflect: u_quad_t,
    pub icp6s_inhist: [u_quad_t; 256usize],
    pub icp6s_nd_toomanyopt: u_quad_t,
    pub icp6s_outerrhist: icmp6errstat,
    pub icp6s_pmtuchg: u_quad_t,
    pub icp6s_nd_badopt: u_quad_t,
    pub icp6s_badns: u_quad_t,
    pub icp6s_badna: u_quad_t,
    pub icp6s_badrs: u_quad_t,
    pub icp6s_badra: u_quad_t,
    pub icp6s_badredirect: u_quad_t,
    pub icp6s_rfc6980_drop: u_quad_t,
    pub icp6s_badpkttoobig: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp_ra_addr {
    pub ira_addr: u_int32_t,
    pub ira_preference: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct icmp {
    pub __bindgen_anon_1: icmp__bindgen_ty_1,
    pub __bindgen_anon_2: icmp__bindgen_ty_2,
    pub icmp_type: u_char,
    pub icmp_code: u_char,
    pub icmp_cksum: u_short,
    pub icmp_hun: icmp__bindgen_ty_1,
    pub icmp_dun: icmp__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_1 {
    pub ih_pptr: u_char,
    pub ih_gwaddr: in_addr,
    pub ih_idseq: icmp__bindgen_ty_1_ih_idseq,
    pub ih_void: ::std::os::raw::c_int,
    pub ih_pmtu: icmp__bindgen_ty_1_ih_pmtu,
    pub ih_rtradv: icmp__bindgen_ty_1_ih_rtradv,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_idseq {
    pub icd_id: n_short,
    pub icd_seq: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_pmtu {
    pub ipm_void: n_short,
    pub ipm_nextmtu: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_rtradv {
    pub irt_num_addrs: u_char,
    pub irt_wpa: u_char,
    pub irt_lifetime: u_int16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_2 {
    pub id_ts: icmp__bindgen_ty_2_id_ts,
    pub id_ip: icmp__bindgen_ty_2_id_ip,
    pub id_radv: icmp_ra_addr,
    pub id_mask: u_int32_t,
    pub id_data: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ts {
    pub its_otime: n_time,
    pub its_rtime: n_time,
    pub its_ttime: n_time,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ip {
    pub idi_ip: ip,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmpstat {
    pub icps_error: u_int32_t,
    pub icps_oldshort: u_int32_t,
    pub icps_oldicmp: u_int32_t,
    pub icps_outhist: [u_int32_t; 41usize],
    pub icps_badcode: u_int32_t,
    pub icps_tooshort: u_int32_t,
    pub icps_checksum: u_int32_t,
    pub icps_badlen: u_int32_t,
    pub icps_reflect: u_int32_t,
    pub icps_inhist: [u_int32_t; 41usize],
    pub icps_bmcastecho: u_int32_t,
    pub icps_bmcasttstamp: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_arp {
    pub ea_hdr: arphdr,
    pub arp_sha: [u_char; 6usize],
    pub arp_spa: [u_char; 4usize],
    pub arp_tha: [u_char; 6usize],
    pub arp_tpa: [u_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_inarp {
    pub sin_len: u_char,
    pub sin_family: u_char,
    pub sin_port: u_short,
    pub sin_addr: in_addr,
    pub sin_srcaddr: in_addr,
    pub sin_tos: u_short,
    pub sin_other: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp {
    pub igmp_type: u_char,
    pub igmp_code: u_char,
    pub igmp_cksum: u_short,
    pub igmp_group: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpv3 {
    pub igmp_type: u_char,
    pub igmp_code: u_char,
    pub igmp_cksum: u_short,
    pub igmp_group: in_addr,
    pub igmp_misc: u_char,
    pub igmp_qqi: u_char,
    pub igmp_numsrc: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp_grouprec {
    pub ig_type: u_char,
    pub ig_datalen: u_char,
    pub ig_numsrc: u_short,
    pub ig_group: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp_report {
    pub ir_type: u_char,
    pub ir_rsv1: u_char,
    pub ir_cksum: u_short,
    pub ir_rsv2: u_short,
    pub ir_numgrps: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpstat_v3 {
    pub igps_version: u32,
    pub igps_len: u32,
    pub igps_rcv_total: u64,
    pub igps_rcv_tooshort: u64,
    pub igps_rcv_badttl: u64,
    pub igps_rcv_badsum: u64,
    pub igps_rcv_v1v2_queries: u64,
    pub igps_rcv_v3_queries: u64,
    pub igps_rcv_badqueries: u64,
    pub igps_rcv_gen_queries: u64,
    pub igps_rcv_group_queries: u64,
    pub igps_rcv_gsr_queries: u64,
    pub igps_drop_gsr_queries: u64,
    pub igps_rcv_reports: u64,
    pub igps_rcv_badreports: u64,
    pub igps_rcv_ourreports: u64,
    pub igps_rcv_nora: u64,
    pub igps_snd_reports: u64,
    pub __igps_pad: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpstat {
    pub igps_rcv_total: u_int,
    pub igps_rcv_tooshort: u_int,
    pub igps_rcv_badsum: u_int,
    pub igps_rcv_queries: u_int,
    pub igps_rcv_badqueries: u_int,
    pub igps_rcv_reports: u_int,
    pub igps_rcv_badreports: u_int,
    pub igps_rcv_ourreports: u_int,
    pub igps_snd_reports: u_int,
}
pub type so_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsockbuf {
    pub sb_cc: u_int32_t,
    pub sb_hiwat: u_int32_t,
    pub sb_mbcnt: u_int32_t,
    pub sb_mbmax: u_int32_t,
    pub sb_lowat: i32,
    pub sb_flags: ::std::os::raw::c_short,
    pub sb_timeo: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsocket {
    pub xso_len: u_int32_t,
    pub xso_so: u_int32_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int32_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xsocket64 {
    pub xso_len: u_int32_t,
    pub xso_so: u_int64_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int64_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
pub const so_tracker_action_SO_TRACKER_ACTION_INVALID: so_tracker_action = 0;
pub const so_tracker_action_SO_TRACKER_ACTION_ADD: so_tracker_action = 1;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_BY_APP: so_tracker_action = 2;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_ALL: so_tracker_action = 3;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_MAX: so_tracker_action = 4;
pub type so_tracker_action = ::std::os::raw::c_uint;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_INVALID: so_tracker_attribute = 0;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS_FAMILY: so_tracker_attribute = 1;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS: so_tracker_attribute = 2;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_APP_UUID: so_tracker_attribute = 3;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN: so_tracker_attribute = 4;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN_OWNER: so_tracker_attribute = 5;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_FLAGS: so_tracker_attribute = 6;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DUMP_ENTRY: so_tracker_attribute = 7;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MEMORY_USED: so_tracker_attribute = 8;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MAX: so_tracker_attribute = 9;
pub type so_tracker_attribute = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracker_action(
        action: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
    ) -> ::std::os::raw::c_int;
}
pub type inp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr_4in6 {
    pub ia46_pad32: [u_int32_t; 3usize],
    pub ia46_addr4: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _inpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbport {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_pktopts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_moptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbpolicy {
    _unused: [u8; 0],
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct inpcb {
    pub __bindgen_anon_1: inpcb__bindgen_ty_1,
    pub __bindgen_anon_2: inpcb__bindgen_ty_2,
    pub __bindgen_anon_3: inpcb__bindgen_ty_3,
    pub __bindgen_anon_4: inpcb__bindgen_ty_4,
    pub __bindgen_anon_5: inpcb__bindgen_ty_5,
    pub inp_hash: _inpcb_list_entry,
    pub reserved1: in_addr,
    pub reserved2: in_addr,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: _inpcb_list_entry,
    pub inp_ppcb: u_int32_t,
    pub inp_pcbinfo: u_int32_t,
    pub inp_socket: u_int32_t,
    pub nat_owner: u_char,
    pub nat_cookie: u_int32_t,
    pub inp_portlist: _inpcb_list_entry,
    pub inp_phd: u_int32_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: inpcb__bindgen_ty_1,
    pub inp_dependladdr: inpcb__bindgen_ty_2,
    pub inp_dependroute: inpcb__bindgen_ty_3,
    pub inp_depend4: inpcb__bindgen_ty_4,
    pub inp_depend6: inpcb__bindgen_ty_5,
    pub hash_element: ::std::os::raw::c_int,
    pub inp_saved_ppcb: u_int32_t,
    pub inp_sp: u_int32_t,
    pub reserved: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_3 {
    pub inp4_route: [u_char; 20usize],
    pub inp6_route: [u_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_4 {
    pub inp4_ip_tos: u_char,
    pub inp4_options: u_int32_t,
    pub inp4_moptions: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_5 {
    pub inp6_options: u_int32_t,
    pub inp6_hlim: u_int8_t,
    pub unused_uint8_1: u_int8_t,
    pub unused_uint16_1: ushort,
    pub inp6_outputopts: u_int32_t,
    pub inp6_moptions: u_int32_t,
    pub inp6_icmp6filt: u_int32_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb {
    pub xi_len: u_int32_t,
    pub xi_inp: inpcb,
    pub xi_socket: xsocket,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct inpcb64_list_entry {
    pub le_next: u_int64_t,
    pub le_prev: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb64 {
    pub __bindgen_anon_1: xinpcb64__bindgen_ty_1,
    pub __bindgen_anon_2: xinpcb64__bindgen_ty_2,
    pub __bindgen_anon_3: xinpcb64__bindgen_ty_3,
    pub __bindgen_anon_4: xinpcb64__bindgen_ty_4,
    pub xi_len: u_int64_t,
    pub xi_inpp: u_int64_t,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: inpcb64_list_entry,
    pub inp_ppcb: u_int64_t,
    pub inp_pcbinfo: u_int64_t,
    pub inp_portlist: inpcb64_list_entry,
    pub inp_phd: u_int64_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: xinpcb64__bindgen_ty_1,
    pub inp_dependladdr: xinpcb64__bindgen_ty_2,
    pub inp_depend4: xinpcb64__bindgen_ty_3,
    pub inp_depend6: xinpcb64__bindgen_ty_4,
    pub xi_socket: xsocket64,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xinpcb64__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xinpcb64__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xinpcb64__bindgen_ty_3 {
    pub inp4_ip_tos: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xinpcb64__bindgen_ty_4 {
    pub inp6_hlim: u_int8_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xinpgen {
    pub xig_len: u_int32_t,
    pub xig_count: u_int,
    pub xig_gen: inp_gen_t,
    pub xig_sogen: so_gen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_sys {
    pub ss_len: u_char,
    pub ss_family: u_char,
    pub ss_sysaddr: u_int16_t,
    pub ss_reserved: [u_int32_t; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_event_msg {
    pub total_size: u_int32_t,
    pub vendor_code: u_int32_t,
    pub kev_class: u_int32_t,
    pub kev_subclass: u_int32_t,
    pub id: u_int32_t,
    pub event_code: u_int32_t,
    pub event_data: [u_int32_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_request {
    pub vendor_code: u_int32_t,
    pub kev_class: u_int32_t,
    pub kev_subclass: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_vendor_code {
    pub vendor_code: u_int32_t,
    pub vendor_string: [::std::os::raw::c_char; 200usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_aliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr_in,
    pub ifra_broadaddr: sockaddr_in,
    pub ifra_mask: sockaddr_in,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_data {
    pub link_data: net_event_data,
    pub ia_addr: in_addr,
    pub ia_net: u_int32_t,
    pub ia_netmask: u_int32_t,
    pub ia_subnet: u_int32_t,
    pub ia_subnetmask: u_int32_t,
    pub ia_netbroadcast: in_addr,
    pub ia_dstaddr: in_addr,
}
#[repr(C)]
#[derive(Debug)]
pub struct kev_in_collision {
    pub link_data: net_event_data,
    pub ia_ipaddr: in_addr,
    pub hw_len: u_char,
    pub hw_addr: __IncompleteArrayField<u_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_arpfailure {
    pub link_data: net_event_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_arpalive {
    pub link_data: net_event_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_portinuse {
    pub port: u_int16_t,
    pub req_pid: u_int32_t,
    pub reserved: [u_int32_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_addrlifetime {
    pub ia6t_expire: time_t,
    pub ia6t_preferred: time_t,
    pub ia6t_vltime: u_int32_t,
    pub ia6t_pltime: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addrpolicy {
    pub addr: sockaddr_in6,
    pub addrmask: sockaddr_in6,
    pub preced: ::std::os::raw::c_int,
    pub label: ::std::os::raw::c_int,
    pub use_: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_ifstat {
    pub ifs6_in_receive: u_quad_t,
    pub ifs6_in_hdrerr: u_quad_t,
    pub ifs6_in_toobig: u_quad_t,
    pub ifs6_in_noroute: u_quad_t,
    pub ifs6_in_addrerr: u_quad_t,
    pub ifs6_in_protounknown: u_quad_t,
    pub ifs6_in_truncated: u_quad_t,
    pub ifs6_in_discard: u_quad_t,
    pub ifs6_in_deliver: u_quad_t,
    pub ifs6_out_forward: u_quad_t,
    pub ifs6_out_request: u_quad_t,
    pub ifs6_out_discard: u_quad_t,
    pub ifs6_out_fragok: u_quad_t,
    pub ifs6_out_fragfail: u_quad_t,
    pub ifs6_out_fragcreat: u_quad_t,
    pub ifs6_reass_reqd: u_quad_t,
    pub ifs6_reass_ok: u_quad_t,
    pub ifs6_atmfrag_rcvd: u_quad_t,
    pub ifs6_reass_fail: u_quad_t,
    pub ifs6_in_mcast: u_quad_t,
    pub ifs6_out_mcast: u_quad_t,
    pub ifs6_cantfoward_icmp6: u_quad_t,
    pub ifs6_addr_expiry_cnt: u_quad_t,
    pub ifs6_pfx_expiry_cnt: u_quad_t,
    pub ifs6_defrtr_expiry_cnt: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_ifstat {
    pub ifs6_in_msg: u_quad_t,
    pub ifs6_in_error: u_quad_t,
    pub ifs6_in_dstunreach: u_quad_t,
    pub ifs6_in_adminprohib: u_quad_t,
    pub ifs6_in_timeexceed: u_quad_t,
    pub ifs6_in_paramprob: u_quad_t,
    pub ifs6_in_pkttoobig: u_quad_t,
    pub ifs6_in_echo: u_quad_t,
    pub ifs6_in_echoreply: u_quad_t,
    pub ifs6_in_routersolicit: u_quad_t,
    pub ifs6_in_routeradvert: u_quad_t,
    pub ifs6_in_neighborsolicit: u_quad_t,
    pub ifs6_in_neighboradvert: u_quad_t,
    pub ifs6_in_redirect: u_quad_t,
    pub ifs6_in_mldquery: u_quad_t,
    pub ifs6_in_mldreport: u_quad_t,
    pub ifs6_in_mlddone: u_quad_t,
    pub ifs6_out_msg: u_quad_t,
    pub ifs6_out_error: u_quad_t,
    pub ifs6_out_dstunreach: u_quad_t,
    pub ifs6_out_adminprohib: u_quad_t,
    pub ifs6_out_timeexceed: u_quad_t,
    pub ifs6_out_paramprob: u_quad_t,
    pub ifs6_out_pkttoobig: u_quad_t,
    pub ifs6_out_echo: u_quad_t,
    pub ifs6_out_echoreply: u_quad_t,
    pub ifs6_out_routersolicit: u_quad_t,
    pub ifs6_out_routeradvert: u_quad_t,
    pub ifs6_out_neighborsolicit: u_quad_t,
    pub ifs6_out_neighboradvert: u_quad_t,
    pub ifs6_out_redirect: u_quad_t,
    pub ifs6_out_mldquery: u_quad_t,
    pub ifs6_out_mldreport: u_quad_t,
    pub ifs6_out_mlddone: u_quad_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_ifreq {
    pub __bindgen_anon_1: in6_ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: in6_ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr_in6,
    pub ifru_dstaddr: sockaddr_in6,
    pub ifru_flags: ::std::os::raw::c_int,
    pub ifru_flags6: ::std::os::raw::c_int,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_lifetime: in6_addrlifetime,
    pub ifru_stat: in6_ifstat,
    pub ifru_icmp6stat: icmp6_ifstat,
    pub ifru_scope_id: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_aliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr_in6,
    pub ifra_broadaddr: sockaddr_in6,
    pub ifra_prefixmask: sockaddr_in6,
    pub ifra_flags: ::std::os::raw::c_int,
    pub ifra_lifetime: in6_addrlifetime,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags {
    pub prf_ra: in6_prflags_prf_ra,
    pub prf_reserved1: u_char,
    pub prf_reserved2: u_short,
    pub prf_rr: in6_prflags_prf_rr,
    pub prf_reserved3: u_char,
    pub prf_reserved4: u_short,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags_prf_ra {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_prflags_prf_ra {
    #[inline]
    pub fn onlink(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlink(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autonomous(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autonomous(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        onlink: u_char,
        autonomous: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let onlink: u8 = unsafe { ::std::mem::transmute(onlink) };
            onlink as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autonomous: u8 = unsafe { ::std::mem::transmute(autonomous) };
            autonomous as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags_prf_rr {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_prflags_prf_rr {
    #[inline]
    pub fn decrvalid(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrvalid(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn decrprefd(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrprefd(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        decrvalid: u_char,
        decrprefd: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let decrvalid: u8 = unsafe { ::std::mem::transmute(decrvalid) };
            decrvalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let decrprefd: u8 = unsafe { ::std::mem::transmute(decrprefd) };
            decrprefd as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_prefixreq {
    pub ipr_name: [::std::os::raw::c_char; 16usize],
    pub ipr_origin: u_char,
    pub ipr_plen: u_char,
    pub ipr_vltime: u_int32_t,
    pub ipr_pltime: u_int32_t,
    pub ipr_flags: in6_prflags,
    pub ipr_prefix: sockaddr_in6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_rrenumreq {
    pub irr_name: [::std::os::raw::c_char; 16usize],
    pub irr_origin: u_char,
    pub irr_m_len: u_char,
    pub irr_m_minlen: u_char,
    pub irr_m_maxlen: u_char,
    pub irr_u_uselen: u_char,
    pub irr_u_keeplen: u_char,
    pub irr_raflagmask: in6_rrenumreq_irr_raflagmask,
    pub irr_vltime: u_int32_t,
    pub irr_pltime: u_int32_t,
    pub irr_flags: in6_prflags,
    pub irr_matchprefix: sockaddr_in6,
    pub irr_useprefix: sockaddr_in6,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_rrenumreq_irr_raflagmask {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_rrenumreq_irr_raflagmask {
    #[inline]
    pub fn onlink(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlink(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autonomous(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autonomous(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        onlink: u_char,
        autonomous: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let onlink: u8 = unsafe { ::std::mem::transmute(onlink) };
            onlink as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autonomous: u8 = unsafe { ::std::mem::transmute(autonomous) };
            autonomous as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in6_addrlifetime {
    pub ia6t_expire: u_int32_t,
    pub ia6t_preferred: u_int32_t,
    pub ia6t_vltime: u_int32_t,
    pub ia6t_pltime: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kev_in6_data {
    pub link_data: net_event_data,
    pub ia_addr: sockaddr_in6,
    pub ia_net: sockaddr_in6,
    pub ia_dstaddr: sockaddr_in6,
    pub ia_prefixmask: sockaddr_in6,
    pub ia_plen: u_int32_t,
    pub ia6_flags: u_int32_t,
    pub ia_lifetime: kev_in6_addrlifetime,
    pub ia_mac: [u8; 6usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ip6_hdr {
    pub __bindgen_anon_1: ip6_hdr__bindgen_ty_1,
    pub ip6_ctlun: ip6_hdr__bindgen_ty_1,
    pub ip6_src: in6_addr,
    pub ip6_dst: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip6_hdr__bindgen_ty_1 {
    pub ip6_un1: ip6_hdr__bindgen_ty_1_ip6_hdrctl,
    pub ip6_un2_vfc: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hdr__bindgen_ty_1_ip6_hdrctl {
    pub ip6_un1_flow: u_int32_t,
    pub ip6_un1_plen: u_int16_t,
    pub ip6_un1_nxt: u_int8_t,
    pub ip6_un1_hlim: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_ext {
    pub ip6e_nxt: u_int8_t,
    pub ip6e_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hbh {
    pub ip6h_nxt: u_int8_t,
    pub ip6h_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_dest {
    pub ip6d_nxt: u_int8_t,
    pub ip6d_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt {
    pub ip6o_type: u_int8_t,
    pub ip6o_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_jumbo {
    pub ip6oj_type: u_int8_t,
    pub ip6oj_len: u_int8_t,
    pub ip6oj_jumbo_len: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_nsap {
    pub ip6on_type: u_int8_t,
    pub ip6on_len: u_int8_t,
    pub ip6on_src_nsap_len: u_int8_t,
    pub ip6on_dst_nsap_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_tunnel {
    pub ip6ot_type: u_int8_t,
    pub ip6ot_len: u_int8_t,
    pub ip6ot_encap_limit: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_router {
    pub ip6or_type: u_int8_t,
    pub ip6or_len: u_int8_t,
    pub ip6or_value: [u_int8_t; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr {
    pub ip6r_nxt: u_int8_t,
    pub ip6r_len: u_int8_t,
    pub ip6r_type: u_int8_t,
    pub ip6r_segleft: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr0 {
    pub ip6r0_nxt: u_int8_t,
    pub ip6r0_len: u_int8_t,
    pub ip6r0_type: u_int8_t,
    pub ip6r0_segleft: u_int8_t,
    pub ip6r0_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_frag {
    pub ip6f_nxt: u_int8_t,
    pub ip6f_reserved: u_int8_t,
    pub ip6f_offlg: u_int16_t,
    pub ip6f_ident: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipovly {
    pub ih_x1: [u_char; 9usize],
    pub ih_pr: u_char,
    pub ih_len: u_short,
    pub ih_src: in_addr,
    pub ih_dst: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipstat {
    pub ips_total: u_int32_t,
    pub ips_badsum: u_int32_t,
    pub ips_tooshort: u_int32_t,
    pub ips_toosmall: u_int32_t,
    pub ips_badhlen: u_int32_t,
    pub ips_badlen: u_int32_t,
    pub ips_fragments: u_int32_t,
    pub ips_fragdropped: u_int32_t,
    pub ips_fragtimeout: u_int32_t,
    pub ips_forward: u_int32_t,
    pub ips_fastforward: u_int32_t,
    pub ips_cantforward: u_int32_t,
    pub ips_redirectsent: u_int32_t,
    pub ips_noproto: u_int32_t,
    pub ips_delivered: u_int32_t,
    pub ips_localout: u_int32_t,
    pub ips_odropped: u_int32_t,
    pub ips_reassembled: u_int32_t,
    pub ips_fragmented: u_int32_t,
    pub ips_ofragments: u_int32_t,
    pub ips_cantfrag: u_int32_t,
    pub ips_badoptions: u_int32_t,
    pub ips_noroute: u_int32_t,
    pub ips_badvers: u_int32_t,
    pub ips_rawout: u_int32_t,
    pub ips_toolong: u_int32_t,
    pub ips_notmember: u_int32_t,
    pub ips_nogif: u_int32_t,
    pub ips_badaddr: u_int32_t,
    pub ips_pktdropcntrl: u_int32_t,
    pub ips_rcv_swcsum: u_int32_t,
    pub ips_rcv_swcsum_bytes: u_int32_t,
    pub ips_snd_swcsum: u_int32_t,
    pub ips_snd_swcsum_bytes: u_int32_t,
    pub ips_adj: u_int32_t,
    pub ips_adj_hwcsum_clr: u_int32_t,
    pub ips_rxc_collisions: u_int32_t,
    pub ips_rxc_chained: u_int32_t,
    pub ips_rxc_notchain: u_int32_t,
    pub ips_rxc_chainsz_gt2: u_int32_t,
    pub ips_rxc_chainsz_gt4: u_int32_t,
    pub ips_rxc_notlist: u_int32_t,
    pub ips_raw_sappend_fail: u_int32_t,
    pub ips_necp_policy_drop: u_int32_t,
    pub ips_rcv_if_weak_match: u_int32_t,
    pub ips_rcv_if_no_match: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_linklocal_stat {
    pub iplls_in_total: u_int32_t,
    pub iplls_in_badttl: u_int32_t,
    pub iplls_out_total: u_int32_t,
    pub iplls_out_badttl: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tseg_qent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsegqe_head {
    pub lh_first: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpcb {
    pub t_segq: tsegqe_head,
    pub t_dupacks: ::std::os::raw::c_int,
    pub unused: u_int32_t,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_inpcb: u_int32_t,
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat {
    pub tcps_connattempt: u_int32_t,
    pub tcps_accepts: u_int32_t,
    pub tcps_connects: u_int32_t,
    pub tcps_drops: u_int32_t,
    pub tcps_conndrops: u_int32_t,
    pub tcps_closed: u_int32_t,
    pub tcps_segstimed: u_int32_t,
    pub tcps_rttupdated: u_int32_t,
    pub tcps_delack: u_int32_t,
    pub tcps_timeoutdrop: u_int32_t,
    pub tcps_rexmttimeo: u_int32_t,
    pub tcps_persisttimeo: u_int32_t,
    pub tcps_keeptimeo: u_int32_t,
    pub tcps_keepprobe: u_int32_t,
    pub tcps_keepdrops: u_int32_t,
    pub tcps_sndtotal: u_int32_t,
    pub tcps_sndpack: u_int32_t,
    pub tcps_sndbyte: u_int32_t,
    pub tcps_sndrexmitpack: u_int32_t,
    pub tcps_sndrexmitbyte: u_int32_t,
    pub tcps_sndacks: u_int32_t,
    pub tcps_sndprobe: u_int32_t,
    pub tcps_sndurg: u_int32_t,
    pub tcps_sndwinup: u_int32_t,
    pub tcps_sndctrl: u_int32_t,
    pub tcps_rcvtotal: u_int32_t,
    pub tcps_rcvpack: u_int32_t,
    pub tcps_rcvbyte: u_int32_t,
    pub tcps_rcvbadsum: u_int32_t,
    pub tcps_rcvbadoff: u_int32_t,
    pub tcps_rcvmemdrop: u_int32_t,
    pub tcps_rcvshort: u_int32_t,
    pub tcps_rcvduppack: u_int32_t,
    pub tcps_rcvdupbyte: u_int32_t,
    pub tcps_rcvpartduppack: u_int32_t,
    pub tcps_rcvpartdupbyte: u_int32_t,
    pub tcps_rcvoopack: u_int32_t,
    pub tcps_rcvoobyte: u_int32_t,
    pub tcps_rcvpackafterwin: u_int32_t,
    pub tcps_rcvbyteafterwin: u_int32_t,
    pub tcps_rcvafterclose: u_int32_t,
    pub tcps_rcvwinprobe: u_int32_t,
    pub tcps_rcvdupack: u_int32_t,
    pub tcps_rcvacktoomuch: u_int32_t,
    pub tcps_rcvackpack: u_int32_t,
    pub tcps_rcvackbyte: u_int32_t,
    pub tcps_rcvwinupd: u_int32_t,
    pub tcps_pawsdrop: u_int32_t,
    pub tcps_predack: u_int32_t,
    pub tcps_preddat: u_int32_t,
    pub tcps_pcbcachemiss: u_int32_t,
    pub tcps_cachedrtt: u_int32_t,
    pub tcps_cachedrttvar: u_int32_t,
    pub tcps_cachedssthresh: u_int32_t,
    pub tcps_usedrtt: u_int32_t,
    pub tcps_usedrttvar: u_int32_t,
    pub tcps_usedssthresh: u_int32_t,
    pub tcps_persistdrop: u_int32_t,
    pub tcps_badsyn: u_int32_t,
    pub tcps_mturesent: u_int32_t,
    pub tcps_listendrop: u_int32_t,
    pub tcps_synchallenge: u_int32_t,
    pub tcps_rstchallenge: u_int32_t,
    pub tcps_minmssdrops: u_int32_t,
    pub tcps_sndrexmitbad: u_int32_t,
    pub tcps_badrst: u_int32_t,
    pub tcps_sc_added: u_int32_t,
    pub tcps_sc_retransmitted: u_int32_t,
    pub tcps_sc_dupsyn: u_int32_t,
    pub tcps_sc_dropped: u_int32_t,
    pub tcps_sc_completed: u_int32_t,
    pub tcps_sc_bucketoverflow: u_int32_t,
    pub tcps_sc_cacheoverflow: u_int32_t,
    pub tcps_sc_reset: u_int32_t,
    pub tcps_sc_stale: u_int32_t,
    pub tcps_sc_aborted: u_int32_t,
    pub tcps_sc_badack: u_int32_t,
    pub tcps_sc_unreach: u_int32_t,
    pub tcps_sc_zonefail: u_int32_t,
    pub tcps_sc_sendcookie: u_int32_t,
    pub tcps_sc_recvcookie: u_int32_t,
    pub tcps_hc_added: u_int32_t,
    pub tcps_hc_bucketoverflow: u_int32_t,
    pub tcps_sack_recovery_episode: u_int32_t,
    pub tcps_sack_rexmits: u_int32_t,
    pub tcps_sack_rexmit_bytes: u_int32_t,
    pub tcps_sack_rcv_blocks: u_int32_t,
    pub tcps_sack_send_blocks: u_int32_t,
    pub tcps_sack_sboverflow: u_int32_t,
    pub tcps_bg_rcvtotal: u_int32_t,
    pub tcps_rxtfindrop: u_int32_t,
    pub tcps_fcholdpacket: u_int32_t,
    pub tcps_limited_txt: u_int32_t,
    pub tcps_early_rexmt: u_int32_t,
    pub tcps_sack_ackadv: u_int32_t,
    pub tcps_rcv_swcsum: u_int32_t,
    pub tcps_rcv_swcsum_bytes: u_int32_t,
    pub tcps_rcv6_swcsum: u_int32_t,
    pub tcps_rcv6_swcsum_bytes: u_int32_t,
    pub tcps_snd_swcsum: u_int32_t,
    pub tcps_snd_swcsum_bytes: u_int32_t,
    pub tcps_snd6_swcsum: u_int32_t,
    pub tcps_snd6_swcsum_bytes: u_int32_t,
    pub tcps_unused_1: u_int32_t,
    pub tcps_unused_2: u_int32_t,
    pub tcps_unused_3: u_int32_t,
    pub tcps_invalid_mpcap: u_int32_t,
    pub tcps_invalid_joins: u_int32_t,
    pub tcps_mpcap_fallback: u_int32_t,
    pub tcps_join_fallback: u_int32_t,
    pub tcps_estab_fallback: u_int32_t,
    pub tcps_invalid_opt: u_int32_t,
    pub tcps_mp_outofwin: u_int32_t,
    pub tcps_mp_reducedwin: u_int32_t,
    pub tcps_mp_badcsum: u_int32_t,
    pub tcps_mp_oodata: u_int32_t,
    pub tcps_mp_switches: u_int32_t,
    pub tcps_mp_rcvtotal: u_int32_t,
    pub tcps_mp_rcvbytes: u_int32_t,
    pub tcps_mp_sndpacks: u_int32_t,
    pub tcps_mp_sndbytes: u_int32_t,
    pub tcps_join_rxmts: u_int32_t,
    pub tcps_tailloss_rto: u_int32_t,
    pub tcps_reordered_pkts: u_int32_t,
    pub tcps_recovered_pkts: u_int32_t,
    pub tcps_pto: u_int32_t,
    pub tcps_rto_after_pto: u_int32_t,
    pub tcps_tlp_recovery: u_int32_t,
    pub tcps_tlp_recoverlastpkt: u_int32_t,
    pub tcps_ecn_client_success: u_int32_t,
    pub tcps_ecn_recv_ece: u_int32_t,
    pub tcps_ecn_sent_ece: u_int32_t,
    pub tcps_detect_reordering: u_int32_t,
    pub tcps_delay_recovery: u_int32_t,
    pub tcps_avoid_rxmt: u_int32_t,
    pub tcps_unnecessary_rxmt: u_int32_t,
    pub tcps_nostretchack: u_int32_t,
    pub tcps_rescue_rxmt: u_int32_t,
    pub tcps_pto_in_recovery: u_int32_t,
    pub tcps_pmtudbh_reverted: u_int32_t,
    pub tcps_dsack_disable: u_int32_t,
    pub tcps_dsack_ackloss: u_int32_t,
    pub tcps_dsack_badrexmt: u_int32_t,
    pub tcps_dsack_sent: u_int32_t,
    pub tcps_dsack_recvd: u_int32_t,
    pub tcps_dsack_recvd_old: u_int32_t,
    pub tcps_mp_sel_symtomsd: u_int32_t,
    pub tcps_mp_sel_rtt: u_int32_t,
    pub tcps_mp_sel_rto: u_int32_t,
    pub tcps_mp_sel_peer: u_int32_t,
    pub tcps_mp_num_probes: u_int32_t,
    pub tcps_mp_verdowngrade: u_int32_t,
    pub tcps_drop_after_sleep: u_int32_t,
    pub tcps_probe_if: u_int32_t,
    pub tcps_probe_if_conflict: u_int32_t,
    pub tcps_ecn_client_setup: u_int32_t,
    pub tcps_ecn_server_setup: u_int32_t,
    pub tcps_ecn_server_success: u_int32_t,
    pub tcps_ecn_ace_syn_not_ect: u_int32_t,
    pub tcps_ecn_ace_syn_ect1: u_int32_t,
    pub tcps_ecn_ace_syn_ect0: u_int32_t,
    pub tcps_ecn_ace_syn_ce: u_int32_t,
    pub tcps_ecn_lost_synack: u_int32_t,
    pub tcps_ecn_lost_syn: u_int32_t,
    pub tcps_ecn_not_supported: u_int32_t,
    pub tcps_ecn_recv_ce: u_int32_t,
    pub tcps_ecn_ace_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ece: u_int32_t,
    pub tcps_ecn_conn_plnoce: u_int32_t,
    pub tcps_ecn_conn_pl_ce: u_int32_t,
    pub tcps_ecn_conn_nopl_ce: u_int32_t,
    pub tcps_ecn_fallback_synloss: u_int32_t,
    pub tcps_ecn_fallback_reorder: u_int32_t,
    pub tcps_ecn_fallback_ce: u_int32_t,
    pub tcps_tfo_syn_data_rcv: u_int32_t,
    pub tcps_tfo_cookie_req_rcv: u_int32_t,
    pub tcps_tfo_cookie_sent: u_int32_t,
    pub tcps_tfo_cookie_invalid: u_int32_t,
    pub tcps_tfo_cookie_req: u_int32_t,
    pub tcps_tfo_cookie_rcv: u_int32_t,
    pub tcps_tfo_syn_data_sent: u_int32_t,
    pub tcps_tfo_syn_data_acked: u_int32_t,
    pub tcps_tfo_syn_loss: u_int32_t,
    pub tcps_tfo_blackhole: u_int32_t,
    pub tcps_tfo_cookie_wrong: u_int32_t,
    pub tcps_tfo_no_cookie_rcv: u_int32_t,
    pub tcps_tfo_heuristics_disable: u_int32_t,
    pub tcps_tfo_sndblackhole: u_int32_t,
    pub tcps_mss_to_default: u_int32_t,
    pub tcps_mss_to_medium: u_int32_t,
    pub tcps_mss_to_low: u_int32_t,
    pub tcps_ecn_fallback_droprst: u_int32_t,
    pub tcps_ecn_fallback_droprxmt: u_int32_t,
    pub tcps_ecn_fallback_synrst: u_int32_t,
    pub tcps_mptcp_rcvmemdrop: u_int32_t,
    pub tcps_mptcp_rcvduppack: u_int32_t,
    pub tcps_mptcp_rcvpackafterwin: u_int32_t,
    pub tcps_timer_drift_le_1_ms: u_int32_t,
    pub tcps_timer_drift_le_10_ms: u_int32_t,
    pub tcps_timer_drift_le_20_ms: u_int32_t,
    pub tcps_timer_drift_le_50_ms: u_int32_t,
    pub tcps_timer_drift_le_100_ms: u_int32_t,
    pub tcps_timer_drift_le_200_ms: u_int32_t,
    pub tcps_timer_drift_le_500_ms: u_int32_t,
    pub tcps_timer_drift_le_1000_ms: u_int32_t,
    pub tcps_timer_drift_gt_1000_ms: u_int32_t,
    pub tcps_mptcp_handover_attempt: u_int32_t,
    pub tcps_mptcp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_fp_handover_attempt: u_int32_t,
    pub tcps_mptcp_fp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_fp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_fp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_interactive_success: u_int32_t,
    pub tcps_mptcp_aggregate_success: u_int32_t,
    pub tcps_mptcp_fp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_fp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_fp_interactive_success: u_int32_t,
    pub tcps_mptcp_fp_aggregate_success: u_int32_t,
    pub tcps_mptcp_handover_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_wifi_from_cell: u_int32_t,
    pub tcps_mptcp_interactive_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_cell_bytes: u_int64_t,
    pub tcps_mptcp_interactive_cell_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_cell_bytes: u_int64_t,
    pub tcps_mptcp_handover_all_bytes: u_int64_t,
    pub tcps_mptcp_interactive_all_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_all_bytes: u_int64_t,
    pub tcps_mptcp_back_to_wifi: u_int32_t,
    pub tcps_mptcp_wifi_proxy: u_int32_t,
    pub tcps_mptcp_cell_proxy: u_int32_t,
    pub tcps_ka_offload_drops: u_int32_t,
    pub tcps_mptcp_triggered_cell: u_int32_t,
    pub tcps_fin_timeout_drops: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat_local {
    pub badformat: u_int64_t,
    pub unspecv6: u_int64_t,
    pub synfin: u_int64_t,
    pub badformatipsec: u_int64_t,
    pub noconnnolist: u_int64_t,
    pub noconnlist: u_int64_t,
    pub listbadsyn: u_int64_t,
    pub icmp6unreach: u_int64_t,
    pub deprecate6: u_int64_t,
    pub ooopacket: u_int64_t,
    pub rstinsynrcv: u_int64_t,
    pub dospacket: u_int64_t,
    pub cleanup: u_int64_t,
    pub synwindow: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb {
    pub xt_len: u_int32_t,
    pub xt_inp: inpcb,
    pub xt_tp: tcpcb,
    pub xt_socket: xsocket,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb64 {
    pub xt_len: u_int32_t,
    pub xt_inpcb: xinpcb64,
    pub t_segq: u_int64_t,
    pub t_dupacks: ::std::os::raw::c_int,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpiphdr {
    pub ti_i: ipovly,
    pub ti_t: tcphdr,
}
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
pub type au_ctlmode_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
pub type au_session_t = au_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: usize,
    pub op_type: ::std::os::raw::c_uchar,
}
pub type au_expire_after_t = au_expire_after;
pub type token_t = au_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
pub type au_evclass_map_t = au_evclass_map;
extern "C" {
    pub fn audit(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditon(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditctl(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit_addr(
        arg1: *mut auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit_addr(
        arg1: *const auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_session_self() -> mach_port_name_t;
}
extern "C" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_session_port(
        asid: au_asid_t,
        portname: *mut mach_port_name_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cred {
    _unused: [u8; 0],
}
pub type kauth_cred_t = *mut ucred;
pub type posix_cred_t = *mut posix_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vmspace {
    pub dummy: i32,
    pub dummy2: caddr_t,
    pub dummy3: [i32; 5usize],
    pub dummy4: [caddr_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlname {
    pub ctl_name: *mut ::std::os::raw::c_char,
    pub ctl_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcred {
    pub pc_lock: [::std::os::raw::c_char; 72usize],
    pub pc_ucred: *mut ucred,
    pub p_ruid: uid_t,
    pub p_svuid: uid_t,
    pub p_rgid: gid_t,
    pub p_svgid: gid_t,
    pub p_refcnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ucred {
    pub cr_ref: i32,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinfo_proc {
    pub kp_proc: extern_proc,
    pub kp_eproc: kinfo_proc_eproc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kinfo_proc_eproc {
    pub e_paddr: *mut proc_,
    pub e_sess: *mut session,
    pub e_pcred: _pcred,
    pub e_ucred: _ucred,
    pub e_vm: vmspace,
    pub e_ppid: pid_t,
    pub e_pgid: pid_t,
    pub e_jobc: ::std::os::raw::c_short,
    pub e_tdev: dev_t,
    pub e_tpgid: pid_t,
    pub e_tsess: *mut session,
    pub e_wmesg: [::std::os::raw::c_char; 8usize],
    pub e_xsize: segsz_t,
    pub e_xrssize: ::std::os::raw::c_short,
    pub e_xccount: ::std::os::raw::c_short,
    pub e_xswrss: ::std::os::raw::c_short,
    pub e_flag: i32,
    pub e_login: [::std::os::raw::c_char; 12usize],
    pub e_spare: [i32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsw_usage {
    pub xsu_total: u_int64_t,
    pub xsu_avail: u_int64_t,
    pub xsu_used: u_int64_t,
    pub xsu_pagesize: u_int32_t,
    pub xsu_encrypted: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loadavg {
    pub ldavg: [fixpt_t; 3usize],
    pub fscale: ::std::os::raw::c_long,
}
extern "C" {
    pub static mut averunnable: loadavg;
}
extern "C" {
    pub fn sysctl(
        arg1: *mut ::std::os::raw::c_int,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut ::std::os::raw::c_void,
        arg6: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlnametomib(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udpiphdr {
    pub ui_i: ipovly,
    pub ui_u: udphdr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udpstat {
    pub udps_ipackets: u_int32_t,
    pub udps_hdrops: u_int32_t,
    pub udps_badsum: u_int32_t,
    pub udps_badlen: u_int32_t,
    pub udps_noport: u_int32_t,
    pub udps_noportbcast: u_int32_t,
    pub udps_fullsock: u_int32_t,
    pub udpps_pcbcachemiss: u_int32_t,
    pub udpps_pcbhashmiss: u_int32_t,
    pub udps_opackets: u_int32_t,
    pub udps_fastout: u_int32_t,
    pub udps_nosum: u_int32_t,
    pub udps_noportmcast: u_int32_t,
    pub udps_filtermcast: u_int32_t,
    pub udps_rcv_swcsum: u_int32_t,
    pub udps_rcv_swcsum_bytes: u_int32_t,
    pub udps_rcv6_swcsum: u_int32_t,
    pub udps_rcv6_swcsum_bytes: u_int32_t,
    pub udps_snd_swcsum: u_int32_t,
    pub udps_snd_swcsum_bytes: u_int32_t,
    pub udps_snd6_swcsum: u_int32_t,
    pub udps_snd6_swcsum_bytes: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 1024usize];
pub type nspace_name_t = [::std::os::raw::c_char; 1024usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type bank_action_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_persona_info {
    pub unique_pid: u64,
    pub pid: i32,
    pub flags: u32,
    pub pidversion: u32,
    pub persona_id: u32,
    pub uid: u32,
    pub gid: u32,
    pub macho_uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_token {
    pub originator: proc_persona_info,
    pub proximate: proc_persona_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_modify_info {
    pub persona_id: u32,
    pub unique_pid: u64,
}
extern "C" {
    pub fn _NSGetArgv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetArgc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _NSGetEnviron() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetProgname() -> *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header_64 {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _NSGetMachExecuteHeader() -> *mut mach_header_64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
extern "C" {
    pub fn getopt_long(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt_long_only(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_9 = 0;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_10 = 0;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_11 = 1;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_12 = 1061109567;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_13 = 0;
pub const bold: _bindgen_ty_13 = 1;
pub const italic: _bindgen_ty_13 = 2;
pub const underline: _bindgen_ty_13 = 4;
pub const outline: _bindgen_ty_13 = 8;
pub const shadow: _bindgen_ty_13 = 16;
pub const condense: _bindgen_ty_13 = 32;
pub const extend: _bindgen_ty_13 = 64;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
pub const developStage: _bindgen_ty_14 = 32;
pub const alphaStage: _bindgen_ty_14 = 64;
pub const betaStage: _bindgen_ty_14 = 96;
pub const finalStage: _bindgen_ty_14 = 128;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
pub const OSUnknownByteOrder: _bindgen_ty_15 = 0;
pub const OSLittleEndian: _bindgen_ty_15 = 1;
pub const OSBigEndian: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
}
extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
}
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
}
extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
}
pub type sync_policy_t = ::std::os::raw::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(
        target_task: task_read_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_generate_corpse(
        task: task_read_t,
        corpse_task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_register(
        target_task: task_read_t,
        notify: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_create_identity_token(task: task_t, token: *mut task_id_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_identity_token_get_task_port(
        token: task_id_token_t,
        flavor: task_flavor_t,
        task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_deregister(
        target_task: task_read_t,
        notify: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_sync_upcall(task: task_t, port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_set_corpse_forking_behavior(
        task: task_t,
        behavior: task_corpse_forking_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_async_upcall_propagation(
        task: task_t,
        port: mach_port_t,
        qos: ::std::os::raw::c_int,
        iotier: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_kcdata_object_64(
        task: task_t,
        kcdata_object: kcdata_object_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub notify: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_corpse_forking_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub qos: ::std::os::raw::c_int,
    pub iotier: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub kcdata_object: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_dyld_process_info_notify_register:
        __Request__task_dyld_process_info_notify_register_t,
    pub Request_task_create_identity_token: __Request__task_create_identity_token_t,
    pub Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    pub Request_task_dyld_process_info_notify_deregister:
        __Request__task_dyld_process_info_notify_deregister_t,
    pub Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    pub Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    pub Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
    pub Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t,
    pub Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_dyld_process_info_notify_register:
        __Reply__task_dyld_process_info_notify_register_t,
    pub Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    pub Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    pub Reply_task_dyld_process_info_notify_deregister:
        __Reply__task_dyld_process_info_notify_deregister_t,
    pub Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    pub Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    pub Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
    pub Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t,
    pub Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t,
}
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    pub Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    pub Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
}
extern "C" {
    pub fn vm_region(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_read_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_read_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    pub Request_vm_remap_new: __Request__vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    pub Reply_vm_remap_new: __Reply__vm_remap_new_t,
}
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_main(host: host_t, io_main: *mut io_main_t) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_main_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_main: __Request__host_get_io_main_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_main_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_main: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_main: __Reply__host_get_io_main_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
}
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mach_error(str_: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type string_t = *const ::std::os::raw::c_char;
extern "C" {
    pub fn clock_get_time(
        clock_serv: clock_serv_t,
        cur_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_get_attributes(
        clock_serv: clock_serv_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_alarm(
        clock_serv: clock_serv_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
        alarm_port: clock_reply_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_time_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub alarm_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_subsystem {
    pub Request_clock_get_time: __Request__clock_get_time_t,
    pub Request_clock_get_attributes: __Request__clock_get_attributes_t,
    pub Request_clock_alarm: __Request__clock_alarm_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub cur_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_subsystem {
    pub Reply_clock_get_time: __Reply__clock_get_time_t,
    pub Reply_clock_get_attributes: __Reply__clock_get_attributes_t,
    pub Reply_clock_alarm: __Reply__clock_alarm_t,
}
extern "C" {
    pub fn clock_alarm_reply(
        alarm_port: clock_reply_t,
        alarm_portPoly: mach_msg_type_name_t,
        alarm_code: kern_return_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub alarm_code: kern_return_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_reply_subsystem {
    pub Request_clock_alarm_reply: __Request__clock_alarm_reply_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_reply_subsystem {
    pub Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t,
}
extern "C" {
    pub fn exception_raise(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state(
        exception_port: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state_identity(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__exc_subsystem {
    pub Request_exception_raise: __Request__exception_raise_t,
    pub Request_exception_raise_state: __Request__exception_raise_state_t,
    pub Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__exc_subsystem {
    pub Reply_exception_raise: __Reply__exception_raise_t,
    pub Reply_exception_raise_state: __Reply__exception_raise_state_t,
    pub Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
pub type mach_timebase_info_t = *mut mach_timebase_info;
pub type mach_timebase_info_data_t = mach_timebase_info;
extern "C" {
    pub fn mach_timebase_info(info: mach_timebase_info_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_wait_until(deadline: u64) -> kern_return_t;
}
extern "C" {
    pub fn mach_absolute_time() -> u64;
}
extern "C" {
    pub fn mach_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_vm_allocate(
        target: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_deallocate(
        target: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_protect(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_inherit(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut mach_vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_write(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_copy(
        target_task: vm_map_t,
        source_address: mach_vm_address_t,
        size: mach_vm_size_t,
        dest_address: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_overwrite(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: mach_vm_address_t,
        outsize: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_msync(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_behavior_set(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_map(
        target_task: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_machine_attribute(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_query(
        target_map: vm_map_read_t,
        offset: mach_vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_handle: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_purgable_control(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_info(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        flavor: vm_page_info_flavor_t,
        info: vm_page_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_range_query(
        target_map: vm_map_read_t,
        address: mach_vm_offset_t,
        size: mach_vm_size_t,
        dispositions: mach_vm_address_t,
        dispositions_count: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: mach_vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub dest_address: mach_vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub data: mach_vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: mach_vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_page_info_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_offset_t,
    pub size: mach_vm_size_t,
    pub dispositions: mach_vm_address_t,
    pub dispositions_count: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_vm_subsystem {
    pub Request_mach_vm_allocate: __Request__mach_vm_allocate_t,
    pub Request_mach_vm_deallocate: __Request__mach_vm_deallocate_t,
    pub Request_mach_vm_protect: __Request__mach_vm_protect_t,
    pub Request_mach_vm_inherit: __Request__mach_vm_inherit_t,
    pub Request_mach_vm_read: __Request__mach_vm_read_t,
    pub Request_mach_vm_read_list: __Request__mach_vm_read_list_t,
    pub Request_mach_vm_write: __Request__mach_vm_write_t,
    pub Request_mach_vm_copy: __Request__mach_vm_copy_t,
    pub Request_mach_vm_read_overwrite: __Request__mach_vm_read_overwrite_t,
    pub Request_mach_vm_msync: __Request__mach_vm_msync_t,
    pub Request_mach_vm_behavior_set: __Request__mach_vm_behavior_set_t,
    pub Request_mach_vm_map: __Request__mach_vm_map_t,
    pub Request_mach_vm_machine_attribute: __Request__mach_vm_machine_attribute_t,
    pub Request_mach_vm_remap: __Request__mach_vm_remap_t,
    pub Request_mach_vm_page_query: __Request__mach_vm_page_query_t,
    pub Request_mach_vm_region_recurse: __Request__mach_vm_region_recurse_t,
    pub Request_mach_vm_region: __Request__mach_vm_region_t,
    pub Request__mach_make_memory_entry: __Request___mach_make_memory_entry_t,
    pub Request_mach_vm_purgable_control: __Request__mach_vm_purgable_control_t,
    pub Request_mach_vm_page_info: __Request__mach_vm_page_info_t,
    pub Request_mach_vm_page_range_query: __Request__mach_vm_page_range_query_t,
    pub Request_mach_vm_remap_new: __Request__mach_vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: mach_vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 32usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dispositions_count: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_vm_subsystem {
    pub Reply_mach_vm_allocate: __Reply__mach_vm_allocate_t,
    pub Reply_mach_vm_deallocate: __Reply__mach_vm_deallocate_t,
    pub Reply_mach_vm_protect: __Reply__mach_vm_protect_t,
    pub Reply_mach_vm_inherit: __Reply__mach_vm_inherit_t,
    pub Reply_mach_vm_read: __Reply__mach_vm_read_t,
    pub Reply_mach_vm_read_list: __Reply__mach_vm_read_list_t,
    pub Reply_mach_vm_write: __Reply__mach_vm_write_t,
    pub Reply_mach_vm_copy: __Reply__mach_vm_copy_t,
    pub Reply_mach_vm_read_overwrite: __Reply__mach_vm_read_overwrite_t,
    pub Reply_mach_vm_msync: __Reply__mach_vm_msync_t,
    pub Reply_mach_vm_behavior_set: __Reply__mach_vm_behavior_set_t,
    pub Reply_mach_vm_map: __Reply__mach_vm_map_t,
    pub Reply_mach_vm_machine_attribute: __Reply__mach_vm_machine_attribute_t,
    pub Reply_mach_vm_remap: __Reply__mach_vm_remap_t,
    pub Reply_mach_vm_page_query: __Reply__mach_vm_page_query_t,
    pub Reply_mach_vm_region_recurse: __Reply__mach_vm_region_recurse_t,
    pub Reply_mach_vm_region: __Reply__mach_vm_region_t,
    pub Reply__mach_make_memory_entry: __Reply___mach_make_memory_entry_t,
    pub Reply_mach_vm_purgable_control: __Reply__mach_vm_purgable_control_t,
    pub Reply_mach_vm_page_info: __Reply__mach_vm_page_info_t,
    pub Reply_mach_vm_page_range_query: __Reply__mach_vm_page_range_query_t,
    pub Reply_mach_vm_remap_new: __Reply__mach_vm_remap_new_t,
}
extern "C" {
    pub fn mach_voucher_extract_attr_content(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        content: mach_voucher_attr_content_t,
        contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipeCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_all_attr_recipes(
        voucher: ipc_voucher_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_attr_command(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        command: mach_voucher_attr_command_t,
        in_content: mach_voucher_attr_content_t,
        in_contentCnt: mach_msg_type_number_t,
        out_content: mach_voucher_attr_content_t,
        out_contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_debug_info(
        task: ipc_space_read_t,
        voucher_name: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub recipeCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_command_t,
    pub in_contentCnt: mach_msg_type_number_t,
    pub in_content: [u8; 4096usize],
    pub out_contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub voucher_name: mach_port_name_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_voucher_subsystem {
    pub Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t,
    pub Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t,
    pub Request_mach_voucher_extract_all_attr_recipes:
        __Request__mach_voucher_extract_all_attr_recipes_t,
    pub Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t,
    pub Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub contentCnt: mach_msg_type_number_t,
    pub content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipeCnt: mach_msg_type_number_t,
    pub recipe: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_contentCnt: mach_msg_type_number_t,
    pub out_content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_voucher_subsystem {
    pub Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t,
    pub Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t,
    pub Reply_mach_voucher_extract_all_attr_recipes:
        __Reply__mach_voucher_extract_all_attr_recipes_t,
    pub Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t,
    pub Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t,
}
extern "C" {
    pub fn mach_memory_entry_purgable_control(
        mem_entry: mem_entry_name_port_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_access_tracking(
        mem_entry: mem_entry_name_port_t,
        access_tracking: *mut ::std::os::raw::c_int,
        access_tracking_reads: *mut u32,
        access_tracking_writes: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_ownership(
        mem_entry: mem_entry_name_port_t,
        owner: task_t,
        ledger_tag: ::std::os::raw::c_int,
        ledger_flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub access_tracking: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub owner: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledger_tag: ::std::os::raw::c_int,
    pub ledger_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__memory_entry_subsystem {
    pub Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t,
    pub Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t,
    pub Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub access_tracking: ::std::os::raw::c_int,
    pub access_tracking_reads: u32,
    pub access_tracking_writes: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__memory_entry_subsystem {
    pub Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t,
    pub Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t,
    pub Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct port_obj_tentry {
    pub pos_value: *mut ::std::os::raw::c_void,
    pub pos_type: ::std::os::raw::c_int,
}
extern "C" {
    pub fn port_obj_init(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut port_obj_table: *mut port_obj_tentry;
}
extern "C" {
    pub static mut port_obj_table_size: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_mapping_np {
    pub sfm_address: mach_vm_address_t,
    pub sfm_size: mach_vm_size_t,
    pub sfm_file_offset: mach_vm_offset_t,
    pub sfm_max_prot: vm_prot_t,
    pub sfm_init_prot: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_mapping_slide_np {
    pub sms_address: mach_vm_address_t,
    pub sms_size: mach_vm_size_t,
    pub sms_file_offset: mach_vm_offset_t,
    pub sms_slide_size: user_addr_t,
    pub sms_slide_start: user_addr_t,
    pub sms_max_prot: vm_prot_t,
    pub sms_init_prot: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_np {
    pub sf_fd: ::std::os::raw::c_int,
    pub sf_mappings_count: u32,
    pub sf_slide: u32,
}
extern "C" {
    pub fn shared_region_check_np(startaddress: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shared_region_map_np(
        fd: ::std::os::raw::c_int,
        mappingCount: u32,
        mappings: *const shared_file_mapping_np,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shared_region_slide_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thread_get_register_pointer_values(
        thread: thread_t,
        sp: *mut usize,
        length: *mut usize,
        values: *mut usize,
    ) -> kern_return_t;
}
pub type io_buf_ptr_t = *mut ::std::os::raw::c_char;
pub type io_name_t = [::std::os::raw::c_char; 128usize];
pub type io_string_t = [::std::os::raw::c_char; 512usize];
pub type io_string_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_struct_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_user_scalar_t = u64;
pub type io_user_reference_t = u64;
pub type io_scalar_inband_t = [io_user_scalar_t; 16usize];
pub type io_async_ref_t = [io_user_reference_t; 8usize];
pub type io_scalar_inband64_t = [io_user_scalar_t; 16usize];
pub type io_async_ref64_t = [io_user_reference_t; 8usize];
pub type io_object_t = mach_port_t;
extern "C" {
    pub static mut main_device_port: mach_port_t;
}
pub type OSAtomic_int64_aligned64_t = i64;
extern "C" {
    pub fn OSAtomicAdd32(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd32Barrier(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicIncrement32(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicIncrement32Barrier(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicDecrement32(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicDecrement32Barrier(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd64(__theAmount: i64, __theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicAdd64Barrier(
        __theAmount: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> i64;
}
extern "C" {
    pub fn OSAtomicIncrement64(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicIncrement64Barrier(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicDecrement64(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicDecrement64Barrier(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicOr32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32(__oldValue: i32, __newValue: i32, __theValue: *mut i32)
        -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32Barrier(
        __oldValue: i32,
        __newValue: i32,
        __theValue: *mut i32,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtr(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtrBarrier(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapInt(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapIntBarrier(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLong(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLongBarrier(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64Barrier(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSet(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSetBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClear(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClearBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void)
        -> bool;
}
extern "C" {
    pub fn OSMemoryBarrier();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_16 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: *mut ::std::os::raw::c_void,
    pub opaque3: ::std::os::raw::c_int,
}
pub type OSFifoQueueHead = _bindgen_ty_16;
extern "C" {
    pub fn OSAtomicFifoEnqueue(
        __list: *mut OSFifoQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicFifoDequeue(
        __list: *mut OSFifoQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type OSSpinLock = i32;
extern "C" {
    pub fn OSSpinLockTry(__lock: *mut OSSpinLock) -> bool;
}
extern "C" {
    pub fn OSSpinLockLock(__lock: *mut OSSpinLock);
}
extern "C" {
    pub fn OSSpinLockUnlock(__lock: *mut OSSpinLock);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_17 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: ::std::os::raw::c_long,
}
pub type OSQueueHead = _bindgen_ty_17;
extern "C" {
    pub fn OSAtomicEnqueue(
        __list: *mut OSQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicDequeue(
        __list: *mut OSQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_unfair_lock_s {
    pub _os_unfair_lock_opaque: u32,
}
pub type os_unfair_lock = os_unfair_lock_s;
pub type os_unfair_lock_t = *mut os_unfair_lock_s;
extern "C" {
    pub fn os_unfair_lock_lock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_trylock(lock: os_unfair_lock_t) -> bool;
}
extern "C" {
    pub fn os_unfair_lock_unlock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_assert_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_unfair_lock_assert_not_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_proc_available_memory() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *const ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            num_items: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub valloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(zone: *mut _malloc_zone_t)>,
    pub zone_name: *const ::std::os::raw::c_char,
    pub batch_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            size: usize,
            results: *mut *mut ::std::os::raw::c_void,
            num_requested: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub batch_free: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            to_be_freed: *mut *mut ::std::os::raw::c_void,
            num_to_be_freed: ::std::os::raw::c_uint,
        ),
    >,
    pub introspect: *mut malloc_introspection_t,
    pub version: ::std::os::raw::c_uint,
    pub memalign: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            alignment: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_definite_size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ),
    >,
    pub pressure_relief: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, goal: usize) -> usize,
    >,
    pub claimed_address: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
        ) -> boolean_t,
    >,
    pub try_free_default: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_default_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_create_zone(
        start_size: vm_size_t,
        flags: ::std::os::raw::c_uint,
    ) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_destroy_zone(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_malloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_calloc(
        zone: *mut malloc_zone_t,
        num_items: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_valloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_free(zone: *mut malloc_zone_t, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_from_ptr(ptr: *const ::std::os::raw::c_void) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_size(ptr: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn malloc_good_size(size: usize) -> usize;
}
extern "C" {
    pub fn malloc_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_batch_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        results: *mut *mut ::std::os::raw::c_void,
        num_requested: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn malloc_zone_batch_free(
        zone: *mut malloc_zone_t,
        to_be_freed: *mut *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn malloc_default_purgeable_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_make_purgeable(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_make_nonpurgeable(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc_zone_register(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_unregister(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_set_zone_name(zone: *mut malloc_zone_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn malloc_get_zone_name(zone: *mut malloc_zone_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn malloc_zone_pressure_relief(zone: *mut malloc_zone_t, goal: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_range_t {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_statistics_t {
    pub blocks_in_use: ::std::os::raw::c_uint,
    pub size_in_use: usize,
    pub max_size_in_use: usize,
    pub size_allocated: usize,
}
pub type memory_reader_t = ::std::option::Option<
    unsafe extern "C" fn(
        remote_task: task_t,
        remote_address: vm_address_t,
        size: vm_size_t,
        local_memory: *mut *mut ::std::os::raw::c_void,
    ) -> kern_return_t,
>;
pub type vm_range_recorder_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: task_t,
        arg2: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_uint,
        arg3: *mut vm_range_t,
        arg4: ::std::os::raw::c_uint,
    ),
>;
pub type print_task_printer_t =
    ::std::option::Option<unsafe extern "C" fn(fmt: *const ::std::os::raw::c_char, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_introspection_t {
    pub enumerator: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            arg1: *mut ::std::os::raw::c_void,
            type_mask: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            recorder: vm_range_recorder_t,
        ) -> kern_return_t,
    >,
    pub good_size:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, size: usize) -> usize>,
    pub check: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub print:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, verbose: boolean_t)>,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void),
    >,
    pub force_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub force_unlock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub statistics: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t),
    >,
    pub zone_locked:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub enable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub disable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub discharge: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void),
    >,
    pub enumerate_discharged_pointers: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut malloc_zone_t,
            report_discharged: *mut ::std::os::raw::c_void,
        ),
    >,
    pub reinit_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub print_task: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            level: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            printer: print_task_printer_t,
        ),
    >,
    pub task_statistics: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            stats: *mut malloc_statistics_t,
        ),
    >,
}
extern "C" {
    pub fn malloc_printf(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn malloc_get_all_zones(
        task: task_t,
        reader: memory_reader_t,
        addresses: *mut *mut vm_address_t,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn malloc_zone_print_ptr_info(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_check(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_print(zone: *mut malloc_zone_t, verbose: boolean_t);
}
extern "C" {
    pub fn malloc_zone_statistics(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t);
}
extern "C" {
    pub fn malloc_zone_log(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstats {
    pub bytes_total: usize,
    pub chunks_used: usize,
    pub bytes_used: usize,
    pub chunks_free: usize,
    pub bytes_free: usize,
}
extern "C" {
    pub fn mstats() -> mstats;
}
extern "C" {
    pub fn malloc_zone_enable_discharge_checking(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_disable_discharge_checking(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_discharge(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_enumerate_discharged_pointers(
        zone: *mut malloc_zone_t,
        report_discharged: *mut ::std::os::raw::c_void,
    );
}
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
pub const NXByteOrder_NX_UnknownByteOrder: NXByteOrder = 0;
pub const NXByteOrder_NX_LittleEndian: NXByteOrder = 1;
pub const NXByteOrder_NX_BigEndian: NXByteOrder = 2;
pub type NXByteOrder = ::std::os::raw::c_uint;
pub type fasttrap_instr_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fasttrap_machtp {
    pub ftmt_instr: [u8; 15usize],
    pub ftmt_size: u8,
    pub ftmt_ripmode: u8,
    pub ftmt_modrm: u8,
    pub ftmt_type: u8,
    pub ftmt_code: u8,
    pub ftmt_base: u8,
    pub ftmt_index: u8,
    pub ftmt_scale: u8,
    pub ftmt_segment: u8,
    pub ftmt_dest: user_addr_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
impl fasttrap_machtp {
    #[inline]
    pub fn ftmt_installed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ftmt_installed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ftmt_retired(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ftmt_retired(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ftmt_installed: u8,
        ftmt_retired: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ftmt_installed: u8 = unsafe { ::std::mem::transmute(ftmt_installed) };
            ftmt_installed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ftmt_retired: u8 = unsafe { ::std::mem::transmute(ftmt_retired) };
            ftmt_retired as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type fasttrap_machtp_t = fasttrap_machtp;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ldt_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn i386_get_ldt(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ldt_entry,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn i386_set_ldt(
        arg1: ::std::os::raw::c_int,
        arg2: *const ldt_entry,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub fn au_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_write(d: ::std::os::raw::c_int, m: *mut token_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close(
        d: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
        event: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close_buffer(
        d: ::std::os::raw::c_int,
        event: ::std::os::raw::c_short,
        buffer: *mut u_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close_token(
        tok: *mut token_t,
        buffer: *mut u_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_to_file(file: *const ::std::os::raw::c_char, tm: timeval) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_ex_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
        aia: *mut auditinfo_addr,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header64_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header_ex(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header64(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_ex(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_me() -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u32,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg32(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u32,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg64(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u64,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_data(
        unit_print: ::std::os::raw::c_char,
        unit_type: ::std::os::raw::c_char,
        unit_count: ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exit(retval: ::std::os::raw::c_int, err: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_groups(groups: *mut ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_newgroups(n: u16, groups: *mut gid_t) -> *mut token_t;
}
extern "C" {
    pub fn au_to_in_addr(internet_addr: *mut in_addr) -> *mut token_t;
}
extern "C" {
    pub fn au_to_in_addr_ex(internet_addr: *mut in6_addr) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ip(ip: *mut ip) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ipc(type_: ::std::os::raw::c_char, id: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ipc_perm(perm: *mut ipc_perm) -> *mut token_t;
}
extern "C" {
    pub fn au_to_iport(iport: u16) -> *mut token_t;
}
extern "C" {
    pub fn au_to_opaque(data: *const ::std::os::raw::c_char, bytes: u16) -> *mut token_t;
}
extern "C" {
    pub fn au_to_path(path: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process32(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process64(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process32_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process64_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return(status: ::std::os::raw::c_char, ret: u32) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return32(status: ::std::os::raw::c_char, ret: u32) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return64(status: ::std::os::raw::c_char, ret: u64) -> *mut token_t;
}
extern "C" {
    pub fn au_to_seq(audit_count: ::std::os::raw::c_long) -> *mut token_t;
}
extern "C" {
    pub fn au_to_socket_ex(
        so_domain: u_short,
        so_type: u_short,
        sa_local: *mut sockaddr,
        sa_remote: *mut sockaddr,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet(so: *mut sockaddr_in) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet32(so: *mut sockaddr_in) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet128(so: *mut sockaddr_in6) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_unix(so: *mut sockaddr_un) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject32(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject64(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject32_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject64_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exec_args(argv: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exec_env(envp: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_certificate_hash(hash: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_krb5_principal(principal: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_text(text: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_kevent(kev: *mut kevent) -> *mut token_t;
}
extern "C" {
    pub fn au_to_trailer(rec_size: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_zonename(zonename: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_identity(
        signer_type: u32,
        signing_id: *const ::std::os::raw::c_char,
        signing_id_trunc: u_char,
        team_id: *const ::std::os::raw::c_char,
        team_id_trunc: u_char,
        cdhash: *mut u8,
        cdhash_len: u16,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_bsm_to_domain(
        bsm_domain: u_short,
        local_domainp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_errno(
        bsm_error: u_char,
        errorp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_fcntl_cmd(
        bsm_fcntl_cmd: u_short,
        local_fcntl_cmdp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_socket_type(
        bsm_socket_type: u_short,
        local_socket_typep: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_domain_to_bsm(local_domain: ::std::os::raw::c_int) -> u_short;
}
extern "C" {
    pub fn au_errno_to_bsm(local_errno: ::std::os::raw::c_int) -> u_char;
}
extern "C" {
    pub fn au_fcntl_cmd_to_bsm(local_fcntl_command: ::std::os::raw::c_int) -> u_short;
}
extern "C" {
    pub fn au_socket_type_to_bsm(local_socket_type: ::std::os::raw::c_int) -> u_short;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_event_ent {
    pub ae_number: au_event_t,
    pub ae_name: *mut ::std::os::raw::c_char,
    pub ae_desc: *mut ::std::os::raw::c_char,
    pub ae_class: au_class_t,
}
pub type au_event_ent_t = au_event_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_class_ent {
    pub ac_name: *mut ::std::os::raw::c_char,
    pub ac_class: au_class_t,
    pub ac_desc: *mut ::std::os::raw::c_char,
}
pub type au_class_ent_t = au_class_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_user_ent {
    pub au_name: *mut ::std::os::raw::c_char,
    pub au_always: au_mask_t,
    pub au_never: au_mask_t,
}
pub type au_user_ent_t = au_user_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid32 {
    pub port: u_int32_t,
    pub addr: u_int32_t,
}
pub type au_tid32_t = au_tid32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid64 {
    pub port: u_int64_t,
    pub addr: u_int32_t,
}
pub type au_tid64_t = au_tid64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tidaddr32 {
    pub port: u_int32_t,
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
pub type au_tidaddr32_t = au_tidaddr32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tidaddr64 {
    pub port: u_int64_t,
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
pub type au_tidaddr64_t = au_tidaddr64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arg32_t {
    pub no: u_char,
    pub val: u_int32_t,
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arg64_t {
    pub no: u_char,
    pub val: u_int64_t,
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arb_t {
    pub howtopr: u_char,
    pub bu: u_char,
    pub uc: u_char,
    pub data: *mut u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_attr32_t {
    pub mode: u_int32_t,
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub fsid: u_int32_t,
    pub nid: u_int64_t,
    pub dev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_attr64_t {
    pub mode: u_int32_t,
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub fsid: u_int32_t,
    pub nid: u_int64_t,
    pub dev: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_execarg_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_execenv_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_cert_hash_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_krb5_principal_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_exit_t {
    pub status: u_int32_t,
    pub ret: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_file_t {
    pub s: u_int32_t,
    pub ms: u_int32_t,
    pub len: u_int16_t,
    pub name: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_groups_t {
    pub no: u_int16_t,
    pub list: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header32_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub s: u_int32_t,
    pub ms: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header32_ex_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub ad_type: u_int32_t,
    pub addr: [u_int32_t; 4usize],
    pub s: u_int32_t,
    pub ms: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header64_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub s: u_int64_t,
    pub ms: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header64_ex_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub ad_type: u_int32_t,
    pub addr: [u_int32_t; 4usize],
    pub s: u_int64_t,
    pub ms: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_inaddr_t {
    pub addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_inaddr_ex_t {
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ip_t {
    pub version: u_char,
    pub tos: u_char,
    pub len: u_int16_t,
    pub id: u_int16_t,
    pub offset: u_int16_t,
    pub ttl: u_char,
    pub prot: u_char,
    pub chksm: u_int16_t,
    pub src: u_int32_t,
    pub dest: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ipc_t {
    pub type_: u_char,
    pub id: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ipcperm_t {
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub puid: u_int32_t,
    pub pgid: u_int32_t,
    pub mode: u_int32_t,
    pub seq: u_int32_t,
    pub key: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_iport_t {
    pub port: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_opaque_t {
    pub size: u_int16_t,
    pub data: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_path_t {
    pub len: u_int16_t,
    pub path: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc32_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc64_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc32ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc64ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ret32_t {
    pub status: u_char,
    pub ret: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ret64_t {
    pub err: u_char,
    pub val: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_seq_t {
    pub seqno: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socket_t {
    pub type_: u_int16_t,
    pub l_port: u_int16_t,
    pub l_addr: u_int32_t,
    pub r_port: u_int16_t,
    pub r_addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socket_ex32_t {
    pub domain: u_int16_t,
    pub type_: u_int16_t,
    pub atype: u_int16_t,
    pub l_port: u_int16_t,
    pub l_addr: [u_int32_t; 4usize],
    pub r_port: u_int32_t,
    pub r_addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketinet_ex32_t {
    pub family: u_int16_t,
    pub port: u_int16_t,
    pub addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketinet32_t {
    pub family: u_int16_t,
    pub port: u_int16_t,
    pub addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketunix_t {
    pub family: u_int16_t,
    pub path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject32_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject64_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject32ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject64ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_text_t {
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_zonename_t {
    pub len: u_int16_t,
    pub zonename: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_kevent_t {
    pub ident: u_int32_t,
    pub filter: u_int16_t,
    pub flags: u_int16_t,
    pub fflags: u_int32_t,
    pub data: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_invalid_t {
    pub length: u_int16_t,
    pub data: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_identity_t {
    pub signer_type: u_int32_t,
    pub signing_id_len: u_int16_t,
    pub signing_id: *mut ::std::os::raw::c_char,
    pub signing_id_truncated: u_char,
    pub team_id_len: u_int16_t,
    pub team_id: *mut ::std::os::raw::c_char,
    pub team_id_truncated: u_char,
    pub cdhash_len: u_int16_t,
    pub cdhash: *mut u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_trailer_t {
    pub magic: u_int16_t,
    pub count: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tokenstr {
    pub __bindgen_anon_1: tokenstr__bindgen_ty_1,
    pub id: u_char,
    pub data: *mut u_char,
    pub len: usize,
    pub tt: tokenstr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tokenstr__bindgen_ty_1 {
    pub arg32: au_arg32_t,
    pub arg64: au_arg64_t,
    pub arb: au_arb_t,
    pub attr32: au_attr32_t,
    pub attr64: au_attr64_t,
    pub execarg: au_execarg_t,
    pub execenv: au_execenv_t,
    pub exit: au_exit_t,
    pub file: au_file_t,
    pub grps: au_groups_t,
    pub hdr32: au_header32_t,
    pub hdr32_ex: au_header32_ex_t,
    pub hdr64: au_header64_t,
    pub hdr64_ex: au_header64_ex_t,
    pub inaddr: au_inaddr_t,
    pub inaddr_ex: au_inaddr_ex_t,
    pub ip: au_ip_t,
    pub ipc: au_ipc_t,
    pub ipcperm: au_ipcperm_t,
    pub iport: au_iport_t,
    pub opaque: au_opaque_t,
    pub path: au_path_t,
    pub proc32: au_proc32_t,
    pub proc32_ex: au_proc32ex_t,
    pub proc64: au_proc64_t,
    pub proc64_ex: au_proc64ex_t,
    pub ret32: au_ret32_t,
    pub ret64: au_ret64_t,
    pub seq: au_seq_t,
    pub socket: au_socket_t,
    pub socket_ex32: au_socket_ex32_t,
    pub sockinet_ex32: au_socketinet_ex32_t,
    pub sockunix: au_socketunix_t,
    pub subj32: au_subject32_t,
    pub subj32_ex: au_subject32ex_t,
    pub subj64: au_subject64_t,
    pub subj64_ex: au_subject64ex_t,
    pub text: au_text_t,
    pub kevent: au_kevent_t,
    pub invalid: au_invalid_t,
    pub trail: au_trailer_t,
    pub zonename: au_zonename_t,
    pub cert_hash: au_cert_hash_t,
    pub krb5_principal: au_krb5_principal_t,
    pub identity: au_identity_t,
}
pub type tokenstr_t = tokenstr;
extern "C" {
    pub fn audit_submit(
        au_event: ::std::os::raw::c_short,
        auid: au_id_t,
        status: ::std::os::raw::c_char,
        reterr: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauclass();
}
extern "C" {
    pub fn endauclass();
}
extern "C" {
    pub fn getauclassent() -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassent_r(class_int: *mut au_class_ent_t) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnam(name: *const ::std::os::raw::c_char) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnam_r(
        class_int: *mut au_class_ent_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnum(class_number: au_class_t) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnum_r(
        class_int: *mut au_class_ent_t,
        class_number: au_class_t,
    ) -> *mut au_class_ent;
}
extern "C" {
    pub fn setac();
}
extern "C" {
    pub fn endac();
}
extern "C" {
    pub fn getacdir(
        name: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacmin(min_val: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacfilesz(size_val: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacflg(
        auditstr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacna(
        auditstr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacpol(auditstr: *mut ::std::os::raw::c_char, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacsflagsmask(
        which: *const ::std::os::raw::c_char,
        auditstr: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getachost(auditstr: *mut ::std::os::raw::c_char, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacexpire(
        andflg: *mut ::std::os::raw::c_int,
        age: *mut time_t,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauditflagsbin(
        auditstr: *mut ::std::os::raw::c_char,
        masks: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauditflagschar(
        auditstr: *mut ::std::os::raw::c_char,
        masks: *mut au_mask_t,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_preselect(
        event: au_event_t,
        mask_p: *mut au_mask_t,
        sorf: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_poltostr(
        policy: ::std::os::raw::c_int,
        maxsize: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn au_strtopol(
        polstr: *const ::std::os::raw::c_char,
        policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sflagstostr(flags: u64, maxsize: usize, buf: *mut ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn au_strtosflags(
        sflagsstr: *const ::std::os::raw::c_char,
        flags: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauevent();
}
extern "C" {
    pub fn endauevent();
}
extern "C" {
    pub fn getauevent() -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevent_r(e: *mut au_event_ent) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnam(name: *const ::std::os::raw::c_char) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnam_r(
        e: *mut au_event_ent,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnum(event_number: au_event_t) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnum_r(e: *mut au_event_ent, event_number: au_event_t) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnonam(event_name: *const ::std::os::raw::c_char) -> *mut au_event_t;
}
extern "C" {
    pub fn getauevnonam_r(
        ev: *mut au_event_t,
        event_name: *const ::std::os::raw::c_char,
    ) -> *mut au_event_t;
}
extern "C" {
    pub fn setauuser();
}
extern "C" {
    pub fn endauuser();
}
extern "C" {
    pub fn getauuserent() -> *mut au_user_ent;
}
extern "C" {
    pub fn getauuserent_r(u: *mut au_user_ent) -> *mut au_user_ent;
}
extern "C" {
    pub fn getauusernam(name: *const ::std::os::raw::c_char) -> *mut au_user_ent;
}
extern "C" {
    pub fn getauusernam_r(
        u: *mut au_user_ent,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_user_ent;
}
extern "C" {
    pub fn au_user_mask(
        username: *mut ::std::os::raw::c_char,
        mask_p: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfauditflags(
        usremask: *mut au_mask_t,
        usrdmask: *mut au_mask_t,
        lastmask: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_read_rec(fp: *mut FILE, buf: *mut *mut u_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_fetch_tok(
        tok: *mut tokenstr_t,
        buf: *mut u_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_print_tok(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        raw: ::std::os::raw::c_char,
        sfrm: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn au_print_flags_tok(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn au_print_tok_xml(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        raw: ::std::os::raw::c_char,
        sfrm: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn au_print_xml_header(outfp: *mut FILE);
}
extern "C" {
    pub fn au_print_xml_footer(outfp: *mut FILE);
}
extern "C" {
    pub fn au_strerror(bsm_error: u_char) -> *const ::std::os::raw::c_char;
}
pub const kAUNoErr: _bindgen_ty_18 = 0;
pub const kAUBadParamErr: _bindgen_ty_18 = -66049;
pub const kAUStatErr: _bindgen_ty_18 = -66048;
pub const kAUSysctlErr: _bindgen_ty_18 = -66047;
pub const kAUOpenErr: _bindgen_ty_18 = -66046;
pub const kAUMakeSubjectTokErr: _bindgen_ty_18 = -66045;
pub const kAUWriteSubjectTokErr: _bindgen_ty_18 = -66044;
pub const kAUWriteCallerTokErr: _bindgen_ty_18 = -66043;
pub const kAUMakeReturnTokErr: _bindgen_ty_18 = -66042;
pub const kAUWriteReturnTokErr: _bindgen_ty_18 = -66041;
pub const kAUCloseErr: _bindgen_ty_18 = -66040;
pub const kAUMakeTextTokErr: _bindgen_ty_18 = -66039;
pub const kAULastErr: _bindgen_ty_18 = -66038;
pub type _bindgen_ty_18 = ::std::os::raw::c_int;
extern "C" {
    pub fn au_free_token(tok: *mut token_t);
}
extern "C" {
    pub fn au_get_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_notify_initialize() -> u32;
}
extern "C" {
    pub fn au_notify_terminate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cannot_audit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_terminal_id_ex(tid: *mut au_tid_addr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_terminal_id(tid: *mut au_tid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write(
        event_code: ::std::os::raw::c_short,
        subject: *mut token_t,
        misctok: *mut token_t,
        retval: ::std::os::raw::c_char,
        errcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success_ex(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success_self(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_ex(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_self(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_na_ex(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        euid: uid_t,
        egid: gid_t,
        pid: pid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_na(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        euid: uid_t,
        egid: gid_t,
        pid: pid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_token_to_au32(
        atoken: audit_token_t,
        auidp: *mut uid_t,
        euidp: *mut uid_t,
        egidp: *mut gid_t,
        ruidp: *mut uid_t,
        rgidp: *mut gid_t,
        pidp: *mut pid_t,
        asidp: *mut au_asid_t,
        tidp: *mut au_tid_t,
    );
}
extern "C" {
    pub fn audit_token_to_auid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_euid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_egid(atoken: audit_token_t) -> gid_t;
}
extern "C" {
    pub fn audit_token_to_ruid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_rgid(atoken: audit_token_t) -> gid_t;
}
extern "C" {
    pub fn audit_token_to_pid(atoken: audit_token_t) -> pid_t;
}
extern "C" {
    pub fn audit_token_to_asid(atoken: audit_token_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_token_to_pidversion(atoken: audit_token_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_car(path: *mut ::std::os::raw::c_char, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_class(evc_map: *mut au_evclass_map_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_class(evc_map: *mut au_evclass_map_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_cond(cond: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_cond(cond: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_cwd(path: *mut ::std::os::raw::c_char, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_fsize(fstat: *mut au_fstat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_fsize(fstat: *mut au_fstat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_kmask(kmask: *mut au_mask_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_kmask(kmask: *mut au_mask_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_kaudit(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_kaudit(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_pmask(api: *mut auditpinfo_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_pinfo(api: *mut auditpinfo_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_pinfo_addr(apia: *mut auditpinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_policy(policy: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_policy(policy: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_qctrl(qctrl: *mut au_qctrl_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_qctrl(qctrl: *mut au_qctrl_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sflags(flags: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_sflags(flags: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sflags_mask(
        which: *const ::std::os::raw::c_char,
        mask: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_sflags_mask(
        which: *const ::std::os::raw::c_char,
        mask: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sinfo_addr(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_stat(stats: *mut au_stat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_stat(stats: *mut au_stat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_send_trigger(trigger: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_ctlmode(mode: *mut au_ctlmode_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_expire_after(
        expire: *mut au_expire_after_t,
        sz: usize,
    ) -> ::std::os::raw::c_int;
}
pub type audit_filter_attach_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type audit_filter_reinit_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type audit_filter_record_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        ts: *mut timespec,
        token_count: ::std::os::raw::c_int,
        tok: *const tokenstr_t,
    ),
>;
pub type audit_filter_rawrecord_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        ts: *mut timespec,
        data: *mut ::std::os::raw::c_void,
        len: u_int,
    ),
>;
pub type audit_filter_detach_t =
    ::std::option::Option<unsafe extern "C" fn(instance: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token {
    pub __bindgen_anon_1: au_token__bindgen_ty_1,
    pub t_data: *mut u_char,
    pub len: usize,
    pub tokens: au_token__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token__bindgen_ty_1 {
    pub tqe_next: *mut au_token,
    pub tqe_prev: *mut *mut au_token,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record {
    pub __bindgen_anon_1: au_record__bindgen_ty_1,
    pub __bindgen_anon_2: au_record__bindgen_ty_2,
    pub used: ::std::os::raw::c_char,
    pub desc: ::std::os::raw::c_int,
    pub token_q: au_record__bindgen_ty_1,
    pub data: *mut u_char,
    pub len: usize,
    pub au_rec_q: au_record__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record__bindgen_ty_1 {
    pub tqh_first: *mut au_token,
    pub tqh_last: *mut *mut au_token,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record__bindgen_ty_2 {
    pub le_next: *mut au_record,
    pub le_prev: *mut *mut au_record,
}
pub type au_record_t = au_record;
pub const audit_session_flags_AU_SESSION_FLAG_IS_INITIAL: audit_session_flags = 1;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_GRAPHIC_ACCESS: audit_session_flags = 16;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_TTY: audit_session_flags = 32;
pub const audit_session_flags_AU_SESSION_FLAG_IS_REMOTE: audit_session_flags = 4096;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_CONSOLE_ACCESS: audit_session_flags = 8192;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_AUTHENTICATED: audit_session_flags = 16384;
pub type audit_session_flags = ::std::os::raw::c_uint;
pub const au_sdev_open_flags_AU_SDEVF_NONBLOCK: au_sdev_open_flags = 1;
pub const au_sdev_open_flags_AU_SDEVF_ALLSESSIONS: au_sdev_open_flags = 65536;
pub type au_sdev_open_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_sdev_handle {
    pub ash_fp: *mut FILE,
    pub ash_buf: *mut u_char,
    pub ash_reclen: ::std::os::raw::c_int,
    pub ash_bytesread: ::std::os::raw::c_int,
}
pub type au_sdev_handle_t = au_sdev_handle;
extern "C" {
    pub fn au_sdev_open(flags: ::std::os::raw::c_int) -> *mut au_sdev_handle_t;
}
extern "C" {
    pub fn au_sdev_close(ash: *mut au_sdev_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sdev_fd(ash: *mut au_sdev_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sdev_read_aia(
        ash: *mut au_sdev_handle_t,
        event: *mut ::std::os::raw::c_int,
        aia_p: *mut auditinfo_addr_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSUniStr255 {
    pub length: u_int16_t,
    pub unicode: [u_int16_t; 255usize],
}
pub type ConstHFSUniStr255Param = *const HFSUniStr255;
pub const kHFSSigWord: _bindgen_ty_19 = 16964;
pub const kHFSPlusSigWord: _bindgen_ty_19 = 18475;
pub const kHFSXSigWord: _bindgen_ty_19 = 18520;
pub const kHFSPlusVersion: _bindgen_ty_19 = 4;
pub const kHFSXVersion: _bindgen_ty_19 = 5;
pub const kHFSPlusMountVersion: _bindgen_ty_19 = 825241136;
pub const kHFSJMountVersion: _bindgen_ty_19 = 1212568394;
pub const kFSKMountVersion: _bindgen_ty_19 = 1179863841;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const kHardLinkFileType: _bindgen_ty_20 = 1751936619;
pub const kHFSPlusCreator: _bindgen_ty_20 = 1751544619;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const kSymLinkFileType: _bindgen_ty_21 = 1936485995;
pub const kSymLinkCreator: _bindgen_ty_21 = 1919443312;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const kHFSMaxVolumeNameChars: _bindgen_ty_22 = 27;
pub const kHFSMaxFileNameChars: _bindgen_ty_22 = 31;
pub const kHFSPlusMaxFileNameChars: _bindgen_ty_22 = 255;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSExtentKey {
    pub keyLength: u_int8_t,
    pub forkType: u_int8_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusExtentKey {
    pub keyLength: u_int16_t,
    pub forkType: u_int8_t,
    pub pad: u_int8_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int32_t,
}
pub const kHFSExtentDensity: _bindgen_ty_23 = 3;
pub const kHFSPlusExtentDensity: _bindgen_ty_23 = 8;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSExtentDescriptor {
    pub startBlock: u_int16_t,
    pub blockCount: u_int16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusExtentDescriptor {
    pub startBlock: u_int32_t,
    pub blockCount: u_int32_t,
}
pub type HFSExtentRecord = [HFSExtentDescriptor; 3usize];
pub type HFSPlusExtentRecord = [HFSPlusExtentDescriptor; 8usize];
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrFileInfo {
    pub __bindgen_anon_1: FndrFileInfo__bindgen_ty_1,
    pub fdType: u_int32_t,
    pub fdCreator: u_int32_t,
    pub fdFlags: u_int16_t,
    pub fdLocation: FndrFileInfo__bindgen_ty_1,
    pub opaque: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrFileInfo__bindgen_ty_1 {
    pub v: i16,
    pub h: i16,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo {
    pub __bindgen_anon_1: FndrDirInfo__bindgen_ty_1,
    pub __bindgen_anon_2: FndrDirInfo__bindgen_ty_2,
    pub frRect: FndrDirInfo__bindgen_ty_1,
    pub frFlags: ::std::os::raw::c_ushort,
    pub frLocation: FndrDirInfo__bindgen_ty_2,
    pub opaque: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo__bindgen_ty_1 {
    pub top: i16,
    pub left: i16,
    pub bottom: i16,
    pub right: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo__bindgen_ty_2 {
    pub v: u_int16_t,
    pub h: u_int16_t,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrOpaqueInfo {
    pub _bindgen_opaque_blob: [u16; 8usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrExtendedDirInfo {
    pub document_id: u_int32_t,
    pub date_added: u_int32_t,
    pub extended_flags: u_int16_t,
    pub reserved3: u_int16_t,
    pub write_gen_counter: u_int32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrExtendedFileInfo {
    pub document_id: u_int32_t,
    pub date_added: u_int32_t,
    pub extended_flags: u_int16_t,
    pub reserved2: u_int16_t,
    pub write_gen_counter: u_int32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusForkData {
    pub logicalSize: u_int64_t,
    pub clumpSize: u_int32_t,
    pub totalBlocks: u_int32_t,
    pub extents: HFSPlusExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct HFSPlusBSDInfo {
    pub __bindgen_anon_1: HFSPlusBSDInfo__bindgen_ty_1,
    pub ownerID: u_int32_t,
    pub groupID: u_int32_t,
    pub adminFlags: u_int8_t,
    pub ownerFlags: u_int8_t,
    pub fileMode: u_int16_t,
    pub special: HFSPlusBSDInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HFSPlusBSDInfo__bindgen_ty_1 {
    pub iNodeNum: u_int32_t,
    pub linkCount: u_int32_t,
    pub rawDevice: u_int32_t,
}
pub const kHFSRootParentID: _bindgen_ty_24 = 1;
pub const kHFSRootFolderID: _bindgen_ty_24 = 2;
pub const kHFSExtentsFileID: _bindgen_ty_24 = 3;
pub const kHFSCatalogFileID: _bindgen_ty_24 = 4;
pub const kHFSBadBlockFileID: _bindgen_ty_24 = 5;
pub const kHFSAllocationFileID: _bindgen_ty_24 = 6;
pub const kHFSStartupFileID: _bindgen_ty_24 = 7;
pub const kHFSAttributesFileID: _bindgen_ty_24 = 8;
pub const kHFSAttributeDataFileID: _bindgen_ty_24 = 13;
pub const kHFSRepairCatalogFileID: _bindgen_ty_24 = 14;
pub const kHFSBogusExtentFileID: _bindgen_ty_24 = 15;
pub const kHFSFirstUserCatalogNodeID: _bindgen_ty_24 = 16;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSCatalogKey {
    pub keyLength: u_int8_t,
    pub reserved: u_int8_t,
    pub parentID: u_int32_t,
    pub nodeName: [u_int8_t; 32usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusCatalogKey {
    pub keyLength: u_int16_t,
    pub parentID: u_int32_t,
    pub nodeName: HFSUniStr255,
}
pub const kHFSFolderRecord: _bindgen_ty_25 = 256;
pub const kHFSFileRecord: _bindgen_ty_25 = 512;
pub const kHFSFolderThreadRecord: _bindgen_ty_25 = 768;
pub const kHFSFileThreadRecord: _bindgen_ty_25 = 1024;
pub const kHFSPlusFolderRecord: _bindgen_ty_25 = 1;
pub const kHFSPlusFileRecord: _bindgen_ty_25 = 2;
pub const kHFSPlusFolderThreadRecord: _bindgen_ty_25 = 3;
pub const kHFSPlusFileThreadRecord: _bindgen_ty_25 = 4;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const kHFSFileLockedBit: _bindgen_ty_26 = 0;
pub const kHFSFileLockedMask: _bindgen_ty_26 = 1;
pub const kHFSThreadExistsBit: _bindgen_ty_26 = 1;
pub const kHFSThreadExistsMask: _bindgen_ty_26 = 2;
pub const kHFSHasAttributesBit: _bindgen_ty_26 = 2;
pub const kHFSHasAttributesMask: _bindgen_ty_26 = 4;
pub const kHFSHasSecurityBit: _bindgen_ty_26 = 3;
pub const kHFSHasSecurityMask: _bindgen_ty_26 = 8;
pub const kHFSHasFolderCountBit: _bindgen_ty_26 = 4;
pub const kHFSHasFolderCountMask: _bindgen_ty_26 = 16;
pub const kHFSHasLinkChainBit: _bindgen_ty_26 = 5;
pub const kHFSHasLinkChainMask: _bindgen_ty_26 = 32;
pub const kHFSHasChildLinkBit: _bindgen_ty_26 = 6;
pub const kHFSHasChildLinkMask: _bindgen_ty_26 = 64;
pub const kHFSHasDateAddedBit: _bindgen_ty_26 = 7;
pub const kHFSHasDateAddedMask: _bindgen_ty_26 = 128;
pub const kHFSFastDevPinnedBit: _bindgen_ty_26 = 8;
pub const kHFSFastDevPinnedMask: _bindgen_ty_26 = 256;
pub const kHFSDoNotFastDevPinBit: _bindgen_ty_26 = 9;
pub const kHFSDoNotFastDevPinMask: _bindgen_ty_26 = 512;
pub const kHFSFastDevCandidateBit: _bindgen_ty_26 = 10;
pub const kHFSFastDevCandidateMask: _bindgen_ty_26 = 1024;
pub const kHFSAutoCandidateBit: _bindgen_ty_26 = 11;
pub const kHFSAutoCandidateMask: _bindgen_ty_26 = 2048;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(2))]
pub struct HFSCatalogFolder {
    pub _bindgen_opaque_blob: [u16; 35usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSPlusCatalogFolder {
    pub _bindgen_opaque_blob: [u16; 44usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSCatalogFile {
    pub _bindgen_opaque_blob: [u16; 51usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSPlusCatalogFile {
    pub _bindgen_opaque_blob: [u16; 124usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSCatalogThread {
    pub recordType: i16,
    pub reserved: [i32; 2usize],
    pub parentID: u_int32_t,
    pub nodeName: [u_int8_t; 32usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusCatalogThread {
    pub recordType: i16,
    pub reserved: i16,
    pub parentID: u_int32_t,
    pub nodeName: HFSUniStr255,
}
pub const kHFSPlusAttrInlineData: _bindgen_ty_27 = 16;
pub const kHFSPlusAttrForkData: _bindgen_ty_27 = 32;
pub const kHFSPlusAttrExtents: _bindgen_ty_27 = 48;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrForkData {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub theFork: HFSPlusForkData,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrExtents {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub extents: HFSPlusExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrData {
    pub recordType: u_int32_t,
    pub reserved: [u_int32_t; 2usize],
    pub attrSize: u_int32_t,
    pub attrData: [u_int8_t; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrInlineData {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub logicalSize: u_int32_t,
    pub userData: [u_int8_t; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HFSPlusAttrRecord {
    pub recordType: u_int32_t,
    pub inlineData: HFSPlusAttrInlineData,
    pub attrData: HFSPlusAttrData,
    pub forkData: HFSPlusAttrForkData,
    pub overflowExtents: HFSPlusAttrExtents,
}
pub const kHFSMaxAttrNameLen: _bindgen_ty_28 = 127;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrKey {
    pub keyLength: u_int16_t,
    pub pad: u_int16_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int32_t,
    pub attrNameLen: u_int16_t,
    pub attrName: [u_int16_t; 127usize],
}
pub const kHFSPlusExtentKeyMaximumLength: _bindgen_ty_29 = 10;
pub const kHFSExtentKeyMaximumLength: _bindgen_ty_29 = 7;
pub const kHFSPlusCatalogKeyMaximumLength: _bindgen_ty_29 = 516;
pub const kHFSPlusCatalogKeyMinimumLength: _bindgen_ty_29 = 6;
pub const kHFSCatalogKeyMaximumLength: _bindgen_ty_29 = 37;
pub const kHFSCatalogKeyMinimumLength: _bindgen_ty_29 = 6;
pub const kHFSPlusCatalogMinNodeSize: _bindgen_ty_29 = 4096;
pub const kHFSPlusExtentMinNodeSize: _bindgen_ty_29 = 512;
pub const kHFSPlusAttrMinNodeSize: _bindgen_ty_29 = 4096;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const kHFSVolumeHardwareLockBit: _bindgen_ty_30 = 7;
pub const kHFSVolumeUnmountedBit: _bindgen_ty_30 = 8;
pub const kHFSVolumeSparedBlocksBit: _bindgen_ty_30 = 9;
pub const kHFSVolumeNoCacheRequiredBit: _bindgen_ty_30 = 10;
pub const kHFSBootVolumeInconsistentBit: _bindgen_ty_30 = 11;
pub const kHFSCatalogNodeIDsReusedBit: _bindgen_ty_30 = 12;
pub const kHFSVolumeJournaledBit: _bindgen_ty_30 = 13;
pub const kHFSVolumeInconsistentBit: _bindgen_ty_30 = 14;
pub const kHFSVolumeSoftwareLockBit: _bindgen_ty_30 = 15;
pub const kHFSUnusedNodeFixBit: _bindgen_ty_30 = 31;
pub const kHFSContentProtectionBit: _bindgen_ty_30 = 30;
pub const kHFSVolumeHardwareLockMask: _bindgen_ty_30 = 128;
pub const kHFSVolumeUnmountedMask: _bindgen_ty_30 = 256;
pub const kHFSVolumeSparedBlocksMask: _bindgen_ty_30 = 512;
pub const kHFSVolumeNoCacheRequiredMask: _bindgen_ty_30 = 1024;
pub const kHFSBootVolumeInconsistentMask: _bindgen_ty_30 = 2048;
pub const kHFSCatalogNodeIDsReusedMask: _bindgen_ty_30 = 4096;
pub const kHFSVolumeJournaledMask: _bindgen_ty_30 = 8192;
pub const kHFSVolumeInconsistentMask: _bindgen_ty_30 = 16384;
pub const kHFSVolumeSoftwareLockMask: _bindgen_ty_30 = 32768;
pub const kHFSContentProtectionMask: _bindgen_ty_30 = 1073741824;
pub const kHFSUnusedNodeFixMask: _bindgen_ty_30 = 2147483648;
pub const kHFSMDBAttributesMask: _bindgen_ty_30 = 33664;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const kHFSUnusedNodesFixDate: _bindgen_ty_31 = 3320784000;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSMasterDirectoryBlock {
    pub drSigWord: u_int16_t,
    pub drCrDate: u_int32_t,
    pub drLsMod: u_int32_t,
    pub drAtrb: u_int16_t,
    pub drNmFls: u_int16_t,
    pub drVBMSt: u_int16_t,
    pub drAllocPtr: u_int16_t,
    pub drNmAlBlks: u_int16_t,
    pub drAlBlkSiz: u_int32_t,
    pub drClpSiz: u_int32_t,
    pub drAlBlSt: u_int16_t,
    pub drNxtCNID: u_int32_t,
    pub drFreeBks: u_int16_t,
    pub drVN: [u_int8_t; 28usize],
    pub drVolBkUp: u_int32_t,
    pub drVSeqNum: u_int16_t,
    pub drWrCnt: u_int32_t,
    pub drXTClpSiz: u_int32_t,
    pub drCTClpSiz: u_int32_t,
    pub drNmRtDirs: u_int16_t,
    pub drFilCnt: u_int32_t,
    pub drDirCnt: u_int32_t,
    pub drFndrInfo: [u_int32_t; 8usize],
    pub drEmbedSigWord: u_int16_t,
    pub drEmbedExtent: HFSExtentDescriptor,
    pub drXTFlSize: u_int32_t,
    pub drXTExtRec: HFSExtentRecord,
    pub drCTFlSize: u_int32_t,
    pub drCTExtRec: HFSExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusVolumeHeader {
    pub signature: u_int16_t,
    pub version: u_int16_t,
    pub attributes: u_int32_t,
    pub lastMountedVersion: u_int32_t,
    pub journalInfoBlock: u_int32_t,
    pub createDate: u_int32_t,
    pub modifyDate: u_int32_t,
    pub backupDate: u_int32_t,
    pub checkedDate: u_int32_t,
    pub fileCount: u_int32_t,
    pub folderCount: u_int32_t,
    pub blockSize: u_int32_t,
    pub totalBlocks: u_int32_t,
    pub freeBlocks: u_int32_t,
    pub nextAllocation: u_int32_t,
    pub rsrcClumpSize: u_int32_t,
    pub dataClumpSize: u_int32_t,
    pub nextCatalogID: u_int32_t,
    pub writeCount: u_int32_t,
    pub encodingsBitmap: u_int64_t,
    pub finderInfo: [u_int8_t; 32usize],
    pub allocationFile: HFSPlusForkData,
    pub extentsFile: HFSPlusForkData,
    pub catalogFile: HFSPlusForkData,
    pub attributesFile: HFSPlusForkData,
    pub startupFile: HFSPlusForkData,
}
pub const BTreeKeyLimits_kMaxKeyLength: BTreeKeyLimits = 520;
pub type BTreeKeyLimits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union BTreeKey {
    pub length8: u_int8_t,
    pub length16: u_int16_t,
    pub rawData: [u_int8_t; 522usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BTNodeDescriptor {
    pub fLink: u_int32_t,
    pub bLink: u_int32_t,
    pub kind: i8,
    pub height: u_int8_t,
    pub numRecords: u_int16_t,
    pub reserved: u_int16_t,
}
pub const kBTLeafNode: _bindgen_ty_32 = -1;
pub const kBTIndexNode: _bindgen_ty_32 = 0;
pub const kBTHeaderNode: _bindgen_ty_32 = 1;
pub const kBTMapNode: _bindgen_ty_32 = 2;
pub type _bindgen_ty_32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BTHeaderRec {
    pub treeDepth: u_int16_t,
    pub rootNode: u_int32_t,
    pub leafRecords: u_int32_t,
    pub firstLeafNode: u_int32_t,
    pub lastLeafNode: u_int32_t,
    pub nodeSize: u_int16_t,
    pub maxKeyLength: u_int16_t,
    pub totalNodes: u_int32_t,
    pub freeNodes: u_int32_t,
    pub reserved1: u_int16_t,
    pub clumpSize: u_int32_t,
    pub btreeType: u_int8_t,
    pub keyCompareType: u_int8_t,
    pub attributes: u_int32_t,
    pub reserved3: [u_int32_t; 16usize],
}
pub const kBTBadCloseMask: _bindgen_ty_33 = 1;
pub const kBTBigKeysMask: _bindgen_ty_33 = 2;
pub const kBTVariableIndexKeysMask: _bindgen_ty_33 = 4;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const kHFSCaseFolding: _bindgen_ty_34 = 207;
pub const kHFSBinaryCompare: _bindgen_ty_34 = 188;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct JournalInfoBlock {
    pub flags: u_int32_t,
    pub device_signature: [u_int32_t; 8usize],
    pub offset: u_int64_t,
    pub size: u_int64_t,
    pub ext_jnl_uuid: uuid_string_t,
    pub machine_serial_num: [::std::os::raw::c_char; 48usize],
    pub reserved: [::std::os::raw::c_char; 43usize],
}
pub const kJIJournalInFSMask: _bindgen_ty_35 = 1;
pub const kJIJournalOnOtherDeviceMask: _bindgen_ty_35 = 2;
pub const kJIJournalNeedInitMask: _bindgen_ty_35 = 4;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub type text_encoding_t = u_int32_t;
pub type fsobj_type_t = u_int32_t;
pub type fsobj_tag_t = u_int32_t;
pub type fsfile_type_t = u_int32_t;
pub type fsvolid_t = u_int32_t;
pub type attrgroup_t = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrlist {
    pub bitmapcount: u_short,
    pub reserved: u_int16_t,
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_set {
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
pub type attribute_set_t = attribute_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrreference {
    pub attr_dataoffset: i32,
    pub attr_length: u_int32_t,
}
pub type attrreference_t = attrreference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diskextent {
    pub startblock: u_int32_t,
    pub blockcount: u_int32_t,
}
pub type extentrecord = [diskextent; 8usize];
pub type vol_capabilities_set_t = [u_int32_t; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_capabilities_attr {
    pub capabilities: vol_capabilities_set_t,
    pub valid: vol_capabilities_set_t,
}
pub type vol_capabilities_attr_t = vol_capabilities_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_attributes_attr {
    pub validattr: attribute_set_t,
    pub nativeattr: attribute_set_t,
}
pub type vol_attributes_attr_t = vol_attributes_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    pub returnattrs: *mut attrlist,
    pub returnbuffer: *mut ::std::os::raw::c_void,
    pub returnbuffersize: usize,
    pub maxmatches: u_long,
    pub timelimit: timeval,
    pub searchparams1: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams1: usize,
    pub searchparams2: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams2: usize,
    pub searchattrs: attrlist,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    pub ss_union_flags: u32,
    pub ss_union_layer: u32,
    pub ss_fsstate: [u_char; 548usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs64 {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vfsstatfs {
    pub f_bsize: u32,
    pub f_iosize: usize,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_bused: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_flags: u64,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_fssubtype: u32,
    pub f_reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount {
    _unused: [u8; 0],
}
pub type mount_t = *mut mount;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode {
    _unused: [u8; 0],
}
pub type vnode_t = *mut vnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsconf {
    pub vfc_reserved1: u32,
    pub vfc_name: [::std::os::raw::c_char; 15usize],
    pub vfc_typenum: ::std::os::raw::c_int,
    pub vfc_refcount: ::std::os::raw::c_int,
    pub vfc_flags: ::std::os::raw::c_int,
    pub vfc_reserved2: u32,
    pub vfc_reserved3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsidctl {
    pub vc_vers: ::std::os::raw::c_int,
    pub vc_fsid: fsid_t,
    pub vc_ptr: *mut ::std::os::raw::c_void,
    pub vc_len: usize,
    pub vc_spare: [u_int32_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsquery {
    pub vq_flags: u_int32_t,
    pub vq_spare: [u_int32_t; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_server {
    pub vs_minutes: i32,
    pub vs_server_name: [u_int8_t; 768usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct netfs_status {
    pub ns_status: u_int32_t,
    pub ns_mountopts: [::std::os::raw::c_char; 512usize],
    pub ns_waittime: u32,
    pub ns_threadcount: u32,
    pub ns_threadids: __IncompleteArrayField<u64>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fhandle {
    pub fh_len: ::std::os::raw::c_uint,
    pub fh_data: [::std::os::raw::c_uchar; 128usize],
}
pub type fhandle_t = fhandle;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_BOOT: graftdmg_type_t = 1;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_PREBOOT: graftdmg_type_t = 2;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_DOWNLEVEL: graftdmg_type_t = 3;
pub type graftdmg_type_t = u32;
extern "C" {
    pub fn fhopen(arg1: *const fhandle, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatfs$INODE64"]
    pub fn fstatfs(arg1: ::std::os::raw::c_int, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatfs64(arg1: ::std::os::raw::c_int, arg2: *mut statfs64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfh(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fhandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getfsstat$INODE64"]
    pub fn getfsstat(
        arg1: *mut statfs,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfsstat64(
        arg1: *mut statfs64,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmntinfo$INODE64"]
    pub fn getmntinfo(arg1: *mut *mut statfs, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmntinfo_r_np$INODE64"]
    pub fn getmntinfo_r_np(
        arg1: *mut *mut statfs,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo64(
        arg1: *mut *mut statfs64,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statfs$INODE64"]
    pub fn statfs(arg1: *const ::std::os::raw::c_char, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statfs64(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statfs64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvfsbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut vfsconf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hfs_mount_args {
    pub fspec: *mut ::std::os::raw::c_char,
    pub hfs_uid: uid_t,
    pub hfs_gid: gid_t,
    pub hfs_mask: mode_t,
    pub hfs_encoding: u_int32_t,
    pub hfs_timezone: timezone,
    pub flags: ::std::os::raw::c_int,
    pub journal_tbuffer_size: ::std::os::raw::c_int,
    pub journal_flags: ::std::os::raw::c_int,
    pub journal_disable: ::std::os::raw::c_int,
}
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn unctrl(arg1: chtype) -> *mut ::std::os::raw::c_char;
}
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st {
    _unused: [u8; 0],
}
pub type WINDOW = _win_st;
pub type attr_t = chtype;
extern "C" {
    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_get(
        arg1: *mut attr_t,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baudrate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgdset(arg1: chtype);
}
extern "C" {
    pub fn border(
        arg1: chtype,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_box"]
    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color() -> bool;
}
extern "C" {
    pub fn cbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chgat(
        arg1: ::std::os::raw::c_int,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtobot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtoeol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_set(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copywin(
        arg1: *const WINDOW,
        arg2: *mut WINDOW,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delscreen(arg1: *mut SCREEN);
}
extern "C" {
    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn derwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn doupdate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn echo() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erase() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter();
}
extern "C" {
    pub fn flash() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors() -> bool;
}
extern "C" {
    pub fn has_ic() -> bool;
}
extern "C" {
    pub fn has_il() -> bool;
}
extern "C" {
    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idcok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn immedok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn inch() -> chtype;
}
extern "C" {
    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initscr() -> *mut WINDOW;
}
extern "C" {
    pub fn init_color(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin() -> bool;
}
extern "C" {
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
}
extern "C" {
    pub fn keyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_move"]
    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvchgat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: attr_t,
        arg5: ::std::os::raw::c_short,
        arg6: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvcur(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvdelch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvderwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> chtype;
}
extern "C" {
    pub fn mvinchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvprintw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvscanw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: attr_t,
        arg6: ::std::os::raw::c_short,
        arg7: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwdelch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> chtype;
}
extern "C" {
    pub fn mvwinchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwprintw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwscanw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut FILE,
    ) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn nl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush();
}
extern "C" {
    pub fn noraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pnoutrefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush();
}
extern "C" {
    pub fn raw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ripoffline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WINDOW,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanw(arg1: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_dump(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setscrreg(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
}
extern "C" {
    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr() -> attr_t;
}
extern "C" {
    pub fn slk_attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standout() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standend() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subpad(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn subwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs() -> chtype;
}
extern "C" {
    pub fn termname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timeout(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn touchline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env(arg1: bool);
}
extern "C" {
    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs(
        arg1: chtype,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_printw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_scanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchnstr(
        arg1: *mut WINDOW,
        arg2: *const chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_get(
        arg1: *mut WINDOW,
        arg2: *mut attr_t,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_on(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_off(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_set(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
}
extern "C" {
    pub fn wborder(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
        arg9: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: attr_t,
        arg4: ::std::os::raw::c_short,
        arg5: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcolor_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcursyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winch(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn winchnstr(
        arg1: *mut WINDOW,
        arg2: *mut chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmove(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wredrawln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsetscrreg(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsyncdown(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wsyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wtouchln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wvline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetflag(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm(arg1: *mut ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
pub type NCURSES_WINDOW_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_SCREEN_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn is_term_resized(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn keybound(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curses_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn assume_default_colors(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_defined(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resize_term(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_screen(
        arg1: *mut SCREEN,
        arg2: NCURSES_SCREEN_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_window(
        arg1: *mut WINDOW,
        arg2: NCURSES_WINDOW_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wresize(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter();
}
extern "C" {
    pub fn wgetparent(arg1: *const WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn is_cleared(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idcok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idlok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_immedok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_keypad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_leaveok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_nodelay(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_notimeout(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_scrollok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_syncok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn wgetscrreg(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
extern "C" {
    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn wenclose(
        arg1: *const WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn mouseinterval(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmouse_trafo(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: bool,
    ) -> bool;
}
extern "C" {
    pub fn mouse_trafo(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: bool,
    ) -> bool;
}
extern "C" {
    pub fn mcprint(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ah {
    pub ah_nxt: u_int8_t,
    pub ah_len: u_int8_t,
    pub ah_reserve: u_int16_t,
    pub ah_spi: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newah {
    pub ah_nxt: u_int8_t,
    pub ah_len: u_int8_t,
    pub ah_reserve: u_int16_t,
    pub ah_spi: u_int32_t,
    pub ah_seq: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp {
    pub esp_spi: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newesp {
    pub esp_spi: u_int32_t,
    pub esp_seq: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esptail {
    pub esp_padlen: u_int8_t,
    pub esp_nxt: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsecstat {
    pub in_success: u_quad_t,
    pub in_polvio: u_quad_t,
    pub in_nosa: u_quad_t,
    pub in_inval: u_quad_t,
    pub in_nomem: u_quad_t,
    pub in_badspi: u_quad_t,
    pub in_ahreplay: u_quad_t,
    pub in_espreplay: u_quad_t,
    pub in_ahauthsucc: u_quad_t,
    pub in_ahauthfail: u_quad_t,
    pub in_espauthsucc: u_quad_t,
    pub in_espauthfail: u_quad_t,
    pub in_esphist: [u_quad_t; 256usize],
    pub in_ahhist: [u_quad_t; 256usize],
    pub in_comphist: [u_quad_t; 256usize],
    pub out_success: u_quad_t,
    pub out_polvio: u_quad_t,
    pub out_nosa: u_quad_t,
    pub out_inval: u_quad_t,
    pub out_nomem: u_quad_t,
    pub out_noroute: u_quad_t,
    pub out_esphist: [u_quad_t; 256usize],
    pub out_ahhist: [u_quad_t; 256usize],
    pub out_comphist: [u_quad_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_info {
    pub wake_pkt: [u_int8_t; 100usize],
    pub wake_uuid: uuid_string_t,
    pub wake_pkt_spi: u_int32_t,
    pub wake_pkt_seq: u_int32_t,
    pub wake_pkt_len: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_event_data {
    pub wake_uuid: uuid_string_t,
}
extern "C" {
    pub fn ipsec_set_policy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> caddr_t;
}
extern "C" {
    pub fn ipsec_get_policylen(arg1: caddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipsec_dump_policy(
        arg1: caddr_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipsec_strerror() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcomp {
    pub comp_nxt: u_int8_t,
    pub comp_flags: u_int8_t,
    pub comp_cpi: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rip6stat {
    pub rip6s_ipackets: u_quad_t,
    pub rip6s_isum: u_quad_t,
    pub rip6s_badsum: u_quad_t,
    pub rip6s_nosock: u_quad_t,
    pub rip6s_nosockmcast: u_quad_t,
    pub rip6s_fullsock: u_quad_t,
    pub rip6s_opackets: u_quad_t,
}
pub type comp_t = u_int16_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acct {
    pub ac_comm: [::std::os::raw::c_char; 10usize],
    pub ac_utime: comp_t,
    pub ac_stime: comp_t,
    pub ac_etime: comp_t,
    pub ac_btime: u_int32_t,
    pub ac_uid: uid_t,
    pub ac_gid: gid_t,
    pub ac_mem: u_int16_t,
    pub ac_io: comp_t,
    pub ac_tty: dev_t,
    pub ac_flag: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
pub type daddr64_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf {
    _unused: [u8; 0],
}
pub type buf_t = *mut buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file {
    _unused: [u8; 0],
}
pub type file_t = *mut file;
pub type proc_t = *mut proc_;
pub type proc_ident_t = *mut proc_ident;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uio {
    _unused: [u8; 0],
}
pub type uio_t = *mut uio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_context {
    _unused: [u8; 0],
}
pub type vfs_context_t = *mut vfs_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfstable {
    _unused: [u8; 0],
}
pub type vfstable_t = *mut vfstable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifnet {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pkthdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __socket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockopt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifaddr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifmultiaddr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifnet_filter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __rtentry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __if_clone {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __bufattr {
    _unused: [u8; 0],
}
pub type ifnet_t = *mut __ifnet;
pub type mbuf_t = *mut __mbuf;
pub type pkthdr_t = *mut __pkthdr;
pub type socket_t = *mut __socket;
pub type sockopt_t = *mut __sockopt;
pub type ifaddr_t = *mut __ifaddr;
pub type ifmultiaddr_t = *mut __ifmultiaddr;
pub type interface_filter_t = *mut __ifnet_filter;
pub type route_t = *mut __rtentry;
pub type if_clone_t = *mut __if_clone;
pub type bufattr_t = *mut __bufattr;
pub type kauth_action_t = ::std::os::raw::c_int;
extern "C" {
    pub fn buf_markaged(bp: buf_t);
}
extern "C" {
    pub fn buf_markinvalid(bp: buf_t);
}
extern "C" {
    pub fn buf_markdelayed(bp: buf_t);
}
extern "C" {
    pub fn buf_markclean(arg1: buf_t);
}
extern "C" {
    pub fn buf_markeintr(bp: buf_t);
}
extern "C" {
    pub fn buf_markfua(bp: buf_t);
}
extern "C" {
    pub fn buf_fua(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_valid(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_fromcache(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_upl(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_uploffset(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_rcred(bp: buf_t) -> kauth_cred_t;
}
extern "C" {
    pub fn buf_wcred(bp: buf_t) -> kauth_cred_t;
}
extern "C" {
    pub fn buf_proc(bp: buf_t) -> proc_t;
}
extern "C" {
    pub fn buf_dirtyoff(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_dirtyend(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setdirtyoff(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_setdirtyend(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_error(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_seterror(bp: buf_t, arg1: errno_t);
}
extern "C" {
    pub fn buf_setflags(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_clearflags(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_flags(bp: buf_t) -> i32;
}
extern "C" {
    pub fn buf_reset(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_map(bp: buf_t, io_addr: *mut caddr_t) -> errno_t;
}
extern "C" {
    pub fn buf_map_range(bp: buf_t, io_addr: *mut caddr_t) -> errno_t;
}
extern "C" {
    pub fn buf_unmap(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_unmap_range(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_setdrvdata(bp: buf_t, drvdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn buf_drvdata(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_setfsprivate(bp: buf_t, fsprivate: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn buf_fsprivate(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_blkno(bp: buf_t) -> daddr64_t;
}
extern "C" {
    pub fn buf_lblkno(bp: buf_t) -> daddr64_t;
}
extern "C" {
    pub fn buf_lblksize(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setblkno(bp: buf_t, blkno: daddr64_t);
}
extern "C" {
    pub fn buf_setlblkno(bp: buf_t, lblkno: daddr64_t);
}
extern "C" {
    pub fn buf_setlblksize(bp: buf_t, lblksize: u32);
}
extern "C" {
    pub fn buf_count(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_size(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_resid(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setcount(bp: buf_t, bcount: u32);
}
extern "C" {
    pub fn buf_setsize(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_setresid(bp: buf_t, resid: u32);
}
extern "C" {
    pub fn buf_setdataptr(bp: buf_t, data: usize);
}
extern "C" {
    pub fn buf_dataptr(bp: buf_t) -> usize;
}
extern "C" {
    pub fn buf_vnode(bp: buf_t) -> vnode_t;
}
extern "C" {
    pub fn buf_setvnode(bp: buf_t, vp: vnode_t);
}
extern "C" {
    pub fn buf_device(bp: buf_t) -> dev_t;
}
extern "C" {
    pub fn buf_setdevice(bp: buf_t, vp: vnode_t) -> errno_t;
}
extern "C" {
    pub fn buf_strategy(devvp: vnode_t, ap: *mut ::std::os::raw::c_void) -> errno_t;
}
extern "C" {
    pub fn buf_invalblkno(vp: vnode_t, lblkno: daddr64_t, flags: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn buf_callback(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_setcallback(
        bp: buf_t,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        transaction: *mut ::std::os::raw::c_void,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_setupl(bp: buf_t, upl: upl_t, offset: u32) -> errno_t;
}
extern "C" {
    pub fn buf_clone(
        bp: buf_t,
        io_offset: ::std::os::raw::c_int,
        io_size: ::std::os::raw::c_int,
        iodone: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_create_shadow(
        bp: buf_t,
        force_copy: boolean_t,
        external_storage: usize,
        iodone: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_shadow(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_alloc(vp: vnode_t) -> buf_t;
}
extern "C" {
    pub fn buf_free(bp: buf_t);
}
extern "C" {
    pub fn buf_invalidateblks(
        vp: vnode_t,
        flags: ::std::os::raw::c_int,
        slpflag: ::std::os::raw::c_int,
        slptimeo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_flushdirtyblks(
        vp: vnode_t,
        wait: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn buf_iterate(
        vp: vnode_t,
        callout: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: buf_t,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        flags: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn buf_clear(bp: buf_t);
}
extern "C" {
    pub fn buf_bawrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_bdwrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_bwrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_biodone(bp: buf_t);
}
extern "C" {
    pub fn buf_biowait(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_brelse(bp: buf_t);
}
extern "C" {
    pub fn buf_bread(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_breadn(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        rablks: *mut daddr64_t,
        rasizes: *mut ::std::os::raw::c_int,
        nrablks: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_meta_bread(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_meta_breadn(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        rablks: *mut daddr64_t,
        rasizes: *mut ::std::os::raw::c_int,
        nrablks: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn minphys(bp: buf_t) -> u_int;
}
extern "C" {
    pub fn physio(
        f_strategy: ::std::option::Option<unsafe extern "C" fn(arg1: buf_t)>,
        bp: buf_t,
        dev: dev_t,
        flags: ::std::os::raw::c_int,
        f_minphys: ::std::option::Option<unsafe extern "C" fn(arg1: buf_t) -> u_int>,
        uio: *mut uio,
        blocksize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_getblk(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        slpflag: ::std::os::raw::c_int,
        slptimeo: ::std::os::raw::c_int,
        operation: ::std::os::raw::c_int,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_geteblk(size: ::std::os::raw::c_int) -> buf_t;
}
extern "C" {
    pub fn buf_clear_redundancy_flags(bp: buf_t, flags: u32);
}
extern "C" {
    pub fn buf_redundancy_flags(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_set_redundancy_flags(bp: buf_t, flags: u32);
}
extern "C" {
    pub fn buf_attr(bp: buf_t) -> bufattr_t;
}
extern "C" {
    pub fn buf_markstatic(bp: buf_t);
}
extern "C" {
    pub fn buf_static(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufattr_markioscheduled(bap: bufattr_t);
}
extern "C" {
    pub fn bufattr_ioscheduled(bap: bufattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufattr_markexpeditedmeta(bap: bufattr_t);
}
extern "C" {
    pub fn bufattr_expeditedmeta(bap: bufattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_extent_t {
    pub offset: u64,
    pub length: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_firmware_path_t {
    pub path: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_format_capacity_t {
    pub blockCount: u64,
    pub blockSize: u32,
    pub reserved0096: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_format_capacities_t {
    pub capacities: *mut dk_format_capacity_t,
    pub capacitiesCount: u32,
    pub reserved0096: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_synchronize_t {
    pub offset: u64,
    pub length: u64,
    pub options: u32,
    pub reserved0160: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_unmap_t {
    pub extents: *mut dk_extent_t,
    pub extentsCount: u32,
    pub options: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_corestorage_info_t {
    pub flags: u64,
    pub hotfile_size: u64,
    pub hibernate_minsize: u64,
    pub swapfile_pinning: u64,
    pub padding: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_provision_extent_t {
    pub offset: u64,
    pub length: u64,
    pub provisionType: u8,
    pub reserved: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_provision_status_t {
    pub offset: u64,
    pub length: u64,
    pub options: u64,
    pub reserved: u32,
    pub extentsCount: u32,
    pub extents: *mut dk_provision_extent_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_error_description_t {
    pub options: u64,
    pub reserved: u64,
    pub description_size: u64,
    pub description: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eventreq {
    pub er_type: ::std::os::raw::c_int,
    pub er_handle: ::std::os::raw::c_int,
    pub er_data: *mut ::std::os::raw::c_void,
    pub er_rcnt: ::std::os::raw::c_int,
    pub er_wcnt: ::std::os::raw::c_int,
    pub er_ecnt: ::std::os::raw::c_int,
    pub er_eventbits: ::std::os::raw::c_int,
}
pub type er_t = *mut eventreq;
extern "C" {
    pub fn modwatch(arg1: er_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn watchevent(arg1: er_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waitevent(arg1: er_t, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonhdr {
    pub lpc: u32,
    pub hpc: u32,
    pub ncnt: u32,
    pub version: i32,
    pub profrate: i32,
    pub spare: [i32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonhdr_64 {
    pub lpc: u64,
    pub hpc: u64,
    pub ncnt: u32,
    pub version: i32,
    pub profrate: i32,
    pub spare: [i32; 3usize],
}
pub type gmonhdr_t = gmonhdr_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tostruct {
    pub selfpc: u32,
    pub count: i32,
    pub link: u16,
    pub order: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tostruct_64 {
    pub selfpc: u64,
    pub count: i32,
    pub link: u16,
    pub order: u16,
}
pub type tostruct_t = tostruct_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc {
    pub raw_frompc: u32,
    pub raw_selfpc: u32,
    pub raw_count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_64 {
    pub raw_frompc: u64,
    pub raw_selfpc: u64,
    pub raw_count: i32,
}
pub type rawarc_t = rawarc_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonparam {
    pub state: ::std::os::raw::c_int,
    pub kcount: *mut u_short,
    pub kcountsize: u_long,
    pub froms: *mut u_short,
    pub fromssize: u_long,
    pub tos: *mut tostruct_t,
    pub tossize: u_long,
    pub tolimit: ::std::os::raw::c_long,
    pub lowpc: u_long,
    pub highpc: u_long,
    pub textsize: u_long,
    pub hashfraction: u_long,
}
extern "C" {
    pub static mut _gmonparam: gmonparam;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmon_data {
    pub type_: u32,
    pub size: u32,
}
pub type gmon_data_t = gmon_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_order {
    pub raw_frompc: u32,
    pub raw_selfpc: u32,
    pub raw_count: u32,
    pub raw_order: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_order_64 {
    pub raw_frompc: u64,
    pub raw_selfpc: u64,
    pub raw_count: u32,
    pub raw_order: u32,
}
pub type rawarc_order_t = rawarc_order_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttychars {
    pub tc_erase: ::std::os::raw::c_char,
    pub tc_kill: ::std::os::raw::c_char,
    pub tc_intrc: ::std::os::raw::c_char,
    pub tc_quitc: ::std::os::raw::c_char,
    pub tc_startc: ::std::os::raw::c_char,
    pub tc_stopc: ::std::os::raw::c_char,
    pub tc_eofc: ::std::os::raw::c_char,
    pub tc_brkc: ::std::os::raw::c_char,
    pub tc_suspc: ::std::os::raw::c_char,
    pub tc_dsuspc: ::std::os::raw::c_char,
    pub tc_rprntc: ::std::os::raw::c_char,
    pub tc_flushc: ::std::os::raw::c_char,
    pub tc_werasc: ::std::os::raw::c_char,
    pub tc_lnextc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tchars {
    pub t_intrc: ::std::os::raw::c_char,
    pub t_quitc: ::std::os::raw::c_char,
    pub t_startc: ::std::os::raw::c_char,
    pub t_stopc: ::std::os::raw::c_char,
    pub t_eofc: ::std::os::raw::c_char,
    pub t_brkc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltchars {
    pub t_suspc: ::std::os::raw::c_char,
    pub t_dsuspc: ::std::os::raw::c_char,
    pub t_rprntc: ::std::os::raw::c_char,
    pub t_flushc: ::std::os::raw::c_char,
    pub t_werasc: ::std::os::raw::c_char,
    pub t_lnextc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgttyb {
    pub sg_ispeed: ::std::os::raw::c_char,
    pub sg_ospeed: ::std::os::raw::c_char,
    pub sg_erase: ::std::os::raw::c_char,
    pub sg_kill: ::std::os::raw::c_char,
    pub sg_flags: ::std::os::raw::c_short,
}
extern "C" {
    pub fn kdebug_signpost(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_start(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_end(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_event_data {
    pub ctl_id: u_int32_t,
    pub ctl_unit: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_info {
    pub ctl_id: u_int32_t,
    pub ctl_name: [::std::os::raw::c_char; 96usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ctl {
    pub sc_len: u_char,
    pub sc_family: u_char,
    pub ss_sysaddr: u_int16_t,
    pub sc_id: u_int32_t,
    pub sc_unit: u_int32_t,
    pub sc_reserved: [u_int32_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbstat {
    pub m_mbufs: u_int32_t,
    pub m_clusters: u_int32_t,
    pub m_spare: u_int32_t,
    pub m_clfree: u_int32_t,
    pub m_drops: u_int32_t,
    pub m_wait: u_int32_t,
    pub m_drain: u_int32_t,
    pub m_mtypes: [u_short; 256usize],
    pub m_mcfail: u_int32_t,
    pub m_mpfail: u_int32_t,
    pub m_msize: u_int32_t,
    pub m_mclbytes: u_int32_t,
    pub m_minclsize: u_int32_t,
    pub m_mlen: u_int32_t,
    pub m_mhlen: u_int32_t,
    pub m_bigclusters: u_int32_t,
    pub m_bigclfree: u_int32_t,
    pub m_bigmclbytes: u_int32_t,
    pub m_forcedefunct: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ombstat {
    pub m_mbufs: u_int32_t,
    pub m_clusters: u_int32_t,
    pub m_spare: u_int32_t,
    pub m_clfree: u_int32_t,
    pub m_drops: u_int32_t,
    pub m_wait: u_int32_t,
    pub m_drain: u_int32_t,
    pub m_mtypes: [u_short; 256usize],
    pub m_mcfail: u_int32_t,
    pub m_mpfail: u_int32_t,
    pub m_msize: u_int32_t,
    pub m_mclbytes: u_int32_t,
    pub m_minclsize: u_int32_t,
    pub m_mlen: u_int32_t,
    pub m_mhlen: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mb_class_stat {
    pub mbcl_cname: [::std::os::raw::c_char; 16usize],
    pub mbcl_size: u_int32_t,
    pub mbcl_total: u_int32_t,
    pub mbcl_active: u_int32_t,
    pub mbcl_infree: u_int32_t,
    pub mbcl_slab_cnt: u_int32_t,
    pub mbcl_pad: u_int32_t,
    pub mbcl_alloc_cnt: u_int64_t,
    pub mbcl_free_cnt: u_int64_t,
    pub mbcl_notified: u_int64_t,
    pub mbcl_purge_cnt: u_int64_t,
    pub mbcl_fail_cnt: u_int64_t,
    pub mbcl_ctotal: u_int32_t,
    pub mbcl_release_cnt: u_int32_t,
    pub mbcl_mc_state: u_int32_t,
    pub mbcl_mc_cached: u_int32_t,
    pub mbcl_mc_waiter_cnt: u_int32_t,
    pub mbcl_mc_wretry_cnt: u_int32_t,
    pub mbcl_mc_nwretry_cnt: u_int32_t,
    pub mbcl_peak_reported: u_int32_t,
    pub mbcl_reserved: [u_int32_t; 7usize],
}
pub type mb_class_stat_t = mb_class_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mb_stat {
    pub mbs_cnt: u_int32_t,
    pub mbs_pad: u_int32_t,
    pub mbs_class: [mb_class_stat_t; 1usize],
}
pub type mb_stat_t = mb_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgbuf {
    pub msg_magic: ::std::os::raw::c_int,
    pub msg_size: ::std::os::raw::c_int,
    pub msg_bufx: ::std::os::raw::c_int,
    pub msg_bufr: ::std::os::raw::c_int,
    pub msg_bufc: *mut ::std::os::raw::c_char,
}
pub type netaddr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct np_uid_t {
    pub np_uid_high: ::std::os::raw::c_long,
    pub np_uid_low: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network_port_t {
    pub np_receiver: netaddr_t,
    pub np_owner: netaddr_t,
    pub np_puid: np_uid_t,
    pub np_sid: np_uid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipebuf {
    pub cnt: u_int,
    pub in_: u_int,
    pub out: u_int,
    pub size: u_int,
    pub buffer: caddr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_bsdinfo {
    pub pbi_flags: u32,
    pub pbi_status: u32,
    pub pbi_xstatus: u32,
    pub pbi_pid: u32,
    pub pbi_ppid: u32,
    pub pbi_uid: uid_t,
    pub pbi_gid: gid_t,
    pub pbi_ruid: uid_t,
    pub pbi_rgid: gid_t,
    pub pbi_svuid: uid_t,
    pub pbi_svgid: gid_t,
    pub rfu_1: u32,
    pub pbi_comm: [::std::os::raw::c_char; 16usize],
    pub pbi_name: [::std::os::raw::c_char; 32usize],
    pub pbi_nfiles: u32,
    pub pbi_pgid: u32,
    pub pbi_pjobc: u32,
    pub e_tdev: u32,
    pub e_tpgid: u32,
    pub pbi_nice: i32,
    pub pbi_start_tvsec: u64,
    pub pbi_start_tvusec: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_bsdshortinfo {
    pub pbsi_pid: u32,
    pub pbsi_ppid: u32,
    pub pbsi_pgid: u32,
    pub pbsi_status: u32,
    pub pbsi_comm: [::std::os::raw::c_char; 16usize],
    pub pbsi_flags: u32,
    pub pbsi_uid: uid_t,
    pub pbsi_gid: gid_t,
    pub pbsi_ruid: uid_t,
    pub pbsi_rgid: gid_t,
    pub pbsi_svuid: uid_t,
    pub pbsi_svgid: gid_t,
    pub pbsi_rfu: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_taskinfo {
    pub pti_virtual_size: u64,
    pub pti_resident_size: u64,
    pub pti_total_user: u64,
    pub pti_total_system: u64,
    pub pti_threads_user: u64,
    pub pti_threads_system: u64,
    pub pti_policy: i32,
    pub pti_faults: i32,
    pub pti_pageins: i32,
    pub pti_cow_faults: i32,
    pub pti_messages_sent: i32,
    pub pti_messages_received: i32,
    pub pti_syscalls_mach: i32,
    pub pti_syscalls_unix: i32,
    pub pti_csw: i32,
    pub pti_threadnum: i32,
    pub pti_numrunning: i32,
    pub pti_priority: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_taskallinfo {
    pub pbsd: proc_bsdinfo,
    pub ptinfo: proc_taskinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_threadinfo {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regioninfo {
    pub pri_protection: u32,
    pub pri_max_protection: u32,
    pub pri_inheritance: u32,
    pub pri_flags: u32,
    pub pri_offset: u64,
    pub pri_behavior: u32,
    pub pri_user_wired_count: u32,
    pub pri_user_tag: u32,
    pub pri_pages_resident: u32,
    pub pri_pages_shared_now_private: u32,
    pub pri_pages_swapped_out: u32,
    pub pri_pages_dirtied: u32,
    pub pri_ref_count: u32,
    pub pri_shadow_depth: u32,
    pub pri_share_mode: u32,
    pub pri_private_pages_resident: u32,
    pub pri_shared_pages_resident: u32,
    pub pri_obj_id: u32,
    pub pri_depth: u32,
    pub pri_address: u64,
    pub pri_size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_workqueueinfo {
    pub pwq_nthreads: u32,
    pub pwq_runthreads: u32,
    pub pwq_blockedthreads: u32,
    pub pwq_state: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fileinfo {
    pub fi_openflags: u32,
    pub fi_status: u32,
    pub fi_offset: off_t,
    pub fi_type: i32,
    pub fi_guardflags: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct proc_exitreasonbasicinfo {
    pub beri_namespace: u32,
    pub beri_code: u64,
    pub beri_flags: u64,
    pub beri_reason_buf_size: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct proc_exitreasoninfo {
    pub eri_namespace: u32,
    pub eri_code: u64,
    pub eri_flags: u64,
    pub eri_reason_buf_size: u32,
    pub eri_kcd_buf: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vinfo_stat {
    pub vst_dev: u32,
    pub vst_mode: u16,
    pub vst_nlink: u16,
    pub vst_ino: u64,
    pub vst_uid: uid_t,
    pub vst_gid: gid_t,
    pub vst_atime: i64,
    pub vst_atimensec: i64,
    pub vst_mtime: i64,
    pub vst_mtimensec: i64,
    pub vst_ctime: i64,
    pub vst_ctimensec: i64,
    pub vst_birthtime: i64,
    pub vst_birthtimensec: i64,
    pub vst_size: off_t,
    pub vst_blocks: i64,
    pub vst_blksize: i32,
    pub vst_flags: u32,
    pub vst_gen: u32,
    pub vst_rdev: u32,
    pub vst_qspare: [i64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_info {
    pub vi_stat: vinfo_stat,
    pub vi_type: ::std::os::raw::c_int,
    pub vi_pad: ::std::os::raw::c_int,
    pub vi_fsid: fsid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_info_path {
    pub vip_vi: vnode_info,
    pub vip_path: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_fdinfo {
    pub pfi: proc_fileinfo,
    pub pvi: vnode_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_fdinfowithpath {
    pub pfi: proc_fileinfo,
    pub pvip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regionwithpathinfo {
    pub prp_prinfo: proc_regioninfo,
    pub prp_vip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regionpath {
    pub prpo_addr: u64,
    pub prpo_regionlength: u64,
    pub prpo_path: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_vnodepathinfo {
    pub pvi_cdir: vnode_info_path,
    pub pvi_rdir: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_threadwithpathinfo {
    pub pt: proc_threadinfo,
    pub pvip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in4in6_addr {
    pub i46a_pad32: [u_int32_t; 3usize],
    pub i46a_addr4: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_sockinfo {
    pub __bindgen_anon_1: in_sockinfo__bindgen_ty_1,
    pub __bindgen_anon_2: in_sockinfo__bindgen_ty_2,
    pub __bindgen_anon_3: in_sockinfo__bindgen_ty_3,
    pub __bindgen_anon_4: in_sockinfo__bindgen_ty_4,
    pub insi_fport: ::std::os::raw::c_int,
    pub insi_lport: ::std::os::raw::c_int,
    pub insi_gencnt: u64,
    pub insi_flags: u32,
    pub insi_flow: u32,
    pub insi_vflag: u8,
    pub insi_ip_ttl: u8,
    pub rfu_1: u32,
    pub insi_faddr: in_sockinfo__bindgen_ty_1,
    pub insi_laddr: in_sockinfo__bindgen_ty_2,
    pub insi_v4: in_sockinfo__bindgen_ty_3,
    pub insi_v6: in_sockinfo__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_sockinfo__bindgen_ty_1 {
    pub ina_46: in4in6_addr,
    pub ina_6: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_sockinfo__bindgen_ty_2 {
    pub ina_46: in4in6_addr,
    pub ina_6: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_sockinfo__bindgen_ty_3 {
    pub in4_tos: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_sockinfo__bindgen_ty_4 {
    pub in6_hlim: u8,
    pub in6_cksum: ::std::os::raw::c_int,
    pub in6_ifindex: u_short,
    pub in6_hops: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_sockinfo {
    pub tcpsi_ini: in_sockinfo,
    pub tcpsi_state: ::std::os::raw::c_int,
    pub tcpsi_timer: [::std::os::raw::c_int; 4usize],
    pub tcpsi_mss: ::std::os::raw::c_int,
    pub tcpsi_flags: u32,
    pub rfu_1: u32,
    pub tcpsi_tp: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct un_sockinfo {
    pub __bindgen_anon_1: un_sockinfo__bindgen_ty_1,
    pub __bindgen_anon_2: un_sockinfo__bindgen_ty_2,
    pub unsi_conn_so: u64,
    pub unsi_conn_pcb: u64,
    pub unsi_addr: un_sockinfo__bindgen_ty_1,
    pub unsi_caddr: un_sockinfo__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sockinfo__bindgen_ty_1 {
    pub ua_sun: sockaddr_un,
    pub ua_dummy: [::std::os::raw::c_char; 255usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sockinfo__bindgen_ty_2 {
    pub ua_sun: sockaddr_un,
    pub ua_dummy: [::std::os::raw::c_char; 255usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndrv_info {
    pub ndrvsi_if_family: u32,
    pub ndrvsi_if_unit: u32,
    pub ndrvsi_if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_event_info {
    pub kesi_vendor_code_filter: u32,
    pub kesi_class_filter: u32,
    pub kesi_subclass_filter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_ctl_info {
    pub kcsi_id: u32,
    pub kcsi_reg_unit: u32,
    pub kcsi_flags: u32,
    pub kcsi_recvbufsize: u32,
    pub kcsi_sendbufsize: u32,
    pub kcsi_unit: u32,
    pub kcsi_name: [::std::os::raw::c_char; 96usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsock_sockinfo {
    pub local_cid: u32,
    pub local_port: u32,
    pub remote_cid: u32,
    pub remote_port: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockbuf_info {
    pub sbi_cc: u32,
    pub sbi_hiwat: u32,
    pub sbi_mbcnt: u32,
    pub sbi_mbmax: u32,
    pub sbi_lowat: u32,
    pub sbi_flags: ::std::os::raw::c_short,
    pub sbi_timeo: ::std::os::raw::c_short,
}
pub const SOCKINFO_GENERIC: _bindgen_ty_36 = 0;
pub const SOCKINFO_IN: _bindgen_ty_36 = 1;
pub const SOCKINFO_TCP: _bindgen_ty_36 = 2;
pub const SOCKINFO_UN: _bindgen_ty_36 = 3;
pub const SOCKINFO_NDRV: _bindgen_ty_36 = 4;
pub const SOCKINFO_KERN_EVENT: _bindgen_ty_36 = 5;
pub const SOCKINFO_KERN_CTL: _bindgen_ty_36 = 6;
pub const SOCKINFO_VSOCK: _bindgen_ty_36 = 7;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_info {
    pub __bindgen_anon_1: socket_info__bindgen_ty_1,
    pub soi_stat: vinfo_stat,
    pub soi_so: u64,
    pub soi_pcb: u64,
    pub soi_type: ::std::os::raw::c_int,
    pub soi_protocol: ::std::os::raw::c_int,
    pub soi_family: ::std::os::raw::c_int,
    pub soi_options: ::std::os::raw::c_short,
    pub soi_linger: ::std::os::raw::c_short,
    pub soi_state: ::std::os::raw::c_short,
    pub soi_qlen: ::std::os::raw::c_short,
    pub soi_incqlen: ::std::os::raw::c_short,
    pub soi_qlimit: ::std::os::raw::c_short,
    pub soi_timeo: ::std::os::raw::c_short,
    pub soi_error: u_short,
    pub soi_oobmark: u32,
    pub soi_rcv: sockbuf_info,
    pub soi_snd: sockbuf_info,
    pub soi_kind: ::std::os::raw::c_int,
    pub rfu_1: u32,
    pub soi_proto: socket_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union socket_info__bindgen_ty_1 {
    pub pri_in: in_sockinfo,
    pub pri_tcp: tcp_sockinfo,
    pub pri_un: un_sockinfo,
    pub pri_ndrv: ndrv_info,
    pub pri_kern_event: kern_event_info,
    pub pri_kern_ctl: kern_ctl_info,
    pub pri_vsock: vsock_sockinfo,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_fdinfo {
    pub pfi: proc_fileinfo,
    pub psi: socket_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psem_info {
    pub psem_stat: vinfo_stat,
    pub psem_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psem_fdinfo {
    pub pfi: proc_fileinfo,
    pub pseminfo: psem_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshm_info {
    pub pshm_stat: vinfo_stat,
    pub pshm_mappaddr: u64,
    pub pshm_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshm_fdinfo {
    pub pfi: proc_fileinfo,
    pub pshminfo: pshm_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_info {
    pub pipe_stat: vinfo_stat,
    pub pipe_handle: u64,
    pub pipe_peerhandle: u64,
    pub pipe_status: ::std::os::raw::c_int,
    pub rfu_1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_fdinfo {
    pub pfi: proc_fileinfo,
    pub pipeinfo: pipe_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_info {
    pub kq_stat: vinfo_stat,
    pub kq_state: u32,
    pub rfu_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_dyninfo {
    pub kqdi_info: kqueue_info,
    pub kqdi_servicer: u64,
    pub kqdi_owner: u64,
    pub kqdi_sync_waiters: u32,
    pub kqdi_sync_waiter_qos: u8,
    pub kqdi_async_qos: u8,
    pub kqdi_request_state: u16,
    pub kqdi_events_qos: u8,
    pub kqdi_pri: u8,
    pub kqdi_pol: u8,
    pub kqdi_cpupercent: u8,
    pub _kqdi_reserved0: [u8; 4usize],
    pub _kqdi_reserved1: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_fdinfo {
    pub pfi: proc_fileinfo,
    pub kqueueinfo: kqueue_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct appletalk_info {
    pub atalk_stat: vinfo_stat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct appletalk_fdinfo {
    pub pfi: proc_fileinfo,
    pub appletalkinfo: appletalk_info,
}
pub type proc_info_udata_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fdinfo {
    pub proc_fd: i32,
    pub proc_fdtype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fileportinfo {
    pub proc_fileport: u32,
    pub proc_fdtype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_channel_info {
    pub chi_instance: uuid_t,
    pub chi_port: u32,
    pub chi_type: u32,
    pub chi_flags: u32,
    pub rfu_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_fdinfo {
    pub pfi: proc_fileinfo,
    pub channelinfo: proc_channel_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqfilehdr {
    pub dqh_magic: u_int32_t,
    pub dqh_version: u_int32_t,
    pub dqh_maxentries: u_int32_t,
    pub dqh_entrycnt: u_int32_t,
    pub dqh_flags: u_int32_t,
    pub dqh_chktime: u_int32_t,
    pub dqh_btime: u_int32_t,
    pub dqh_itime: u_int32_t,
    pub dqh_string: [::std::os::raw::c_char; 16usize],
    pub dqh_spare: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqblk {
    pub dqb_bhardlimit: u_int64_t,
    pub dqb_bsoftlimit: u_int64_t,
    pub dqb_curbytes: u_int64_t,
    pub dqb_ihardlimit: u_int32_t,
    pub dqb_isoftlimit: u_int32_t,
    pub dqb_curinodes: u_int32_t,
    pub dqb_btime: u_int32_t,
    pub dqb_itime: u_int32_t,
    pub dqb_id: u_int32_t,
    pub dqb_spare: [u_int32_t; 4usize],
}
extern "C" {
    pub fn quotactl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: caddr_t,
    ) -> ::std::os::raw::c_int;
}
pub type rbto_compare_nodes_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type rbto_compare_key_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree_ops_t {
    pub rbto_compare_nodes: rbto_compare_nodes_fn,
    pub rbto_compare_key: rbto_compare_key_fn,
    pub rbto_node_offset: usize,
    pub rbto_context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub opaque: [*mut ::std::os::raw::c_void; 3usize],
}
pub type rb_node_t = rb_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree {
    pub opaque: [*mut ::std::os::raw::c_void; 8usize],
}
pub type rb_tree_t = rb_tree;
extern "C" {
    pub fn rb_tree_init(arg1: *mut rb_tree_t, arg2: *const rb_tree_ops_t);
}
extern "C" {
    pub fn rb_tree_insert_node(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_geq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_leq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_remove_node(arg1: *mut rb_tree_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rb_tree_iterate(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_count(arg1: *mut rb_tree_t) -> usize;
}
extern "C" {
    pub fn usrctl(flags: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot_np(
        howto: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pstats {
    pub p_ru: rusage,
    pub p_cru: rusage,
    pub p_prof: pstats_uprof,
    pub ps_start: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pstats_uprof {
    pub pr_next: *mut pstats_uprof,
    pub pr_base: caddr_t,
    pub pr_size: u_int32_t,
    pub pr_off: u_int32_t,
    pub pr_scale: u_int32_t,
    pub pr_addr: u_int32_t,
    pub pr_ticks: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbuf {
    pub s_buf: *mut ::std::os::raw::c_char,
    pub s_unused: *mut ::std::os::raw::c_void,
    pub s_size: ::std::os::raw::c_int,
    pub s_len: ::std::os::raw::c_int,
    pub s_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeb {
    pub time: time_t,
    pub millitm: ::std::os::raw::c_ushort,
    pub timezone: ::std::os::raw::c_short,
    pub dstflag: ::std::os::raw::c_short,
}
extern "C" {
    pub fn ftime(arg1: *mut timeb) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct speedtab {
    pub sp_speed: ::std::os::raw::c_int,
    pub sp_code: ::std::os::raw::c_int,
}
pub type unp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _unpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xunpgen {
    pub xug_len: u_int32_t,
    pub xug_count: u_int,
    pub xug_gen: unp_gen_t,
    pub xug_sogen: so_gen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waitq_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user {}
pub const vtype_VNON: vtype = 0;
pub const vtype_VREG: vtype = 1;
pub const vtype_VDIR: vtype = 2;
pub const vtype_VBLK: vtype = 3;
pub const vtype_VCHR: vtype = 4;
pub const vtype_VLNK: vtype = 5;
pub const vtype_VSOCK: vtype = 6;
pub const vtype_VFIFO: vtype = 7;
pub const vtype_VBAD: vtype = 8;
pub const vtype_VSTR: vtype = 9;
pub const vtype_VCPLX: vtype = 10;
pub type vtype = ::std::os::raw::c_uint;
pub const vtagtype_VT_NON: vtagtype = 0;
pub const vtagtype_VT_UFS: vtagtype = 1;
pub const vtagtype_VT_NFS: vtagtype = 2;
pub const vtagtype_VT_MFS: vtagtype = 3;
pub const vtagtype_VT_MSDOSFS: vtagtype = 4;
pub const vtagtype_VT_LFS: vtagtype = 5;
pub const vtagtype_VT_LOFS: vtagtype = 6;
pub const vtagtype_VT_FDESC: vtagtype = 7;
pub const vtagtype_VT_PORTAL: vtagtype = 8;
pub const vtagtype_VT_NULL: vtagtype = 9;
pub const vtagtype_VT_UMAP: vtagtype = 10;
pub const vtagtype_VT_KERNFS: vtagtype = 11;
pub const vtagtype_VT_PROCFS: vtagtype = 12;
pub const vtagtype_VT_AFS: vtagtype = 13;
pub const vtagtype_VT_ISOFS: vtagtype = 14;
pub const vtagtype_VT_MOCKFS: vtagtype = 15;
pub const vtagtype_VT_HFS: vtagtype = 16;
pub const vtagtype_VT_ZFS: vtagtype = 17;
pub const vtagtype_VT_DEVFS: vtagtype = 18;
pub const vtagtype_VT_WEBDAV: vtagtype = 19;
pub const vtagtype_VT_UDF: vtagtype = 20;
pub const vtagtype_VT_AFP: vtagtype = 21;
pub const vtagtype_VT_CDDA: vtagtype = 22;
pub const vtagtype_VT_CIFS: vtagtype = 23;
pub const vtagtype_VT_OTHER: vtagtype = 24;
pub const vtagtype_VT_APFS: vtagtype = 25;
pub const vtagtype_VT_LOCKERFS: vtagtype = 26;
pub const vtagtype_VT_BINDFS: vtagtype = 27;
pub type vtagtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_compression_stats {
    pub uncompressed_size: u64,
    pub compressed_size: u64,
    pub buffer_size_compression_dist: [[u32; 7usize]; 10usize],
    pub block_compressed_size_dist: [u32; 16usize],
}
pub type io_compression_stats_t = *mut io_compression_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iocs_store_buffer_entry {
    pub path_name: [::std::os::raw::c_char; 128usize],
    pub iocs: io_compression_stats,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qelem {
    pub q_forw: *mut qelem,
    pub q_back: *mut qelem,
    pub q_data: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn map_fd(
        fd: ::std::os::raw::c_int,
        offset: vm_offset_t,
        addr: *mut vm_offset_t,
        find_space: boolean_t,
        numbytes: vm_size_t,
    ) -> kern_return_t;
}
pub type CGLContextObj = *mut _CGLContextObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLPixelFormatObject {
    _unused: [u8; 0],
}
pub type CGLPixelFormatObj = *mut _CGLPixelFormatObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLRendererInfoObject {
    _unused: [u8; 0],
}
pub type CGLRendererInfoObj = *mut _CGLRendererInfoObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLPBufferObject {
    _unused: [u8; 0],
}
pub type CGLPBufferObj = *mut _CGLPBufferObject;
pub const _CGLPixelFormatAttribute_kCGLPFAAllRenderers: _CGLPixelFormatAttribute = 1;
pub const _CGLPixelFormatAttribute_kCGLPFATripleBuffer: _CGLPixelFormatAttribute = 3;
pub const _CGLPixelFormatAttribute_kCGLPFADoubleBuffer: _CGLPixelFormatAttribute = 5;
pub const _CGLPixelFormatAttribute_kCGLPFAColorSize: _CGLPixelFormatAttribute = 8;
pub const _CGLPixelFormatAttribute_kCGLPFAAlphaSize: _CGLPixelFormatAttribute = 11;
pub const _CGLPixelFormatAttribute_kCGLPFADepthSize: _CGLPixelFormatAttribute = 12;
pub const _CGLPixelFormatAttribute_kCGLPFAStencilSize: _CGLPixelFormatAttribute = 13;
pub const _CGLPixelFormatAttribute_kCGLPFAMinimumPolicy: _CGLPixelFormatAttribute = 51;
pub const _CGLPixelFormatAttribute_kCGLPFAMaximumPolicy: _CGLPixelFormatAttribute = 52;
pub const _CGLPixelFormatAttribute_kCGLPFASampleBuffers: _CGLPixelFormatAttribute = 55;
pub const _CGLPixelFormatAttribute_kCGLPFASamples: _CGLPixelFormatAttribute = 56;
pub const _CGLPixelFormatAttribute_kCGLPFAColorFloat: _CGLPixelFormatAttribute = 58;
pub const _CGLPixelFormatAttribute_kCGLPFAMultisample: _CGLPixelFormatAttribute = 59;
pub const _CGLPixelFormatAttribute_kCGLPFASupersample: _CGLPixelFormatAttribute = 60;
pub const _CGLPixelFormatAttribute_kCGLPFASampleAlpha: _CGLPixelFormatAttribute = 61;
pub const _CGLPixelFormatAttribute_kCGLPFARendererID: _CGLPixelFormatAttribute = 70;
pub const _CGLPixelFormatAttribute_kCGLPFANoRecovery: _CGLPixelFormatAttribute = 72;
pub const _CGLPixelFormatAttribute_kCGLPFAAccelerated: _CGLPixelFormatAttribute = 73;
pub const _CGLPixelFormatAttribute_kCGLPFAClosestPolicy: _CGLPixelFormatAttribute = 74;
pub const _CGLPixelFormatAttribute_kCGLPFABackingStore: _CGLPixelFormatAttribute = 76;
pub const _CGLPixelFormatAttribute_kCGLPFABackingVolatile: _CGLPixelFormatAttribute = 77;
pub const _CGLPixelFormatAttribute_kCGLPFADisplayMask: _CGLPixelFormatAttribute = 84;
pub const _CGLPixelFormatAttribute_kCGLPFAAllowOfflineRenderers: _CGLPixelFormatAttribute = 96;
pub const _CGLPixelFormatAttribute_kCGLPFAAcceleratedCompute: _CGLPixelFormatAttribute = 97;
pub const _CGLPixelFormatAttribute_kCGLPFAOpenGLProfile: _CGLPixelFormatAttribute = 99;
pub const _CGLPixelFormatAttribute_kCGLPFASupportsAutomaticGraphicsSwitching:
    _CGLPixelFormatAttribute = 101;
pub const _CGLPixelFormatAttribute_kCGLPFAVirtualScreenCount: _CGLPixelFormatAttribute = 128;
pub const _CGLPixelFormatAttribute_kCGLPFAAuxBuffers: _CGLPixelFormatAttribute = 7;
pub const _CGLPixelFormatAttribute_kCGLPFAAccumSize: _CGLPixelFormatAttribute = 14;
pub const _CGLPixelFormatAttribute_kCGLPFAAuxDepthStencil: _CGLPixelFormatAttribute = 57;
pub const _CGLPixelFormatAttribute_kCGLPFAStereo: _CGLPixelFormatAttribute = 6;
pub const _CGLPixelFormatAttribute_kCGLPFAOffScreen: _CGLPixelFormatAttribute = 53;
pub const _CGLPixelFormatAttribute_kCGLPFAWindow: _CGLPixelFormatAttribute = 80;
pub const _CGLPixelFormatAttribute_kCGLPFACompliant: _CGLPixelFormatAttribute = 83;
pub const _CGLPixelFormatAttribute_kCGLPFAPBuffer: _CGLPixelFormatAttribute = 90;
pub const _CGLPixelFormatAttribute_kCGLPFARemotePBuffer: _CGLPixelFormatAttribute = 91;
pub const _CGLPixelFormatAttribute_kCGLPFASingleRenderer: _CGLPixelFormatAttribute = 71;
pub const _CGLPixelFormatAttribute_kCGLPFARobust: _CGLPixelFormatAttribute = 75;
pub const _CGLPixelFormatAttribute_kCGLPFAMPSafe: _CGLPixelFormatAttribute = 78;
pub const _CGLPixelFormatAttribute_kCGLPFAMultiScreen: _CGLPixelFormatAttribute = 81;
pub const _CGLPixelFormatAttribute_kCGLPFAFullScreen: _CGLPixelFormatAttribute = 54;
pub type _CGLPixelFormatAttribute = ::std::os::raw::c_uint;
pub use self::_CGLPixelFormatAttribute as CGLPixelFormatAttribute;
pub const _CGLRendererProperty_kCGLRPOffScreen: _CGLRendererProperty = 53;
pub const _CGLRendererProperty_kCGLRPRendererID: _CGLRendererProperty = 70;
pub const _CGLRendererProperty_kCGLRPAccelerated: _CGLRendererProperty = 73;
pub const _CGLRendererProperty_kCGLRPBackingStore: _CGLRendererProperty = 76;
pub const _CGLRendererProperty_kCGLRPWindow: _CGLRendererProperty = 80;
pub const _CGLRendererProperty_kCGLRPCompliant: _CGLRendererProperty = 83;
pub const _CGLRendererProperty_kCGLRPDisplayMask: _CGLRendererProperty = 84;
pub const _CGLRendererProperty_kCGLRPBufferModes: _CGLRendererProperty = 100;
pub const _CGLRendererProperty_kCGLRPColorModes: _CGLRendererProperty = 103;
pub const _CGLRendererProperty_kCGLRPAccumModes: _CGLRendererProperty = 104;
pub const _CGLRendererProperty_kCGLRPDepthModes: _CGLRendererProperty = 105;
pub const _CGLRendererProperty_kCGLRPStencilModes: _CGLRendererProperty = 106;
pub const _CGLRendererProperty_kCGLRPMaxAuxBuffers: _CGLRendererProperty = 107;
pub const _CGLRendererProperty_kCGLRPMaxSampleBuffers: _CGLRendererProperty = 108;
pub const _CGLRendererProperty_kCGLRPMaxSamples: _CGLRendererProperty = 109;
pub const _CGLRendererProperty_kCGLRPSampleModes: _CGLRendererProperty = 110;
pub const _CGLRendererProperty_kCGLRPSampleAlpha: _CGLRendererProperty = 111;
pub const _CGLRendererProperty_kCGLRPGPUVertProcCapable: _CGLRendererProperty = 122;
pub const _CGLRendererProperty_kCGLRPGPUFragProcCapable: _CGLRendererProperty = 123;
pub const _CGLRendererProperty_kCGLRPRendererCount: _CGLRendererProperty = 128;
pub const _CGLRendererProperty_kCGLRPOnline: _CGLRendererProperty = 129;
pub const _CGLRendererProperty_kCGLRPAcceleratedCompute: _CGLRendererProperty = 130;
pub const _CGLRendererProperty_kCGLRPVideoMemoryMegabytes: _CGLRendererProperty = 131;
pub const _CGLRendererProperty_kCGLRPTextureMemoryMegabytes: _CGLRendererProperty = 132;
pub const _CGLRendererProperty_kCGLRPMajorGLVersion: _CGLRendererProperty = 133;
pub const _CGLRendererProperty_kCGLRPRegistryIDLow: _CGLRendererProperty = 140;
pub const _CGLRendererProperty_kCGLRPRegistryIDHigh: _CGLRendererProperty = 141;
pub const _CGLRendererProperty_kCGLRPRemovable: _CGLRendererProperty = 142;
pub const _CGLRendererProperty_kCGLRPRobust: _CGLRendererProperty = 75;
pub const _CGLRendererProperty_kCGLRPMPSafe: _CGLRendererProperty = 78;
pub const _CGLRendererProperty_kCGLRPMultiScreen: _CGLRendererProperty = 81;
pub const _CGLRendererProperty_kCGLRPFullScreen: _CGLRendererProperty = 54;
pub const _CGLRendererProperty_kCGLRPVideoMemory: _CGLRendererProperty = 120;
pub const _CGLRendererProperty_kCGLRPTextureMemory: _CGLRendererProperty = 121;
pub type _CGLRendererProperty = ::std::os::raw::c_uint;
pub use self::_CGLRendererProperty as CGLRendererProperty;
pub const _CGLContextEnable_kCGLCESwapRectangle: _CGLContextEnable = 201;
pub const _CGLContextEnable_kCGLCESwapLimit: _CGLContextEnable = 203;
pub const _CGLContextEnable_kCGLCERasterization: _CGLContextEnable = 221;
pub const _CGLContextEnable_kCGLCEStateValidation: _CGLContextEnable = 301;
pub const _CGLContextEnable_kCGLCESurfaceBackingSize: _CGLContextEnable = 305;
pub const _CGLContextEnable_kCGLCEDisplayListOptimization: _CGLContextEnable = 307;
pub const _CGLContextEnable_kCGLCEMPEngine: _CGLContextEnable = 313;
pub const _CGLContextEnable_kCGLCECrashOnRemovedFunctions: _CGLContextEnable = 316;
pub type _CGLContextEnable = ::std::os::raw::c_uint;
pub use self::_CGLContextEnable as CGLContextEnable;
pub const _CGLGPURestartStatus_kCGLCPGPURestartStatusNone: _CGLGPURestartStatus = 0;
pub const _CGLGPURestartStatus_kCGLCPGPURestartStatusCaused: _CGLGPURestartStatus = 1;
pub const _CGLGPURestartStatus_kCGLCPGPURestartStatusBlacklisted: _CGLGPURestartStatus = 2;
pub const _CGLGPURestartStatus_kCGLCPGPURestartStatusDenied: _CGLGPURestartStatus = 2;
pub type _CGLGPURestartStatus = ::std::os::raw::c_uint;
pub use self::_CGLGPURestartStatus as CGLGPURestartStatus;
pub const _CGLContextParameter_kCGLCPSwapRectangle: _CGLContextParameter = 200;
pub const _CGLContextParameter_kCGLCPSwapInterval: _CGLContextParameter = 222;
pub const _CGLContextParameter_kCGLCPDispatchTableSize: _CGLContextParameter = 224;
pub const _CGLContextParameter_kCGLCPClientStorage: _CGLContextParameter = 226;
pub const _CGLContextParameter_kCGLCPSurfaceTexture: _CGLContextParameter = 228;
pub const _CGLContextParameter_kCGLCPSurfaceOrder: _CGLContextParameter = 235;
pub const _CGLContextParameter_kCGLCPSurfaceOpacity: _CGLContextParameter = 236;
pub const _CGLContextParameter_kCGLCPSurfaceBackingSize: _CGLContextParameter = 304;
pub const _CGLContextParameter_kCGLCPSurfaceSurfaceVolatile: _CGLContextParameter = 306;
pub const _CGLContextParameter_kCGLCPReclaimResources: _CGLContextParameter = 308;
pub const _CGLContextParameter_kCGLCPCurrentRendererID: _CGLContextParameter = 309;
pub const _CGLContextParameter_kCGLCPGPUVertexProcessing: _CGLContextParameter = 310;
pub const _CGLContextParameter_kCGLCPGPUFragmentProcessing: _CGLContextParameter = 311;
pub const _CGLContextParameter_kCGLCPHasDrawable: _CGLContextParameter = 314;
pub const _CGLContextParameter_kCGLCPMPSwapsInFlight: _CGLContextParameter = 315;
pub const _CGLContextParameter_kCGLCPGPURestartStatus: _CGLContextParameter = 317;
pub const _CGLContextParameter_kCGLCPAbortOnGPURestartStatusBlacklisted: _CGLContextParameter = 318;
pub const _CGLContextParameter_kCGLCPAbortOnGPURestartStatusDenied: _CGLContextParameter = 318;
pub const _CGLContextParameter_kCGLCPSupportGPURestart: _CGLContextParameter = 319;
pub const _CGLContextParameter_kCGLCPSupportSeparateAddressSpace: _CGLContextParameter = 320;
pub const _CGLContextParameter_kCGLCPContextPriorityRequest: _CGLContextParameter = 608;
pub type _CGLContextParameter = ::std::os::raw::c_uint;
pub use self::_CGLContextParameter as CGLContextParameter;
pub const CGLCPContextPriorityRequest_kCGLCPContextPriorityRequestHigh:
    CGLCPContextPriorityRequest = 0;
pub const CGLCPContextPriorityRequest_kCGLCPContextPriorityRequestNormal:
    CGLCPContextPriorityRequest = 1;
pub const CGLCPContextPriorityRequest_kCGLCPContextPriorityRequestLow: CGLCPContextPriorityRequest =
    2;
pub type CGLCPContextPriorityRequest = ::std::os::raw::c_uint;
pub const _CGLGlobalOption_kCGLGOFormatCacheSize: _CGLGlobalOption = 501;
pub const _CGLGlobalOption_kCGLGOClearFormatCache: _CGLGlobalOption = 502;
pub const _CGLGlobalOption_kCGLGORetainRenderers: _CGLGlobalOption = 503;
pub const _CGLGlobalOption_kCGLGOUseBuildCache: _CGLGlobalOption = 506;
pub const _CGLGlobalOption_kCGLGOResetLibrary: _CGLGlobalOption = 504;
pub const _CGLGlobalOption_kCGLGOUseErrorHandler: _CGLGlobalOption = 505;
pub type _CGLGlobalOption = ::std::os::raw::c_uint;
pub use self::_CGLGlobalOption as CGLGlobalOption;
pub const _CGLOpenGLProfile_kCGLOGLPVersion_Legacy: _CGLOpenGLProfile = 4096;
pub const _CGLOpenGLProfile_kCGLOGLPVersion_3_2_Core: _CGLOpenGLProfile = 12800;
pub const _CGLOpenGLProfile_kCGLOGLPVersion_GL3_Core: _CGLOpenGLProfile = 12800;
pub const _CGLOpenGLProfile_kCGLOGLPVersion_GL4_Core: _CGLOpenGLProfile = 16640;
pub type _CGLOpenGLProfile = ::std::os::raw::c_uint;
pub use self::_CGLOpenGLProfile as CGLOpenGLProfile;
pub const _CGLError_kCGLNoError: _CGLError = 0;
pub const _CGLError_kCGLBadAttribute: _CGLError = 10000;
pub const _CGLError_kCGLBadProperty: _CGLError = 10001;
pub const _CGLError_kCGLBadPixelFormat: _CGLError = 10002;
pub const _CGLError_kCGLBadRendererInfo: _CGLError = 10003;
pub const _CGLError_kCGLBadContext: _CGLError = 10004;
pub const _CGLError_kCGLBadDrawable: _CGLError = 10005;
pub const _CGLError_kCGLBadDisplay: _CGLError = 10006;
pub const _CGLError_kCGLBadState: _CGLError = 10007;
pub const _CGLError_kCGLBadValue: _CGLError = 10008;
pub const _CGLError_kCGLBadMatch: _CGLError = 10009;
pub const _CGLError_kCGLBadEnumeration: _CGLError = 10010;
pub const _CGLError_kCGLBadOffScreen: _CGLError = 10011;
pub const _CGLError_kCGLBadFullScreen: _CGLError = 10012;
pub const _CGLError_kCGLBadWindow: _CGLError = 10013;
pub const _CGLError_kCGLBadAddress: _CGLError = 10014;
pub const _CGLError_kCGLBadCodeModule: _CGLError = 10015;
pub const _CGLError_kCGLBadAlloc: _CGLError = 10016;
pub const _CGLError_kCGLBadConnection: _CGLError = 10017;
pub type _CGLError = ::std::os::raw::c_uint;
pub use self::_CGLError as CGLError;
extern "C" {
    pub fn CGLSetCurrentContext(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLGetCurrentContext() -> CGLContextObj;
}
pub type GLbitfield = u32;
pub type GLboolean = u8;
pub type GLbyte = i8;
pub type GLclampf = f32;
pub type GLenum = u32;
pub type GLfloat = f32;
pub type GLint = i32;
pub type GLshort = i16;
pub type GLsizei = i32;
pub type GLubyte = u8;
pub type GLuint = u32;
pub type GLushort = u16;
pub type GLvoid = ::std::os::raw::c_void;
pub type GLchar = ::std::os::raw::c_char;
pub type GLcharARB = ::std::os::raw::c_char;
pub type GLhandleARB = *mut ::std::os::raw::c_void;
pub type GLdouble = f64;
pub type GLclampd = f64;
pub type GLfixed = i32;
pub type GLhalf = u16;
pub type GLhalfARB = u16;
pub type GLint64 = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLsync {
    _unused: [u8; 0],
}
pub type GLsync = *mut __GLsync;
pub type GLuint64 = u64;
pub type GLint64EXT = i64;
pub type GLuint64EXT = u64;
pub type GLintptr = isize;
pub type GLsizeiptr = isize;
pub type GLintptrARB = isize;
pub type GLsizeiptrARB = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGLShareGroupRec {
    _unused: [u8; 0],
}
pub type CGLShareGroupObj = *mut CGLShareGroupRec;
extern "C" {
    pub fn CGLGetShareGroup(ctx: CGLContextObj) -> CGLShareGroupObj;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_device_id {
    _unused: [u8; 0],
}
pub type cl_device_id = *mut _cl_device_id;
extern "C" {
    pub fn CGLGetDeviceFromGLRenderer(rendererID: GLint) -> cl_device_id;
}
pub const kCGLRendererGenericID: _bindgen_ty_37 = 131584;
pub const kCGLRendererGenericFloatID: _bindgen_ty_37 = 132096;
pub const kCGLRendererAppleSWID: _bindgen_ty_37 = 132608;
pub const kCGLRendererATIRage128ID: _bindgen_ty_37 = 135168;
pub const kCGLRendererATIRadeonID: _bindgen_ty_37 = 135680;
pub const kCGLRendererATIRageProID: _bindgen_ty_37 = 136192;
pub const kCGLRendererATIRadeon8500ID: _bindgen_ty_37 = 136704;
pub const kCGLRendererATIRadeon9700ID: _bindgen_ty_37 = 137216;
pub const kCGLRendererATIRadeonX1000ID: _bindgen_ty_37 = 137472;
pub const kCGLRendererATIRadeonX2000ID: _bindgen_ty_37 = 137728;
pub const kCGLRendererATIRadeonX3000ID: _bindgen_ty_37 = 137984;
pub const kCGLRendererATIRadeonX4000ID: _bindgen_ty_37 = 138240;
pub const kCGLRendererGeForce2MXID: _bindgen_ty_37 = 139264;
pub const kCGLRendererGeForce3ID: _bindgen_ty_37 = 139776;
pub const kCGLRendererGeForceFXID: _bindgen_ty_37 = 140288;
pub const kCGLRendererGeForce8xxxID: _bindgen_ty_37 = 140800;
pub const kCGLRendererGeForceID: _bindgen_ty_37 = 141056;
pub const kCGLRendererVTBladeXP2ID: _bindgen_ty_37 = 143360;
pub const kCGLRendererIntel900ID: _bindgen_ty_37 = 147456;
pub const kCGLRendererIntelX3100ID: _bindgen_ty_37 = 147968;
pub const kCGLRendererIntelHDID: _bindgen_ty_37 = 148224;
pub const kCGLRendererIntelHD4000ID: _bindgen_ty_37 = 148480;
pub const kCGLRendererIntelHD5000ID: _bindgen_ty_37 = 148736;
pub const kCGLRendererMesa3DFXID: _bindgen_ty_37 = 262144;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __IOSurface {
    _unused: [u8; 0],
}
pub type IOSurfaceRef = *mut __IOSurface;
extern "C" {
    pub fn CGLTexImageIOSurface2D(
        ctx: CGLContextObj,
        target: GLenum,
        internal_format: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        ioSurface: IOSurfaceRef,
        plane: GLuint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLChoosePixelFormat(
        attribs: *const CGLPixelFormatAttribute,
        pix: *mut CGLPixelFormatObj,
        npix: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLDestroyPixelFormat(pix: CGLPixelFormatObj) -> CGLError;
}
extern "C" {
    pub fn CGLDescribePixelFormat(
        pix: CGLPixelFormatObj,
        pix_num: GLint,
        attrib: CGLPixelFormatAttribute,
        value: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLReleasePixelFormat(pix: CGLPixelFormatObj);
}
extern "C" {
    pub fn CGLRetainPixelFormat(pix: CGLPixelFormatObj) -> CGLPixelFormatObj;
}
extern "C" {
    pub fn CGLGetPixelFormatRetainCount(pix: CGLPixelFormatObj) -> GLuint;
}
extern "C" {
    pub fn CGLQueryRendererInfo(
        display_mask: GLuint,
        rend: *mut CGLRendererInfoObj,
        nrend: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLDestroyRendererInfo(rend: CGLRendererInfoObj) -> CGLError;
}
extern "C" {
    pub fn CGLDescribeRenderer(
        rend: CGLRendererInfoObj,
        rend_num: GLint,
        prop: CGLRendererProperty,
        value: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLCreateContext(
        pix: CGLPixelFormatObj,
        share: CGLContextObj,
        ctx: *mut CGLContextObj,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLDestroyContext(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLCopyContext(src: CGLContextObj, dst: CGLContextObj, mask: GLbitfield) -> CGLError;
}
extern "C" {
    pub fn CGLRetainContext(ctx: CGLContextObj) -> CGLContextObj;
}
extern "C" {
    pub fn CGLReleaseContext(ctx: CGLContextObj);
}
extern "C" {
    pub fn CGLGetContextRetainCount(ctx: CGLContextObj) -> GLuint;
}
extern "C" {
    pub fn CGLGetPixelFormat(ctx: CGLContextObj) -> CGLPixelFormatObj;
}
extern "C" {
    pub fn CGLCreatePBuffer(
        width: GLsizei,
        height: GLsizei,
        target: GLenum,
        internalFormat: GLenum,
        max_level: GLint,
        pbuffer: *mut CGLPBufferObj,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLDestroyPBuffer(pbuffer: CGLPBufferObj) -> CGLError;
}
extern "C" {
    pub fn CGLDescribePBuffer(
        obj: CGLPBufferObj,
        width: *mut GLsizei,
        height: *mut GLsizei,
        target: *mut GLenum,
        internalFormat: *mut GLenum,
        mipmap: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLTexImagePBuffer(
        ctx: CGLContextObj,
        pbuffer: CGLPBufferObj,
        source: GLenum,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLRetainPBuffer(pbuffer: CGLPBufferObj) -> CGLPBufferObj;
}
extern "C" {
    pub fn CGLReleasePBuffer(pbuffer: CGLPBufferObj);
}
extern "C" {
    pub fn CGLGetPBufferRetainCount(pbuffer: CGLPBufferObj) -> GLuint;
}
extern "C" {
    pub fn CGLSetOffScreen(
        ctx: CGLContextObj,
        width: GLsizei,
        height: GLsizei,
        rowbytes: GLint,
        baseaddr: *mut ::std::os::raw::c_void,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLGetOffScreen(
        ctx: CGLContextObj,
        width: *mut GLsizei,
        height: *mut GLsizei,
        rowbytes: *mut GLint,
        baseaddr: *mut *mut ::std::os::raw::c_void,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLSetFullScreen(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLSetFullScreenOnDisplay(ctx: CGLContextObj, display_mask: GLuint) -> CGLError;
}
extern "C" {
    pub fn CGLSetPBuffer(
        ctx: CGLContextObj,
        pbuffer: CGLPBufferObj,
        face: GLenum,
        level: GLint,
        screen: GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLGetPBuffer(
        ctx: CGLContextObj,
        pbuffer: *mut CGLPBufferObj,
        face: *mut GLenum,
        level: *mut GLint,
        screen: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLClearDrawable(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLFlushDrawable(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLEnable(ctx: CGLContextObj, pname: CGLContextEnable) -> CGLError;
}
extern "C" {
    pub fn CGLDisable(ctx: CGLContextObj, pname: CGLContextEnable) -> CGLError;
}
extern "C" {
    pub fn CGLIsEnabled(
        ctx: CGLContextObj,
        pname: CGLContextEnable,
        enable: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLSetParameter(
        ctx: CGLContextObj,
        pname: CGLContextParameter,
        params: *const GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLGetParameter(
        ctx: CGLContextObj,
        pname: CGLContextParameter,
        params: *mut GLint,
    ) -> CGLError;
}
extern "C" {
    pub fn CGLSetVirtualScreen(ctx: CGLContextObj, screen: GLint) -> CGLError;
}
extern "C" {
    pub fn CGLGetVirtualScreen(ctx: CGLContextObj, screen: *mut GLint) -> CGLError;
}
extern "C" {
    pub fn CGLUpdateContext(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLSetGlobalOption(pname: CGLGlobalOption, params: *const GLint) -> CGLError;
}
extern "C" {
    pub fn CGLGetGlobalOption(pname: CGLGlobalOption, params: *mut GLint) -> CGLError;
}
extern "C" {
    pub fn CGLSetOption(pname: CGLGlobalOption, param: GLint) -> CGLError;
}
extern "C" {
    pub fn CGLGetOption(pname: CGLGlobalOption, param: *mut GLint) -> CGLError;
}
extern "C" {
    pub fn CGLLockContext(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLUnlockContext(ctx: CGLContextObj) -> CGLError;
}
extern "C" {
    pub fn CGLGetVersion(majorvers: *mut GLint, minorvers: *mut GLint);
}
extern "C" {
    pub fn CGLErrorString(error: CGLError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glCullFace(mode: GLenum);
}
extern "C" {
    pub fn glFrontFace(mode: GLenum);
}
extern "C" {
    pub fn glHint(target: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glLineWidth(width: GLfloat);
}
extern "C" {
    pub fn glPointSize(size: GLfloat);
}
extern "C" {
    pub fn glPolygonMode(face: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
extern "C" {
    pub fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexImage1D(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glDrawBuffer(mode: GLenum);
}
extern "C" {
    pub fn glClear(mask: GLbitfield);
}
extern "C" {
    pub fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glClearStencil(s: GLint);
}
extern "C" {
    pub fn glClearDepth(depth: GLclampd);
}
extern "C" {
    pub fn glStencilMask(mask: GLuint);
}
extern "C" {
    pub fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
}
extern "C" {
    pub fn glDepthMask(flag: GLboolean);
}
extern "C" {
    pub fn glDisable(cap: GLenum);
}
extern "C" {
    pub fn glEnable(cap: GLenum);
}
extern "C" {
    pub fn glFinish();
}
extern "C" {
    pub fn glFlush();
}
extern "C" {
    pub fn glBlendFunc(sfactor: GLenum, dfactor: GLenum);
}
extern "C" {
    pub fn glLogicOp(opcode: GLenum);
}
extern "C" {
    pub fn glStencilFunc(func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);
}
extern "C" {
    pub fn glDepthFunc(func: GLenum);
}
extern "C" {
    pub fn glPixelStoref(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPixelStorei(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glReadBuffer(mode: GLenum);
}
extern "C" {
    pub fn glReadPixels(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetBooleanv(pname: GLenum, params: *mut GLboolean);
}
extern "C" {
    pub fn glGetDoublev(pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetError() -> GLenum;
}
extern "C" {
    pub fn glGetFloatv(pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetIntegerv(pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetString(name: GLenum) -> *const GLubyte;
}
extern "C" {
    pub fn glGetTexImage(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexLevelParameterfv(
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLfloat,
    );
}
extern "C" {
    pub fn glGetTexLevelParameteriv(
        target: GLenum,
        level: GLint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glIsEnabled(cap: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glDepthRange(near: GLclampd, far: GLclampd);
}
extern "C" {
    pub fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}
pub type PFNGLCULLFACEPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLFRONTFACEPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLHINTPROC = ::std::option::Option<unsafe extern "C" fn(target: GLenum, mode: GLenum)>;
pub type PFNGLLINEWIDTHPROC = ::std::option::Option<unsafe extern "C" fn(width: GLfloat)>;
pub type PFNGLPOINTSIZEPROC = ::std::option::Option<unsafe extern "C" fn(size: GLfloat)>;
pub type PFNGLPOLYGONMODEPROC =
    ::std::option::Option<unsafe extern "C" fn(face: GLenum, mode: GLenum)>;
pub type PFNGLSCISSORPROC = ::std::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
pub type PFNGLTEXPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat)>;
pub type PFNGLTEXPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLfloat),
>;
pub type PFNGLTEXPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, param: GLint)>;
pub type PFNGLTEXPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLTEXIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLDRAWBUFFERPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLCLEARPROC = ::std::option::Option<unsafe extern "C" fn(mask: GLbitfield)>;
pub type PFNGLCLEARCOLORPROC = ::std::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
pub type PFNGLCLEARSTENCILPROC = ::std::option::Option<unsafe extern "C" fn(s: GLint)>;
pub type PFNGLCLEARDEPTHPROC = ::std::option::Option<unsafe extern "C" fn(depth: GLclampd)>;
pub type PFNGLSTENCILMASKPROC = ::std::option::Option<unsafe extern "C" fn(mask: GLuint)>;
pub type PFNGLCOLORMASKPROC = ::std::option::Option<
    unsafe extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean),
>;
pub type PFNGLDEPTHMASKPROC = ::std::option::Option<unsafe extern "C" fn(flag: GLboolean)>;
pub type PFNGLDISABLEPROC = ::std::option::Option<unsafe extern "C" fn(cap: GLenum)>;
pub type PFNGLENABLEPROC = ::std::option::Option<unsafe extern "C" fn(cap: GLenum)>;
pub type PFNGLFINISHPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLFLUSHPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLBLENDFUNCPROC =
    ::std::option::Option<unsafe extern "C" fn(sfactor: GLenum, dfactor: GLenum)>;
pub type PFNGLLOGICOPPROC = ::std::option::Option<unsafe extern "C" fn(opcode: GLenum)>;
pub type PFNGLSTENCILFUNCPROC =
    ::std::option::Option<unsafe extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint)>;
pub type PFNGLSTENCILOPPROC =
    ::std::option::Option<unsafe extern "C" fn(fail: GLenum, zfail: GLenum, zpass: GLenum)>;
pub type PFNGLDEPTHFUNCPROC = ::std::option::Option<unsafe extern "C" fn(func: GLenum)>;
pub type PFNGLPIXELSTOREFPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPIXELSTOREIPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLREADBUFFERPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLREADPIXELSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *mut GLvoid,
    ),
>;
pub type PFNGLGETBOOLEANVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLboolean)>;
pub type PFNGLGETDOUBLEVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLdouble)>;
pub type PFNGLGETERRORPROC = ::std::option::Option<unsafe extern "C" fn() -> GLenum>;
pub type PFNGLGETFLOATVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLfloat)>;
pub type PFNGLGETINTEGERVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSTRINGPROC =
    ::std::option::Option<unsafe extern "C" fn(name: GLenum) -> *const GLubyte>;
pub type PFNGLGETTEXIMAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *mut GLvoid,
    ),
>;
pub type PFNGLGETTEXPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETTEXPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETTEXLEVELPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETTEXLEVELPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLISENABLEDPROC = ::std::option::Option<unsafe extern "C" fn(cap: GLenum) -> GLboolean>;
pub type PFNGLDEPTHRANGEPROC =
    ::std::option::Option<unsafe extern "C" fn(near: GLclampd, far: GLclampd)>;
pub type PFNGLVIEWPORTPROC = ::std::option::Option<
    unsafe extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei),
>;
extern "C" {
    pub fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glDrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const GLvoid);
}
extern "C" {
    pub fn glPolygonOffset(factor: GLfloat, units: GLfloat);
}
extern "C" {
    pub fn glCopyTexImage1D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    );
}
extern "C" {
    pub fn glCopyTexSubImage1D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glTexSubImage1D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glBindTexture(target: GLenum, texture: GLuint);
}
extern "C" {
    pub fn glDeleteTextures(n: GLsizei, textures: *const GLuint);
}
extern "C" {
    pub fn glGenTextures(n: GLsizei, textures: *mut GLuint);
}
extern "C" {
    pub fn glIsTexture(texture: GLuint) -> GLboolean;
}
pub type PFNGLDRAWARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei)>;
pub type PFNGLDRAWELEMENTSPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const GLvoid),
>;
pub type PFNGLPOLYGONOFFSETPROC =
    ::std::option::Option<unsafe extern "C" fn(factor: GLfloat, units: GLfloat)>;
pub type PFNGLCOPYTEXIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLTEXSUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLTEXSUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLBINDTEXTUREPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, texture: GLuint)>;
pub type PFNGLDELETETEXTURESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *const GLuint)>;
pub type PFNGLGENTEXTURESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, textures: *mut GLuint)>;
pub type PFNGLISTEXTUREPROC =
    ::std::option::Option<unsafe extern "C" fn(texture: GLuint) -> GLboolean>;
extern "C" {
    pub fn glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glBlendEquation(mode: GLenum);
}
extern "C" {
    pub fn glDrawRangeElements(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexImage3D(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glTexSubImage3D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glCopyTexSubImage3D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
pub type PFNGLBLENDCOLORPROC = ::std::option::Option<
    unsafe extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat),
>;
pub type PFNGLBLENDEQUATIONPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
pub type PFNGLDRAWRANGEELEMENTSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
    ),
>;
pub type PFNGLTEXIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLTEXSUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    ),
>;
pub type PFNGLCOPYTEXSUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
extern "C" {
    pub fn glActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glSampleCoverage(value: GLclampf, invert: GLboolean);
}
extern "C" {
    pub fn glCompressedTexImage3D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexImage2D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexImage1D(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage3D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage2D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage1D(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetCompressedTexImage(target: GLenum, level: GLint, img: *mut GLvoid);
}
pub type PFNGLACTIVETEXTUREPROC = ::std::option::Option<unsafe extern "C" fn(texture: GLenum)>;
pub type PFNGLSAMPLECOVERAGEPROC =
    ::std::option::Option<unsafe extern "C" fn(value: GLclampf, invert: GLboolean)>;
pub type PFNGLCOMPRESSEDTEXIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    ),
>;
pub type PFNGLGETCOMPRESSEDTEXIMAGEPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, level: GLint, img: *mut GLvoid)>;
extern "C" {
    pub fn glBlendFuncSeparate(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    );
}
extern "C" {
    pub fn glMultiDrawArrays(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        drawcount: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElements(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const GLvoid,
        drawcount: GLsizei,
    );
}
extern "C" {
    pub fn glPointParameterf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glPointParameteri(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPointParameteriv(pname: GLenum, params: *const GLint);
}
pub type PFNGLBLENDFUNCSEPARATEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    ),
>;
pub type PFNGLMULTIDRAWARRAYSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        drawcount: GLsizei,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const GLvoid,
        drawcount: GLsizei,
    ),
>;
pub type PFNGLPOINTPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLfloat)>;
pub type PFNGLPOINTPARAMETERFVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLfloat)>;
pub type PFNGLPOINTPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, param: GLint)>;
pub type PFNGLPOINTPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *const GLint)>;
extern "C" {
    pub fn glGenQueries(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glDeleteQueries(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glIsQuery(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginQuery(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glEndQuery(target: GLenum);
}
extern "C" {
    pub fn glGetQueryiv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectiv(id: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glBindBuffer(target: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glDeleteBuffers(n: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glGenBuffers(n: GLsizei, buffers: *mut GLuint);
}
extern "C" {
    pub fn glIsBuffer(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBufferData(target: GLenum, size: GLsizeiptr, data: *const GLvoid, usage: GLenum);
}
extern "C" {
    pub fn glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const GLvoid);
}
extern "C" {
    pub fn glGetBufferSubData(
        target: GLenum,
        offset: GLintptr,
        size: GLsizeiptr,
        data: *mut GLvoid,
    );
}
extern "C" {
    pub fn glMapBuffer(target: GLenum, access: GLenum) -> *mut GLvoid;
}
extern "C" {
    pub fn glUnmapBuffer(target: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetBufferPointerv(target: GLenum, pname: GLenum, params: *mut *mut GLvoid);
}
pub type PFNGLGENQUERIESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLDELETEQUERIESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLISQUERYPROC = ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLBEGINQUERYPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLENDQUERYPROC = ::std::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLGETQUERYIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTIVPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETQUERYOBJECTUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint)>;
pub type PFNGLBINDBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, buffer: GLuint)>;
pub type PFNGLDELETEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *const GLuint)>;
pub type PFNGLGENBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, buffers: *mut GLuint)>;
pub type PFNGLISBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(buffer: GLuint) -> GLboolean>;
pub type PFNGLBUFFERDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, size: GLsizeiptr, data: *const GLvoid, usage: GLenum),
>;
pub type PFNGLBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const GLvoid),
>;
pub type PFNGLGETBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *mut GLvoid),
>;
pub type PFNGLMAPBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, access: GLenum) -> *mut GLvoid>;
pub type PFNGLUNMAPBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLboolean>;
pub type PFNGLGETBUFFERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETBUFFERPOINTERVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut GLvoid),
>;
extern "C" {
    pub fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glDrawBuffers(n: GLsizei, bufs: *const GLenum);
}
extern "C" {
    pub fn glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
}
extern "C" {
    pub fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glStencilMaskSeparate(face: GLenum, mask: GLuint);
}
extern "C" {
    pub fn glAttachShader(program: GLuint, shader: GLuint);
}
extern "C" {
    pub fn glBindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glCompileShader(shader: GLuint);
}
extern "C" {
    pub fn glCreateProgram() -> GLuint;
}
extern "C" {
    pub fn glCreateShader(type_: GLenum) -> GLuint;
}
extern "C" {
    pub fn glDeleteProgram(program: GLuint);
}
extern "C" {
    pub fn glDeleteShader(shader: GLuint);
}
extern "C" {
    pub fn glDetachShader(program: GLuint, shader: GLuint);
}
extern "C" {
    pub fn glDisableVertexAttribArray(index: GLuint);
}
extern "C" {
    pub fn glEnableVertexAttribArray(index: GLuint);
}
extern "C" {
    pub fn glGetActiveAttrib(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetActiveUniform(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetAttachedShaders(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetAttribLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetProgramiv(program: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetProgramInfoLog(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetShaderiv(shader: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetShaderInfoLog(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetShaderSource(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetUniformLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glGetUniformfv(program: GLuint, location: GLint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetUniformiv(program: GLuint, location: GLint, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribdv(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: *mut *mut GLvoid);
}
extern "C" {
    pub fn glIsProgram(program: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glIsShader(shader: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glLinkProgram(program: GLuint);
}
extern "C" {
    pub fn glShaderSource(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glUseProgram(program: GLuint);
}
extern "C" {
    pub fn glUniform1f(location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
}
extern "C" {
    pub fn glUniform1i(location: GLint, v0: GLint);
}
extern "C" {
    pub fn glUniform2i(location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
}
extern "C" {
    pub fn glUniform1fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform2fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform3fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform4fv(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform1iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform2iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform3iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform4iv(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniformMatrix2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glValidateProgram(program: GLuint);
}
extern "C" {
    pub fn glVertexAttrib1d(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1f(index: GLuint, x: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1s(index: GLuint, x: GLshort);
}
extern "C" {
    pub fn glVertexAttrib1sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertexAttrib2sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertexAttrib3sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4Nbv(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4Niv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4Nsv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4Nubv(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4Nuiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4Nusv(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttrib4bv(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4fv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertexAttrib4sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4ubv(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4usv(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttribPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
pub type PFNGLBLENDEQUATIONSEPARATEPROC =
    ::std::option::Option<unsafe extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLDRAWBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, bufs: *const GLenum)>;
pub type PFNGLSTENCILOPSEPARATEPROC = ::std::option::Option<
    unsafe extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum),
>;
pub type PFNGLSTENCILFUNCSEPARATEPROC = ::std::option::Option<
    unsafe extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint),
>;
pub type PFNGLSTENCILMASKSEPARATEPROC =
    ::std::option::Option<unsafe extern "C" fn(face: GLenum, mask: GLuint)>;
pub type PFNGLATTACHSHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
pub type PFNGLBINDATTRIBLOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, index: GLuint, name: *const GLchar),
>;
pub type PFNGLCOMPILESHADERPROC = ::std::option::Option<unsafe extern "C" fn(shader: GLuint)>;
pub type PFNGLCREATEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn() -> GLuint>;
pub type PFNGLCREATESHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(type_: GLenum) -> GLuint>;
pub type PFNGLDELETEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLDELETESHADERPROC = ::std::option::Option<unsafe extern "C" fn(shader: GLuint)>;
pub type PFNGLDETACHSHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, shader: GLuint)>;
pub type PFNGLDISABLEVERTEXATTRIBARRAYPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLENABLEVERTEXATTRIBARRAYPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint)>;
pub type PFNGLGETACTIVEATTRIBPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETATTACHEDSHADERSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        maxCount: GLsizei,
        count: *mut GLsizei,
        shaders: *mut GLuint,
    ),
>;
pub type PFNGLGETATTRIBLOCATIONPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETPROGRAMIVPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETPROGRAMINFOLOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETSHADERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(shader: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSHADERINFOLOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
pub type PFNGLGETSHADERSOURCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        source: *mut GLchar,
    ),
>;
pub type PFNGLGETUNIFORMLOCATIONPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLGETUNIFORMFVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLfloat),
>;
pub type PFNGLGETUNIFORMIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLint),
>;
pub type PFNGLGETVERTEXATTRIBDVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
pub type PFNGLGETVERTEXATTRIBFVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLfloat)>;
pub type PFNGLGETVERTEXATTRIBIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBPOINTERVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, pointer: *mut *mut GLvoid),
>;
pub type PFNGLISPROGRAMPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint) -> GLboolean>;
pub type PFNGLISSHADERPROC =
    ::std::option::Option<unsafe extern "C" fn(shader: GLuint) -> GLboolean>;
pub type PFNGLLINKPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLSHADERSOURCEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        count: GLsizei,
        string: *const *const GLchar,
        length: *const GLint,
    ),
>;
pub type PFNGLUSEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLUNIFORM1FPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat)>;
pub type PFNGLUNIFORM2FPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat)>;
pub type PFNGLUNIFORM3FPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLUNIFORM4FPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat),
>;
pub type PFNGLUNIFORM1IPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint)>;
pub type PFNGLUNIFORM2IPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint)>;
pub type PFNGLUNIFORM3IPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint)>;
pub type PFNGLUNIFORM4IPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint),
>;
pub type PFNGLUNIFORM1FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLUNIFORM1IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM2IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM3IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORM4IVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLUNIFORMMATRIX2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLVALIDATEPROGRAMPROC = ::std::option::Option<unsafe extern "C" fn(program: GLuint)>;
pub type PFNGLVERTEXATTRIB1DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIB1DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB1FPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat)>;
pub type PFNGLVERTEXATTRIB1FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB1SPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort)>;
pub type PFNGLVERTEXATTRIB1SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB2DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIB2DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB2FPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat)>;
pub type PFNGLVERTEXATTRIB2FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB2SPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort)>;
pub type PFNGLVERTEXATTRIB2SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB3DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIB3DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB3FPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat)>;
pub type PFNGLVERTEXATTRIB3FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB3SPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort)>;
pub type PFNGLVERTEXATTRIB3SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4NBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIB4NIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIB4NSVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4NUBPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte),
>;
pub type PFNGLVERTEXATTRIB4NUBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIB4NUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIB4NUSVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIB4BVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIB4DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIB4DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIB4FPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
>;
pub type PFNGLVERTEXATTRIB4FVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLVERTEXATTRIB4IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIB4SPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
>;
pub type PFNGLVERTEXATTRIB4SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIB4UBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIB4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIB4USVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLVERTEXATTRIBPOINTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const GLvoid,
    ),
>;
extern "C" {
    pub fn glUniformMatrix2x3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3x2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix2x4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4x2fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3x4fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4x3fv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
pub type PFNGLUNIFORMMATRIX2X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
extern "C" {
    pub fn glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);
}
extern "C" {
    pub fn glGetBooleani_v(target: GLenum, index: GLuint, data: *mut GLboolean);
}
extern "C" {
    pub fn glGetIntegeri_v(target: GLenum, index: GLuint, data: *mut GLint);
}
extern "C" {
    pub fn glEnablei(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glDisablei(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glIsEnabledi(target: GLenum, index: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginTransformFeedback(primitiveMode: GLenum);
}
extern "C" {
    pub fn glEndTransformFeedback();
}
extern "C" {
    pub fn glBindBufferRange(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint);
}
extern "C" {
    pub fn glTransformFeedbackVaryings(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    );
}
extern "C" {
    pub fn glGetTransformFeedbackVarying(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glClampColor(target: GLenum, clamp: GLenum);
}
extern "C" {
    pub fn glBeginConditionalRender(id: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glEndConditionalRender();
}
extern "C" {
    pub fn glVertexAttribIPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glVertexAttribI1i(index: GLuint, x: GLint);
}
extern "C" {
    pub fn glVertexAttribI2i(index: GLuint, x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertexAttribI1ui(index: GLuint, x: GLuint);
}
extern "C" {
    pub fn glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint);
}
extern "C" {
    pub fn glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint);
}
extern "C" {
    pub fn glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);
}
extern "C" {
    pub fn glVertexAttribI1iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI2iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI3iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI4iv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI1uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI2uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI3uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4uiv(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4bv(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttribI4sv(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribI4ubv(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttribI4usv(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glGetUniformuiv(program: GLuint, location: GLint, params: *mut GLuint);
}
extern "C" {
    pub fn glBindFragDataLocation(program: GLuint, color: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glGetFragDataLocation(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glUniform1ui(location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glUniform2ui(location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
}
extern "C" {
    pub fn glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
}
extern "C" {
    pub fn glUniform1uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform2uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform3uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform4uiv(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glTexParameterIiv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexParameterIuiv(target: GLenum, pname: GLenum, params: *const GLuint);
}
extern "C" {
    pub fn glGetTexParameterIiv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *const GLint);
}
extern "C" {
    pub fn glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *const GLuint);
}
extern "C" {
    pub fn glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat);
}
extern "C" {
    pub fn glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);
}
extern "C" {
    pub fn glGetStringi(name: GLenum, index: GLuint) -> *const GLubyte;
}
pub type PFNGLCOLORMASKIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean),
>;
pub type PFNGLGETBOOLEANI_VPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLboolean),
>;
pub type PFNGLGETINTEGERI_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint)>;
pub type PFNGLENABLEIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLDISABLEIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLISENABLEDIPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>;
pub type PFNGLBEGINTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(primitiveMode: GLenum)>;
pub type PFNGLENDTRANSFORMFEEDBACKPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLBINDBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    ),
>;
pub type PFNGLBINDBUFFERBASEPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint)>;
pub type PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    ),
>;
pub type PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    ),
>;
pub type PFNGLCLAMPCOLORPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, clamp: GLenum)>;
pub type PFNGLBEGINCONDITIONALRENDERPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, mode: GLenum)>;
pub type PFNGLENDCONDITIONALRENDERPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLVERTEXATTRIBIPOINTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    ),
>;
pub type PFNGLGETVERTEXATTRIBIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETVERTEXATTRIBIUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLuint)>;
pub type PFNGLVERTEXATTRIBI1IPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint)>;
pub type PFNGLVERTEXATTRIBI2IPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint)>;
pub type PFNGLVERTEXATTRIBI3IPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint)>;
pub type PFNGLVERTEXATTRIBI4IPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint),
>;
pub type PFNGLVERTEXATTRIBI1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint)>;
pub type PFNGLVERTEXATTRIBI2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint)>;
pub type PFNGLVERTEXATTRIBI3UIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint)>;
pub type PFNGLVERTEXATTRIBI4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint),
>;
pub type PFNGLVERTEXATTRIBI1IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI2IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI3IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI4IVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLVERTEXATTRIBI1UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI2UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI3UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI4UIVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLuint)>;
pub type PFNGLVERTEXATTRIBI4BVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLbyte)>;
pub type PFNGLVERTEXATTRIBI4SVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLshort)>;
pub type PFNGLVERTEXATTRIBI4UBVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLubyte)>;
pub type PFNGLVERTEXATTRIBI4USVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLushort)>;
pub type PFNGLGETUNIFORMUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLuint),
>;
pub type PFNGLBINDFRAGDATALOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, color: GLuint, name: *const GLchar),
>;
pub type PFNGLGETFRAGDATALOCATIONPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
pub type PFNGLUNIFORM1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint)>;
pub type PFNGLUNIFORM2UIPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint)>;
pub type PFNGLUNIFORM3UIPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLUNIFORM4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint),
>;
pub type PFNGLUNIFORM1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLUNIFORM4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLTEXPARAMETERIIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLint),
>;
pub type PFNGLTEXPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *const GLuint),
>;
pub type PFNGLGETTEXPARAMETERIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETTEXPARAMETERIUIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLuint)>;
pub type PFNGLCLEARBUFFERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLint),
>;
pub type PFNGLCLEARBUFFERUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLuint),
>;
pub type PFNGLCLEARBUFFERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat),
>;
pub type PFNGLCLEARBUFFERFIPROC = ::std::option::Option<
    unsafe extern "C" fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint),
>;
pub type PFNGLGETSTRINGIPROC =
    ::std::option::Option<unsafe extern "C" fn(name: GLenum, index: GLuint) -> *const GLubyte>;
extern "C" {
    pub fn glDrawArraysInstanced(
        mode: GLenum,
        first: GLint,
        count: GLsizei,
        instancecount: GLsizei,
    );
}
extern "C" {
    pub fn glDrawElementsInstanced(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        instancecount: GLsizei,
    );
}
extern "C" {
    pub fn glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glPrimitiveRestartIndex(index: GLuint);
}
pub type PFNGLDRAWARRAYSINSTANCEDPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        instancecount: GLsizei,
    ),
>;
pub type PFNGLTEXBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint),
>;
pub type PFNGLPRIMITIVERESTARTINDEXPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint)>;
extern "C" {
    pub fn glGetInteger64i_v(target: GLenum, index: GLuint, data: *mut GLint64);
}
extern "C" {
    pub fn glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: *mut GLint64);
}
extern "C" {
    pub fn glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);
}
pub type PFNGLGETINTEGER64I_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLint64)>;
pub type PFNGLGETBUFFERPARAMETERI64VPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint64),
>;
pub type PFNGLFRAMEBUFFERTEXTUREPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint),
>;
extern "C" {
    pub fn glVertexAttribDivisor(index: GLuint, divisor: GLuint);
}
pub type PFNGLVERTEXATTRIBDIVISORPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
extern "C" {
    pub fn glMinSampleShading(value: GLfloat);
}
extern "C" {
    pub fn glBlendEquationi(buf: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparatei(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    );
}
pub type PFNGLMINSAMPLESHADINGPROC = ::std::option::Option<unsafe extern "C" fn(value: GLfloat)>;
pub type PFNGLBLENDEQUATIONIPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEIPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCIPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEIPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
extern "C" {
    pub fn glIsRenderbuffer(renderbuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindRenderbuffer(target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glDeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint);
}
extern "C" {
    pub fn glGenRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint);
}
extern "C" {
    pub fn glRenderbufferStorage(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glIsFramebuffer(framebuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindFramebuffer(target: GLenum, framebuffer: GLuint);
}
extern "C" {
    pub fn glDeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint);
}
extern "C" {
    pub fn glGenFramebuffers(n: GLsizei, framebuffers: *mut GLuint);
}
extern "C" {
    pub fn glCheckFramebufferStatus(target: GLenum) -> GLenum;
}
extern "C" {
    pub fn glFramebufferTexture1D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture2D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture3D(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    );
}
extern "C" {
    pub fn glFramebufferRenderbuffer(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    );
}
extern "C" {
    pub fn glGetFramebufferAttachmentParameteriv(
        target: GLenum,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGenerateMipmap(target: GLenum);
}
extern "C" {
    pub fn glBlitFramebuffer(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    );
}
extern "C" {
    pub fn glRenderbufferStorageMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glFramebufferTextureLayer(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    );
}
pub type PFNGLISRENDERBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(renderbuffer: GLuint) -> GLboolean>;
pub type PFNGLBINDRENDERBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, renderbuffer: GLuint)>;
pub type PFNGLDELETERENDERBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *const GLuint)>;
pub type PFNGLGENRENDERBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, renderbuffers: *mut GLuint)>;
pub type PFNGLRENDERBUFFERSTORAGEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei),
>;
pub type PFNGLGETRENDERBUFFERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut GLint)>;
pub type PFNGLISFRAMEBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(framebuffer: GLuint) -> GLboolean>;
pub type PFNGLBINDFRAMEBUFFERPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, framebuffer: GLuint)>;
pub type PFNGLDELETEFRAMEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *const GLuint)>;
pub type PFNGLGENFRAMEBUFFERSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, framebuffers: *mut GLuint)>;
pub type PFNGLCHECKFRAMEBUFFERSTATUSPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum) -> GLenum>;
pub type PFNGLFRAMEBUFFERTEXTURE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    ),
>;
pub type PFNGLFRAMEBUFFERRENDERBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    ),
>;
pub type PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLGENERATEMIPMAPPROC = ::std::option::Option<unsafe extern "C" fn(target: GLenum)>;
pub type PFNGLBLITFRAMEBUFFERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    ),
>;
pub type PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLFRAMEBUFFERTEXTURELAYERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    ),
>;
extern "C" {
    pub fn glMapBufferRange(
        target: GLenum,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut GLvoid;
}
extern "C" {
    pub fn glFlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr);
}
pub type PFNGLMAPBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        offset: GLintptr,
        length: GLsizeiptr,
        access: GLbitfield,
    ) -> *mut GLvoid,
>;
pub type PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr),
>;
extern "C" {
    pub fn glBindVertexArray(array: GLuint);
}
extern "C" {
    pub fn glDeleteVertexArrays(n: GLsizei, arrays: *const GLuint);
}
extern "C" {
    pub fn glGenVertexArrays(n: GLsizei, arrays: *mut GLuint);
}
extern "C" {
    pub fn glIsVertexArray(array: GLuint) -> GLboolean;
}
pub type PFNGLBINDVERTEXARRAYPROC = ::std::option::Option<unsafe extern "C" fn(array: GLuint)>;
pub type PFNGLDELETEVERTEXARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *const GLuint)>;
pub type PFNGLGENVERTEXARRAYSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, arrays: *mut GLuint)>;
pub type PFNGLISVERTEXARRAYPROC =
    ::std::option::Option<unsafe extern "C" fn(array: GLuint) -> GLboolean>;
extern "C" {
    pub fn glGetUniformIndices(
        program: GLuint,
        uniformCount: GLsizei,
        uniformNames: *const *const GLchar,
        uniformIndices: *mut GLuint,
    );
}
extern "C" {
    pub fn glGetActiveUniformsiv(
        program: GLuint,
        uniformCount: GLsizei,
        uniformIndices: *const GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveUniformName(
        program: GLuint,
        uniformIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformName: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetUniformBlockIndex(program: GLuint, uniformBlockName: *const GLchar) -> GLuint;
}
extern "C" {
    pub fn glGetActiveUniformBlockiv(
        program: GLuint,
        uniformBlockIndex: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveUniformBlockName(
        program: GLuint,
        uniformBlockIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformBlockName: *mut GLchar,
    );
}
extern "C" {
    pub fn glUniformBlockBinding(
        program: GLuint,
        uniformBlockIndex: GLuint,
        uniformBlockBinding: GLuint,
    );
}
pub type PFNGLGETUNIFORMINDICESPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformCount: GLsizei,
        uniformNames: *const *const GLchar,
        uniformIndices: *mut GLuint,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMSIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformCount: GLsizei,
        uniformIndices: *const GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMNAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformName: *mut GLchar,
    ),
>;
pub type PFNGLGETUNIFORMBLOCKINDEXPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, uniformBlockName: *const GLchar) -> GLuint,
>;
pub type PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformBlockIndex: GLuint,
        pname: GLenum,
        params: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        uniformBlockIndex: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        uniformBlockName: *mut GLchar,
    ),
>;
pub type PFNGLUNIFORMBLOCKBINDINGPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint),
>;
extern "C" {
    pub fn glCopyBufferSubData(
        readTarget: GLenum,
        writeTarget: GLenum,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    );
}
pub type PFNGLCOPYBUFFERSUBDATAPROC = ::std::option::Option<
    unsafe extern "C" fn(
        readTarget: GLenum,
        writeTarget: GLenum,
        readOffset: GLintptr,
        writeOffset: GLintptr,
        size: GLsizeiptr,
    ),
>;
extern "C" {
    pub fn glDrawElementsBaseVertex(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        basevertex: GLint,
    );
}
extern "C" {
    pub fn glDrawRangeElementsBaseVertex(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        basevertex: GLint,
    );
}
extern "C" {
    pub fn glDrawElementsInstancedBaseVertex(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        instancecount: GLsizei,
        basevertex: GLint,
    );
}
extern "C" {
    pub fn glMultiDrawElementsBaseVertex(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const GLvoid,
        drawcount: GLsizei,
        basevertex: *const GLint,
    );
}
pub type PFNGLDRAWELEMENTSBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        basevertex: GLint,
    ),
>;
pub type PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        instancecount: GLsizei,
        basevertex: GLint,
    ),
>;
pub type PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ::std::option::Option<
    unsafe extern "C" fn(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const GLvoid,
        drawcount: GLsizei,
        basevertex: *const GLint,
    ),
>;
extern "C" {
    pub fn glProvokingVertex(mode: GLenum);
}
pub type PFNGLPROVOKINGVERTEXPROC = ::std::option::Option<unsafe extern "C" fn(mode: GLenum)>;
extern "C" {
    pub fn glFenceSync(condition: GLenum, flags: GLbitfield) -> GLsync;
}
extern "C" {
    pub fn glIsSync(sync: GLsync) -> GLboolean;
}
extern "C" {
    pub fn glDeleteSync(sync: GLsync);
}
extern "C" {
    pub fn glClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum;
}
extern "C" {
    pub fn glWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64);
}
extern "C" {
    pub fn glGetInteger64v(pname: GLenum, params: *mut GLint64);
}
extern "C" {
    pub fn glGetSynciv(
        sync: GLsync,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    );
}
pub type PFNGLFENCESYNCPROC =
    ::std::option::Option<unsafe extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync>;
pub type PFNGLISSYNCPROC = ::std::option::Option<unsafe extern "C" fn(sync: GLsync) -> GLboolean>;
pub type PFNGLDELETESYNCPROC = ::std::option::Option<unsafe extern "C" fn(sync: GLsync)>;
pub type PFNGLCLIENTWAITSYNCPROC = ::std::option::Option<
    unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum,
>;
pub type PFNGLWAITSYNCPROC =
    ::std::option::Option<unsafe extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64)>;
pub type PFNGLGETINTEGER64VPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, params: *mut GLint64)>;
pub type PFNGLGETSYNCIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        sync: GLsync,
        pname: GLenum,
        bufSize: GLsizei,
        length: *mut GLsizei,
        values: *mut GLint,
    ),
>;
extern "C" {
    pub fn glTexImage2DMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glTexImage3DMultisample(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    );
}
extern "C" {
    pub fn glGetMultisamplefv(pname: GLenum, index: GLuint, val: *mut GLfloat);
}
extern "C" {
    pub fn glSampleMaski(index: GLuint, mask: GLbitfield);
}
pub type PFNGLTEXIMAGE2DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLTEXIMAGE3DMULTISAMPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        fixedsamplelocations: GLboolean,
    ),
>;
pub type PFNGLGETMULTISAMPLEFVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, index: GLuint, val: *mut GLfloat)>;
pub type PFNGLSAMPLEMASKIPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, mask: GLbitfield)>;
extern "C" {
    pub fn glBindFragDataLocationIndexed(
        program: GLuint,
        colorNumber: GLuint,
        index: GLuint,
        name: *const GLchar,
    );
}
extern "C" {
    pub fn glGetFragDataIndex(program: GLuint, name: *const GLchar) -> GLint;
}
pub type PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar),
>;
pub type PFNGLGETFRAGDATAINDEXPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, name: *const GLchar) -> GLint>;
extern "C" {
    pub fn glGenSamplers(count: GLsizei, samplers: *mut GLuint);
}
extern "C" {
    pub fn glDeleteSamplers(count: GLsizei, samplers: *const GLuint);
}
extern "C" {
    pub fn glIsSampler(sampler: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindSampler(unit: GLuint, sampler: GLuint);
}
extern "C" {
    pub fn glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: *const GLint);
}
extern "C" {
    pub fn glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: *const GLfloat);
}
extern "C" {
    pub fn glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *const GLint);
}
extern "C" {
    pub fn glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *const GLuint);
}
extern "C" {
    pub fn glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *mut GLuint);
}
pub type PFNGLGENSAMPLERSPROC =
    ::std::option::Option<unsafe extern "C" fn(count: GLsizei, samplers: *mut GLuint)>;
pub type PFNGLDELETESAMPLERSPROC =
    ::std::option::Option<unsafe extern "C" fn(count: GLsizei, samplers: *const GLuint)>;
pub type PFNGLISSAMPLERPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint) -> GLboolean>;
pub type PFNGLBINDSAMPLERPROC =
    ::std::option::Option<unsafe extern "C" fn(unit: GLuint, sampler: GLuint)>;
pub type PFNGLSAMPLERPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: GLint)>;
pub type PFNGLSAMPLERPARAMETERIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
pub type PFNGLSAMPLERPARAMETERFPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: GLfloat)>;
pub type PFNGLSAMPLERPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLfloat),
>;
pub type PFNGLSAMPLERPARAMETERIIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLint),
>;
pub type PFNGLSAMPLERPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, param: *const GLuint),
>;
pub type PFNGLGETSAMPLERPARAMETERIVPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSAMPLERPARAMETERIIVPROC =
    ::std::option::Option<unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLint)>;
pub type PFNGLGETSAMPLERPARAMETERFVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLfloat),
>;
pub type PFNGLGETSAMPLERPARAMETERIUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(sampler: GLuint, pname: GLenum, params: *mut GLuint),
>;
extern "C" {
    pub fn glQueryCounter(id: GLuint, target: GLenum);
}
extern "C" {
    pub fn glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: *mut GLint64);
}
extern "C" {
    pub fn glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: *mut GLuint64);
}
pub type PFNGLQUERYCOUNTERPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, target: GLenum)>;
pub type PFNGLGETQUERYOBJECTI64VPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLint64)>;
pub type PFNGLGETQUERYOBJECTUI64VPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint, pname: GLenum, params: *mut GLuint64)>;
extern "C" {
    pub fn glVertexAttribP1ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP1uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribP2ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP2uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribP3ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP3uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glVertexAttribP4ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint);
}
extern "C" {
    pub fn glVertexAttribP4uiv(
        index: GLuint,
        type_: GLenum,
        normalized: GLboolean,
        value: *const GLuint,
    );
}
pub type PFNGLVERTEXATTRIBP1UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXATTRIBP2UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXATTRIBP3UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
pub type PFNGLVERTEXATTRIBP4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint),
>;
pub type PFNGLVERTEXATTRIBP4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint),
>;
extern "C" {
    pub fn glDrawArraysIndirect(mode: GLenum, indirect: *const GLvoid);
}
extern "C" {
    pub fn glDrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *const GLvoid);
}
pub type PFNGLDRAWARRAYSINDIRECTPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, indirect: *const GLvoid)>;
pub type PFNGLDRAWELEMENTSINDIRECTPROC = ::std::option::Option<
    unsafe extern "C" fn(mode: GLenum, type_: GLenum, indirect: *const GLvoid),
>;
extern "C" {
    pub fn glUniform1d(location: GLint, x: GLdouble);
}
extern "C" {
    pub fn glUniform2d(location: GLint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glUniform1dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniform2dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniform3dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniform4dv(location: GLint, count: GLsizei, value: *const GLdouble);
}
extern "C" {
    pub fn glUniformMatrix2dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix3dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix4dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix2x3dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix2x4dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix3x2dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix3x4dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix4x2dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glUniformMatrix4x3dv(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glGetUniformdv(program: GLuint, location: GLint, params: *mut GLdouble);
}
pub type PFNGLUNIFORM1DPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, x: GLdouble)>;
pub type PFNGLUNIFORM2DPROC =
    ::std::option::Option<unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble)>;
pub type PFNGLUNIFORM3DPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLUNIFORM4DPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLUNIFORM1DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORM2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORM3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORM4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLUNIFORMMATRIX2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX2X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX3X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLUNIFORMMATRIX4X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLGETUNIFORMDVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, params: *mut GLdouble),
>;
extern "C" {
    pub fn glGetSubroutineUniformLocation(
        program: GLuint,
        shadertype: GLenum,
        name: *const GLchar,
    ) -> GLint;
}
extern "C" {
    pub fn glGetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *const GLchar)
        -> GLuint;
}
extern "C" {
    pub fn glGetActiveSubroutineUniformiv(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        pname: GLenum,
        values: *mut GLint,
    );
}
extern "C" {
    pub fn glGetActiveSubroutineUniformName(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetActiveSubroutineName(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glUniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *const GLuint);
}
extern "C" {
    pub fn glGetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *mut GLuint);
}
extern "C" {
    pub fn glGetProgramStageiv(
        program: GLuint,
        shadertype: GLenum,
        pname: GLenum,
        values: *mut GLint,
    );
}
pub type PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLint,
>;
pub type PFNGLGETSUBROUTINEINDEXPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLuint,
>;
pub type PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        pname: GLenum,
        values: *mut GLint,
    ),
>;
pub type PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
pub type PFNGLGETACTIVESUBROUTINENAMEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        shadertype: GLenum,
        index: GLuint,
        bufsize: GLsizei,
        length: *mut GLsizei,
        name: *mut GLchar,
    ),
>;
pub type PFNGLUNIFORMSUBROUTINESUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(shadertype: GLenum, count: GLsizei, indices: *const GLuint),
>;
pub type PFNGLGETUNIFORMSUBROUTINEUIVPROC = ::std::option::Option<
    unsafe extern "C" fn(shadertype: GLenum, location: GLint, params: *mut GLuint),
>;
pub type PFNGLGETPROGRAMSTAGEIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, shadertype: GLenum, pname: GLenum, values: *mut GLint),
>;
extern "C" {
    pub fn glPatchParameteri(pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glPatchParameterfv(pname: GLenum, values: *const GLfloat);
}
pub type PFNGLPATCHPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, value: GLint)>;
pub type PFNGLPATCHPARAMETERFVPROC =
    ::std::option::Option<unsafe extern "C" fn(pname: GLenum, values: *const GLfloat)>;
extern "C" {
    pub fn glBindTransformFeedback(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glDeleteTransformFeedbacks(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glGenTransformFeedbacks(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glIsTransformFeedback(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glPauseTransformFeedback();
}
extern "C" {
    pub fn glResumeTransformFeedback();
}
extern "C" {
    pub fn glDrawTransformFeedback(mode: GLenum, id: GLuint);
}
pub type PFNGLBINDTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, id: GLuint)>;
pub type PFNGLDELETETRANSFORMFEEDBACKSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *const GLuint)>;
pub type PFNGLGENTRANSFORMFEEDBACKSPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, ids: *mut GLuint)>;
pub type PFNGLISTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(id: GLuint) -> GLboolean>;
pub type PFNGLPAUSETRANSFORMFEEDBACKPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLRESUMETRANSFORMFEEDBACKPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLDRAWTRANSFORMFEEDBACKPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint)>;
extern "C" {
    pub fn glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint);
}
extern "C" {
    pub fn glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint);
}
extern "C" {
    pub fn glEndQueryIndexed(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint);
}
pub type PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC =
    ::std::option::Option<unsafe extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint)>;
pub type PFNGLBEGINQUERYINDEXEDPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, id: GLuint)>;
pub type PFNGLENDQUERYINDEXEDPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint)>;
pub type PFNGLGETQUERYINDEXEDIVPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glReleaseShaderCompiler();
}
extern "C" {
    pub fn glShaderBinary(
        count: GLsizei,
        shaders: *const GLuint,
        binaryformat: GLenum,
        binary: *const GLvoid,
        length: GLsizei,
    );
}
extern "C" {
    pub fn glGetShaderPrecisionFormat(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    );
}
extern "C" {
    pub fn glDepthRangef(n: GLclampf, f: GLclampf);
}
extern "C" {
    pub fn glClearDepthf(d: GLclampf);
}
pub type PFNGLRELEASESHADERCOMPILERPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLSHADERBINARYPROC = ::std::option::Option<
    unsafe extern "C" fn(
        count: GLsizei,
        shaders: *const GLuint,
        binaryformat: GLenum,
        binary: *const GLvoid,
        length: GLsizei,
    ),
>;
pub type PFNGLGETSHADERPRECISIONFORMATPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shadertype: GLenum,
        precisiontype: GLenum,
        range: *mut GLint,
        precision: *mut GLint,
    ),
>;
pub type PFNGLDEPTHRANGEFPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLclampf, f: GLclampf)>;
pub type PFNGLCLEARDEPTHFPROC = ::std::option::Option<unsafe extern "C" fn(d: GLclampf)>;
extern "C" {
    pub fn glGetProgramBinary(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        binaryFormat: *mut GLenum,
        binary: *mut GLvoid,
    );
}
extern "C" {
    pub fn glProgramBinary(
        program: GLuint,
        binaryFormat: GLenum,
        binary: *const GLvoid,
        length: GLsizei,
    );
}
extern "C" {
    pub fn glProgramParameteri(program: GLuint, pname: GLenum, value: GLint);
}
pub type PFNGLGETPROGRAMBINARYPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        binaryFormat: *mut GLenum,
        binary: *mut GLvoid,
    ),
>;
pub type PFNGLPROGRAMBINARYPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        binaryFormat: GLenum,
        binary: *const GLvoid,
        length: GLsizei,
    ),
>;
pub type PFNGLPROGRAMPARAMETERIPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, pname: GLenum, value: GLint)>;
extern "C" {
    pub fn glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint);
}
extern "C" {
    pub fn glActiveShaderProgram(pipeline: GLuint, program: GLuint);
}
extern "C" {
    pub fn glCreateShaderProgramv(
        type_: GLenum,
        count: GLsizei,
        strings: *const *const GLchar,
    ) -> GLuint;
}
extern "C" {
    pub fn glBindProgramPipeline(pipeline: GLuint);
}
extern "C" {
    pub fn glDeleteProgramPipelines(n: GLsizei, pipelines: *const GLuint);
}
extern "C" {
    pub fn glGenProgramPipelines(n: GLsizei, pipelines: *mut GLuint);
}
extern "C" {
    pub fn glIsProgramPipeline(pipeline: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glProgramUniform1i(program: GLuint, location: GLint, v0: GLint);
}
extern "C" {
    pub fn glProgramUniform1iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glProgramUniform1fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble);
}
extern "C" {
    pub fn glProgramUniform1dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glProgramUniform1uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glProgramUniform2iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glProgramUniform2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble);
}
extern "C" {
    pub fn glProgramUniform2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glProgramUniform2uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glProgramUniform3iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform3f(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform3d(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform3ui(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform3uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform4i(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    );
}
extern "C" {
    pub fn glProgramUniform4iv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLint,
    );
}
extern "C" {
    pub fn glProgramUniform4f(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniform4d(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
        v3: GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniform4ui(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    );
}
extern "C" {
    pub fn glProgramUniform4uiv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        value: *const GLuint,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x2fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x4fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x3fv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix2x4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x2dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3x4dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4x3dv(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    );
}
extern "C" {
    pub fn glValidateProgramPipeline(pipeline: GLuint);
}
extern "C" {
    pub fn glGetProgramPipelineInfoLog(
        pipeline: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    );
}
pub type PFNGLUSEPROGRAMSTAGESPROC = ::std::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint),
>;
pub type PFNGLACTIVESHADERPROGRAMPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint, program: GLuint)>;
pub type PFNGLCREATESHADERPROGRAMVPROC = ::std::option::Option<
    unsafe extern "C" fn(type_: GLenum, count: GLsizei, strings: *const *const GLchar) -> GLuint,
>;
pub type PFNGLBINDPROGRAMPIPELINEPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
pub type PFNGLDELETEPROGRAMPIPELINESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *const GLuint)>;
pub type PFNGLGENPROGRAMPIPELINESPROC =
    ::std::option::Option<unsafe extern "C" fn(n: GLsizei, pipelines: *mut GLuint)>;
pub type PFNGLISPROGRAMPIPELINEPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint) -> GLboolean>;
pub type PFNGLGETPROGRAMPIPELINEIVPROC = ::std::option::Option<
    unsafe extern "C" fn(pipeline: GLuint, pname: GLenum, params: *mut GLint),
>;
pub type PFNGLPROGRAMUNIFORM1IPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint)>;
pub type PFNGLPROGRAMUNIFORM1IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM1FPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat)>;
pub type PFNGLPROGRAMUNIFORM1FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM1DPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLdouble)>;
pub type PFNGLPROGRAMUNIFORM1DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM1UIPROC =
    ::std::option::Option<unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint)>;
pub type PFNGLPROGRAMUNIFORM1UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM2IPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint),
>;
pub type PFNGLPROGRAMUNIFORM2IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM2FPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM2DPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM2UIPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM2UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3IPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint),
>;
pub type PFNGLPROGRAMUNIFORM3IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM3FPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORM3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM3UIPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
>;
pub type PFNGLPROGRAMUNIFORM3UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORM4IPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLint,
        v1: GLint,
        v2: GLint,
        v3: GLint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4IVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLint),
>;
pub type PFNGLPROGRAMUNIFORM4FPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLfloat,
        v1: GLfloat,
        v2: GLfloat,
        v3: GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat),
>;
pub type PFNGLPROGRAMUNIFORM4DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLdouble,
        v1: GLdouble,
        v2: GLdouble,
        v3: GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble),
>;
pub type PFNGLPROGRAMUNIFORM4UIPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        v0: GLuint,
        v1: GLuint,
        v2: GLuint,
        v3: GLuint,
    ),
>;
pub type PFNGLPROGRAMUNIFORM4UIVPROC = ::std::option::Option<
    unsafe extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        program: GLuint,
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLdouble,
    ),
>;
pub type PFNGLVALIDATEPROGRAMPIPELINEPROC =
    ::std::option::Option<unsafe extern "C" fn(pipeline: GLuint)>;
pub type PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ::std::option::Option<
    unsafe extern "C" fn(
        pipeline: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLchar,
    ),
>;
extern "C" {
    pub fn glVertexAttribL1d(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttribL1dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL2dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL3dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribL4dv(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttribLPointer(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
pub type PFNGLVERTEXATTRIBL1DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble)>;
pub type PFNGLVERTEXATTRIBL2DPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble)>;
pub type PFNGLVERTEXATTRIBL3DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
>;
pub type PFNGLVERTEXATTRIBL4DPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
>;
pub type PFNGLVERTEXATTRIBL1DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL2DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL3DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBL4DVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLdouble)>;
pub type PFNGLVERTEXATTRIBLPOINTERPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    ),
>;
pub type PFNGLGETVERTEXATTRIBLDVPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, pname: GLenum, params: *mut GLdouble),
>;
extern "C" {
    pub fn glViewportArrayv(first: GLuint, count: GLsizei, v: *const GLfloat);
}
extern "C" {
    pub fn glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat);
}
extern "C" {
    pub fn glViewportIndexedfv(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glScissorArrayv(first: GLuint, count: GLsizei, v: *const GLint);
}
extern "C" {
    pub fn glScissorIndexed(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glScissorIndexedv(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glDepthRangeArrayv(first: GLuint, count: GLsizei, v: *const GLclampd);
}
extern "C" {
    pub fn glDepthRangeIndexed(index: GLuint, n: GLclampd, f: GLclampd);
}
extern "C" {
    pub fn glGetFloati_v(target: GLenum, index: GLuint, data: *mut GLfloat);
}
extern "C" {
    pub fn glGetDoublei_v(target: GLenum, index: GLuint, data: *mut GLdouble);
}
pub type PFNGLVIEWPORTARRAYVPROC =
    ::std::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLfloat)>;
pub type PFNGLVIEWPORTINDEXEDFPROC = ::std::option::Option<
    unsafe extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat),
>;
pub type PFNGLVIEWPORTINDEXEDFVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLfloat)>;
pub type PFNGLSCISSORARRAYVPROC =
    ::std::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLint)>;
pub type PFNGLSCISSORINDEXEDPROC = ::std::option::Option<
    unsafe extern "C" fn(
        index: GLuint,
        left: GLint,
        bottom: GLint,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLSCISSORINDEXEDVPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, v: *const GLint)>;
pub type PFNGLDEPTHRANGEARRAYVPROC =
    ::std::option::Option<unsafe extern "C" fn(first: GLuint, count: GLsizei, v: *const GLclampd)>;
pub type PFNGLDEPTHRANGEINDEXEDPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, n: GLclampd, f: GLclampd)>;
pub type PFNGLGETFLOATI_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLfloat)>;
pub type PFNGLGETDOUBLEI_VPROC =
    ::std::option::Option<unsafe extern "C" fn(target: GLenum, index: GLuint, data: *mut GLdouble)>;
extern "C" {
    pub fn glBlendEquationiARB(buf: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glBlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glBlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparateiARB(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    );
}
pub type PFNGLBLENDEQUATIONIARBPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, mode: GLenum)>;
pub type PFNGLBLENDEQUATIONSEPARATEIARBPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum)>;
pub type PFNGLBLENDFUNCIARBPROC =
    ::std::option::Option<unsafe extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum)>;
pub type PFNGLBLENDFUNCSEPARATEIARBPROC = ::std::option::Option<
    unsafe extern "C" fn(
        buf: GLuint,
        srcRGB: GLenum,
        dstRGB: GLenum,
        srcAlpha: GLenum,
        dstAlpha: GLenum,
    ),
>;
extern "C" {
    pub fn glVertexAttribDivisorARB(index: GLuint, divisor: GLuint);
}
pub type PFNGLVERTEXATTRIBDIVISORARBPROC =
    ::std::option::Option<unsafe extern "C" fn(index: GLuint, divisor: GLuint)>;
extern "C" {
    pub fn glGetInternalformativ(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint,
    );
}
pub type PFNGLGETINTERNALFORMATIVPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        internalformat: GLenum,
        pname: GLenum,
        bufSize: GLsizei,
        params: *mut GLint,
    ),
>;
extern "C" {
    pub fn glMinSampleShadingARB(value: GLclampf);
}
pub type PFNGLMINSAMPLESHADINGARBPROC =
    ::std::option::Option<unsafe extern "C" fn(value: GLclampf)>;
extern "C" {
    pub fn glNamedStringARB(
        type_: GLenum,
        namelen: GLint,
        name: *const GLchar,
        stringlen: GLint,
        string: *const GLchar,
    );
}
extern "C" {
    pub fn glDeleteNamedStringARB(namelen: GLint, name: *const GLchar);
}
extern "C" {
    pub fn glCompileShaderIncludeARB(
        shader: GLuint,
        count: GLsizei,
        path: *const *const GLchar,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glIsNamedStringARB(namelen: GLint, name: *const GLchar) -> GLboolean;
}
extern "C" {
    pub fn glGetNamedStringARB(
        namelen: GLint,
        name: *const GLchar,
        bufSize: GLsizei,
        stringlen: *mut GLint,
        string: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetNamedStringivARB(
        namelen: GLint,
        name: *const GLchar,
        pname: GLenum,
        params: *mut GLint,
    );
}
pub type PFNGLNAMEDSTRINGARBPROC = ::std::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        namelen: GLint,
        name: *const GLchar,
        stringlen: GLint,
        string: *const GLchar,
    ),
>;
pub type PFNGLDELETENAMEDSTRINGARBPROC =
    ::std::option::Option<unsafe extern "C" fn(namelen: GLint, name: *const GLchar)>;
pub type PFNGLCOMPILESHADERINCLUDEARBPROC = ::std::option::Option<
    unsafe extern "C" fn(
        shader: GLuint,
        count: GLsizei,
        path: *const *const GLchar,
        length: *const GLint,
    ),
>;
pub type PFNGLISNAMEDSTRINGARBPROC =
    ::std::option::Option<unsafe extern "C" fn(namelen: GLint, name: *const GLchar) -> GLboolean>;
pub type PFNGLGETNAMEDSTRINGARBPROC = ::std::option::Option<
    unsafe extern "C" fn(
        namelen: GLint,
        name: *const GLchar,
        bufSize: GLsizei,
        stringlen: *mut GLint,
        string: *mut GLchar,
    ),
>;
pub type PFNGLGETNAMEDSTRINGIVARBPROC = ::std::option::Option<
    unsafe extern "C" fn(namelen: GLint, name: *const GLchar, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);
}
extern "C" {
    pub fn glTexStorage2D(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glTexStorage3D(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    );
}
pub type PFNGLTEXSTORAGE1DPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei),
>;
pub type PFNGLTEXSTORAGE2DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    ),
>;
pub type PFNGLTEXSTORAGE3DPROC = ::std::option::Option<
    unsafe extern "C" fn(
        target: GLenum,
        levels: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
    ),
>;
extern "C" {
    pub fn glLabelObjectEXT(type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar);
}
extern "C" {
    pub fn glGetObjectLabelEXT(
        type_: GLenum,
        object: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    );
}
pub type PFNGLLABELOBJECTEXTPROC = ::std::option::Option<
    unsafe extern "C" fn(type_: GLenum, object: GLuint, length: GLsizei, label: *const GLchar),
>;
pub type PFNGLGETOBJECTLABELEXTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        type_: GLenum,
        object: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        label: *mut GLchar,
    ),
>;
extern "C" {
    pub fn glInsertEventMarkerEXT(length: GLsizei, marker: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glPushGroupMarkerEXT(length: GLsizei, marker: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glPopGroupMarkerEXT();
}
pub type PFNGLINSERTEVENTMARKEREXTPROC = ::std::option::Option<
    unsafe extern "C" fn(length: GLsizei, marker: *const ::std::os::raw::c_char),
>;
pub type PFNGLPUSHGROUPMARKEREXTPROC = ::std::option::Option<
    unsafe extern "C" fn(length: GLsizei, marker: *const ::std::os::raw::c_char),
>;
pub type PFNGLPOPGROUPMARKEREXTPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glDepthBoundsEXT(zmin: GLclampd, zmax: GLclampd);
}
pub type PFNGLDEPTHBOUNDSEXTPROC =
    ::std::option::Option<unsafe extern "C" fn(zmin: GLclampd, zmax: GLclampd)>;
extern "C" {
    pub fn glFlushRenderAPPLE();
}
extern "C" {
    pub fn glFinishRenderAPPLE();
}
extern "C" {
    pub fn glSwapAPPLE();
}
pub type PFNGLFLUSHRENDERAPPLEPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLFINISHRENDERAPPLEPROC = ::std::option::Option<unsafe extern "C" fn()>;
pub type PFNGLSWAPAPPLEPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum;
}
extern "C" {
    pub fn glObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum;
}
extern "C" {
    pub fn glGetObjectParameterivAPPLE(
        objectType: GLenum,
        name: GLuint,
        pname: GLenum,
        params: *mut GLint,
    );
}
pub type PFNGLOBJECTPURGEABLEAPPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum,
>;
pub type PFNGLOBJECTUNPURGEABLEAPPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum,
>;
pub type PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(objectType: GLenum, name: GLuint, pname: GLenum, params: *mut GLint),
>;
extern "C" {
    pub fn glTextureRangeAPPLE(target: GLenum, length: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glGetTexParameterPointervAPPLE(target: GLenum, pname: GLenum, params: *mut *mut GLvoid);
}
pub type PFNGLTEXTURERANGEAPPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, length: GLsizei, pointer: *const GLvoid),
>;
pub type PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ::std::option::Option<
    unsafe extern "C" fn(target: GLenum, pname: GLenum, params: *mut *mut GLvoid),
>;
extern "C" {
    pub fn glTextureBarrierNV();
}
pub type PFNGLTEXTUREBARRIERNVPROC = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn glClampColorARB(target: GLenum, clamp: GLenum);
}
extern "C" {
    pub fn glDrawBuffersARB(n: GLsizei, bufs: *const GLenum);
}
extern "C" {
    pub fn glDrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei);
}
extern "C" {
    pub fn glDrawElementsInstancedARB(
        mode: GLenum,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glSampleCoverageARB(value: GLclampf, invert: GLboolean);
}
extern "C" {
    pub fn glActiveTextureARB(texture: GLenum);
}
extern "C" {
    pub fn glClientActiveTextureARB(texture: GLenum);
}
extern "C" {
    pub fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1iARB(target: GLenum, s: GLint);
}
extern "C" {
    pub fn glMultiTexCoord1ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord1sARB(target: GLenum, s: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord1svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint);
}
extern "C" {
    pub fn glMultiTexCoord2ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint);
}
extern "C" {
    pub fn glMultiTexCoord3ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4dvARB(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4fvARB(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);
}
extern "C" {
    pub fn glMultiTexCoord4ivARB(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4svARB(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glGenQueriesARB(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glDeleteQueriesARB(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glIsQueryARB(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBeginQueryARB(target: GLenum, id: GLuint);
}
extern "C" {
    pub fn glEndQueryARB(target: GLenum);
}
extern "C" {
    pub fn glGetQueryivARB(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectivARB(id: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetQueryObjectuivARB(id: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glPointParameterfARB(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPointParameterfvARB(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glDeleteObjectARB(obj: GLhandleARB);
}
extern "C" {
    pub fn glGetHandleARB(pname: GLenum) -> GLhandleARB;
}
extern "C" {
    pub fn glDetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB);
}
extern "C" {
    pub fn glCreateShaderObjectARB(shaderType: GLenum) -> GLhandleARB;
}
extern "C" {
    pub fn glShaderSourceARB(
        shaderObj: GLhandleARB,
        count: GLsizei,
        string: *const *const GLcharARB,
        length: *const GLint,
    );
}
extern "C" {
    pub fn glCompileShaderARB(shaderObj: GLhandleARB);
}
extern "C" {
    pub fn glCreateProgramObjectARB() -> GLhandleARB;
}
extern "C" {
    pub fn glAttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB);
}
extern "C" {
    pub fn glLinkProgramARB(programObj: GLhandleARB);
}
extern "C" {
    pub fn glUseProgramObjectARB(programObj: GLhandleARB);
}
extern "C" {
    pub fn glValidateProgramARB(programObj: GLhandleARB);
}
extern "C" {
    pub fn glUniform1fARB(location: GLint, v0: GLfloat);
}
extern "C" {
    pub fn glUniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat);
}
extern "C" {
    pub fn glUniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glUniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
}
extern "C" {
    pub fn glUniform1iARB(location: GLint, v0: GLint);
}
extern "C" {
    pub fn glUniform2iARB(location: GLint, v0: GLint, v1: GLint);
}
extern "C" {
    pub fn glUniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint);
}
extern "C" {
    pub fn glUniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
}
extern "C" {
    pub fn glUniform1fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform2fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform3fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform4fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
}
extern "C" {
    pub fn glUniform1ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform2ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform3ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniform4ivARB(location: GLint, count: GLsizei, value: *const GLint);
}
extern "C" {
    pub fn glUniformMatrix2fvARB(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix3fvARB(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glUniformMatrix4fvARB(
        location: GLint,
        count: GLsizei,
        transpose: GLboolean,
        value: *const GLfloat,
    );
}
extern "C" {
    pub fn glGetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetInfoLogARB(
        obj: GLhandleARB,
        maxLength: GLsizei,
        length: *mut GLsizei,
        infoLog: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glGetAttachedObjectsARB(
        containerObj: GLhandleARB,
        maxCount: GLsizei,
        count: *mut GLsizei,
        obj: *mut GLhandleARB,
    );
}
extern "C" {
    pub fn glGetUniformLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint;
}
extern "C" {
    pub fn glGetActiveUniformARB(
        programObj: GLhandleARB,
        index: GLuint,
        maxLength: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glGetUniformfvARB(programObj: GLhandleARB, location: GLint, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetUniformivARB(programObj: GLhandleARB, location: GLint, params: *mut GLint);
}
extern "C" {
    pub fn glGetShaderSourceARB(
        obj: GLhandleARB,
        maxLength: GLsizei,
        length: *mut GLsizei,
        source: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glCompressedTexImage3DARB(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexImage2DARB(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexImage1DARB(
        target: GLenum,
        level: GLint,
        internalformat: GLenum,
        width: GLsizei,
        border: GLint,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage3DARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        zoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage2DARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        yoffset: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glCompressedTexSubImage1DARB(
        target: GLenum,
        level: GLint,
        xoffset: GLint,
        width: GLsizei,
        format: GLenum,
        imageSize: GLsizei,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetCompressedTexImageARB(target: GLenum, level: GLint, data: *mut GLvoid);
}
extern "C" {
    pub fn glLoadTransposeMatrixfARB(m: *const GLfloat);
}
extern "C" {
    pub fn glLoadTransposeMatrixdARB(m: *const GLdouble);
}
extern "C" {
    pub fn glMultTransposeMatrixfARB(m: *const GLfloat);
}
extern "C" {
    pub fn glMultTransposeMatrixdARB(m: *const GLdouble);
}
extern "C" {
    pub fn glWeightbvARB(size: GLint, weights: *const GLbyte);
}
extern "C" {
    pub fn glWeightsvARB(size: GLint, weights: *const GLshort);
}
extern "C" {
    pub fn glWeightivARB(size: GLint, weights: *const GLint);
}
extern "C" {
    pub fn glWeightfvARB(size: GLint, weights: *const GLfloat);
}
extern "C" {
    pub fn glWeightdvARB(size: GLint, weights: *const GLdouble);
}
extern "C" {
    pub fn glWeightubvARB(size: GLint, weights: *const GLubyte);
}
extern "C" {
    pub fn glWeightusvARB(size: GLint, weights: *const GLushort);
}
extern "C" {
    pub fn glWeightuivARB(size: GLint, weights: *const GLuint);
}
extern "C" {
    pub fn glWeightPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glVertexBlendARB(count: GLint);
}
extern "C" {
    pub fn glBindBufferARB(target: GLenum, buffer: GLuint);
}
extern "C" {
    pub fn glDeleteBuffersARB(n: GLsizei, buffers: *const GLuint);
}
extern "C" {
    pub fn glGenBuffersARB(n: GLsizei, buffers: *mut GLuint);
}
extern "C" {
    pub fn glIsBufferARB(buffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBufferDataARB(target: GLenum, size: GLsizeiptrARB, data: *const GLvoid, usage: GLenum);
}
extern "C" {
    pub fn glBufferSubDataARB(
        target: GLenum,
        offset: GLintptrARB,
        size: GLsizeiptrARB,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetBufferSubDataARB(
        target: GLenum,
        offset: GLintptrARB,
        size: GLsizeiptrARB,
        data: *mut GLvoid,
    );
}
extern "C" {
    pub fn glMapBufferARB(target: GLenum, access: GLenum) -> *mut GLvoid;
}
extern "C" {
    pub fn glUnmapBufferARB(target: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glGetBufferParameterivARB(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetBufferPointervARB(target: GLenum, pname: GLenum, params: *mut *mut GLvoid);
}
extern "C" {
    pub fn glBindProgramARB(target: GLenum, program: GLuint);
}
extern "C" {
    pub fn glDeleteProgramsARB(n: GLsizei, programs: *const GLuint);
}
extern "C" {
    pub fn glGenProgramsARB(n: GLsizei, programs: *mut GLuint);
}
extern "C" {
    pub fn glIsProgramARB(program: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glProgramEnvParameter4dARB(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble);
}
extern "C" {
    pub fn glProgramEnvParameter4fARB(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat);
}
extern "C" {
    pub fn glProgramLocalParameter4dARB(
        target: GLenum,
        index: GLuint,
        x: GLdouble,
        y: GLdouble,
        z: GLdouble,
        w: GLdouble,
    );
}
extern "C" {
    pub fn glProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble);
}
extern "C" {
    pub fn glProgramLocalParameter4fARB(
        target: GLenum,
        index: GLuint,
        x: GLfloat,
        y: GLfloat,
        z: GLfloat,
        w: GLfloat,
    );
}
extern "C" {
    pub fn glProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat);
}
extern "C" {
    pub fn glGetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat);
}
extern "C" {
    pub fn glProgramEnvParameters4fvEXT(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glProgramLocalParameters4fvEXT(
        target: GLenum,
        index: GLuint,
        count: GLsizei,
        params: *const GLfloat,
    );
}
extern "C" {
    pub fn glGetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat);
}
extern "C" {
    pub fn glProgramStringARB(target: GLenum, format: GLenum, len: GLsizei, string: *const GLvoid);
}
extern "C" {
    pub fn glGetProgramStringARB(target: GLenum, pname: GLenum, string: *mut GLvoid);
}
extern "C" {
    pub fn glGetProgramivARB(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glBindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: *const GLcharARB);
}
extern "C" {
    pub fn glGetActiveAttribARB(
        programObj: GLhandleARB,
        index: GLuint,
        maxLength: GLsizei,
        length: *mut GLsizei,
        size: *mut GLint,
        type_: *mut GLenum,
        name: *mut GLcharARB,
    );
}
extern "C" {
    pub fn glGetAttribLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint;
}
extern "C" {
    pub fn glVertexAttrib1dARB(index: GLuint, x: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib1fARB(index: GLuint, x: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib1sARB(index: GLuint, x: GLshort);
}
extern "C" {
    pub fn glVertexAttrib1svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertexAttrib2svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertexAttrib3svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4NbvARB(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4NivARB(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4NsvARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4NubvARB(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4NuivARB(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4NusvARB(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttrib4bvARB(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4dvARB(index: GLuint, v: *const GLdouble);
}
extern "C" {
    pub fn glVertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4fvARB(index: GLuint, v: *const GLfloat);
}
extern "C" {
    pub fn glVertexAttrib4ivARB(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertexAttrib4svARB(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttrib4ubvARB(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttrib4uivARB(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttrib4usvARB(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttribPointerARB(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        normalized: GLboolean,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
extern "C" {
    pub fn glDisableVertexAttribArrayARB(index: GLuint);
}
extern "C" {
    pub fn glEnableVertexAttribArrayARB(index: GLuint);
}
extern "C" {
    pub fn glGetVertexAttribPointervARB(index: GLuint, pname: GLenum, pointer: *mut *mut GLvoid);
}
extern "C" {
    pub fn glGetVertexAttribdvARB(index: GLuint, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetVertexAttribfvARB(index: GLuint, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetVertexAttribivARB(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glWindowPos2dARB(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glWindowPos2dvARB(p: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos2fARB(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glWindowPos2fvARB(p: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos2iARB(x: GLint, y: GLint);
}
extern "C" {
    pub fn glWindowPos2ivARB(p: *const GLint);
}
extern "C" {
    pub fn glWindowPos2sARB(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glWindowPos2svARB(p: *const GLshort);
}
extern "C" {
    pub fn glWindowPos3dARB(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glWindowPos3dvARB(p: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos3fARB(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glWindowPos3fvARB(p: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos3iARB(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glWindowPos3ivARB(p: *const GLint);
}
extern "C" {
    pub fn glWindowPos3sARB(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glWindowPos3svARB(p: *const GLshort);
}
extern "C" {
    pub fn glUniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint);
}
extern "C" {
    pub fn glGetUniformBufferSizeEXT(program: GLuint, location: GLint) -> GLint;
}
extern "C" {
    pub fn glGetUniformOffsetEXT(program: GLuint, location: GLint) -> GLintptr;
}
extern "C" {
    pub fn glBlendColorEXT(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf);
}
extern "C" {
    pub fn glBlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum);
}
extern "C" {
    pub fn glBlendFuncSeparateEXT(
        sfactorRGB: GLenum,
        dfactorRGB: GLenum,
        sfactorAlpha: GLenum,
        dfactorAlpha: GLenum,
    );
}
extern "C" {
    pub fn glBlendEquationEXT(mode: GLenum);
}
extern "C" {
    pub fn glColorMaskIndexedEXT(
        index: GLuint,
        r: GLboolean,
        g: GLboolean,
        b: GLboolean,
        a: GLboolean,
    );
}
extern "C" {
    pub fn glEnableIndexedEXT(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glDisableIndexedEXT(target: GLenum, index: GLuint);
}
extern "C" {
    pub fn glIsEnabledIndexedEXT(target: GLenum, index: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glDrawRangeElementsEXT(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        count: GLsizei,
        type_: GLenum,
        indices: *const GLvoid,
    );
}
extern "C" {
    pub fn glFogCoordfEXT(coord: GLfloat);
}
extern "C" {
    pub fn glFogCoordfvEXT(coord: *const GLfloat);
}
extern "C" {
    pub fn glFogCoorddEXT(coord: GLdouble);
}
extern "C" {
    pub fn glFogCoorddvEXT(coord: *const GLdouble);
}
extern "C" {
    pub fn glFogCoordPointerEXT(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glBlitFramebufferEXT(
        srcX0: GLint,
        srcY0: GLint,
        srcX1: GLint,
        srcY1: GLint,
        dstX0: GLint,
        dstY0: GLint,
        dstX1: GLint,
        dstY1: GLint,
        mask: GLbitfield,
        filter: GLenum,
    );
}
extern "C" {
    pub fn glRenderbufferStorageMultisampleEXT(
        target: GLenum,
        samples: GLsizei,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glIsRenderbufferEXT(renderbuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindRenderbufferEXT(target: GLenum, renderbuffer: GLuint);
}
extern "C" {
    pub fn glDeleteRenderbuffersEXT(n: GLsizei, renderbuffers: *const GLuint);
}
extern "C" {
    pub fn glGenRenderbuffersEXT(n: GLsizei, renderbuffers: *mut GLuint);
}
extern "C" {
    pub fn glRenderbufferStorageEXT(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glGetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glIsFramebufferEXT(framebuffer: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glBindFramebufferEXT(target: GLenum, framebuffer: GLuint);
}
extern "C" {
    pub fn glDeleteFramebuffersEXT(n: GLsizei, framebuffers: *const GLuint);
}
extern "C" {
    pub fn glGenFramebuffersEXT(n: GLsizei, framebuffers: *mut GLuint);
}
extern "C" {
    pub fn glCheckFramebufferStatusEXT(target: GLenum) -> GLenum;
}
extern "C" {
    pub fn glFramebufferTexture1DEXT(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture2DEXT(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTexture3DEXT(
        target: GLenum,
        attachment: GLenum,
        textarget: GLenum,
        texture: GLuint,
        level: GLint,
        zoffset: GLint,
    );
}
extern "C" {
    pub fn glFramebufferRenderbufferEXT(
        target: GLenum,
        attachment: GLenum,
        renderbuffertarget: GLenum,
        renderbuffer: GLuint,
    );
}
extern "C" {
    pub fn glGetFramebufferAttachmentParameterivEXT(
        target: GLenum,
        attachment: GLenum,
        pname: GLenum,
        params: *mut GLint,
    );
}
extern "C" {
    pub fn glGenerateMipmapEXT(target: GLenum);
}
extern "C" {
    pub fn glProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint);
}
extern "C" {
    pub fn glFramebufferTextureEXT(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
    );
}
extern "C" {
    pub fn glFramebufferTextureFaceEXT(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        face: GLenum,
    );
}
extern "C" {
    pub fn glFramebufferTextureLayerEXT(
        target: GLenum,
        attachment: GLenum,
        texture: GLuint,
        level: GLint,
        layer: GLint,
    );
}
extern "C" {
    pub fn glVertexAttribI1iEXT(index: GLuint, x: GLint);
}
extern "C" {
    pub fn glVertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertexAttribI1uiEXT(index: GLuint, x: GLuint);
}
extern "C" {
    pub fn glVertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint);
}
extern "C" {
    pub fn glVertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint);
}
extern "C" {
    pub fn glVertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);
}
extern "C" {
    pub fn glVertexAttribI1ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI2ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI3ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI4ivEXT(index: GLuint, v: *const GLint);
}
extern "C" {
    pub fn glVertexAttribI1uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI2uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI3uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4uivEXT(index: GLuint, v: *const GLuint);
}
extern "C" {
    pub fn glVertexAttribI4bvEXT(index: GLuint, v: *const GLbyte);
}
extern "C" {
    pub fn glVertexAttribI4svEXT(index: GLuint, v: *const GLshort);
}
extern "C" {
    pub fn glVertexAttribI4ubvEXT(index: GLuint, v: *const GLubyte);
}
extern "C" {
    pub fn glVertexAttribI4usvEXT(index: GLuint, v: *const GLushort);
}
extern "C" {
    pub fn glVertexAttribIPointerEXT(
        index: GLuint,
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
extern "C" {
    pub fn glGetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glUniform1uiEXT(location: GLint, v0: GLuint);
}
extern "C" {
    pub fn glUniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint);
}
extern "C" {
    pub fn glUniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
}
extern "C" {
    pub fn glUniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
}
extern "C" {
    pub fn glUniform1uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform2uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform3uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glUniform4uivEXT(location: GLint, count: GLsizei, value: *const GLuint);
}
extern "C" {
    pub fn glGetUniformuivEXT(program: GLuint, location: GLint, params: *mut GLuint);
}
extern "C" {
    pub fn glBindFragDataLocationEXT(program: GLuint, colorNumber: GLuint, name: *const GLchar);
}
extern "C" {
    pub fn glGetFragDataLocationEXT(program: GLuint, name: *const GLchar) -> GLint;
}
extern "C" {
    pub fn glMultiDrawArraysEXT(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementsEXT(
        mode: GLenum,
        count: *const GLsizei,
        type_: GLenum,
        indices: *const *const GLvoid,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glProvokingVertexEXT(mode: GLenum);
}
extern "C" {
    pub fn glSecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3bvEXT(v: *const GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3dvEXT(v: *const GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3fvEXT(v: *const GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint);
}
extern "C" {
    pub fn glSecondaryColor3ivEXT(v: *const GLint);
}
extern "C" {
    pub fn glSecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort);
}
extern "C" {
    pub fn glSecondaryColor3svEXT(v: *const GLshort);
}
extern "C" {
    pub fn glSecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3ubvEXT(v: *const GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint);
}
extern "C" {
    pub fn glSecondaryColor3uivEXT(v: *const GLuint);
}
extern "C" {
    pub fn glSecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort);
}
extern "C" {
    pub fn glSecondaryColor3usvEXT(v: *const GLushort);
}
extern "C" {
    pub fn glSecondaryColorPointerEXT(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
extern "C" {
    pub fn glActiveStencilFaceEXT(face: GLenum);
}
extern "C" {
    pub fn glClearColorIiEXT(r: GLint, g: GLint, b: GLint, a: GLint);
}
extern "C" {
    pub fn glClearColorIuiEXT(r: GLuint, g: GLuint, b: GLuint, a: GLuint);
}
extern "C" {
    pub fn glTexParameterIivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glGetTexParameterIivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *mut GLuint);
}
extern "C" {
    pub fn glGetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: *mut GLint64EXT);
}
extern "C" {
    pub fn glGetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: *mut GLuint64EXT);
}
extern "C" {
    pub fn glBindBufferRangeEXT(
        target: GLenum,
        index: GLuint,
        buffer: GLuint,
        offset: GLintptr,
        size: GLsizeiptr,
    );
}
extern "C" {
    pub fn glBindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr);
}
extern "C" {
    pub fn glBindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint);
}
extern "C" {
    pub fn glBeginTransformFeedbackEXT(primitiveMode: GLenum);
}
extern "C" {
    pub fn glEndTransformFeedbackEXT();
}
extern "C" {
    pub fn glTransformFeedbackVaryingsEXT(
        program: GLuint,
        count: GLsizei,
        varyings: *const *const GLchar,
        bufferMode: GLenum,
    );
}
extern "C" {
    pub fn glGetTransformFeedbackVaryingEXT(
        program: GLuint,
        index: GLuint,
        bufSize: GLsizei,
        length: *mut GLsizei,
        size: *mut GLsizei,
        type_: *mut GLenum,
        name: *mut GLchar,
    );
}
extern "C" {
    pub fn glGetIntegerIndexedvEXT(param: GLenum, index: GLuint, values: *mut GLint);
}
extern "C" {
    pub fn glGetBooleanIndexedvEXT(param: GLenum, index: GLuint, values: *mut GLboolean);
}
extern "C" {
    pub fn glElementPointerAPPLE(type_: GLenum, pointer: *const GLvoid);
}
extern "C" {
    pub fn glDrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei);
}
extern "C" {
    pub fn glDrawRangeElementArrayAPPLE(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        first: GLint,
        count: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawElementArrayAPPLE(
        mode: GLenum,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glMultiDrawRangeElementArrayAPPLE(
        mode: GLenum,
        start: GLuint,
        end: GLuint,
        first: *const GLint,
        count: *const GLsizei,
        primcount: GLsizei,
    );
}
extern "C" {
    pub fn glGenFencesAPPLE(n: GLsizei, fences: *mut GLuint);
}
extern "C" {
    pub fn glDeleteFencesAPPLE(n: GLsizei, fences: *const GLuint);
}
extern "C" {
    pub fn glSetFenceAPPLE(fence: GLuint);
}
extern "C" {
    pub fn glIsFenceAPPLE(fence: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glTestFenceAPPLE(fence: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glFinishFenceAPPLE(fence: GLuint);
}
extern "C" {
    pub fn glTestObjectAPPLE(object: GLenum, name: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glFinishObjectAPPLE(object: GLenum, name: GLuint);
}
extern "C" {
    pub fn glBufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFlushMappedBufferRangeAPPLE(target: GLenum, offset: GLintptr, size: GLsizeiptr);
}
extern "C" {
    pub fn glBindVertexArrayAPPLE(id: GLuint);
}
extern "C" {
    pub fn glDeleteVertexArraysAPPLE(n: GLsizei, ids: *const GLuint);
}
extern "C" {
    pub fn glGenVertexArraysAPPLE(n: GLsizei, ids: *mut GLuint);
}
extern "C" {
    pub fn glIsVertexArrayAPPLE(id: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glVertexArrayRangeAPPLE(length: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glFlushVertexArrayRangeAPPLE(length: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glVertexArrayParameteriAPPLE(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPointSizePointerAPPLE(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glVertexPointSizefAPPLE(size: GLfloat);
}
extern "C" {
    pub fn glEnableVertexAttribAPPLE(index: GLuint, pname: GLenum);
}
extern "C" {
    pub fn glDisableVertexAttribAPPLE(index: GLuint, pname: GLenum);
}
extern "C" {
    pub fn glIsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum) -> GLboolean;
}
extern "C" {
    pub fn glMapVertexAttrib1dAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLdouble,
        u2: GLdouble,
        stride: GLint,
        order: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMapVertexAttrib1fAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLfloat,
        u2: GLfloat,
        stride: GLint,
        order: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glMapVertexAttrib2dAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMapVertexAttrib2fAPPLE(
        index: GLuint,
        size: GLuint,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glBlendEquationSeparateATI(equationRGB: GLenum, equationAlpha: GLenum);
}
extern "C" {
    pub fn glStencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
}
extern "C" {
    pub fn glStencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint);
}
extern "C" {
    pub fn glBeginConditionalRenderNV(id: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glEndConditionalRenderNV();
}
extern "C" {
    pub fn glPointParameteriNV(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPointParameterivNV(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glAccum(op: GLenum, value: GLfloat);
}
extern "C" {
    pub fn glAlphaFunc(func: GLenum, ref_: GLclampf);
}
extern "C" {
    pub fn glAreTexturesResident(
        n: GLsizei,
        textures: *const GLuint,
        residences: *mut GLboolean,
    ) -> GLboolean;
}
extern "C" {
    pub fn glArrayElement(i: GLint);
}
extern "C" {
    pub fn glBegin(mode: GLenum);
}
extern "C" {
    pub fn glBitmap(
        width: GLsizei,
        height: GLsizei,
        xorig: GLfloat,
        yorig: GLfloat,
        xmove: GLfloat,
        ymove: GLfloat,
        bitmap: *const GLubyte,
    );
}
extern "C" {
    pub fn glCallList(list: GLuint);
}
extern "C" {
    pub fn glCallLists(n: GLsizei, type_: GLenum, lists: *const GLvoid);
}
extern "C" {
    pub fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glClearIndex(c: GLfloat);
}
extern "C" {
    pub fn glClipPlane(plane: GLenum, equation: *const GLdouble);
}
extern "C" {
    pub fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);
}
extern "C" {
    pub fn glColor3bv(v: *const GLbyte);
}
extern "C" {
    pub fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);
}
extern "C" {
    pub fn glColor3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);
}
extern "C" {
    pub fn glColor3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glColor3i(red: GLint, green: GLint, blue: GLint);
}
extern "C" {
    pub fn glColor3iv(v: *const GLint);
}
extern "C" {
    pub fn glColor3s(red: GLshort, green: GLshort, blue: GLshort);
}
extern "C" {
    pub fn glColor3sv(v: *const GLshort);
}
extern "C" {
    pub fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);
}
extern "C" {
    pub fn glColor3ubv(v: *const GLubyte);
}
extern "C" {
    pub fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint);
}
extern "C" {
    pub fn glColor3uiv(v: *const GLuint);
}
extern "C" {
    pub fn glColor3us(red: GLushort, green: GLushort, blue: GLushort);
}
extern "C" {
    pub fn glColor3usv(v: *const GLushort);
}
extern "C" {
    pub fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte);
}
extern "C" {
    pub fn glColor4bv(v: *const GLbyte);
}
extern "C" {
    pub fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble);
}
extern "C" {
    pub fn glColor4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
}
extern "C" {
    pub fn glColor4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint);
}
extern "C" {
    pub fn glColor4iv(v: *const GLint);
}
extern "C" {
    pub fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort);
}
extern "C" {
    pub fn glColor4sv(v: *const GLshort);
}
extern "C" {
    pub fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);
}
extern "C" {
    pub fn glColor4ubv(v: *const GLubyte);
}
extern "C" {
    pub fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);
}
extern "C" {
    pub fn glColor4uiv(v: *const GLuint);
}
extern "C" {
    pub fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort);
}
extern "C" {
    pub fn glColor4usv(v: *const GLushort);
}
extern "C" {
    pub fn glColorMaterial(face: GLenum, mode: GLenum);
}
extern "C" {
    pub fn glColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glColorSubTable(
        target: GLenum,
        start: GLsizei,
        count: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const GLvoid,
    );
}
extern "C" {
    pub fn glColorTable(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        table: *const GLvoid,
    );
}
extern "C" {
    pub fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glConvolutionFilter1D(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const GLvoid,
    );
}
extern "C" {
    pub fn glConvolutionFilter2D(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        image: *const GLvoid,
    );
}
extern "C" {
    pub fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat);
}
extern "C" {
    pub fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint);
}
extern "C" {
    pub fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei);
}
extern "C" {
    pub fn glCopyColorTable(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyConvolutionFilter1D(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
    );
}
extern "C" {
    pub fn glCopyConvolutionFilter2D(
        target: GLenum,
        internalformat: GLenum,
        x: GLint,
        y: GLint,
        width: GLsizei,
        height: GLsizei,
    );
}
extern "C" {
    pub fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum);
}
extern "C" {
    pub fn glDeleteLists(list: GLuint, range: GLsizei);
}
extern "C" {
    pub fn glDisableClientState(array: GLenum);
}
extern "C" {
    pub fn glDrawPixels(
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        pixels: *const GLvoid,
    );
}
extern "C" {
    pub fn glEdgeFlag(flag: GLboolean);
}
extern "C" {
    pub fn glEdgeFlagPointer(stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glEdgeFlagv(flag: *const GLboolean);
}
extern "C" {
    pub fn glEnableClientState(array: GLenum);
}
extern "C" {
    pub fn glEnd();
}
extern "C" {
    pub fn glEndList();
}
extern "C" {
    pub fn glEvalCoord1d(u: GLdouble);
}
extern "C" {
    pub fn glEvalCoord1dv(u: *const GLdouble);
}
extern "C" {
    pub fn glEvalCoord1f(u: GLfloat);
}
extern "C" {
    pub fn glEvalCoord1fv(u: *const GLfloat);
}
extern "C" {
    pub fn glEvalCoord2d(u: GLdouble, v: GLdouble);
}
extern "C" {
    pub fn glEvalCoord2dv(u: *const GLdouble);
}
extern "C" {
    pub fn glEvalCoord2f(u: GLfloat, v: GLfloat);
}
extern "C" {
    pub fn glEvalCoord2fv(u: *const GLfloat);
}
extern "C" {
    pub fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint);
}
extern "C" {
    pub fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint);
}
extern "C" {
    pub fn glEvalPoint1(i: GLint);
}
extern "C" {
    pub fn glEvalPoint2(i: GLint, j: GLint);
}
extern "C" {
    pub fn glFeedbackBuffer(size: GLsizei, type_: GLenum, buffer: *mut GLfloat);
}
extern "C" {
    pub fn glFogf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glFogfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glFogi(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glFogiv(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glFrustum(
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    );
}
extern "C" {
    pub fn glGenLists(range: GLsizei) -> GLuint;
}
extern "C" {
    pub fn glGetClipPlane(plane: GLenum, equation: *mut GLdouble);
}
extern "C" {
    pub fn glGetColorTable(target: GLenum, format: GLenum, type_: GLenum, table: *mut GLvoid);
}
extern "C" {
    pub fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetConvolutionFilter(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        image: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetHistogram(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetLightiv(light: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetMapdv(target: GLenum, query: GLenum, v: *mut GLdouble);
}
extern "C" {
    pub fn glGetMapfv(target: GLenum, query: GLenum, v: *mut GLfloat);
}
extern "C" {
    pub fn glGetMapiv(target: GLenum, query: GLenum, v: *mut GLint);
}
extern "C" {
    pub fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMaterialiv(face: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetMinmax(
        target: GLenum,
        reset: GLboolean,
        format: GLenum,
        type_: GLenum,
        values: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetPixelMapfv(map: GLenum, values: *mut GLfloat);
}
extern "C" {
    pub fn glGetPixelMapuiv(map: GLenum, values: *mut GLuint);
}
extern "C" {
    pub fn glGetPixelMapusv(map: GLenum, values: *mut GLushort);
}
extern "C" {
    pub fn glGetPointerv(pname: GLenum, params: *mut *mut GLvoid);
}
extern "C" {
    pub fn glGetPolygonStipple(mask: *mut GLubyte);
}
extern "C" {
    pub fn glGetSeparableFilter(
        target: GLenum,
        format: GLenum,
        type_: GLenum,
        row: *mut GLvoid,
        column: *mut GLvoid,
        span: *mut GLvoid,
    );
}
extern "C" {
    pub fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glGetTexGendv(coord: GLenum, pname: GLenum, params: *mut GLdouble);
}
extern "C" {
    pub fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: *mut GLfloat);
}
extern "C" {
    pub fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: *mut GLint);
}
extern "C" {
    pub fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean);
}
extern "C" {
    pub fn glIndexMask(mask: GLuint);
}
extern "C" {
    pub fn glIndexPointer(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glIndexd(c: GLdouble);
}
extern "C" {
    pub fn glIndexdv(c: *const GLdouble);
}
extern "C" {
    pub fn glIndexf(c: GLfloat);
}
extern "C" {
    pub fn glIndexfv(c: *const GLfloat);
}
extern "C" {
    pub fn glIndexi(c: GLint);
}
extern "C" {
    pub fn glIndexiv(c: *const GLint);
}
extern "C" {
    pub fn glIndexs(c: GLshort);
}
extern "C" {
    pub fn glIndexsv(c: *const GLshort);
}
extern "C" {
    pub fn glIndexub(c: GLubyte);
}
extern "C" {
    pub fn glIndexubv(c: *const GLubyte);
}
extern "C" {
    pub fn glInitNames();
}
extern "C" {
    pub fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glIsList(list: GLuint) -> GLboolean;
}
extern "C" {
    pub fn glLightModelf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glLightModelfv(pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glLightModeli(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glLightModeliv(pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glLightf(light: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glLightfv(light: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glLighti(light: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glLightiv(light: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glLineStipple(factor: GLint, pattern: GLushort);
}
extern "C" {
    pub fn glListBase(base: GLuint);
}
extern "C" {
    pub fn glLoadIdentity();
}
extern "C" {
    pub fn glLoadMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glLoadMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glLoadName(name: GLuint);
}
extern "C" {
    pub fn glMap1d(
        target: GLenum,
        u1: GLdouble,
        u2: GLdouble,
        stride: GLint,
        order: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMap1f(
        target: GLenum,
        u1: GLfloat,
        u2: GLfloat,
        stride: GLint,
        order: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glMap2d(
        target: GLenum,
        u1: GLdouble,
        u2: GLdouble,
        ustride: GLint,
        uorder: GLint,
        v1: GLdouble,
        v2: GLdouble,
        vstride: GLint,
        vorder: GLint,
        points: *const GLdouble,
    );
}
extern "C" {
    pub fn glMap2f(
        target: GLenum,
        u1: GLfloat,
        u2: GLfloat,
        ustride: GLint,
        uorder: GLint,
        v1: GLfloat,
        v2: GLfloat,
        vstride: GLint,
        vorder: GLint,
        points: *const GLfloat,
    );
}
extern "C" {
    pub fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble);
}
extern "C" {
    pub fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat);
}
extern "C" {
    pub fn glMapGrid2d(
        un: GLint,
        u1: GLdouble,
        u2: GLdouble,
        vn: GLint,
        v1: GLdouble,
        v2: GLdouble,
    );
}
extern "C" {
    pub fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat);
}
extern "C" {
    pub fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glMaterialfv(face: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glMateriali(face: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glMaterialiv(face: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glMatrixMode(mode: GLenum);
}
extern "C" {
    pub fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean);
}
extern "C" {
    pub fn glMultMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glMultMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glNewList(list: GLuint, mode: GLenum);
}
extern "C" {
    pub fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte);
}
extern "C" {
    pub fn glNormal3bv(v: *const GLbyte);
}
extern "C" {
    pub fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble);
}
extern "C" {
    pub fn glNormal3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat);
}
extern "C" {
    pub fn glNormal3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glNormal3i(nx: GLint, ny: GLint, nz: GLint);
}
extern "C" {
    pub fn glNormal3iv(v: *const GLint);
}
extern "C" {
    pub fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort);
}
extern "C" {
    pub fn glNormal3sv(v: *const GLshort);
}
extern "C" {
    pub fn glNormalPointer(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glOrtho(
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    );
}
extern "C" {
    pub fn glPassThrough(token: GLfloat);
}
extern "C" {
    pub fn glPixelMapfv(map: GLenum, mapsize: GLint, values: *const GLfloat);
}
extern "C" {
    pub fn glPixelMapuiv(map: GLenum, mapsize: GLint, values: *const GLuint);
}
extern "C" {
    pub fn glPixelMapusv(map: GLenum, mapsize: GLint, values: *const GLushort);
}
extern "C" {
    pub fn glPixelTransferf(pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glPixelTransferi(pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat);
}
extern "C" {
    pub fn glPolygonStipple(mask: *const GLubyte);
}
extern "C" {
    pub fn glPopAttrib();
}
extern "C" {
    pub fn glPopClientAttrib();
}
extern "C" {
    pub fn glPopMatrix();
}
extern "C" {
    pub fn glPopName();
}
extern "C" {
    pub fn glPrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf);
}
extern "C" {
    pub fn glPushAttrib(mask: GLbitfield);
}
extern "C" {
    pub fn glPushClientAttrib(mask: GLbitfield);
}
extern "C" {
    pub fn glPushMatrix();
}
extern "C" {
    pub fn glPushName(name: GLuint);
}
extern "C" {
    pub fn glRasterPos2d(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glRasterPos2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glRasterPos2f(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glRasterPos2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glRasterPos2i(x: GLint, y: GLint);
}
extern "C" {
    pub fn glRasterPos2iv(v: *const GLint);
}
extern "C" {
    pub fn glRasterPos2s(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glRasterPos2sv(v: *const GLshort);
}
extern "C" {
    pub fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glRasterPos3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glRasterPos3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glRasterPos3i(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glRasterPos3iv(v: *const GLint);
}
extern "C" {
    pub fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glRasterPos3sv(v: *const GLshort);
}
extern "C" {
    pub fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glRasterPos4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glRasterPos4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glRasterPos4iv(v: *const GLint);
}
extern "C" {
    pub fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glRasterPos4sv(v: *const GLshort);
}
extern "C" {
    pub fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble);
}
extern "C" {
    pub fn glRectdv(v1: *const GLdouble, v2: *const GLdouble);
}
extern "C" {
    pub fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat);
}
extern "C" {
    pub fn glRectfv(v1: *const GLfloat, v2: *const GLfloat);
}
extern "C" {
    pub fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint);
}
extern "C" {
    pub fn glRectiv(v1: *const GLint, v2: *const GLint);
}
extern "C" {
    pub fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort);
}
extern "C" {
    pub fn glRectsv(v1: *const GLshort, v2: *const GLshort);
}
extern "C" {
    pub fn glRenderMode(mode: GLenum) -> GLint;
}
extern "C" {
    pub fn glResetHistogram(target: GLenum);
}
extern "C" {
    pub fn glResetMinmax(target: GLenum);
}
extern "C" {
    pub fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glSelectBuffer(size: GLsizei, buffer: *mut GLuint);
}
extern "C" {
    pub fn glSeparableFilter2D(
        target: GLenum,
        internalformat: GLenum,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        row: *const GLvoid,
        column: *const GLvoid,
    );
}
extern "C" {
    pub fn glShadeModel(mode: GLenum);
}
extern "C" {
    pub fn glTexCoord1d(s: GLdouble);
}
extern "C" {
    pub fn glTexCoord1dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord1f(s: GLfloat);
}
extern "C" {
    pub fn glTexCoord1fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord1i(s: GLint);
}
extern "C" {
    pub fn glTexCoord1iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord1s(s: GLshort);
}
extern "C" {
    pub fn glTexCoord1sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoord2d(s: GLdouble, t: GLdouble);
}
extern "C" {
    pub fn glTexCoord2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord2f(s: GLfloat, t: GLfloat);
}
extern "C" {
    pub fn glTexCoord2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord2i(s: GLint, t: GLint);
}
extern "C" {
    pub fn glTexCoord2iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord2s(s: GLshort, t: GLshort);
}
extern "C" {
    pub fn glTexCoord2sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble);
}
extern "C" {
    pub fn glTexCoord3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat);
}
extern "C" {
    pub fn glTexCoord3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord3i(s: GLint, t: GLint, r: GLint);
}
extern "C" {
    pub fn glTexCoord3iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort);
}
extern "C" {
    pub fn glTexCoord3sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
}
extern "C" {
    pub fn glTexCoord4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glTexCoord4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint);
}
extern "C" {
    pub fn glTexCoord4iv(v: *const GLint);
}
extern "C" {
    pub fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort);
}
extern "C" {
    pub fn glTexCoord4sv(v: *const GLshort);
}
extern "C" {
    pub fn glTexCoordPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexEnviv(target: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble);
}
extern "C" {
    pub fn glTexGendv(coord: GLenum, pname: GLenum, params: *const GLdouble);
}
extern "C" {
    pub fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat);
}
extern "C" {
    pub fn glTexGenfv(coord: GLenum, pname: GLenum, params: *const GLfloat);
}
extern "C" {
    pub fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint);
}
extern "C" {
    pub fn glTexGeniv(coord: GLenum, pname: GLenum, params: *const GLint);
}
extern "C" {
    pub fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertex2d(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glVertex2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glVertex2f(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glVertex2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glVertex2i(x: GLint, y: GLint);
}
extern "C" {
    pub fn glVertex2iv(v: *const GLint);
}
extern "C" {
    pub fn glVertex2s(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glVertex2sv(v: *const GLshort);
}
extern "C" {
    pub fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glVertex3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glVertex3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glVertex3i(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glVertex3iv(v: *const GLint);
}
extern "C" {
    pub fn glVertex3s(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glVertex3sv(v: *const GLshort);
}
extern "C" {
    pub fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
}
extern "C" {
    pub fn glVertex4dv(v: *const GLdouble);
}
extern "C" {
    pub fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
}
extern "C" {
    pub fn glVertex4fv(v: *const GLfloat);
}
extern "C" {
    pub fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint);
}
extern "C" {
    pub fn glVertex4iv(v: *const GLint);
}
extern "C" {
    pub fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
}
extern "C" {
    pub fn glVertex4sv(v: *const GLshort);
}
extern "C" {
    pub fn glVertexPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glLoadTransposeMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glLoadTransposeMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glMultTransposeMatrixf(m: *const GLfloat);
}
extern "C" {
    pub fn glMultTransposeMatrixd(m: *const GLdouble);
}
extern "C" {
    pub fn glClientActiveTexture(texture: GLenum);
}
extern "C" {
    pub fn glMultiTexCoord1d(target: GLenum, s: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord1f(target: GLenum, s: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord1i(target: GLenum, s: GLint);
}
extern "C" {
    pub fn glMultiTexCoord1iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord1s(target: GLenum, s: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord1sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint);
}
extern "C" {
    pub fn glMultiTexCoord2iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord2sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint);
}
extern "C" {
    pub fn glMultiTexCoord3iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord3sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4dv(target: GLenum, v: *const GLdouble);
}
extern "C" {
    pub fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4fv(target: GLenum, v: *const GLfloat);
}
extern "C" {
    pub fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);
}
extern "C" {
    pub fn glMultiTexCoord4iv(target: GLenum, v: *const GLint);
}
extern "C" {
    pub fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);
}
extern "C" {
    pub fn glMultiTexCoord4sv(target: GLenum, v: *const GLshort);
}
extern "C" {
    pub fn glFogCoordf(coord: GLfloat);
}
extern "C" {
    pub fn glFogCoordfv(coord: *const GLfloat);
}
extern "C" {
    pub fn glFogCoordd(coord: GLdouble);
}
extern "C" {
    pub fn glFogCoorddv(coord: *const GLdouble);
}
extern "C" {
    pub fn glFogCoordPointer(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
}
extern "C" {
    pub fn glSecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3bv(v: *const GLbyte);
}
extern "C" {
    pub fn glSecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glSecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glSecondaryColor3i(red: GLint, green: GLint, blue: GLint);
}
extern "C" {
    pub fn glSecondaryColor3iv(v: *const GLint);
}
extern "C" {
    pub fn glSecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort);
}
extern "C" {
    pub fn glSecondaryColor3sv(v: *const GLshort);
}
extern "C" {
    pub fn glSecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3ubv(v: *const GLubyte);
}
extern "C" {
    pub fn glSecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint);
}
extern "C" {
    pub fn glSecondaryColor3uiv(v: *const GLuint);
}
extern "C" {
    pub fn glSecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort);
}
extern "C" {
    pub fn glSecondaryColor3usv(v: *const GLushort);
}
extern "C" {
    pub fn glSecondaryColorPointer(
        size: GLint,
        type_: GLenum,
        stride: GLsizei,
        pointer: *const GLvoid,
    );
}
extern "C" {
    pub fn glWindowPos2d(x: GLdouble, y: GLdouble);
}
extern "C" {
    pub fn glWindowPos2dv(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos2f(x: GLfloat, y: GLfloat);
}
extern "C" {
    pub fn glWindowPos2fv(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos2i(x: GLint, y: GLint);
}
extern "C" {
    pub fn glWindowPos2iv(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos2s(x: GLshort, y: GLshort);
}
extern "C" {
    pub fn glWindowPos2sv(v: *const GLshort);
}
extern "C" {
    pub fn glWindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble);
}
extern "C" {
    pub fn glWindowPos3dv(v: *const GLdouble);
}
extern "C" {
    pub fn glWindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat);
}
extern "C" {
    pub fn glWindowPos3fv(v: *const GLfloat);
}
extern "C" {
    pub fn glWindowPos3i(x: GLint, y: GLint, z: GLint);
}
extern "C" {
    pub fn glWindowPos3iv(v: *const GLint);
}
extern "C" {
    pub fn glWindowPos3s(x: GLshort, y: GLshort, z: GLshort);
}
extern "C" {
    pub fn glWindowPos3sv(v: *const GLshort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLUnurbs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLUquadric {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLUtesselator {
    _unused: [u8; 0],
}
pub type GLUnurbsObj = GLUnurbs;
pub type GLUquadricObj = GLUquadric;
pub type GLUtesselatorObj = GLUtesselator;
pub type GLUtriangulatorObj = GLUtesselator;
extern "C" {
    pub fn gluBeginCurve(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluBeginPolygon(tess: *mut GLUtesselator);
}
extern "C" {
    pub fn gluBeginSurface(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluBeginTrim(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluBuild1DMipmapLevels(
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        level: GLint,
        base: GLint,
        max: GLint,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild1DMipmaps(
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild2DMipmapLevels(
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        level: GLint,
        base: GLint,
        max: GLint,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild2DMipmaps(
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild3DMipmapLevels(
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        level: GLint,
        base: GLint,
        max: GLint,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild3DMipmaps(
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluCheckExtension(extName: *const GLubyte, extString: *const GLubyte) -> GLboolean;
}
extern "C" {
    pub fn gluCylinder(
        quad: *mut GLUquadric,
        base: GLdouble,
        top: GLdouble,
        height: GLdouble,
        slices: GLint,
        stacks: GLint,
    );
}
extern "C" {
    pub fn gluDeleteNurbsRenderer(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluDeleteQuadric(quad: *mut GLUquadric);
}
extern "C" {
    pub fn gluDeleteTess(tess: *mut GLUtesselator);
}
extern "C" {
    pub fn gluDisk(
        quad: *mut GLUquadric,
        inner: GLdouble,
        outer: GLdouble,
        slices: GLint,
        loops: GLint,
    );
}
extern "C" {
    pub fn gluEndCurve(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluEndPolygon(tess: *mut GLUtesselator);
}
extern "C" {
    pub fn gluEndSurface(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluEndTrim(nurb: *mut GLUnurbs);
}
extern "C" {
    pub fn gluErrorString(error: GLenum) -> *const GLubyte;
}
extern "C" {
    pub fn gluGetNurbsProperty(nurb: *mut GLUnurbs, property: GLenum, data: *mut GLfloat);
}
extern "C" {
    pub fn gluGetString(name: GLenum) -> *const GLubyte;
}
extern "C" {
    pub fn gluGetTessProperty(tess: *mut GLUtesselator, which: GLenum, data: *mut GLdouble);
}
extern "C" {
    pub fn gluLoadSamplingMatrices(
        nurb: *mut GLUnurbs,
        model: *const GLfloat,
        perspective: *const GLfloat,
        view: *const GLint,
    );
}
extern "C" {
    pub fn gluLookAt(
        eyeX: GLdouble,
        eyeY: GLdouble,
        eyeZ: GLdouble,
        centerX: GLdouble,
        centerY: GLdouble,
        centerZ: GLdouble,
        upX: GLdouble,
        upY: GLdouble,
        upZ: GLdouble,
    );
}
extern "C" {
    pub fn gluNewNurbsRenderer() -> *mut GLUnurbs;
}
extern "C" {
    pub fn gluNewQuadric() -> *mut GLUquadric;
}
extern "C" {
    pub fn gluNewTess() -> *mut GLUtesselator;
}
extern "C" {
    pub fn gluNextContour(tess: *mut GLUtesselator, type_: GLenum);
}
extern "C" {
    pub fn gluNurbsCallback(
        nurb: *mut GLUnurbs,
        which: GLenum,
        CallBackFunc: ::std::option::Option<unsafe extern "C" fn() -> GLvoid>,
    );
}
extern "C" {
    pub fn gluNurbsCallbackData(nurb: *mut GLUnurbs, userData: *mut GLvoid);
}
extern "C" {
    pub fn gluNurbsCallbackDataEXT(nurb: *mut GLUnurbs, userData: *mut GLvoid);
}
extern "C" {
    pub fn gluNurbsCurve(
        nurb: *mut GLUnurbs,
        knotCount: GLint,
        knots: *mut GLfloat,
        stride: GLint,
        control: *mut GLfloat,
        order: GLint,
        type_: GLenum,
    );
}
extern "C" {
    pub fn gluNurbsProperty(nurb: *mut GLUnurbs, property: GLenum, value: GLfloat);
}
extern "C" {
    pub fn gluNurbsSurface(
        nurb: *mut GLUnurbs,
        sKnotCount: GLint,
        sKnots: *mut GLfloat,
        tKnotCount: GLint,
        tKnots: *mut GLfloat,
        sStride: GLint,
        tStride: GLint,
        control: *mut GLfloat,
        sOrder: GLint,
        tOrder: GLint,
        type_: GLenum,
    );
}
extern "C" {
    pub fn gluOrtho2D(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble);
}
extern "C" {
    pub fn gluPartialDisk(
        quad: *mut GLUquadric,
        inner: GLdouble,
        outer: GLdouble,
        slices: GLint,
        loops: GLint,
        start: GLdouble,
        sweep: GLdouble,
    );
}
extern "C" {
    pub fn gluPerspective(fovy: GLdouble, aspect: GLdouble, zNear: GLdouble, zFar: GLdouble);
}
extern "C" {
    pub fn gluPickMatrix(
        x: GLdouble,
        y: GLdouble,
        delX: GLdouble,
        delY: GLdouble,
        viewport: *mut GLint,
    );
}
extern "C" {
    pub fn gluProject(
        objX: GLdouble,
        objY: GLdouble,
        objZ: GLdouble,
        model: *const GLdouble,
        proj: *const GLdouble,
        view: *const GLint,
        winX: *mut GLdouble,
        winY: *mut GLdouble,
        winZ: *mut GLdouble,
    ) -> GLint;
}
extern "C" {
    pub fn gluPwlCurve(
        nurb: *mut GLUnurbs,
        count: GLint,
        data: *mut GLfloat,
        stride: GLint,
        type_: GLenum,
    );
}
extern "C" {
    pub fn gluQuadricCallback(
        quad: *mut GLUquadric,
        which: GLenum,
        CallBackFunc: ::std::option::Option<unsafe extern "C" fn() -> GLvoid>,
    );
}
extern "C" {
    pub fn gluQuadricDrawStyle(quad: *mut GLUquadric, draw: GLenum);
}
extern "C" {
    pub fn gluQuadricNormals(quad: *mut GLUquadric, normal: GLenum);
}
extern "C" {
    pub fn gluQuadricOrientation(quad: *mut GLUquadric, orientation: GLenum);
}
extern "C" {
    pub fn gluQuadricTexture(quad: *mut GLUquadric, texture: GLboolean);
}
extern "C" {
    pub fn gluScaleImage(
        format: GLenum,
        wIn: GLsizei,
        hIn: GLsizei,
        typeIn: GLenum,
        dataIn: *const ::std::os::raw::c_void,
        wOut: GLsizei,
        hOut: GLsizei,
        typeOut: GLenum,
        dataOut: *mut GLvoid,
    ) -> GLint;
}
extern "C" {
    pub fn gluSphere(quad: *mut GLUquadric, radius: GLdouble, slices: GLint, stacks: GLint);
}
extern "C" {
    pub fn gluTessBeginContour(tess: *mut GLUtesselator);
}
extern "C" {
    pub fn gluTessBeginPolygon(tess: *mut GLUtesselator, data: *mut GLvoid);
}
extern "C" {
    pub fn gluTessCallback(
        tess: *mut GLUtesselator,
        which: GLenum,
        CallBackFunc: ::std::option::Option<unsafe extern "C" fn() -> GLvoid>,
    );
}
extern "C" {
    pub fn gluTessEndContour(tess: *mut GLUtesselator);
}
extern "C" {
    pub fn gluTessEndPolygon(tess: *mut GLUtesselator);
}
extern "C" {
    pub fn gluTessNormal(
        tess: *mut GLUtesselator,
        valueX: GLdouble,
        valueY: GLdouble,
        valueZ: GLdouble,
    );
}
extern "C" {
    pub fn gluTessProperty(tess: *mut GLUtesselator, which: GLenum, data: GLdouble);
}
extern "C" {
    pub fn gluTessVertex(tess: *mut GLUtesselator, location: *mut GLdouble, data: *mut GLvoid);
}
extern "C" {
    pub fn gluUnProject(
        winX: GLdouble,
        winY: GLdouble,
        winZ: GLdouble,
        model: *const GLdouble,
        proj: *const GLdouble,
        view: *const GLint,
        objX: *mut GLdouble,
        objY: *mut GLdouble,
        objZ: *mut GLdouble,
    ) -> GLint;
}
extern "C" {
    pub fn gluUnProject4(
        winX: GLdouble,
        winY: GLdouble,
        winZ: GLdouble,
        clipW: GLdouble,
        model: *const GLdouble,
        proj: *const GLdouble,
        view: *const GLint,
        nearPlane: GLdouble,
        farPlane: GLdouble,
        objX: *mut GLdouble,
        objY: *mut GLdouble,
        objZ: *mut GLdouble,
        objW: *mut GLdouble,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild1DMipmapsCTX(
        ctx: *mut _CGLContextObject,
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild2DMipmapsCTX(
        ctx: *mut _CGLContextObject,
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild3DMipmapsCTX(
        ctx: *mut _CGLContextObject,
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild1DMipmapLevelsCTX(
        ctx: *mut _CGLContextObject,
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        format: GLenum,
        type_: GLenum,
        level: GLint,
        base: GLint,
        max: GLint,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild2DMipmapLevelsCTX(
        ctx: *mut _CGLContextObject,
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        format: GLenum,
        type_: GLenum,
        level: GLint,
        base: GLint,
        max: GLint,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluBuild3DMipmapLevelsCTX(
        ctx: *mut _CGLContextObject,
        target: GLenum,
        internalFormat: GLint,
        width: GLsizei,
        height: GLsizei,
        depth: GLsizei,
        format: GLenum,
        type_: GLenum,
        level: GLint,
        base: GLint,
        max: GLint,
        data: *const ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluLookAtCTX(
        ctx: *mut _CGLContextObject,
        eyeX: GLdouble,
        eyeY: GLdouble,
        eyeZ: GLdouble,
        centerX: GLdouble,
        centerY: GLdouble,
        centerZ: GLdouble,
        upX: GLdouble,
        upY: GLdouble,
        upZ: GLdouble,
    );
}
extern "C" {
    pub fn gluNewNurbsRendererCTX(ctx: *mut _CGLContextObject) -> *mut GLUnurbs;
}
extern "C" {
    pub fn gluNewQuadricCTX(ctx: *mut _CGLContextObject) -> *mut GLUquadric;
}
extern "C" {
    pub fn gluNewTessCTX(ctx: *mut _CGLContextObject) -> *mut GLUtesselator;
}
extern "C" {
    pub fn gluOrtho2DCTX(
        ctx: *mut _CGLContextObject,
        left: GLdouble,
        right: GLdouble,
        bottom: GLdouble,
        top: GLdouble,
    );
}
extern "C" {
    pub fn gluPerspectiveCTX(
        ctx: *mut _CGLContextObject,
        fovy: GLdouble,
        aspect: GLdouble,
        zNear: GLdouble,
        zFar: GLdouble,
    );
}
extern "C" {
    pub fn gluPickMatrixCTX(
        ctx: *mut _CGLContextObject,
        x: GLdouble,
        y: GLdouble,
        delX: GLdouble,
        delY: GLdouble,
        viewport: *mut GLint,
    );
}
extern "C" {
    pub fn gluScaleImageCTX(
        ctx: *mut _CGLContextObject,
        format: GLenum,
        wIn: GLsizei,
        hIn: GLsizei,
        typeIn: GLenum,
        dataIn: *const ::std::os::raw::c_void,
        wOut: GLsizei,
        hOut: GLsizei,
        typeOut: GLenum,
        dataOut: *mut ::std::os::raw::c_void,
    ) -> GLint;
}
extern "C" {
    pub fn gluCylinderCTX(
        ctx: *mut _CGLContextObject,
        qobj: *mut GLUquadric,
        baseRadiusd: GLdouble,
        topRadiusd: GLdouble,
        heightd: GLdouble,
        slices: GLint,
        stacks: GLint,
    );
}
extern "C" {
    pub fn gluDiskCTX(
        ctx: *mut _CGLContextObject,
        qobj: *mut GLUquadric,
        innerRadiusd: GLdouble,
        outerRadiusd: GLdouble,
        slices: GLint,
        loops: GLint,
    );
}
extern "C" {
    pub fn gluPartialDiskCTX(
        ctx: *mut _CGLContextObject,
        qobj: *mut GLUquadric,
        innerRadiusd: GLdouble,
        outerRadiusd: GLdouble,
        slices: GLint,
        loops: GLint,
        startAngled: GLdouble,
        sweepAngled: GLdouble,
    );
}
extern "C" {
    pub fn gluSphereCTX(
        ctx: *mut _CGLContextObject,
        qobj: *mut GLUquadric,
        radiusd: GLdouble,
        slices: GLint,
        stacks: GLint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLIContextRec {
    _unused: [u8; 0],
}
pub type GLIContext = *mut __GLIContextRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLISharedRec {
    _unused: [u8; 0],
}
pub type GLIShared = *mut __GLISharedRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __GLIFunctionDispatchRec {
    pub accum:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, op: GLenum, value: GLfloat)>,
    pub alpha_func:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, func: GLenum, ref_: GLclampf)>,
    pub are_textures_resident: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            n: GLsizei,
            textures: *const GLuint,
            residences: *mut GLboolean,
        ) -> GLboolean,
    >,
    pub array_element: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, i: GLint)>,
    pub begin: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub bind_texture: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, texture: GLuint),
    >,
    pub bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            width: GLsizei,
            height: GLsizei,
            xorig: GLfloat,
            yorig: GLfloat,
            xmove: GLfloat,
            ymove: GLfloat,
            bitmap: *const GLubyte,
        ),
    >,
    pub blend_func: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sfactor: GLenum, dfactor: GLenum),
    >,
    pub call_list: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, list: GLuint)>,
    pub call_lists: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, type_: GLenum, lists: *const GLvoid),
    >,
    pub clear: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: GLbitfield)>,
    pub clear_accum: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLfloat,
            green: GLfloat,
            blue: GLfloat,
            alpha: GLfloat,
        ),
    >,
    pub clear_color: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLclampf,
            green: GLclampf,
            blue: GLclampf,
            alpha: GLclampf,
        ),
    >,
    pub clear_depth: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, depth: GLclampd)>,
    pub clear_index: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: GLfloat)>,
    pub clear_stencil: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLint)>,
    pub clip_plane: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, plane: GLenum, equation: *const GLdouble),
    >,
    pub color3b: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLbyte, green: GLbyte, blue: GLbyte),
    >,
    pub color3bv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLbyte)>,
    pub color3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLdouble, green: GLdouble, blue: GLdouble),
    >,
    pub color3dv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub color3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLfloat, green: GLfloat, blue: GLfloat),
    >,
    pub color3fv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub color3i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLint, green: GLint, blue: GLint),
    >,
    pub color3iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub color3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLshort, green: GLshort, blue: GLshort),
    >,
    pub color3sv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub color3ub: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLubyte, green: GLubyte, blue: GLubyte),
    >,
    pub color3ubv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLubyte)>,
    pub color3ui: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLuint, green: GLuint, blue: GLuint),
    >,
    pub color3uiv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLuint)>,
    pub color3us: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLushort, green: GLushort, blue: GLushort),
    >,
    pub color3usv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLushort)>,
    pub color4b: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLbyte,
            green: GLbyte,
            blue: GLbyte,
            alpha: GLbyte,
        ),
    >,
    pub color4bv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLbyte)>,
    pub color4d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLdouble,
            green: GLdouble,
            blue: GLdouble,
            alpha: GLdouble,
        ),
    >,
    pub color4dv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub color4f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLfloat,
            green: GLfloat,
            blue: GLfloat,
            alpha: GLfloat,
        ),
    >,
    pub color4fv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub color4i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLint, green: GLint, blue: GLint, alpha: GLint),
    >,
    pub color4iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub color4s: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLshort,
            green: GLshort,
            blue: GLshort,
            alpha: GLshort,
        ),
    >,
    pub color4sv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub color4ub: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLubyte,
            green: GLubyte,
            blue: GLubyte,
            alpha: GLubyte,
        ),
    >,
    pub color4ubv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLubyte)>,
    pub color4ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLuint,
            green: GLuint,
            blue: GLuint,
            alpha: GLuint,
        ),
    >,
    pub color4uiv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLuint)>,
    pub color4us: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLushort,
            green: GLushort,
            blue: GLushort,
            alpha: GLushort,
        ),
    >,
    pub color4usv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLushort)>,
    pub color_mask: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLboolean,
            green: GLboolean,
            blue: GLboolean,
            alpha: GLboolean,
        ),
    >,
    pub color_material:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, face: GLenum, mode: GLenum)>,
    pub color_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub copy_pixels: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
            type_: GLenum,
        ),
    >,
    pub copy_tex_image1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalFormat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            border: GLint,
        ),
    >,
    pub copy_tex_image2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalFormat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
            border: GLint,
        ),
    >,
    pub copy_tex_sub_image1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub copy_tex_sub_image2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub cull_face: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub delete_lists:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, list: GLuint, range: GLsizei)>,
    pub delete_textures: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, textures: *const GLuint),
    >,
    pub depth_func: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, func: GLenum)>,
    pub depth_mask: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, flag: GLboolean)>,
    pub depth_range: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, zNear: GLclampd, zFar: GLclampd),
    >,
    pub disable: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, cap: GLenum)>,
    pub disable_client_state:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, array: GLenum)>,
    pub draw_arrays: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, first: GLint, count: GLsizei),
    >,
    pub draw_buffer: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub draw_elements: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
        ),
    >,
    pub draw_pixels: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub edge_flag: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, flag: GLboolean)>,
    pub edge_flag_pointer: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, stride: GLsizei, pointer: *const GLvoid),
    >,
    pub edge_flagv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, flag: *const GLboolean)>,
    pub enable: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, cap: GLenum)>,
    pub enable_client_state:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, array: GLenum)>,
    pub end: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub end_list: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub eval_coord1d: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: GLdouble)>,
    pub eval_coord1dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: *const GLdouble)>,
    pub eval_coord1f: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: GLfloat)>,
    pub eval_coord1fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: *const GLfloat)>,
    pub eval_coord2d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: GLdouble, v: GLdouble)>,
    pub eval_coord2dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: *const GLdouble)>,
    pub eval_coord2f:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: GLfloat, v: GLfloat)>,
    pub eval_coord2fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, u: *const GLfloat)>,
    pub eval_mesh1: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, i1: GLint, i2: GLint),
    >,
    pub eval_mesh2: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            i1: GLint,
            i2: GLint,
            j1: GLint,
            j2: GLint,
        ),
    >,
    pub eval_point1: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, i: GLint)>,
    pub eval_point2:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, i: GLint, j: GLint)>,
    pub feedback_buffer: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLsizei, type_: GLenum, buffer: *mut GLfloat),
    >,
    pub finish: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub flush: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub fogf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLfloat)>,
    pub fogfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *const GLfloat),
    >,
    pub fogi:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub fogiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *const GLint),
    >,
    pub front_face: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub frustum: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            left: GLdouble,
            right: GLdouble,
            bottom: GLdouble,
            top: GLdouble,
            zNear: GLdouble,
            zFar: GLdouble,
        ),
    >,
    pub gen_lists:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, range: GLsizei) -> GLuint>,
    pub gen_textures: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, textures: *mut GLuint),
    >,
    pub get_booleanv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *mut GLboolean),
    >,
    pub get_clip_plane: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, plane: GLenum, equation: *mut GLdouble),
    >,
    pub get_doublev: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *mut GLdouble),
    >,
    pub get_error: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext) -> GLenum>,
    pub get_floatv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_integerv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *mut GLint),
    >,
    pub get_lightfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, light: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_lightiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, light: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_mapdv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, query: GLenum, v: *mut GLdouble),
    >,
    pub get_mapfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, query: GLenum, v: *mut GLfloat),
    >,
    pub get_mapiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, query: GLenum, v: *mut GLint),
    >,
    pub get_materialfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, face: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_materialiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, face: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_pixel_mapfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, map: GLenum, values: *mut GLfloat),
    >,
    pub get_pixel_mapuiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, map: GLenum, values: *mut GLuint),
    >,
    pub get_pixel_mapusv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, map: GLenum, values: *mut GLushort),
    >,
    pub get_pointerv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *mut *mut GLvoid),
    >,
    pub get_polygon_stipple:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: *mut GLubyte)>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, name: GLenum) -> *const GLubyte,
    >,
    pub get_tex_envfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_tex_enviv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_tex_gendv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, params: *mut GLdouble),
    >,
    pub get_tex_genfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_tex_geniv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_tex_image: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *mut GLvoid,
        ),
    >,
    pub get_tex_level_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            pname: GLenum,
            params: *mut GLfloat,
        ),
    >,
    pub get_tex_level_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub get_tex_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_tex_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub hint:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, mode: GLenum)>,
    pub index_mask: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: GLuint)>,
    pub index_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub indexd: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: GLdouble)>,
    pub indexdv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: *const GLdouble)>,
    pub indexf: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: GLfloat)>,
    pub indexfv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: *const GLfloat)>,
    pub indexi: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: GLint)>,
    pub indexiv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: *const GLint)>,
    pub indexs: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: GLshort)>,
    pub indexsv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: *const GLshort)>,
    pub indexub: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: GLubyte)>,
    pub indexubv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, c: *const GLubyte)>,
    pub init_names: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub interleaved_arrays: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            format: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub is_enabled:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, cap: GLenum) -> GLboolean>,
    pub is_list:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, list: GLuint) -> GLboolean>,
    pub is_texture:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, texture: GLuint) -> GLboolean>,
    pub light_modelf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLfloat)>,
    pub light_modelfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *const GLfloat),
    >,
    pub light_modeli:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub light_modeliv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *const GLint),
    >,
    pub lightf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, light: GLenum, pname: GLenum, param: GLfloat),
    >,
    pub lightfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, light: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub lighti: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, light: GLenum, pname: GLenum, param: GLint),
    >,
    pub lightiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, light: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub line_stipple: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, factor: GLint, pattern: GLushort),
    >,
    pub line_width: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, width: GLfloat)>,
    pub list_base: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, base: GLuint)>,
    pub load_identity: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub load_matrixd:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLdouble)>,
    pub load_matrixf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLfloat)>,
    pub load_name: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, name: GLuint)>,
    pub logic_op: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, opcode: GLenum)>,
    pub map1d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            u1: GLdouble,
            u2: GLdouble,
            stride: GLint,
            order: GLint,
            points: *const GLdouble,
        ),
    >,
    pub map1f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            u1: GLfloat,
            u2: GLfloat,
            stride: GLint,
            order: GLint,
            points: *const GLfloat,
        ),
    >,
    pub map2d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            u1: GLdouble,
            u2: GLdouble,
            ustride: GLint,
            uorder: GLint,
            v1: GLdouble,
            v2: GLdouble,
            vstride: GLint,
            vorder: GLint,
            points: *const GLdouble,
        ),
    >,
    pub map2f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            u1: GLfloat,
            u2: GLfloat,
            ustride: GLint,
            uorder: GLint,
            v1: GLfloat,
            v2: GLfloat,
            vstride: GLint,
            vorder: GLint,
            points: *const GLfloat,
        ),
    >,
    pub map_grid1d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, un: GLint, u1: GLdouble, u2: GLdouble),
    >,
    pub map_grid1f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, un: GLint, u1: GLfloat, u2: GLfloat),
    >,
    pub map_grid2d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            un: GLint,
            u1: GLdouble,
            u2: GLdouble,
            vn: GLint,
            v1: GLdouble,
            v2: GLdouble,
        ),
    >,
    pub map_grid2f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            un: GLint,
            u1: GLfloat,
            u2: GLfloat,
            vn: GLint,
            v1: GLfloat,
            v2: GLfloat,
        ),
    >,
    pub materialf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, face: GLenum, pname: GLenum, param: GLfloat),
    >,
    pub materialfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, face: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub materiali: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, face: GLenum, pname: GLenum, param: GLint),
    >,
    pub materialiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, face: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub matrix_mode: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub mult_matrixd:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLdouble)>,
    pub mult_matrixf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLfloat)>,
    pub new_list:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, list: GLuint, mode: GLenum)>,
    pub normal3b: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, nx: GLbyte, ny: GLbyte, nz: GLbyte),
    >,
    pub normal3bv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLbyte)>,
    pub normal3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, nx: GLdouble, ny: GLdouble, nz: GLdouble),
    >,
    pub normal3dv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub normal3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, nx: GLfloat, ny: GLfloat, nz: GLfloat),
    >,
    pub normal3fv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub normal3i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, nx: GLint, ny: GLint, nz: GLint),
    >,
    pub normal3iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub normal3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, nx: GLshort, ny: GLshort, nz: GLshort),
    >,
    pub normal3sv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub normal_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub ortho: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            left: GLdouble,
            right: GLdouble,
            bottom: GLdouble,
            top: GLdouble,
            zNear: GLdouble,
            zFar: GLdouble,
        ),
    >,
    pub pass_through: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, token: GLfloat)>,
    pub pixel_mapfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            map: GLenum,
            mapsize: GLsizei,
            values: *const GLfloat,
        ),
    >,
    pub pixel_mapuiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, map: GLenum, mapsize: GLsizei, values: *const GLuint),
    >,
    pub pixel_mapusv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            map: GLenum,
            mapsize: GLsizei,
            values: *const GLushort,
        ),
    >,
    pub pixel_storef:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLfloat)>,
    pub pixel_storei:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub pixel_transferf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLfloat)>,
    pub pixel_transferi:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub pixel_zoom: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, xfactor: GLfloat, yfactor: GLfloat),
    >,
    pub point_size: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, size: GLfloat)>,
    pub polygon_mode:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, face: GLenum, mode: GLenum)>,
    pub polygon_offset: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, factor: GLfloat, units: GLfloat),
    >,
    pub polygon_stipple:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: *const GLubyte)>,
    pub pop_attrib: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub pop_client_attrib: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub pop_matrix: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub pop_name: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub prioritize_textures: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            n: GLsizei,
            textures: *const GLuint,
            priorities: *const GLclampf,
        ),
    >,
    pub push_attrib: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: GLbitfield)>,
    pub push_client_attrib:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: GLbitfield)>,
    pub push_matrix: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub push_name: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, name: GLuint)>,
    pub raster_pos2d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble)>,
    pub raster_pos2dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub raster_pos2f:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat)>,
    pub raster_pos2fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub raster_pos2i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint)>,
    pub raster_pos2iv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub raster_pos2s:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort)>,
    pub raster_pos2sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub raster_pos3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub raster_pos3dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub raster_pos3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub raster_pos3fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub raster_pos3i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, z: GLint)>,
    pub raster_pos3iv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub raster_pos3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub raster_pos3sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub raster_pos4d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
    >,
    pub raster_pos4dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub raster_pos4f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
    >,
    pub raster_pos4fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub raster_pos4i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, z: GLint, w: GLint),
    >,
    pub raster_pos4iv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub raster_pos4s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
    >,
    pub raster_pos4sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub read_buffer: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub read_pixels: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *mut GLvoid,
        ),
    >,
    pub rectd: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            x1: GLdouble,
            y1: GLdouble,
            x2: GLdouble,
            y2: GLdouble,
        ),
    >,
    pub rectdv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, v1: *const GLdouble, v2: *const GLdouble),
    >,
    pub rectf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat),
    >,
    pub rectfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, v1: *const GLfloat, v2: *const GLfloat),
    >,
    pub recti: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x1: GLint, y1: GLint, x2: GLint, y2: GLint),
    >,
    pub rectiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, v1: *const GLint, v2: *const GLint),
    >,
    pub rects: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort),
    >,
    pub rectsv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, v1: *const GLshort, v2: *const GLshort),
    >,
    pub render_mode:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum) -> GLint>,
    pub rotated: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            angle: GLdouble,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
        ),
    >,
    pub rotatef: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub scaled: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub scalef: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub scissor: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, width: GLsizei, height: GLsizei),
    >,
    pub select_buffer: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLsizei, buffer: *mut GLuint),
    >,
    pub shade_model: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub stencil_func: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, func: GLenum, ref_: GLint, mask: GLuint),
    >,
    pub stencil_mask: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mask: GLuint)>,
    pub stencil_op: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, fail: GLenum, zfail: GLenum, zpass: GLenum),
    >,
    pub tex_coord1d: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLdouble)>,
    pub tex_coord1dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub tex_coord1f: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLfloat)>,
    pub tex_coord1fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub tex_coord1i: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLint)>,
    pub tex_coord1iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub tex_coord1s: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLshort)>,
    pub tex_coord1sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub tex_coord2d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLdouble, t: GLdouble)>,
    pub tex_coord2dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub tex_coord2f:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLfloat, t: GLfloat)>,
    pub tex_coord2fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub tex_coord2i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLint, t: GLint)>,
    pub tex_coord2iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub tex_coord2s:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLshort, t: GLshort)>,
    pub tex_coord2sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub tex_coord3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLdouble, t: GLdouble, r: GLdouble),
    >,
    pub tex_coord3dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub tex_coord3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLfloat, t: GLfloat, r: GLfloat),
    >,
    pub tex_coord3fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub tex_coord3i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, s: GLint, t: GLint, r: GLint)>,
    pub tex_coord3iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub tex_coord3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLshort, t: GLshort, r: GLshort),
    >,
    pub tex_coord3sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub tex_coord4d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble),
    >,
    pub tex_coord4dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub tex_coord4f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat),
    >,
    pub tex_coord4fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub tex_coord4i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLint, t: GLint, r: GLint, q: GLint),
    >,
    pub tex_coord4iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub tex_coord4s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, s: GLshort, t: GLshort, r: GLshort, q: GLshort),
    >,
    pub tex_coord4sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub tex_coord_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub tex_envf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, param: GLfloat),
    >,
    pub tex_envfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            pname: GLenum,
            params: *const GLfloat,
        ),
    >,
    pub tex_envi: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, param: GLint),
    >,
    pub tex_enviv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub tex_gend: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, param: GLdouble),
    >,
    pub tex_gendv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            coord: GLenum,
            pname: GLenum,
            params: *const GLdouble,
        ),
    >,
    pub tex_genf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, param: GLfloat),
    >,
    pub tex_genfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub tex_geni: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, param: GLint),
    >,
    pub tex_geniv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, coord: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub tex_image1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            border: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub tex_image2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            border: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub tex_parameterf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, param: GLfloat),
    >,
    pub tex_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            pname: GLenum,
            params: *const GLfloat,
        ),
    >,
    pub tex_parameteri: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, param: GLint),
    >,
    pub tex_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub tex_sub_image1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub tex_sub_image2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub translated: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub translatef: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub vertex2d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble)>,
    pub vertex2dv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub vertex2f:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat)>,
    pub vertex2fv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub vertex2i: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint)>,
    pub vertex2iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub vertex2s:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort)>,
    pub vertex2sv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub vertex3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub vertex3dv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub vertex3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub vertex3fv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub vertex3i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, z: GLint)>,
    pub vertex3iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub vertex3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub vertex3sv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub vertex4d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble),
    >,
    pub vertex4dv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub vertex4f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat),
    >,
    pub vertex4fv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub vertex4i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, z: GLint, w: GLint),
    >,
    pub vertex4iv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub vertex4s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort, z: GLshort, w: GLshort),
    >,
    pub vertex4sv: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub vertex_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub viewport: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, width: GLsizei, height: GLsizei),
    >,
    pub blend_func_separate: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            sfactorRGB: GLenum,
            dfactorRGB: GLenum,
            sfactorAlpha: GLenum,
            dfactorAlpha: GLenum,
        ),
    >,
    pub blend_color: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            red: GLclampf,
            green: GLclampf,
            blue: GLclampf,
            alpha: GLclampf,
        ),
    >,
    pub blend_equation: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub lock_arrays_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, first: GLint, count: GLsizei)>,
    pub unlock_arrays_EXT: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub client_active_texture:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum)>,
    pub active_texture:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum)>,
    pub multi_tex_coord1d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLdouble)>,
    pub multi_tex_coord1dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLdouble),
    >,
    pub multi_tex_coord1f:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLfloat)>,
    pub multi_tex_coord1fv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLfloat),
    >,
    pub multi_tex_coord1i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLint)>,
    pub multi_tex_coord1iv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLint),
    >,
    pub multi_tex_coord1s:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLshort)>,
    pub multi_tex_coord1sv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLshort),
    >,
    pub multi_tex_coord2d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLdouble, t: GLdouble),
    >,
    pub multi_tex_coord2dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLdouble),
    >,
    pub multi_tex_coord2f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLfloat, t: GLfloat),
    >,
    pub multi_tex_coord2fv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLfloat),
    >,
    pub multi_tex_coord2i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLint, t: GLint),
    >,
    pub multi_tex_coord2iv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLint),
    >,
    pub multi_tex_coord2s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLshort, t: GLshort),
    >,
    pub multi_tex_coord2sv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLshort),
    >,
    pub multi_tex_coord3d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            s: GLdouble,
            t: GLdouble,
            r: GLdouble,
        ),
    >,
    pub multi_tex_coord3dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLdouble),
    >,
    pub multi_tex_coord3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat),
    >,
    pub multi_tex_coord3fv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLfloat),
    >,
    pub multi_tex_coord3i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLint, t: GLint, r: GLint),
    >,
    pub multi_tex_coord3iv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLint),
    >,
    pub multi_tex_coord3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, s: GLshort, t: GLshort, r: GLshort),
    >,
    pub multi_tex_coord3sv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLshort),
    >,
    pub multi_tex_coord4d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            s: GLdouble,
            t: GLdouble,
            r: GLdouble,
            q: GLdouble,
        ),
    >,
    pub multi_tex_coord4dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLdouble),
    >,
    pub multi_tex_coord4f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            s: GLfloat,
            t: GLfloat,
            r: GLfloat,
            q: GLfloat,
        ),
    >,
    pub multi_tex_coord4fv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLfloat),
    >,
    pub multi_tex_coord4i: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            s: GLint,
            t: GLint,
            r: GLint,
            q: GLint,
        ),
    >,
    pub multi_tex_coord4iv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLint),
    >,
    pub multi_tex_coord4s: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            s: GLshort,
            t: GLshort,
            r: GLshort,
            q: GLshort,
        ),
    >,
    pub multi_tex_coord4sv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, v: *const GLshort),
    >,
    pub load_transpose_matrixd:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLdouble)>,
    pub load_transpose_matrixf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLfloat)>,
    pub mult_transpose_matrixd:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLdouble)>,
    pub mult_transpose_matrixf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, m: *const GLfloat)>,
    pub compressed_tex_image3D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub compressed_tex_image2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub compressed_tex_image1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalformat: GLenum,
            width: GLsizei,
            border: GLint,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub compressed_tex_sub_image3D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub compressed_tex_sub_image2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub compressed_tex_sub_image1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            width: GLsizei,
            format: GLenum,
            imageSize: GLsizei,
            data: *const GLvoid,
        ),
    >,
    pub get_compressed_tex_image: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, level: GLint, img: *mut GLvoid),
    >,
    pub secondary_color3b: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLbyte, green: GLbyte, blue: GLbyte),
    >,
    pub secondary_color3bv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLbyte)>,
    pub secondary_color3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLdouble, green: GLdouble, blue: GLdouble),
    >,
    pub secondary_color3dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub secondary_color3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLfloat, green: GLfloat, blue: GLfloat),
    >,
    pub secondary_color3fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub secondary_color3i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLint, green: GLint, blue: GLint),
    >,
    pub secondary_color3iv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub secondary_color3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLshort, green: GLshort, blue: GLshort),
    >,
    pub secondary_color3sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub secondary_color3ub: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLubyte, green: GLubyte, blue: GLubyte),
    >,
    pub secondary_color3ubv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLubyte)>,
    pub secondary_color3ui: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLuint, green: GLuint, blue: GLuint),
    >,
    pub secondary_color3uiv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLuint)>,
    pub secondary_color3us: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, red: GLushort, green: GLushort, blue: GLushort),
    >,
    pub secondary_color3usv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLushort)>,
    pub secondary_color_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub vertex_array_range_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, count: GLsizei, pointer: *const GLvoid),
    >,
    pub flush_vertex_array_range_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, count: GLsizei, pointer: *const GLvoid),
    >,
    pub draw_range_elements: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
        ),
    >,
    pub color_table: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            table: *const GLvoid,
        ),
    >,
    pub color_table_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            pname: GLenum,
            params: *const GLfloat,
        ),
    >,
    pub color_table_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub copy_color_table: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub get_color_table: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            format: GLenum,
            type_: GLenum,
            table: *mut GLvoid,
        ),
    >,
    pub get_color_table_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_color_table_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub color_sub_table: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            start: GLsizei,
            count: GLsizei,
            format: GLenum,
            type_: GLenum,
            data: *const GLvoid,
        ),
    >,
    pub copy_color_sub_table: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            start: GLsizei,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub convolution_filter1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            format: GLenum,
            type_: GLenum,
            image: *const GLvoid,
        ),
    >,
    pub convolution_filter2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            image: *const GLvoid,
        ),
    >,
    pub convolution_parameterf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: GLfloat),
    >,
    pub convolution_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            pname: GLenum,
            params: *const GLfloat,
        ),
    >,
    pub convolution_parameteri: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: GLint),
    >,
    pub convolution_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *const GLint),
    >,
    pub copy_convolution_filter1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
        ),
    >,
    pub copy_convolution_filter2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub get_convolution_filter: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            format: GLenum,
            type_: GLenum,
            image: *mut GLvoid,
        ),
    >,
    pub get_convolution_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_convolution_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_separable_filter: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            format: GLenum,
            type_: GLenum,
            row: *mut GLvoid,
            column: *mut GLvoid,
            span: *mut GLvoid,
        ),
    >,
    pub separable_filter2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            format: GLenum,
            type_: GLenum,
            row: *const GLvoid,
            column: *const GLvoid,
        ),
    >,
    pub get_histogram: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            reset: GLboolean,
            format: GLenum,
            type_: GLenum,
            values: *mut GLvoid,
        ),
    >,
    pub get_histogram_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_histogram_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_minmax: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            reset: GLboolean,
            format: GLenum,
            type_: GLenum,
            values: *mut GLvoid,
        ),
    >,
    pub get_minmax_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_minmax_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub histogram: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            width: GLsizei,
            internalformat: GLenum,
            sink: GLboolean,
        ),
    >,
    pub minmax: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            sink: GLboolean,
        ),
    >,
    pub reset_histogram:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum)>,
    pub reset_minmax: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum)>,
    pub tex_image3D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            internalFormat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            border: GLint,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub tex_sub_image3D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            format: GLenum,
            type_: GLenum,
            pixels: *const GLvoid,
        ),
    >,
    pub copy_tex_sub_image3D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            level: GLint,
            xoffset: GLint,
            yoffset: GLint,
            zoffset: GLint,
            x: GLint,
            y: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub get_uniform_indices: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformCount: GLsizei,
            uniformNames: *const *const GLchar,
            uniformIndices: *mut GLuint,
        ),
    >,
    pub get_active_uniformsiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformCount: GLsizei,
            uniformIndices: *const GLuint,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub get_active_uniform_name: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformIndex: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            uniformName: *mut GLchar,
        ),
    >,
    pub get_uniform_block_index: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformBlockName: *const GLchar,
        ) -> GLuint,
    >,
    pub get_active_uniform_blockiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformBlockIndex: GLuint,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub get_active_uniform_block_name: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformBlockIndex: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            uniformBlockName: *mut GLchar,
        ),
    >,
    pub uniform_block_binding: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            uniformBlockIndex: GLuint,
            uniformBlockBinding: GLuint,
        ),
    >,
    pub get_combiner_input_parameterfv_NV: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            stage: GLenum,
            portion: GLenum,
            variable: GLenum,
            pname: GLenum,
            params: *mut GLfloat,
        ),
    >,
    pub get_combiner_input_parameteriv_NV: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            stage: GLenum,
            portion: GLenum,
            variable: GLenum,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub get_combiner_output_parameterfv_NV: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            stage: GLenum,
            portion: GLenum,
            pname: GLenum,
            params: *mut GLfloat,
        ),
    >,
    pub get_combiner_output_parameteriv_NV: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            stage: GLenum,
            portion: GLenum,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub get_final_combiner_input_parameterfv_NV: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            variable: GLenum,
            pname: GLenum,
            params: *mut GLfloat,
        ),
    >,
    pub get_final_combiner_input_parameteriv_NV: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, variable: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub combiner_stage_parameterfv_NV: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, stage: GLenum, pname: GLenum, params: *const GLfloat),
    >,
    pub get_combiner_stage_parameterfv_NV: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, stage: GLenum, pname: GLenum, params: *mut GLfloat),
    >,
    pub texture_range_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            length: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub get_tex_parameter_pointerv_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            pname: GLenum,
            params: *mut *mut GLvoid,
        ),
    >,
    pub blend_equation_separate_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, equationRGB: GLenum, equationAlpha: GLenum),
    >,
    pub sample_coverage: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, value: GLclampf, invert: GLboolean),
    >,
    pub sample_pass: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub pn_trianglesi_ATI:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub pn_trianglesf_ATI:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLfloat)>,
    pub gen_fences_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, fences: *mut GLuint),
    >,
    pub delete_fences_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, fences: *const GLuint),
    >,
    pub set_fence_APPLE:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, fence: GLuint)>,
    pub is_fence_APPLE:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, fence: GLuint) -> GLboolean>,
    pub test_fence_APPLE:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, fence: GLuint) -> GLboolean>,
    pub finish_fence_APPLE:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, fence: GLuint)>,
    pub test_object_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, object: GLenum, name: GLuint) -> GLboolean,
    >,
    pub finish_object_APPLE:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, object: GLenum, name: GLuint)>,
    pub bind_program_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, program: GLuint),
    >,
    pub delete_programs_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, programs: *const GLuint),
    >,
    pub gen_programs_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, programs: *mut GLuint),
    >,
    pub is_program_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, program: GLuint) -> GLboolean>,
    pub vertex_attrib1s_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLshort)>,
    pub vertex_attrib1f_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLfloat)>,
    pub vertex_attrib1d_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLdouble)>,
    pub vertex_attrib2s_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLshort, y: GLshort),
    >,
    pub vertex_attrib2f_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLfloat, y: GLfloat),
    >,
    pub vertex_attrib2d_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLdouble, y: GLdouble),
    >,
    pub vertex_attrib3s_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub vertex_attrib3f_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub vertex_attrib3d_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub vertex_attrib4s_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLshort,
            y: GLshort,
            z: GLshort,
            w: GLshort,
        ),
    >,
    pub vertex_attrib4f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub vertex_attrib4d_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub vertex_attrib4Nub_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLubyte,
            y: GLubyte,
            z: GLubyte,
            w: GLubyte,
        ),
    >,
    pub vertex_attrib1sv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLshort),
    >,
    pub vertex_attrib1fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLfloat),
    >,
    pub vertex_attrib1dv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attrib2sv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLshort),
    >,
    pub vertex_attrib2fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLfloat),
    >,
    pub vertex_attrib2dv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attrib3sv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLshort),
    >,
    pub vertex_attrib3fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLfloat),
    >,
    pub vertex_attrib3dv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attrib4bv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLbyte),
    >,
    pub vertex_attrib4sv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLshort),
    >,
    pub vertex_attrib4iv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub vertex_attrib4ubv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLubyte),
    >,
    pub vertex_attrib4usv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLushort),
    >,
    pub vertex_attrib4uiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLuint),
    >,
    pub vertex_attrib4fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLfloat),
    >,
    pub vertex_attrib4dv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attrib4Nbv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLbyte),
    >,
    pub vertex_attrib4Nsv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLshort),
    >,
    pub vertex_attrib4Niv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub vertex_attrib4Nubv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLubyte),
    >,
    pub vertex_attrib4Nusv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLushort),
    >,
    pub vertex_attrib4Nuiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLuint),
    >,
    pub vertex_attrib_pointer_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLint,
            type_: GLenum,
            normalized: GLboolean,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub enable_vertex_attrib_array_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint)>,
    pub disable_vertex_attrib_array_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint)>,
    pub get_vertex_attribdv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum, params: *mut GLdouble),
    >,
    pub get_vertex_attribfv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_vertex_attribiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_vertex_attrib_pointerv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            pname: GLenum,
            pointer: *mut *mut GLvoid,
        ),
    >,
    pub program_env_parameter4d_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub program_env_parameter4dv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            params: *const GLdouble,
        ),
    >,
    pub program_env_parameter4f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub program_env_parameter4fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            params: *const GLfloat,
        ),
    >,
    pub program_local_parameter4d_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub program_local_parameter4dv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            params: *const GLdouble,
        ),
    >,
    pub program_local_parameter4f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub program_local_parameter4fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            params: *const GLfloat,
        ),
    >,
    pub get_program_env_parameterdv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, params: *mut GLdouble),
    >,
    pub get_program_env_parameterfv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, params: *mut GLfloat),
    >,
    pub get_program_local_parameterdv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, params: *mut GLdouble),
    >,
    pub get_program_local_parameterfv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, params: *mut GLfloat),
    >,
    pub program_string_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            format: GLenum,
            len: GLsizei,
            string: *const GLvoid,
        ),
    >,
    pub get_program_string_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, string: *mut GLvoid),
    >,
    pub get_programiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub enable_vertex_attrib_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum)>,
    pub disable_vertex_attrib_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum)>,
    pub is_vertex_attrib_enabled_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum) -> GLboolean,
    >,
    pub map_vertex_attrib1d_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLuint,
            u1: GLdouble,
            u2: GLdouble,
            stride: GLint,
            order: GLint,
            points: *const GLdouble,
        ),
    >,
    pub map_vertex_attrib1f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLuint,
            u1: GLfloat,
            u2: GLfloat,
            stride: GLint,
            order: GLint,
            points: *const GLfloat,
        ),
    >,
    pub map_vertex_attrib2d_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLuint,
            u1: GLdouble,
            u2: GLdouble,
            ustride: GLint,
            uorder: GLint,
            v1: GLdouble,
            v2: GLdouble,
            vstride: GLint,
            vorder: GLint,
            points: *const GLdouble,
        ),
    >,
    pub map_vertex_attrib2f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLuint,
            u1: GLfloat,
            u2: GLfloat,
            ustride: GLint,
            uorder: GLint,
            v1: GLfloat,
            v2: GLfloat,
            vstride: GLint,
            vorder: GLint,
            points: *const GLfloat,
        ),
    >,
    pub point_parameterf:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLfloat)>,
    pub point_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *const GLfloat),
    >,
    pub point_parameteri:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub point_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *const GLint),
    >,
    pub fog_coordf: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, coord: GLfloat)>,
    pub fog_coordfv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, coord: *const GLfloat)>,
    pub fog_coordd: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, coord: GLdouble)>,
    pub fog_coorddv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, coord: *const GLdouble)>,
    pub fog_coord_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub vertex_array_parameteri_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, param: GLint)>,
    pub bind_vertex_array_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, id: GLuint)>,
    pub delete_vertex_arrays_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, ids: *const GLuint),
    >,
    pub gen_vertex_arrays_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, ids: *mut GLuint)>,
    pub is_vertex_array_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, id: GLuint) -> GLboolean>,
    pub element_pointer_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, type_: GLenum, pointer: *const GLvoid),
    >,
    pub draw_element_array_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, first: GLint, count: GLsizei),
    >,
    pub draw_range_element_array_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            first: GLint,
            count: GLsizei,
        ),
    >,
    pub weightbv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLbyte),
    >,
    pub weightsv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLshort),
    >,
    pub weightiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLint),
    >,
    pub weightfv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLfloat),
    >,
    pub weightdv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLdouble),
    >,
    pub weightubv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLubyte),
    >,
    pub weightusv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLushort),
    >,
    pub weightuiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, size: GLint, weights: *const GLuint),
    >,
    pub weight_pointer_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub vertex_blend_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, count: GLint)>,
    pub multi_draw_arrays: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            first: *const GLint,
            count: *const GLsizei,
            drawcount: GLsizei,
        ),
    >,
    pub multi_draw_elements: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            count: *const GLsizei,
            type_: GLenum,
            indices: *const *const GLvoid,
            drawcount: GLsizei,
        ),
    >,
    pub window_pos2d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble)>,
    pub window_pos2dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub window_pos2f:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat)>,
    pub window_pos2fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub window_pos2i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint)>,
    pub window_pos2iv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub window_pos2s:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort)>,
    pub window_pos2sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub window_pos3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub window_pos3dv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLdouble)>,
    pub window_pos3f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLfloat, y: GLfloat, z: GLfloat),
    >,
    pub window_pos3fv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLfloat)>,
    pub window_pos3i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, x: GLint, y: GLint, z: GLint)>,
    pub window_pos3iv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLint)>,
    pub window_pos3s: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, x: GLshort, y: GLshort, z: GLshort),
    >,
    pub window_pos3sv:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, v: *const GLshort)>,
    pub active_stencil_face_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, face: GLenum)>,
    pub stencil_op_separate_ATI: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            face: GLenum,
            sfail: GLenum,
            dpfail: GLenum,
            dppass: GLenum,
        ),
    >,
    pub stencil_func_separate_ATI: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            frontfunc: GLenum,
            backfunc: GLenum,
            ref_: GLint,
            mask: GLuint,
        ),
    >,
    pub flush_render_APPLE: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub finish_render_APPLE: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub swap_APPLE: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub delete_object_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, obj: GLhandleARB)>,
    pub get_handle_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum) -> GLhandleARB>,
    pub detach_object_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, containerObj: GLhandleARB, attachedObj: GLhandleARB),
    >,
    pub create_shader_object_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, shaderType: GLenum) -> GLhandleARB,
    >,
    pub shader_source_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            shaderObj: GLhandleARB,
            count: GLsizei,
            string: *const *const GLcharARB,
            length: *const GLint,
        ),
    >,
    pub compile_shader_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, shaderObj: GLhandleARB)>,
    pub create_program_object_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext) -> GLhandleARB>,
    pub attach_object_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, containerObj: GLhandleARB, obj: GLhandleARB),
    >,
    pub link_program_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, programObj: GLhandleARB)>,
    pub use_program_object_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, programObj: GLhandleARB)>,
    pub validate_program_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, programObj: GLhandleARB)>,
    pub uniform1f_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLfloat)>,
    pub uniform2f_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLfloat, v1: GLfloat),
    >,
    pub uniform3f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            v0: GLfloat,
            v1: GLfloat,
            v2: GLfloat,
        ),
    >,
    pub uniform4f_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            v0: GLfloat,
            v1: GLfloat,
            v2: GLfloat,
            v3: GLfloat,
        ),
    >,
    pub uniform1i_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLint)>,
    pub uniform2i_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLint, v1: GLint),
    >,
    pub uniform3i_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLint, v1: GLint, v2: GLint),
    >,
    pub uniform4i_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            v0: GLint,
            v1: GLint,
            v2: GLint,
            v3: GLint,
        ),
    >,
    pub uniform1fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub uniform2fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub uniform3fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub uniform4fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub uniform1iv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub uniform2iv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub uniform3iv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub uniform4iv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, count: GLsizei, value: *const GLint),
    >,
    pub uniform_matrix2fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix3fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix4fv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub get_object_parameterfv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            obj: GLhandleARB,
            pname: GLenum,
            params: *mut GLfloat,
        ),
    >,
    pub get_object_parameteriv_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, obj: GLhandleARB, pname: GLenum, params: *mut GLint),
    >,
    pub get_info_log_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            obj: GLhandleARB,
            maxLength: GLsizei,
            length: *mut GLsizei,
            infoLog: *mut GLcharARB,
        ),
    >,
    pub get_attached_objects_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            containerObj: GLhandleARB,
            maxCount: GLsizei,
            count: *mut GLsizei,
            obj: *mut GLhandleARB,
        ),
    >,
    pub get_uniform_location_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            name: *const GLcharARB,
        ) -> GLint,
    >,
    pub get_active_uniform_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            index: GLuint,
            maxLength: GLsizei,
            length: *mut GLsizei,
            size: *mut GLint,
            type_: *mut GLenum,
            name: *mut GLcharARB,
        ),
    >,
    pub get_uniformfv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            location: GLint,
            params: *mut GLfloat,
        ),
    >,
    pub get_uniformiv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            location: GLint,
            params: *mut GLint,
        ),
    >,
    pub get_shader_source_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            obj: GLhandleARB,
            maxLength: GLsizei,
            length: *mut GLsizei,
            source: *mut GLcharARB,
        ),
    >,
    pub bind_attrib_location_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            index: GLuint,
            name: *const GLcharARB,
        ),
    >,
    pub get_active_attrib_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            index: GLuint,
            maxLength: GLsizei,
            length: *mut GLsizei,
            size: *mut GLint,
            type_: *mut GLenum,
            name: *mut GLcharARB,
        ),
    >,
    pub get_attrib_location_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            programObj: GLhandleARB,
            name: *const GLcharARB,
        ) -> GLint,
    >,
    pub clamp_color_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, clamp: GLenum)>,
    pub gen_queries:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, ids: *mut GLuint)>,
    pub delete_queries: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, ids: *const GLuint),
    >,
    pub is_query:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, id: GLuint) -> GLboolean>,
    pub begin_query:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, id: GLuint)>,
    pub end_query: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum)>,
    pub get_queryiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_query_objectiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, id: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_query_objectuiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, id: GLuint, pname: GLenum, params: *mut GLuint),
    >,
    pub bind_buffer: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, buffer: GLuint),
    >,
    pub delete_buffers: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, buffers: *const GLuint),
    >,
    pub gen_buffers: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, buffers: *mut GLuint),
    >,
    pub is_buffer:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, buffer: GLuint) -> GLboolean>,
    pub buffer_data: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            size: GLsizeiptrARB,
            data: *const GLvoid,
            usage: GLenum,
        ),
    >,
    pub buffer_sub_data: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            offset: GLintptrARB,
            size: GLsizeiptrARB,
            data: *const GLvoid,
        ),
    >,
    pub get_buffer_sub_data: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            offset: GLintptrARB,
            size: GLsizeiptrARB,
            data: *mut GLvoid,
        ),
    >,
    pub map_buffer: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, access: GLenum) -> *mut GLvoid,
    >,
    pub unmap_buffer:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum) -> GLboolean>,
    pub get_buffer_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_buffer_pointerv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            pname: GLenum,
            params: *mut *mut GLvoid,
        ),
    >,
    pub depth_bounds_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, zmin: GLclampd, zmax: GLclampd),
    >,
    pub draw_buffers_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, bufs: *const GLenum),
    >,
    pub is_shader:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, shader: GLuint) -> GLboolean>,
    pub is_program:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, program: GLuint) -> GLboolean>,
    pub get_shaderiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, shader: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_programiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_shader_info_log: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            shader: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            infoLog: *mut GLchar,
        ),
    >,
    pub get_program_info_log: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            infoLog: *mut GLchar,
        ),
    >,
    pub stencil_func_separate: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            face: GLenum,
            func: GLenum,
            ref_: GLint,
            mask: GLuint,
        ),
    >,
    pub stencil_mask_separate:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, face: GLenum, mask: GLuint)>,
    pub multi_draw_element_array_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            first: *const GLint,
            count: *const GLsizei,
            primcount: GLsizei,
        ),
    >,
    pub multi_draw_range_element_array_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            first: *const GLint,
            count: *const GLsizei,
            primcount: GLsizei,
        ),
    >,
    pub is_renderbuffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, renderbuffer: GLuint) -> GLboolean,
    >,
    pub bind_renderbuffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, renderbuffer: GLuint),
    >,
    pub delete_renderbuffers_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, renderbuffers: *const GLuint),
    >,
    pub gen_renderbuffers_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, renderbuffers: *mut GLuint),
    >,
    pub renderbuffer_storage_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub get_renderbuffer_parameteriv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub is_framebuffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, framebuffer: GLuint) -> GLboolean,
    >,
    pub bind_framebuffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, framebuffer: GLuint),
    >,
    pub delete_framebuffers_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, framebuffers: *const GLuint),
    >,
    pub gen_framebuffers_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, framebuffers: *mut GLuint),
    >,
    pub check_framebuffer_status_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum) -> GLenum>,
    pub framebuffer_texture1D_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            textarget: GLenum,
            texture: GLuint,
            level: GLint,
        ),
    >,
    pub framebuffer_texture2D_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            textarget: GLenum,
            texture: GLuint,
            level: GLint,
        ),
    >,
    pub framebuffer_texture3D_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            textarget: GLenum,
            texture: GLuint,
            level: GLint,
            zoffset: GLint,
        ),
    >,
    pub framebuffer_renderbuffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            renderbuffertarget: GLenum,
            renderbuffer: GLuint,
        ),
    >,
    pub get_framebuffer_attachment_parameteriv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub generate_mipmap_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum)>,
    pub buffer_parameteri_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, param: GLint),
    >,
    pub flush_mapped_buffer_range_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, offset: GLintptr, size: GLsizeiptr),
    >,
    pub program_env_parameters4fv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            count: GLsizei,
            params: *const GLfloat,
        ),
    >,
    pub program_local_parameters4fv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            count: GLsizei,
            params: *const GLfloat,
        ),
    >,
    pub object_purgeable_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            objectType: GLenum,
            name: GLuint,
            option: GLenum,
        ) -> GLenum,
    >,
    pub object_unpurgeable_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            objectType: GLenum,
            name: GLuint,
            option: GLenum,
        ) -> GLenum,
    >,
    pub get_object_parameteriv_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            objectType: GLenum,
            name: GLuint,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub program_parameteri_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program_name: GLuint, pname: GLenum, value: GLint),
    >,
    pub framebuffer_texture_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            texture: GLuint,
            level: GLint,
        ),
    >,
    pub framebuffer_texture_layer_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            texture: GLuint,
            level: GLint,
            layer: GLint,
        ),
    >,
    pub framebuffer_texture_face_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            attachment: GLenum,
            texture: GLuint,
            level: GLint,
            face: GLenum,
        ),
    >,
    pub bind_buffer_range_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            buffer: GLuint,
            offset: GLintptr,
            size: GLsizeiptr,
        ),
    >,
    pub bind_buffer_offset_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            buffer: GLuint,
            offset: GLintptr,
        ),
    >,
    pub bind_buffer_base_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, buffer: GLuint),
    >,
    pub begin_transform_feedback_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, primitiveMode: GLenum)>,
    pub end_transform_feedback_EXT: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub transform_feedback_varyings_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            count: GLsizei,
            varyings: *const *const GLchar,
            bufferMode: GLenum,
        ),
    >,
    pub get_transform_feedback_varying_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            index: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            size: *mut GLsizei,
            type_: *mut GLenum,
            name: *mut GLchar,
        ),
    >,
    pub get_integer_indexedv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, param: GLenum, index: GLuint, values: *mut GLint),
    >,
    pub get_boolean_indexedv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, param: GLenum, index: GLuint, values: *mut GLboolean),
    >,
    pub uniform_buffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint, buffer: GLuint),
    >,
    pub get_uniform_buffer_size_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint) -> GLint,
    >,
    pub get_uniform_buffer_offset_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint) -> GLintptr,
    >,
    pub clear_colorIi_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, r: GLint, g: GLint, b: GLint, a: GLint),
    >,
    pub clear_colorIui_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, r: GLuint, g: GLuint, b: GLuint, a: GLuint),
    >,
    pub tex_parameterIiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub tex_parameterIuiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLuint),
    >,
    pub get_tex_parameterIiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint),
    >,
    pub get_tex_parameterIuiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLuint),
    >,
    pub vertex_attribI1i_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLint)>,
    pub vertex_attribI2i_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLint, y: GLint),
    >,
    pub vertex_attribI3i_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLint, y: GLint, z: GLint),
    >,
    pub vertex_attribI4i_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLint,
            y: GLint,
            z: GLint,
            w: GLint,
        ),
    >,
    pub vertex_attribI1ui_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLuint)>,
    pub vertex_attribI2ui_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLuint, y: GLuint),
    >,
    pub vertex_attribI3ui_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLuint, y: GLuint, z: GLuint),
    >,
    pub vertex_attribI4ui_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLuint,
            y: GLuint,
            z: GLuint,
            w: GLuint,
        ),
    >,
    pub vertex_attribI1iv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub vertex_attribI2iv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub vertex_attribI3iv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub vertex_attribI4iv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub vertex_attribI1uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLuint),
    >,
    pub vertex_attribI2uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLuint),
    >,
    pub vertex_attribI3uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLuint),
    >,
    pub vertex_attribI4uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLuint),
    >,
    pub vertex_attribI4bv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLbyte),
    >,
    pub vertex_attribI4sv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLshort),
    >,
    pub vertex_attribI4ubv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLubyte),
    >,
    pub vertex_attribI4usv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLushort),
    >,
    pub vertex_attribI_pointer_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub get_vertex_attribIiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_vertex_attribIuiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum, params: *mut GLuint),
    >,
    pub uniform1ui_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLuint)>,
    pub uniform2ui_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLuint, v1: GLuint),
    >,
    pub uniform3ui_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint),
    >,
    pub uniform4ui_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            v0: GLuint,
            v1: GLuint,
            v2: GLuint,
            v3: GLuint,
        ),
    >,
    pub uniform1uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub uniform2uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub uniform3uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub uniform4uiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub get_uniformuiv_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            params: *mut GLuint,
        ),
    >,
    pub bind_frag_data_location_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            colorNumber: GLuint,
            name: *const GLchar,
        ),
    >,
    pub get_frag_data_location_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, name: *const GLchar) -> GLint,
    >,
    pub color_mask_indexed_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            r: GLboolean,
            g: GLboolean,
            b: GLboolean,
            a: GLboolean,
        ),
    >,
    pub enable_indexed_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint)>,
    pub disable_indexed_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint)>,
    pub is_enabled_indexed_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint) -> GLboolean,
    >,
    pub uniform_matrix2x3fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix3x2fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix2x4fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix4x2fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix3x4fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub uniform_matrix4x3fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub blit_framebuffer_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            srcX0: GLint,
            srcY0: GLint,
            srcX1: GLint,
            srcY1: GLint,
            dstX0: GLint,
            dstY0: GLint,
            dstX1: GLint,
            dstY1: GLint,
            mask: GLbitfield,
            filter: GLenum,
        ),
    >,
    pub renderbuffer_storage_multisample_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            samples: GLsizei,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub begin_conditional_render_NV:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, id: GLuint, mode: GLenum)>,
    pub end_conditional_render_NV: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub get_attached_shaders: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            maxCount: GLsizei,
            count: *mut GLsizei,
            shaders: *mut GLuint,
        ),
    >,
    pub provoking_vertex_EXT:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum)>,
    pub vertex_attrib_divisor: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, divisor: GLuint),
    >,
    pub draw_arrays_instanced: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            first: GLint,
            count: GLsizei,
            instancecount: GLsizei,
        ),
    >,
    pub draw_elements_instanced: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
            instancecount: GLsizei,
        ),
    >,
    pub draw_elements_base_vertex: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
            base_vertex: GLint,
        ),
    >,
    pub draw_range_elements_base_vertex: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            start: GLuint,
            end: GLuint,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
            base_vertex: GLint,
        ),
    >,
    pub draw_elements_instanced_base_vertex: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            count: GLsizei,
            type_: GLenum,
            indices: *const GLvoid,
            instancecount: GLsizei,
            base_vertex: GLint,
        ),
    >,
    pub multi_draw_elements_base_vertex: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            count: *const GLsizei,
            type_: GLenum,
            indices: *const *const GLvoid,
            drawcount: GLsizei,
            base_vertex: *const GLint,
        ),
    >,
    pub bind_vertex_array_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, array: GLuint)>,
    pub delete_vertex_arrays_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, arrays: *const GLuint),
    >,
    pub gen_vertex_arrays_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, arrays: *mut GLuint),
    >,
    pub is_vertex_array_ARB:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, array: GLuint) -> GLboolean>,
    pub point_size_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const GLvoid,
        ),
    >,
    pub vertex_point_sizef_APPLE:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, size: GLfloat)>,
    pub clear_bufferiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            buffer: GLenum,
            drawbuffer: GLint,
            value: *const GLint,
        ),
    >,
    pub clear_bufferuiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            buffer: GLenum,
            drawbuffer: GLint,
            value: *const GLuint,
        ),
    >,
    pub clear_bufferfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            buffer: GLenum,
            drawbuffer: GLint,
            value: *const GLfloat,
        ),
    >,
    pub clear_bufferfi: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            buffer: GLenum,
            drawbuffer: GLint,
            depth: GLfloat,
            stencil: GLint,
        ),
    >,
    pub get_stringi: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, name: GLenum, index: GLuint) -> *const GLubyte,
    >,
    pub fence_sync: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, condition: GLenum, flags: GLbitfield) -> GLsync,
    >,
    pub is_sync:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, sync: GLsync) -> GLboolean>,
    pub delete_sync: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, sync: GLsync)>,
    pub client_wait_sync: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            sync: GLsync,
            flags: GLbitfield,
            timeout: GLuint64,
        ) -> GLenum,
    >,
    pub wait_sync: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sync: GLsync, flags: GLbitfield, timeout: GLuint64),
    >,
    pub get_integer64v_sync: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, params: *mut GLint64),
    >,
    pub get_synciv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            sync: GLsync,
            pname: GLenum,
            bufSize: GLsizei,
            length: *mut GLsizei,
            values: *mut GLint,
        ),
    >,
    pub tex_image2D_multisample: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            samples: GLsizei,
            internalformat: GLint,
            width: GLsizei,
            height: GLsizei,
            fixedsamplelocations: GLboolean,
        ),
    >,
    pub tex_image3D_multisample: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            samples: GLsizei,
            internalformat: GLint,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
            fixedsamplelocations: GLboolean,
        ),
    >,
    pub get_multisamplefv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, index: GLuint, val: *mut GLfloat),
    >,
    pub sample_maski: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, mask: GLbitfield),
    >,
    pub tex_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            buffer: GLuint,
        ),
    >,
    pub copy_buffer_sub_data: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            readtarget: GLenum,
            writetarget: GLenum,
            readoffset: GLintptr,
            writeoffset: GLintptr,
            size: GLsizeiptr,
        ),
    >,
    pub primitive_restart_index:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint)>,
    pub get_query_objecti64v: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, id: GLuint, pname: GLenum, params: *mut GLint64EXT),
    >,
    pub get_query_objectui64v: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, id: GLuint, pname: GLenum, params: *mut GLuint64EXT),
    >,
    pub map_buffer_range: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            offset: GLintptr,
            length: GLsizeiptr,
            access: GLenum,
        ) -> *mut GLvoid,
    >,
    pub flush_mapped_buffer_range: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, offset: GLintptr, length: GLsizeiptr),
    >,
    pub query_counter:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, id: GLuint, target: GLenum)>,
    pub get_integer64i_v: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, data: *mut GLint64),
    >,
    pub get_buffer_parameteri64v: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, pname: GLenum, params: *mut GLint64),
    >,
    pub gen_samplers: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, count: GLsizei, samplers: *mut GLuint),
    >,
    pub delete_samplers: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, count: GLsizei, samplers: *const GLuint),
    >,
    pub is_sampler:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint) -> GLboolean>,
    pub bind_sampler:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, unit: GLuint, sampler: GLuint)>,
    pub sampler_parameteri: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, param: GLint),
    >,
    pub sampler_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, param: *const GLint),
    >,
    pub sampler_parameterf: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, param: GLfloat),
    >,
    pub sampler_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            sampler: GLuint,
            pname: GLenum,
            param: *const GLfloat,
        ),
    >,
    pub sampler_parameterIiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, param: *const GLint),
    >,
    pub sampler_parameterIuiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, param: *const GLuint),
    >,
    pub get_sampler_parameteriv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_sampler_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, params: *mut GLfloat),
    >,
    pub get_sampler_parameterIiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub get_sampler_parameterIuiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, sampler: GLuint, pname: GLenum, params: *mut GLuint),
    >,
    pub label_object_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            object: GLuint,
            length: GLsizei,
            label: *const GLchar,
        ),
    >,
    pub get_object_label_EXT: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            object: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            label: *mut GLchar,
        ),
    >,
    pub insert_event_marker_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, length: GLsizei, marker: *const GLchar),
    >,
    pub push_group_marker_EXT: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, length: GLsizei, marker: *const GLchar),
    >,
    pub pop_group_marker_EXT: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub use_program_stages: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            pipeline: GLuint,
            stages: GLbitfield,
            program: GLuint,
        ),
    >,
    pub active_shader_program: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pipeline: GLuint, program: GLuint),
    >,
    pub create_shader_programv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            count: GLsizei,
            strings: *const *const GLchar,
        ) -> GLuint,
    >,
    pub bind_program_pipeline:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pipeline: GLuint)>,
    pub delete_program_pipelines: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, pipelines: *const GLuint),
    >,
    pub gen_program_pipelines: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, pipelines: *mut GLuint),
    >,
    pub is_program_pipeline:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pipeline: GLuint) -> GLboolean>,
    pub get_program_pipelineiv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pipeline: GLuint, pname: GLenum, params: *mut GLint),
    >,
    pub validate_program_pipeline:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pipeline: GLuint)>,
    pub get_program_pipeline_info_log: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            pipeline: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            infoLog: *mut GLchar,
        ),
    >,
    pub program_uniform1i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint, x: GLint),
    >,
    pub program_uniform2i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint, x: GLint, y: GLint),
    >,
    pub program_uniform3i: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLint,
            y: GLint,
            z: GLint,
        ),
    >,
    pub program_uniform4i: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLint,
            y: GLint,
            z: GLint,
            w: GLint,
        ),
    >,
    pub program_uniform1f: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint, x: GLfloat),
    >,
    pub program_uniform2f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLfloat,
            y: GLfloat,
        ),
    >,
    pub program_uniform3f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
        ),
    >,
    pub program_uniform4f: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLfloat,
            y: GLfloat,
            z: GLfloat,
            w: GLfloat,
        ),
    >,
    pub program_uniform1iv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLint,
        ),
    >,
    pub program_uniform2iv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLint,
        ),
    >,
    pub program_uniform3iv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLint,
        ),
    >,
    pub program_uniform4iv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLint,
        ),
    >,
    pub program_uniform1fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform2fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform3fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform4fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix2fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix3fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix4fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform1ui: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint, x: GLuint),
    >,
    pub program_uniform2ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLuint,
            y: GLuint,
        ),
    >,
    pub program_uniform3ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLuint,
            y: GLuint,
            z: GLuint,
        ),
    >,
    pub program_uniform4ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLuint,
            y: GLuint,
            z: GLuint,
            w: GLuint,
        ),
    >,
    pub program_uniform1uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub program_uniform2uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub program_uniform3uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub program_uniform4uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLuint,
        ),
    >,
    pub program_uniform_matrix2x3fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix3x2fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix2x4fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix4x2fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix3x4fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub program_uniform_matrix4x3fv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLfloat,
        ),
    >,
    pub bind_frag_data_location_indexed: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            colorNumber: GLuint,
            index: GLuint,
            name: *const GLchar,
        ),
    >,
    pub get_frag_data_index: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, name: *const GLchar) -> GLint,
    >,
    pub blend_func_i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, buf: GLuint, src: GLenum, dst: GLenum),
    >,
    pub blend_func_separate_i: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            buf: GLuint,
            srcRGB: GLenum,
            dstRGB: GLenum,
            srcAlpha: GLenum,
            dstAlpha: GLenum,
        ),
    >,
    pub blend_equation_i:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, buf: GLuint, mode: GLenum)>,
    pub blend_equation_separate_i: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum),
    >,
    pub named_string_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            type_: GLenum,
            namelen: GLint,
            name: *const GLchar,
            stringlen: GLint,
            string: *const GLchar,
        ),
    >,
    pub delete_named_string_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, namelen: GLint, name: *const GLchar),
    >,
    pub compile_shader_include_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            shader: GLuint,
            count: GLsizei,
            path: *const *const GLchar,
            length: *const GLint,
        ),
    >,
    pub is_named_string_ARB: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, namelen: GLint, name: *const GLchar) -> GLboolean,
    >,
    pub get_named_string_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            namelen: GLint,
            name: *const GLchar,
            bufSize: GLsizei,
            stringlen: *mut GLint,
            string: *mut GLchar,
        ),
    >,
    pub get_named_string_iv_ARB: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            namelen: GLint,
            name: *const GLchar,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub release_shader_compiler: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub shader_binary: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            n: GLint,
            shaders: *mut GLuint,
            binaryformat: GLenum,
            binary: *const GLvoid,
            length: GLint,
        ),
    >,
    pub get_shader_precision_format: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            shadertype: GLenum,
            precisiontype: GLenum,
            range: *mut GLint,
            precision: *mut GLint,
        ),
    >,
    pub depth_rangef: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, zNear: GLclampf, zFar: GLclampf),
    >,
    pub clear_depthf: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, depth: GLclampf)>,
    pub vertex_attribP1ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: GLuint,
        ),
    >,
    pub vertex_attribP2ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: GLuint,
        ),
    >,
    pub vertex_attribP3ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: GLuint,
        ),
    >,
    pub vertex_attribP4ui: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: GLuint,
        ),
    >,
    pub vertex_attribP1uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: *const GLuint,
        ),
    >,
    pub vertex_attribP2uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: *const GLuint,
        ),
    >,
    pub vertex_attribP3uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: *const GLuint,
        ),
    >,
    pub vertex_attribP4uiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            type_: GLenum,
            normalized: GLboolean,
            value: *const GLuint,
        ),
    >,
    pub get_program_binary: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            bufSize: GLsizei,
            length: *mut GLsizei,
            binaryFormat: *mut GLenum,
            binary: *mut GLvoid,
        ),
    >,
    pub program_binary: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            binaryFormat: GLenum,
            binary: *const GLvoid,
            length: GLsizei,
        ),
    >,
    pub min_sample_shading:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, value: GLclampf)>,
    pub viewport_arrayv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, first: GLuint, count: GLsizei, v: *const GLfloat),
    >,
    pub viewport_indexedf: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLfloat,
            y: GLfloat,
            w: GLfloat,
            h: GLfloat,
        ),
    >,
    pub viewport_indexedfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLfloat),
    >,
    pub scissor_arrayv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, first: GLuint, count: GLsizei, v: *const GLint),
    >,
    pub scissor_indexed: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            left: GLint,
            bottom: GLint,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub scissor_indexedv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLint),
    >,
    pub depth_range_arrayv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, first: GLuint, count: GLsizei, v: *const GLclampd),
    >,
    pub depth_range_indexed: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, n: GLclampd, f: GLclampd),
    >,
    pub get_floati_v: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, data: *mut GLfloat),
    >,
    pub get_doublei_v: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, data: *mut GLdouble),
    >,
    pub draw_arrays_indirect: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, indirect: *const GLvoid),
    >,
    pub draw_elements_indirect: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, type_: GLenum, indirect: *const GLvoid),
    >,
    pub patch_parameteri:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, value: GLint)>,
    pub patch_parameterfv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, pname: GLenum, values: *const GLfloat),
    >,
    pub bind_transform_feedback:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, name: GLuint)>,
    pub gen_transform_feedbacks:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, ids: *mut GLuint)>,
    pub delete_transform_feedbacks: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, n: GLsizei, ids: *const GLuint),
    >,
    pub pause_transform_feedback: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub resume_transform_feedback: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub is_transform_feedback:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, name: GLuint) -> GLboolean>,
    pub draw_transform_feedback:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, name: GLuint)>,
    pub begin_query_indexed: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint, id: GLuint),
    >,
    pub end_query_indexed:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, target: GLenum, index: GLuint)>,
    pub get_query_indexediv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            index: GLuint,
            pname: GLenum,
            params: *mut GLint,
        ),
    >,
    pub draw_transform_feedback_stream: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, mode: GLenum, name: GLuint, stream: GLuint),
    >,
    pub program_uniform1d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, program: GLuint, location: GLint, x: GLdouble),
    >,
    pub program_uniform2d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLdouble,
            y: GLdouble,
        ),
    >,
    pub program_uniform3d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
        ),
    >,
    pub program_uniform4d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub program_uniform1dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix2x3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix3x2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix2x4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix4x2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix3x4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub program_uniform_matrix4x3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform1d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, location: GLint, x: GLdouble)>,
    pub uniform2d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, location: GLint, x: GLdouble, y: GLdouble),
    >,
    pub uniform3d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
        ),
    >,
    pub uniform4d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub uniform1dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub uniform2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub uniform3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub uniform4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix2x3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix3x2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix2x4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix4x2dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix3x4dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub uniform_matrix4x3dv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            location: GLint,
            count: GLsizei,
            transpose: GLboolean,
            value: *const GLdouble,
        ),
    >,
    pub get_uniformdv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program_obj: GLuint,
            location: GLint,
            params: *mut GLdouble,
        ),
    >,
    pub vertex_attribl1d:
        ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLdouble)>,
    pub vertex_attribl2d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLdouble, y: GLdouble),
    >,
    pub vertex_attribl3d: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble),
    >,
    pub vertex_attribl4d: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            x: GLdouble,
            y: GLdouble,
            z: GLdouble,
            w: GLdouble,
        ),
    >,
    pub vertex_attribl1dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attribl2dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attribl3dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attribl4dv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, v: *const GLdouble),
    >,
    pub vertex_attrib_lpointer: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            index: GLuint,
            size: GLint,
            type_: GLenum,
            stride: GLsizei,
            pointer: *const ::std::os::raw::c_void,
        ),
    >,
    pub get_vertex_attrib_ldv: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, index: GLuint, pname: GLenum, params: *mut GLdouble),
    >,
    pub get_subroutine_uniform_location: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            shadertype: GLenum,
            name: *const GLchar,
        ) -> GLint,
    >,
    pub get_subroutine_index: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            shadertype: GLenum,
            name: *const GLchar,
        ) -> GLuint,
    >,
    pub get_active_subroutine_uniformiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            shadertype: GLenum,
            index: GLuint,
            pname: GLenum,
            values: *mut GLint,
        ),
    >,
    pub get_active_subroutine_uniform_name: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            shadertype: GLenum,
            index: GLuint,
            bufsize: GLsizei,
            length: *mut GLsizei,
            name: *mut GLchar,
        ),
    >,
    pub get_active_subroutine_name: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            shadertype: GLenum,
            index: GLuint,
            bufsize: GLsizei,
            length: *mut GLsizei,
            name: *mut GLchar,
        ),
    >,
    pub uniform_subroutinesuiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            shadertype: GLenum,
            count: GLsizei,
            indices: *const GLuint,
        ),
    >,
    pub get_uniform_subroutineuiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            shadertype: GLenum,
            location: GLint,
            params: *mut GLuint,
        ),
    >,
    pub get_program_stageiv: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            program: GLuint,
            shadertype: GLenum,
            pname: GLenum,
            values: *mut GLint,
        ),
    >,
    pub get_internal_formativ: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            internalformat: GLenum,
            pname: GLenum,
            bufSize: GLsizei,
            params: *mut GLint,
        ),
    >,
    pub tex_storage1D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            levels: GLsizei,
            internalformat: GLenum,
            width: GLsizei,
        ),
    >,
    pub tex_storage2D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            levels: GLsizei,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
        ),
    >,
    pub tex_storage3D: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            target: GLenum,
            levels: GLsizei,
            internalformat: GLenum,
            width: GLsizei,
            height: GLsizei,
            depth: GLsizei,
        ),
    >,
    pub label_object_with_responsible_process_APPLE: ::std::option::Option<
        unsafe extern "C" fn(ctx: GLIContext, type_: GLenum, name: GLuint, pid: GLint),
    >,
    pub texture_barrier_NV: ::std::option::Option<unsafe extern "C" fn(ctx: GLIContext)>,
    pub multi_draw_elements_indirect_APPLE: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: GLIContext,
            mode: GLenum,
            type_: GLenum,
            indirect: *const GLvoid,
            drawcount: GLsizei,
            stride: GLsizei,
        ),
    >,
}
pub type GLIFunctionDispatch = __GLIFunctionDispatchRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLPrivateObject {
    _unused: [u8; 0],
}
pub type CGLPrivateObj = *mut _CGLPrivateObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CGLContextObject {
    pub rend: GLIContext,
    pub disp: GLIFunctionDispatch,
    pub priv_: CGLPrivateObj,
    pub stak: *mut ::std::os::raw::c_void,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigacts {
    pub _address: u8,
}
