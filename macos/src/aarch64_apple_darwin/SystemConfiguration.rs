/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
use objc::{self, class, msg_send, sel, sel_impl};
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const COPYFILE_STATE_SRC_FD: u32 = 1;
pub const COPYFILE_STATE_SRC_FILENAME: u32 = 2;
pub const COPYFILE_STATE_DST_FD: u32 = 3;
pub const COPYFILE_STATE_DST_FILENAME: u32 = 4;
pub const COPYFILE_STATE_QUARANTINE: u32 = 5;
pub const COPYFILE_STATE_STATUS_CB: u32 = 6;
pub const COPYFILE_STATE_STATUS_CTX: u32 = 7;
pub const COPYFILE_STATE_COPIED: u32 = 8;
pub const COPYFILE_STATE_XATTRNAME: u32 = 9;
pub const COPYFILE_STATE_WAS_CLONED: u32 = 10;
pub const COPYFILE_STATE_SRC_BSIZE: u32 = 11;
pub const COPYFILE_STATE_DST_BSIZE: u32 = 12;
pub const COPYFILE_STATE_BSIZE: u32 = 13;
pub const COPYFILE_DISABLE_VAR: &[u8; 17usize] = b"COPYFILE_DISABLE\0";
pub const COPYFILE_ACL: u32 = 1;
pub const COPYFILE_STAT: u32 = 2;
pub const COPYFILE_XATTR: u32 = 4;
pub const COPYFILE_DATA: u32 = 8;
pub const COPYFILE_SECURITY: u32 = 3;
pub const COPYFILE_METADATA: u32 = 7;
pub const COPYFILE_ALL: u32 = 15;
pub const COPYFILE_RECURSIVE: u32 = 32768;
pub const COPYFILE_CHECK: u32 = 65536;
pub const COPYFILE_EXCL: u32 = 131072;
pub const COPYFILE_NOFOLLOW_SRC: u32 = 262144;
pub const COPYFILE_NOFOLLOW_DST: u32 = 524288;
pub const COPYFILE_MOVE: u32 = 1048576;
pub const COPYFILE_UNLINK: u32 = 2097152;
pub const COPYFILE_NOFOLLOW: u32 = 786432;
pub const COPYFILE_PACK: u32 = 4194304;
pub const COPYFILE_UNPACK: u32 = 8388608;
pub const COPYFILE_CLONE: u32 = 16777216;
pub const COPYFILE_CLONE_FORCE: u32 = 33554432;
pub const COPYFILE_RUN_IN_PLACE: u32 = 67108864;
pub const COPYFILE_DATA_SPARSE: u32 = 134217728;
pub const COPYFILE_PRESERVE_DST_TRACKED: u32 = 268435456;
pub const COPYFILE_VERBOSE: u32 = 1073741824;
pub const COPYFILE_RECURSE_ERROR: u32 = 0;
pub const COPYFILE_RECURSE_FILE: u32 = 1;
pub const COPYFILE_RECURSE_DIR: u32 = 2;
pub const COPYFILE_RECURSE_DIR_CLEANUP: u32 = 3;
pub const COPYFILE_COPY_DATA: u32 = 4;
pub const COPYFILE_COPY_XATTR: u32 = 5;
pub const COPYFILE_START: u32 = 1;
pub const COPYFILE_FINISH: u32 = 2;
pub const COPYFILE_ERR: u32 = 3;
pub const COPYFILE_PROGRESS: u32 = 4;
pub const COPYFILE_CONTINUE: u32 = 0;
pub const COPYFILE_SKIP: u32 = 1;
pub const COPYFILE_QUIT: u32 = 2;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FE_INEXACT: u32 = 16;
pub const FE_UNDERFLOW: u32 = 8;
pub const FE_OVERFLOW: u32 = 4;
pub const FE_DIVBYZERO: u32 = 2;
pub const FE_INVALID: u32 = 1;
pub const FE_FLUSHTOZERO: u32 = 128;
pub const FE_ALL_EXCEPT: u32 = 159;
pub const FE_TONEAREST: u32 = 0;
pub const FE_UPWARD: u32 = 4194304;
pub const FE_DOWNWARD: u32 = 8388608;
pub const FE_TOWARDZERO: u32 = 12582912;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2usize] = b"j\0";
pub const PRId8: &[u8; 4usize] = b"hhd\0";
pub const PRIi8: &[u8; 4usize] = b"hhi\0";
pub const PRIo8: &[u8; 4usize] = b"hho\0";
pub const PRIu8: &[u8; 4usize] = b"hhu\0";
pub const PRIx8: &[u8; 4usize] = b"hhx\0";
pub const PRIX8: &[u8; 4usize] = b"hhX\0";
pub const PRId16: &[u8; 3usize] = b"hd\0";
pub const PRIi16: &[u8; 3usize] = b"hi\0";
pub const PRIo16: &[u8; 3usize] = b"ho\0";
pub const PRIu16: &[u8; 3usize] = b"hu\0";
pub const PRIx16: &[u8; 3usize] = b"hx\0";
pub const PRIX16: &[u8; 3usize] = b"hX\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRId64: &[u8; 4usize] = b"lld\0";
pub const PRIi64: &[u8; 4usize] = b"lli\0";
pub const PRIo64: &[u8; 4usize] = b"llo\0";
pub const PRIu64: &[u8; 4usize] = b"llu\0";
pub const PRIx64: &[u8; 4usize] = b"llx\0";
pub const PRIX64: &[u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &[u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &[u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &[u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &[u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &[u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &[u8; 2usize] = b"d\0";
pub const PRIiFAST32: &[u8; 2usize] = b"i\0";
pub const PRIoFAST32: &[u8; 2usize] = b"o\0";
pub const PRIuFAST32: &[u8; 2usize] = b"u\0";
pub const PRIxFAST32: &[u8; 2usize] = b"x\0";
pub const PRIXFAST32: &[u8; 2usize] = b"X\0";
pub const PRIdFAST64: &[u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &[u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &[u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &[u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &[u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &[u8; 4usize] = b"llX\0";
pub const PRIdPTR: &[u8; 3usize] = b"ld\0";
pub const PRIiPTR: &[u8; 3usize] = b"li\0";
pub const PRIoPTR: &[u8; 3usize] = b"lo\0";
pub const PRIuPTR: &[u8; 3usize] = b"lu\0";
pub const PRIxPTR: &[u8; 3usize] = b"lx\0";
pub const PRIXPTR: &[u8; 3usize] = b"lX\0";
pub const PRIdMAX: &[u8; 3usize] = b"jd\0";
pub const PRIiMAX: &[u8; 3usize] = b"ji\0";
pub const PRIoMAX: &[u8; 3usize] = b"jo\0";
pub const PRIuMAX: &[u8; 3usize] = b"ju\0";
pub const PRIxMAX: &[u8; 3usize] = b"jx\0";
pub const PRIXMAX: &[u8; 3usize] = b"jX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNd64: &[u8; 4usize] = b"lld\0";
pub const SCNi64: &[u8; 4usize] = b"lli\0";
pub const SCNo64: &[u8; 4usize] = b"llo\0";
pub const SCNu64: &[u8; 4usize] = b"llu\0";
pub const SCNx64: &[u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &[u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &[u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &[u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &[u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &[u8; 2usize] = b"d\0";
pub const SCNiFAST32: &[u8; 2usize] = b"i\0";
pub const SCNoFAST32: &[u8; 2usize] = b"o\0";
pub const SCNuFAST32: &[u8; 2usize] = b"u\0";
pub const SCNxFAST32: &[u8; 2usize] = b"x\0";
pub const SCNdFAST64: &[u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &[u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &[u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &[u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &[u8; 4usize] = b"llx\0";
pub const SCNdPTR: &[u8; 3usize] = b"ld\0";
pub const SCNiPTR: &[u8; 3usize] = b"li\0";
pub const SCNoPTR: &[u8; 3usize] = b"lo\0";
pub const SCNuPTR: &[u8; 3usize] = b"lu\0";
pub const SCNxPTR: &[u8; 3usize] = b"lx\0";
pub const SCNdMAX: &[u8; 3usize] = b"jd\0";
pub const SCNiMAX: &[u8; 3usize] = b"ji\0";
pub const SCNoMAX: &[u8; 3usize] = b"jo\0";
pub const SCNuMAX: &[u8; 3usize] = b"ju\0";
pub const SCNxMAX: &[u8; 3usize] = b"jx\0";
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const RPP_ECHO_OFF: u32 = 0;
pub const RPP_ECHO_ON: u32 = 1;
pub const RPP_REQUIRE_TTY: u32 = 2;
pub const RPP_FORCELOWER: u32 = 4;
pub const RPP_FORCEUPPER: u32 = 8;
pub const RPP_SEVENBIT: u32 = 16;
pub const RPP_STDIN: u32 = 32;
pub const _JBLEN: u32 = 48;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const IOCPARM_MASK: u32 = 8191;
pub const IOCPARM_MAX: u32 = 8192;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_RI: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TTYDISC: u32 = 0;
pub const TABLDISC: u32 = 3;
pub const SLIPDISC: u32 = 4;
pub const PPPDISC: u32 = 5;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const _PATH_PWD: &[u8; 5usize] = b"/etc\0";
pub const _PATH_PASSWD: &[u8; 12usize] = b"/etc/passwd\0";
pub const _PASSWD: &[u8; 7usize] = b"passwd\0";
pub const _PATH_MASTERPASSWD: &[u8; 19usize] = b"/etc/master.passwd\0";
pub const _PATH_MASTERPASSWD_LOCK: &[u8; 10usize] = b"/etc/ptmp\0";
pub const _MASTERPASSWD: &[u8; 14usize] = b"master.passwd\0";
pub const _PATH_MP_DB: &[u8; 12usize] = b"/etc/pwd.db\0";
pub const _MP_DB: &[u8; 7usize] = b"pwd.db\0";
pub const _PATH_SMP_DB: &[u8; 13usize] = b"/etc/spwd.db\0";
pub const _SMP_DB: &[u8; 8usize] = b"spwd.db\0";
pub const _PATH_PWD_MKDB: &[u8; 19usize] = b"/usr/sbin/pwd_mkdb\0";
pub const _PW_KEYBYNAME: u8 = 49u8;
pub const _PW_KEYBYNUM: u8 = 50u8;
pub const _PW_KEYBYUID: u8 = 51u8;
pub const _PASSWORD_EFMT1: u8 = 95u8;
pub const _PASSWORD_LEN: u32 = 128;
pub const _PASSWORD_NOUID: u32 = 1;
pub const _PASSWORD_NOGID: u32 = 2;
pub const _PASSWORD_NOCHG: u32 = 4;
pub const _PASSWORD_NOEXP: u32 = 8;
pub const _PASSWORD_WARNDAYS: u32 = 14;
pub const _PASSWORD_CHGNOW: i32 = -1;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VEOL2: u32 = 2;
pub const VERASE: u32 = 3;
pub const VWERASE: u32 = 4;
pub const VKILL: u32 = 5;
pub const VREPRINT: u32 = 6;
pub const VINTR: u32 = 8;
pub const VQUIT: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VDSUSP: u32 = 11;
pub const VSTART: u32 = 12;
pub const VSTOP: u32 = 13;
pub const VLNEXT: u32 = 14;
pub const VDISCARD: u32 = 15;
pub const VMIN: u32 = 16;
pub const VTIME: u32 = 17;
pub const VSTATUS: u32 = 18;
pub const NCCS: u32 = 20;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IXON: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const ONLCR: u32 = 2;
pub const OXTABS: u32 = 4;
pub const ONOEOT: u32 = 8;
pub const OCRNL: u32 = 16;
pub const ONOCR: u32 = 32;
pub const ONLRET: u32 = 64;
pub const OFILL: u32 = 128;
pub const NLDLY: u32 = 768;
pub const TABDLY: u32 = 3076;
pub const CRDLY: u32 = 12288;
pub const FFDLY: u32 = 16384;
pub const BSDLY: u32 = 32768;
pub const VTDLY: u32 = 65536;
pub const OFDEL: u32 = 131072;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const NL2: u32 = 512;
pub const NL3: u32 = 768;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 4;
pub const CR0: u32 = 0;
pub const CR1: u32 = 4096;
pub const CR2: u32 = 8192;
pub const CR3: u32 = 12288;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const BS0: u32 = 0;
pub const BS1: u32 = 32768;
pub const VT0: u32 = 0;
pub const VT1: u32 = 65536;
pub const CIGNORE: u32 = 1;
pub const CSIZE: u32 = 768;
pub const CS5: u32 = 0;
pub const CS6: u32 = 256;
pub const CS7: u32 = 512;
pub const CS8: u32 = 768;
pub const CSTOPB: u32 = 1024;
pub const CREAD: u32 = 2048;
pub const PARENB: u32 = 4096;
pub const PARODD: u32 = 8192;
pub const HUPCL: u32 = 16384;
pub const CLOCAL: u32 = 32768;
pub const CCTS_OFLOW: u32 = 65536;
pub const CRTS_IFLOW: u32 = 131072;
pub const CDTR_IFLOW: u32 = 262144;
pub const CDSR_OFLOW: u32 = 524288;
pub const CCAR_OFLOW: u32 = 1048576;
pub const MDMBUF: u32 = 1048576;
pub const ECHOKE: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHONL: u32 = 16;
pub const ECHOPRT: u32 = 32;
pub const ECHOCTL: u32 = 64;
pub const ISIG: u32 = 128;
pub const ICANON: u32 = 256;
pub const ALTWERASE: u32 = 512;
pub const IEXTEN: u32 = 1024;
pub const EXTPROC: u32 = 2048;
pub const TOSTOP: u32 = 4194304;
pub const FLUSHO: u32 = 8388608;
pub const NOKERNINFO: u32 = 33554432;
pub const PENDIN: u32 = 536870912;
pub const NOFLSH: u32 = 2147483648;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCSASOFT: u32 = 16;
pub const B0: u32 = 0;
pub const B50: u32 = 50;
pub const B75: u32 = 75;
pub const B110: u32 = 110;
pub const B134: u32 = 134;
pub const B150: u32 = 150;
pub const B200: u32 = 200;
pub const B300: u32 = 300;
pub const B600: u32 = 600;
pub const B1200: u32 = 1200;
pub const B1800: u32 = 1800;
pub const B2400: u32 = 2400;
pub const B4800: u32 = 4800;
pub const B9600: u32 = 9600;
pub const B19200: u32 = 19200;
pub const B38400: u32 = 38400;
pub const B7200: u32 = 7200;
pub const B14400: u32 = 14400;
pub const B28800: u32 = 28800;
pub const B57600: u32 = 57600;
pub const B76800: u32 = 76800;
pub const B115200: u32 = 115200;
pub const B230400: u32 = 230400;
pub const EXTA: u32 = 19200;
pub const EXTB: u32 = 38400;
pub const TCIFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFLUSH: u32 = 3;
pub const TCOOFF: u32 = 1;
pub const TCOON: u32 = 2;
pub const TCIOFF: u32 = 3;
pub const TCION: u32 = 4;
pub const TTYDEF_IFLAG: u32 = 11010;
pub const TTYDEF_OFLAG: u32 = 3;
pub const TTYDEF_LFLAG: u32 = 1483;
pub const TTYDEF_CFLAG: u32 = 19200;
pub const TTYDEF_SPEED: u32 = 9600;
pub const CEOL: u32 = 255;
pub const CERASE: u32 = 127;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u32 = 255;
pub const PIDLOCK_NONBLOCK: u32 = 1;
pub const PIDLOCK_USEHOSTNAME: u32 = 2;
pub const FPARSELN_UNESCESC: u32 = 1;
pub const FPARSELN_UNESCCONT: u32 = 2;
pub const FPARSELN_UNESCCOMM: u32 = 4;
pub const FPARSELN_UNESCREST: u32 = 8;
pub const FPARSELN_UNESCALL: u32 = 15;
pub const OPENDEV_PART: u32 = 1;
pub const OPENDEV_BLCK: u32 = 4;
pub const _PATH_UTMP: &[u8; 14usize] = b"/var/run/utmp\0";
pub const _PATH_WTMP: &[u8; 14usize] = b"/var/log/wtmp\0";
pub const _PATH_LASTLOG: &[u8; 17usize] = b"/var/log/lastlog\0";
pub const UT_NAMESIZE: u32 = 8;
pub const UT_LINESIZE: u32 = 8;
pub const UT_HOSTSIZE: u32 = 16;
pub const LC_COLLATE_MASK: u32 = 1;
pub const LC_CTYPE_MASK: u32 = 2;
pub const LC_MESSAGES_MASK: u32 = 4;
pub const LC_MONETARY_MASK: u32 = 8;
pub const LC_NUMERIC_MASK: u32 = 16;
pub const LC_TIME_MASK: u32 = 32;
pub const _LC_NUM_MASK: u32 = 6;
pub const _LC_LAST_MASK: u32 = 32;
pub const XATTR_OPERATION_INTENT_COPY: u32 = 1;
pub const XATTR_OPERATION_INTENT_SAVE: u32 = 2;
pub const XATTR_OPERATION_INTENT_SHARE: u32 = 3;
pub const XATTR_OPERATION_INTENT_SYNC: u32 = 4;
pub const XATTR_OPERATION_INTENT_BACKUP: u32 = 5;
pub const O_SYNC: u32 = 128;
pub const O_DSYNC: u32 = 4194304;
pub const AIO_ALLDONE: u32 = 1;
pub const AIO_CANCELED: u32 = 2;
pub const AIO_NOTCANCELED: u32 = 4;
pub const LIO_NOP: u32 = 0;
pub const LIO_READ: u32 = 1;
pub const LIO_WRITE: u32 = 2;
pub const LIO_NOWAIT: u32 = 1;
pub const LIO_WAIT: u32 = 2;
pub const AIO_LISTIO_MAX: u32 = 16;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18usize] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const C_ISSOCK: u32 = 49152;
pub const C_ISLNK: u32 = 40960;
pub const C_ISCTG: u32 = 36864;
pub const C_ISREG: u32 = 32768;
pub const C_ISBLK: u32 = 24576;
pub const C_ISDIR: u32 = 16384;
pub const C_ISCHR: u32 = 8192;
pub const C_ISFIFO: u32 = 4096;
pub const C_ISUID: u32 = 2048;
pub const C_ISGID: u32 = 1024;
pub const C_ISVTX: u32 = 512;
pub const C_IRUSR: u32 = 256;
pub const C_IWUSR: u32 = 128;
pub const C_IXUSR: u32 = 64;
pub const C_IRGRP: u32 = 32;
pub const C_IWGRP: u32 = 16;
pub const C_IXGRP: u32 = 8;
pub const C_IROTH: u32 = 4;
pub const C_IWOTH: u32 = 2;
pub const C_IXOTH: u32 = 1;
pub const MAGIC: &[u8; 7usize] = b"070707\0";
pub const __DARWIN_MAXNAMLEN: u32 = 255;
pub const __DARWIN_MAXPATHLEN: u32 = 1024;
pub const MAXNAMLEN: u32 = 255;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const DIRBLKSIZ: u32 = 1024;
pub const DTF_HIDEW: u32 = 1;
pub const DTF_NODUP: u32 = 2;
pub const DTF_REWIND: u32 = 4;
pub const __DTF_READALL: u32 = 8;
pub const __DTF_SKIPREAD: u32 = 16;
pub const __DTF_ATEND: u32 = 32;
pub const RTLD_LAZY: u32 = 1;
pub const RTLD_NOW: u32 = 2;
pub const RTLD_LOCAL: u32 = 4;
pub const RTLD_GLOBAL: u32 = 8;
pub const RTLD_NOLOAD: u32 = 16;
pub const RTLD_NODELETE: u32 = 128;
pub const RTLD_FIRST: u32 = 256;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const O_EXEC: u32 = 1073741824;
pub const O_SEARCH: u32 = 1074790400;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const AT_SYMLINK_NOFOLLOW_ANY: u32 = 2048;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_DP_AUTHENTICATE: u32 = 4;
pub const AUTH_OPEN_NOAUTHFD: i32 = -1;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const F_SETLEASE: u32 = 106;
pub const F_GETLEASE: u32 = 107;
pub const F_TRANSFEREXTENTS: u32 = 110;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_ALLOCATEPERSIST: u32 = 8;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const MM_HARD: u32 = 1;
pub const MM_SOFT: u32 = 2;
pub const MM_FIRM: u32 = 4;
pub const MM_APPL: u32 = 16;
pub const MM_UTIL: u32 = 32;
pub const MM_OPSYS: u32 = 64;
pub const MM_PRINT: u32 = 256;
pub const MM_CONSOLE: u32 = 512;
pub const MM_RECOVER: u32 = 4096;
pub const MM_NRECOV: u32 = 8192;
pub const MM_NOSEV: u32 = 0;
pub const MM_HALT: u32 = 1;
pub const MM_ERROR: u32 = 2;
pub const MM_WARNING: u32 = 3;
pub const MM_INFO: u32 = 4;
pub const MM_NULLSEV: u32 = 0;
pub const MM_NULLMC: u32 = 0;
pub const MM_OK: u32 = 0;
pub const MM_NOMSG: u32 = 1;
pub const MM_NOCON: u32 = 2;
pub const MM_NOTOK: u32 = 3;
pub const FNM_NOMATCH: u32 = 1;
pub const FNM_NOESCAPE: u32 = 1;
pub const FNM_PATHNAME: u32 = 2;
pub const FNM_PERIOD: u32 = 4;
pub const FNM_NOSYS: i32 = -1;
pub const FNM_LEADING_DIR: u32 = 8;
pub const FNM_CASEFOLD: u32 = 16;
pub const FNM_IGNORECASE: u32 = 16;
pub const FNM_FILE_NAME: u32 = 2;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 10420224;
pub const SF_SETTABLE: u32 = 1073676288;
pub const SF_SYNTHETIC: u32 = 3221225472;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const SF_FIRMLINK: u32 = 8388608;
pub const SF_DATALESS: u32 = 1073741824;
pub const EF_MAY_SHARE_BLOCKS: u32 = 1;
pub const EF_NO_XATTRS: u32 = 2;
pub const EF_IS_SYNC_ROOT: u32 = 4;
pub const EF_IS_PURGEABLE: u32 = 8;
pub const EF_IS_SPARSE: u32 = 16;
pub const EF_IS_SYNTHETIC: u32 = 32;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const FTW_F: u32 = 0;
pub const FTW_D: u32 = 1;
pub const FTW_DNR: u32 = 2;
pub const FTW_DP: u32 = 3;
pub const FTW_NS: u32 = 4;
pub const FTW_SL: u32 = 5;
pub const FTW_SLN: u32 = 6;
pub const FTW_PHYS: u32 = 1;
pub const FTW_MOUNT: u32 = 2;
pub const FTW_DEPTH: u32 = 4;
pub const FTW_CHDIR: u32 = 8;
pub const GLOB_APPEND: u32 = 1;
pub const GLOB_DOOFFS: u32 = 2;
pub const GLOB_ERR: u32 = 4;
pub const GLOB_MARK: u32 = 8;
pub const GLOB_NOCHECK: u32 = 16;
pub const GLOB_NOSORT: u32 = 32;
pub const GLOB_NOESCAPE: u32 = 8192;
pub const GLOB_NOSPACE: i32 = -1;
pub const GLOB_ABORTED: i32 = -2;
pub const GLOB_NOMATCH: i32 = -3;
pub const GLOB_NOSYS: i32 = -4;
pub const GLOB_ALTDIRFUNC: u32 = 64;
pub const GLOB_BRACE: u32 = 128;
pub const GLOB_MAGCHAR: u32 = 256;
pub const GLOB_NOMAGIC: u32 = 512;
pub const GLOB_QUOTE: u32 = 1024;
pub const GLOB_TILDE: u32 = 2048;
pub const GLOB_LIMIT: u32 = 4096;
pub const _GLOB_ERR_BLOCK: u32 = 2147483648;
pub const GLOB_MAXPATH: u32 = 4096;
pub const GLOB_ABEND: i32 = -2;
pub const _PATH_GROUP: &[u8; 11usize] = b"/etc/group\0";
pub const _LIBICONV_VERSION: u32 = 267;
pub const ICONV_TRIVIALP: u32 = 0;
pub const ICONV_GET_TRANSLITERATE: u32 = 1;
pub const ICONV_SET_TRANSLITERATE: u32 = 2;
pub const ICONV_GET_DISCARD_ILSEQ: u32 = 3;
pub const ICONV_SET_DISCARD_ILSEQ: u32 = 4;
pub const ICONV_SET_HOOKS: u32 = 5;
pub const ICONV_SET_FALLBACKS: u32 = 6;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const CODESET: u32 = 0;
pub const D_T_FMT: u32 = 1;
pub const D_FMT: u32 = 2;
pub const T_FMT: u32 = 3;
pub const T_FMT_AMPM: u32 = 4;
pub const AM_STR: u32 = 5;
pub const PM_STR: u32 = 6;
pub const DAY_1: u32 = 7;
pub const DAY_2: u32 = 8;
pub const DAY_3: u32 = 9;
pub const DAY_4: u32 = 10;
pub const DAY_5: u32 = 11;
pub const DAY_6: u32 = 12;
pub const DAY_7: u32 = 13;
pub const ABDAY_1: u32 = 14;
pub const ABDAY_2: u32 = 15;
pub const ABDAY_3: u32 = 16;
pub const ABDAY_4: u32 = 17;
pub const ABDAY_5: u32 = 18;
pub const ABDAY_6: u32 = 19;
pub const ABDAY_7: u32 = 20;
pub const MON_1: u32 = 21;
pub const MON_2: u32 = 22;
pub const MON_3: u32 = 23;
pub const MON_4: u32 = 24;
pub const MON_5: u32 = 25;
pub const MON_6: u32 = 26;
pub const MON_7: u32 = 27;
pub const MON_8: u32 = 28;
pub const MON_9: u32 = 29;
pub const MON_10: u32 = 30;
pub const MON_11: u32 = 31;
pub const MON_12: u32 = 32;
pub const ABMON_1: u32 = 33;
pub const ABMON_2: u32 = 34;
pub const ABMON_3: u32 = 35;
pub const ABMON_4: u32 = 36;
pub const ABMON_5: u32 = 37;
pub const ABMON_6: u32 = 38;
pub const ABMON_7: u32 = 39;
pub const ABMON_8: u32 = 40;
pub const ABMON_9: u32 = 41;
pub const ABMON_10: u32 = 42;
pub const ABMON_11: u32 = 43;
pub const ABMON_12: u32 = 44;
pub const ERA: u32 = 45;
pub const ERA_D_FMT: u32 = 46;
pub const ERA_D_T_FMT: u32 = 47;
pub const ERA_T_FMT: u32 = 48;
pub const ALT_DIGITS: u32 = 49;
pub const RADIXCHAR: u32 = 50;
pub const THOUSEP: u32 = 51;
pub const YESEXPR: u32 = 52;
pub const NOEXPR: u32 = 53;
pub const YESSTR: u32 = 54;
pub const NOSTR: u32 = 55;
pub const CRNCYSTR: u32 = 56;
pub const D_MD_ORDER: u32 = 57;
pub const DBM_RDONLY: u32 = 0;
pub const DBM_INSERT: u32 = 0;
pub const DBM_REPLACE: u32 = 1;
pub const DBM_SUFFIX: &[u8; 4usize] = b".db\0";
pub const _PATH_HEQUIV: &[u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14usize] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &[u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14usize] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const DLIL_SDLDATACOUNT: u32 = 12;
pub const IF_NAMESIZE: u32 = 16;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const APPLE_IF_FAM_LOOPBACK: u32 = 1;
pub const APPLE_IF_FAM_ETHERNET: u32 = 2;
pub const APPLE_IF_FAM_SLIP: u32 = 3;
pub const APPLE_IF_FAM_TUN: u32 = 4;
pub const APPLE_IF_FAM_VLAN: u32 = 5;
pub const APPLE_IF_FAM_PPP: u32 = 6;
pub const APPLE_IF_FAM_PVC: u32 = 7;
pub const APPLE_IF_FAM_DISC: u32 = 8;
pub const APPLE_IF_FAM_MDECAP: u32 = 9;
pub const APPLE_IF_FAM_GIF: u32 = 10;
pub const APPLE_IF_FAM_FAITH: u32 = 11;
pub const APPLE_IF_FAM_STF: u32 = 12;
pub const APPLE_IF_FAM_FIREWIRE: u32 = 13;
pub const APPLE_IF_FAM_BOND: u32 = 14;
pub const APPLE_IF_FAM_CELLULAR: u32 = 15;
pub const APPLE_IF_FAM_UNUSED_16: u32 = 16;
pub const APPLE_IF_FAM_UTUN: u32 = 17;
pub const APPLE_IF_FAM_IPSEC: u32 = 18;
pub const IF_MINMTU: u32 = 72;
pub const IF_MAXMTU: u32 = 65535;
pub const IFNAMSIZ: u32 = 16;
pub const IFF_UP: u32 = 1;
pub const IFF_BROADCAST: u32 = 2;
pub const IFF_DEBUG: u32 = 4;
pub const IFF_LOOPBACK: u32 = 8;
pub const IFF_POINTOPOINT: u32 = 16;
pub const IFF_NOTRAILERS: u32 = 32;
pub const IFF_RUNNING: u32 = 64;
pub const IFF_NOARP: u32 = 128;
pub const IFF_PROMISC: u32 = 256;
pub const IFF_ALLMULTI: u32 = 512;
pub const IFF_OACTIVE: u32 = 1024;
pub const IFF_SIMPLEX: u32 = 2048;
pub const IFF_LINK0: u32 = 4096;
pub const IFF_LINK1: u32 = 8192;
pub const IFF_LINK2: u32 = 16384;
pub const IFF_ALTPHYS: u32 = 16384;
pub const IFF_MULTICAST: u32 = 32768;
pub const IFCAP_RXCSUM: u32 = 1;
pub const IFCAP_TXCSUM: u32 = 2;
pub const IFCAP_VLAN_MTU: u32 = 4;
pub const IFCAP_VLAN_HWTAGGING: u32 = 8;
pub const IFCAP_JUMBO_MTU: u32 = 16;
pub const IFCAP_TSO4: u32 = 32;
pub const IFCAP_TSO6: u32 = 64;
pub const IFCAP_LRO: u32 = 128;
pub const IFCAP_AV: u32 = 256;
pub const IFCAP_TXSTATUS: u32 = 512;
pub const IFCAP_SKYWALK: u32 = 1024;
pub const IFCAP_HW_TIMESTAMP: u32 = 2048;
pub const IFCAP_SW_TIMESTAMP: u32 = 4096;
pub const IFCAP_CSUM_PARTIAL: u32 = 8192;
pub const IFCAP_CSUM_ZERO_INVERT: u32 = 16384;
pub const IFCAP_HWCSUM: u32 = 3;
pub const IFCAP_TSO: u32 = 96;
pub const IFCAP_VALID: u32 = 32767;
pub const IFQ_MAXLEN: u32 = 128;
pub const IFNET_SLOWHZ: u32 = 1;
pub const IFQ_DEF_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_DEF_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_DEF_L4S_TARGET_DELAY: u32 = 2000000;
pub const IFQ_DEF_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_C_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_C_UPDATE_INTERVAL: u32 = 100000000;
pub const IFQ_LL_L4S_TARGET_DELAY: u32 = 10000000;
pub const IFQ_LL_L4S_UPDATE_INTERVAL: u32 = 100000000;
pub const IF_WAKE_ON_MAGIC_PACKET: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_UNKNOWN: u32 = 0;
pub const IFRTYPE_FUNCTIONAL_LOOPBACK: u32 = 1;
pub const IFRTYPE_FUNCTIONAL_WIRED: u32 = 2;
pub const IFRTYPE_FUNCTIONAL_WIFI_INFRA: u32 = 3;
pub const IFRTYPE_FUNCTIONAL_WIFI_AWDL: u32 = 4;
pub const IFRTYPE_FUNCTIONAL_CELLULAR: u32 = 5;
pub const IFRTYPE_FUNCTIONAL_INTCOPROC: u32 = 6;
pub const IFRTYPE_FUNCTIONAL_COMPANIONLINK: u32 = 7;
pub const IFRTYPE_FUNCTIONAL_LAST: u32 = 7;
pub const IFSTATMAX: u32 = 800;
pub const IFT_OTHER: u32 = 1;
pub const IFT_1822: u32 = 2;
pub const IFT_HDH1822: u32 = 3;
pub const IFT_X25DDN: u32 = 4;
pub const IFT_X25: u32 = 5;
pub const IFT_ETHER: u32 = 6;
pub const IFT_ISO88023: u32 = 7;
pub const IFT_ISO88024: u32 = 8;
pub const IFT_ISO88025: u32 = 9;
pub const IFT_ISO88026: u32 = 10;
pub const IFT_STARLAN: u32 = 11;
pub const IFT_P10: u32 = 12;
pub const IFT_P80: u32 = 13;
pub const IFT_HY: u32 = 14;
pub const IFT_FDDI: u32 = 15;
pub const IFT_LAPB: u32 = 16;
pub const IFT_SDLC: u32 = 17;
pub const IFT_T1: u32 = 18;
pub const IFT_CEPT: u32 = 19;
pub const IFT_ISDNBASIC: u32 = 20;
pub const IFT_ISDNPRIMARY: u32 = 21;
pub const IFT_PTPSERIAL: u32 = 22;
pub const IFT_PPP: u32 = 23;
pub const IFT_LOOP: u32 = 24;
pub const IFT_EON: u32 = 25;
pub const IFT_XETHER: u32 = 26;
pub const IFT_NSIP: u32 = 27;
pub const IFT_SLIP: u32 = 28;
pub const IFT_ULTRA: u32 = 29;
pub const IFT_DS3: u32 = 30;
pub const IFT_SIP: u32 = 31;
pub const IFT_FRELAY: u32 = 32;
pub const IFT_RS232: u32 = 33;
pub const IFT_PARA: u32 = 34;
pub const IFT_ARCNET: u32 = 35;
pub const IFT_ARCNETPLUS: u32 = 36;
pub const IFT_ATM: u32 = 37;
pub const IFT_MIOX25: u32 = 38;
pub const IFT_SONET: u32 = 39;
pub const IFT_X25PLE: u32 = 40;
pub const IFT_ISO88022LLC: u32 = 41;
pub const IFT_LOCALTALK: u32 = 42;
pub const IFT_SMDSDXI: u32 = 43;
pub const IFT_FRELAYDCE: u32 = 44;
pub const IFT_V35: u32 = 45;
pub const IFT_HSSI: u32 = 46;
pub const IFT_HIPPI: u32 = 47;
pub const IFT_MODEM: u32 = 48;
pub const IFT_AAL5: u32 = 49;
pub const IFT_SONETPATH: u32 = 50;
pub const IFT_SONETVT: u32 = 51;
pub const IFT_SMDSICIP: u32 = 52;
pub const IFT_PROPVIRTUAL: u32 = 53;
pub const IFT_PROPMUX: u32 = 54;
pub const IFT_GIF: u32 = 55;
pub const IFT_FAITH: u32 = 56;
pub const IFT_STF: u32 = 57;
pub const IFT_6LOWPAN: u32 = 64;
pub const IFT_L2VLAN: u32 = 135;
pub const IFT_IEEE8023ADLAG: u32 = 136;
pub const IFT_IEEE1394: u32 = 144;
pub const IFT_BRIDGE: u32 = 209;
pub const IFT_ENC: u32 = 244;
pub const IFT_PFLOG: u32 = 245;
pub const IFT_PFSYNC: u32 = 246;
pub const IFT_CARP: u32 = 248;
pub const IFT_PKTAP: u32 = 254;
pub const IFT_CELLULAR: u32 = 255;
pub const IFT_PDP: u32 = 255;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TH_ECE: u32 = 64;
pub const TH_CWR: u32 = 128;
pub const TH_AE: u32 = 256;
pub const TH_FLAGS: u32 = 247;
pub const TH_FLAGS_ALL: u32 = 255;
pub const TH_ACCEPT: u32 = 23;
pub const TH_ACE: u32 = 448;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOLEN_SACK: u32 = 8;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const MAX_TCPOPTLEN: u32 = 40;
pub const TCPOPT_CC: u32 = 11;
pub const TCPOPT_CCNEW: u32 = 12;
pub const TCPOPT_CCECHO: u32 = 13;
pub const TCPOLEN_CC: u32 = 6;
pub const TCPOLEN_CC_APPA: u32 = 8;
pub const TCPOPT_SIGNATURE: u32 = 19;
pub const TCPOLEN_SIGNATURE: u32 = 18;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOLEN_FASTOPEN_REQ: u32 = 2;
pub const TCPOPT_ACCECN0: u32 = 172;
pub const TCPOPT_ACCECN1: u32 = 174;
pub const TCPOLEN_ACCECN_EMPTY: u32 = 2;
pub const TCPOLEN_ACCECN_COUNTER: u32 = 3;
pub const TCPOPT_SACK_HDR: u32 = 16844032;
pub const MAX_SACK_BLKS: u32 = 6;
pub const TCP_MAX_SACK: u32 = 4;
pub const TCP_MSS: u32 = 512;
pub const TCP_MINMSS: u32 = 216;
pub const TCP6_MSS: u32 = 1024;
pub const TCP_MAXWIN: u32 = 65535;
pub const TTCP_CLIENT_SND_WND: u32 = 4096;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const TCP_MAXHLEN: u32 = 60;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_NOPUSH: u32 = 4;
pub const TCP_NOOPT: u32 = 8;
pub const TCP_KEEPALIVE: u32 = 16;
pub const TCP_CONNECTIONTIMEOUT: u32 = 32;
pub const PERSIST_TIMEOUT: u32 = 64;
pub const TCP_RXT_CONNDROPTIME: u32 = 128;
pub const TCP_RXT_FINDROP: u32 = 256;
pub const TCP_KEEPINTVL: u32 = 257;
pub const TCP_KEEPCNT: u32 = 258;
pub const TCP_SENDMOREACKS: u32 = 259;
pub const TCP_ENABLE_ECN: u32 = 260;
pub const TCP_FASTOPEN: u32 = 261;
pub const TCP_CONNECTION_INFO: u32 = 262;
pub const TCP_NOTSENT_LOWAT: u32 = 513;
pub const TCPCI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPCI_OPT_SACK: u32 = 2;
pub const TCPCI_OPT_WSCALE: u32 = 4;
pub const TCPCI_OPT_ECN: u32 = 8;
pub const TCPCI_FLAG_LOSSRECOVERY: u32 = 1;
pub const TCPCI_FLAG_REORDERING_DETECTED: u32 = 2;
pub const NL_SETD: u32 = 1;
pub const NL_CAT_LOCALE: u32 = 1;
pub const POLLIN: u32 = 1;
pub const POLLPRI: u32 = 2;
pub const POLLOUT: u32 = 4;
pub const POLLRDNORM: u32 = 64;
pub const POLLWRNORM: u32 = 4;
pub const POLLRDBAND: u32 = 128;
pub const POLLWRBAND: u32 = 256;
pub const POLLEXTEND: u32 = 512;
pub const POLLATTRIB: u32 = 1024;
pub const POLLNLINK: u32 = 2048;
pub const POLLWRITE: u32 = 4096;
pub const POLLERR: u32 = 8;
pub const POLLHUP: u32 = 16;
pub const POLLNVAL: u32 = 32;
pub const POLLSTANDARD: u32 = 511;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const POSIX_SPAWN_RESETIDS: u32 = 1;
pub const POSIX_SPAWN_SETPGROUP: u32 = 2;
pub const POSIX_SPAWN_SETSIGDEF: u32 = 4;
pub const POSIX_SPAWN_SETSIGMASK: u32 = 8;
pub const POSIX_SPAWN_SETEXEC: u32 = 64;
pub const POSIX_SPAWN_START_SUSPENDED: u32 = 128;
pub const POSIX_SPAWN_SETSID: u32 = 1024;
pub const POSIX_SPAWN_CLOEXEC_DEFAULT: u32 = 16384;
pub const _POSIX_SPAWN_RESLIDE: u32 = 2048;
pub const POSIX_SPAWN_PCONTROL_NONE: u32 = 0;
pub const POSIX_SPAWN_PCONTROL_THROTTLE: u32 = 1;
pub const POSIX_SPAWN_PCONTROL_SUSPEND: u32 = 2;
pub const POSIX_SPAWN_PCONTROL_KILL: u32 = 3;
pub const POSIX_SPAWN_PANIC_ON_CRASH: u32 = 1;
pub const POSIX_SPAWN_PANIC_ON_NON_ZERO_EXIT: u32 = 2;
pub const POSIX_SPAWN_PANIC_ON_EXIT: u32 = 4;
pub const POSIX_SPAWN_PANIC_ON_SPAWN_FAIL: u32 = 8;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_ARM_UNDEFINED: u32 = 1;
pub const EXC_ARM_FP_UNDEFINED: u32 = 0;
pub const EXC_ARM_FP_IO: u32 = 1;
pub const EXC_ARM_FP_DZ: u32 = 2;
pub const EXC_ARM_FP_OF: u32 = 3;
pub const EXC_ARM_FP_UF: u32 = 4;
pub const EXC_ARM_FP_IX: u32 = 5;
pub const EXC_ARM_FP_ID: u32 = 6;
pub const EXC_ARM_DA_ALIGN: u32 = 257;
pub const EXC_ARM_DA_DEBUG: u32 = 258;
pub const EXC_ARM_SP_ALIGN: u32 = 259;
pub const EXC_ARM_SWP: u32 = 260;
pub const EXC_ARM_PAC_FAIL: u32 = 261;
pub const EXC_ARM_BREAKPOINT: u32 = 1;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const ARM_THREAD_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const PPNUM_MAX: u32 = 4294967295;
pub const ARM_THREAD_STATE: u32 = 1;
pub const ARM_UNIFIED_THREAD_STATE: u32 = 1;
pub const ARM_VFP_STATE: u32 = 2;
pub const ARM_EXCEPTION_STATE: u32 = 3;
pub const ARM_DEBUG_STATE: u32 = 4;
pub const THREAD_STATE_NONE: u32 = 5;
pub const ARM_THREAD_STATE64: u32 = 6;
pub const ARM_EXCEPTION_STATE64: u32 = 7;
pub const ARM_THREAD_STATE32: u32 = 9;
pub const ARM_DEBUG_STATE32: u32 = 14;
pub const ARM_DEBUG_STATE64: u32 = 15;
pub const ARM_NEON_STATE: u32 = 16;
pub const ARM_NEON_STATE64: u32 = 17;
pub const ARM_CPMU_STATE64: u32 = 18;
pub const ARM_PAGEIN_STATE: u32 = 27;
pub const MACHINE_THREAD_STATE: u32 = 1;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const POSIX_SPAWN_NP_CSM_ALL: u32 = 1;
pub const POSIX_SPAWN_NP_CSM_NOSMT: u32 = 2;
pub const POSIX_SPAWN_NP_CSM_TECS: u32 = 4;
pub const _PTHREAD_MUTEX_POLICY_FAIRSHARE: u32 = 1;
pub const _PTHREAD_MUTEX_POLICY_FIRSTFIT: u32 = 3;
pub const REG_BASIC: u32 = 0;
pub const REG_EXTENDED: u32 = 1;
pub const REG_ICASE: u32 = 2;
pub const REG_NOSUB: u32 = 4;
pub const REG_NEWLINE: u32 = 8;
pub const REG_NOSPEC: u32 = 16;
pub const REG_LITERAL: u32 = 16;
pub const REG_PEND: u32 = 32;
pub const REG_MINIMAL: u32 = 64;
pub const REG_UNGREEDY: u32 = 64;
pub const REG_DUMP: u32 = 128;
pub const REG_ENHANCED: u32 = 256;
pub const REG_ENOSYS: i32 = -1;
pub const REG_NOMATCH: u32 = 1;
pub const REG_BADPAT: u32 = 2;
pub const REG_ECOLLATE: u32 = 3;
pub const REG_ECTYPE: u32 = 4;
pub const REG_EESCAPE: u32 = 5;
pub const REG_ESUBREG: u32 = 6;
pub const REG_EBRACK: u32 = 7;
pub const REG_EPAREN: u32 = 8;
pub const REG_EBRACE: u32 = 9;
pub const REG_BADBR: u32 = 10;
pub const REG_ERANGE: u32 = 11;
pub const REG_ESPACE: u32 = 12;
pub const REG_BADRPT: u32 = 13;
pub const REG_EMPTY: u32 = 14;
pub const REG_ASSERT: u32 = 15;
pub const REG_INVARG: u32 = 16;
pub const REG_ILLSEQ: u32 = 17;
pub const REG_ATOI: u32 = 255;
pub const REG_ITOA: u32 = 256;
pub const REG_NOTBOL: u32 = 1;
pub const REG_NOTEOL: u32 = 2;
pub const REG_STARTEND: u32 = 4;
pub const REG_TRACE: u32 = 256;
pub const REG_LARGE: u32 = 512;
pub const REG_BACKR: u32 = 1024;
pub const REG_BACKTRACKING_MATCHER: u32 = 1024;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const NeXTBSD: u32 = 1995064;
pub const NeXTBSD4_0: u32 = 0;
pub const MAXCOMLEN: u32 = 16;
pub const MAXINTERP: u32 = 64;
pub const MAXLOGNAME: u32 = 255;
pub const MAXUPRC: u32 = 266;
pub const NCARGS: u32 = 1048576;
pub const NGROUPS: u32 = 16;
pub const NOFILE: u32 = 256;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const MAXDOMNAMELEN: u32 = 256;
pub const NBPG: u32 = 4096;
pub const PGOFSET: u32 = 4095;
pub const PGSHIFT: u32 = 12;
pub const DEV_BSIZE: u32 = 512;
pub const DEV_BSHIFT: u32 = 9;
pub const BLKDEV_IOSIZE: u32 = 2048;
pub const MAXPHYS: u32 = 65536;
pub const CLSIZE: u32 = 1;
pub const CLSIZELOG2: u32 = 0;
pub const MSIZESHIFT: u32 = 8;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MBIGCLSHIFT: u32 = 12;
pub const MBIGCLBYTES: u32 = 4096;
pub const M16KCLSHIFT: u32 = 14;
pub const M16KCLBYTES: u32 = 16384;
pub const MCLOFSET: u32 = 2047;
pub const PSWP: u32 = 0;
pub const PVM: u32 = 4;
pub const PINOD: u32 = 8;
pub const PRIBIO: u32 = 16;
pub const PVFS: u32 = 20;
pub const PZERO: u32 = 22;
pub const PSOCK: u32 = 24;
pub const PWAIT: u32 = 32;
pub const PLOCK: u32 = 36;
pub const PPAUSE: u32 = 40;
pub const PUSER: u32 = 50;
pub const MAXPRI: u32 = 127;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PTTYBLOCK: u32 = 512;
pub const PDROP: u32 = 1024;
pub const PSPIN: u32 = 2048;
pub const CMASK: u32 = 18;
pub const CLBYTES: u32 = 4096;
pub const CLOFSET: u32 = 4095;
pub const CLOFF: u32 = 4095;
pub const CLSHIFT: u32 = 12;
pub const CBLOCK: u32 = 64;
pub const CBQSIZE: u32 = 8;
pub const CROUND: u32 = 63;
pub const MAXBSIZE: u32 = 1048576;
pub const MAXPHYSIO: u32 = 65536;
pub const MAXFRAG: u32 = 8;
pub const MAXPHYSIO_WIRED: u32 = 16777216;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const EVFILT_READ: i32 = -1;
pub const EVFILT_WRITE: i32 = -2;
pub const EVFILT_AIO: i32 = -3;
pub const EVFILT_VNODE: i32 = -4;
pub const EVFILT_PROC: i32 = -5;
pub const EVFILT_SIGNAL: i32 = -6;
pub const EVFILT_TIMER: i32 = -7;
pub const EVFILT_MACHPORT: i32 = -8;
pub const EVFILT_FS: i32 = -9;
pub const EVFILT_USER: i32 = -10;
pub const EVFILT_VM: i32 = -12;
pub const EVFILT_EXCEPT: i32 = -15;
pub const EVFILT_SYSCOUNT: u32 = 17;
pub const EVFILT_THREADMARKER: u32 = 17;
pub const KEVENT_FLAG_NONE: u32 = 0;
pub const KEVENT_FLAG_IMMEDIATE: u32 = 1;
pub const KEVENT_FLAG_ERROR_EVENTS: u32 = 2;
pub const EV_ADD: u32 = 1;
pub const EV_DELETE: u32 = 2;
pub const EV_ENABLE: u32 = 4;
pub const EV_DISABLE: u32 = 8;
pub const EV_ONESHOT: u32 = 16;
pub const EV_CLEAR: u32 = 32;
pub const EV_RECEIPT: u32 = 64;
pub const EV_DISPATCH: u32 = 128;
pub const EV_UDATA_SPECIFIC: u32 = 256;
pub const EV_DISPATCH2: u32 = 384;
pub const EV_VANISHED: u32 = 512;
pub const EV_SYSFLAGS: u32 = 61440;
pub const EV_FLAG0: u32 = 4096;
pub const EV_FLAG1: u32 = 8192;
pub const EV_EOF: u32 = 32768;
pub const EV_ERROR: u32 = 16384;
pub const EV_POLL: u32 = 4096;
pub const EV_OOBAND: u32 = 8192;
pub const NOTE_TRIGGER: u32 = 16777216;
pub const NOTE_FFNOP: u32 = 0;
pub const NOTE_FFAND: u32 = 1073741824;
pub const NOTE_FFOR: u32 = 2147483648;
pub const NOTE_FFCOPY: u32 = 3221225472;
pub const NOTE_FFCTRLMASK: u32 = 3221225472;
pub const NOTE_FFLAGSMASK: u32 = 16777215;
pub const NOTE_LOWAT: u32 = 1;
pub const NOTE_OOB: u32 = 2;
pub const NOTE_DELETE: u32 = 1;
pub const NOTE_WRITE: u32 = 2;
pub const NOTE_EXTEND: u32 = 4;
pub const NOTE_ATTRIB: u32 = 8;
pub const NOTE_LINK: u32 = 16;
pub const NOTE_RENAME: u32 = 32;
pub const NOTE_REVOKE: u32 = 64;
pub const NOTE_NONE: u32 = 128;
pub const NOTE_FUNLOCK: u32 = 256;
pub const NOTE_LEASE_DOWNGRADE: u32 = 512;
pub const NOTE_LEASE_RELEASE: u32 = 1024;
pub const NOTE_EXIT: u32 = 2147483648;
pub const NOTE_FORK: u32 = 1073741824;
pub const NOTE_EXEC: u32 = 536870912;
pub const NOTE_SIGNAL: u32 = 134217728;
pub const NOTE_EXITSTATUS: u32 = 67108864;
pub const NOTE_EXIT_DETAIL: u32 = 33554432;
pub const NOTE_PDATAMASK: u32 = 1048575;
pub const NOTE_PCTRLMASK: i32 = -1048576;
pub const NOTE_EXIT_DETAIL_MASK: u32 = 458752;
pub const NOTE_EXIT_DECRYPTFAIL: u32 = 65536;
pub const NOTE_EXIT_MEMORY: u32 = 131072;
pub const NOTE_EXIT_CSERROR: u32 = 262144;
pub const NOTE_VM_PRESSURE: u32 = 2147483648;
pub const NOTE_VM_PRESSURE_TERMINATE: u32 = 1073741824;
pub const NOTE_VM_PRESSURE_SUDDEN_TERMINATE: u32 = 536870912;
pub const NOTE_VM_ERROR: u32 = 268435456;
pub const NOTE_SECONDS: u32 = 1;
pub const NOTE_USECONDS: u32 = 2;
pub const NOTE_NSECONDS: u32 = 4;
pub const NOTE_ABSOLUTE: u32 = 8;
pub const NOTE_LEEWAY: u32 = 16;
pub const NOTE_CRITICAL: u32 = 32;
pub const NOTE_BACKGROUND: u32 = 64;
pub const NOTE_MACH_CONTINUOUS_TIME: u32 = 128;
pub const NOTE_MACHTIME: u32 = 256;
pub const NOTE_TRACK: u32 = 1;
pub const NOTE_TRACKERR: u32 = 2;
pub const NOTE_CHILD: u32 = 4;
pub const SIDL: u32 = 1;
pub const SRUN: u32 = 2;
pub const SSLEEP: u32 = 3;
pub const SSTOP: u32 = 4;
pub const SZOMB: u32 = 5;
pub const P_ADVLOCK: u32 = 1;
pub const P_CONTROLT: u32 = 2;
pub const P_LP64: u32 = 4;
pub const P_NOCLDSTOP: u32 = 8;
pub const P_PPWAIT: u32 = 16;
pub const P_PROFIL: u32 = 32;
pub const P_SELECT: u32 = 64;
pub const P_CONTINUED: u32 = 128;
pub const P_SUGID: u32 = 256;
pub const P_SYSTEM: u32 = 512;
pub const P_TIMEOUT: u32 = 1024;
pub const P_TRACED: u32 = 2048;
pub const P_DISABLE_ASLR: u32 = 4096;
pub const P_WEXIT: u32 = 8192;
pub const P_EXEC: u32 = 16384;
pub const P_OWEUPC: u32 = 32768;
pub const P_AFFINITY: u32 = 65536;
pub const P_TRANSLATED: u32 = 131072;
pub const P_CLASSIC: u32 = 131072;
pub const P_DELAYIDLESLEEP: u32 = 262144;
pub const P_CHECKOPENEVT: u32 = 524288;
pub const P_DEPENDENCY_CAPABLE: u32 = 1048576;
pub const P_REBOOT: u32 = 2097152;
pub const P_RESV6: u32 = 4194304;
pub const P_RESV7: u32 = 8388608;
pub const P_THCWD: u32 = 16777216;
pub const P_RESV9: u32 = 33554432;
pub const P_ADOPTPERSONA: u32 = 67108864;
pub const P_RESV11: u32 = 134217728;
pub const P_NOSHLIB: u32 = 268435456;
pub const P_FORCEQUOTA: u32 = 536870912;
pub const P_NOCLDWAIT: u32 = 1073741824;
pub const P_NOREMOTEHANG: u32 = 2147483648;
pub const P_INMEM: u32 = 0;
pub const P_NOSWAP: u32 = 0;
pub const P_PHYSIO: u32 = 0;
pub const P_FSTRACE: u32 = 0;
pub const P_SSTEP: u32 = 0;
pub const P_DIRTY_TRACK: u32 = 1;
pub const P_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const P_DIRTY_DEFER: u32 = 4;
pub const P_DIRTY: u32 = 8;
pub const P_DIRTY_SHUTDOWN: u32 = 16;
pub const P_DIRTY_TERMINATED: u32 = 32;
pub const P_DIRTY_BUSY: u32 = 64;
pub const P_DIRTY_MARKED: u32 = 128;
pub const P_DIRTY_AGING_IN_PROGRESS: u32 = 256;
pub const P_DIRTY_LAUNCH_IN_PROGRESS: u32 = 512;
pub const P_DIRTY_DEFER_ALWAYS: u32 = 1024;
pub const P_DIRTY_IS_DIRTY: u32 = 24;
pub const P_DIRTY_IDLE_EXIT_ENABLED: u32 = 3;
pub const PSEMNAMLEN: u32 = 31;
pub const PSEM_NONE: u32 = 1;
pub const PSEM_DEFINED: u32 = 2;
pub const PSEM_ALLOCATED: u32 = 4;
pub const PSEM_MAPPED: u32 = 8;
pub const PSEM_INUSE: u32 = 16;
pub const PSEM_REMOVED: u32 = 32;
pub const PSEM_INCREATE: u32 = 64;
pub const PSEM_INDELETE: u32 = 128;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_R: u32 = 256;
pub const IPC_W: u32 = 128;
pub const IPC_M: u32 = 4096;
pub const PROT_NONE: u32 = 0;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_COPY: u32 = 2;
pub const MAP_FIXED: u32 = 16;
pub const MAP_RENAME: u32 = 32;
pub const MAP_NORESERVE: u32 = 64;
pub const MAP_RESERVED0080: u32 = 128;
pub const MAP_NOEXTEND: u32 = 256;
pub const MAP_HASSEMAPHORE: u32 = 512;
pub const MAP_NOCACHE: u32 = 1024;
pub const MAP_JIT: u32 = 2048;
pub const MAP_FILE: u32 = 0;
pub const MAP_ANON: u32 = 4096;
pub const MAP_ANONYMOUS: u32 = 4096;
pub const MAP_RESILIENT_CODESIGN: u32 = 8192;
pub const MAP_RESILIENT_MEDIA: u32 = 16384;
pub const MAP_32BIT: u32 = 32768;
pub const MAP_TRANSLATED_ALLOW_EXECUTE: u32 = 131072;
pub const MAP_UNIX03: u32 = 262144;
pub const MCL_CURRENT: u32 = 1;
pub const MCL_FUTURE: u32 = 2;
pub const MS_ASYNC: u32 = 1;
pub const MS_INVALIDATE: u32 = 2;
pub const MS_SYNC: u32 = 16;
pub const MS_KILLPAGES: u32 = 4;
pub const MS_DEACTIVATE: u32 = 8;
pub const POSIX_MADV_NORMAL: u32 = 0;
pub const POSIX_MADV_RANDOM: u32 = 1;
pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
pub const POSIX_MADV_WILLNEED: u32 = 3;
pub const POSIX_MADV_DONTNEED: u32 = 4;
pub const MADV_NORMAL: u32 = 0;
pub const MADV_RANDOM: u32 = 1;
pub const MADV_SEQUENTIAL: u32 = 2;
pub const MADV_WILLNEED: u32 = 3;
pub const MADV_DONTNEED: u32 = 4;
pub const MADV_FREE: u32 = 5;
pub const MADV_ZERO_WIRED_PAGES: u32 = 6;
pub const MADV_FREE_REUSABLE: u32 = 7;
pub const MADV_FREE_REUSE: u32 = 8;
pub const MADV_CAN_REUSE: u32 = 9;
pub const MADV_PAGEOUT: u32 = 10;
pub const MINCORE_INCORE: u32 = 1;
pub const MINCORE_REFERENCED: u32 = 2;
pub const MINCORE_MODIFIED: u32 = 4;
pub const MINCORE_REFERENCED_OTHER: u32 = 8;
pub const MINCORE_MODIFIED_OTHER: u32 = 16;
pub const MINCORE_PAGED_OUT: u32 = 32;
pub const MINCORE_COPIED: u32 = 64;
pub const MINCORE_ANONYMOUS: u32 = 128;
pub const MSG_NOERROR: u32 = 4096;
pub const GETNCNT: u32 = 3;
pub const GETPID: u32 = 4;
pub const GETVAL: u32 = 5;
pub const GETALL: u32 = 6;
pub const GETZCNT: u32 = 7;
pub const SETVAL: u32 = 8;
pub const SETALL: u32 = 9;
pub const SEM_UNDO: u32 = 4096;
pub const SEM_A: u32 = 128;
pub const SEM_R: u32 = 256;
pub const SHM_RDONLY: u32 = 4096;
pub const SHM_RND: u32 = 8192;
pub const SHMLBA: u32 = 16384;
pub const SHM_R: u32 = 256;
pub const SHM_W: u32 = 128;
pub const PSHMNAMLEN: u32 = 31;
pub const ST_RDONLY: u32 = 1;
pub const ST_NOSUID: u32 = 2;
pub const GRAFTDMG_SECURE_BOOT_CRYPTEX_ARGS_VERSION: u32 = 1;
pub const MAX_GRAFT_ARGS_SIZE: u32 = 512;
pub const SBC_PRESERVE_MOUNT: u32 = 1;
pub const SBC_ALTERNATE_SHARED_REGION: u32 = 2;
pub const SBC_SYSTEM_CONTENT: u32 = 4;
pub const SBC_PANIC_ON_AUTHFAIL: u32 = 8;
pub const SBC_STRICT_AUTH: u32 = 16;
pub const SBC_PRESERVE_GRAFT: u32 = 32;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const SOL_LOCAL: u32 = 0;
pub const LOCAL_PEERCRED: u32 = 1;
pub const LOCAL_PEERPID: u32 = 2;
pub const LOCAL_PEEREPID: u32 = 3;
pub const LOCAL_PEERUUID: u32 = 4;
pub const LOCAL_PEEREUUID: u32 = 5;
pub const LOCAL_PEERTOKEN: u32 = 6;
pub const _SYS_NAMELEN: u32 = 256;
pub const XATTR_NOFOLLOW: u32 = 1;
pub const XATTR_CREATE: u32 = 2;
pub const XATTR_REPLACE: u32 = 4;
pub const XATTR_NOSECURITY: u32 = 8;
pub const XATTR_NODEFAULT: u32 = 16;
pub const XATTR_SHOWCOMPRESSION: u32 = 32;
pub const XATTR_MAXNAMELEN: u32 = 127;
pub const XATTR_FINDERINFO_NAME: &[u8; 21usize] = b"com.apple.FinderInfo\0";
pub const XATTR_RESOURCEFORK_NAME: &[u8; 23usize] = b"com.apple.ResourceFork\0";
pub const _PATH_LOG: &[u8; 16usize] = b"/var/run/syslog\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_NETINFO: u32 = 96;
pub const LOG_REMOTEAUTH: u32 = 104;
pub const LOG_INSTALL: u32 = 112;
pub const LOG_RAS: u32 = 120;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_LAUNCHD: u32 = 192;
pub const LOG_NFACILITIES: u32 = 25;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const TMAGIC: &[u8; 6usize] = b"ustar\0";
pub const TMAGLEN: u32 = 6;
pub const TVERSION: &[u8; 3usize] = b"00\0";
pub const TVERSLEN: u32 = 2;
pub const REGTYPE: u8 = 48u8;
pub const AREGTYPE: u8 = 0u8;
pub const LNKTYPE: u8 = 49u8;
pub const SYMTYPE: u8 = 50u8;
pub const CHRTYPE: u8 = 51u8;
pub const BLKTYPE: u8 = 52u8;
pub const DIRTYPE: u8 = 53u8;
pub const FIFOTYPE: u8 = 54u8;
pub const CONTTYPE: u8 = 55u8;
pub const TSUID: u32 = 2048;
pub const TSGID: u32 = 1024;
pub const TSVTX: u32 = 512;
pub const TUREAD: u32 = 256;
pub const TUWRITE: u32 = 128;
pub const TUEXEC: u32 = 64;
pub const TGREAD: u32 = 32;
pub const TGWRITE: u32 = 16;
pub const TGEXEC: u32 = 8;
pub const TOREAD: u32 = 4;
pub const TOWRITE: u32 = 2;
pub const TOEXEC: u32 = 1;
pub const UL_GETFSIZE: u32 = 1;
pub const UL_SETFSIZE: u32 = 2;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const _PATH_UTMPX: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const UTMPX_FILE: &[u8; 15usize] = b"/var/run/utmpx\0";
pub const _UTX_USERSIZE: u32 = 256;
pub const _UTX_LINESIZE: u32 = 32;
pub const _UTX_IDSIZE: u32 = 4;
pub const _UTX_HOSTSIZE: u32 = 256;
pub const EMPTY: u32 = 0;
pub const RUN_LVL: u32 = 1;
pub const BOOT_TIME: u32 = 2;
pub const OLD_TIME: u32 = 3;
pub const NEW_TIME: u32 = 4;
pub const INIT_PROCESS: u32 = 5;
pub const LOGIN_PROCESS: u32 = 6;
pub const USER_PROCESS: u32 = 7;
pub const DEAD_PROCESS: u32 = 8;
pub const ACCOUNTING: u32 = 9;
pub const SIGNATURE: u32 = 10;
pub const SHUTDOWN_TIME: u32 = 11;
pub const UTMPX_AUTOFILL_MASK: u32 = 32768;
pub const UTMPX_DEAD_IF_CORRESPONDING_MASK: u32 = 16384;
pub const UTMPX_CHANGE_NOTIFICATION: &[u8; 23usize] = b"com.apple.system.utmpx\0";
pub const WRDE_APPEND: u32 = 1;
pub const WRDE_DOOFFS: u32 = 2;
pub const WRDE_NOCMD: u32 = 4;
pub const WRDE_REUSE: u32 = 8;
pub const WRDE_SHOWERR: u32 = 16;
pub const WRDE_UNDEF: u32 = 32;
pub const WRDE_BADCHAR: u32 = 1;
pub const WRDE_BADVAL: u32 = 2;
pub const WRDE_CMDSUB: u32 = 3;
pub const WRDE_NOSPACE: u32 = 4;
pub const WRDE_NOSYS: u32 = 5;
pub const WRDE_SYNTAX: u32 = 6;
pub const BPF_RELEASE: u32 = 199606;
pub const BPF_MAXINSNS: u32 = 512;
pub const BPF_MAXBUFSIZE: u32 = 524288;
pub const BPF_MINBUFSIZE: u32 = 32;
pub const BPF_MAJOR_VERSION: u32 = 1;
pub const BPF_MINOR_VERSION: u32 = 1;
pub const DLT_NULL: u32 = 0;
pub const DLT_EN10MB: u32 = 1;
pub const DLT_EN3MB: u32 = 2;
pub const DLT_AX25: u32 = 3;
pub const DLT_PRONET: u32 = 4;
pub const DLT_CHAOS: u32 = 5;
pub const DLT_IEEE802: u32 = 6;
pub const DLT_ARCNET: u32 = 7;
pub const DLT_SLIP: u32 = 8;
pub const DLT_PPP: u32 = 9;
pub const DLT_FDDI: u32 = 10;
pub const DLT_ATM_RFC1483: u32 = 11;
pub const DLT_RAW: u32 = 12;
pub const DLT_SLIP_BSDOS: u32 = 15;
pub const DLT_PPP_BSDOS: u32 = 16;
pub const DLT_PFSYNC: u32 = 18;
pub const DLT_ATM_CLIP: u32 = 19;
pub const DLT_PPP_SERIAL: u32 = 50;
pub const DLT_PPP_ETHER: u32 = 51;
pub const DLT_SYMANTEC_FIREWALL: u32 = 99;
pub const DLT_MATCHING_MIN: u32 = 104;
pub const DLT_C_HDLC: u32 = 104;
pub const DLT_CHDLC: u32 = 104;
pub const DLT_IEEE802_11: u32 = 105;
pub const DLT_FRELAY: u32 = 107;
pub const DLT_LOOP: u32 = 108;
pub const DLT_ENC: u32 = 109;
pub const DLT_LINUX_SLL: u32 = 113;
pub const DLT_LTALK: u32 = 114;
pub const DLT_ECONET: u32 = 115;
pub const DLT_IPFILTER: u32 = 116;
pub const DLT_PFLOG: u32 = 117;
pub const DLT_CISCO_IOS: u32 = 118;
pub const DLT_PRISM_HEADER: u32 = 119;
pub const DLT_AIRONET_HEADER: u32 = 120;
pub const DLT_HHDLC: u32 = 121;
pub const DLT_IP_OVER_FC: u32 = 122;
pub const DLT_SUNATM: u32 = 123;
pub const DLT_RIO: u32 = 124;
pub const DLT_PCI_EXP: u32 = 125;
pub const DLT_AURORA: u32 = 126;
pub const DLT_IEEE802_11_RADIO: u32 = 127;
pub const DLT_TZSP: u32 = 128;
pub const DLT_ARCNET_LINUX: u32 = 129;
pub const DLT_JUNIPER_MLPPP: u32 = 130;
pub const DLT_JUNIPER_MLFR: u32 = 131;
pub const DLT_JUNIPER_ES: u32 = 132;
pub const DLT_JUNIPER_GGSN: u32 = 133;
pub const DLT_JUNIPER_MFR: u32 = 134;
pub const DLT_JUNIPER_ATM2: u32 = 135;
pub const DLT_JUNIPER_SERVICES: u32 = 136;
pub const DLT_JUNIPER_ATM1: u32 = 137;
pub const DLT_APPLE_IP_OVER_IEEE1394: u32 = 138;
pub const DLT_MTP2_WITH_PHDR: u32 = 139;
pub const DLT_MTP2: u32 = 140;
pub const DLT_MTP3: u32 = 141;
pub const DLT_SCCP: u32 = 142;
pub const DLT_DOCSIS: u32 = 143;
pub const DLT_LINUX_IRDA: u32 = 144;
pub const DLT_IBM_SP: u32 = 145;
pub const DLT_IBM_SN: u32 = 146;
pub const DLT_USER0: u32 = 147;
pub const DLT_USER1: u32 = 148;
pub const DLT_USER2: u32 = 149;
pub const DLT_USER3: u32 = 150;
pub const DLT_USER4: u32 = 151;
pub const DLT_USER5: u32 = 152;
pub const DLT_USER6: u32 = 153;
pub const DLT_USER7: u32 = 154;
pub const DLT_USER8: u32 = 155;
pub const DLT_USER9: u32 = 156;
pub const DLT_USER10: u32 = 157;
pub const DLT_USER11: u32 = 158;
pub const DLT_USER12: u32 = 159;
pub const DLT_USER13: u32 = 160;
pub const DLT_USER14: u32 = 161;
pub const DLT_USER15: u32 = 162;
pub const DLT_IEEE802_11_RADIO_AVS: u32 = 163;
pub const DLT_JUNIPER_MONITOR: u32 = 164;
pub const DLT_BACNET_MS_TP: u32 = 165;
pub const DLT_PPP_PPPD: u32 = 166;
pub const DLT_PPP_WITH_DIRECTION: u32 = 166;
pub const DLT_LINUX_PPP_WITHDIRECTION: u32 = 166;
pub const DLT_JUNIPER_PPPOE: u32 = 167;
pub const DLT_JUNIPER_PPPOE_ATM: u32 = 168;
pub const DLT_GPRS_LLC: u32 = 169;
pub const DLT_GPF_T: u32 = 170;
pub const DLT_GPF_F: u32 = 171;
pub const DLT_GCOM_T1E1: u32 = 172;
pub const DLT_GCOM_SERIAL: u32 = 173;
pub const DLT_JUNIPER_PIC_PEER: u32 = 174;
pub const DLT_ERF_ETH: u32 = 175;
pub const DLT_ERF_POS: u32 = 176;
pub const DLT_LINUX_LAPD: u32 = 177;
pub const DLT_JUNIPER_ETHER: u32 = 178;
pub const DLT_JUNIPER_PPP: u32 = 179;
pub const DLT_JUNIPER_FRELAY: u32 = 180;
pub const DLT_JUNIPER_CHDLC: u32 = 181;
pub const DLT_MFR: u32 = 182;
pub const DLT_JUNIPER_VP: u32 = 183;
pub const DLT_A429: u32 = 184;
pub const DLT_A653_ICM: u32 = 185;
pub const DLT_USB: u32 = 186;
pub const DLT_BLUETOOTH_HCI_H4: u32 = 187;
pub const DLT_IEEE802_16_MAC_CPS: u32 = 188;
pub const DLT_USB_LINUX: u32 = 189;
pub const DLT_CAN20B: u32 = 190;
pub const DLT_IEEE802_15_4_LINUX: u32 = 191;
pub const DLT_PPI: u32 = 192;
pub const DLT_IEEE802_16_MAC_CPS_RADIO: u32 = 193;
pub const DLT_JUNIPER_ISM: u32 = 194;
pub const DLT_IEEE802_15_4: u32 = 195;
pub const DLT_SITA: u32 = 196;
pub const DLT_ERF: u32 = 197;
pub const DLT_RAIF1: u32 = 198;
pub const DLT_IPMB: u32 = 199;
pub const DLT_JUNIPER_ST: u32 = 200;
pub const DLT_BLUETOOTH_HCI_H4_WITH_PHDR: u32 = 201;
pub const DLT_AX25_KISS: u32 = 202;
pub const DLT_LAPD: u32 = 203;
pub const DLT_PPP_WITH_DIR: u32 = 204;
pub const DLT_C_HDLC_WITH_DIR: u32 = 205;
pub const DLT_FRELAY_WITH_DIR: u32 = 206;
pub const DLT_LAPB_WITH_DIR: u32 = 207;
pub const DLT_IPMB_LINUX: u32 = 209;
pub const DLT_FLEXRAY: u32 = 210;
pub const DLT_MOST: u32 = 211;
pub const DLT_LIN: u32 = 212;
pub const DLT_X2E_SERIAL: u32 = 213;
pub const DLT_X2E_XORAYA: u32 = 214;
pub const DLT_IEEE802_15_4_NONASK_PHY: u32 = 215;
pub const DLT_LINUX_EVDEV: u32 = 216;
pub const DLT_GSMTAP_UM: u32 = 217;
pub const DLT_GSMTAP_ABIS: u32 = 218;
pub const DLT_MPLS: u32 = 219;
pub const DLT_USB_LINUX_MMAPPED: u32 = 220;
pub const DLT_DECT: u32 = 221;
pub const DLT_AOS: u32 = 222;
pub const DLT_WIHART: u32 = 223;
pub const DLT_FC_2: u32 = 224;
pub const DLT_FC_2_WITH_FRAME_DELIMS: u32 = 225;
pub const DLT_IPNET: u32 = 226;
pub const DLT_CAN_SOCKETCAN: u32 = 227;
pub const DLT_IPV4: u32 = 228;
pub const DLT_IPV6: u32 = 229;
pub const DLT_IEEE802_15_4_NOFCS: u32 = 230;
pub const DLT_DBUS: u32 = 231;
pub const DLT_JUNIPER_VS: u32 = 232;
pub const DLT_JUNIPER_SRX_E2E: u32 = 233;
pub const DLT_JUNIPER_FIBRECHANNEL: u32 = 234;
pub const DLT_DVB_CI: u32 = 235;
pub const DLT_MUX27010: u32 = 236;
pub const DLT_STANAG_5066_D_PDU: u32 = 237;
pub const DLT_JUNIPER_ATM_CEMIC: u32 = 238;
pub const DLT_NFLOG: u32 = 239;
pub const DLT_NETANALYZER: u32 = 240;
pub const DLT_NETANALYZER_TRANSPARENT: u32 = 241;
pub const DLT_IPOIB: u32 = 242;
pub const DLT_MPEG_2_TS: u32 = 243;
pub const DLT_NG40: u32 = 244;
pub const DLT_NFC_LLCP: u32 = 245;
pub const DLT_USB_DARWIN: u32 = 266;
pub const DLT_MATCHING_MAX: u32 = 266;
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_A: u32 = 16;
pub const BPF_TAX: u32 = 0;
pub const BPF_TXA: u32 = 128;
pub const BPF_MEMWORDS: u32 = 16;
pub const ETHER_ADDR_LEN: u32 = 6;
pub const ETHER_TYPE_LEN: u32 = 2;
pub const ETHER_CRC_LEN: u32 = 4;
pub const ETHER_HDR_LEN: u32 = 14;
pub const ETHER_MIN_LEN: u32 = 64;
pub const ETHER_MAX_LEN: u32 = 1518;
pub const ETHER_ALIGN: u32 = 2;
pub const ETHERTYPE_PUP: u32 = 512;
pub const ETHERTYPE_IP: u32 = 2048;
pub const ETHERTYPE_ARP: u32 = 2054;
pub const ETHERTYPE_REVARP: u32 = 32821;
pub const ETHERTYPE_VLAN: u32 = 33024;
pub const ETHERTYPE_IPV6: u32 = 34525;
pub const ETHERTYPE_PAE: u32 = 34958;
pub const ETHERTYPE_RSN_PREAUTH: u32 = 35015;
pub const ETHERTYPE_PTP: u32 = 35063;
pub const ETHERTYPE_LOOPBACK: u32 = 36864;
pub const ETHERTYPE_TRAIL: u32 = 4096;
pub const ETHERTYPE_NTRAILER: u32 = 16;
pub const ETHERMTU: u32 = 1500;
pub const ETHERMIN: u32 = 46;
pub const ARPHRD_ETHER: u32 = 1;
pub const ARPHRD_IEEE802: u32 = 6;
pub const ARPHRD_FRELAY: u32 = 15;
pub const ARPHRD_IEEE1394: u32 = 24;
pub const ARPHRD_IEEE1394_EUI64: u32 = 27;
pub const ARPOP_REQUEST: u32 = 1;
pub const ARPOP_REPLY: u32 = 2;
pub const ARPOP_REVREQUEST: u32 = 3;
pub const ARPOP_REVREPLY: u32 = 4;
pub const ARPOP_INVREQUEST: u32 = 8;
pub const ARPOP_INVREPLY: u32 = 9;
pub const ATF_INUSE: u32 = 1;
pub const ATF_COM: u32 = 2;
pub const ATF_PERM: u32 = 4;
pub const ATF_PUBL: u32 = 8;
pub const ATF_USETRAILERS: u32 = 16;
pub const LLC_ISFRAMELEN: u32 = 4;
pub const LLC_UFRAMELEN: u32 = 3;
pub const LLC_FRMRLEN: u32 = 7;
pub const LLC_SNAPFRAMELEN: u32 = 8;
pub const LLC_UI: u32 = 3;
pub const LLC_UI_P: u32 = 19;
pub const LLC_DISC: u32 = 67;
pub const LLC_DISC_P: u32 = 83;
pub const LLC_UA: u32 = 99;
pub const LLC_UA_P: u32 = 115;
pub const LLC_TEST: u32 = 227;
pub const LLC_TEST_P: u32 = 243;
pub const LLC_FRMR: u32 = 135;
pub const LLC_FRMR_P: u32 = 151;
pub const LLC_DM: u32 = 15;
pub const LLC_DM_P: u32 = 31;
pub const LLC_XID: u32 = 175;
pub const LLC_XID_P: u32 = 191;
pub const LLC_SABME: u32 = 111;
pub const LLC_SABME_P: u32 = 127;
pub const LLC_RR: u32 = 1;
pub const LLC_RNR: u32 = 5;
pub const LLC_REJ: u32 = 9;
pub const LLC_INFO: u32 = 0;
pub const LLC_8021D_LSAP: u32 = 66;
pub const LLC_X25_LSAP: u32 = 126;
pub const LLC_SNAP_LSAP: u32 = 170;
pub const LLC_ISO_LSAP: u32 = 254;
pub const LLC_XID_FORMAT_BASIC: u32 = 129;
pub const LLC_XID_BASIC_MINLEN: u32 = 6;
pub const LLC_XID_CLASS_I: u32 = 1;
pub const LLC_XID_CLASS_II: u32 = 3;
pub const LLC_XID_CLASS_III: u32 = 5;
pub const LLC_XID_CLASS_IV: u32 = 7;
pub const IFM_ETHER: u32 = 32;
pub const IFM_10_T: u32 = 3;
pub const IFM_10_2: u32 = 4;
pub const IFM_10_5: u32 = 5;
pub const IFM_100_TX: u32 = 6;
pub const IFM_100_FX: u32 = 7;
pub const IFM_100_T4: u32 = 8;
pub const IFM_100_VG: u32 = 9;
pub const IFM_100_T2: u32 = 10;
pub const IFM_1000_SX: u32 = 11;
pub const IFM_10_STP: u32 = 12;
pub const IFM_10_FL: u32 = 13;
pub const IFM_1000_LX: u32 = 14;
pub const IFM_1000_CX: u32 = 15;
pub const IFM_1000_T: u32 = 16;
pub const IFM_HPNA_1: u32 = 17;
pub const IFM_10G_SR: u32 = 18;
pub const IFM_10G_LR: u32 = 19;
pub const IFM_10G_CX4: u32 = 20;
pub const IFM_10G_T: u32 = 21;
pub const IFM_2500_T: u32 = 22;
pub const IFM_5000_T: u32 = 23;
pub const IFM_1000_CX_SGMII: u32 = 24;
pub const IFM_1000_KX: u32 = 25;
pub const IFM_10G_KX4: u32 = 26;
pub const IFM_10G_KR: u32 = 27;
pub const IFM_10G_CR1: u32 = 28;
pub const IFM_10G_ER: u32 = 29;
pub const IFM_20G_KR2: u32 = 30;
pub const IFM_OTHER: u32 = 31;
pub const IFM_TOKEN: u32 = 64;
pub const IFM_TOK_STP4: u32 = 3;
pub const IFM_TOK_STP16: u32 = 4;
pub const IFM_TOK_UTP4: u32 = 5;
pub const IFM_TOK_UTP16: u32 = 6;
pub const IFM_TOK_STP100: u32 = 7;
pub const IFM_TOK_UTP100: u32 = 8;
pub const IFM_TOK_ETR: u32 = 512;
pub const IFM_TOK_SRCRT: u32 = 1024;
pub const IFM_TOK_ALLR: u32 = 2048;
pub const IFM_TOK_DTR: u32 = 8192;
pub const IFM_TOK_CLASSIC: u32 = 16384;
pub const IFM_TOK_AUTO: u32 = 32768;
pub const IFM_FDDI: u32 = 96;
pub const IFM_FDDI_SMF: u32 = 3;
pub const IFM_FDDI_MMF: u32 = 4;
pub const IFM_FDDI_UTP: u32 = 5;
pub const IFM_FDDI_DA: u32 = 256;
pub const IFM_IEEE80211: u32 = 128;
pub const IFM_IEEE80211_FH1: u32 = 3;
pub const IFM_IEEE80211_FH2: u32 = 4;
pub const IFM_IEEE80211_DS2: u32 = 5;
pub const IFM_IEEE80211_DS5: u32 = 6;
pub const IFM_IEEE80211_DS11: u32 = 7;
pub const IFM_IEEE80211_DS1: u32 = 8;
pub const IFM_IEEE80211_DS22: u32 = 9;
pub const IFM_IEEE80211_ADHOC: u32 = 256;
pub const IFM_AUTO: u32 = 0;
pub const IFM_MANUAL: u32 = 1;
pub const IFM_NONE: u32 = 2;
pub const IFM_FDX: u32 = 1048576;
pub const IFM_HDX: u32 = 2097152;
pub const IFM_FLOW: u32 = 4194304;
pub const IFM_EEE: u32 = 8388608;
pub const IFM_FLAG0: u32 = 16777216;
pub const IFM_FLAG1: u32 = 33554432;
pub const IFM_FLAG2: u32 = 67108864;
pub const IFM_LOOP: u32 = 134217728;
pub const IFM_TMASK_COMPAT: u32 = 31;
pub const IFM_TMASK_EXT: u32 = 983040;
pub const IFM_TMASK_EXT_SHIFT: u32 = 11;
pub const IFM_NMASK: u32 = 224;
pub const IFM_TMASK: u32 = 983071;
pub const IFM_IMASK: u32 = 4026531840;
pub const IFM_ISHIFT: u32 = 28;
pub const IFM_OMASK: u32 = 65280;
pub const IFM_GMASK: u32 = 267386880;
pub const IFM_AVALID: u32 = 1;
pub const IFM_ACTIVE: u32 = 2;
pub const IFM_WAKESAMENET: u32 = 4;
pub const _NET_IF_MIB_H: u32 = 1;
pub const IFMIB_SYSTEM: u32 = 1;
pub const IFMIB_IFDATA: u32 = 2;
pub const IFMIB_IFALLDATA: u32 = 3;
pub const IFDATA_GENERAL: u32 = 1;
pub const IFDATA_LINKSPECIFIC: u32 = 2;
pub const IFDATA_ADDRS: u32 = 3;
pub const IFDATA_MULTIADDRS: u32 = 4;
pub const IFMIB_IFCOUNT: u32 = 1;
pub const NETLINK_GENERIC: u32 = 0;
pub const DOT3COMPLIANCE_STATS: u32 = 1;
pub const DOT3COMPLIANCE_COLLS: u32 = 2;
pub const UTUN_CONTROL_NAME: &[u8; 27usize] = b"com.apple.net.utun_control\0";
pub const UTUN_OPT_FLAGS: u32 = 1;
pub const UTUN_OPT_IFNAME: u32 = 2;
pub const UTUN_OPT_EXT_IFDATA_STATS: u32 = 3;
pub const UTUN_OPT_INC_IFDATA_STATS_IN: u32 = 4;
pub const UTUN_OPT_INC_IFDATA_STATS_OUT: u32 = 5;
pub const UTUN_OPT_SET_DELEGATE_INTERFACE: u32 = 15;
pub const UTUN_OPT_MAX_PENDING_PACKETS: u32 = 16;
pub const UTUN_OPT_ENABLE_CHANNEL: u32 = 17;
pub const UTUN_OPT_GET_CHANNEL_UUID: u32 = 18;
pub const UTUN_OPT_ENABLE_FLOWSWITCH: u32 = 19;
pub const UTUN_OPT_ENABLE_NETIF: u32 = 20;
pub const UTUN_OPT_SLOT_SIZE: u32 = 21;
pub const UTUN_OPT_NETIF_RING_SIZE: u32 = 22;
pub const UTUN_OPT_TX_FSW_RING_SIZE: u32 = 23;
pub const UTUN_OPT_RX_FSW_RING_SIZE: u32 = 24;
pub const UTUN_OPT_KPIPE_TX_RING_SIZE: u32 = 25;
pub const UTUN_OPT_KPIPE_RX_RING_SIZE: u32 = 26;
pub const UTUN_OPT_ATTACH_FLOWSWITCH: u32 = 27;
pub const UTUN_FLAGS_NO_OUTPUT: u32 = 1;
pub const UTUN_FLAGS_NO_INPUT: u32 = 2;
pub const UTUN_FLAGS_ENABLE_PROC_UUID: u32 = 4;
pub const IF_CELLULAR_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_VERSION_1: u32 = 1;
pub const IF_CELLULAR_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_WIFI_STATUS_REPORT_CURRENT_VERSION: u32 = 1;
pub const IF_CELL_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_CELL_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_CELL_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_CELL_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_CELL_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_CELL_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_CELL_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_CELL_UL_BYTES_LOST_VALID: u32 = 128;
pub const IF_CELL_UL_MIN_QUEUE_SIZE_VALID: u32 = 256;
pub const IF_CELL_UL_AVG_QUEUE_SIZE_VALID: u32 = 512;
pub const IF_CELL_UL_MAX_QUEUE_SIZE_VALID: u32 = 1024;
pub const IF_CELL_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2048;
pub const IF_CELL_DL_MAX_BANDWIDTH_VALID: u32 = 4096;
pub const IF_CELL_CONFIG_INACTIVITY_TIME_VALID: u32 = 8192;
pub const IF_CELL_CONFIG_BACKOFF_TIME_VALID: u32 = 16384;
pub const IF_CELL_UL_MSS_RECOMMENDED_VALID: u32 = 32768;
pub const IF_CELL_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_CELL_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_CELL_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_CELL_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_CELL_UL_MSS_RECOMMENDED_NONE: u32 = 0;
pub const IF_CELL_UL_MSS_RECOMMENDED_MEDIUM: u32 = 1;
pub const IF_CELL_UL_MSS_RECOMMENDED_LOW: u32 = 2;
pub const IF_WIFI_LINK_QUALITY_METRIC_VALID: u32 = 1;
pub const IF_WIFI_UL_EFFECTIVE_BANDWIDTH_VALID: u32 = 2;
pub const IF_WIFI_UL_MAX_BANDWIDTH_VALID: u32 = 4;
pub const IF_WIFI_UL_MIN_LATENCY_VALID: u32 = 8;
pub const IF_WIFI_UL_EFFECTIVE_LATENCY_VALID: u32 = 16;
pub const IF_WIFI_UL_MAX_LATENCY_VALID: u32 = 32;
pub const IF_WIFI_UL_RETXT_LEVEL_VALID: u32 = 64;
pub const IF_WIFI_UL_ERROR_RATE_VALID: u32 = 128;
pub const IF_WIFI_UL_BYTES_LOST_VALID: u32 = 256;
pub const IF_WIFI_DL_EFFECTIVE_BANDWIDTH_VALID: u32 = 512;
pub const IF_WIFI_DL_MAX_BANDWIDTH_VALID: u32 = 1024;
pub const IF_WIFI_DL_MIN_LATENCY_VALID: u32 = 2048;
pub const IF_WIFI_DL_EFFECTIVE_LATENCY_VALID: u32 = 4096;
pub const IF_WIFI_DL_MAX_LATENCY_VALID: u32 = 8192;
pub const IF_WIFI_DL_ERROR_RATE_VALID: u32 = 16384;
pub const IF_WIFI_CONFIG_FREQUENCY_VALID: u32 = 32768;
pub const IF_WIFI_CONFIG_MULTICAST_RATE_VALID: u32 = 65536;
pub const IF_WIFI_CONFIG_SCAN_COUNT_VALID: u32 = 131072;
pub const IF_WIFI_CONFIG_SCAN_DURATION_VALID: u32 = 262144;
pub const IF_WIFI_UL_RETXT_LEVEL_NONE: u32 = 1;
pub const IF_WIFI_UL_RETXT_LEVEL_LOW: u32 = 2;
pub const IF_WIFI_UL_RETXT_LEVEL_MEDIUM: u32 = 3;
pub const IF_WIFI_UL_RETXT_LEVEL_HIGH: u32 = 4;
pub const IF_WIFI_CONFIG_FREQUENCY_2_4_GHZ: u32 = 1;
pub const IF_WIFI_CONFIG_FREQUENCY_5_0_GHZ: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_BT: u32 = 1;
pub const IF_INTERFACE_ADVISORY_WIFI_RADIO_COEX_AWDL: u32 = 2;
pub const IF_INTERFACE_ADVISORY_WIFI_TX_QUEUE_COUNT: u32 = 6;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_NO: u32 = 0;
pub const IF_INTERFACE_ADVISORY_CELL_OUTAGE_STATE_YES: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_TYPE_INET: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_INBOUND: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_FLAG_OUTBOUND: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_IPVER: u32 = 1;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_PROTO: u32 = 2;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LADDR: u32 = 4;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RADDR: u32 = 8;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_LPORT: u32 = 16;
pub const IFNET_TRAFFIC_DESCRIPTOR_INET_RPORT: u32 = 32;
pub const IFNET_TRAFFIC_RULE_ACTION_STEER: u32 = 1;
pub const NFF_BEFORE: u32 = 1;
pub const NFF_AFTER: u32 = 2;
pub const NKE_OK: u32 = 0;
pub const NKE_REMOVE: i32 = -1;
pub const NDRV_DEMUXTYPE_ETHERTYPE: u32 = 4;
pub const NDRV_DEMUXTYPE_SAP: u32 = 5;
pub const NDRV_DEMUXTYPE_SNAP: u32 = 6;
pub const NDRVPROTO_NDRV: u32 = 0;
pub const NDRV_PROTOCOL_DESC_VERS: u32 = 1;
pub const SOL_NDRVPROTO: u32 = 0;
pub const NDRV_DELDMXSPEC: u32 = 2;
pub const NDRV_SETDMXSPEC: u32 = 4;
pub const NDRV_ADDMULTICAST: u32 = 5;
pub const NDRV_DELMULTICAST: u32 = 6;
pub const NDRV_DMUX_MAX_DESCR: u32 = 1024;
pub const NRDV_MULTICAST_ADDRS_PER_SOCK: u32 = 1;
pub const __PFKEY_V2_H: u32 = 1;
pub const PF_KEY_V2: u32 = 2;
pub const PFKEYV2_REVISION: u32 = 199806;
pub const SADB_RESERVED: u32 = 0;
pub const SADB_GETSPI: u32 = 1;
pub const SADB_UPDATE: u32 = 2;
pub const SADB_ADD: u32 = 3;
pub const SADB_DELETE: u32 = 4;
pub const SADB_GET: u32 = 5;
pub const SADB_ACQUIRE: u32 = 6;
pub const SADB_REGISTER: u32 = 7;
pub const SADB_EXPIRE: u32 = 8;
pub const SADB_FLUSH: u32 = 9;
pub const SADB_DUMP: u32 = 10;
pub const SADB_X_PROMISC: u32 = 11;
pub const SADB_X_PCHANGE: u32 = 12;
pub const SADB_X_SPDUPDATE: u32 = 13;
pub const SADB_X_SPDADD: u32 = 14;
pub const SADB_X_SPDDELETE: u32 = 15;
pub const SADB_X_SPDGET: u32 = 16;
pub const SADB_X_SPDACQUIRE: u32 = 17;
pub const SADB_X_SPDDUMP: u32 = 18;
pub const SADB_X_SPDFLUSH: u32 = 19;
pub const SADB_X_SPDSETIDX: u32 = 20;
pub const SADB_X_SPDEXPIRE: u32 = 21;
pub const SADB_X_SPDDELETE2: u32 = 22;
pub const SADB_GETSASTAT: u32 = 23;
pub const SADB_X_SPDENABLE: u32 = 24;
pub const SADB_X_SPDDISABLE: u32 = 25;
pub const SADB_MIGRATE: u32 = 26;
pub const SADB_MAX: u32 = 26;
pub const SADB_EXT_RESERVED: u32 = 0;
pub const SADB_EXT_SA: u32 = 1;
pub const SADB_EXT_LIFETIME_CURRENT: u32 = 2;
pub const SADB_EXT_LIFETIME_HARD: u32 = 3;
pub const SADB_EXT_LIFETIME_SOFT: u32 = 4;
pub const SADB_EXT_ADDRESS_SRC: u32 = 5;
pub const SADB_EXT_ADDRESS_DST: u32 = 6;
pub const SADB_EXT_ADDRESS_PROXY: u32 = 7;
pub const SADB_EXT_KEY_AUTH: u32 = 8;
pub const SADB_EXT_KEY_ENCRYPT: u32 = 9;
pub const SADB_EXT_IDENTITY_SRC: u32 = 10;
pub const SADB_EXT_IDENTITY_DST: u32 = 11;
pub const SADB_EXT_SENSITIVITY: u32 = 12;
pub const SADB_EXT_PROPOSAL: u32 = 13;
pub const SADB_EXT_SUPPORTED_AUTH: u32 = 14;
pub const SADB_EXT_SUPPORTED_ENCRYPT: u32 = 15;
pub const SADB_EXT_SPIRANGE: u32 = 16;
pub const SADB_X_EXT_KMPRIVATE: u32 = 17;
pub const SADB_X_EXT_POLICY: u32 = 18;
pub const SADB_X_EXT_SA2: u32 = 19;
pub const SADB_EXT_SESSION_ID: u32 = 20;
pub const SADB_EXT_SASTAT: u32 = 21;
pub const SADB_X_EXT_IPSECIF: u32 = 22;
pub const SADB_X_EXT_ADDR_RANGE_SRC_START: u32 = 23;
pub const SADB_X_EXT_ADDR_RANGE_SRC_END: u32 = 24;
pub const SADB_X_EXT_ADDR_RANGE_DST_START: u32 = 25;
pub const SADB_X_EXT_ADDR_RANGE_DST_END: u32 = 26;
pub const SADB_EXT_MIGRATE_ADDRESS_SRC: u32 = 27;
pub const SADB_EXT_MIGRATE_ADDRESS_DST: u32 = 28;
pub const SADB_X_EXT_MIGRATE_IPSECIF: u32 = 29;
pub const SADB_EXT_MAX: u32 = 29;
pub const SADB_SATYPE_UNSPEC: u32 = 0;
pub const SADB_SATYPE_AH: u32 = 2;
pub const SADB_SATYPE_ESP: u32 = 3;
pub const SADB_SATYPE_RSVP: u32 = 5;
pub const SADB_SATYPE_OSPFV2: u32 = 6;
pub const SADB_SATYPE_RIPV2: u32 = 7;
pub const SADB_SATYPE_MIP: u32 = 8;
pub const SADB_X_SATYPE_IPCOMP: u32 = 9;
pub const SADB_X_SATYPE_POLICY: u32 = 10;
pub const SADB_SATYPE_MAX: u32 = 11;
pub const SADB_SASTATE_LARVAL: u32 = 0;
pub const SADB_SASTATE_MATURE: u32 = 1;
pub const SADB_SASTATE_DYING: u32 = 2;
pub const SADB_SASTATE_DEAD: u32 = 3;
pub const SADB_SASTATE_MAX: u32 = 3;
pub const SADB_SAFLAGS_PFS: u32 = 1;
pub const SADB_AALG_NONE: u32 = 0;
pub const SADB_AALG_MD5HMAC: u32 = 1;
pub const SADB_AALG_SHA1HMAC: u32 = 2;
pub const SADB_AALG_MAX: u32 = 8;
pub const SADB_X_AALG_SHA2_256: u32 = 6;
pub const SADB_X_AALG_SHA2_384: u32 = 7;
pub const SADB_X_AALG_SHA2_512: u32 = 8;
pub const SADB_X_AALG_MD5: u32 = 3;
pub const SADB_X_AALG_SHA: u32 = 4;
pub const SADB_X_AALG_NULL: u32 = 5;
pub const SADB_EALG_NONE: u32 = 0;
pub const SADB_EALG_DESCBC: u32 = 1;
pub const SADB_EALG_3DESCBC: u32 = 2;
pub const SADB_EALG_NULL: u32 = 3;
pub const SADB_EALG_MAX: u32 = 12;
pub const SADB_X_EALG_CAST128CBC: u32 = 5;
pub const SADB_X_EALG_BLOWFISHCBC: u32 = 4;
pub const SADB_X_EALG_RIJNDAELCBC: u32 = 12;
pub const SADB_X_EALG_AESCBC: u32 = 12;
pub const SADB_X_EALG_AES: u32 = 12;
pub const SADB_X_EALG_AES_GCM: u32 = 13;
pub const SADB_X_EALG_CHACHA20POLY1305: u32 = 14;
pub const SADB_X_CALG_NONE: u32 = 0;
pub const SADB_X_CALG_OUI: u32 = 1;
pub const SADB_X_CALG_DEFLATE: u32 = 2;
pub const SADB_X_CALG_LZS: u32 = 3;
pub const SADB_X_CALG_MAX: u32 = 4;
pub const SADB_IDENTTYPE_RESERVED: u32 = 0;
pub const SADB_IDENTTYPE_PREFIX: u32 = 1;
pub const SADB_IDENTTYPE_FQDN: u32 = 2;
pub const SADB_IDENTTYPE_USERFQDN: u32 = 3;
pub const SADB_X_IDENTTYPE_ADDR: u32 = 4;
pub const SADB_IDENTTYPE_MAX: u32 = 4;
pub const SADB_X_EXT_NONE: u32 = 0;
pub const SADB_X_EXT_OLD: u32 = 1;
pub const SADB_X_EXT_IV4B: u32 = 16;
pub const SADB_X_EXT_DERIV: u32 = 32;
pub const SADB_X_EXT_CYCSEQ: u32 = 64;
pub const SADB_X_EXT_PSEQ: u32 = 0;
pub const SADB_X_EXT_PRAND: u32 = 256;
pub const SADB_X_EXT_PZERO: u32 = 512;
pub const SADB_X_EXT_PMASK: u32 = 768;
pub const SADB_X_EXT_IIV: u32 = 1024;
pub const SADB_X_EXT_RAWCPI: u32 = 128;
pub const SADB_KEY_FLAGS_MAX: u32 = 32767;
pub const SADB_X_LIFETIME_ALLOCATIONS: u32 = 0;
pub const SADB_X_LIFETIME_BYTES: u32 = 1;
pub const SADB_X_LIFETIME_ADDTIME: u32 = 2;
pub const SADB_X_LIFETIME_USETIME: u32 = 3;
pub const PFKEY_SOFT_LIFETIME_RATE: u32 = 80;
pub const RTM_RTTUNIT: u32 = 1000000;
pub const RTF_UP: u32 = 1;
pub const RTF_GATEWAY: u32 = 2;
pub const RTF_HOST: u32 = 4;
pub const RTF_REJECT: u32 = 8;
pub const RTF_DYNAMIC: u32 = 16;
pub const RTF_MODIFIED: u32 = 32;
pub const RTF_DONE: u32 = 64;
pub const RTF_DELCLONE: u32 = 128;
pub const RTF_CLONING: u32 = 256;
pub const RTF_XRESOLVE: u32 = 512;
pub const RTF_LLINFO: u32 = 1024;
pub const RTF_LLDATA: u32 = 1024;
pub const RTF_STATIC: u32 = 2048;
pub const RTF_BLACKHOLE: u32 = 4096;
pub const RTF_NOIFREF: u32 = 8192;
pub const RTF_PROTO2: u32 = 16384;
pub const RTF_PROTO1: u32 = 32768;
pub const RTF_PRCLONING: u32 = 65536;
pub const RTF_WASCLONED: u32 = 131072;
pub const RTF_PROTO3: u32 = 262144;
pub const RTF_PINNED: u32 = 1048576;
pub const RTF_LOCAL: u32 = 2097152;
pub const RTF_BROADCAST: u32 = 4194304;
pub const RTF_MULTICAST: u32 = 8388608;
pub const RTF_IFSCOPE: u32 = 16777216;
pub const RTF_CONDEMNED: u32 = 33554432;
pub const RTF_IFREF: u32 = 67108864;
pub const RTF_PROXY: u32 = 134217728;
pub const RTF_ROUTER: u32 = 268435456;
pub const RTF_DEAD: u32 = 536870912;
pub const RTF_GLOBAL: u32 = 1073741824;
pub const RTPRF_OURS: u32 = 262144;
pub const RTF_BITS : & [u8 ; 223usize] = b"\x10\x01UP\x02GATEWAY\x03HOST\x04REJECT\x05DYNAMIC\x06MODIFIED\x07DONE\x08DELCLONE\tCLONING\nXRESOLVE\x0BLLINFO\x0CSTATIC\rBLACKHOLE\x0ENOIFREF\x0FPROTO2\x10PROTO1\x11PRCLONING\x12WASCLONED\x13PROTO3\x15PINNED\x16LOCAL\x17BROADCAST\x18MULTICAST\x19IFSCOPE\x1ACONDEMNED\x1BIFREF\x1CPROXY\x1DROUTER\x1FGLOBAL\0" ;
pub const RTM_VERSION: u32 = 5;
pub const RTM_ADD: u32 = 1;
pub const RTM_DELETE: u32 = 2;
pub const RTM_CHANGE: u32 = 3;
pub const RTM_GET: u32 = 4;
pub const RTM_LOSING: u32 = 5;
pub const RTM_REDIRECT: u32 = 6;
pub const RTM_MISS: u32 = 7;
pub const RTM_LOCK: u32 = 8;
pub const RTM_OLDADD: u32 = 9;
pub const RTM_OLDDEL: u32 = 10;
pub const RTM_RESOLVE: u32 = 11;
pub const RTM_NEWADDR: u32 = 12;
pub const RTM_DELADDR: u32 = 13;
pub const RTM_IFINFO: u32 = 14;
pub const RTM_NEWMADDR: u32 = 15;
pub const RTM_DELMADDR: u32 = 16;
pub const RTM_IFINFO2: u32 = 18;
pub const RTM_NEWMADDR2: u32 = 19;
pub const RTM_GET2: u32 = 20;
pub const RTV_MTU: u32 = 1;
pub const RTV_HOPCOUNT: u32 = 2;
pub const RTV_EXPIRE: u32 = 4;
pub const RTV_RPIPE: u32 = 8;
pub const RTV_SPIPE: u32 = 16;
pub const RTV_SSTHRESH: u32 = 32;
pub const RTV_RTT: u32 = 64;
pub const RTV_RTTVAR: u32 = 128;
pub const RTA_DST: u32 = 1;
pub const RTA_GATEWAY: u32 = 2;
pub const RTA_NETMASK: u32 = 4;
pub const RTA_GENMASK: u32 = 8;
pub const RTA_IFP: u32 = 16;
pub const RTA_IFA: u32 = 32;
pub const RTA_AUTHOR: u32 = 64;
pub const RTA_BRD: u32 = 128;
pub const RTAX_DST: u32 = 0;
pub const RTAX_GATEWAY: u32 = 1;
pub const RTAX_NETMASK: u32 = 2;
pub const RTAX_GENMASK: u32 = 3;
pub const RTAX_IFP: u32 = 4;
pub const RTAX_IFA: u32 = 5;
pub const RTAX_AUTHOR: u32 = 6;
pub const RTAX_BRD: u32 = 7;
pub const RTAX_MAX: u32 = 8;
pub const IPVERSION: u32 = 4;
pub const IP_RF: u32 = 32768;
pub const IP_DF: u32 = 16384;
pub const IP_MF: u32 = 8192;
pub const IP_OFFMASK: u32 = 8191;
pub const IP_MAXPACKET: u32 = 65535;
pub const IPTOS_LOWDELAY: u32 = 16;
pub const IPTOS_THROUGHPUT: u32 = 8;
pub const IPTOS_RELIABILITY: u32 = 4;
pub const IPTOS_MINCOST: u32 = 2;
pub const IPTOS_CE: u32 = 1;
pub const IPTOS_ECT: u32 = 2;
pub const IPTOS_DSCP_SHIFT: u32 = 2;
pub const IPTOS_ECN_NOTECT: u32 = 0;
pub const IPTOS_ECN_ECT1: u32 = 1;
pub const IPTOS_ECN_ECT0: u32 = 2;
pub const IPTOS_ECN_CE: u32 = 3;
pub const IPTOS_ECN_MASK: u32 = 3;
pub const IPTOS_PREC_NETCONTROL: u32 = 224;
pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
pub const IPTOS_PREC_FLASH: u32 = 96;
pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
pub const IPTOS_PREC_PRIORITY: u32 = 32;
pub const IPTOS_PREC_ROUTINE: u32 = 0;
pub const IPOPT_CONTROL: u32 = 0;
pub const IPOPT_RESERVED1: u32 = 32;
pub const IPOPT_DEBMEAS: u32 = 64;
pub const IPOPT_RESERVED2: u32 = 96;
pub const IPOPT_EOL: u32 = 0;
pub const IPOPT_NOP: u32 = 1;
pub const IPOPT_RR: u32 = 7;
pub const IPOPT_TS: u32 = 68;
pub const IPOPT_SECURITY: u32 = 130;
pub const IPOPT_LSRR: u32 = 131;
pub const IPOPT_SATID: u32 = 136;
pub const IPOPT_SSRR: u32 = 137;
pub const IPOPT_RA: u32 = 148;
pub const IPOPT_OPTVAL: u32 = 0;
pub const IPOPT_OLEN: u32 = 1;
pub const IPOPT_OFFSET: u32 = 2;
pub const IPOPT_MINOFF: u32 = 4;
pub const IPOPT_TS_TSONLY: u32 = 0;
pub const IPOPT_TS_TSANDADDR: u32 = 1;
pub const IPOPT_TS_PRESPEC: u32 = 3;
pub const IPOPT_SECUR_UNCLASS: u32 = 0;
pub const IPOPT_SECUR_CONFID: u32 = 61749;
pub const IPOPT_SECUR_EFTO: u32 = 30874;
pub const IPOPT_SECUR_MMMM: u32 = 48205;
pub const IPOPT_SECUR_RESTR: u32 = 44819;
pub const IPOPT_SECUR_SECRET: u32 = 55176;
pub const IPOPT_SECUR_TOPSECRET: u32 = 27589;
pub const MAXTTL: u32 = 255;
pub const IPDEFTTL: u32 = 64;
pub const IPFRAGTTL: u32 = 30;
pub const IPTTLDEC: u32 = 1;
pub const IP_MSS: u32 = 576;
pub const UDP_NOCKSUM: u32 = 1;
pub const BOOTREQUEST: u32 = 1;
pub const BOOTREPLY: u32 = 2;
pub const IPPORT_BOOTPS: u32 = 67;
pub const IPPORT_BOOTPC: u32 = 68;
pub const VM_STANFORD: &[u8; 5usize] = b"STAN\0";
pub const VF_PCBOOT: u32 = 1;
pub const VF_HELP: u32 = 2;
pub const NVMAXTEXT: u32 = 55;
pub const VM_NEXT: &[u8; 5usize] = b"NeXT\0";
pub const BPOP_OK: u32 = 0;
pub const BPOP_QUERY: u32 = 1;
pub const BPOP_QUERY_NE: u32 = 2;
pub const BPOP_ERROR: u32 = 3;
pub const BOOTP_MIN_BACKOFF: u32 = 2047;
pub const BOOTP_MAX_BACKOFF: u32 = 65535;
pub const BOOTP_RETRY: u32 = 6;
pub const ICMPV6_PLD_MAXLEN: u32 = 1232;
pub const ICMP6_DST_UNREACH: u32 = 1;
pub const ICMP6_PACKET_TOO_BIG: u32 = 2;
pub const ICMP6_TIME_EXCEEDED: u32 = 3;
pub const ICMP6_PARAM_PROB: u32 = 4;
pub const ICMP6_ECHO_REQUEST: u32 = 128;
pub const ICMP6_ECHO_REPLY: u32 = 129;
pub const MLD_LISTENER_QUERY: u32 = 130;
pub const MLD_LISTENER_REPORT: u32 = 131;
pub const MLD_LISTENER_DONE: u32 = 132;
pub const MLD_LISTENER_REDUCTION: u32 = 132;
pub const ICMP6_MEMBERSHIP_QUERY: u32 = 130;
pub const ICMP6_MEMBERSHIP_REPORT: u32 = 131;
pub const ICMP6_MEMBERSHIP_REDUCTION: u32 = 132;
pub const MLD6_LISTENER_QUERY: u32 = 130;
pub const MLD6_LISTENER_REPORT: u32 = 131;
pub const MLD6_LISTENER_DONE: u32 = 132;
pub const ND_ROUTER_SOLICIT: u32 = 133;
pub const ND_ROUTER_ADVERT: u32 = 134;
pub const ND_NEIGHBOR_SOLICIT: u32 = 135;
pub const ND_NEIGHBOR_ADVERT: u32 = 136;
pub const ND_REDIRECT: u32 = 137;
pub const ICMP6_ROUTER_RENUMBERING: u32 = 138;
pub const ICMP6_WRUREQUEST: u32 = 139;
pub const ICMP6_WRUREPLY: u32 = 140;
pub const ICMP6_FQDN_QUERY: u32 = 139;
pub const ICMP6_FQDN_REPLY: u32 = 140;
pub const ICMP6_NI_QUERY: u32 = 139;
pub const ICMP6_NI_REPLY: u32 = 140;
pub const MLDV2_LISTENER_REPORT: u32 = 143;
pub const MLD_MTRACE_RESP: u32 = 200;
pub const MLD_MTRACE: u32 = 201;
pub const MLD6_MTRACE_RESP: u32 = 200;
pub const MLD6_MTRACE: u32 = 201;
pub const ICMP6_MAXTYPE: u32 = 201;
pub const ICMP6_DST_UNREACH_NOROUTE: u32 = 0;
pub const ICMP6_DST_UNREACH_ADMIN: u32 = 1;
pub const ICMP6_DST_UNREACH_NOTNEIGHBOR: u32 = 2;
pub const ICMP6_DST_UNREACH_BEYONDSCOPE: u32 = 2;
pub const ICMP6_DST_UNREACH_ADDR: u32 = 3;
pub const ICMP6_DST_UNREACH_NOPORT: u32 = 4;
pub const ICMP6_TIME_EXCEED_TRANSIT: u32 = 0;
pub const ICMP6_TIME_EXCEED_REASSEMBLY: u32 = 1;
pub const ICMP6_PARAMPROB_HEADER: u32 = 0;
pub const ICMP6_PARAMPROB_NEXTHEADER: u32 = 1;
pub const ICMP6_PARAMPROB_OPTION: u32 = 2;
pub const ICMP6_PARAMPROB_FIRSTFRAG_INCOMP_HDR: u32 = 3;
pub const ICMP6_INFOMSG_MASK: u32 = 128;
pub const ICMP6_NI_SUBJ_IPV6: u32 = 0;
pub const ICMP6_NI_SUBJ_FQDN: u32 = 1;
pub const ICMP6_NI_SUBJ_IPV4: u32 = 2;
pub const ICMP6_NI_SUCCESS: u32 = 0;
pub const ICMP6_NI_REFUSED: u32 = 1;
pub const ICMP6_NI_UNKNOWN: u32 = 2;
pub const ICMP6_ROUTER_RENUMBERING_COMMAND: u32 = 0;
pub const ICMP6_ROUTER_RENUMBERING_RESULT: u32 = 1;
pub const ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET: u32 = 255;
pub const ND_REDIRECT_ONLINK: u32 = 0;
pub const ND_REDIRECT_ROUTER: u32 = 1;
pub const ND_RA_FLAG_MANAGED: u32 = 128;
pub const ND_RA_FLAG_OTHER: u32 = 64;
pub const ND_RA_FLAG_HA: u32 = 32;
pub const ND_RA_FLAG_RTPREF_MASK: u32 = 24;
pub const ND_RA_FLAG_RTPREF_HIGH: u32 = 8;
pub const ND_RA_FLAG_RTPREF_MEDIUM: u32 = 0;
pub const ND_RA_FLAG_RTPREF_LOW: u32 = 24;
pub const ND_RA_FLAG_RTPREF_RSV: u32 = 16;
pub const ND_NA_FLAG_ROUTER: u32 = 128;
pub const ND_NA_FLAG_SOLICITED: u32 = 64;
pub const ND_NA_FLAG_OVERRIDE: u32 = 32;
pub const ND_OPT_SOURCE_LINKADDR: u32 = 1;
pub const ND_OPT_TARGET_LINKADDR: u32 = 2;
pub const ND_OPT_PREFIX_INFORMATION: u32 = 3;
pub const ND_OPT_REDIRECTED_HEADER: u32 = 4;
pub const ND_OPT_MTU: u32 = 5;
pub const ND_OPT_NONCE: u32 = 14;
pub const ND_OPT_ROUTE_INFO: u32 = 24;
pub const ND_OPT_RDNSS: u32 = 25;
pub const ND_OPT_DNSSL: u32 = 31;
pub const ND_OPT_CAPTIVE_PORTAL: u32 = 37;
pub const ND_OPT_PREF64: u32 = 38;
pub const ND_OPT_PI_FLAG_ONLINK: u32 = 128;
pub const ND_OPT_PI_FLAG_AUTO: u32 = 64;
pub const ND_OPT_NONCE_LEN: u32 = 6;
pub const ND_OPT_PREF64_SCALED_LIFETIME_MASK: u32 = 65528;
pub const ND_OPT_PREF64_PLC_MASK: u32 = 7;
pub const ND_OPT_PREF64_LIFETIME_MAX: u32 = 65528;
pub const ND_OPT_PREF64_PLC_32: u32 = 5;
pub const ND_OPT_PREF64_PLC_40: u32 = 4;
pub const ND_OPT_PREF64_PLC_48: u32 = 3;
pub const ND_OPT_PREF64_PLC_56: u32 = 2;
pub const ND_OPT_PREF64_PLC_64: u32 = 1;
pub const ND_OPT_PREF64_PLC_96: u32 = 0;
pub const NI_QTYPE_NOOP: u32 = 0;
pub const NI_QTYPE_SUPTYPES: u32 = 1;
pub const NI_QTYPE_FQDN: u32 = 2;
pub const NI_QTYPE_DNSNAME: u32 = 2;
pub const NI_QTYPE_NODEADDR: u32 = 3;
pub const NI_QTYPE_IPV4ADDR: u32 = 4;
pub const NI_SUPTYPE_FLAG_COMPRESS: u32 = 256;
pub const NI_FQDN_FLAG_VALIDTTL: u32 = 256;
pub const NI_NODEADDR_FLAG_TRUNCATE: u32 = 256;
pub const NI_NODEADDR_FLAG_ALL: u32 = 512;
pub const NI_NODEADDR_FLAG_COMPAT: u32 = 1024;
pub const NI_NODEADDR_FLAG_LINKLOCAL: u32 = 2048;
pub const NI_NODEADDR_FLAG_SITELOCAL: u32 = 4096;
pub const NI_NODEADDR_FLAG_GLOBAL: u32 = 8192;
pub const NI_NODEADDR_FLAG_ANYCAST: u32 = 16384;
pub const ICMP6_RR_FLAGS_TEST: u32 = 128;
pub const ICMP6_RR_FLAGS_REQRESULT: u32 = 64;
pub const ICMP6_RR_FLAGS_FORCEAPPLY: u32 = 32;
pub const ICMP6_RR_FLAGS_SPECSITE: u32 = 16;
pub const ICMP6_RR_FLAGS_PREVDONE: u32 = 8;
pub const RPM_PCO_ADD: u32 = 1;
pub const RPM_PCO_CHANGE: u32 = 2;
pub const RPM_PCO_SETGLOBAL: u32 = 3;
pub const RPM_PCO_MAX: u32 = 4;
pub const ICMP6_RR_PCOUSE_RAFLAGS_ONLINK: u32 = 128;
pub const ICMP6_RR_PCOUSE_RAFLAGS_AUTO: u32 = 64;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME: u32 = 128;
pub const ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME: u32 = 64;
pub const ICMP6_RR_RESULT_FLAGS_OOB: u32 = 512;
pub const ICMP6_RR_RESULT_FLAGS_FORBIDDEN: u32 = 256;
pub const ICMPV6CTL_STATS: u32 = 1;
pub const ICMPV6CTL_REDIRACCEPT: u32 = 2;
pub const ICMPV6CTL_REDIRTIMEOUT: u32 = 3;
pub const ICMPV6CTL_ND6_PRUNE: u32 = 6;
pub const ICMPV6CTL_ND6_DELAY: u32 = 8;
pub const ICMPV6CTL_ND6_UMAXTRIES: u32 = 9;
pub const ICMPV6CTL_ND6_MMAXTRIES: u32 = 10;
pub const ICMPV6CTL_ND6_USELOOPBACK: u32 = 11;
pub const ICMPV6CTL_NODEINFO: u32 = 13;
pub const ICMPV6CTL_ERRPPSLIMIT: u32 = 14;
pub const ICMPV6CTL_ND6_MAXNUDHINT: u32 = 15;
pub const ICMPV6CTL_MTUDISC_HIWAT: u32 = 16;
pub const ICMPV6CTL_MTUDISC_LOWAT: u32 = 17;
pub const ICMPV6CTL_ND6_DEBUG: u32 = 18;
pub const ICMPV6CTL_ND6_DRLIST: u32 = 19;
pub const ICMPV6CTL_ND6_PRLIST: u32 = 20;
pub const ICMPV6CTL_MLD_MAXSRCFILTER: u32 = 21;
pub const ICMPV6CTL_MLD_SOMAXSRC: u32 = 22;
pub const ICMPV6CTL_MLD_VERSION: u32 = 23;
pub const ICMPV6CTL_ND6_MAXQLEN: u32 = 24;
pub const ICMPV6CTL_ND6_ACCEPT_6TO4: u32 = 25;
pub const ICMPV6CTL_ND6_OPTIMISTIC_DAD: u32 = 26;
pub const ICMPV6CTL_ERRPPSLIMIT_RANDOM_INCR: u32 = 27;
pub const ICMPV6CTL_MAXID: u32 = 28;
pub const ICMP_MINLEN: u32 = 8;
pub const ICMP_MASKLEN: u32 = 12;
pub const ICMP_ECHOREPLY: u32 = 0;
pub const ICMP_UNREACH: u32 = 3;
pub const ICMP_UNREACH_NET: u32 = 0;
pub const ICMP_UNREACH_HOST: u32 = 1;
pub const ICMP_UNREACH_PROTOCOL: u32 = 2;
pub const ICMP_UNREACH_PORT: u32 = 3;
pub const ICMP_UNREACH_NEEDFRAG: u32 = 4;
pub const ICMP_UNREACH_SRCFAIL: u32 = 5;
pub const ICMP_UNREACH_NET_UNKNOWN: u32 = 6;
pub const ICMP_UNREACH_HOST_UNKNOWN: u32 = 7;
pub const ICMP_UNREACH_ISOLATED: u32 = 8;
pub const ICMP_UNREACH_NET_PROHIB: u32 = 9;
pub const ICMP_UNREACH_HOST_PROHIB: u32 = 10;
pub const ICMP_UNREACH_TOSNET: u32 = 11;
pub const ICMP_UNREACH_TOSHOST: u32 = 12;
pub const ICMP_UNREACH_FILTER_PROHIB: u32 = 13;
pub const ICMP_UNREACH_HOST_PRECEDENCE: u32 = 14;
pub const ICMP_UNREACH_PRECEDENCE_CUTOFF: u32 = 15;
pub const ICMP_SOURCEQUENCH: u32 = 4;
pub const ICMP_REDIRECT: u32 = 5;
pub const ICMP_REDIRECT_NET: u32 = 0;
pub const ICMP_REDIRECT_HOST: u32 = 1;
pub const ICMP_REDIRECT_TOSNET: u32 = 2;
pub const ICMP_REDIRECT_TOSHOST: u32 = 3;
pub const ICMP_ALTHOSTADDR: u32 = 6;
pub const ICMP_ECHO: u32 = 8;
pub const ICMP_ROUTERADVERT: u32 = 9;
pub const ICMP_ROUTERADVERT_NORMAL: u32 = 0;
pub const ICMP_ROUTERADVERT_NOROUTE_COMMON: u32 = 16;
pub const ICMP_ROUTERSOLICIT: u32 = 10;
pub const ICMP_TIMXCEED: u32 = 11;
pub const ICMP_TIMXCEED_INTRANS: u32 = 0;
pub const ICMP_TIMXCEED_REASS: u32 = 1;
pub const ICMP_PARAMPROB: u32 = 12;
pub const ICMP_PARAMPROB_ERRATPTR: u32 = 0;
pub const ICMP_PARAMPROB_OPTABSENT: u32 = 1;
pub const ICMP_PARAMPROB_LENGTH: u32 = 2;
pub const ICMP_TSTAMP: u32 = 13;
pub const ICMP_TSTAMPREPLY: u32 = 14;
pub const ICMP_IREQ: u32 = 15;
pub const ICMP_IREQREPLY: u32 = 16;
pub const ICMP_MASKREQ: u32 = 17;
pub const ICMP_MASKREPLY: u32 = 18;
pub const ICMP_TRACEROUTE: u32 = 30;
pub const ICMP_DATACONVERR: u32 = 31;
pub const ICMP_MOBILE_REDIRECT: u32 = 32;
pub const ICMP_IPV6_WHEREAREYOU: u32 = 33;
pub const ICMP_IPV6_IAMHERE: u32 = 34;
pub const ICMP_MOBILE_REGREQUEST: u32 = 35;
pub const ICMP_MOBILE_REGREPLY: u32 = 36;
pub const ICMP_SKIP: u32 = 39;
pub const ICMP_PHOTURIS: u32 = 40;
pub const ICMP_PHOTURIS_UNKNOWN_INDEX: u32 = 1;
pub const ICMP_PHOTURIS_AUTH_FAILED: u32 = 2;
pub const ICMP_PHOTURIS_DECRYPT_FAILED: u32 = 3;
pub const ICMP_MAXTYPE: u32 = 40;
pub const ICMPCTL_MASKREPL: u32 = 1;
pub const ICMPCTL_STATS: u32 = 2;
pub const ICMPCTL_ICMPLIM: u32 = 3;
pub const ICMPCTL_TIMESTAMP: u32 = 4;
pub const ICMPCTL_ICMPLIM_INCR: u32 = 5;
pub const ICMPCTL_MAXID: u32 = 6;
pub const SIN_PROXY: u32 = 1;
pub const SIN_ROUTER: u32 = 2;
pub const RTF_USETRAILERS: u32 = 32768;
pub const RTF_ANNOUNCE: u32 = 16384;
pub const IGMP_MINLEN: u32 = 8;
pub const IGMP_V3_QUERY_MINLEN: u32 = 12;
pub const IGMP_V3_QUERY_MAX_SRCS: u32 = 366;
pub const IGMP_GRPREC_HDRLEN: u32 = 8;
pub const IGMP_V3_REPORT_MINLEN: u32 = 8;
pub const IGMP_V3_REPORT_MAXRECS: u32 = 65535;
pub const IGMP_HOST_MEMBERSHIP_QUERY: u32 = 17;
pub const IGMP_v1_HOST_MEMBERSHIP_REPORT: u32 = 18;
pub const IGMP_DVMRP: u32 = 19;
pub const IGMP_PIM: u32 = 20;
pub const IGMP_v2_HOST_MEMBERSHIP_REPORT: u32 = 22;
pub const IGMP_HOST_LEAVE_MESSAGE: u32 = 23;
pub const IGMP_MTRACE_REPLY: u32 = 30;
pub const IGMP_MTRACE_QUERY: u32 = 31;
pub const IGMP_v3_HOST_MEMBERSHIP_REPORT: u32 = 34;
pub const IGMP_DO_NOTHING: u32 = 0;
pub const IGMP_MODE_IS_INCLUDE: u32 = 1;
pub const IGMP_MODE_IS_EXCLUDE: u32 = 2;
pub const IGMP_CHANGE_TO_INCLUDE_MODE: u32 = 3;
pub const IGMP_CHANGE_TO_EXCLUDE_MODE: u32 = 4;
pub const IGMP_ALLOW_NEW_SOURCES: u32 = 5;
pub const IGMP_BLOCK_OLD_SOURCES: u32 = 6;
pub const IGMP_V3_GENERAL_QUERY: u32 = 1;
pub const IGMP_V3_GROUP_QUERY: u32 = 2;
pub const IGMP_V3_GROUP_SOURCE_QUERY: u32 = 3;
pub const IGMP_V1V2_MAX_RI: u32 = 10;
pub const IGMP_MAX_HOST_REPORT_DELAY: u32 = 10;
pub const IGMP_TIMER_SCALE: u32 = 10;
pub const IGPS_VERSION_3: u32 = 3;
pub const IGPS_VERSION3_LEN: u32 = 168;
pub const IGMPCTL_STATS: u32 = 1;
pub const IGMPCTL_MAXID: u32 = 2;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_APP_APPROVED: u32 = 1;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_TRACKER: u32 = 2;
pub const SO_TRACKER_ATTRIBUTE_FLAGS_DOMAIN_SHORT: u32 = 4;
pub const SO_TRACKER_TRANSPARENCY_VERSION: u32 = 3;
pub const INP_IPV4: u32 = 1;
pub const INP_IPV6: u32 = 2;
pub const INP_V4MAPPEDV6: u32 = 4;
pub const INP_ANONPORT: u32 = 64;
pub const IN6P_IPV6_V6ONLY: u32 = 32768;
pub const IN6P_BINDV6ONLY: u32 = 16777216;
pub const SYSPROTO_EVENT: u32 = 1;
pub const SYSPROTO_CONTROL: u32 = 2;
pub const AF_SYS_CONTROL: u32 = 2;
pub const KEV_SNDSPACE: u32 = 4096;
pub const KEV_RECVSPACE: u32 = 32768;
pub const KEV_ANY_VENDOR: u32 = 0;
pub const KEV_ANY_CLASS: u32 = 0;
pub const KEV_ANY_SUBCLASS: u32 = 0;
pub const KEV_VENDOR_APPLE: u32 = 1;
pub const KEV_NETWORK_CLASS: u32 = 1;
pub const KEV_IOKIT_CLASS: u32 = 2;
pub const KEV_SYSTEM_CLASS: u32 = 3;
pub const KEV_APPLESHARE_CLASS: u32 = 4;
pub const KEV_FIREWALL_CLASS: u32 = 5;
pub const KEV_IEEE80211_CLASS: u32 = 6;
pub const KEV_NKE_CLASS: u32 = 7;
pub const KEV_NKE_ALF_SUBCLASS: u32 = 1;
pub const KEV_NKE_ALF_STATE_CHANGED: u32 = 1;
pub const XNU_KERN_EVENT_DATA_SIZE: u32 = 1;
pub const KEV_VENDOR_CODE_MAX_STR_LEN: u32 = 200;
pub const SCOPE6_ID_MAX: u32 = 16;
pub const IN6_PREFIX_ND: u32 = 1;
pub const IN6_PREFIX_RR: u32 = 2;
pub const PR_ORIG_RA: u32 = 0;
pub const PR_ORIG_RR: u32 = 1;
pub const PR_ORIG_STATIC: u32 = 2;
pub const PR_ORIG_KERNEL: u32 = 3;
pub const IN6_IFF_ANYCAST: u32 = 1;
pub const IN6_IFF_TENTATIVE: u32 = 2;
pub const IN6_IFF_DUPLICATED: u32 = 4;
pub const IN6_IFF_DETACHED: u32 = 8;
pub const IN6_IFF_DEPRECATED: u32 = 16;
pub const IN6_IFF_NODAD: u32 = 32;
pub const IN6_IFF_AUTOCONF: u32 = 64;
pub const IN6_IFF_TEMPORARY: u32 = 128;
pub const IN6_IFF_DYNAMIC: u32 = 256;
pub const IN6_IFF_OPTIMISTIC: u32 = 512;
pub const IN6_IFF_SECURED: u32 = 1024;
pub const IN6_IFF_CLAT46: u32 = 4096;
pub const IN6_IFF_NOPFX: u32 = 32768;
pub const IN6_IFF_DADPROGRESS: u32 = 514;
pub const IN6_IFF_NOTREADY: u32 = 6;
pub const IN6_IFF_NOTMANUAL: u32 = 320;
pub const IPV6_VERSION: u32 = 96;
pub const IPV6_VERSION_MASK: u32 = 240;
pub const IPV6_FLOWINFO_MASK: u32 = 4294967055;
pub const IPV6_FLOWLABEL_MASK: u32 = 4294905600;
pub const IPV6_FLOW_ECN_MASK: u32 = 12288;
pub const IP6TOS_CE: u32 = 1;
pub const IP6TOS_ECT: u32 = 2;
pub const IP6FLOW_DSCP_MASK: u32 = 264241152;
pub const IP6FLOW_DSCP_SHIFT: u32 = 22;
pub const IP6OPT_PAD1: u32 = 0;
pub const IP6OPT_PADN: u32 = 1;
pub const IP6OPT_JUMBO: u32 = 194;
pub const IP6OPT_NSAP_ADDR: u32 = 195;
pub const IP6OPT_TUNNEL_LIMIT: u32 = 4;
pub const IP6OPT_RTALERT: u32 = 5;
pub const IP6OPT_ROUTER_ALERT: u32 = 5;
pub const IP6OPT_RTALERT_LEN: u32 = 4;
pub const IP6OPT_RTALERT_MLD: u32 = 0;
pub const IP6OPT_RTALERT_RSVP: u32 = 1;
pub const IP6OPT_RTALERT_ACTNET: u32 = 2;
pub const IP6OPT_MINLEN: u32 = 2;
pub const IP6OPT_EID: u32 = 138;
pub const IP6OPT_TYPE_SKIP: u32 = 0;
pub const IP6OPT_TYPE_DISCARD: u32 = 64;
pub const IP6OPT_TYPE_FORCEICMP: u32 = 128;
pub const IP6OPT_TYPE_ICMP: u32 = 192;
pub const IP6OPT_MUTABLE: u32 = 32;
pub const IP6OPT_JUMBO_LEN: u32 = 6;
pub const IP6_ALERT_MLD: u32 = 0;
pub const IP6_ALERT_RSVP: u32 = 256;
pub const IP6_ALERT_AN: u32 = 512;
pub const IP6F_OFF_MASK: u32 = 63743;
pub const IP6F_RESERVED_MASK: u32 = 1536;
pub const IP6F_MORE_FRAG: u32 = 256;
pub const IPV6_MAXHLIM: u32 = 255;
pub const IPV6_DEFHLIM: u32 = 64;
pub const IPV6_FRAGTTL: u32 = 60;
pub const IPV6_HLIMDEC: u32 = 1;
pub const IPV6_MMTU: u32 = 1280;
pub const IPV6_MAXPACKET: u32 = 65535;
pub const IPV6_MAXOPTHDR: u32 = 2048;
pub const MAX_IPOPTLEN: u32 = 40;
pub const TCP_NSTATES: u32 = 11;
pub const TCPS_CLOSED: u32 = 0;
pub const TCPS_LISTEN: u32 = 1;
pub const TCPS_SYN_SENT: u32 = 2;
pub const TCPS_SYN_RECEIVED: u32 = 3;
pub const TCPS_ESTABLISHED: u32 = 4;
pub const TCPS_CLOSE_WAIT: u32 = 5;
pub const TCPS_FIN_WAIT_1: u32 = 6;
pub const TCPS_CLOSING: u32 = 7;
pub const TCPS_LAST_ACK: u32 = 8;
pub const TCPS_FIN_WAIT_2: u32 = 9;
pub const TCPS_TIME_WAIT: u32 = 10;
pub const TCP6_NSTATES: u32 = 11;
pub const TCP6S_CLOSED: u32 = 0;
pub const TCP6S_LISTEN: u32 = 1;
pub const TCP6S_SYN_SENT: u32 = 2;
pub const TCP6S_SYN_RECEIVED: u32 = 3;
pub const TCP6S_ESTABLISHED: u32 = 4;
pub const TCP6S_CLOSE_WAIT: u32 = 5;
pub const TCP6S_FIN_WAIT_1: u32 = 6;
pub const TCP6S_CLOSING: u32 = 7;
pub const TCP6S_LAST_ACK: u32 = 8;
pub const TCP6S_FIN_WAIT_2: u32 = 9;
pub const TCP6S_TIME_WAIT: u32 = 10;
pub const TCPT_NTIMERS_EXT: u32 = 4;
pub const TCPT_REXMT: u32 = 0;
pub const TCPT_PERSIST: u32 = 1;
pub const TCPT_KEEP: u32 = 2;
pub const TCPT_2MSL: u32 = 3;
pub const TCPT_DELACK: u32 = 4;
pub const TCPT_MAX: u32 = 4;
pub const TCPT_NONE: u32 = 5;
pub const TCPT_NTIMERS: u32 = 5;
pub const TF_ACKNOW: u32 = 1;
pub const TF_DELACK: u32 = 2;
pub const TF_NODELAY: u32 = 4;
pub const TF_NOOPT: u32 = 8;
pub const TF_SENTFIN: u32 = 16;
pub const TF_REQ_SCALE: u32 = 32;
pub const TF_RCVD_SCALE: u32 = 64;
pub const TF_REQ_TSTMP: u32 = 128;
pub const TF_RCVD_TSTMP: u32 = 256;
pub const TF_SACK_PERMIT: u32 = 512;
pub const TF_NEEDSYN: u32 = 1024;
pub const TF_NEEDFIN: u32 = 2048;
pub const TF_NOPUSH: u32 = 4096;
pub const TF_REQ_CC: u32 = 8192;
pub const TF_RCVD_CC: u32 = 16384;
pub const TF_SENDCCNEW: u32 = 32768;
pub const TF_MORETOCOME: u32 = 65536;
pub const TF_LQ_OVERFLOW: u32 = 131072;
pub const TF_RXWIN0SENT: u32 = 262144;
pub const TF_SLOWLINK: u32 = 524288;
pub const TCPOOB_HAVEDATA: u32 = 1;
pub const TCPOOB_HADDATA: u32 = 2;
pub const TCPCTL_DO_RFC1323: u32 = 1;
pub const TCPCTL_DO_RFC1644: u32 = 2;
pub const TCPCTL_MSSDFLT: u32 = 3;
pub const TCPCTL_STATS: u32 = 4;
pub const TCPCTL_RTTDFLT: u32 = 5;
pub const TCPCTL_KEEPIDLE: u32 = 6;
pub const TCPCTL_KEEPINTVL: u32 = 7;
pub const TCPCTL_SENDSPACE: u32 = 8;
pub const TCPCTL_RECVSPACE: u32 = 9;
pub const TCPCTL_KEEPINIT: u32 = 10;
pub const TCPCTL_PCBLIST: u32 = 11;
pub const TCPCTL_DELACKTIME: u32 = 12;
pub const TCPCTL_V6MSSDFLT: u32 = 13;
pub const TCPCTL_MAXID: u32 = 14;
pub const AUDIT_RECORD_MAGIC: u32 = 2190085915;
pub const MAX_AUDIT_RECORDS: u32 = 20;
pub const MAXAUDITDATA: u32 = 32767;
pub const MAX_AUDIT_RECORD_SIZE: u32 = 32767;
pub const MIN_AUDIT_FILE_SIZE: u32 = 524288;
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS: u32 = 4;
pub const AUDIT_TRIGGER_MIN: u32 = 1;
pub const AUDIT_TRIGGER_LOW_SPACE: u32 = 1;
pub const AUDIT_TRIGGER_ROTATE_KERNEL: u32 = 2;
pub const AUDIT_TRIGGER_READ_FILE: u32 = 3;
pub const AUDIT_TRIGGER_CLOSE_AND_DIE: u32 = 4;
pub const AUDIT_TRIGGER_NO_SPACE: u32 = 5;
pub const AUDIT_TRIGGER_ROTATE_USER: u32 = 6;
pub const AUDIT_TRIGGER_INITIALIZE: u32 = 7;
pub const AUDIT_TRIGGER_EXPIRE_TRAILS: u32 = 8;
pub const AUDIT_TRIGGER_MAX: u32 = 8;
pub const AUDITDEV_FILENAME: &[u8; 6usize] = b"audit\0";
pub const AUDIT_TRIGGER_FILE: &[u8; 11usize] = b"/dev/audit\0";
pub const AU_DEFAUDITSID: u32 = 0;
pub const AU_ASSIGN_ASID: i32 = -1;
pub const AUC_UNSET: u32 = 0;
pub const AUC_AUDITING: u32 = 1;
pub const AUC_NOAUDIT: u32 = 2;
pub const AUC_DISABLED: i32 = -1;
pub const A_OLDGETPOLICY: u32 = 2;
pub const A_OLDSETPOLICY: u32 = 3;
pub const A_GETKMASK: u32 = 4;
pub const A_SETKMASK: u32 = 5;
pub const A_OLDGETQCTRL: u32 = 6;
pub const A_OLDSETQCTRL: u32 = 7;
pub const A_GETCWD: u32 = 8;
pub const A_GETCAR: u32 = 9;
pub const A_GETSTAT: u32 = 12;
pub const A_SETSTAT: u32 = 13;
pub const A_SETUMASK: u32 = 14;
pub const A_SETSMASK: u32 = 15;
pub const A_OLDGETCOND: u32 = 20;
pub const A_OLDSETCOND: u32 = 21;
pub const A_GETCLASS: u32 = 22;
pub const A_SETCLASS: u32 = 23;
pub const A_GETPINFO: u32 = 24;
pub const A_SETPMASK: u32 = 25;
pub const A_SETFSIZE: u32 = 26;
pub const A_GETFSIZE: u32 = 27;
pub const A_GETPINFO_ADDR: u32 = 28;
pub const A_GETKAUDIT: u32 = 29;
pub const A_SETKAUDIT: u32 = 30;
pub const A_SENDTRIGGER: u32 = 31;
pub const A_GETSINFO_ADDR: u32 = 32;
pub const A_GETPOLICY: u32 = 33;
pub const A_SETPOLICY: u32 = 34;
pub const A_GETQCTRL: u32 = 35;
pub const A_SETQCTRL: u32 = 36;
pub const A_GETCOND: u32 = 37;
pub const A_SETCOND: u32 = 38;
pub const A_GETSFLAGS: u32 = 39;
pub const A_SETSFLAGS: u32 = 40;
pub const A_GETCTLMODE: u32 = 41;
pub const A_SETCTLMODE: u32 = 42;
pub const A_GETEXPAFTER: u32 = 43;
pub const A_SETEXPAFTER: u32 = 44;
pub const AUDIT_CNT: u32 = 1;
pub const AUDIT_AHLT: u32 = 2;
pub const AUDIT_ARGV: u32 = 4;
pub const AUDIT_ARGE: u32 = 8;
pub const AUDIT_SEQ: u32 = 16;
pub const AUDIT_WINDATA: u32 = 32;
pub const AUDIT_USER: u32 = 64;
pub const AUDIT_GROUP: u32 = 128;
pub const AUDIT_TRAIL: u32 = 256;
pub const AUDIT_PATH: u32 = 512;
pub const AUDIT_SCNT: u32 = 1024;
pub const AUDIT_PUBLIC: u32 = 2048;
pub const AUDIT_ZONENAME: u32 = 4096;
pub const AUDIT_PERZONE: u32 = 8192;
pub const AQ_HIWATER: u32 = 100;
pub const AQ_MAXHIGH: u32 = 10000;
pub const AQ_LOWATER: u32 = 10;
pub const AQ_BUFSZ: u32 = 32767;
pub const AQ_MAXBUFSZ: u32 = 1048576;
pub const AU_FS_MINFREE: u32 = 20;
pub const AU_IPv4: u32 = 4;
pub const AU_IPv6: u32 = 16;
pub const AU_CLASS_MASK_RESERVED: u32 = 268435456;
pub const CRF_NOMEMBERD: u32 = 1;
pub const CRF_MAC_ENFORCE: u32 = 2;
pub const XUCRED_VERSION: u32 = 0;
pub const CTL_MAXNAME: u32 = 12;
pub const CTLTYPE: u32 = 15;
pub const CTLTYPE_NODE: u32 = 1;
pub const CTLTYPE_INT: u32 = 2;
pub const CTLTYPE_STRING: u32 = 3;
pub const CTLTYPE_QUAD: u32 = 4;
pub const CTLTYPE_OPAQUE: u32 = 5;
pub const CTLTYPE_STRUCT: u32 = 5;
pub const CTLFLAG_RD: u32 = 2147483648;
pub const CTLFLAG_WR: u32 = 1073741824;
pub const CTLFLAG_RW: u32 = 3221225472;
pub const CTLFLAG_NOLOCK: u32 = 536870912;
pub const CTLFLAG_ANYBODY: u32 = 268435456;
pub const CTLFLAG_SECURE: u32 = 134217728;
pub const CTLFLAG_MASKED: u32 = 67108864;
pub const CTLFLAG_NOAUTO: u32 = 33554432;
pub const CTLFLAG_KERN: u32 = 16777216;
pub const CTLFLAG_LOCKED: u32 = 8388608;
pub const CTLFLAG_OID2: u32 = 4194304;
pub const CTLFLAG_EXPERIMENT: u32 = 1048576;
pub const OID_AUTO: i32 = -1;
pub const OID_AUTO_START: u32 = 100;
pub const CTL_UNSPEC: u32 = 0;
pub const CTL_KERN: u32 = 1;
pub const CTL_VM: u32 = 2;
pub const CTL_VFS: u32 = 3;
pub const CTL_NET: u32 = 4;
pub const CTL_DEBUG: u32 = 5;
pub const CTL_HW: u32 = 6;
pub const CTL_MACHDEP: u32 = 7;
pub const CTL_USER: u32 = 8;
pub const CTL_MAXID: u32 = 9;
pub const KERN_OSTYPE: u32 = 1;
pub const KERN_OSRELEASE: u32 = 2;
pub const KERN_OSREV: u32 = 3;
pub const KERN_VERSION: u32 = 4;
pub const KERN_MAXVNODES: u32 = 5;
pub const KERN_MAXPROC: u32 = 6;
pub const KERN_MAXFILES: u32 = 7;
pub const KERN_ARGMAX: u32 = 8;
pub const KERN_SECURELVL: u32 = 9;
pub const KERN_HOSTNAME: u32 = 10;
pub const KERN_HOSTID: u32 = 11;
pub const KERN_CLOCKRATE: u32 = 12;
pub const KERN_VNODE: u32 = 13;
pub const KERN_PROC: u32 = 14;
pub const KERN_FILE: u32 = 15;
pub const KERN_PROF: u32 = 16;
pub const KERN_POSIX1: u32 = 17;
pub const KERN_NGROUPS: u32 = 18;
pub const KERN_JOB_CONTROL: u32 = 19;
pub const KERN_SAVED_IDS: u32 = 20;
pub const KERN_BOOTTIME: u32 = 21;
pub const KERN_NISDOMAINNAME: u32 = 22;
pub const KERN_DOMAINNAME: u32 = 22;
pub const KERN_MAXPARTITIONS: u32 = 23;
pub const KERN_KDEBUG: u32 = 24;
pub const KERN_UPDATEINTERVAL: u32 = 25;
pub const KERN_OSRELDATE: u32 = 26;
pub const KERN_NTP_PLL: u32 = 27;
pub const KERN_BOOTFILE: u32 = 28;
pub const KERN_MAXFILESPERPROC: u32 = 29;
pub const KERN_MAXPROCPERUID: u32 = 30;
pub const KERN_DUMPDEV: u32 = 31;
pub const KERN_IPC: u32 = 32;
pub const KERN_DUMMY: u32 = 33;
pub const KERN_PS_STRINGS: u32 = 34;
pub const KERN_USRSTACK32: u32 = 35;
pub const KERN_LOGSIGEXIT: u32 = 36;
pub const KERN_SYMFILE: u32 = 37;
pub const KERN_PROCARGS: u32 = 38;
pub const KERN_NETBOOT: u32 = 40;
pub const KERN_SYSV: u32 = 42;
pub const KERN_AFFINITY: u32 = 43;
pub const KERN_TRANSLATE: u32 = 44;
pub const KERN_CLASSIC: u32 = 44;
pub const KERN_EXEC: u32 = 45;
pub const KERN_CLASSICHANDLER: u32 = 45;
pub const KERN_AIOMAX: u32 = 46;
pub const KERN_AIOPROCMAX: u32 = 47;
pub const KERN_AIOTHREADS: u32 = 48;
pub const KERN_PROCARGS2: u32 = 49;
pub const KERN_COREFILE: u32 = 50;
pub const KERN_COREDUMP: u32 = 51;
pub const KERN_SUGID_COREDUMP: u32 = 52;
pub const KERN_PROCDELAYTERM: u32 = 53;
pub const KERN_SHREG_PRIVATIZABLE: u32 = 54;
pub const KERN_LOW_PRI_WINDOW: u32 = 56;
pub const KERN_LOW_PRI_DELAY: u32 = 57;
pub const KERN_POSIX: u32 = 58;
pub const KERN_USRSTACK64: u32 = 59;
pub const KERN_NX_PROTECTION: u32 = 60;
pub const KERN_TFP: u32 = 61;
pub const KERN_PROCNAME: u32 = 62;
pub const KERN_THALTSTACK: u32 = 63;
pub const KERN_SPECULATIVE_READS: u32 = 64;
pub const KERN_OSVERSION: u32 = 65;
pub const KERN_SAFEBOOT: u32 = 66;
pub const KERN_RAGEVNODE: u32 = 68;
pub const KERN_TTY: u32 = 69;
pub const KERN_CHECKOPENEVT: u32 = 70;
pub const KERN_THREADNAME: u32 = 71;
pub const KERN_MAXID: u32 = 72;
pub const KERN_USRSTACK: u32 = 59;
pub const KERN_RAGE_PROC: u32 = 1;
pub const KERN_RAGE_THREAD: u32 = 2;
pub const KERN_UNRAGE_PROC: u32 = 3;
pub const KERN_UNRAGE_THREAD: u32 = 4;
pub const KERN_OPENEVT_PROC: u32 = 1;
pub const KERN_UNOPENEVT_PROC: u32 = 2;
pub const KERN_TFP_POLICY: u32 = 1;
pub const KERN_TFP_POLICY_DENY: u32 = 0;
pub const KERN_TFP_POLICY_DEFAULT: u32 = 2;
pub const KERN_KDEFLAGS: u32 = 1;
pub const KERN_KDDFLAGS: u32 = 2;
pub const KERN_KDENABLE: u32 = 3;
pub const KERN_KDSETBUF: u32 = 4;
pub const KERN_KDGETBUF: u32 = 5;
pub const KERN_KDSETUP: u32 = 6;
pub const KERN_KDREMOVE: u32 = 7;
pub const KERN_KDSETREG: u32 = 8;
pub const KERN_KDGETREG: u32 = 9;
pub const KERN_KDREADTR: u32 = 10;
pub const KERN_KDPIDTR: u32 = 11;
pub const KERN_KDTHRMAP: u32 = 12;
pub const KERN_KDPIDEX: u32 = 14;
pub const KERN_KDSETRTCDEC: u32 = 15;
pub const KERN_KDGETENTROPY: u32 = 16;
pub const KERN_KDWRITETR: u32 = 17;
pub const KERN_KDWRITEMAP: u32 = 18;
pub const KERN_KDTEST: u32 = 19;
pub const KERN_KDREADCURTHRMAP: u32 = 21;
pub const KERN_KDSET_TYPEFILTER: u32 = 22;
pub const KERN_KDBUFWAIT: u32 = 23;
pub const KERN_KDCPUMAP: u32 = 24;
pub const KERN_KDCPUMAP_EXT: u32 = 25;
pub const KERN_KDSET_EDM: u32 = 26;
pub const KERN_KDGET_EDM: u32 = 27;
pub const KERN_KDWRITETR_V3: u32 = 28;
pub const KERN_PROC_ALL: u32 = 0;
pub const KERN_PROC_PID: u32 = 1;
pub const KERN_PROC_PGRP: u32 = 2;
pub const KERN_PROC_SESSION: u32 = 3;
pub const KERN_PROC_TTY: u32 = 4;
pub const KERN_PROC_UID: u32 = 5;
pub const KERN_PROC_RUID: u32 = 6;
pub const KERN_PROC_LCID: u32 = 7;
pub const KERN_VFSNSPACE_HANDLE_PROC: u32 = 1;
pub const KERN_VFSNSPACE_UNHANDLE_PROC: u32 = 2;
pub const WMESGLEN: u32 = 7;
pub const EPROC_CTTY: u32 = 1;
pub const EPROC_SLEADER: u32 = 2;
pub const COMAPT_MAXLOGNAME: u32 = 12;
pub const KIPC_MAXSOCKBUF: u32 = 1;
pub const KIPC_SOCKBUF_WASTE: u32 = 2;
pub const KIPC_SOMAXCONN: u32 = 3;
pub const KIPC_MAX_LINKHDR: u32 = 4;
pub const KIPC_MAX_PROTOHDR: u32 = 5;
pub const KIPC_MAX_HDR: u32 = 6;
pub const KIPC_MAX_DATALEN: u32 = 7;
pub const KIPC_MBSTAT: u32 = 8;
pub const KIPC_NMBCLUSTERS: u32 = 9;
pub const KIPC_SOQLIMITCOMPAT: u32 = 10;
pub const VM_METER: u32 = 1;
pub const VM_LOADAVG: u32 = 2;
pub const VM_MACHFACTOR: u32 = 4;
pub const VM_SWAPUSAGE: u32 = 5;
pub const VM_MAXID: u32 = 6;
pub const LSCALE: u32 = 1000;
pub const HW_MACHINE: u32 = 1;
pub const HW_MODEL: u32 = 2;
pub const HW_NCPU: u32 = 3;
pub const HW_BYTEORDER: u32 = 4;
pub const HW_PHYSMEM: u32 = 5;
pub const HW_USERMEM: u32 = 6;
pub const HW_PAGESIZE: u32 = 7;
pub const HW_DISKNAMES: u32 = 8;
pub const HW_DISKSTATS: u32 = 9;
pub const HW_EPOCH: u32 = 10;
pub const HW_FLOATINGPT: u32 = 11;
pub const HW_MACHINE_ARCH: u32 = 12;
pub const HW_VECTORUNIT: u32 = 13;
pub const HW_BUS_FREQ: u32 = 14;
pub const HW_CPU_FREQ: u32 = 15;
pub const HW_CACHELINE: u32 = 16;
pub const HW_L1ICACHESIZE: u32 = 17;
pub const HW_L1DCACHESIZE: u32 = 18;
pub const HW_L2SETTINGS: u32 = 19;
pub const HW_L2CACHESIZE: u32 = 20;
pub const HW_L3SETTINGS: u32 = 21;
pub const HW_L3CACHESIZE: u32 = 22;
pub const HW_TB_FREQ: u32 = 23;
pub const HW_MEMSIZE: u32 = 24;
pub const HW_AVAILCPU: u32 = 25;
pub const HW_TARGET: u32 = 26;
pub const HW_PRODUCT: u32 = 27;
pub const HW_MAXID: u32 = 28;
pub const USER_CS_PATH: u32 = 1;
pub const USER_BC_BASE_MAX: u32 = 2;
pub const USER_BC_DIM_MAX: u32 = 3;
pub const USER_BC_SCALE_MAX: u32 = 4;
pub const USER_BC_STRING_MAX: u32 = 5;
pub const USER_COLL_WEIGHTS_MAX: u32 = 6;
pub const USER_EXPR_NEST_MAX: u32 = 7;
pub const USER_LINE_MAX: u32 = 8;
pub const USER_RE_DUP_MAX: u32 = 9;
pub const USER_POSIX2_VERSION: u32 = 10;
pub const USER_POSIX2_C_BIND: u32 = 11;
pub const USER_POSIX2_C_DEV: u32 = 12;
pub const USER_POSIX2_CHAR_TERM: u32 = 13;
pub const USER_POSIX2_FORT_DEV: u32 = 14;
pub const USER_POSIX2_FORT_RUN: u32 = 15;
pub const USER_POSIX2_LOCALEDEF: u32 = 16;
pub const USER_POSIX2_SW_DEV: u32 = 17;
pub const USER_POSIX2_UPE: u32 = 18;
pub const USER_STREAM_MAX: u32 = 19;
pub const USER_TZNAME_MAX: u32 = 20;
pub const USER_MAXID: u32 = 21;
pub const CTL_DEBUG_NAME: u32 = 0;
pub const CTL_DEBUG_VALUE: u32 = 1;
pub const CTL_DEBUG_MAXID: u32 = 20;
pub const UDPCTL_CHECKSUM: u32 = 1;
pub const UDPCTL_STATS: u32 = 2;
pub const UDPCTL_MAXDGRAM: u32 = 3;
pub const UDPCTL_RECVSPACE: u32 = 4;
pub const UDPCTL_PCBLIST: u32 = 5;
pub const UDPCTL_MAXID: u32 = 6;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 130100;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PGUARD: u32 = 13;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MAX_SPECIAL_PORT: u32 = 33;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_CPU_STAT: u32 = 268435459;
pub const PROCESSOR_CPU_STAT64: u32 = 268435460;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_BASIC_INFO_64_2: u32 = 18;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const MACH_VM_MIN_ADDRESS_RAW: u32 = 0;
pub const MACH_VM_MAX_ADDRESS_RAW: u64 = 140737454800896;
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW: u64 = 68719476736;
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW: u64 = 481036337152;
pub const SWI_SYSCALL: u32 = 128;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const MACH_VOUCHER_BANK_CONTENT_SIZE: u32 = 500;
pub const BANK_ORIGINATOR_PID: u32 = 1;
pub const BANK_PERSONA_TOKEN: u32 = 2;
pub const BANK_PERSONA_ID: u32 = 3;
pub const BANK_PERSONA_ADOPT_ANY: u32 = 4;
pub const PROC_PERSONA_INFO_FLAG_ADOPTION_ALLOWED: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const DEBUG_ASSERT_COMPONENT_NAME_STRING: &[u8; 1usize] = b"\0";
pub const __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const clock_priv_MSG_COUNT: u32 = 2;
pub const host_priv_MSG_COUNT: u32 = 26;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const host_security_MSG_COUNT: u32 = 2;
pub const processor_MSG_COUNT: u32 = 6;
pub const processor_set_MSG_COUNT: u32 = 11;
pub const SYNC_POLICY_FIFO: u32 = 0;
pub const SYNC_POLICY_FIXED_PRIORITY: u32 = 1;
pub const SYNC_POLICY_REVERSED: u32 = 2;
pub const SYNC_POLICY_ORDER_MASK: u32 = 3;
pub const SYNC_POLICY_LIFO: u32 = 2;
pub const task_MSG_COUNT: u32 = 65;
pub const thread_act_MSG_COUNT: u32 = 31;
pub const vm_map_MSG_COUNT: u32 = 33;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const _MACH_INIT_: u32 = 1;
pub const NAME_SERVER_SLOT: u32 = 0;
pub const ENVIRONMENT_SLOT: u32 = 1;
pub const SERVICE_SLOT: u32 = 2;
pub const MACH_PORTS_SLOTS_USED: u32 = 3;
pub const mach_host_MSG_COUNT: u32 = 35;
pub const SWITCH_OPTION_NONE: u32 = 0;
pub const SWITCH_OPTION_DEPRESS: u32 = 1;
pub const SWITCH_OPTION_WAIT: u32 = 2;
pub const RPC_SIGBUF_SIZE: u32 = 8;
pub const _MACH_ERROR_: u32 = 1;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const VOUCHER_MACH_MSG_API_VERSION: u32 = 20140205;
pub const clock_MSG_COUNT: u32 = 3;
pub const clock_reply_MSG_COUNT: u32 = 1;
pub const exc_MSG_COUNT: u32 = 3;
pub const HOST_REBOOT_HALT: u32 = 8;
pub const HOST_REBOOT_UPSDELAY: u32 = 256;
pub const HOST_REBOOT_DEBUGGER: u32 = 4096;
pub const TASK_PORT_REGISTER_MAX: u32 = 3;
pub const TASK_MAX_WATCHPORT_COUNT: u32 = 32;
pub const TASK_SELF_PORT_COUNT: u32 = 4;
pub const THREAD_SELF_PORT_COUNT: u32 = 3;
pub const mach_vm_MSG_COUNT: u32 = 25;
pub const mach_voucher_MSG_COUNT: u32 = 5;
pub const memory_entry_MSG_COUNT: u32 = 3;
pub const SHARED_REGION_BASE_I386: u32 = 2415919104;
pub const SHARED_REGION_SIZE_I386: u32 = 536870912;
pub const SHARED_REGION_NESTING_BASE_I386: u32 = 2415919104;
pub const SHARED_REGION_NESTING_SIZE_I386: u32 = 536870912;
pub const SHARED_REGION_NESTING_MIN_I386: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX_I386: u32 = 4292870144;
pub const SHARED_REGION_BASE_X86_64: u64 = 140703128616960;
pub const SHARED_REGION_SIZE_X86_64: u64 = 34326183936;
pub const SHARED_REGION_NESTING_BASE_X86_64: u64 = 140703128616960;
pub const SHARED_REGION_NESTING_SIZE_X86_64: u64 = 34326183936;
pub const SHARED_REGION_NESTING_MIN_X86_64: u32 = 2097152;
pub const SHARED_REGION_NESTING_MAX_X86_64: i32 = -2097152;
pub const SHARED_REGION_BASE_PPC: u32 = 2415919104;
pub const SHARED_REGION_SIZE_PPC: u32 = 536870912;
pub const SHARED_REGION_NESTING_BASE_PPC: u32 = 2415919104;
pub const SHARED_REGION_NESTING_SIZE_PPC: u32 = 268435456;
pub const SHARED_REGION_NESTING_MIN_PPC: u32 = 268435456;
pub const SHARED_REGION_NESTING_MAX_PPC: u32 = 268435456;
pub const SHARED_REGION_BASE_PPC64: u64 = 140734804000768;
pub const SHARED_REGION_SIZE_PPC64: u32 = 2684354560;
pub const SHARED_REGION_NESTING_BASE_PPC64: u64 = 140734804000768;
pub const SHARED_REGION_NESTING_SIZE_PPC64: u32 = 2684354560;
pub const SHARED_REGION_NESTING_MIN_PPC64: u32 = 268435456;
pub const SHARED_REGION_NESTING_MAX_PPC64: u32 = 268435456;
pub const SHARED_REGION_BASE_ARM: u32 = 1073741824;
pub const SHARED_REGION_SIZE_ARM: u32 = 1073741824;
pub const SHARED_REGION_NESTING_BASE_ARM: u32 = 1073741824;
pub const SHARED_REGION_NESTING_SIZE_ARM: u32 = 1073741824;
pub const SHARED_REGION_BASE_ARM64_32: u32 = 436207616;
pub const SHARED_REGION_SIZE_ARM64_32: u32 = 2785017856;
pub const SHARED_REGION_NESTING_BASE_ARM64_32: u32 = 436207616;
pub const SHARED_REGION_NESTING_SIZE_ARM64_32: u32 = 2785017856;
pub const SHARED_REGION_BASE_ARM64: u64 = 6442450944;
pub const SHARED_REGION_SIZE_ARM64: u64 = 4294967296;
pub const SHARED_REGION_NESTING_BASE_ARM64: u64 = 6442450944;
pub const SHARED_REGION_NESTING_SIZE_ARM64: u64 = 4294967296;
pub const SHARED_REGION_BASE: u64 = 6442450944;
pub const SHARED_REGION_SIZE: u64 = 4294967296;
pub const SHARED_REGION_NESTING_BASE: u64 = 6442450944;
pub const SHARED_REGION_NESTING_SIZE: u64 = 4294967296;
pub const VM_PROT_COW: u32 = 8;
pub const VM_PROT_ZF: u32 = 16;
pub const VM_PROT_SLIDE: u32 = 32;
pub const VM_PROT_NOAUTH: u32 = 64;
pub const VM_PROT_TRANSLATED_ALLOW_EXECUTE: u32 = 128;
pub const CC_SYM_PREFIX: &[u8; 2usize] = b"_\0";
pub const DTRACE_NOPS: &[u8; 6usize] = b"nop\n\t\0";
pub const MACH_ARM_TRAP_ABSTIME: i32 = -3;
pub const MACH_ARM_TRAP_CONTTIME: i32 = -4;
pub const DEVICE_PAGER_GUARDED: u32 = 1;
pub const DEVICE_PAGER_COHERENT: u32 = 2;
pub const DEVICE_PAGER_CACHE_INHIB: u32 = 4;
pub const DEVICE_PAGER_WRITE_THROUGH: u32 = 8;
pub const DEVICE_PAGER_CONTIGUOUS: u32 = 256;
pub const DEVICE_PAGER_NOPHYSCACHE: u32 = 512;
pub const OSATOMIC_DEPRECATED: u32 = 1;
pub const OSSPINLOCK_DEPRECATED: u32 = 1;
pub const OS_SPINLOCK_INIT: u32 = 0;
pub const OS_LOCK_API_VERSION: u32 = 20160309;
pub const MALLOC_PTR_IN_USE_RANGE_TYPE: u32 = 1;
pub const MALLOC_PTR_REGION_RANGE_TYPE: u32 = 2;
pub const MALLOC_ADMIN_REGION_RANGE_TYPE: u32 = 4;
pub const MALLOC_ZONE_SPECIFIC_FLAGS: u32 = 65280;
pub const MALLOC_VERBOSE_PRINT_LEVEL: u32 = 2;
pub const FASTTRAP_T_INV: u32 = 1;
pub const FASTTRAP_T_COMMON: u32 = 2;
pub const FASTTRAP_T_BLX: u32 = 3;
pub const FASTTRAP_T_B_COND: u32 = 4;
pub const FASTTRAP_T_B_UNCOND: u32 = 5;
pub const FASTTRAP_T_BX_REG: u32 = 6;
pub const FASTTRAP_T_PUSH_LR: u32 = 7;
pub const FASTTRAP_T_POP_PC: u32 = 8;
pub const FASTTRAP_T_STM_LR: u32 = 9;
pub const FASTTRAP_T_LDM_PC: u32 = 10;
pub const FASTTRAP_T_CPY_PC: u32 = 11;
pub const FASTTRAP_T_MOV_PC_REG: u32 = 12;
pub const FASTTRAP_T_LDR_PC_IMMED: u32 = 13;
pub const FASTTRAP_T_VLDR_PC_IMMED: u32 = 14;
pub const FASTTRAP_T_CB_N_Z: u32 = 15;
pub const FASTTRAP_T_ARM64_STANDARD_FUNCTION_ENTRY: u32 = 16;
pub const FASTTRAP_T_ARM64_LDR_S_PC_REL: u32 = 17;
pub const FASTTRAP_T_ARM64_LDR_W_PC_REL: u32 = 18;
pub const FASTTRAP_T_ARM64_LDR_D_PC_REL: u32 = 19;
pub const FASTTRAP_T_ARM64_LDR_X_PC_REL: u32 = 20;
pub const FASTTRAP_T_ARM64_LDR_Q_PC_REL: u32 = 21;
pub const FASTTRAP_T_ARM64_LDRSW_PC_REL: u32 = 22;
pub const FASTTRAP_T_ARM64_B_COND: u32 = 23;
pub const FASTTRAP_T_ARM64_CBNZ_W: u32 = 24;
pub const FASTTRAP_T_ARM64_CBNZ_X: u32 = 25;
pub const FASTTRAP_T_ARM64_CBZ_W: u32 = 26;
pub const FASTTRAP_T_ARM64_CBZ_X: u32 = 27;
pub const FASTTRAP_T_ARM64_TBNZ: u32 = 28;
pub const FASTTRAP_T_ARM64_TBZ: u32 = 29;
pub const FASTTRAP_T_ARM64_B: u32 = 30;
pub const FASTTRAP_T_ARM64_BL: u32 = 31;
pub const FASTTRAP_T_ARM64_BLR: u32 = 32;
pub const FASTTRAP_T_ARM64_BR: u32 = 33;
pub const FASTTRAP_T_ARM64_RET: u32 = 34;
pub const FASTTRAP_T_ARM64_ADRP: u32 = 35;
pub const FASTTRAP_T_ARM64_ADR: u32 = 36;
pub const FASTTRAP_T_ARM64_PRFM: u32 = 37;
pub const FASTTRAP_T_ARM64_EXCLUSIVE_MEM: u32 = 38;
pub const FASTTRAP_T_ARM64_RETAB: u32 = 39;
pub const FASTTRAP_ARM32_INSTR: u32 = 3892305660;
pub const FASTTRAP_THUMB32_INSTR: u32 = 57084;
pub const FASTTRAP_ARM64_INSTR: u32 = 3891195518;
pub const FASTTRAP_ARM32_RET_INSTR: u32 = 3892305659;
pub const FASTTRAP_THUMB32_RET_INSTR: u32 = 57083;
pub const FASTTRAP_ARM64_RET_INSTR: u32 = 3891195517;
pub const FASTTRAP_FN_DONE_INIT: u32 = 255;
pub const FASTTRAP_FN_UNKNOWN: u32 = 0;
pub const FASTTRAP_FN_ARM: u32 = 1;
pub const FASTTRAP_FN_THUMB: u32 = 2;
pub const FASTTRAP_FN_USDT: u32 = 3;
pub const FASTTRAP_FN_ARM64: u32 = 4;
pub const FASTTRAP_FN_ARM64_32: u32 = 5;
pub const REG_SP: u32 = 13;
pub const REG_LR: u32 = 14;
pub const REG_PC: u32 = 15;
pub const FASTTRAP_RETURN_AFRAMES: u32 = 6;
pub const FASTTRAP_ENTRY_AFRAMES: u32 = 5;
pub const FASTTRAP_OFFSET_AFRAMES: u32 = 5;
pub const FASTTRAP_ARM64_OP_VALUE_FUNC_ENTRY: u32 = 2847898621;
pub const FASTTRAP_ARM64_OP_MASK_LDR_S_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_LDR_S_PC_REL: u32 = 469762048;
pub const FASTTRAP_ARM64_OP_MASK_LDR_W_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_LDR_W_PC_REL: u32 = 402653184;
pub const FASTTRAP_ARM64_OP_MASK_LDR_D_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_LDR_D_PC_REL: u32 = 1543503872;
pub const FASTTRAP_ARM64_OP_MASK_LDR_X_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_LDR_X_PC_REL: u32 = 1476395008;
pub const FASTTRAP_ARM64_OP_MASK_LDR_Q_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_LDR_Q_PC_REL: u32 = 2617245696;
pub const FASTTRAP_ARM64_OP_MASK_LRDSW_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_LRDSW_PC_REL: u32 = 2550136832;
pub const FASTTRAP_ARM64_OP_MASK_B_COND_PC_REL: u32 = 4278190096;
pub const FASTTRAP_ARM64_OP_VALUE_B_COND_PC_REL: u32 = 1409286144;
pub const FASTTRAP_ARM64_OP_MASK_CBNZ_W_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_CBNZ_W_PC_REL: u32 = 889192448;
pub const FASTTRAP_ARM64_OP_MASK_CBNZ_X_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_CBNZ_X_PC_REL: u32 = 3036676096;
pub const FASTTRAP_ARM64_OP_MASK_CBZ_W_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_CBZ_W_PC_REL: u32 = 872415232;
pub const FASTTRAP_ARM64_OP_MASK_CBZ_X_PC_REL: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_CBZ_X_PC_REL: u32 = 3019898880;
pub const FASTTRAP_ARM64_OP_MASK_TBNZ_PC_REL: u32 = 2130706432;
pub const FASTTRAP_ARM64_OP_VALUE_TBNZ_PC_REL: u32 = 922746880;
pub const FASTTRAP_ARM64_OP_MASK_TBZ_PC_REL: u32 = 2130706432;
pub const FASTTRAP_ARM64_OP_VALUE_TBZ_PC_REL: u32 = 905969664;
pub const FASTTRAP_ARM64_OP_MASK_B_PC_REL: u32 = 4227858432;
pub const FASTTRAP_ARM64_OP_VALUE_B_PC_REL: u32 = 335544320;
pub const FASTTRAP_ARM64_OP_MASK_BL_PC_REL: u32 = 4227858432;
pub const FASTTRAP_ARM64_OP_VALUE_BL_PC_REL: u32 = 2483027968;
pub const FASTTRAP_ARM64_OP_MASK_BLR: u32 = 4294966815;
pub const FASTTRAP_ARM64_OP_VALUE_BLR: u32 = 3594452992;
pub const FASTTRAP_ARM64_OP_MASK_BR: u32 = 4294966815;
pub const FASTTRAP_ARM64_OP_VALUE_BR: u32 = 3592355840;
pub const FASTTRAP_ARM64_OP_MASK_RET: u32 = 4294966303;
pub const FASTTRAP_ARM64_OP_VALUE_RET: u32 = 3596550144;
pub const FASTTRAP_ARM64_OP_MASK_ADRP: u32 = 2667577344;
pub const FASTTRAP_ARM64_OP_VALUE_ADRP: u32 = 2415919104;
pub const FASTTRAP_ARM64_OP_MASK_ADR: u32 = 2667577344;
pub const FASTTRAP_ARM64_OP_VALUE_ADR: u32 = 268435456;
pub const FASTTRAP_ARM64_OP_MASK_PRFM: u32 = 4278190080;
pub const FASTTRAP_ARM64_OP_VALUE_PRFM: u32 = 3623878656;
pub const FASTTRAP_ARM64_OP_MASK_EXCL_MEM: u32 = 1056964608;
pub const FASTTRAP_ARM64_OP_VALUE_EXCL_MEM: u32 = 134217728;
pub const FASTTRAP_ARM64_OP_MASK_RETAB: u32 = 4294966303;
pub const FASTTRAP_ARM64_OP_VALUE_RETAB: u32 = 3596553247;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const _BSD_ARM_VMPARAM_H_: u32 = 1;
pub const USRSTACK: u32 = 668991488;
pub const USRSTACK64: u64 = 6171918336;
pub const DFLSSIZ: u32 = 8372224;
pub const MAXSSIZ: u32 = 67108864;
pub const DFLCSIZ: u32 = 0;
pub const _BSD_I386_VMPARAM_H_: u32 = 1;
pub const BSM_PF_UNSPEC: u32 = 0;
pub const BSM_PF_LOCAL: u32 = 1;
pub const BSM_PF_INET: u32 = 2;
pub const BSM_PF_IMPLINK: u32 = 3;
pub const BSM_PF_PUP: u32 = 4;
pub const BSM_PF_CHAOS: u32 = 5;
pub const BSM_PF_NS: u32 = 6;
pub const BSM_PF_NBS: u32 = 7;
pub const BSM_PF_ECMA: u32 = 8;
pub const BSM_PF_DATAKIT: u32 = 9;
pub const BSM_PF_CCITT: u32 = 10;
pub const BSM_PF_SNA: u32 = 11;
pub const BSM_PF_DECnet: u32 = 12;
pub const BSM_PF_DLI: u32 = 13;
pub const BSM_PF_LAT: u32 = 14;
pub const BSM_PF_HYLINK: u32 = 15;
pub const BSM_PF_APPLETALK: u32 = 16;
pub const BSM_PF_NIT: u32 = 17;
pub const BSM_PF_802: u32 = 18;
pub const BSM_PF_OSI: u32 = 19;
pub const BSM_PF_X25: u32 = 20;
pub const BSM_PF_OSINET: u32 = 21;
pub const BSM_PF_GOSIP: u32 = 22;
pub const BSM_PF_IPX: u32 = 23;
pub const BSM_PF_ROUTE: u32 = 24;
pub const BSM_PF_LINK: u32 = 25;
pub const BSM_PF_INET6: u32 = 26;
pub const BSM_PF_KEY: u32 = 27;
pub const BSM_PF_NCA: u32 = 28;
pub const BSM_PF_POLICY: u32 = 29;
pub const BSM_PF_INET_OFFLOAD: u32 = 30;
pub const BSM_PF_NETBIOS: u32 = 500;
pub const BSM_PF_ISO: u32 = 501;
pub const BSM_PF_XTP: u32 = 502;
pub const BSM_PF_COIP: u32 = 503;
pub const BSM_PF_CNT: u32 = 504;
pub const BSM_PF_RTIP: u32 = 505;
pub const BSM_PF_SIP: u32 = 506;
pub const BSM_PF_PIP: u32 = 507;
pub const BSM_PF_ISDN: u32 = 508;
pub const BSM_PF_E164: u32 = 509;
pub const BSM_PF_NATM: u32 = 510;
pub const BSM_PF_ATM: u32 = 511;
pub const BSM_PF_NETGRAPH: u32 = 512;
pub const BSM_PF_SLOW: u32 = 513;
pub const BSM_PF_SCLUSTER: u32 = 514;
pub const BSM_PF_ARP: u32 = 515;
pub const BSM_PF_BLUETOOTH: u32 = 516;
pub const BSM_PF_IEEE80211: u32 = 517;
pub const BSM_PF_AX25: u32 = 518;
pub const BSM_PF_ROSE: u32 = 519;
pub const BSM_PF_NETBEUI: u32 = 520;
pub const BSM_PF_SECURITY: u32 = 521;
pub const BSM_PF_PACKET: u32 = 522;
pub const BSM_PF_ASH: u32 = 523;
pub const BSM_PF_ECONET: u32 = 524;
pub const BSM_PF_ATMSVC: u32 = 525;
pub const BSM_PF_IRDA: u32 = 526;
pub const BSM_PF_PPPOX: u32 = 527;
pub const BSM_PF_WANPIPE: u32 = 528;
pub const BSM_PF_LLC: u32 = 529;
pub const BSM_PF_CAN: u32 = 530;
pub const BSM_PF_TIPC: u32 = 531;
pub const BSM_PF_IUCV: u32 = 532;
pub const BSM_PF_RXRPC: u32 = 533;
pub const BSM_PF_PHONET: u32 = 534;
pub const BSM_PF_UNKNOWN: u32 = 700;
pub const BSM_ERRNO_ESUCCESS: u32 = 0;
pub const BSM_ERRNO_EPERM: u32 = 1;
pub const BSM_ERRNO_ENOENT: u32 = 2;
pub const BSM_ERRNO_ESRCH: u32 = 3;
pub const BSM_ERRNO_EINTR: u32 = 4;
pub const BSM_ERRNO_EIO: u32 = 5;
pub const BSM_ERRNO_ENXIO: u32 = 6;
pub const BSM_ERRNO_E2BIG: u32 = 7;
pub const BSM_ERRNO_ENOEXEC: u32 = 8;
pub const BSM_ERRNO_EBADF: u32 = 9;
pub const BSM_ERRNO_ECHILD: u32 = 10;
pub const BSM_ERRNO_EAGAIN: u32 = 11;
pub const BSM_ERRNO_ENOMEM: u32 = 12;
pub const BSM_ERRNO_EACCES: u32 = 13;
pub const BSM_ERRNO_EFAULT: u32 = 14;
pub const BSM_ERRNO_ENOTBLK: u32 = 15;
pub const BSM_ERRNO_EBUSY: u32 = 16;
pub const BSM_ERRNO_EEXIST: u32 = 17;
pub const BSM_ERRNO_EXDEV: u32 = 18;
pub const BSM_ERRNO_ENODEV: u32 = 19;
pub const BSM_ERRNO_ENOTDIR: u32 = 20;
pub const BSM_ERRNO_EISDIR: u32 = 21;
pub const BSM_ERRNO_EINVAL: u32 = 22;
pub const BSM_ERRNO_ENFILE: u32 = 23;
pub const BSM_ERRNO_EMFILE: u32 = 24;
pub const BSM_ERRNO_ENOTTY: u32 = 25;
pub const BSM_ERRNO_ETXTBSY: u32 = 26;
pub const BSM_ERRNO_EFBIG: u32 = 27;
pub const BSM_ERRNO_ENOSPC: u32 = 28;
pub const BSM_ERRNO_ESPIPE: u32 = 29;
pub const BSM_ERRNO_EROFS: u32 = 30;
pub const BSM_ERRNO_EMLINK: u32 = 31;
pub const BSM_ERRNO_EPIPE: u32 = 32;
pub const BSM_ERRNO_EDOM: u32 = 33;
pub const BSM_ERRNO_ERANGE: u32 = 34;
pub const BSM_ERRNO_ENOMSG: u32 = 35;
pub const BSM_ERRNO_EIDRM: u32 = 36;
pub const BSM_ERRNO_ECHRNG: u32 = 37;
pub const BSM_ERRNO_EL2NSYNC: u32 = 38;
pub const BSM_ERRNO_EL3HLT: u32 = 39;
pub const BSM_ERRNO_EL3RST: u32 = 40;
pub const BSM_ERRNO_ELNRNG: u32 = 41;
pub const BSM_ERRNO_EUNATCH: u32 = 42;
pub const BSM_ERRNO_ENOCSI: u32 = 43;
pub const BSM_ERRNO_EL2HLT: u32 = 44;
pub const BSM_ERRNO_EDEADLK: u32 = 45;
pub const BSM_ERRNO_ENOLCK: u32 = 46;
pub const BSM_ERRNO_ECANCELED: u32 = 47;
pub const BSM_ERRNO_ENOTSUP: u32 = 48;
pub const BSM_ERRNO_EDQUOT: u32 = 49;
pub const BSM_ERRNO_EBADE: u32 = 50;
pub const BSM_ERRNO_EBADR: u32 = 51;
pub const BSM_ERRNO_EXFULL: u32 = 52;
pub const BSM_ERRNO_ENOANO: u32 = 53;
pub const BSM_ERRNO_EBADRQC: u32 = 54;
pub const BSM_ERRNO_EBADSLT: u32 = 55;
pub const BSM_ERRNO_EDEADLOCK: u32 = 56;
pub const BSM_ERRNO_EBFONT: u32 = 57;
pub const BSM_ERRNO_EOWNERDEAD: u32 = 58;
pub const BSM_ERRNO_ENOTRECOVERABLE: u32 = 59;
pub const BSM_ERRNO_ENOSTR: u32 = 60;
pub const BSM_ERRNO_ENODATA: u32 = 61;
pub const BSM_ERRNO_ETIME: u32 = 62;
pub const BSM_ERRNO_ENOSR: u32 = 63;
pub const BSM_ERRNO_ENONET: u32 = 64;
pub const BSM_ERRNO_ENOPKG: u32 = 65;
pub const BSM_ERRNO_EREMOTE: u32 = 66;
pub const BSM_ERRNO_ENOLINK: u32 = 67;
pub const BSM_ERRNO_EADV: u32 = 68;
pub const BSM_ERRNO_ESRMNT: u32 = 69;
pub const BSM_ERRNO_ECOMM: u32 = 70;
pub const BSM_ERRNO_EPROTO: u32 = 71;
pub const BSM_ERRNO_ELOCKUNMAPPED: u32 = 72;
pub const BSM_ERRNO_ENOTACTIVE: u32 = 73;
pub const BSM_ERRNO_EMULTIHOP: u32 = 74;
pub const BSM_ERRNO_EBADMSG: u32 = 77;
pub const BSM_ERRNO_ENAMETOOLONG: u32 = 78;
pub const BSM_ERRNO_EOVERFLOW: u32 = 79;
pub const BSM_ERRNO_ENOTUNIQ: u32 = 80;
pub const BSM_ERRNO_EBADFD: u32 = 81;
pub const BSM_ERRNO_EREMCHG: u32 = 82;
pub const BSM_ERRNO_ELIBACC: u32 = 83;
pub const BSM_ERRNO_ELIBBAD: u32 = 84;
pub const BSM_ERRNO_ELIBSCN: u32 = 85;
pub const BSM_ERRNO_ELIBMAX: u32 = 86;
pub const BSM_ERRNO_ELIBEXEC: u32 = 87;
pub const BSM_ERRNO_EILSEQ: u32 = 88;
pub const BSM_ERRNO_ENOSYS: u32 = 89;
pub const BSM_ERRNO_ELOOP: u32 = 90;
pub const BSM_ERRNO_ERESTART: u32 = 91;
pub const BSM_ERRNO_ESTRPIPE: u32 = 92;
pub const BSM_ERRNO_ENOTEMPTY: u32 = 93;
pub const BSM_ERRNO_EUSERS: u32 = 94;
pub const BSM_ERRNO_ENOTSOCK: u32 = 95;
pub const BSM_ERRNO_EDESTADDRREQ: u32 = 96;
pub const BSM_ERRNO_EMSGSIZE: u32 = 97;
pub const BSM_ERRNO_EPROTOTYPE: u32 = 98;
pub const BSM_ERRNO_ENOPROTOOPT: u32 = 99;
pub const BSM_ERRNO_EPROTONOSUPPORT: u32 = 120;
pub const BSM_ERRNO_ESOCKTNOSUPPORT: u32 = 121;
pub const BSM_ERRNO_EOPNOTSUPP: u32 = 122;
pub const BSM_ERRNO_EPFNOSUPPORT: u32 = 123;
pub const BSM_ERRNO_EAFNOSUPPORT: u32 = 124;
pub const BSM_ERRNO_EADDRINUSE: u32 = 125;
pub const BSM_ERRNO_EADDRNOTAVAIL: u32 = 126;
pub const BSM_ERRNO_ENETDOWN: u32 = 127;
pub const BSM_ERRNO_ENETUNREACH: u32 = 128;
pub const BSM_ERRNO_ENETRESET: u32 = 129;
pub const BSM_ERRNO_ECONNABORTED: u32 = 130;
pub const BSM_ERRNO_ECONNRESET: u32 = 131;
pub const BSM_ERRNO_ENOBUFS: u32 = 132;
pub const BSM_ERRNO_EISCONN: u32 = 133;
pub const BSM_ERRNO_ENOTCONN: u32 = 134;
pub const BSM_ERRNO_ESHUTDOWN: u32 = 143;
pub const BSM_ERRNO_ETOOMANYREFS: u32 = 144;
pub const BSM_ERRNO_ETIMEDOUT: u32 = 145;
pub const BSM_ERRNO_ECONNREFUSED: u32 = 146;
pub const BSM_ERRNO_EHOSTDOWN: u32 = 147;
pub const BSM_ERRNO_EHOSTUNREACH: u32 = 148;
pub const BSM_ERRNO_EALREADY: u32 = 149;
pub const BSM_ERRNO_EINPROGRESS: u32 = 150;
pub const BSM_ERRNO_ESTALE: u32 = 151;
pub const BSM_ERRNO_EQFULL: u32 = 152;
pub const BSM_ERRNO_EPROCLIM: u32 = 190;
pub const BSM_ERRNO_EBADRPC: u32 = 191;
pub const BSM_ERRNO_ERPCMISMATCH: u32 = 192;
pub const BSM_ERRNO_EPROGUNAVAIL: u32 = 193;
pub const BSM_ERRNO_EPROGMISMATCH: u32 = 194;
pub const BSM_ERRNO_EPROCUNAVAIL: u32 = 195;
pub const BSM_ERRNO_EFTYPE: u32 = 196;
pub const BSM_ERRNO_EAUTH: u32 = 197;
pub const BSM_ERRNO_ENEEDAUTH: u32 = 198;
pub const BSM_ERRNO_ENOATTR: u32 = 199;
pub const BSM_ERRNO_EDOOFUS: u32 = 200;
pub const BSM_ERRNO_EJUSTRETURN: u32 = 201;
pub const BSM_ERRNO_ENOIOCTL: u32 = 202;
pub const BSM_ERRNO_EDIRIOCTL: u32 = 203;
pub const BSM_ERRNO_EPWROFF: u32 = 204;
pub const BSM_ERRNO_EDEVERR: u32 = 205;
pub const BSM_ERRNO_EBADEXEC: u32 = 206;
pub const BSM_ERRNO_EBADARCH: u32 = 207;
pub const BSM_ERRNO_ESHLIBVERS: u32 = 208;
pub const BSM_ERRNO_EBADMACHO: u32 = 209;
pub const BSM_ERRNO_EPOLICY: u32 = 210;
pub const BSM_ERRNO_EDOTDOT: u32 = 211;
pub const BSM_ERRNO_EUCLEAN: u32 = 212;
pub const BSM_ERRNO_ENOTNAM: u32 = 213;
pub const BSM_ERRNO_ENAVAIL: u32 = 214;
pub const BSM_ERRNO_EISNAM: u32 = 215;
pub const BSM_ERRNO_EREMOTEIO: u32 = 216;
pub const BSM_ERRNO_ENOMEDIUM: u32 = 217;
pub const BSM_ERRNO_EMEDIUMTYPE: u32 = 218;
pub const BSM_ERRNO_ENOKEY: u32 = 219;
pub const BSM_ERRNO_EKEYEXPIRED: u32 = 220;
pub const BSM_ERRNO_EKEYREVOKED: u32 = 221;
pub const BSM_ERRNO_EKEYREJECTED: u32 = 222;
pub const BSM_ERRNO_UNKNOWN: u32 = 250;
pub const BSM_F_DUPFD: u32 = 0;
pub const BSM_F_GETFD: u32 = 1;
pub const BSM_F_SETFD: u32 = 2;
pub const BSM_F_GETFL: u32 = 3;
pub const BSM_F_SETFL: u32 = 4;
pub const BSM_F_O_GETLK: u32 = 5;
pub const BSM_F_SETLK: u32 = 6;
pub const BSM_F_SETLKW: u32 = 7;
pub const BSM_F_CHKFL: u32 = 8;
pub const BSM_F_DUP2FD: u32 = 9;
pub const BSM_F_ALLOCSP: u32 = 10;
pub const BSM_F_FREESP: u32 = 11;
pub const BSM_F_ISSTREAM: u32 = 13;
pub const BSM_F_GETLK: u32 = 14;
pub const BSM_F_PRIV: u32 = 15;
pub const BSM_F_NPRIV: u32 = 16;
pub const BSM_F_QUOTACTL: u32 = 17;
pub const BSM_F_BLOCKS: u32 = 18;
pub const BSM_F_BLKSIZE: u32 = 19;
pub const BSM_F_GETOWN: u32 = 23;
pub const BSM_F_SETOWN: u32 = 24;
pub const BSM_F_REVOKE: u32 = 25;
pub const BSM_F_HASREMOTELOCKS: u32 = 26;
pub const BSM_F_FREESP64: u32 = 27;
pub const BSM_F_ALLOCSP64: u32 = 28;
pub const BSM_F_GETLK64: u32 = 33;
pub const BSM_F_SETLK64: u32 = 34;
pub const BSM_F_SETLKW64: u32 = 35;
pub const BSM_F_SHARE: u32 = 40;
pub const BSM_F_UNSHARE: u32 = 41;
pub const BSM_F_SETLK_NBMAND: u32 = 42;
pub const BSM_F_SHARE_NBMAND: u32 = 43;
pub const BSM_F_SETLK64_NBMAND: u32 = 44;
pub const BSM_F_GETXFL: u32 = 45;
pub const BSM_F_BADFD: u32 = 46;
pub const BSM_F_OGETLK: u32 = 107;
pub const BSM_F_OSETLK: u32 = 108;
pub const BSM_F_OSETLKW: u32 = 109;
pub const BSM_F_SETLK_REMOTE: u32 = 114;
pub const BSM_F_SETSIG: u32 = 210;
pub const BSM_F_GETSIG: u32 = 211;
pub const BSM_F_CHKCLEAN: u32 = 341;
pub const BSM_F_PREALLOCATE: u32 = 342;
pub const BSM_F_SETSIZE: u32 = 343;
pub const BSM_F_RDADVISE: u32 = 344;
pub const BSM_F_RDAHEAD: u32 = 345;
pub const BSM_F_NOCACHE: u32 = 348;
pub const BSM_F_LOG2PHYS: u32 = 349;
pub const BSM_F_GETPATH: u32 = 350;
pub const BSM_F_FULLFSYNC: u32 = 351;
pub const BSM_F_PATHPKG_CHECK: u32 = 352;
pub const BSM_F_FREEZE_FS: u32 = 353;
pub const BSM_F_THAW_FS: u32 = 354;
pub const BSM_F_GLOBAL_NOCACHE: u32 = 355;
pub const BSM_F_OPENFROM: u32 = 356;
pub const BSM_F_UNLINKFROM: u32 = 357;
pub const BSM_F_CHECK_OPENEVT: u32 = 358;
pub const BSM_F_ADDSIGS: u32 = 359;
pub const BSM_F_MARKDEPENDENCY: u32 = 360;
pub const BSM_F_BARRIERFSYNC: u32 = 361;
pub const BSM_F_PUNCHHOLE: u32 = 362;
pub const BSM_F_TRIM_ACTIVE_FILE: u32 = 363;
pub const BSM_F_SPECULATIVE_READ: u32 = 364;
pub const BSM_F_FS_SPECIFIC_0: u32 = 400;
pub const BSM_F_FS_SPECIFIC_1: u32 = 401;
pub const BSM_F_FS_SPECIFIC_2: u32 = 402;
pub const BSM_F_FS_SPECIFIC_3: u32 = 403;
pub const BSM_F_FS_SPECIFIC_4: u32 = 404;
pub const BSM_F_FS_SPECIFIC_5: u32 = 405;
pub const BSM_F_FS_SPECIFIC_6: u32 = 406;
pub const BSM_F_FS_SPECIFIC_7: u32 = 407;
pub const BSM_F_FS_SPECIFIC_8: u32 = 408;
pub const BSM_F_FS_SPECIFIC_9: u32 = 409;
pub const BSM_F_FS_SPECIFIC_10: u32 = 410;
pub const BSM_F_FS_SPECIFIC_11: u32 = 411;
pub const BSM_F_FS_SPECIFIC_12: u32 = 412;
pub const BSM_F_FS_SPECIFIC_13: u32 = 413;
pub const BSM_F_FS_SPECIFIC_14: u32 = 414;
pub const BSM_F_FS_SPECIFIC_15: u32 = 415;
pub const BSM_F_UNKNOWN: u32 = 65535;
pub const AUT_INVALID: u32 = 0;
pub const AUT_OTHER_FILE32: u32 = 17;
pub const AUT_OHEADER: u32 = 18;
pub const AUT_TRAILER: u32 = 19;
pub const AUT_HEADER32: u32 = 20;
pub const AUT_HEADER32_EX: u32 = 21;
pub const AUT_DATA: u32 = 33;
pub const AUT_IPC: u32 = 34;
pub const AUT_PATH: u32 = 35;
pub const AUT_SUBJECT32: u32 = 36;
pub const AUT_XATPATH: u32 = 37;
pub const AUT_PROCESS32: u32 = 38;
pub const AUT_RETURN32: u32 = 39;
pub const AUT_TEXT: u32 = 40;
pub const AUT_OPAQUE: u32 = 41;
pub const AUT_IN_ADDR: u32 = 42;
pub const AUT_IP: u32 = 43;
pub const AUT_IPORT: u32 = 44;
pub const AUT_ARG32: u32 = 45;
pub const AUT_SOCKET: u32 = 46;
pub const AUT_SEQ: u32 = 47;
pub const AUT_ACL: u32 = 48;
pub const AUT_ATTR: u32 = 49;
pub const AUT_IPC_PERM: u32 = 50;
pub const AUT_LABEL: u32 = 51;
pub const AUT_GROUPS: u32 = 52;
pub const AUT_ACE: u32 = 53;
pub const AUT_PRIV: u32 = 56;
pub const AUT_UPRIV: u32 = 57;
pub const AUT_LIAISON: u32 = 58;
pub const AUT_NEWGROUPS: u32 = 59;
pub const AUT_EXEC_ARGS: u32 = 60;
pub const AUT_EXEC_ENV: u32 = 61;
pub const AUT_ATTR32: u32 = 62;
pub const AUT_UNAUTH: u32 = 63;
pub const AUT_XATOM: u32 = 64;
pub const AUT_XOBJ: u32 = 65;
pub const AUT_XPROTO: u32 = 66;
pub const AUT_XSELECT: u32 = 67;
pub const AUT_XCOLORMAP: u32 = 68;
pub const AUT_XCURSOR: u32 = 69;
pub const AUT_XFONT: u32 = 70;
pub const AUT_XGC: u32 = 71;
pub const AUT_XPIXMAP: u32 = 72;
pub const AUT_XPROPERTY: u32 = 73;
pub const AUT_XWINDOW: u32 = 74;
pub const AUT_XCLIENT: u32 = 75;
pub const AUT_CMD: u32 = 81;
pub const AUT_EXIT: u32 = 82;
pub const AUT_ZONENAME: u32 = 96;
pub const AUT_HOST: u32 = 112;
pub const AUT_ARG64: u32 = 113;
pub const AUT_RETURN64: u32 = 114;
pub const AUT_ATTR64: u32 = 115;
pub const AUT_HEADER64: u32 = 116;
pub const AUT_SUBJECT64: u32 = 117;
pub const AUT_PROCESS64: u32 = 119;
pub const AUT_OTHER_FILE64: u32 = 120;
pub const AUT_HEADER64_EX: u32 = 121;
pub const AUT_SUBJECT32_EX: u32 = 122;
pub const AUT_PROCESS32_EX: u32 = 123;
pub const AUT_SUBJECT64_EX: u32 = 124;
pub const AUT_PROCESS64_EX: u32 = 125;
pub const AUT_IN_ADDR_EX: u32 = 126;
pub const AUT_SOCKET_EX: u32 = 127;
pub const AUT_HEADER: u32 = 20;
pub const AUT_ARG: u32 = 45;
pub const AUT_RETURN: u32 = 39;
pub const AUT_SUBJECT: u32 = 36;
pub const AUT_PROCESS: u32 = 38;
pub const AUT_OTHER_FILE: u32 = 17;
pub const AUT_SOCKINET32: u32 = 128;
pub const AUT_SOCKINET128: u32 = 129;
pub const AUT_SOCKUNIX: u32 = 130;
pub const AUT_IDENTITY: u32 = 237;
pub const AUT_KRB5_PRINCIPAL: u32 = 238;
pub const AUT_CERT_HASH: u32 = 239;
pub const AUP_BINARY: u32 = 0;
pub const AUP_OCTAL: u32 = 1;
pub const AUP_DECIMAL: u32 = 2;
pub const AUP_HEX: u32 = 3;
pub const AUP_STRING: u32 = 4;
pub const AUR_BYTE: u32 = 0;
pub const AUR_CHAR: u32 = 0;
pub const AUR_SHORT: u32 = 1;
pub const AUR_INT32: u32 = 2;
pub const AUR_INT: u32 = 2;
pub const AUR_INT64: u32 = 3;
pub const PAD_NOTATTR: u32 = 16384;
pub const PAD_FAILURE: u32 = 32768;
pub const AUDIT_MAX_GROUPS: u32 = 16;
pub const AUDIT_HEADER_VERSION_OLDDARWIN: u32 = 1;
pub const AUDIT_HEADER_VERSION_SOLARIS: u32 = 2;
pub const AUDIT_HEADER_VERSION_TSOL25: u32 = 3;
pub const AUDIT_HEADER_VERSION_TSOL: u32 = 4;
pub const AUDIT_HEADER_VERSION_OPENBSM10: u32 = 10;
pub const AUDIT_HEADER_VERSION_OPENBSM11: u32 = 11;
pub const AUDIT_HEADER_VERSION_OPENBSM: u32 = 11;
pub const AUT_TRAILER_MAGIC: u32 = 45317;
pub const AUDIT_MAX_ARGS: u32 = 128;
pub const AUDIT_MAX_ENV: u32 = 128;
pub const AUDIT_MAX_CERT_HASH: u32 = 32;
pub const AUDIT_MAX_KRB5_PRINCIPAL: u32 = 32;
pub const AU_PRS_USECACHE: u32 = 0;
pub const AU_PRS_REREAD: u32 = 1;
pub const AU_PRS_SUCCESS: u32 = 1;
pub const AU_PRS_FAILURE: u32 = 2;
pub const AU_PRS_BOTH: u32 = 3;
pub const AUDIT_EVENT_FILE: &[u8; 26usize] = b"/etc/security/audit_event\0";
pub const AUDIT_CLASS_FILE: &[u8; 26usize] = b"/etc/security/audit_class\0";
pub const AUDIT_CONTROL_FILE: &[u8; 28usize] = b"/etc/security/audit_control\0";
pub const AUDIT_USER_FILE: &[u8; 25usize] = b"/etc/security/audit_user\0";
pub const DIR_CONTROL_ENTRY: &[u8; 4usize] = b"dir\0";
pub const MINFREE_CONTROL_ENTRY: &[u8; 8usize] = b"minfree\0";
pub const FILESZ_CONTROL_ENTRY: &[u8; 7usize] = b"filesz\0";
pub const FLAGS_CONTROL_ENTRY: &[u8; 6usize] = b"flags\0";
pub const NA_CONTROL_ENTRY: &[u8; 8usize] = b"naflags\0";
pub const POLICY_CONTROL_ENTRY: &[u8; 7usize] = b"policy\0";
pub const AUDIT_HOST_CONTROL_ENTRY: &[u8; 5usize] = b"host\0";
pub const EXPIRE_AFTER_CONTROL_ENTRY: &[u8; 13usize] = b"expire-after\0";
pub const MEMBER_SET_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 23usize] = b"member-set-sflags-mask\0";
pub const MEMBER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 25usize] = b"member-clear-sflags-mask\0";
pub const SUPERUSER_SET_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 26usize] = b"superuser-set-sflags-mask\0";
pub const SUPERUSER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: &[u8; 28usize] =
    b"superuser-clear-sflags-mask\0";
pub const AU_CLASS_NAME_MAX: u32 = 8;
pub const AU_CLASS_DESC_MAX: u32 = 72;
pub const AU_EVENT_NAME_MAX: u32 = 30;
pub const AU_EVENT_DESC_MAX: u32 = 50;
pub const AU_USER_NAME_MAX: u32 = 50;
pub const AU_LINE_MAX: u32 = 256;
pub const MAX_AUDITSTRING_LEN: u32 = 256;
pub const BSM_TEXTBUFSZ: u32 = 256;
pub const AU_TO_NO_WRITE: u32 = 0;
pub const AU_TO_WRITE: u32 = 1;
pub const AU_OFLAG_NONE: u32 = 0;
pub const AU_OFLAG_RAW: u32 = 1;
pub const AU_OFLAG_SHORT: u32 = 2;
pub const AU_OFLAG_XML: u32 = 4;
pub const AU_OFLAG_NORESOLVE: u32 = 8;
pub const __BSM_INTERNAL_NOTIFY_KEY: &[u8; 23usize] = b"com.apple.audit.change\0";
pub const AUDIT_OFF: u32 = 2;
pub const AUDIT_ON: u32 = 1;
pub const AUDIT_FILTER_SUCCESS: u32 = 0;
pub const AUDIT_FILTER_FAILURE: i32 = -1;
pub const AUDIT_FILTER_ATTACH_STRING: &[u8; 20usize] = b"audit_filter_attach\0";
pub const AUDIT_FILTER_REINIT_STRING: &[u8; 20usize] = b"audit_filter_reinit\0";
pub const AUDIT_FILTER_RECORD_STRING: &[u8; 20usize] = b"audit_filter_record\0";
pub const AUDIT_FILTER_RAWRECORD_STRING: &[u8; 23usize] = b"audit_filter_rawrecord\0";
pub const AUDIT_FILTER_DETACH_STRING: &[u8; 20usize] = b"audit_filter_detach\0";
pub const AUDIT_HEADER_SIZE: u32 = 18;
pub const AUDIT_TRAILER_SIZE: u32 = 7;
pub const MAX_AUDIT_IDENTITY_SIZE: u32 = 179;
pub const AUE_NULL: u32 = 0;
pub const AUE_EXIT: u32 = 1;
pub const AUE_FORK: u32 = 2;
pub const AUE_FORKALL: u32 = 2;
pub const AUE_OPEN: u32 = 3;
pub const AUE_CREAT: u32 = 4;
pub const AUE_LINK: u32 = 5;
pub const AUE_UNLINK: u32 = 6;
pub const AUE_DELETE: u32 = 6;
pub const AUE_EXEC: u32 = 7;
pub const AUE_CHDIR: u32 = 8;
pub const AUE_MKNOD: u32 = 9;
pub const AUE_CHMOD: u32 = 10;
pub const AUE_CHOWN: u32 = 11;
pub const AUE_UMOUNT: u32 = 12;
pub const AUE_JUNK: u32 = 13;
pub const AUE_ACCESS: u32 = 14;
pub const AUE_KILL: u32 = 15;
pub const AUE_STAT: u32 = 16;
pub const AUE_LSTAT: u32 = 17;
pub const AUE_ACCT: u32 = 18;
pub const AUE_MCTL: u32 = 19;
pub const AUE_REBOOT: u32 = 20;
pub const AUE_SYMLINK: u32 = 21;
pub const AUE_READLINK: u32 = 22;
pub const AUE_EXECVE: u32 = 23;
pub const AUE_CHROOT: u32 = 24;
pub const AUE_VFORK: u32 = 25;
pub const AUE_SETGROUPS: u32 = 26;
pub const AUE_SETPGRP: u32 = 27;
pub const AUE_SWAPON: u32 = 28;
pub const AUE_SETHOSTNAME: u32 = 29;
pub const AUE_FCNTL: u32 = 30;
pub const AUE_SETPRIORITY: u32 = 31;
pub const AUE_CONNECT: u32 = 32;
pub const AUE_ACCEPT: u32 = 33;
pub const AUE_BIND: u32 = 34;
pub const AUE_SETSOCKOPT: u32 = 35;
pub const AUE_VTRACE: u32 = 36;
pub const AUE_SETTIMEOFDAY: u32 = 37;
pub const AUE_FCHOWN: u32 = 38;
pub const AUE_FCHMOD: u32 = 39;
pub const AUE_SETREUID: u32 = 40;
pub const AUE_SETREGID: u32 = 41;
pub const AUE_RENAME: u32 = 42;
pub const AUE_TRUNCATE: u32 = 43;
pub const AUE_FTRUNCATE: u32 = 44;
pub const AUE_FLOCK: u32 = 45;
pub const AUE_SHUTDOWN: u32 = 46;
pub const AUE_MKDIR: u32 = 47;
pub const AUE_RMDIR: u32 = 48;
pub const AUE_UTIMES: u32 = 49;
pub const AUE_ADJTIME: u32 = 50;
pub const AUE_SETRLIMIT: u32 = 51;
pub const AUE_KILLPG: u32 = 52;
pub const AUE_NFS_SVC: u32 = 53;
pub const AUE_STATFS: u32 = 54;
pub const AUE_FSTATFS: u32 = 55;
pub const AUE_UNMOUNT: u32 = 56;
pub const AUE_ASYNC_DAEMON: u32 = 57;
pub const AUE_NFS_GETFH: u32 = 58;
pub const AUE_SETDOMAINNAME: u32 = 59;
pub const AUE_QUOTACTL: u32 = 60;
pub const AUE_EXPORTFS: u32 = 61;
pub const AUE_MOUNT: u32 = 62;
pub const AUE_SEMSYS: u32 = 63;
pub const AUE_MSGSYS: u32 = 64;
pub const AUE_SHMSYS: u32 = 65;
pub const AUE_BSMSYS: u32 = 66;
pub const AUE_RFSSYS: u32 = 67;
pub const AUE_FCHDIR: u32 = 68;
pub const AUE_FCHROOT: u32 = 69;
pub const AUE_VPIXSYS: u32 = 70;
pub const AUE_PATHCONF: u32 = 71;
pub const AUE_OPEN_R: u32 = 72;
pub const AUE_OPEN_RC: u32 = 73;
pub const AUE_OPEN_RT: u32 = 74;
pub const AUE_OPEN_RTC: u32 = 75;
pub const AUE_OPEN_W: u32 = 76;
pub const AUE_OPEN_WC: u32 = 77;
pub const AUE_OPEN_WT: u32 = 78;
pub const AUE_OPEN_WTC: u32 = 79;
pub const AUE_OPEN_RW: u32 = 80;
pub const AUE_OPEN_RWC: u32 = 81;
pub const AUE_OPEN_RWT: u32 = 82;
pub const AUE_OPEN_RWTC: u32 = 83;
pub const AUE_MSGCTL: u32 = 84;
pub const AUE_MSGCTL_RMID: u32 = 85;
pub const AUE_MSGCTL_SET: u32 = 86;
pub const AUE_MSGCTL_STAT: u32 = 87;
pub const AUE_MSGGET: u32 = 88;
pub const AUE_MSGRCV: u32 = 89;
pub const AUE_MSGSND: u32 = 90;
pub const AUE_SHMCTL: u32 = 91;
pub const AUE_SHMCTL_RMID: u32 = 92;
pub const AUE_SHMCTL_SET: u32 = 93;
pub const AUE_SHMCTL_STAT: u32 = 94;
pub const AUE_SHMGET: u32 = 95;
pub const AUE_SHMAT: u32 = 96;
pub const AUE_SHMDT: u32 = 97;
pub const AUE_SEMCTL: u32 = 98;
pub const AUE_SEMCTL_RMID: u32 = 99;
pub const AUE_SEMCTL_SET: u32 = 100;
pub const AUE_SEMCTL_STAT: u32 = 101;
pub const AUE_SEMCTL_GETNCNT: u32 = 102;
pub const AUE_SEMCTL_GETPID: u32 = 103;
pub const AUE_SEMCTL_GETVAL: u32 = 104;
pub const AUE_SEMCTL_GETALL: u32 = 105;
pub const AUE_SEMCTL_GETZCNT: u32 = 106;
pub const AUE_SEMCTL_SETVAL: u32 = 107;
pub const AUE_SEMCTL_SETALL: u32 = 108;
pub const AUE_SEMGET: u32 = 109;
pub const AUE_SEMOP: u32 = 110;
pub const AUE_CORE: u32 = 111;
pub const AUE_CLOSE: u32 = 112;
pub const AUE_SYSTEMBOOT: u32 = 113;
pub const AUE_ASYNC_DAEMON_EXIT: u32 = 114;
pub const AUE_NFSSVC_EXIT: u32 = 115;
pub const AUE_WRITEL: u32 = 128;
pub const AUE_WRITEVL: u32 = 129;
pub const AUE_GETAUID: u32 = 130;
pub const AUE_SETAUID: u32 = 131;
pub const AUE_GETAUDIT: u32 = 132;
pub const AUE_SETAUDIT: u32 = 133;
pub const AUE_GETUSERAUDIT: u32 = 134;
pub const AUE_SETUSERAUDIT: u32 = 135;
pub const AUE_AUDITSVC: u32 = 136;
pub const AUE_AUDITUSER: u32 = 137;
pub const AUE_AUDITON: u32 = 138;
pub const AUE_AUDITON_GTERMID: u32 = 139;
pub const AUE_AUDITON_STERMID: u32 = 140;
pub const AUE_AUDITON_GPOLICY: u32 = 141;
pub const AUE_AUDITON_SPOLICY: u32 = 142;
pub const AUE_AUDITON_GQCTRL: u32 = 145;
pub const AUE_AUDITON_SQCTRL: u32 = 146;
pub const AUE_GETKERNSTATE: u32 = 147;
pub const AUE_SETKERNSTATE: u32 = 148;
pub const AUE_GETPORTAUDIT: u32 = 149;
pub const AUE_AUDITSTAT: u32 = 150;
pub const AUE_REVOKE: u32 = 151;
pub const AUE_MAC: u32 = 152;
pub const AUE_ENTERPROM: u32 = 153;
pub const AUE_EXITPROM: u32 = 154;
pub const AUE_IFLOAT: u32 = 155;
pub const AUE_PFLOAT: u32 = 156;
pub const AUE_UPRIV: u32 = 157;
pub const AUE_IOCTL: u32 = 158;
pub const AUE_SOCKET: u32 = 183;
pub const AUE_SENDTO: u32 = 184;
pub const AUE_PIPE: u32 = 185;
pub const AUE_SOCKETPAIR: u32 = 186;
pub const AUE_SEND: u32 = 187;
pub const AUE_SENDMSG: u32 = 188;
pub const AUE_RECV: u32 = 189;
pub const AUE_RECVMSG: u32 = 190;
pub const AUE_RECVFROM: u32 = 191;
pub const AUE_READ: u32 = 192;
pub const AUE_GETDENTS: u32 = 193;
pub const AUE_LSEEK: u32 = 194;
pub const AUE_WRITE: u32 = 195;
pub const AUE_WRITEV: u32 = 196;
pub const AUE_NFS: u32 = 197;
pub const AUE_READV: u32 = 198;
pub const AUE_OSTAT: u32 = 199;
pub const AUE_SETUID: u32 = 200;
pub const AUE_STIME: u32 = 201;
pub const AUE_UTIME: u32 = 202;
pub const AUE_NICE: u32 = 203;
pub const AUE_OSETPGRP: u32 = 204;
pub const AUE_SETGID: u32 = 205;
pub const AUE_READL: u32 = 206;
pub const AUE_READVL: u32 = 207;
pub const AUE_FSTAT: u32 = 208;
pub const AUE_DUP2: u32 = 209;
pub const AUE_MMAP: u32 = 210;
pub const AUE_AUDIT: u32 = 211;
pub const AUE_PRIOCNTLSYS: u32 = 212;
pub const AUE_MUNMAP: u32 = 213;
pub const AUE_SETEGID: u32 = 214;
pub const AUE_SETEUID: u32 = 215;
pub const AUE_PUTMSG: u32 = 216;
pub const AUE_GETMSG: u32 = 217;
pub const AUE_PUTPMSG: u32 = 218;
pub const AUE_GETPMSG: u32 = 219;
pub const AUE_AUDITSYS: u32 = 220;
pub const AUE_AUDITON_GETKMASK: u32 = 221;
pub const AUE_AUDITON_SETKMASK: u32 = 222;
pub const AUE_AUDITON_GETCWD: u32 = 223;
pub const AUE_AUDITON_GETCAR: u32 = 224;
pub const AUE_AUDITON_GETSTAT: u32 = 225;
pub const AUE_AUDITON_SETSTAT: u32 = 226;
pub const AUE_AUDITON_SETUMASK: u32 = 227;
pub const AUE_AUDITON_SETSMASK: u32 = 228;
pub const AUE_AUDITON_GETCOND: u32 = 229;
pub const AUE_AUDITON_SETCOND: u32 = 230;
pub const AUE_AUDITON_GETCLASS: u32 = 231;
pub const AUE_AUDITON_SETCLASS: u32 = 232;
pub const AUE_FUSERS: u32 = 233;
pub const AUE_STATVFS: u32 = 234;
pub const AUE_XSTAT: u32 = 235;
pub const AUE_LXSTAT: u32 = 236;
pub const AUE_LCHOWN: u32 = 237;
pub const AUE_MEMCNTL: u32 = 238;
pub const AUE_SYSINFO: u32 = 239;
pub const AUE_XMKNOD: u32 = 240;
pub const AUE_FORK1: u32 = 241;
pub const AUE_MODCTL: u32 = 242;
pub const AUE_MODLOAD: u32 = 243;
pub const AUE_MODUNLOAD: u32 = 244;
pub const AUE_MODCONFIG: u32 = 245;
pub const AUE_MODADDMAJ: u32 = 246;
pub const AUE_SOCKACCEPT: u32 = 247;
pub const AUE_SOCKCONNECT: u32 = 248;
pub const AUE_SOCKSEND: u32 = 249;
pub const AUE_SOCKRECEIVE: u32 = 250;
pub const AUE_ACLSET: u32 = 251;
pub const AUE_FACLSET: u32 = 252;
pub const AUE_DOORFS: u32 = 253;
pub const AUE_DOORFS_DOOR_CALL: u32 = 254;
pub const AUE_DOORFS_DOOR_RETURN: u32 = 255;
pub const AUE_DOORFS_DOOR_CREATE: u32 = 256;
pub const AUE_DOORFS_DOOR_REVOKE: u32 = 257;
pub const AUE_DOORFS_DOOR_INFO: u32 = 258;
pub const AUE_DOORFS_DOOR_CRED: u32 = 259;
pub const AUE_DOORFS_DOOR_BIND: u32 = 260;
pub const AUE_DOORFS_DOOR_UNBIND: u32 = 261;
pub const AUE_P_ONLINE: u32 = 262;
pub const AUE_PROCESSOR_BIND: u32 = 263;
pub const AUE_INST_SYNC: u32 = 264;
pub const AUE_SOCKCONFIG: u32 = 265;
pub const AUE_SETAUDIT_ADDR: u32 = 266;
pub const AUE_GETAUDIT_ADDR: u32 = 267;
pub const AUE_UMOUNT2: u32 = 268;
pub const AUE_FSAT: u32 = 269;
pub const AUE_OPENAT_R: u32 = 270;
pub const AUE_OPENAT_RC: u32 = 271;
pub const AUE_OPENAT_RT: u32 = 272;
pub const AUE_OPENAT_RTC: u32 = 273;
pub const AUE_OPENAT_W: u32 = 274;
pub const AUE_OPENAT_WC: u32 = 275;
pub const AUE_OPENAT_WT: u32 = 276;
pub const AUE_OPENAT_WTC: u32 = 277;
pub const AUE_OPENAT_RW: u32 = 278;
pub const AUE_OPENAT_RWC: u32 = 279;
pub const AUE_OPENAT_RWT: u32 = 280;
pub const AUE_OPENAT_RWTC: u32 = 281;
pub const AUE_RENAMEAT: u32 = 282;
pub const AUE_FSTATAT: u32 = 283;
pub const AUE_FCHOWNAT: u32 = 284;
pub const AUE_FUTIMESAT: u32 = 285;
pub const AUE_UNLINKAT: u32 = 286;
pub const AUE_CLOCK_SETTIME: u32 = 287;
pub const AUE_NTP_ADJTIME: u32 = 288;
pub const AUE_SETPPRIV: u32 = 289;
pub const AUE_MODDEVPLCY: u32 = 290;
pub const AUE_MODADDPRIV: u32 = 291;
pub const AUE_CRYPTOADM: u32 = 292;
pub const AUE_CONFIGKSSL: u32 = 293;
pub const AUE_BRANDSYS: u32 = 294;
pub const AUE_PF_POLICY_ADDRULE: u32 = 295;
pub const AUE_PF_POLICY_DELRULE: u32 = 296;
pub const AUE_PF_POLICY_CLONE: u32 = 297;
pub const AUE_PF_POLICY_FLIP: u32 = 298;
pub const AUE_PF_POLICY_FLUSH: u32 = 299;
pub const AUE_PF_POLICY_ALGS: u32 = 300;
pub const AUE_PORTFS: u32 = 301;
pub const AUE_DARWIN_GETFSSTAT: u32 = 301;
pub const AUE_DARWIN_PTRACE: u32 = 302;
pub const AUE_DARWIN_CHFLAGS: u32 = 303;
pub const AUE_DARWIN_FCHFLAGS: u32 = 304;
pub const AUE_DARWIN_PROFILE: u32 = 305;
pub const AUE_DARWIN_KTRACE: u32 = 306;
pub const AUE_DARWIN_SETLOGIN: u32 = 307;
pub const AUE_DARWIN_REBOOT: u32 = 308;
pub const AUE_DARWIN_REVOKE: u32 = 309;
pub const AUE_DARWIN_UMASK: u32 = 310;
pub const AUE_DARWIN_MPROTECT: u32 = 311;
pub const AUE_DARWIN_SETPRIORITY: u32 = 312;
pub const AUE_DARWIN_SETTIMEOFDAY: u32 = 313;
pub const AUE_DARWIN_FLOCK: u32 = 314;
pub const AUE_DARWIN_MKFIFO: u32 = 315;
pub const AUE_DARWIN_POLL: u32 = 316;
pub const AUE_DARWIN_SOCKETPAIR: u32 = 317;
pub const AUE_DARWIN_FUTIMES: u32 = 318;
pub const AUE_DARWIN_SETSID: u32 = 319;
pub const AUE_DARWIN_SETPRIVEXEC: u32 = 320;
pub const AUE_DARWIN_NFSSVC: u32 = 321;
pub const AUE_DARWIN_GETFH: u32 = 322;
pub const AUE_DARWIN_QUOTACTL: u32 = 323;
pub const AUE_DARWIN_ADDPROFILE: u32 = 324;
pub const AUE_DARWIN_KDEBUGTRACE: u32 = 325;
pub const AUE_DARWIN_FSTAT: u32 = 326;
pub const AUE_DARWIN_FPATHCONF: u32 = 327;
pub const AUE_DARWIN_GETDIRENTRIES: u32 = 328;
pub const AUE_DARWIN_TRUNCATE: u32 = 329;
pub const AUE_DARWIN_FTRUNCATE: u32 = 330;
pub const AUE_DARWIN_SYSCTL: u32 = 331;
pub const AUE_DARWIN_MLOCK: u32 = 332;
pub const AUE_DARWIN_MUNLOCK: u32 = 333;
pub const AUE_DARWIN_UNDELETE: u32 = 334;
pub const AUE_DARWIN_GETATTRLIST: u32 = 335;
pub const AUE_DARWIN_SETATTRLIST: u32 = 336;
pub const AUE_DARWIN_GETDIRENTRIESATTR: u32 = 337;
pub const AUE_DARWIN_EXCHANGEDATA: u32 = 338;
pub const AUE_DARWIN_SEARCHFS: u32 = 339;
pub const AUE_DARWIN_MINHERIT: u32 = 340;
pub const AUE_DARWIN_SEMCONFIG: u32 = 341;
pub const AUE_DARWIN_SEMOPEN: u32 = 342;
pub const AUE_DARWIN_SEMCLOSE: u32 = 343;
pub const AUE_DARWIN_SEMUNLINK: u32 = 344;
pub const AUE_DARWIN_SHMOPEN: u32 = 345;
pub const AUE_DARWIN_SHMUNLINK: u32 = 346;
pub const AUE_DARWIN_LOADSHFILE: u32 = 347;
pub const AUE_DARWIN_RESETSHFILE: u32 = 348;
pub const AUE_DARWIN_NEWSYSTEMSHREG: u32 = 349;
pub const AUE_DARWIN_PTHREADKILL: u32 = 350;
pub const AUE_DARWIN_PTHREADSIGMASK: u32 = 351;
pub const AUE_DARWIN_AUDITCTL: u32 = 352;
pub const AUE_DARWIN_RFORK: u32 = 353;
pub const AUE_DARWIN_LCHMOD: u32 = 354;
pub const AUE_DARWIN_SWAPOFF: u32 = 355;
pub const AUE_DARWIN_INITPROCESS: u32 = 356;
pub const AUE_DARWIN_MAPFD: u32 = 357;
pub const AUE_DARWIN_TASKFORPID: u32 = 358;
pub const AUE_DARWIN_PIDFORTASK: u32 = 359;
pub const AUE_DARWIN_SYSCTL_NONADMIN: u32 = 360;
pub const AUE_DARWIN_COPYFILE: u32 = 361;
pub const AUE_TRACKERACTION: u32 = 362;
pub const AUE_GETFSSTAT: u32 = 43001;
pub const AUE_PTRACE: u32 = 43002;
pub const AUE_CHFLAGS: u32 = 43003;
pub const AUE_FCHFLAGS: u32 = 43004;
pub const AUE_PROFILE: u32 = 43005;
pub const AUE_KTRACE: u32 = 43006;
pub const AUE_SETLOGIN: u32 = 43007;
pub const AUE_OPENBSM_REVOKE: u32 = 43008;
pub const AUE_UMASK: u32 = 43009;
pub const AUE_MPROTECT: u32 = 43010;
pub const AUE_MKFIFO: u32 = 43011;
pub const AUE_POLL: u32 = 43012;
pub const AUE_FUTIMES: u32 = 43013;
pub const AUE_SETSID: u32 = 43014;
pub const AUE_SETPRIVEXEC: u32 = 43015;
pub const AUE_ADDPROFILE: u32 = 43016;
pub const AUE_KDEBUGTRACE: u32 = 43017;
pub const AUE_KDBUGTRACE: u32 = 43017;
pub const AUE_OPENBSM_FSTAT: u32 = 43018;
pub const AUE_FPATHCONF: u32 = 43019;
pub const AUE_GETDIRENTRIES: u32 = 43020;
pub const AUE_SYSCTL: u32 = 43021;
pub const AUE_MLOCK: u32 = 43022;
pub const AUE_MUNLOCK: u32 = 43023;
pub const AUE_UNDELETE: u32 = 43024;
pub const AUE_GETATTRLIST: u32 = 43025;
pub const AUE_SETATTRLIST: u32 = 43026;
pub const AUE_GETDIRENTRIESATTR: u32 = 43027;
pub const AUE_EXCHANGEDATA: u32 = 43028;
pub const AUE_SEARCHFS: u32 = 43029;
pub const AUE_MINHERIT: u32 = 43030;
pub const AUE_SEMCONFIG: u32 = 43031;
pub const AUE_SEMOPEN: u32 = 43032;
pub const AUE_SEMCLOSE: u32 = 43033;
pub const AUE_SEMUNLINK: u32 = 43034;
pub const AUE_SHMOPEN: u32 = 43035;
pub const AUE_SHMUNLINK: u32 = 43036;
pub const AUE_LOADSHFILE: u32 = 43037;
pub const AUE_RESETSHFILE: u32 = 43038;
pub const AUE_NEWSYSTEMSHREG: u32 = 43039;
pub const AUE_PTHREADKILL: u32 = 43040;
pub const AUE_PTHREADSIGMASK: u32 = 43041;
pub const AUE_AUDITCTL: u32 = 43042;
pub const AUE_RFORK: u32 = 43043;
pub const AUE_LCHMOD: u32 = 43044;
pub const AUE_SWAPOFF: u32 = 43045;
pub const AUE_INITPROCESS: u32 = 43046;
pub const AUE_MAPFD: u32 = 43047;
pub const AUE_TASKFORPID: u32 = 43048;
pub const AUE_PIDFORTASK: u32 = 43049;
pub const AUE_SYSCTL_NONADMIN: u32 = 43050;
pub const AUE_COPYFILE: u32 = 43051;
pub const AUE_LUTIMES: u32 = 43052;
pub const AUE_LCHFLAGS: u32 = 43053;
pub const AUE_SENDFILE: u32 = 43054;
pub const AUE_USELIB: u32 = 43055;
pub const AUE_GETRESUID: u32 = 43056;
pub const AUE_SETRESUID: u32 = 43057;
pub const AUE_GETRESGID: u32 = 43058;
pub const AUE_SETRESGID: u32 = 43059;
pub const AUE_WAIT4: u32 = 43060;
pub const AUE_LGETFH: u32 = 43061;
pub const AUE_FHSTATFS: u32 = 43062;
pub const AUE_FHOPEN: u32 = 43063;
pub const AUE_FHSTAT: u32 = 43064;
pub const AUE_JAIL: u32 = 43065;
pub const AUE_EACCESS: u32 = 43066;
pub const AUE_KQUEUE: u32 = 43067;
pub const AUE_KEVENT: u32 = 43068;
pub const AUE_FSYNC: u32 = 43069;
pub const AUE_NMOUNT: u32 = 43070;
pub const AUE_BDFLUSH: u32 = 43071;
pub const AUE_SETFSUID: u32 = 43072;
pub const AUE_SETFSGID: u32 = 43073;
pub const AUE_PERSONALITY: u32 = 43074;
pub const AUE_SCHED_GETSCHEDULER: u32 = 43075;
pub const AUE_SCHED_SETSCHEDULER: u32 = 43076;
pub const AUE_PRCTL: u32 = 43077;
pub const AUE_GETCWD: u32 = 43078;
pub const AUE_CAPGET: u32 = 43079;
pub const AUE_CAPSET: u32 = 43080;
pub const AUE_PIVOT_ROOT: u32 = 43081;
pub const AUE_RTPRIO: u32 = 43082;
pub const AUE_SCHED_GETPARAM: u32 = 43083;
pub const AUE_SCHED_SETPARAM: u32 = 43084;
pub const AUE_SCHED_GET_PRIORITY_MAX: u32 = 43085;
pub const AUE_SCHED_GET_PRIORITY_MIN: u32 = 43086;
pub const AUE_SCHED_RR_GET_INTERVAL: u32 = 43087;
pub const AUE_ACL_GET_FILE: u32 = 43088;
pub const AUE_ACL_SET_FILE: u32 = 43089;
pub const AUE_ACL_GET_FD: u32 = 43090;
pub const AUE_ACL_SET_FD: u32 = 43091;
pub const AUE_ACL_DELETE_FILE: u32 = 43092;
pub const AUE_ACL_DELETE_FD: u32 = 43093;
pub const AUE_ACL_CHECK_FILE: u32 = 43094;
pub const AUE_ACL_CHECK_FD: u32 = 43095;
pub const AUE_ACL_GET_LINK: u32 = 43096;
pub const AUE_ACL_SET_LINK: u32 = 43097;
pub const AUE_ACL_DELETE_LINK: u32 = 43098;
pub const AUE_ACL_CHECK_LINK: u32 = 43099;
pub const AUE_SYSARCH: u32 = 43100;
pub const AUE_EXTATTRCTL: u32 = 43101;
pub const AUE_EXTATTR_GET_FILE: u32 = 43102;
pub const AUE_EXTATTR_SET_FILE: u32 = 43103;
pub const AUE_EXTATTR_LIST_FILE: u32 = 43104;
pub const AUE_EXTATTR_DELETE_FILE: u32 = 43105;
pub const AUE_EXTATTR_GET_FD: u32 = 43106;
pub const AUE_EXTATTR_SET_FD: u32 = 43107;
pub const AUE_EXTATTR_LIST_FD: u32 = 43108;
pub const AUE_EXTATTR_DELETE_FD: u32 = 43109;
pub const AUE_EXTATTR_GET_LINK: u32 = 43110;
pub const AUE_EXTATTR_SET_LINK: u32 = 43111;
pub const AUE_EXTATTR_LIST_LINK: u32 = 43112;
pub const AUE_EXTATTR_DELETE_LINK: u32 = 43113;
pub const AUE_KENV: u32 = 43114;
pub const AUE_JAIL_ATTACH: u32 = 43115;
pub const AUE_SYSCTL_WRITE: u32 = 43116;
pub const AUE_IOPERM: u32 = 43117;
pub const AUE_READDIR: u32 = 43118;
pub const AUE_IOPL: u32 = 43119;
pub const AUE_VM86: u32 = 43120;
pub const AUE_MAC_GET_PROC: u32 = 43121;
pub const AUE_MAC_SET_PROC: u32 = 43122;
pub const AUE_MAC_GET_FD: u32 = 43123;
pub const AUE_MAC_GET_FILE: u32 = 43124;
pub const AUE_MAC_SET_FD: u32 = 43125;
pub const AUE_MAC_SET_FILE: u32 = 43126;
pub const AUE_MAC_SYSCALL: u32 = 43127;
pub const AUE_MAC_GET_PID: u32 = 43128;
pub const AUE_MAC_GET_LINK: u32 = 43129;
pub const AUE_MAC_SET_LINK: u32 = 43130;
pub const AUE_MAC_EXECVE: u32 = 43131;
pub const AUE_GETPATH_FROMFD: u32 = 43132;
pub const AUE_GETPATH_FROMADDR: u32 = 43133;
pub const AUE_MQ_OPEN: u32 = 43134;
pub const AUE_MQ_SETATTR: u32 = 43135;
pub const AUE_MQ_TIMEDRECEIVE: u32 = 43136;
pub const AUE_MQ_TIMEDSEND: u32 = 43137;
pub const AUE_MQ_NOTIFY: u32 = 43138;
pub const AUE_MQ_UNLINK: u32 = 43139;
pub const AUE_LISTEN: u32 = 43140;
pub const AUE_MLOCKALL: u32 = 43141;
pub const AUE_MUNLOCKALL: u32 = 43142;
pub const AUE_CLOSEFROM: u32 = 43143;
pub const AUE_FEXECVE: u32 = 43144;
pub const AUE_FACCESSAT: u32 = 43145;
pub const AUE_FCHMODAT: u32 = 43146;
pub const AUE_LINKAT: u32 = 43147;
pub const AUE_MKDIRAT: u32 = 43148;
pub const AUE_MKFIFOAT: u32 = 43149;
pub const AUE_MKNODAT: u32 = 43150;
pub const AUE_READLINKAT: u32 = 43151;
pub const AUE_SYMLINKAT: u32 = 43152;
pub const AUE_MAC_GETFSSTAT: u32 = 43153;
pub const AUE_MAC_GET_MOUNT: u32 = 43154;
pub const AUE_MAC_GET_LCID: u32 = 43155;
pub const AUE_MAC_GET_LCTX: u32 = 43156;
pub const AUE_MAC_SET_LCTX: u32 = 43157;
pub const AUE_MAC_MOUNT: u32 = 43158;
pub const AUE_GETLCID: u32 = 43159;
pub const AUE_SETLCID: u32 = 43160;
pub const AUE_TASKNAMEFORPID: u32 = 43161;
pub const AUE_ACCESS_EXTENDED: u32 = 43162;
pub const AUE_CHMOD_EXTENDED: u32 = 43163;
pub const AUE_FCHMOD_EXTENDED: u32 = 43164;
pub const AUE_FSTAT_EXTENDED: u32 = 43165;
pub const AUE_LSTAT_EXTENDED: u32 = 43166;
pub const AUE_MKDIR_EXTENDED: u32 = 43167;
pub const AUE_MKFIFO_EXTENDED: u32 = 43168;
pub const AUE_OPEN_EXTENDED: u32 = 43169;
pub const AUE_OPEN_EXTENDED_R: u32 = 43170;
pub const AUE_OPEN_EXTENDED_RC: u32 = 43171;
pub const AUE_OPEN_EXTENDED_RT: u32 = 43172;
pub const AUE_OPEN_EXTENDED_RTC: u32 = 43173;
pub const AUE_OPEN_EXTENDED_W: u32 = 43174;
pub const AUE_OPEN_EXTENDED_WC: u32 = 43175;
pub const AUE_OPEN_EXTENDED_WT: u32 = 43176;
pub const AUE_OPEN_EXTENDED_WTC: u32 = 43177;
pub const AUE_OPEN_EXTENDED_RW: u32 = 43178;
pub const AUE_OPEN_EXTENDED_RWC: u32 = 43179;
pub const AUE_OPEN_EXTENDED_RWT: u32 = 43180;
pub const AUE_OPEN_EXTENDED_RWTC: u32 = 43181;
pub const AUE_STAT_EXTENDED: u32 = 43182;
pub const AUE_UMASK_EXTENDED: u32 = 43183;
pub const AUE_OPENAT: u32 = 43184;
pub const AUE_POSIX_OPENPT: u32 = 43185;
pub const AUE_CAP_NEW: u32 = 43186;
pub const AUE_CAP_GETRIGHTS: u32 = 43187;
pub const AUE_CAP_ENTER: u32 = 43188;
pub const AUE_CAP_GETMODE: u32 = 43189;
pub const AUE_POSIX_SPAWN: u32 = 43190;
pub const AUE_FSGETPATH: u32 = 43191;
pub const AUE_PREAD: u32 = 43192;
pub const AUE_PWRITE: u32 = 43193;
pub const AUE_FSCTL: u32 = 43194;
pub const AUE_FFSCTL: u32 = 43195;
pub const AUE_LPATHCONF: u32 = 43196;
pub const AUE_PDFORK: u32 = 43197;
pub const AUE_PDKILL: u32 = 43198;
pub const AUE_PDGETPID: u32 = 43199;
pub const AUE_PDWAIT: u32 = 43200;
pub const AUE_GETATTRLISTBULK: u32 = 43201;
pub const AUE_GETATTRLISTAT: u32 = 43202;
pub const AUE_OPENBYID: u32 = 43203;
pub const AUE_OPENBYID_R: u32 = 43204;
pub const AUE_OPENBYID_RT: u32 = 43205;
pub const AUE_OPENBYID_W: u32 = 43206;
pub const AUE_OPENBYID_WT: u32 = 43207;
pub const AUE_OPENBYID_RW: u32 = 43208;
pub const AUE_OPENBYID_RWT: u32 = 43209;
pub const AUE_CLONEFILEAT: u32 = 43210;
pub const AUE_FCLONEFILEAT: u32 = 43211;
pub const AUE_SETATTRLISTAT: u32 = 43212;
pub const AUE_FMOUNT: u32 = 43213;
pub const AUE_FSGETPATH_EXTENDED: u32 = 43214;
pub const AUE_DBGPORTFORPID: u32 = 43215;
pub const AUE_PREADV: u32 = 43216;
pub const AUE_PWRITEV: u32 = 43217;
pub const AUE_FREADLINK: u32 = 43218;
pub const AUE_SESSION_START: u32 = 44901;
pub const AUE_SESSION_UPDATE: u32 = 44902;
pub const AUE_SESSION_END: u32 = 44903;
pub const AUE_SESSION_CLOSE: u32 = 44904;
pub const AUE_O_CREAT: u32 = 83;
pub const AUE_O_EXECVE: u32 = 0;
pub const AUE_O_SBREAK: u32 = 0;
pub const AUE_O_LSEEK: u32 = 0;
pub const AUE_O_MOUNT: u32 = 0;
pub const AUE_O_UMOUNT: u32 = 0;
pub const AUE_O_STAT: u32 = 16;
pub const AUE_O_LSTAT: u32 = 17;
pub const AUE_O_FSTAT: u32 = 208;
pub const AUE_O_GETPAGESIZE: u32 = 0;
pub const AUE_O_VREAD: u32 = 0;
pub const AUE_O_VWRITE: u32 = 0;
pub const AUE_O_MMAP: u32 = 210;
pub const AUE_O_VADVISE: u32 = 0;
pub const AUE_O_VHANGUP: u32 = 0;
pub const AUE_O_VLIMIT: u32 = 0;
pub const AUE_O_WAIT: u32 = 0;
pub const AUE_O_GETHOSTNAME: u32 = 0;
pub const AUE_O_SETHOSTNAME: u32 = 43021;
pub const AUE_O_GETDOPT: u32 = 0;
pub const AUE_O_SETDOPT: u32 = 0;
pub const AUE_O_ACCEPT: u32 = 0;
pub const AUE_O_SEND: u32 = 188;
pub const AUE_O_RECV: u32 = 190;
pub const AUE_O_VTIMES: u32 = 0;
pub const AUE_O_SIGVEC: u32 = 0;
pub const AUE_O_SIGBLOCK: u32 = 0;
pub const AUE_O_SIGSETMASK: u32 = 0;
pub const AUE_O_SIGSTACK: u32 = 0;
pub const AUE_O_RECVMSG: u32 = 190;
pub const AUE_O_SENDMSG: u32 = 188;
pub const AUE_O_VTRACE: u32 = 0;
pub const AUE_O_RESUBA: u32 = 0;
pub const AUE_O_RECVFROM: u32 = 191;
pub const AUE_O_SETREUID: u32 = 40;
pub const AUE_O_SETREGID: u32 = 41;
pub const AUE_O_GETDIRENTRIES: u32 = 43020;
pub const AUE_O_TRUNCATE: u32 = 43;
pub const AUE_O_FTRUNCATE: u32 = 44;
pub const AUE_O_GETPEERNAME: u32 = 0;
pub const AUE_O_GETHOSTID: u32 = 0;
pub const AUE_O_SETHOSTID: u32 = 0;
pub const AUE_O_GETRLIMIT: u32 = 0;
pub const AUE_O_SETRLIMIT: u32 = 51;
pub const AUE_O_KILLPG: u32 = 15;
pub const AUE_O_SETQUOTA: u32 = 0;
pub const AUE_O_QUOTA: u32 = 0;
pub const AUE_O_GETSOCKNAME: u32 = 0;
pub const AUE_O_ASYNCDAEMON: u32 = 0;
pub const AUE_O_GETDOMAINNAME: u32 = 0;
pub const AUE_O_SETDOMAINNAME: u32 = 43021;
pub const AUE_O_PCFS_MOUNT: u32 = 0;
pub const AUE_O_EXPORTFS: u32 = 0;
pub const AUE_O_USTATE: u32 = 0;
pub const AUE_O_WAIT3: u32 = 0;
pub const AUE_O_RPAUSE: u32 = 0;
pub const AUE_O_GETDENTS: u32 = 0;
pub const AUE_ATGETMSG: u32 = 0;
pub const AUE_ATPUTMSG: u32 = 0;
pub const AUE_ATSOCKET: u32 = 0;
pub const AUE_ATPGETREQ: u32 = 0;
pub const AUE_ATPGETRSP: u32 = 0;
pub const AUE_ATPSNDREQ: u32 = 0;
pub const AUE_ATPSNDRSP: u32 = 0;
pub const AUE_BSDTHREADCREATE: u32 = 0;
pub const AUE_BSDTHREADTERMINATE: u32 = 0;
pub const AUE_BSDTHREADREGISTER: u32 = 0;
pub const AUE_CSOPS: u32 = 0;
pub const AUE_DUP: u32 = 0;
pub const AUE_FDATASYNC: u32 = 0;
pub const AUE_FGETATTRLIST: u32 = 0;
pub const AUE_FGETXATTR: u32 = 0;
pub const AUE_FLISTXATTR: u32 = 0;
pub const AUE_FREMOVEXATTR: u32 = 0;
pub const AUE_FSETATTRLIST: u32 = 0;
pub const AUE_FSETXATTR: u32 = 0;
pub const AUE_FSTATFS64: u32 = 0;
pub const AUE_FSTATV: u32 = 0;
pub const AUE_FSTAT64: u32 = 0;
pub const AUE_FSTAT64_EXTENDED: u32 = 0;
pub const AUE_GCCONTROL: u32 = 0;
pub const AUE_GETDIRENTRIES64: u32 = 0;
pub const AUE_GETDTABLESIZE: u32 = 0;
pub const AUE_GETEGID: u32 = 0;
pub const AUE_GETEUID: u32 = 0;
pub const AUE_GETFSSTAT64: u32 = 0;
pub const AUE_GETGID: u32 = 0;
pub const AUE_GETGROUPS: u32 = 0;
pub const AUE_GETITIMER: u32 = 0;
pub const AUE_GETLOGIN: u32 = 0;
pub const AUE_GETPEERNAME: u32 = 0;
pub const AUE_GETPGID: u32 = 0;
pub const AUE_GETPGRP: u32 = 0;
pub const AUE_GETPID: u32 = 0;
pub const AUE_GETPPID: u32 = 0;
pub const AUE_GETPRIORITY: u32 = 0;
pub const AUE_GETRLIMIT: u32 = 0;
pub const AUE_GETRUSAGE: u32 = 0;
pub const AUE_GETSGROUPS: u32 = 0;
pub const AUE_GETSID: u32 = 0;
pub const AUE_GETSOCKNAME: u32 = 0;
pub const AUE_GETTIMEOFDAY: u32 = 0;
pub const AUE_GETTID: u32 = 0;
pub const AUE_GETUID: u32 = 0;
pub const AUE_GETSOCKOPT: u32 = 0;
pub const AUE_GETWGROUPS: u32 = 0;
pub const AUE_GETXATTR: u32 = 0;
pub const AUE_IDENTITYSVC: u32 = 0;
pub const AUE_INITGROUPS: u32 = 0;
pub const AUE_IOPOLICYSYS: u32 = 0;
pub const AUE_ISSETUGID: u32 = 0;
pub const AUE_LEDGER: u32 = 0;
pub const AUE_LIOLISTIO: u32 = 0;
pub const AUE_LISTXATTR: u32 = 0;
pub const AUE_LSTATV: u32 = 0;
pub const AUE_LSTAT64: u32 = 0;
pub const AUE_LSTAT64_EXTENDED: u32 = 0;
pub const AUE_MADVISE: u32 = 0;
pub const AUE_MINCORE: u32 = 0;
pub const AUE_MKCOMPLEX: u32 = 0;
pub const AUE_MSGCL: u32 = 0;
pub const AUE_MSYNC: u32 = 0;
pub const AUE_NECP: u32 = 0;
pub const AUE_NETAGENT: u32 = 0;
pub const AUE_PROCINFO: u32 = 0;
pub const AUE_PTHREADCANCELED: u32 = 0;
pub const AUE_PTHREADCHDIR: u32 = 0;
pub const AUE_PTHREADCONDBROADCAST: u32 = 0;
pub const AUE_PTHREADCONDDESTORY: u32 = 0;
pub const AUE_PTHREADCONDINIT: u32 = 0;
pub const AUE_PTHREADCONDSIGNAL: u32 = 0;
pub const AUE_PTHREADCONDWAIT: u32 = 0;
pub const AUE_PTHREADFCHDIR: u32 = 0;
pub const AUE_PTHREADMARK: u32 = 0;
pub const AUE_PTHREADMUTEXDESTROY: u32 = 0;
pub const AUE_PTHREADMUTEXINIT: u32 = 0;
pub const AUE_PTHREADMUTEXTRYLOCK: u32 = 0;
pub const AUE_PTHREADMUTEXUNLOCK: u32 = 0;
pub const AUE_REMOVEXATTR: u32 = 0;
pub const AUE_SBRK: u32 = 0;
pub const AUE_SELECT: u32 = 0;
pub const AUE_SEMDESTROY: u32 = 0;
pub const AUE_SEMGETVALUE: u32 = 0;
pub const AUE_SEMINIT: u32 = 0;
pub const AUE_SEMPOST: u32 = 0;
pub const AUE_SEMTRYWAIT: u32 = 0;
pub const AUE_SEMWAIT: u32 = 0;
pub const AUE_SEMWAITSIGNAL: u32 = 0;
pub const AUE_SETITIMER: u32 = 0;
pub const AUE_SETSGROUPS: u32 = 0;
pub const AUE_SETTID: u32 = 0;
pub const AUE_SETTIDWITHPID: u32 = 0;
pub const AUE_SETWGROUPS: u32 = 0;
pub const AUE_SETXATTR: u32 = 0;
pub const AUE_SHAREDREGIONCHECK: u32 = 0;
pub const AUE_SHAREDREGIONMAP: u32 = 0;
pub const AUE_SIGACTION: u32 = 0;
pub const AUE_SIGALTSTACK: u32 = 0;
pub const AUE_SIGPENDING: u32 = 0;
pub const AUE_SIGPROCMASK: u32 = 0;
pub const AUE_SIGRETURN: u32 = 0;
pub const AUE_SIGSUSPEND: u32 = 0;
pub const AUE_SIGWAIT: u32 = 0;
pub const AUE_SSTK: u32 = 0;
pub const AUE_STACKSNAPSHOT: u32 = 0;
pub const AUE_STATFS64: u32 = 0;
pub const AUE_STATV: u32 = 0;
pub const AUE_STAT64: u32 = 0;
pub const AUE_STAT64_EXTENDED: u32 = 0;
pub const AUE_SYNC: u32 = 0;
pub const AUE_SYSCALL: u32 = 0;
pub const AUE_TABLE: u32 = 0;
pub const AUE_VMPRESSUREMONITOR: u32 = 0;
pub const AUE_WAITID: u32 = 0;
pub const AUE_WORKQOPEN: u32 = 0;
pub const AUE_WORKQOPS: u32 = 0;
pub const AUE_WORKLOOPCTL: u32 = 0;
pub const AUE_PERSONA: u32 = 0;
pub const AUE_USRCTL: u32 = 0;
pub const AUE_NEXUS: u32 = 0;
pub const AUE_CHANNEL: u32 = 0;
pub const AUE_NET: u32 = 0;
pub const AUE_TASKREADFORPID: u32 = 0;
pub const AUE_TASKINSPECTFORPID: u32 = 0;
pub const AUE_DEBUG_SYSCALL_REJECT: u32 = 0;
pub const AUE_DEBUG_SYSCALL_REJECT_CONFIG: u32 = 0;
pub const AUDIT_SDEV_PATH: &[u8; 19usize] = b"/dev/auditsessions\0";
pub const BSM_SOCK_DGRAM: u32 = 1;
pub const BSM_SOCK_STREAM: u32 = 2;
pub const BSM_SOCK_RAW: u32 = 4;
pub const BSM_SOCK_RDM: u32 = 5;
pub const BSM_SOCK_SEQPACKET: u32 = 6;
pub const BSM_SOCK_UNKNOWN: u32 = 500;
pub const AUE_at_create: u32 = 6144;
pub const AUE_at_delete: u32 = 6145;
pub const AUE_at_perm: u32 = 6146;
pub const AUE_cron_invoke: u32 = 6147;
pub const AUE_crontab_create: u32 = 6148;
pub const AUE_crontab_delete: u32 = 6149;
pub const AUE_crontab_perm: u32 = 6150;
pub const AUE_inetd_connect: u32 = 6151;
pub const AUE_login: u32 = 6152;
pub const AUE_logout: u32 = 6153;
pub const AUE_telnet: u32 = 6154;
pub const AUE_rlogin: u32 = 6155;
pub const AUE_mountd_mount: u32 = 6156;
pub const AUE_mountd_umount: u32 = 6157;
pub const AUE_rshd: u32 = 6158;
pub const AUE_su: u32 = 6159;
pub const AUE_halt: u32 = 6160;
pub const AUE_reboot: u32 = 6161;
pub const AUE_rexecd: u32 = 6162;
pub const AUE_passwd: u32 = 6163;
pub const AUE_rexd: u32 = 6164;
pub const AUE_ftpd: u32 = 6165;
pub const AUE_init: u32 = 6166;
pub const AUE_uadmin: u32 = 6167;
pub const AUE_shutdown: u32 = 6168;
pub const AUE_poweroff: u32 = 6169;
pub const AUE_crontab_mod: u32 = 6170;
pub const AUE_ftpd_logout: u32 = 6171;
pub const AUE_ssh: u32 = 6172;
pub const AUE_role_login: u32 = 6173;
pub const AUE_prof_cmd: u32 = 6180;
pub const AUE_filesystem_add: u32 = 6181;
pub const AUE_filesystem_delete: u32 = 6182;
pub const AUE_filesystem_modify: u32 = 6183;
pub const AUE_allocate_succ: u32 = 6200;
pub const AUE_allocate_fail: u32 = 6201;
pub const AUE_deallocate_succ: u32 = 6202;
pub const AUE_deallocate_fail: u32 = 6203;
pub const AUE_listdevice_succ: u32 = 6205;
pub const AUE_listdevice_fail: u32 = 6206;
pub const AUE_create_user: u32 = 6207;
pub const AUE_modify_user: u32 = 6208;
pub const AUE_delete_user: u32 = 6209;
pub const AUE_disable_user: u32 = 6210;
pub const AUE_enable_user: u32 = 6211;
pub const AUE_newgrp_login: u32 = 6212;
pub const AUE_admin_authentication: u32 = 6213;
pub const AUE_kadmind_auth: u32 = 6214;
pub const AUE_kadmind_unauth: u32 = 6215;
pub const AUE_krb5kdc_as_req: u32 = 6216;
pub const AUE_krb5kdc_tgs_req: u32 = 6217;
pub const AUE_krb5kdc_tgs_req_2ndtktmm: u32 = 6218;
pub const AUE_krb5kdc_tgs_req_alt_tgt: u32 = 6219;
pub const AUE_DARWIN_audit_startup: u32 = 6171;
pub const AUE_DARWIN_audit_shutdown: u32 = 6172;
pub const AUE_DARWIN_sudo: u32 = 6300;
pub const AUE_DARWIN_modify_password: u32 = 6501;
pub const AUE_DARWIN_create_group: u32 = 6511;
pub const AUE_DARWIN_delete_group: u32 = 6512;
pub const AUE_DARWIN_modify_group: u32 = 6513;
pub const AUE_DARWIN_add_to_group: u32 = 6514;
pub const AUE_DARWIN_remove_from_group: u32 = 6515;
pub const AUE_DARWIN_revoke_obj: u32 = 6521;
pub const AUE_DARWIN_lw_login: u32 = 6600;
pub const AUE_DARWIN_lw_logout: u32 = 6601;
pub const AUE_DARWIN_auth_user: u32 = 7000;
pub const AUE_DARWIN_ssconn: u32 = 7001;
pub const AUE_DARWIN_ssauthorize: u32 = 7002;
pub const AUE_DARWIN_ssauthint: u32 = 7003;
pub const AUE_openssh: u32 = 32800;
pub const AUE_audit_startup: u32 = 45000;
pub const AUE_audit_shutdown: u32 = 45001;
pub const AUE_modify_password: u32 = 45014;
pub const AUE_create_group: u32 = 45015;
pub const AUE_delete_group: u32 = 45016;
pub const AUE_modify_group: u32 = 45017;
pub const AUE_add_to_group: u32 = 45018;
pub const AUE_remove_from_group: u32 = 45019;
pub const AUE_revoke_obj: u32 = 45020;
pub const AUE_lw_login: u32 = 45021;
pub const AUE_lw_logout: u32 = 45022;
pub const AUE_auth_user: u32 = 45023;
pub const AUE_ssconn: u32 = 45024;
pub const AUE_ssauthorize: u32 = 45025;
pub const AUE_ssauthint: u32 = 45026;
pub const AUE_calife: u32 = 45027;
pub const AUE_sudo: u32 = 45028;
pub const AUE_audit_recovery: u32 = 45029;
pub const AUE_ssauthmech: u32 = 45030;
pub const AUE_sec_assessment: u32 = 45031;
pub const HFSPLUSMETADATAFOLDER: &[u8; 30usize] =
    b"\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80\xE2\x90\x80HFS+ Private Data\0";
pub const HFSPLUS_DIR_METADATA_FOLDER: &[u8; 30usize] = b".HFS+ Private Directory Data\r\0";
pub const HFS_INODE_PREFIX: &[u8; 6usize] = b"iNode\0";
pub const HFS_DELETE_PREFIX: &[u8; 5usize] = b"temp\0";
pub const HFS_DIRINODE_PREFIX: &[u8; 5usize] = b"dir_\0";
pub const FIRST_LINK_XATTR_NAME: &[u8; 31usize] = b"com.apple.system.hfs.firstlink\0";
pub const HFS_UUID_NAMESPACE_ID: [u8; 17usize] = [
    179u8, 226u8, 15u8, 57u8, 242u8, 146u8, 17u8, 214u8, 151u8, 164u8, 0u8, 48u8, 101u8, 67u8,
    236u8, 172u8, 0u8,
];
pub const EXTJNL_CONTENT_TYPE_UUID: &[u8; 37usize] = b"4A6F7572-6E61-11AA-AA11-00306543ECAC\0";
pub const FSOPT_NOFOLLOW: u32 = 1;
pub const FSOPT_NOINMEMUPDATE: u32 = 2;
pub const FSOPT_REPORT_FULLSIZE: u32 = 4;
pub const FSOPT_PACK_INVAL_ATTRS: u32 = 8;
pub const FSOPT_ATTR_CMN_EXTENDED: u32 = 32;
pub const FSOPT_RETURN_REALDEV: u32 = 512;
pub const FSOPT_NOFOLLOW_ANY: u32 = 2048;
pub const SEARCHFS_MAX_SEARCHPARMS: u32 = 4096;
pub const ATTR_BIT_MAP_COUNT: u32 = 5;
pub const VOL_CAPABILITIES_FORMAT: u32 = 0;
pub const VOL_CAPABILITIES_INTERFACES: u32 = 1;
pub const VOL_CAPABILITIES_RESERVED1: u32 = 2;
pub const VOL_CAPABILITIES_RESERVED2: u32 = 3;
pub const ATTR_MAX_BUFFER: u32 = 8192;
pub const VOL_CAP_FMT_PERSISTENTOBJECTIDS: u32 = 1;
pub const VOL_CAP_FMT_SYMBOLICLINKS: u32 = 2;
pub const VOL_CAP_FMT_HARDLINKS: u32 = 4;
pub const VOL_CAP_FMT_JOURNAL: u32 = 8;
pub const VOL_CAP_FMT_JOURNAL_ACTIVE: u32 = 16;
pub const VOL_CAP_FMT_NO_ROOT_TIMES: u32 = 32;
pub const VOL_CAP_FMT_SPARSE_FILES: u32 = 64;
pub const VOL_CAP_FMT_ZERO_RUNS: u32 = 128;
pub const VOL_CAP_FMT_CASE_SENSITIVE: u32 = 256;
pub const VOL_CAP_FMT_CASE_PRESERVING: u32 = 512;
pub const VOL_CAP_FMT_FAST_STATFS: u32 = 1024;
pub const VOL_CAP_FMT_2TB_FILESIZE: u32 = 2048;
pub const VOL_CAP_FMT_OPENDENYMODES: u32 = 4096;
pub const VOL_CAP_FMT_HIDDEN_FILES: u32 = 8192;
pub const VOL_CAP_FMT_PATH_FROM_ID: u32 = 16384;
pub const VOL_CAP_FMT_NO_VOLUME_SIZES: u32 = 32768;
pub const VOL_CAP_FMT_DECMPFS_COMPRESSION: u32 = 65536;
pub const VOL_CAP_FMT_64BIT_OBJECT_IDS: u32 = 131072;
pub const VOL_CAP_FMT_DIR_HARDLINKS: u32 = 262144;
pub const VOL_CAP_FMT_DOCUMENT_ID: u32 = 524288;
pub const VOL_CAP_FMT_WRITE_GENERATION_COUNT: u32 = 1048576;
pub const VOL_CAP_FMT_NO_IMMUTABLE_FILES: u32 = 2097152;
pub const VOL_CAP_FMT_NO_PERMISSIONS: u32 = 4194304;
pub const VOL_CAP_FMT_SHARED_SPACE: u32 = 8388608;
pub const VOL_CAP_FMT_VOL_GROUPS: u32 = 16777216;
pub const VOL_CAP_FMT_SEALED: u32 = 33554432;
pub const VOL_CAP_INT_SEARCHFS: u32 = 1;
pub const VOL_CAP_INT_ATTRLIST: u32 = 2;
pub const VOL_CAP_INT_NFSEXPORT: u32 = 4;
pub const VOL_CAP_INT_READDIRATTR: u32 = 8;
pub const VOL_CAP_INT_EXCHANGEDATA: u32 = 16;
pub const VOL_CAP_INT_COPYFILE: u32 = 32;
pub const VOL_CAP_INT_ALLOCATE: u32 = 64;
pub const VOL_CAP_INT_VOL_RENAME: u32 = 128;
pub const VOL_CAP_INT_ADVLOCK: u32 = 256;
pub const VOL_CAP_INT_FLOCK: u32 = 512;
pub const VOL_CAP_INT_EXTENDED_SECURITY: u32 = 1024;
pub const VOL_CAP_INT_USERACCESS: u32 = 2048;
pub const VOL_CAP_INT_MANLOCK: u32 = 4096;
pub const VOL_CAP_INT_NAMEDSTREAMS: u32 = 8192;
pub const VOL_CAP_INT_EXTENDED_ATTR: u32 = 16384;
pub const VOL_CAP_INT_CLONE: u32 = 65536;
pub const VOL_CAP_INT_SNAPSHOT: u32 = 131072;
pub const VOL_CAP_INT_RENAME_SWAP: u32 = 262144;
pub const VOL_CAP_INT_RENAME_EXCL: u32 = 524288;
pub const VOL_CAP_INT_RENAME_OPENFAIL: u32 = 1048576;
pub const ATTR_CMN_NAME: u32 = 1;
pub const ATTR_CMN_DEVID: u32 = 2;
pub const ATTR_CMN_FSID: u32 = 4;
pub const ATTR_CMN_OBJTYPE: u32 = 8;
pub const ATTR_CMN_OBJTAG: u32 = 16;
pub const ATTR_CMN_OBJID: u32 = 32;
pub const ATTR_CMN_OBJPERMANENTID: u32 = 64;
pub const ATTR_CMN_PAROBJID: u32 = 128;
pub const ATTR_CMN_SCRIPT: u32 = 256;
pub const ATTR_CMN_CRTIME: u32 = 512;
pub const ATTR_CMN_MODTIME: u32 = 1024;
pub const ATTR_CMN_CHGTIME: u32 = 2048;
pub const ATTR_CMN_ACCTIME: u32 = 4096;
pub const ATTR_CMN_BKUPTIME: u32 = 8192;
pub const ATTR_CMN_FNDRINFO: u32 = 16384;
pub const ATTR_CMN_OWNERID: u32 = 32768;
pub const ATTR_CMN_GRPID: u32 = 65536;
pub const ATTR_CMN_ACCESSMASK: u32 = 131072;
pub const ATTR_CMN_FLAGS: u32 = 262144;
pub const ATTR_CMN_GEN_COUNT: u32 = 524288;
pub const ATTR_CMN_DOCUMENT_ID: u32 = 1048576;
pub const ATTR_CMN_USERACCESS: u32 = 2097152;
pub const ATTR_CMN_EXTENDED_SECURITY: u32 = 4194304;
pub const ATTR_CMN_UUID: u32 = 8388608;
pub const ATTR_CMN_GRPUUID: u32 = 16777216;
pub const ATTR_CMN_FILEID: u32 = 33554432;
pub const ATTR_CMN_PARENTID: u32 = 67108864;
pub const ATTR_CMN_FULLPATH: u32 = 134217728;
pub const ATTR_CMN_ADDEDTIME: u32 = 268435456;
pub const ATTR_CMN_ERROR: u32 = 536870912;
pub const ATTR_CMN_DATA_PROTECT_FLAGS: u32 = 1073741824;
pub const ATTR_CMN_RETURNED_ATTRS: u32 = 2147483648;
pub const ATTR_CMN_VALIDMASK: u32 = 4294967295;
pub const ATTR_CMN_SETMASK: u32 = 1372061440;
pub const ATTR_CMN_VOLSETMASK: u32 = 26368;
pub const ATTR_VOL_FSTYPE: u32 = 1;
pub const ATTR_VOL_SIGNATURE: u32 = 2;
pub const ATTR_VOL_SIZE: u32 = 4;
pub const ATTR_VOL_SPACEFREE: u32 = 8;
pub const ATTR_VOL_SPACEAVAIL: u32 = 16;
pub const ATTR_VOL_MINALLOCATION: u32 = 32;
pub const ATTR_VOL_ALLOCATIONCLUMP: u32 = 64;
pub const ATTR_VOL_IOBLOCKSIZE: u32 = 128;
pub const ATTR_VOL_OBJCOUNT: u32 = 256;
pub const ATTR_VOL_FILECOUNT: u32 = 512;
pub const ATTR_VOL_DIRCOUNT: u32 = 1024;
pub const ATTR_VOL_MAXOBJCOUNT: u32 = 2048;
pub const ATTR_VOL_MOUNTPOINT: u32 = 4096;
pub const ATTR_VOL_NAME: u32 = 8192;
pub const ATTR_VOL_MOUNTFLAGS: u32 = 16384;
pub const ATTR_VOL_MOUNTEDDEVICE: u32 = 32768;
pub const ATTR_VOL_ENCODINGSUSED: u32 = 65536;
pub const ATTR_VOL_CAPABILITIES: u32 = 131072;
pub const ATTR_VOL_UUID: u32 = 262144;
pub const ATTR_VOL_SPACEUSED: u32 = 8388608;
pub const ATTR_VOL_QUOTA_SIZE: u32 = 268435456;
pub const ATTR_VOL_RESERVED_SIZE: u32 = 536870912;
pub const ATTR_VOL_ATTRIBUTES: u32 = 1073741824;
pub const ATTR_VOL_INFO: u32 = 2147483648;
pub const ATTR_VOL_VALIDMASK: u32 = 4035444735;
pub const ATTR_VOL_SETMASK: u32 = 2147491840;
pub const ATTR_DIR_LINKCOUNT: u32 = 1;
pub const ATTR_DIR_ENTRYCOUNT: u32 = 2;
pub const ATTR_DIR_MOUNTSTATUS: u32 = 4;
pub const ATTR_DIR_ALLOCSIZE: u32 = 8;
pub const ATTR_DIR_IOBLOCKSIZE: u32 = 16;
pub const ATTR_DIR_DATALENGTH: u32 = 32;
pub const DIR_MNTSTATUS_MNTPOINT: u32 = 1;
pub const DIR_MNTSTATUS_TRIGGER: u32 = 2;
pub const ATTR_DIR_VALIDMASK: u32 = 63;
pub const ATTR_DIR_SETMASK: u32 = 0;
pub const ATTR_FILE_LINKCOUNT: u32 = 1;
pub const ATTR_FILE_TOTALSIZE: u32 = 2;
pub const ATTR_FILE_ALLOCSIZE: u32 = 4;
pub const ATTR_FILE_IOBLOCKSIZE: u32 = 8;
pub const ATTR_FILE_DEVTYPE: u32 = 32;
pub const ATTR_FILE_FORKCOUNT: u32 = 128;
pub const ATTR_FILE_FORKLIST: u32 = 256;
pub const ATTR_FILE_DATALENGTH: u32 = 512;
pub const ATTR_FILE_DATAALLOCSIZE: u32 = 1024;
pub const ATTR_FILE_RSRCLENGTH: u32 = 4096;
pub const ATTR_FILE_RSRCALLOCSIZE: u32 = 8192;
pub const ATTR_FILE_VALIDMASK: u32 = 14335;
pub const ATTR_FILE_SETMASK: u32 = 32;
pub const ATTR_CMNEXT_RELPATH: u32 = 4;
pub const ATTR_CMNEXT_PRIVATESIZE: u32 = 8;
pub const ATTR_CMNEXT_LINKID: u32 = 16;
pub const ATTR_CMNEXT_NOFIRMLINKPATH: u32 = 32;
pub const ATTR_CMNEXT_REALDEVID: u32 = 64;
pub const ATTR_CMNEXT_REALFSID: u32 = 128;
pub const ATTR_CMNEXT_CLONEID: u32 = 256;
pub const ATTR_CMNEXT_EXT_FLAGS: u32 = 512;
pub const ATTR_CMNEXT_RECURSIVE_GENCOUNT: u32 = 1024;
pub const ATTR_CMNEXT_VALIDMASK: u32 = 2044;
pub const ATTR_CMNEXT_SETMASK: u32 = 0;
pub const ATTR_FORK_TOTALSIZE: u32 = 1;
pub const ATTR_FORK_ALLOCSIZE: u32 = 2;
pub const ATTR_FORK_RESERVED: u32 = 4294967295;
pub const ATTR_FORK_VALIDMASK: u32 = 3;
pub const ATTR_FORK_SETMASK: u32 = 0;
pub const ATTR_CMN_NAMEDATTRCOUNT: u32 = 524288;
pub const ATTR_CMN_NAMEDATTRLIST: u32 = 1048576;
pub const ATTR_FILE_CLUMPSIZE: u32 = 16;
pub const ATTR_FILE_FILETYPE: u32 = 64;
pub const ATTR_FILE_DATAEXTENTS: u32 = 2048;
pub const ATTR_FILE_RSRCEXTENTS: u32 = 16384;
pub const ATTR_BULK_REQUIRED: u32 = 2147483649;
pub const SRCHFS_START: u32 = 1;
pub const SRCHFS_MATCHPARTIALNAMES: u32 = 2;
pub const SRCHFS_MATCHDIRS: u32 = 4;
pub const SRCHFS_MATCHFILES: u32 = 8;
pub const SRCHFS_SKIPLINKS: u32 = 16;
pub const SRCHFS_SKIPINVISIBLE: u32 = 32;
pub const SRCHFS_SKIPPACKAGES: u32 = 64;
pub const SRCHFS_SKIPINAPPROPRIATE: u32 = 128;
pub const SRCHFS_NEGATEPARAMS: u32 = 2147483648;
pub const SRCHFS_VALIDOPTIONSMASK: u32 = 2147483903;
pub const FST_EOF: i32 = -1;
pub const MFSNAMELEN: u32 = 15;
pub const MFSTYPENAMELEN: u32 = 16;
pub const MNAMELEN: u32 = 1024;
pub const MNT_EXT_ROOT_DATA_VOL: u32 = 1;
pub const MNT_RDONLY: u32 = 1;
pub const MNT_SYNCHRONOUS: u32 = 2;
pub const MNT_NOEXEC: u32 = 4;
pub const MNT_NOSUID: u32 = 8;
pub const MNT_NODEV: u32 = 16;
pub const MNT_UNION: u32 = 32;
pub const MNT_ASYNC: u32 = 64;
pub const MNT_CPROTECT: u32 = 128;
pub const MNT_EXPORTED: u32 = 256;
pub const MNT_REMOVABLE: u32 = 512;
pub const MNT_QUARANTINE: u32 = 1024;
pub const MNT_LOCAL: u32 = 4096;
pub const MNT_QUOTA: u32 = 8192;
pub const MNT_ROOTFS: u32 = 16384;
pub const MNT_DOVOLFS: u32 = 32768;
pub const MNT_DONTBROWSE: u32 = 1048576;
pub const MNT_IGNORE_OWNERSHIP: u32 = 2097152;
pub const MNT_AUTOMOUNTED: u32 = 4194304;
pub const MNT_JOURNALED: u32 = 8388608;
pub const MNT_NOUSERXATTR: u32 = 16777216;
pub const MNT_DEFWRITE: u32 = 33554432;
pub const MNT_MULTILABEL: u32 = 67108864;
pub const MNT_NOFOLLOW: u32 = 134217728;
pub const MNT_NOATIME: u32 = 268435456;
pub const MNT_SNAPSHOT: u32 = 1073741824;
pub const MNT_STRICTATIME: u32 = 2147483648;
pub const MNT_UNKNOWNPERMISSIONS: u32 = 2097152;
pub const MNT_VISFLAGMASK: u32 = 3757111295;
pub const MNT_UPDATE: u32 = 65536;
pub const MNT_NOBLOCK: u32 = 131072;
pub const MNT_RELOAD: u32 = 262144;
pub const MNT_FORCE: u32 = 524288;
pub const MNT_CMDFLAGS: u32 = 983040;
pub const VFS_GENERIC: u32 = 0;
pub const VFS_NUMMNTOPS: u32 = 1;
pub const VFS_MAXTYPENUM: u32 = 1;
pub const VFS_CONF: u32 = 2;
pub const MNT_WAIT: u32 = 1;
pub const MNT_NOWAIT: u32 = 2;
pub const MNT_DWAIT: u32 = 4;
pub const VFS_CTL_VERS1: u32 = 1;
pub const VFS_CTL_OSTATFS: u32 = 65537;
pub const VFS_CTL_UMOUNT: u32 = 65538;
pub const VFS_CTL_QUERY: u32 = 65539;
pub const VFS_CTL_NEWADDR: u32 = 65540;
pub const VFS_CTL_TIMEO: u32 = 65541;
pub const VFS_CTL_NOLOCKS: u32 = 65542;
pub const VFS_CTL_SADDR: u32 = 65543;
pub const VFS_CTL_DISC: u32 = 65544;
pub const VFS_CTL_SERVERINFO: u32 = 65545;
pub const VFS_CTL_NSTATUS: u32 = 65546;
pub const VFS_CTL_STATFS64: u32 = 65547;
pub const VFS_CTL_STATFS: u32 = 65547;
pub const VQ_NOTRESP: u32 = 1;
pub const VQ_NEEDAUTH: u32 = 2;
pub const VQ_LOWDISK: u32 = 4;
pub const VQ_MOUNT: u32 = 8;
pub const VQ_UNMOUNT: u32 = 16;
pub const VQ_DEAD: u32 = 32;
pub const VQ_ASSIST: u32 = 64;
pub const VQ_NOTRESPLOCK: u32 = 128;
pub const VQ_UPDATE: u32 = 256;
pub const VQ_VERYLOWDISK: u32 = 512;
pub const VQ_SYNCEVENT: u32 = 1024;
pub const VQ_SERVEREVENT: u32 = 2048;
pub const VQ_QUOTA: u32 = 4096;
pub const VQ_NEARLOWDISK: u32 = 8192;
pub const VQ_DESIRED_DISK: u32 = 16384;
pub const VQ_FREE_SPACE_CHANGE: u32 = 32768;
pub const VQ_FLAG10000: u32 = 65536;
pub const NFSV4_MAX_FH_SIZE: u32 = 128;
pub const NFSV3_MAX_FH_SIZE: u32 = 64;
pub const NFSV2_MAX_FH_SIZE: u32 = 32;
pub const OVERRIDE_UNKNOWN_PERMISSIONS: u32 = 0;
pub const UNKNOWNPERMISSIONS: u32 = 453;
pub const HFSFSMNT_NOXONFILES: u32 = 1;
pub const HFSFSMNT_WRAPPER: u32 = 2;
pub const HFSFSMNT_EXTENDED_ARGS: u32 = 4;
pub const HFS_ENCODINGBIAS: u32 = 1;
pub const HFS_EXTEND_FS: u32 = 2;
pub const HFS_ENABLE_JOURNALING: u32 = 534889;
pub const HFS_DISABLE_JOURNALING: u32 = 201330;
pub const HFS_REPLAY_JOURNAL: u32 = 1785621618;
pub const HFS_ENABLE_RESIZE_DEBUG: u32 = 4;
pub const CURSES: u32 = 1;
pub const CURSES_H: u32 = 1;
pub const NCURSES_VERSION_MAJOR: u32 = 5;
pub const NCURSES_VERSION_MINOR: u32 = 7;
pub const NCURSES_VERSION_PATCH: u32 = 20081102;
pub const NCURSES_VERSION: &[u8; 4usize] = b"5.7\0";
pub const NCURSES_MOUSE_VERSION: u32 = 1;
pub const NCURSES_DLL_H_incl: u32 = 1;
pub const NCURSES_ENABLE_STDBOOL_H: u32 = 1;
pub const NCURSES_OPAQUE: u32 = 1;
pub const NCURSES_TPARM_VARARGS: u32 = 1;
pub const NCURSES_UNCTRL_H_incl: u32 = 1;
pub const COLOR_BLACK: u32 = 0;
pub const COLOR_RED: u32 = 1;
pub const COLOR_GREEN: u32 = 2;
pub const COLOR_YELLOW: u32 = 3;
pub const COLOR_BLUE: u32 = 4;
pub const COLOR_MAGENTA: u32 = 5;
pub const COLOR_CYAN: u32 = 6;
pub const COLOR_WHITE: u32 = 7;
pub const ERR: i32 = -1;
pub const OK: u32 = 0;
pub const _SUBWIN: u32 = 1;
pub const _ENDLINE: u32 = 2;
pub const _FULLWIN: u32 = 4;
pub const _SCROLLWIN: u32 = 8;
pub const _ISPAD: u32 = 16;
pub const _HASMOVED: u32 = 32;
pub const _WRAPPED: u32 = 64;
pub const _NOCHANGE: i32 = -1;
pub const _NEWINDEX: i32 = -1;
pub const NCURSES_EXT_FUNCS: u32 = 20081102;
pub const NCURSES_ATTR_SHIFT: u32 = 8;
pub const A_NORMAL: u32 = 0;
pub const KEY_CODE_YES: u32 = 256;
pub const KEY_MIN: u32 = 257;
pub const KEY_BREAK: u32 = 257;
pub const KEY_SRESET: u32 = 344;
pub const KEY_RESET: u32 = 345;
pub const KEY_DOWN: u32 = 258;
pub const KEY_UP: u32 = 259;
pub const KEY_LEFT: u32 = 260;
pub const KEY_RIGHT: u32 = 261;
pub const KEY_HOME: u32 = 262;
pub const KEY_BACKSPACE: u32 = 263;
pub const KEY_F0: u32 = 264;
pub const KEY_DL: u32 = 328;
pub const KEY_IL: u32 = 329;
pub const KEY_DC: u32 = 330;
pub const KEY_IC: u32 = 331;
pub const KEY_EIC: u32 = 332;
pub const KEY_CLEAR: u32 = 333;
pub const KEY_EOS: u32 = 334;
pub const KEY_EOL: u32 = 335;
pub const KEY_SF: u32 = 336;
pub const KEY_SR: u32 = 337;
pub const KEY_NPAGE: u32 = 338;
pub const KEY_PPAGE: u32 = 339;
pub const KEY_STAB: u32 = 340;
pub const KEY_CTAB: u32 = 341;
pub const KEY_CATAB: u32 = 342;
pub const KEY_ENTER: u32 = 343;
pub const KEY_PRINT: u32 = 346;
pub const KEY_LL: u32 = 347;
pub const KEY_A1: u32 = 348;
pub const KEY_A3: u32 = 349;
pub const KEY_B2: u32 = 350;
pub const KEY_C1: u32 = 351;
pub const KEY_C3: u32 = 352;
pub const KEY_BTAB: u32 = 353;
pub const KEY_BEG: u32 = 354;
pub const KEY_CANCEL: u32 = 355;
pub const KEY_CLOSE: u32 = 356;
pub const KEY_COMMAND: u32 = 357;
pub const KEY_COPY: u32 = 358;
pub const KEY_CREATE: u32 = 359;
pub const KEY_END: u32 = 360;
pub const KEY_EXIT: u32 = 361;
pub const KEY_FIND: u32 = 362;
pub const KEY_HELP: u32 = 363;
pub const KEY_MARK: u32 = 364;
pub const KEY_MESSAGE: u32 = 365;
pub const KEY_MOVE: u32 = 366;
pub const KEY_NEXT: u32 = 367;
pub const KEY_OPEN: u32 = 368;
pub const KEY_OPTIONS: u32 = 369;
pub const KEY_PREVIOUS: u32 = 370;
pub const KEY_REDO: u32 = 371;
pub const KEY_REFERENCE: u32 = 372;
pub const KEY_REFRESH: u32 = 373;
pub const KEY_REPLACE: u32 = 374;
pub const KEY_RESTART: u32 = 375;
pub const KEY_RESUME: u32 = 376;
pub const KEY_SAVE: u32 = 377;
pub const KEY_SBEG: u32 = 378;
pub const KEY_SCANCEL: u32 = 379;
pub const KEY_SCOMMAND: u32 = 380;
pub const KEY_SCOPY: u32 = 381;
pub const KEY_SCREATE: u32 = 382;
pub const KEY_SDC: u32 = 383;
pub const KEY_SDL: u32 = 384;
pub const KEY_SELECT: u32 = 385;
pub const KEY_SEND: u32 = 386;
pub const KEY_SEOL: u32 = 387;
pub const KEY_SEXIT: u32 = 388;
pub const KEY_SFIND: u32 = 389;
pub const KEY_SHELP: u32 = 390;
pub const KEY_SHOME: u32 = 391;
pub const KEY_SIC: u32 = 392;
pub const KEY_SLEFT: u32 = 393;
pub const KEY_SMESSAGE: u32 = 394;
pub const KEY_SMOVE: u32 = 395;
pub const KEY_SNEXT: u32 = 396;
pub const KEY_SOPTIONS: u32 = 397;
pub const KEY_SPREVIOUS: u32 = 398;
pub const KEY_SPRINT: u32 = 399;
pub const KEY_SREDO: u32 = 400;
pub const KEY_SREPLACE: u32 = 401;
pub const KEY_SRIGHT: u32 = 402;
pub const KEY_SRSUME: u32 = 403;
pub const KEY_SSAVE: u32 = 404;
pub const KEY_SSUSPEND: u32 = 405;
pub const KEY_SUNDO: u32 = 406;
pub const KEY_SUSPEND: u32 = 407;
pub const KEY_UNDO: u32 = 408;
pub const KEY_MOUSE: u32 = 409;
pub const KEY_RESIZE: u32 = 410;
pub const KEY_EVENT: u32 = 411;
pub const KEY_MAX: u32 = 511;
pub const NCURSES_BUTTON_RELEASED: u32 = 1;
pub const NCURSES_BUTTON_PRESSED: u32 = 2;
pub const NCURSES_BUTTON_CLICKED: u32 = 4;
pub const NCURSES_DOUBLE_CLICKED: u32 = 8;
pub const NCURSES_TRIPLE_CLICKED: u32 = 16;
pub const NCURSES_RESERVED_EVENT: u32 = 32;
pub const TRACE_DISABLE: u32 = 0;
pub const TRACE_TIMES: u32 = 1;
pub const TRACE_TPUTS: u32 = 2;
pub const TRACE_UPDATE: u32 = 4;
pub const TRACE_MOVE: u32 = 8;
pub const TRACE_CHARPUT: u32 = 16;
pub const TRACE_ORDINARY: u32 = 31;
pub const TRACE_CALLS: u32 = 32;
pub const TRACE_VIRTPUT: u32 = 64;
pub const TRACE_IEVENT: u32 = 128;
pub const TRACE_BITS: u32 = 256;
pub const TRACE_ICALLS: u32 = 512;
pub const TRACE_CCALLS: u32 = 1024;
pub const TRACE_DATABASE: u32 = 2048;
pub const TRACE_ATTRS: u32 = 4096;
pub const TRACE_SHIFT: u32 = 13;
pub const TRACE_MAXIMUM: u32 = 8191;
pub const IPSEC_PORT_ANY: u32 = 0;
pub const IPSEC_ULPROTO_ANY: u32 = 255;
pub const IPSEC_PROTO_ANY: u32 = 255;
pub const IPSEC_MODE_ANY: u32 = 0;
pub const IPSEC_MODE_TRANSPORT: u32 = 1;
pub const IPSEC_MODE_TUNNEL: u32 = 2;
pub const IPSEC_DIR_ANY: u32 = 0;
pub const IPSEC_DIR_INBOUND: u32 = 1;
pub const IPSEC_DIR_OUTBOUND: u32 = 2;
pub const IPSEC_DIR_MAX: u32 = 3;
pub const IPSEC_DIR_INVALID: u32 = 4;
pub const IPSEC_POLICY_DISCARD: u32 = 0;
pub const IPSEC_POLICY_NONE: u32 = 1;
pub const IPSEC_POLICY_IPSEC: u32 = 2;
pub const IPSEC_POLICY_ENTRUST: u32 = 3;
pub const IPSEC_POLICY_BYPASS: u32 = 4;
pub const IPSEC_POLICY_GENERATE: u32 = 5;
pub const IPSEC_LEVEL_DEFAULT: u32 = 0;
pub const IPSEC_LEVEL_USE: u32 = 1;
pub const IPSEC_LEVEL_REQUIRE: u32 = 2;
pub const IPSEC_LEVEL_UNIQUE: u32 = 3;
pub const IPSEC_MANUAL_REQID_MAX: u32 = 16383;
pub const IPSEC_REPLAYWSIZE: u32 = 32;
pub const IPSEC_KEY_AUTH_MAX_BYTES: u32 = 256;
pub const IPSEC_KEY_ENCRYPT_MAX_BYTES: u32 = 256;
pub const IPSEC_MAX_WAKE_PKT_LEN: u32 = 100;
pub const IPCOMP_OUI: u32 = 1;
pub const IPCOMP_DEFLATE: u32 = 2;
pub const IPCOMP_LZS: u32 = 3;
pub const IPCOMP_MAX: u32 = 4;
pub const IPCOMP_CPI_NEGOTIATE_MIN: u32 = 256;
pub const AFORK: u32 = 1;
pub const ASU: u32 = 2;
pub const ACOMPAT: u32 = 4;
pub const ACORE: u32 = 8;
pub const AXSIG: u32 = 16;
pub const AHZ: u32 = 64;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &[u8; 30usize] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &[u8; 26usize] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const B_WRITE: u32 = 0;
pub const B_READ: u32 = 1;
pub const B_ASYNC: u32 = 2;
pub const B_NOCACHE: u32 = 4;
pub const B_DELWRI: u32 = 8;
pub const B_LOCKED: u32 = 16;
pub const B_PHYS: u32 = 32;
pub const B_CLUSTER: u32 = 64;
pub const B_PAGEIO: u32 = 128;
pub const B_META: u32 = 256;
pub const B_RAW: u32 = 512;
pub const B_FUA: u32 = 1024;
pub const B_PASSIVE: u32 = 2048;
pub const B_IOSTREAMING: u32 = 4096;
pub const B_THROTTLED_IO: u32 = 8192;
pub const B_ENCRYPTED_IO: u32 = 16384;
pub const B_STATICCONTENT: u32 = 32768;
pub const BUF_WAIT: u32 = 1;
pub const BUF_WRITE_DATA: u32 = 1;
pub const BUF_SKIP_META: u32 = 2;
pub const BUF_INVALIDATE_LOCKED: u32 = 4;
pub const BUF_SKIP_NONLOCKED: u32 = 1;
pub const BUF_SKIP_LOCKED: u32 = 2;
pub const BUF_SCAN_CLEAN: u32 = 4;
pub const BUF_SCAN_DIRTY: u32 = 8;
pub const BUF_NOTIFY_BUSY: u32 = 16;
pub const BUF_RETURNED: u32 = 0;
pub const BUF_RETURNED_DONE: u32 = 1;
pub const BUF_CLAIMED: u32 = 2;
pub const BUF_CLAIMED_DONE: u32 = 3;
pub const BLK_READ: u32 = 1;
pub const BLK_WRITE: u32 = 2;
pub const BLK_META: u32 = 16;
pub const BLK_ONLYVALID: u32 = 2147483648;
pub const CLONE_NOFOLLOW: u32 = 1;
pub const CLONE_NOOWNERCOPY: u32 = 2;
pub const CLONE_ACL: u32 = 4;
pub const _SYS_CONF_H_: u32 = 1;
pub const D_TAPE: u32 = 1;
pub const D_DISK: u32 = 2;
pub const D_TTY: u32 = 3;
pub const DK_FEATURE_BARRIER: u32 = 2;
pub const DK_FEATURE_PRIORITY: u32 = 4;
pub const DK_FEATURE_UNMAP: u32 = 16;
pub const DK_SYNCHRONIZE_OPTION_BARRIER: u32 = 2;
pub const DK_CORESTORAGE_PIN_YOUR_METADATA: u32 = 1;
pub const DK_CORESTORAGE_ENABLE_HOTFILES: u32 = 2;
pub const DK_CORESTORAGE_PIN_YOUR_SWAPFILE: u32 = 4;
pub const DK_PROVISION_TYPE_MAPPED: u32 = 0;
pub const DK_PROVISION_TYPE_DEALLOCATED: u32 = 1;
pub const DK_PROVISION_TYPE_ANCHORED: u32 = 2;
pub const DK_LOCATION_INTERNAL: u32 = 0;
pub const DK_LOCATION_EXTERNAL: u32 = 1;
pub const EV_FD: u32 = 1;
pub const EV_RE: u32 = 1;
pub const EV_WR: u32 = 2;
pub const EV_EX: u32 = 4;
pub const EV_RM: u32 = 8;
pub const EV_MASK: u32 = 15;
pub const EV_RBYTES: u32 = 256;
pub const EV_WBYTES: u32 = 512;
pub const EV_RWBYTES: u32 = 768;
pub const EV_RCLOSED: u32 = 1024;
pub const EV_RCONN: u32 = 2048;
pub const EV_WCLOSED: u32 = 4096;
pub const EV_WCONN: u32 = 8192;
pub const EV_OOB: u32 = 16384;
pub const EV_FIN: u32 = 32768;
pub const EV_RESET: u32 = 65536;
pub const EV_TIMEOUT: u32 = 131072;
pub const EV_DMASK: u32 = 4294967040;
pub const NDFILE: u32 = 25;
pub const NDEXTENT: u32 = 50;
pub const GMONVERSION: u32 = 333945;
pub const HISTFRACTION: u32 = 2;
pub const HASHFRACTION: u32 = 2;
pub const ARCDENSITY: u32 = 2;
pub const MINARCS: u32 = 50;
pub const GMON_PROF_ON: u32 = 0;
pub const GMON_PROF_BUSY: u32 = 1;
pub const GMON_PROF_ERROR: u32 = 2;
pub const GMON_PROF_OFF: u32 = 3;
pub const GMON_MAGIC: u32 = 3203381950;
pub const GMON_MAGIC_64: u32 = 3203381951;
pub const GMONTYPE_SAMPLES: u32 = 1;
pub const GMONTYPE_RAWARCS: u32 = 2;
pub const GMONTYPE_ARCS_ORDERS: u32 = 3;
pub const GMONTYPE_DYLD_STATE: u32 = 4;
pub const GMONTYPE_DYLD2_STATE: u32 = 5;
pub const TANDEM: u32 = 1;
pub const CBREAK: u32 = 2;
pub const LCASE: u32 = 4;
pub const CRMOD: u32 = 16;
pub const RAW: u32 = 32;
pub const ODDP: u32 = 64;
pub const EVENP: u32 = 128;
pub const ANYP: u32 = 192;
pub const NLDELAY: u32 = 768;
pub const TBDELAY: u32 = 3072;
pub const XTABS: u32 = 3072;
pub const CRDELAY: u32 = 12288;
pub const VTDELAY: u32 = 16384;
pub const BSDELAY: u32 = 32768;
pub const ALLDELAY: u32 = 65280;
pub const CRTBS: u32 = 65536;
pub const PRTERA: u32 = 131072;
pub const CRTERA: u32 = 262144;
pub const TILDE: u32 = 524288;
pub const LITOUT: u32 = 2097152;
pub const NOHANG: u32 = 16777216;
pub const L001000: u32 = 33554432;
pub const CRTKIL: u32 = 67108864;
pub const PASS8: u32 = 134217728;
pub const CTLECH: u32 = 268435456;
pub const DECCTQ: u32 = 1073741824;
pub const LCRTBS: u32 = 1;
pub const LPRTERA: u32 = 2;
pub const LCRTERA: u32 = 4;
pub const LTILDE: u32 = 8;
pub const LMDMBUF: u32 = 16;
pub const LLITOUT: u32 = 32;
pub const LTOSTOP: u32 = 64;
pub const LFLUSHO: u32 = 128;
pub const LNOHANG: u32 = 256;
pub const LCRTKIL: u32 = 1024;
pub const LPASS8: u32 = 2048;
pub const LCTLECH: u32 = 4096;
pub const LPENDIN: u32 = 8192;
pub const LDECCTQ: u32 = 16384;
pub const LNOFLSH: u32 = 32768;
pub const OTTYDISC: u32 = 0;
pub const NETLDISC: u32 = 1;
pub const NTTYDISC: u32 = 2;
pub const KDBG_CLASS_MASK: u32 = 4278190080;
pub const KDBG_CLASS_OFFSET: u32 = 24;
pub const KDBG_CLASS_MAX: u32 = 255;
pub const KDBG_SUBCLASS_MASK: u32 = 16711680;
pub const KDBG_SUBCLASS_OFFSET: u32 = 16;
pub const KDBG_SUBCLASS_MAX: u32 = 255;
pub const KDBG_CSC_MASK: u32 = 4294901760;
pub const KDBG_CSC_OFFSET: u32 = 16;
pub const KDBG_CSC_MAX: u32 = 65535;
pub const KDBG_CODE_MASK: u32 = 65532;
pub const KDBG_CODE_OFFSET: u32 = 2;
pub const KDBG_CODE_MAX: u32 = 16383;
pub const KDBG_EVENTID_MASK: u32 = 4294967292;
pub const KDBG_FUNC_MASK: u32 = 3;
pub const DBG_FUNC_START: u32 = 1;
pub const DBG_FUNC_END: u32 = 2;
pub const DBG_FUNC_NONE: u32 = 0;
pub const DBG_MACH: u32 = 1;
pub const DBG_NETWORK: u32 = 2;
pub const DBG_FSYSTEM: u32 = 3;
pub const DBG_BSD: u32 = 4;
pub const DBG_IOKIT: u32 = 5;
pub const DBG_DRIVERS: u32 = 6;
pub const DBG_TRACE: u32 = 7;
pub const DBG_DLIL: u32 = 8;
pub const DBG_PTHREAD: u32 = 9;
pub const DBG_CORESTORAGE: u32 = 10;
pub const DBG_CG: u32 = 11;
pub const DBG_MONOTONIC: u32 = 12;
pub const DBG_MISC: u32 = 20;
pub const DBG_SECURITY: u32 = 30;
pub const DBG_DYLD: u32 = 31;
pub const DBG_QT: u32 = 32;
pub const DBG_APPS: u32 = 33;
pub const DBG_LAUNCHD: u32 = 34;
pub const DBG_SILICON: u32 = 35;
pub const DBG_PERF: u32 = 37;
pub const DBG_IMPORTANCE: u32 = 38;
pub const DBG_BANK: u32 = 40;
pub const DBG_XPC: u32 = 41;
pub const DBG_ATM: u32 = 42;
pub const DBG_ARIADNE: u32 = 43;
pub const DBG_DAEMON: u32 = 44;
pub const DBG_ENERGYTRACE: u32 = 45;
pub const DBG_DISPATCH: u32 = 46;
pub const DBG_IMG: u32 = 49;
pub const DBG_UMALLOC: u32 = 51;
pub const DBG_TURNSTILE: u32 = 53;
pub const DBG_AUDIO: u32 = 54;
pub const DBG_MIG: u32 = 255;
pub const DBG_MACH_EXCP_KTRAP_x86: u32 = 2;
pub const DBG_MACH_EXCP_DFLT: u32 = 3;
pub const DBG_MACH_EXCP_SYNC_ARM: u32 = 3;
pub const DBG_MACH_EXCP_IFLT: u32 = 4;
pub const DBG_MACH_EXCP_SERR_ARM: u32 = 4;
pub const DBG_MACH_EXCP_INTR: u32 = 5;
pub const DBG_MACH_EXCP_ALNG: u32 = 6;
pub const DBG_MACH_EXCP_UTRAP_x86: u32 = 7;
pub const DBG_MACH_EXCP_FP: u32 = 8;
pub const DBG_MACH_EXCP_DECI: u32 = 9;
pub const DBG_MACH_CHUD: u32 = 10;
pub const DBG_MACH_SIGNPOST: u32 = 10;
pub const DBG_MACH_EXCP_SC: u32 = 12;
pub const DBG_MACH_EXCP_TRACE: u32 = 13;
pub const DBG_MACH_EXCP_EMUL: u32 = 14;
pub const DBG_MACH_IHDLR: u32 = 16;
pub const DBG_MACH_IPC: u32 = 32;
pub const DBG_MACH_RESOURCE: u32 = 37;
pub const DBG_MACH_VM: u32 = 48;
pub const DBG_MACH_LEAKS: u32 = 49;
pub const DBG_MACH_WORKINGSET: u32 = 50;
pub const DBG_MACH_SCHED: u32 = 64;
pub const DBG_MACH_MSGID_INVALID: u32 = 80;
pub const DBG_MACH_LOCKS: u32 = 96;
pub const DBG_MACH_PMAP: u32 = 112;
pub const DBG_MACH_CLOCK: u32 = 128;
pub const DBG_MACH_MP: u32 = 144;
pub const DBG_MACH_VM_PRESSURE: u32 = 160;
pub const DBG_MACH_STACKSHOT: u32 = 161;
pub const DBG_MACH_SFI: u32 = 162;
pub const DBG_MACH_ENERGY_PERF: u32 = 163;
pub const DBG_MACH_SYSDIAGNOSE: u32 = 164;
pub const DBG_MACH_ZALLOC: u32 = 165;
pub const DBG_MACH_THREAD_GROUP: u32 = 166;
pub const DBG_MACH_COALITION: u32 = 167;
pub const DBG_MACH_SHAREDREGION: u32 = 168;
pub const DBG_MACH_SCHED_CLUTCH: u32 = 169;
pub const DBG_MACH_IO: u32 = 170;
pub const DBG_MACH_WORKGROUP: u32 = 171;
pub const DBG_MACH_HV: u32 = 172;
pub const DBG_MACH_KCOV: u32 = 173;
pub const DBG_MACH_MACHDEP_EXCP_SC_x86: u32 = 174;
pub const DBG_MACH_MACHDEP_EXCP_SC_ARM: u32 = 175;
pub const DBC_MACH_IO_MMIO_READ: u32 = 1;
pub const DBC_MACH_IO_MMIO_WRITE: u32 = 2;
pub const DBC_MACH_IO_PHYS_READ: u32 = 3;
pub const DBC_MACH_IO_PHYS_WRITE: u32 = 4;
pub const DBC_MACH_IO_PORTIO_READ: u32 = 5;
pub const DBC_MACH_IO_PORTIO_WRITE: u32 = 6;
pub const DBG_INTR_TYPE_UNKNOWN: u32 = 0;
pub const DBG_INTR_TYPE_IPI: u32 = 1;
pub const DBG_INTR_TYPE_TIMER: u32 = 2;
pub const DBG_INTR_TYPE_OTHER: u32 = 3;
pub const DBG_INTR_TYPE_PMI: u32 = 4;
pub const MACH_SCHED: u32 = 0;
pub const MACH_STACK_ATTACH: u32 = 1;
pub const MACH_STACK_HANDOFF: u32 = 2;
pub const MACH_CALL_CONT: u32 = 3;
pub const MACH_CALLOUT: u32 = 4;
pub const MACH_STACK_DETACH: u32 = 5;
pub const MACH_MAKE_RUNNABLE: u32 = 6;
pub const MACH_PROMOTE: u32 = 7;
pub const MACH_DEMOTE: u32 = 8;
pub const MACH_IDLE: u32 = 9;
pub const MACH_STACK_DEPTH: u32 = 10;
pub const MACH_MOVED: u32 = 11;
pub const MACH_PSET_LOAD_AVERAGE: u32 = 12;
pub const MACH_AMP_DEBUG: u32 = 13;
pub const MACH_FAILSAFE: u32 = 14;
pub const MACH_BLOCK: u32 = 15;
pub const MACH_WAIT: u32 = 16;
pub const MACH_GET_URGENCY: u32 = 20;
pub const MACH_URGENCY: u32 = 21;
pub const MACH_REDISPATCH: u32 = 22;
pub const MACH_REMOTE_AST: u32 = 23;
pub const MACH_SCHED_CHOOSE_PROCESSOR: u32 = 24;
pub const MACH_DEEP_IDLE: u32 = 25;
pub const MACH_CPU_THROTTLE_DISABLE: u32 = 27;
pub const MACH_RW_PROMOTE: u32 = 28;
pub const MACH_RW_DEMOTE: u32 = 29;
pub const MACH_SCHED_MAINTENANCE: u32 = 31;
pub const MACH_DISPATCH: u32 = 32;
pub const MACH_QUANTUM_HANDOFF: u32 = 33;
pub const MACH_MULTIQ_DEQUEUE: u32 = 34;
pub const MACH_SCHED_THREAD_SWITCH: u32 = 35;
pub const MACH_SCHED_SMT_BALANCE: u32 = 36;
pub const MACH_REMOTE_DEFERRED_AST: u32 = 37;
pub const MACH_REMOTE_CANCEL_AST: u32 = 38;
pub const MACH_SCHED_CHANGE_PRIORITY: u32 = 39;
pub const MACH_SCHED_UPDATE_REC_CORES: u32 = 40;
pub const MACH_STACK_WAIT: u32 = 41;
pub const MACH_THREAD_BIND: u32 = 42;
pub const MACH_WAITQ_PROMOTE: u32 = 43;
pub const MACH_WAITQ_DEMOTE: u32 = 44;
pub const MACH_SCHED_LOAD: u32 = 45;
pub const MACH_REC_CORES_FAILSAFE: u32 = 46;
pub const MACH_SCHED_QUANTUM_EXPIRED: u32 = 47;
pub const MACH_EXEC_PROMOTE: u32 = 48;
pub const MACH_EXEC_DEMOTE: u32 = 49;
pub const MACH_AMP_SIGNAL_SPILL: u32 = 50;
pub const MACH_AMP_STEAL: u32 = 51;
pub const MACH_SCHED_LOAD_EFFECTIVE: u32 = 52;
pub const MACH_QUIESCENT_COUNTER: u32 = 56;
pub const MACH_TURNSTILE_USER_CHANGE: u32 = 57;
pub const MACH_AMP_RECOMMENDATION_CHANGE: u32 = 58;
pub const MACH_AMP_PERFCTL_POLICY_CHANGE: u32 = 59;
pub const MACH_TURNSTILE_KERNEL_CHANGE: u32 = 64;
pub const MACH_SCHED_WI_AUTO_JOIN: u32 = 65;
pub const MACH_SCHED_WI_DEFERRED_FINISH: u32 = 66;
pub const MACH_SET_RT_DEADLINE: u32 = 67;
pub const MACH_CANCEL_RT_DEADLINE: u32 = 68;
pub const MACH_RT_SIGNAL_SPILL: u32 = 69;
pub const MACH_RT_STEAL: u32 = 70;
pub const MACH_PENDING_AST_URGENT: u32 = 71;
pub const MACH_SCHED_THREAD_SELECT: u32 = 72;
pub const MACH_SCHED_NEXT_PROCESSOR: u32 = 73;
pub const MACH_PSET_AVG_EXEC_TIME: u32 = 80;
pub const MACH_SUSPEND_USERSPACE: u32 = 81;
pub const MACH_PREEMPTION_EXPIRED: u32 = 82;
pub const MACH_FLOOR_PROMOTE: u32 = 83;
pub const MACH_FLOOR_DEMOTE: u32 = 84;
pub const MACH_INT_MASKED_EXPIRED: u32 = 85;
pub const MACH_INT_HANDLED_EXPIRED: u32 = 86;
pub const MACH_UPDATE_POWERED_CORES: u32 = 88;
pub const MACH_MODE_DEMOTE_THROTTLED: u32 = 89;
pub const MACH_MODE_DEMOTE_FAILSAFE: u32 = 90;
pub const MACH_MODE_DEMOTE_RT_RESTRICTED: u32 = 91;
pub const MACH_MODE_UNDEMOTE_THROTTLED: u32 = 92;
pub const MACH_MODE_UNDEMOTE_FAILSAFE: u32 = 93;
pub const MACH_MODE_UNDEMOTE_RT_RESTRICTED: u32 = 94;
pub const MACH_INT_MASKED_RESET: u32 = 95;
pub const MACH_SCHED_CLUTCH_ROOT_BUCKET_STATE: u32 = 0;
pub const MACH_SCHED_CLUTCH_TG_BUCKET_STATE: u32 = 1;
pub const MACH_SCHED_CLUTCH_THREAD_SELECT: u32 = 2;
pub const MACH_SCHED_CLUTCH_THREAD_STATE: u32 = 3;
pub const MACH_SCHED_CLUTCH_TG_BUCKET_PRI: u32 = 4;
pub const MACH_SCHED_EDGE_CLUSTER_OVERLOAD: u32 = 5;
pub const MACH_SCHED_EDGE_STEAL: u32 = 6;
pub const MACH_SCHED_EDGE_REBAL_RUNNABLE: u32 = 7;
pub const MACH_SCHED_EDGE_REBAL_RUNNING: u32 = 8;
pub const MACH_SCHED_EDGE_SHOULD_YIELD: u32 = 9;
pub const MACH_SCHED_CLUTCH_THR_COUNT: u32 = 10;
pub const MACH_SCHED_EDGE_LOAD_AVG: u32 = 11;
pub const MACH_SCHED_EDGE_CLUSTER_SHARED_LOAD: u32 = 12;
pub const MACH_SCHED_EDGE_RSRC_HEAVY_THREAD: u32 = 13;
pub const MACH_SCHED_EDGE_SHARED_RSRC_MIGRATE: u32 = 14;
pub const WORKGROUP_INTERVAL_CREATE: u32 = 0;
pub const WORKGROUP_INTERVAL_DESTROY: u32 = 1;
pub const WORKGROUP_INTERVAL_CHANGE: u32 = 2;
pub const WORKGROUP_INTERVAL_START: u32 = 3;
pub const WORKGROUP_INTERVAL_UPDATE: u32 = 4;
pub const WORKGROUP_INTERVAL_FINISH: u32 = 5;
pub const WORKGROUP_INTERVAL_SET_WORKLOAD_ID: u32 = 6;
pub const WORKGROUP_INTERVAL_SET_WORKLOAD_ID_NAME: u32 = 7;
pub const KCOV_STKSZ_THRESHOLD_ABOVE: u32 = 0;
pub const KCOV_STKSZ_THRESHOLD_BELOW: u32 = 1;
pub const KCOV_STKSZ_DELTA: u32 = 2;
pub const MACH_MULTIQ_BOUND: u32 = 1;
pub const MACH_MULTIQ_GROUP: u32 = 2;
pub const MACH_MULTIQ_GLOBAL: u32 = 3;
pub const DBG_ZERO_FILL_FAULT: u32 = 1;
pub const DBG_PAGEIN_FAULT: u32 = 2;
pub const DBG_COW_FAULT: u32 = 3;
pub const DBG_CACHE_HIT_FAULT: u32 = 4;
pub const DBG_NZF_PAGE_FAULT: u32 = 5;
pub const DBG_GUARD_FAULT: u32 = 6;
pub const DBG_PAGEINV_FAULT: u32 = 7;
pub const DBG_PAGEIND_FAULT: u32 = 8;
pub const DBG_COMPRESSOR_FAULT: u32 = 9;
pub const DBG_COMPRESSOR_SWAPIN_FAULT: u32 = 10;
pub const DBG_COR_FAULT: u32 = 11;
pub const MACH_TASK_SUSPEND: u32 = 0;
pub const MACH_TASK_RESUME: u32 = 1;
pub const MACH_THREAD_SET_VOUCHER: u32 = 2;
pub const MACH_IPC_MSG_SEND: u32 = 3;
pub const MACH_IPC_MSG_RECV: u32 = 4;
pub const MACH_IPC_MSG_RECV_VOUCHER_REFUSED: u32 = 5;
pub const MACH_IPC_KMSG_FREE: u32 = 6;
pub const MACH_IPC_VOUCHER_CREATE: u32 = 7;
pub const MACH_IPC_VOUCHER_CREATE_ATTR_DATA: u32 = 8;
pub const MACH_IPC_VOUCHER_DESTROY: u32 = 9;
pub const MACH_IPC_KMSG_INFO: u32 = 10;
pub const MACH_IPC_KMSG_LINK: u32 = 11;
pub const MACH_IPC_PORT_ENTRY_MODIFY: u32 = 12;
pub const MACH_IPC_DESTROY_GUARDED_DESC: u32 = 13;
pub const MACH_THREAD_GROUP_NEW: u32 = 0;
pub const MACH_THREAD_GROUP_FREE: u32 = 1;
pub const MACH_THREAD_GROUP_SET: u32 = 2;
pub const MACH_THREAD_GROUP_NAME: u32 = 3;
pub const MACH_THREAD_GROUP_NAME_FREE: u32 = 4;
pub const MACH_THREAD_GROUP_FLAGS: u32 = 5;
pub const MACH_THREAD_GROUP_BLOCK: u32 = 6;
pub const MACH_THREAD_GROUP_PREADOPT: u32 = 7;
pub const MACH_THREAD_GROUP_PREADOPT_NEXTTIME: u32 = 8;
pub const MACH_THREAD_GROUP_PREADOPT_CLEAR: u32 = 9;
pub const MACH_THREAD_GROUP_PREADOPT_NA: u32 = 10;
pub const MACH_COALITION_NEW: u32 = 0;
pub const MACH_COALITION_FREE: u32 = 1;
pub const MACH_COALITION_ADOPT: u32 = 2;
pub const MACH_COALITION_REMOVE: u32 = 3;
pub const MACH_COALITION_THREAD_GROUP_SET: u32 = 4;
pub const PMAP__CREATE: u32 = 0;
pub const PMAP__DESTROY: u32 = 1;
pub const PMAP__PROTECT: u32 = 2;
pub const PMAP__PAGE_PROTECT: u32 = 3;
pub const PMAP__ENTER: u32 = 4;
pub const PMAP__REMOVE: u32 = 5;
pub const PMAP__NEST: u32 = 6;
pub const PMAP__UNNEST: u32 = 7;
pub const PMAP__FLUSH_TLBS: u32 = 8;
pub const PMAP__UPDATE_INTERRUPT: u32 = 9;
pub const PMAP__ATTRIBUTE_CLEAR: u32 = 10;
pub const PMAP__REUSABLE: u32 = 11;
pub const PMAP__QUERY_RESIDENT: u32 = 12;
pub const PMAP__FLUSH_KERN_TLBS: u32 = 13;
pub const PMAP__FLUSH_DELAYED_TLBS: u32 = 14;
pub const PMAP__FLUSH_TLBS_TO: u32 = 15;
pub const PMAP__FLUSH_EPT: u32 = 16;
pub const PMAP__FAST_FAULT: u32 = 17;
pub const PMAP__SWITCH: u32 = 18;
pub const PMAP__TTE: u32 = 19;
pub const PMAP__SWITCH_USER_TTB: u32 = 20;
pub const PMAP__UPDATE_CACHING: u32 = 21;
pub const PMAP__ATTRIBUTE_CLEAR_RANGE: u32 = 22;
pub const PMAP__CLEAR_USER_TTB: u32 = 23;
pub const PMAP__IOMMU_INIT: u32 = 24;
pub const PMAP__IOMMU_IOVMALLOC: u32 = 25;
pub const PMAP__IOMMU_IOVMFREE: u32 = 26;
pub const PMAP__IOMMU_MAP: u32 = 27;
pub const PMAP__IOMMU_UNMAP: u32 = 28;
pub const PMAP__IOMMU_IOCTL: u32 = 29;
pub const PMAP__IOMMU_GRANT_PAGE: u32 = 30;
pub const PMAP__BATCH_UPDATE_CACHING: u32 = 31;
pub const MACH_EPOCH_CHANGE: u32 = 0;
pub const MACH_BRIDGE_RCV_TS: u32 = 1;
pub const MACH_BRIDGE_REMOTE_TIME: u32 = 2;
pub const MACH_BRIDGE_RESET_TS: u32 = 3;
pub const MACH_BRIDGE_TS_PARAMS: u32 = 4;
pub const MACH_BRIDGE_SKIP_TS: u32 = 5;
pub const MACH_BRIDGE_TS_MISMATCH: u32 = 6;
pub const MACH_BRIDGE_OBSV_RATE: u32 = 7;
pub const MICROSTACKSHOT_RECORD: u32 = 0;
pub const MICROSTACKSHOT_GATHER: u32 = 1;
pub const STACKSHOT_RECORD: u32 = 2;
pub const STACKSHOT_RECORD_SHORT: u32 = 3;
pub const STACKSHOT_KERN_RECORD: u32 = 4;
pub const SYSDIAGNOSE_NOTIFY_USER: u32 = 0;
pub const SYSDIAGNOSE_FULL: u32 = 1;
pub const SYSDIAGNOSE_STACKSHOT: u32 = 2;
pub const SYSDIAGNOSE_TAILSPIN: u32 = 3;
pub const SFI_SET_WINDOW: u32 = 0;
pub const SFI_CANCEL_WINDOW: u32 = 1;
pub const SFI_SET_CLASS_OFFTIME: u32 = 2;
pub const SFI_CANCEL_CLASS_OFFTIME: u32 = 3;
pub const SFI_THREAD_DEFER: u32 = 4;
pub const SFI_OFF_TIMER: u32 = 5;
pub const SFI_ON_TIMER: u32 = 6;
pub const SFI_WAIT_CANCELED: u32 = 7;
pub const SFI_PID_SET_MANAGED: u32 = 8;
pub const SFI_PID_CLEAR_MANAGED: u32 = 9;
pub const SFI_GLOBAL_DEFER: u32 = 10;
pub const ZALLOC_ZCRAM: u32 = 0;
pub const RMON_ENABLE_CPUUSAGE_MONITOR: u32 = 1;
pub const RMON_CPUUSAGE_VIOLATED: u32 = 2;
pub const RMON_CPUUSAGE_SUSPENDED: u32 = 3;
pub const RMON_CPUUSAGE_VIOLATED_K32A: u32 = 4;
pub const RMON_CPUUSAGE_VIOLATED_K32B: u32 = 5;
pub const RMON_CPUUSAGE_RESUMED: u32 = 6;
pub const RMON_DISABLE_CPUUSAGE_MONITOR: u32 = 15;
pub const RMON_ENABLE_CPUWAKES_MONITOR: u32 = 17;
pub const RMON_CPUWAKES_VIOLATED: u32 = 18;
pub const RMON_CPUWAKES_VIOLATED_K32A: u32 = 20;
pub const RMON_CPUWAKES_VIOLATED_K32B: u32 = 21;
pub const RMON_DISABLE_CPUWAKES_MONITOR: u32 = 31;
pub const RMON_ENABLE_IO_MONITOR: u32 = 33;
pub const RMON_LOGWRITES_VIOLATED: u32 = 34;
pub const RMON_PHYSWRITES_VIOLATED: u32 = 35;
pub const RMON_LOGWRITES_VIOLATED_K32A: u32 = 36;
pub const RMON_LOGWRITES_VIOLATED_K32B: u32 = 37;
pub const RMON_DISABLE_IO_MONITOR: u32 = 47;
pub const HV_X86_ENTER: u32 = 0;
pub const HV_X86_ENTER_ERROR: u32 = 1;
pub const HV_X86_TRAP_TASK: u32 = 2;
pub const HV_X86_TRAP_THREAD: u32 = 3;
pub const HV_X86_INTERRUPT_INJECT: u32 = 4;
pub const HV_X86_INTERRUPT_RECV: u32 = 5;
pub const HV_X86_INTERRUPT_SEND: u32 = 6;
pub const HV_X86_IPI_SEND: u32 = 7;
pub const HV_X86_NMI_INJECT: u32 = 8;
pub const HV_X86_NMI_SEND: u32 = 9;
pub const HV_X86_LSC_HIT: u32 = 10;
pub const HV_X86_LSC_INSERT: u32 = 11;
pub const HV_X86_LSC_INSERT_IMM32: u32 = 12;
pub const HV_X86_LSC_INVALID: u32 = 13;
pub const HV_X86_LSC_INVALIDATE: u32 = 14;
pub const HV_X86_LSC_MISS: u32 = 15;
pub const HV_X86_TIMER_CANCEL: u32 = 16;
pub const HV_X86_TIMER_FIRE: u32 = 17;
pub const HV_X86_TIMER_SCHEDULE: u32 = 18;
pub const HV_X86_APIC_ACCESS_EXIT: u32 = 19;
pub const HV_X86_APIC_WRITE_EXIT: u32 = 20;
pub const HV_X86_EPT_VIOLATION_EXIT: u32 = 21;
pub const HV_X86_EXC_NMI_EXIT: u32 = 22;
pub const HV_X86_HLT_EXIT: u32 = 23;
pub const HV_X86_IO_EXIT: u32 = 24;
pub const HV_X86_IRQ_EXIT: u32 = 25;
pub const HV_X86_IRQ_WND_EXIT: u32 = 26;
pub const HV_X86_MOV_DR_EXIT: u32 = 27;
pub const HV_X86_NMI_WND_EXIT: u32 = 28;
pub const HV_X86_RDMSR_EXIT: u32 = 29;
pub const HV_X86_RDPMC_EXIT: u32 = 30;
pub const HV_X86_TPR_THRESHOLD_EXIT: u32 = 31;
pub const HV_X86_VMX_TIMER_EXPIRED_EXIT: u32 = 32;
pub const HV_X86_WRMSR_EXIT: u32 = 33;
pub const HV_X86_VCPU_READ_APIC_TRAP: u32 = 34;
pub const HV_X86_VCPU_READ_VMCS_TRAP: u32 = 35;
pub const HV_X86_VCPU_RUN_TRAP: u32 = 36;
pub const HV_X86_VCPU_RUN_UNTIL_TRAP: u32 = 37;
pub const HV_X86_VCPU_WRITE_APIC_TRAP: u32 = 38;
pub const HV_X86_VM_ADDRSPACE_CREATE_TRAP: u32 = 39;
pub const HV_X86_VM_ADDRSPACE_DESTROY_TRAP: u32 = 40;
pub const HV_X86_VM_INTR_MSI_TRAP: u32 = 41;
pub const HV_X86_VM_MAP_TRAP: u32 = 42;
pub const HV_X86_VM_PROTECT_TRAP: u32 = 43;
pub const HV_X86_VM_UNMAP_TRAP: u32 = 44;
pub const HV_X86_TSC_OFFSET_SET: u32 = 45;
pub const DBG_NETIP: u32 = 1;
pub const DBG_NETARP: u32 = 2;
pub const DBG_NETUDP: u32 = 3;
pub const DBG_NETTCP: u32 = 4;
pub const DBG_NETICMP: u32 = 5;
pub const DBG_NETIGMP: u32 = 6;
pub const DBG_NETRIP: u32 = 7;
pub const DBG_NETOSPF: u32 = 8;
pub const DBG_NETISIS: u32 = 9;
pub const DBG_NETSNMP: u32 = 10;
pub const DBG_NETSOCK: u32 = 11;
pub const DBG_NETAARP: u32 = 100;
pub const DBG_NETDDP: u32 = 101;
pub const DBG_NETNBP: u32 = 102;
pub const DBG_NETZIP: u32 = 103;
pub const DBG_NETADSP: u32 = 104;
pub const DBG_NETATP: u32 = 105;
pub const DBG_NETASP: u32 = 106;
pub const DBG_NETAFP: u32 = 107;
pub const DBG_NETRTMP: u32 = 108;
pub const DBG_NETAURP: u32 = 109;
pub const DBG_NETIPSEC: u32 = 128;
pub const DBG_NETVMNET: u32 = 129;
pub const DBG_IOINTC: u32 = 0;
pub const DBG_IOWORKLOOP: u32 = 1;
pub const DBG_IOINTES: u32 = 2;
pub const DBG_IOCLKES: u32 = 3;
pub const DBG_IOCMDQ: u32 = 4;
pub const DBG_IOMCURS: u32 = 5;
pub const DBG_IOMDESC: u32 = 6;
pub const DBG_IOPOWER: u32 = 7;
pub const DBG_IOSERVICE: u32 = 8;
pub const DBG_IOREGISTRY: u32 = 9;
pub const DBG_IOSTORAGE: u32 = 32;
pub const DBG_IONETWORK: u32 = 33;
pub const DBG_IOKEYBOARD: u32 = 34;
pub const DBG_IOHID: u32 = 35;
pub const DBG_IOAUDIO: u32 = 36;
pub const DBG_IOSERIAL: u32 = 37;
pub const DBG_IOTTY: u32 = 38;
pub const DBG_IOSAM: u32 = 39;
pub const DBG_IOPARALLELATA: u32 = 40;
pub const DBG_IOPARALLELSCSI: u32 = 41;
pub const DBG_IOSATA: u32 = 42;
pub const DBG_IOSAS: u32 = 43;
pub const DBG_IOFIBRECHANNEL: u32 = 44;
pub const DBG_IOUSB: u32 = 45;
pub const DBG_IOBLUETOOTH: u32 = 46;
pub const DBG_IOFIREWIRE: u32 = 47;
pub const DBG_IOINFINIBAND: u32 = 48;
pub const DBG_IOCPUPM: u32 = 49;
pub const DBG_IOGRAPHICS: u32 = 50;
pub const DBG_HIBERNATE: u32 = 51;
pub const DBG_IOTHUNDERBOLT: u32 = 52;
pub const DBG_BOOTER: u32 = 53;
pub const DBG_IOAUDIO2: u32 = 54;
pub const DBG_IOAFK: u32 = 55;
pub const DBG_IOSURFACEPA: u32 = 64;
pub const DBG_IOMDPA: u32 = 65;
pub const DBG_IODARTPA: u32 = 66;
pub const DBG_IOPOINTING: u32 = 35;
pub const DBG_IODISK: u32 = 32;
pub const DBG_DRVSTORAGE: u32 = 1;
pub const DBG_DRVNETWORK: u32 = 2;
pub const DBG_DRVKEYBOARD: u32 = 3;
pub const DBG_DRVHID: u32 = 4;
pub const DBG_DRVAUDIO: u32 = 5;
pub const DBG_DRVSERIAL: u32 = 7;
pub const DBG_DRVSAM: u32 = 8;
pub const DBG_DRVPARALLELATA: u32 = 9;
pub const DBG_DRVPARALLELSCSI: u32 = 10;
pub const DBG_DRVSATA: u32 = 11;
pub const DBG_DRVSAS: u32 = 12;
pub const DBG_DRVFIBRECHANNEL: u32 = 13;
pub const DBG_DRVUSB: u32 = 14;
pub const DBG_DRVBLUETOOTH: u32 = 15;
pub const DBG_DRVFIREWIRE: u32 = 16;
pub const DBG_DRVINFINIBAND: u32 = 17;
pub const DBG_DRVGRAPHICS: u32 = 18;
pub const DBG_DRVSD: u32 = 19;
pub const DBG_DRVNAND: u32 = 20;
pub const DBG_SSD: u32 = 21;
pub const DBG_DRVSPI: u32 = 22;
pub const DBG_DRVWLAN_802_11: u32 = 23;
pub const DBG_DRVSSM: u32 = 24;
pub const DBG_DRVSMC: u32 = 25;
pub const DBG_DRVMACEFIMANAGER: u32 = 26;
pub const DBG_DRVANE: u32 = 27;
pub const DBG_DRVETHERNET: u32 = 28;
pub const DBG_DRVMCC: u32 = 29;
pub const DBG_DRVACCESSORY: u32 = 30;
pub const DBG_SOCDIAGS: u32 = 31;
pub const DBG_DRVVIRTIO: u32 = 32;
pub const DBG_DRVCELLULAR: u32 = 33;
pub const DBG_DRVPOINTING: u32 = 4;
pub const DBG_DRVDISK: u32 = 1;
pub const DBG_DLIL_STATIC: u32 = 1;
pub const DBG_DLIL_PR_MOD: u32 = 2;
pub const DBG_DLIL_IF_MOD: u32 = 3;
pub const DBG_DLIL_PR_FLT: u32 = 4;
pub const DBG_DLIL_IF_FLT: u32 = 5;
pub const DBG_FSRW: u32 = 1;
pub const DBG_DKRW: u32 = 2;
pub const DBG_FSVN: u32 = 3;
pub const DBG_FSLOOOKUP: u32 = 4;
pub const DBG_JOURNAL: u32 = 5;
pub const DBG_IOCTL: u32 = 6;
pub const DBG_BOOTCACHE: u32 = 7;
pub const DBG_HFS: u32 = 8;
pub const DBG_APFS: u32 = 9;
pub const DBG_SMB: u32 = 10;
pub const DBG_MOUNT: u32 = 11;
pub const DBG_EXFAT: u32 = 14;
pub const DBG_MSDOS: u32 = 15;
pub const DBG_ACFS: u32 = 16;
pub const DBG_THROTTLE: u32 = 17;
pub const DBG_DECMP: u32 = 18;
pub const DBG_VFS: u32 = 19;
pub const DBG_LIVEFS: u32 = 20;
pub const DBG_CONTENT_PROT: u32 = 207;
pub const DBG_HFS_UPDATE_ACCTIME: u32 = 1;
pub const DBG_HFS_UPDATE_MODTIME: u32 = 2;
pub const DBG_HFS_UPDATE_CHGTIME: u32 = 4;
pub const DBG_HFS_UPDATE_MODIFIED: u32 = 8;
pub const DBG_HFS_UPDATE_FORCE: u32 = 16;
pub const DBG_HFS_UPDATE_DATEADDED: u32 = 32;
pub const DBG_HFS_UPDATE_MINOR: u32 = 64;
pub const DBG_HFS_UPDATE_SKIPPED: u32 = 128;
pub const DBG_VFS_IO_COMPRESSION_STATS: u32 = 4096;
pub const DBG_BSD_PROC: u32 = 1;
pub const DBG_BSD_MEMSTAT: u32 = 2;
pub const DBG_BSD_KEVENT: u32 = 3;
pub const DBG_BSD_EXCP_SC: u32 = 12;
pub const DBG_BSD_AIO: u32 = 13;
pub const DBG_BSD_SC_EXTENDED_INFO: u32 = 14;
pub const DBG_BSD_SC_EXTENDED_INFO2: u32 = 15;
pub const DBG_BSD_KDEBUG_TEST: u32 = 255;
pub const BSD_PROC_EXIT: u32 = 1;
pub const BSD_PROC_FRCEXIT: u32 = 2;
pub const BSD_PROC_EXEC: u32 = 3;
pub const BSD_PROC_EXITREASON_CREATE: u32 = 4;
pub const BSD_PROC_EXITREASON_COMMIT: u32 = 5;
pub const BSD_MEMSTAT_SCAN: u32 = 1;
pub const BSD_MEMSTAT_JETSAM: u32 = 2;
pub const BSD_MEMSTAT_JETSAM_HIWAT: u32 = 3;
pub const BSD_MEMSTAT_FREEZE: u32 = 4;
pub const BSD_MEMSTAT_FREEZE_SCAN: u32 = 5;
pub const BSD_MEMSTAT_UPDATE: u32 = 6;
pub const BSD_MEMSTAT_IDLE_DEMOTE: u32 = 7;
pub const BSD_MEMSTAT_CLEAR_ERRORS: u32 = 8;
pub const BSD_MEMSTAT_DIRTY_TRACK: u32 = 9;
pub const BSD_MEMSTAT_DIRTY_SET: u32 = 10;
pub const BSD_MEMSTAT_DIRTY_CLEAR: u32 = 11;
pub const BSD_MEMSTAT_FAST_JETSAM: u32 = 15;
pub const BSD_MEMSTAT_COMPACTOR_RUN: u32 = 16;
pub const BSD_MEMSTAT_FREEZE_DISABLE: u32 = 17;
pub const BSD_MEMSTAT_RELAUNCH_FLAGS: u32 = 18;
pub const BSD_KEVENT_KQ_PROCESS_BEGIN: u32 = 1;
pub const BSD_KEVENT_KQ_PROCESS_END: u32 = 2;
pub const BSD_KEVENT_KQWQ_PROCESS_BEGIN: u32 = 3;
pub const BSD_KEVENT_KQWQ_PROCESS_END: u32 = 4;
pub const BSD_KEVENT_KQWQ_BIND: u32 = 5;
pub const BSD_KEVENT_KQWQ_UNBIND: u32 = 6;
pub const BSD_KEVENT_KQWQ_THREQUEST: u32 = 7;
pub const BSD_KEVENT_KQWL_PROCESS_BEGIN: u32 = 8;
pub const BSD_KEVENT_KQWL_PROCESS_END: u32 = 9;
pub const BSD_KEVENT_KQWL_THREQUEST: u32 = 10;
pub const BSD_KEVENT_KQWL_THADJUST: u32 = 11;
pub const BSD_KEVENT_KQ_REGISTER: u32 = 12;
pub const BSD_KEVENT_KQWQ_REGISTER: u32 = 13;
pub const BSD_KEVENT_KQWL_REGISTER: u32 = 14;
pub const BSD_KEVENT_KNOTE_ACTIVATE: u32 = 15;
pub const BSD_KEVENT_KQ_PROCESS: u32 = 16;
pub const BSD_KEVENT_KQWQ_PROCESS: u32 = 17;
pub const BSD_KEVENT_KQWL_PROCESS: u32 = 18;
pub const BSD_KEVENT_KQWL_BIND: u32 = 19;
pub const BSD_KEVENT_KQWL_UNBIND: u32 = 20;
pub const BSD_KEVENT_KNOTE_ENABLE: u32 = 21;
pub const BSD_KEVENT_KNOTE_VANISHED: u32 = 22;
pub const DBG_TRACE_DATA: u32 = 0;
pub const DBG_TRACE_STRING: u32 = 1;
pub const DBG_TRACE_INFO: u32 = 2;
pub const DBG_CS_IO: u32 = 0;
pub const DBG_SEC_KERNEL: u32 = 0;
pub const DBG_SEC_SANDBOX: u32 = 1;
pub const DBG_MT_INSTRS_CYCLES: u32 = 1;
pub const DBG_MT_DEBUG: u32 = 2;
pub const DBG_MT_RESOURCES_PROC_EXIT: u32 = 3;
pub const DBG_MT_RESOURCES_THR_EXIT: u32 = 4;
pub const DBG_MT_TMPTH: u32 = 254;
pub const DBG_MT_TMPCPU: u32 = 255;
pub const DBG_MISC_COREBRIGHTNESS: u32 = 1;
pub const DBG_MISC_VIDEOENG: u32 = 2;
pub const DBG_EVENT: u32 = 16;
pub const DBG_MISC_INSTRUMENTS: u32 = 17;
pub const DBG_MISC_INSTRUMENTSBT: u32 = 18;
pub const DBG_MISC_RUNLOOP_DETAILS: u32 = 19;
pub const DBG_MISC_RUNLOOP_BUSY: u32 = 20;
pub const DBG_MISC_LAYOUT: u32 = 26;
pub const DBG_BUFFER: u32 = 32;
pub const DBG_DYLD_UUID: u32 = 5;
pub const DBG_DYLD_UUID_MAP_A: u32 = 0;
pub const DBG_DYLD_UUID_MAP_B: u32 = 1;
pub const DBG_DYLD_UUID_MAP_32_A: u32 = 2;
pub const DBG_DYLD_UUID_MAP_32_B: u32 = 3;
pub const DBG_DYLD_UUID_MAP_32_C: u32 = 4;
pub const DBG_DYLD_UUID_UNMAP_A: u32 = 5;
pub const DBG_DYLD_UUID_UNMAP_B: u32 = 6;
pub const DBG_DYLD_UUID_UNMAP_32_A: u32 = 7;
pub const DBG_DYLD_UUID_UNMAP_32_B: u32 = 8;
pub const DBG_DYLD_UUID_UNMAP_32_C: u32 = 9;
pub const DBG_DYLD_UUID_SHARED_CACHE_A: u32 = 10;
pub const DBG_DYLD_UUID_SHARED_CACHE_B: u32 = 11;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_A: u32 = 12;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_B: u32 = 13;
pub const DBG_DYLD_UUID_SHARED_CACHE_32_C: u32 = 14;
pub const DBG_DYLD_AOT_UUID_MAP_A: u32 = 15;
pub const DBG_DYLD_AOT_UUID_MAP_B: u32 = 16;
pub const DKIO_DONE: u32 = 1;
pub const DKIO_READ: u32 = 2;
pub const DKIO_ASYNC: u32 = 4;
pub const DKIO_META: u32 = 8;
pub const DKIO_PAGING: u32 = 16;
pub const DKIO_THROTTLE: u32 = 32;
pub const DKIO_PASSIVE: u32 = 64;
pub const DKIO_NOCACHE: u32 = 128;
pub const DKIO_TIER_MASK: u32 = 3840;
pub const DKIO_TIER_SHIFT: u32 = 8;
pub const DKIO_TIER_UPGRADE: u32 = 4096;
pub const DBG_APP_LOGINWINDOW: u32 = 3;
pub const DBG_APP_AUDIO: u32 = 4;
pub const DBG_APP_SYSTEMUI: u32 = 5;
pub const DBG_APP_SIGNPOST: u32 = 10;
pub const DBG_APP_TAL: u32 = 11;
pub const DBG_APP_APPKIT: u32 = 12;
pub const DBG_APP_UIKIT: u32 = 13;
pub const DBG_APP_DFR: u32 = 14;
pub const DBG_APP_LAYOUT: u32 = 15;
pub const DBG_APP_COREDATA: u32 = 16;
pub const DBG_APP_RUNLOOP_BASIC: u32 = 17;
pub const DBG_APP_RUNLOOP_ADVANCED: u32 = 18;
pub const DBG_APP_SAMBA: u32 = 128;
pub const DBG_APP_EOSSUPPORT: u32 = 129;
pub const DBG_APP_MACEFIMANAGER: u32 = 130;
pub const OPEN_THROTTLE_WINDOW: u32 = 1;
pub const PROCESS_THROTTLED: u32 = 2;
pub const IO_THROTTLE_DISABLE: u32 = 3;
pub const IO_TIER_UPL_MISMATCH: u32 = 4;
pub const IMP_ASSERTION: u32 = 16;
pub const IMP_BOOST: u32 = 17;
pub const IMP_MSG: u32 = 18;
pub const IMP_WATCHPORT: u32 = 19;
pub const IMP_TASK_SUPPRESSION: u32 = 23;
pub const IMP_TASK_APPTYPE: u32 = 24;
pub const IMP_UPDATE: u32 = 25;
pub const IMP_USYNCH_QOS_OVERRIDE: u32 = 26;
pub const IMP_DONOR_CHANGE: u32 = 27;
pub const IMP_MAIN_THREAD_QOS: u32 = 28;
pub const IMP_SYNC_IPC_QOS: u32 = 29;
pub const IMP_TASK_POLICY_DARWIN_BG: u32 = 33;
pub const IMP_TASK_POLICY_IOPOL: u32 = 34;
pub const IMP_TASK_POLICY_IO: u32 = 35;
pub const IMP_TASK_POLICY_PASSIVE_IO: u32 = 36;
pub const IMP_TASK_POLICY_DARWIN_BG_IOPOL: u32 = 39;
pub const IMP_TASK_POLICY_BOOST: u32 = 41;
pub const IMP_TASK_POLICY_ROLE: u32 = 42;
pub const IMP_TASK_POLICY_TERMINATED: u32 = 44;
pub const IMP_TASK_POLICY_NEW_SOCKETS_BG: u32 = 45;
pub const IMP_TASK_POLICY_SUP_ACTIVE: u32 = 46;
pub const IMP_TASK_POLICY_LATENCY_QOS: u32 = 47;
pub const IMP_TASK_POLICY_THROUGH_QOS: u32 = 48;
pub const IMP_TASK_POLICY_WATCHERS_BG: u32 = 49;
pub const IMP_TASK_POLICY_SFI_MANAGED: u32 = 52;
pub const IMP_TASK_POLICY_ALL_SOCKETS_BG: u32 = 55;
pub const IMP_TASK_POLICY_BASE_LATENCY_AND_THROUGHPUT_QOS: u32 = 57;
pub const IMP_TASK_POLICY_OVERRIDE_LATENCY_AND_THROUGHPUT_QOS: u32 = 58;
pub const IMP_TASK_POLICY_PIDBIND_BG: u32 = 50;
pub const IMP_TASK_POLICY_QOS_OVERRIDE: u32 = 54;
pub const IMP_TASK_POLICY_QOS_AND_RELPRIO: u32 = 56;
pub const IMP_TASK_POLICY_QOS_WORKQ_OVERRIDE: u32 = 59;
pub const IMP_TASK_POLICY_QOS_PROMOTE: u32 = 60;
pub const IMP_TASK_POLICY_QOS_KEVENT_OVERRIDE: u32 = 61;
pub const IMP_TASK_POLICY_QOS_IPC_OVERRIDE: u32 = 61;
pub const IMP_TASK_POLICY_QOS_SERVICER_OVERRIDE: u32 = 62;
pub const IMP_TASK_POLICY_IOTIER_KEVENT_OVERRIDE: u32 = 63;
pub const IMP_TASK_POLICY_WI_DRIVEN: u32 = 64;
pub const IMP_HOLD: u32 = 2;
pub const IMP_DROP: u32 = 4;
pub const IMP_EXTERN: u32 = 8;
pub const IMP_BOOSTED: u32 = 1;
pub const IMP_UNBOOSTED: u32 = 2;
pub const IMP_MSG_SEND: u32 = 1;
pub const IMP_MSG_DELV: u32 = 2;
pub const IMP_UPDATE_TASK_CREATE: u32 = 1;
pub const IMP_USYNCH_ADD_OVERRIDE: u32 = 0;
pub const IMP_USYNCH_REMOVE_OVERRIDE: u32 = 1;
pub const IMP_DONOR_UPDATE_LIVE_DONOR_STATE: u32 = 0;
pub const IMP_DONOR_INIT_DONOR_STATE: u32 = 1;
pub const IMP_SYNC_IPC_QOS_APPLIED: u32 = 0;
pub const IMP_SYNC_IPC_QOS_REMOVED: u32 = 1;
pub const IMP_SYNC_IPC_QOS_OVERFLOW: u32 = 2;
pub const IMP_SYNC_IPC_QOS_UNDERFLOW: u32 = 3;
pub const TURNSTILE_HEAP_OPERATIONS: u32 = 16;
pub const TURNSTILE_PRIORITY_OPERATIONS: u32 = 32;
pub const TURNSTILE_FREELIST_OPERATIONS: u32 = 48;
pub const THREAD_ADDED_TO_TURNSTILE_WAITQ: u32 = 1;
pub const THREAD_REMOVED_FROM_TURNSTILE_WAITQ: u32 = 2;
pub const THREAD_MOVED_IN_TURNSTILE_WAITQ: u32 = 3;
pub const TURNSTILE_ADDED_TO_TURNSTILE_HEAP: u32 = 4;
pub const TURNSTILE_REMOVED_FROM_TURNSTILE_HEAP: u32 = 5;
pub const TURNSTILE_MOVED_IN_TURNSTILE_HEAP: u32 = 6;
pub const TURNSTILE_ADDED_TO_THREAD_HEAP: u32 = 7;
pub const TURNSTILE_REMOVED_FROM_THREAD_HEAP: u32 = 8;
pub const TURNSTILE_MOVED_IN_THREAD_HEAP: u32 = 9;
pub const TURNSTILE_UPDATE_STOPPED_BY_LIMIT: u32 = 10;
pub const THREAD_NOT_WAITING_ON_TURNSTILE: u32 = 11;
pub const TURNSTILE_PRIORITY_CHANGE: u32 = 1;
pub const THREAD_USER_PROMOTION_CHANGE: u32 = 2;
pub const TURNSTILE_PREPARE: u32 = 1;
pub const TURNSTILE_COMPLETE: u32 = 2;
pub const BANK_ACCOUNT_INFO: u32 = 16;
pub const BANK_TASK_INFO: u32 = 17;
pub const ATM_SUBAID_INFO: u32 = 16;
pub const ATM_GETVALUE_INFO: u32 = 32;
pub const ATM_UNREGISTER_INFO: u32 = 48;
pub const BANK_SETTLE_CPU_TIME: u32 = 1;
pub const BANK_SECURE_ORIGINATOR_CHANGED: u32 = 2;
pub const BANK_SETTLE_ENERGY: u32 = 3;
pub const ATM_MIN_CALLED: u32 = 1;
pub const ATM_LINK_LIST_TRIM: u32 = 2;
pub const ATM_VALUE_REPLACED: u32 = 1;
pub const ATM_VALUE_ADDED: u32 = 2;
pub const ATM_VALUE_UNREGISTERED: u32 = 1;
pub const ATM_VALUE_DIFF_MAILBOX: u32 = 2;
pub const DBG_DAEMON_COREDUET: u32 = 1;
pub const DBG_DAEMON_POWERD: u32 = 2;
pub const DBG_UMALLOC_EXTERNAL: u32 = 1;
pub const DBG_UMALLOC_INTERNAL: u32 = 2;
pub const LCID_PROC_SELF: u32 = 0;
pub const LCID_REMOVE: i32 = -1;
pub const LCID_CREATE: u32 = 0;
pub const KEV_CTL_SUBCLASS: u32 = 2;
pub const KEV_CTL_REGISTERED: u32 = 1;
pub const KEV_CTL_DEREGISTERED: u32 = 2;
pub const MAX_KCTL_NAME: u32 = 96;
pub const MT_FREE: u32 = 0;
pub const MT_DATA: u32 = 1;
pub const MT_HEADER: u32 = 2;
pub const MT_SOCKET: u32 = 3;
pub const MT_PCB: u32 = 4;
pub const MT_RTABLE: u32 = 5;
pub const MT_HTABLE: u32 = 6;
pub const MT_ATABLE: u32 = 7;
pub const MT_SONAME: u32 = 8;
pub const MT_SOOPTS: u32 = 10;
pub const MT_FTABLE: u32 = 11;
pub const MT_RIGHTS: u32 = 12;
pub const MT_IFADDR: u32 = 13;
pub const MT_CONTROL: u32 = 14;
pub const MT_OOBDATA: u32 = 15;
pub const MT_TAG: u32 = 16;
pub const MT_MAX: u32 = 32;
pub const MAX_MBUF_CNAME: u32 = 15;
pub const MCS_DISABLED: u32 = 0;
pub const MCS_ONLINE: u32 = 1;
pub const MCS_PURGING: u32 = 2;
pub const MCS_OFFLINE: u32 = 3;
pub const MAX_MSG_BSIZE: u32 = 1048576;
pub const MSG_MAGIC: u32 = 405601;
pub const _PATH_FORKSPECIFIER: &[u8; 14usize] = b"/..namedfork/\0";
pub const _PATH_DATANAME: &[u8; 5usize] = b"data\0";
pub const _PATH_RSRCNAME: &[u8; 5usize] = b"rsrc\0";
pub const _PATH_RSRCFORKSPEC: &[u8; 18usize] = b"/..namedfork/rsrc\0";
pub const PIPE_SIZE: u32 = 16384;
pub const PIPE_KVAMAX: u32 = 16777216;
pub const BIG_PIPE_SIZE: u32 = 65536;
pub const PIPE_MINDIRECT: u32 = 8192;
pub const PIPE_ASYNC: u32 = 4;
pub const PIPE_WANTR: u32 = 8;
pub const PIPE_WANTW: u32 = 16;
pub const PIPE_WANT: u32 = 32;
pub const PIPE_EOF: u32 = 128;
pub const PIPE_LOCKFL: u32 = 256;
pub const PIPE_LWANT: u32 = 512;
pub const PIPE_DIRECTW: u32 = 1024;
pub const PIPE_DIRECTOK: u32 = 2048;
pub const PIPE_DRAIN: u32 = 8192;
pub const PIPE_WSELECT: u32 = 16384;
pub const PIPE_DEAD: u32 = 32768;
pub const PROC_ALL_PIDS: u32 = 1;
pub const PROC_PGRP_ONLY: u32 = 2;
pub const PROC_TTY_ONLY: u32 = 3;
pub const PROC_UID_ONLY: u32 = 4;
pub const PROC_RUID_ONLY: u32 = 5;
pub const PROC_PPID_ONLY: u32 = 6;
pub const PROC_KDBG_ONLY: u32 = 7;
pub const PROC_FLAG_SYSTEM: u32 = 1;
pub const PROC_FLAG_TRACED: u32 = 2;
pub const PROC_FLAG_INEXIT: u32 = 4;
pub const PROC_FLAG_PPWAIT: u32 = 8;
pub const PROC_FLAG_LP64: u32 = 16;
pub const PROC_FLAG_SLEADER: u32 = 32;
pub const PROC_FLAG_CTTY: u32 = 64;
pub const PROC_FLAG_CONTROLT: u32 = 128;
pub const PROC_FLAG_THCWD: u32 = 256;
pub const PROC_FLAG_PC_THROTTLE: u32 = 512;
pub const PROC_FLAG_PC_SUSP: u32 = 1024;
pub const PROC_FLAG_PC_KILL: u32 = 1536;
pub const PROC_FLAG_PC_MASK: u32 = 1536;
pub const PROC_FLAG_PA_THROTTLE: u32 = 2048;
pub const PROC_FLAG_PA_SUSP: u32 = 4096;
pub const PROC_FLAG_PSUGID: u32 = 8192;
pub const PROC_FLAG_EXEC: u32 = 16384;
pub const PROC_REGION_SUBMAP: u32 = 1;
pub const PROC_REGION_SHARED: u32 = 2;
pub const WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT: u32 = 1;
pub const WQ_EXCEEDED_TOTAL_THREAD_LIMIT: u32 = 2;
pub const WQ_FLAGS_AVAILABLE: u32 = 4;
pub const PROC_FP_SHARED: u32 = 1;
pub const PROC_FP_CLEXEC: u32 = 2;
pub const PROC_FP_GUARDED: u32 = 4;
pub const PROC_FP_CLFORK: u32 = 8;
pub const PROC_FI_GUARD_CLOSE: u32 = 1;
pub const PROC_FI_GUARD_DUP: u32 = 2;
pub const PROC_FI_GUARD_SOCKET_IPC: u32 = 4;
pub const PROC_FI_GUARD_FILEPORT: u32 = 8;
pub const INI_IPV4: u32 = 1;
pub const INI_IPV6: u32 = 2;
pub const TSI_T_REXMT: u32 = 0;
pub const TSI_T_PERSIST: u32 = 1;
pub const TSI_T_KEEP: u32 = 2;
pub const TSI_T_2MSL: u32 = 3;
pub const TSI_T_NTIMERS: u32 = 4;
pub const TSI_S_CLOSED: u32 = 0;
pub const TSI_S_LISTEN: u32 = 1;
pub const TSI_S_SYN_SENT: u32 = 2;
pub const TSI_S_SYN_RECEIVED: u32 = 3;
pub const TSI_S_ESTABLISHED: u32 = 4;
pub const TSI_S__CLOSE_WAIT: u32 = 5;
pub const TSI_S_FIN_WAIT_1: u32 = 6;
pub const TSI_S_CLOSING: u32 = 7;
pub const TSI_S_LAST_ACK: u32 = 8;
pub const TSI_S_FIN_WAIT_2: u32 = 9;
pub const TSI_S_TIME_WAIT: u32 = 10;
pub const TSI_S_RESERVED: u32 = 11;
pub const SOI_S_NOFDREF: u32 = 1;
pub const SOI_S_ISCONNECTED: u32 = 2;
pub const SOI_S_ISCONNECTING: u32 = 4;
pub const SOI_S_ISDISCONNECTING: u32 = 8;
pub const SOI_S_CANTSENDMORE: u32 = 16;
pub const SOI_S_CANTRCVMORE: u32 = 32;
pub const SOI_S_RCVATMARK: u32 = 64;
pub const SOI_S_PRIV: u32 = 128;
pub const SOI_S_NBIO: u32 = 256;
pub const SOI_S_ASYNC: u32 = 512;
pub const SOI_S_INCOMP: u32 = 2048;
pub const SOI_S_COMP: u32 = 4096;
pub const SOI_S_ISDISCONNECTED: u32 = 8192;
pub const SOI_S_DRAINING: u32 = 16384;
pub const PROC_KQUEUE_SELECT: u32 = 1;
pub const PROC_KQUEUE_SLEEP: u32 = 2;
pub const PROC_KQUEUE_32: u32 = 8;
pub const PROC_KQUEUE_64: u32 = 16;
pub const PROC_KQUEUE_QOS: u32 = 32;
pub const PROX_FDTYPE_ATALK: u32 = 0;
pub const PROX_FDTYPE_VNODE: u32 = 1;
pub const PROX_FDTYPE_SOCKET: u32 = 2;
pub const PROX_FDTYPE_PSHM: u32 = 3;
pub const PROX_FDTYPE_PSEM: u32 = 4;
pub const PROX_FDTYPE_KQUEUE: u32 = 5;
pub const PROX_FDTYPE_PIPE: u32 = 6;
pub const PROX_FDTYPE_FSEVENTS: u32 = 7;
pub const PROX_FDTYPE_NETPOLICY: u32 = 9;
pub const PROX_FDTYPE_CHANNEL: u32 = 10;
pub const PROX_FDTYPE_NEXUS: u32 = 11;
pub const PROC_CHANNEL_TYPE_USER_PIPE: u32 = 0;
pub const PROC_CHANNEL_TYPE_KERNEL_PIPE: u32 = 1;
pub const PROC_CHANNEL_TYPE_NET_IF: u32 = 2;
pub const PROC_CHANNEL_TYPE_FLOW_SWITCH: u32 = 3;
pub const PROC_CHANNEL_FLAGS_MONITOR_TX: u32 = 1;
pub const PROC_CHANNEL_FLAGS_MONITOR_RX: u32 = 2;
pub const PROC_CHANNEL_FLAGS_MONITOR_NO_COPY: u32 = 4;
pub const PROC_CHANNEL_FLAGS_EXCLUSIVE: u32 = 16;
pub const PROC_CHANNEL_FLAGS_USER_PACKET_POOL: u32 = 32;
pub const PROC_CHANNEL_FLAGS_DEFUNCT_OK: u32 = 64;
pub const PROC_CHANNEL_FLAGS_LOW_LATENCY: u32 = 128;
pub const PROC_CHANNEL_FLAGS_MONITOR: u32 = 3;
pub const PROC_PIDLISTFDS: u32 = 1;
pub const PROC_PIDTASKALLINFO: u32 = 2;
pub const PROC_PIDTBSDINFO: u32 = 3;
pub const PROC_PIDTASKINFO: u32 = 4;
pub const PROC_PIDTHREADINFO: u32 = 5;
pub const PROC_PIDLISTTHREADS: u32 = 6;
pub const PROC_PIDREGIONINFO: u32 = 7;
pub const PROC_PIDREGIONPATHINFO: u32 = 8;
pub const PROC_PIDVNODEPATHINFO: u32 = 9;
pub const PROC_PIDTHREADPATHINFO: u32 = 10;
pub const PROC_PIDPATHINFO: u32 = 11;
pub const PROC_PIDPATHINFO_SIZE: u32 = 1024;
pub const PROC_PIDPATHINFO_MAXSIZE: u32 = 4096;
pub const PROC_PIDWORKQUEUEINFO: u32 = 12;
pub const PROC_PIDT_SHORTBSDINFO: u32 = 13;
pub const PROC_PIDLISTFILEPORTS: u32 = 14;
pub const PROC_PIDTHREADID64INFO: u32 = 15;
pub const PROC_PID_RUSAGE: u32 = 16;
pub const PROC_PID_RUSAGE_SIZE: u32 = 0;
pub const PROC_PIDFDVNODEINFO: u32 = 1;
pub const PROC_PIDFDVNODEPATHINFO: u32 = 2;
pub const PROC_PIDFDSOCKETINFO: u32 = 3;
pub const PROC_PIDFDPSEMINFO: u32 = 4;
pub const PROC_PIDFDPSHMINFO: u32 = 5;
pub const PROC_PIDFDPIPEINFO: u32 = 6;
pub const PROC_PIDFDKQUEUEINFO: u32 = 7;
pub const PROC_PIDFDATALKINFO: u32 = 8;
pub const PROC_PIDFDCHANNELINFO: u32 = 10;
pub const PROC_PIDFILEPORTVNODEPATHINFO: u32 = 2;
pub const PROC_PIDFILEPORTSOCKETINFO: u32 = 3;
pub const PROC_PIDFILEPORTPSHMINFO: u32 = 5;
pub const PROC_PIDFILEPORTPIPEINFO: u32 = 6;
pub const PROC_SELFSET_PCONTROL: u32 = 1;
pub const PROC_SELFSET_THREADNAME: u32 = 2;
pub const PROC_SELFSET_THREADNAME_SIZE: u32 = 63;
pub const PROC_SELFSET_VMRSRCOWNER: u32 = 3;
pub const PROC_SELFSET_DELAYIDLESLEEP: u32 = 4;
pub const PROC_DIRTYCONTROL_TRACK: u32 = 1;
pub const PROC_DIRTYCONTROL_SET: u32 = 2;
pub const PROC_DIRTYCONTROL_GET: u32 = 3;
pub const PROC_DIRTYCONTROL_CLEAR: u32 = 4;
pub const PROC_DIRTY_TRACK: u32 = 1;
pub const PROC_DIRTY_ALLOW_IDLE_EXIT: u32 = 2;
pub const PROC_DIRTY_DEFER: u32 = 4;
pub const PROC_DIRTY_LAUNCH_IN_PROGRESS: u32 = 8;
pub const PROC_DIRTY_DEFER_ALWAYS: u32 = 16;
pub const PROC_DIRTY_TRACKED: u32 = 1;
pub const PROC_DIRTY_ALLOWS_IDLE_EXIT: u32 = 2;
pub const PROC_DIRTY_IS_DIRTY: u32 = 4;
pub const PROC_DIRTY_LAUNCH_IS_IN_PROGRESS: u32 = 8;
pub const PROC_UDATA_INFO_GET: u32 = 1;
pub const PROC_UDATA_INFO_SET: u32 = 2;
pub const MAX_IQ_TIME: u32 = 604800;
pub const MAX_DQ_TIME: u32 = 604800;
pub const MAXQUOTAS: u32 = 2;
pub const USRQUOTA: u32 = 0;
pub const GRPQUOTA: u32 = 1;
pub const QUOTAFILENAME: &[u8; 7usize] = b".quota\0";
pub const QUOTAOPSNAME: &[u8; 11usize] = b".quota.ops\0";
pub const QUOTAGROUP: &[u8; 9usize] = b"operator\0";
pub const SUBCMDMASK: u32 = 255;
pub const SUBCMDSHIFT: u32 = 8;
pub const Q_QUOTAON: u32 = 256;
pub const Q_QUOTAOFF: u32 = 512;
pub const Q_GETQUOTA: u32 = 768;
pub const Q_SETQUOTA: u32 = 1024;
pub const Q_SETUSE: u32 = 1280;
pub const Q_SYNC: u32 = 1536;
pub const Q_QUOTASTAT: u32 = 1792;
pub const QF_VERSION: u32 = 1;
pub const QF_STRING_TAG: &[u8; 16usize] = b"QUOTA HASH FILE\0";
pub const QF_USERS_PER_GB: u32 = 256;
pub const QF_MIN_USERS: u32 = 2048;
pub const QF_MAX_USERS: u32 = 2097152;
pub const QF_GROUPS_PER_GB: u32 = 32;
pub const QF_MIN_GROUPS: u32 = 2048;
pub const QF_MAX_GROUPS: u32 = 262144;
pub const RB_DIR_LEFT: u32 = 0;
pub const RB_DIR_RIGHT: u32 = 1;
pub const RB_AUTOBOOT: u32 = 0;
pub const RB_ASKNAME: u32 = 1;
pub const RB_SINGLE: u32 = 2;
pub const RB_NOSYNC: u32 = 4;
pub const RB_HALT: u32 = 8;
pub const RB_INITNAME: u32 = 16;
pub const RB_DFLTROOT: u32 = 32;
pub const RB_ALTBOOT: u32 = 64;
pub const RB_UNIPROC: u32 = 128;
pub const RB_SAFEBOOT: u32 = 256;
pub const RB_UPSDELAY: u32 = 512;
pub const RB_QUICK: u32 = 1024;
pub const RB_PANIC: u32 = 2048;
pub const RB_PANIC_ZPRINT: u32 = 4096;
pub const RB_PANIC_FORCERESET: u32 = 8192;
pub const B_ADAPTORSHIFT: u32 = 24;
pub const B_ADAPTORMASK: u32 = 15;
pub const B_CONTROLLERSHIFT: u32 = 20;
pub const B_CONTROLLERMASK: u32 = 15;
pub const B_UNITSHIFT: u32 = 16;
pub const B_UNITMASK: u32 = 255;
pub const B_PARTITIONSHIFT: u32 = 8;
pub const B_PARTITIONMASK: u32 = 255;
pub const B_TYPESHIFT: u32 = 0;
pub const B_TYPEMASK: u32 = 255;
pub const B_MAGICMASK: u32 = 4026531840;
pub const B_DEVMAGIC: u32 = 2684354560;
pub const SBUF_FIXEDLEN: u32 = 0;
pub const SBUF_AUTOEXTEND: u32 = 1;
pub const SBUF_USRFLAGMSK: u32 = 65535;
pub const SBUF_DYNAMIC: u32 = 65536;
pub const SBUF_FINISHED: u32 = 131072;
pub const SBUF_OVERFLOWED: u32 = 262144;
pub const SBUF_DYNSTRUCT: u32 = 524288;
pub const SYS_syscall: u32 = 0;
pub const SYS_exit: u32 = 1;
pub const SYS_fork: u32 = 2;
pub const SYS_read: u32 = 3;
pub const SYS_write: u32 = 4;
pub const SYS_open: u32 = 5;
pub const SYS_close: u32 = 6;
pub const SYS_wait4: u32 = 7;
pub const SYS_link: u32 = 9;
pub const SYS_unlink: u32 = 10;
pub const SYS_chdir: u32 = 12;
pub const SYS_fchdir: u32 = 13;
pub const SYS_mknod: u32 = 14;
pub const SYS_chmod: u32 = 15;
pub const SYS_chown: u32 = 16;
pub const SYS_getfsstat: u32 = 18;
pub const SYS_getpid: u32 = 20;
pub const SYS_setuid: u32 = 23;
pub const SYS_getuid: u32 = 24;
pub const SYS_geteuid: u32 = 25;
pub const SYS_ptrace: u32 = 26;
pub const SYS_recvmsg: u32 = 27;
pub const SYS_sendmsg: u32 = 28;
pub const SYS_recvfrom: u32 = 29;
pub const SYS_accept: u32 = 30;
pub const SYS_getpeername: u32 = 31;
pub const SYS_getsockname: u32 = 32;
pub const SYS_access: u32 = 33;
pub const SYS_chflags: u32 = 34;
pub const SYS_fchflags: u32 = 35;
pub const SYS_sync: u32 = 36;
pub const SYS_kill: u32 = 37;
pub const SYS_getppid: u32 = 39;
pub const SYS_dup: u32 = 41;
pub const SYS_pipe: u32 = 42;
pub const SYS_getegid: u32 = 43;
pub const SYS_sigaction: u32 = 46;
pub const SYS_getgid: u32 = 47;
pub const SYS_sigprocmask: u32 = 48;
pub const SYS_getlogin: u32 = 49;
pub const SYS_setlogin: u32 = 50;
pub const SYS_acct: u32 = 51;
pub const SYS_sigpending: u32 = 52;
pub const SYS_sigaltstack: u32 = 53;
pub const SYS_ioctl: u32 = 54;
pub const SYS_reboot: u32 = 55;
pub const SYS_revoke: u32 = 56;
pub const SYS_symlink: u32 = 57;
pub const SYS_readlink: u32 = 58;
pub const SYS_execve: u32 = 59;
pub const SYS_umask: u32 = 60;
pub const SYS_chroot: u32 = 61;
pub const SYS_msync: u32 = 65;
pub const SYS_vfork: u32 = 66;
pub const SYS_munmap: u32 = 73;
pub const SYS_mprotect: u32 = 74;
pub const SYS_madvise: u32 = 75;
pub const SYS_mincore: u32 = 78;
pub const SYS_getgroups: u32 = 79;
pub const SYS_setgroups: u32 = 80;
pub const SYS_getpgrp: u32 = 81;
pub const SYS_setpgid: u32 = 82;
pub const SYS_setitimer: u32 = 83;
pub const SYS_swapon: u32 = 85;
pub const SYS_getitimer: u32 = 86;
pub const SYS_getdtablesize: u32 = 89;
pub const SYS_dup2: u32 = 90;
pub const SYS_fcntl: u32 = 92;
pub const SYS_select: u32 = 93;
pub const SYS_fsync: u32 = 95;
pub const SYS_setpriority: u32 = 96;
pub const SYS_socket: u32 = 97;
pub const SYS_connect: u32 = 98;
pub const SYS_getpriority: u32 = 100;
pub const SYS_bind: u32 = 104;
pub const SYS_setsockopt: u32 = 105;
pub const SYS_listen: u32 = 106;
pub const SYS_sigsuspend: u32 = 111;
pub const SYS_gettimeofday: u32 = 116;
pub const SYS_getrusage: u32 = 117;
pub const SYS_getsockopt: u32 = 118;
pub const SYS_readv: u32 = 120;
pub const SYS_writev: u32 = 121;
pub const SYS_settimeofday: u32 = 122;
pub const SYS_fchown: u32 = 123;
pub const SYS_fchmod: u32 = 124;
pub const SYS_setreuid: u32 = 126;
pub const SYS_setregid: u32 = 127;
pub const SYS_rename: u32 = 128;
pub const SYS_flock: u32 = 131;
pub const SYS_mkfifo: u32 = 132;
pub const SYS_sendto: u32 = 133;
pub const SYS_shutdown: u32 = 134;
pub const SYS_socketpair: u32 = 135;
pub const SYS_mkdir: u32 = 136;
pub const SYS_rmdir: u32 = 137;
pub const SYS_utimes: u32 = 138;
pub const SYS_futimes: u32 = 139;
pub const SYS_adjtime: u32 = 140;
pub const SYS_gethostuuid: u32 = 142;
pub const SYS_setsid: u32 = 147;
pub const SYS_getpgid: u32 = 151;
pub const SYS_setprivexec: u32 = 152;
pub const SYS_pread: u32 = 153;
pub const SYS_pwrite: u32 = 154;
pub const SYS_nfssvc: u32 = 155;
pub const SYS_statfs: u32 = 157;
pub const SYS_fstatfs: u32 = 158;
pub const SYS_unmount: u32 = 159;
pub const SYS_getfh: u32 = 161;
pub const SYS_quotactl: u32 = 165;
pub const SYS_mount: u32 = 167;
pub const SYS_csops: u32 = 169;
pub const SYS_csops_audittoken: u32 = 170;
pub const SYS_waitid: u32 = 173;
pub const SYS_kdebug_typefilter: u32 = 177;
pub const SYS_kdebug_trace_string: u32 = 178;
pub const SYS_kdebug_trace64: u32 = 179;
pub const SYS_kdebug_trace: u32 = 180;
pub const SYS_setgid: u32 = 181;
pub const SYS_setegid: u32 = 182;
pub const SYS_seteuid: u32 = 183;
pub const SYS_sigreturn: u32 = 184;
pub const SYS_thread_selfcounts: u32 = 186;
pub const SYS_fdatasync: u32 = 187;
pub const SYS_stat: u32 = 188;
pub const SYS_fstat: u32 = 189;
pub const SYS_lstat: u32 = 190;
pub const SYS_pathconf: u32 = 191;
pub const SYS_fpathconf: u32 = 192;
pub const SYS_getrlimit: u32 = 194;
pub const SYS_setrlimit: u32 = 195;
pub const SYS_getdirentries: u32 = 196;
pub const SYS_mmap: u32 = 197;
pub const SYS_lseek: u32 = 199;
pub const SYS_truncate: u32 = 200;
pub const SYS_ftruncate: u32 = 201;
pub const SYS_sysctl: u32 = 202;
pub const SYS_mlock: u32 = 203;
pub const SYS_munlock: u32 = 204;
pub const SYS_undelete: u32 = 205;
pub const SYS_open_dprotected_np: u32 = 216;
pub const SYS_fsgetpath_ext: u32 = 217;
pub const SYS_openat_dprotected_np: u32 = 218;
pub const SYS_getattrlist: u32 = 220;
pub const SYS_setattrlist: u32 = 221;
pub const SYS_getdirentriesattr: u32 = 222;
pub const SYS_exchangedata: u32 = 223;
pub const SYS_searchfs: u32 = 225;
pub const SYS_delete: u32 = 226;
pub const SYS_copyfile: u32 = 227;
pub const SYS_fgetattrlist: u32 = 228;
pub const SYS_fsetattrlist: u32 = 229;
pub const SYS_poll: u32 = 230;
pub const SYS_getxattr: u32 = 234;
pub const SYS_fgetxattr: u32 = 235;
pub const SYS_setxattr: u32 = 236;
pub const SYS_fsetxattr: u32 = 237;
pub const SYS_removexattr: u32 = 238;
pub const SYS_fremovexattr: u32 = 239;
pub const SYS_listxattr: u32 = 240;
pub const SYS_flistxattr: u32 = 241;
pub const SYS_fsctl: u32 = 242;
pub const SYS_initgroups: u32 = 243;
pub const SYS_posix_spawn: u32 = 244;
pub const SYS_ffsctl: u32 = 245;
pub const SYS_fhopen: u32 = 248;
pub const SYS_minherit: u32 = 250;
pub const SYS_semsys: u32 = 251;
pub const SYS_msgsys: u32 = 252;
pub const SYS_shmsys: u32 = 253;
pub const SYS_semctl: u32 = 254;
pub const SYS_semget: u32 = 255;
pub const SYS_semop: u32 = 256;
pub const SYS_msgctl: u32 = 258;
pub const SYS_msgget: u32 = 259;
pub const SYS_msgsnd: u32 = 260;
pub const SYS_msgrcv: u32 = 261;
pub const SYS_shmat: u32 = 262;
pub const SYS_shmctl: u32 = 263;
pub const SYS_shmdt: u32 = 264;
pub const SYS_shmget: u32 = 265;
pub const SYS_shm_open: u32 = 266;
pub const SYS_shm_unlink: u32 = 267;
pub const SYS_sem_open: u32 = 268;
pub const SYS_sem_close: u32 = 269;
pub const SYS_sem_unlink: u32 = 270;
pub const SYS_sem_wait: u32 = 271;
pub const SYS_sem_trywait: u32 = 272;
pub const SYS_sem_post: u32 = 273;
pub const SYS_sysctlbyname: u32 = 274;
pub const SYS_open_extended: u32 = 277;
pub const SYS_umask_extended: u32 = 278;
pub const SYS_stat_extended: u32 = 279;
pub const SYS_lstat_extended: u32 = 280;
pub const SYS_fstat_extended: u32 = 281;
pub const SYS_chmod_extended: u32 = 282;
pub const SYS_fchmod_extended: u32 = 283;
pub const SYS_access_extended: u32 = 284;
pub const SYS_settid: u32 = 285;
pub const SYS_gettid: u32 = 286;
pub const SYS_setsgroups: u32 = 287;
pub const SYS_getsgroups: u32 = 288;
pub const SYS_setwgroups: u32 = 289;
pub const SYS_getwgroups: u32 = 290;
pub const SYS_mkfifo_extended: u32 = 291;
pub const SYS_mkdir_extended: u32 = 292;
pub const SYS_identitysvc: u32 = 293;
pub const SYS_shared_region_check_np: u32 = 294;
pub const SYS_vm_pressure_monitor: u32 = 296;
pub const SYS_psynch_rw_longrdlock: u32 = 297;
pub const SYS_psynch_rw_yieldwrlock: u32 = 298;
pub const SYS_psynch_rw_downgrade: u32 = 299;
pub const SYS_psynch_rw_upgrade: u32 = 300;
pub const SYS_psynch_mutexwait: u32 = 301;
pub const SYS_psynch_mutexdrop: u32 = 302;
pub const SYS_psynch_cvbroad: u32 = 303;
pub const SYS_psynch_cvsignal: u32 = 304;
pub const SYS_psynch_cvwait: u32 = 305;
pub const SYS_psynch_rw_rdlock: u32 = 306;
pub const SYS_psynch_rw_wrlock: u32 = 307;
pub const SYS_psynch_rw_unlock: u32 = 308;
pub const SYS_psynch_rw_unlock2: u32 = 309;
pub const SYS_getsid: u32 = 310;
pub const SYS_settid_with_pid: u32 = 311;
pub const SYS_psynch_cvclrprepost: u32 = 312;
pub const SYS_aio_fsync: u32 = 313;
pub const SYS_aio_return: u32 = 314;
pub const SYS_aio_suspend: u32 = 315;
pub const SYS_aio_cancel: u32 = 316;
pub const SYS_aio_error: u32 = 317;
pub const SYS_aio_read: u32 = 318;
pub const SYS_aio_write: u32 = 319;
pub const SYS_lio_listio: u32 = 320;
pub const SYS_iopolicysys: u32 = 322;
pub const SYS_process_policy: u32 = 323;
pub const SYS_mlockall: u32 = 324;
pub const SYS_munlockall: u32 = 325;
pub const SYS_issetugid: u32 = 327;
pub const SYS___pthread_kill: u32 = 328;
pub const SYS___pthread_sigmask: u32 = 329;
pub const SYS___sigwait: u32 = 330;
pub const SYS___disable_threadsignal: u32 = 331;
pub const SYS___pthread_markcancel: u32 = 332;
pub const SYS___pthread_canceled: u32 = 333;
pub const SYS___semwait_signal: u32 = 334;
pub const SYS_proc_info: u32 = 336;
pub const SYS_sendfile: u32 = 337;
pub const SYS_stat64: u32 = 338;
pub const SYS_fstat64: u32 = 339;
pub const SYS_lstat64: u32 = 340;
pub const SYS_stat64_extended: u32 = 341;
pub const SYS_lstat64_extended: u32 = 342;
pub const SYS_fstat64_extended: u32 = 343;
pub const SYS_getdirentries64: u32 = 344;
pub const SYS_statfs64: u32 = 345;
pub const SYS_fstatfs64: u32 = 346;
pub const SYS_getfsstat64: u32 = 347;
pub const SYS___pthread_chdir: u32 = 348;
pub const SYS___pthread_fchdir: u32 = 349;
pub const SYS_audit: u32 = 350;
pub const SYS_auditon: u32 = 351;
pub const SYS_getauid: u32 = 353;
pub const SYS_setauid: u32 = 354;
pub const SYS_getaudit_addr: u32 = 357;
pub const SYS_setaudit_addr: u32 = 358;
pub const SYS_auditctl: u32 = 359;
pub const SYS_bsdthread_create: u32 = 360;
pub const SYS_bsdthread_terminate: u32 = 361;
pub const SYS_kqueue: u32 = 362;
pub const SYS_kevent: u32 = 363;
pub const SYS_lchown: u32 = 364;
pub const SYS_bsdthread_register: u32 = 366;
pub const SYS_workq_open: u32 = 367;
pub const SYS_workq_kernreturn: u32 = 368;
pub const SYS_kevent64: u32 = 369;
pub const SYS_thread_selfid: u32 = 372;
pub const SYS_ledger: u32 = 373;
pub const SYS_kevent_qos: u32 = 374;
pub const SYS_kevent_id: u32 = 375;
pub const SYS___mac_execve: u32 = 380;
pub const SYS___mac_syscall: u32 = 381;
pub const SYS___mac_get_file: u32 = 382;
pub const SYS___mac_set_file: u32 = 383;
pub const SYS___mac_get_link: u32 = 384;
pub const SYS___mac_set_link: u32 = 385;
pub const SYS___mac_get_proc: u32 = 386;
pub const SYS___mac_set_proc: u32 = 387;
pub const SYS___mac_get_fd: u32 = 388;
pub const SYS___mac_set_fd: u32 = 389;
pub const SYS___mac_get_pid: u32 = 390;
pub const SYS_pselect: u32 = 394;
pub const SYS_pselect_nocancel: u32 = 395;
pub const SYS_read_nocancel: u32 = 396;
pub const SYS_write_nocancel: u32 = 397;
pub const SYS_open_nocancel: u32 = 398;
pub const SYS_close_nocancel: u32 = 399;
pub const SYS_wait4_nocancel: u32 = 400;
pub const SYS_recvmsg_nocancel: u32 = 401;
pub const SYS_sendmsg_nocancel: u32 = 402;
pub const SYS_recvfrom_nocancel: u32 = 403;
pub const SYS_accept_nocancel: u32 = 404;
pub const SYS_msync_nocancel: u32 = 405;
pub const SYS_fcntl_nocancel: u32 = 406;
pub const SYS_select_nocancel: u32 = 407;
pub const SYS_fsync_nocancel: u32 = 408;
pub const SYS_connect_nocancel: u32 = 409;
pub const SYS_sigsuspend_nocancel: u32 = 410;
pub const SYS_readv_nocancel: u32 = 411;
pub const SYS_writev_nocancel: u32 = 412;
pub const SYS_sendto_nocancel: u32 = 413;
pub const SYS_pread_nocancel: u32 = 414;
pub const SYS_pwrite_nocancel: u32 = 415;
pub const SYS_waitid_nocancel: u32 = 416;
pub const SYS_poll_nocancel: u32 = 417;
pub const SYS_msgsnd_nocancel: u32 = 418;
pub const SYS_msgrcv_nocancel: u32 = 419;
pub const SYS_sem_wait_nocancel: u32 = 420;
pub const SYS_aio_suspend_nocancel: u32 = 421;
pub const SYS___sigwait_nocancel: u32 = 422;
pub const SYS___semwait_signal_nocancel: u32 = 423;
pub const SYS___mac_mount: u32 = 424;
pub const SYS___mac_get_mount: u32 = 425;
pub const SYS___mac_getfsstat: u32 = 426;
pub const SYS_fsgetpath: u32 = 427;
pub const SYS_audit_session_self: u32 = 428;
pub const SYS_audit_session_join: u32 = 429;
pub const SYS_fileport_makeport: u32 = 430;
pub const SYS_fileport_makefd: u32 = 431;
pub const SYS_audit_session_port: u32 = 432;
pub const SYS_pid_suspend: u32 = 433;
pub const SYS_pid_resume: u32 = 434;
pub const SYS_pid_hibernate: u32 = 435;
pub const SYS_pid_shutdown_sockets: u32 = 436;
pub const SYS_kas_info: u32 = 439;
pub const SYS_memorystatus_control: u32 = 440;
pub const SYS_guarded_open_np: u32 = 441;
pub const SYS_guarded_close_np: u32 = 442;
pub const SYS_guarded_kqueue_np: u32 = 443;
pub const SYS_change_fdguard_np: u32 = 444;
pub const SYS_usrctl: u32 = 445;
pub const SYS_proc_rlimit_control: u32 = 446;
pub const SYS_connectx: u32 = 447;
pub const SYS_disconnectx: u32 = 448;
pub const SYS_peeloff: u32 = 449;
pub const SYS_socket_delegate: u32 = 450;
pub const SYS_telemetry: u32 = 451;
pub const SYS_proc_uuid_policy: u32 = 452;
pub const SYS_memorystatus_get_level: u32 = 453;
pub const SYS_system_override: u32 = 454;
pub const SYS_vfs_purge: u32 = 455;
pub const SYS_sfi_ctl: u32 = 456;
pub const SYS_sfi_pidctl: u32 = 457;
pub const SYS_coalition: u32 = 458;
pub const SYS_coalition_info: u32 = 459;
pub const SYS_necp_match_policy: u32 = 460;
pub const SYS_getattrlistbulk: u32 = 461;
pub const SYS_clonefileat: u32 = 462;
pub const SYS_openat: u32 = 463;
pub const SYS_openat_nocancel: u32 = 464;
pub const SYS_renameat: u32 = 465;
pub const SYS_faccessat: u32 = 466;
pub const SYS_fchmodat: u32 = 467;
pub const SYS_fchownat: u32 = 468;
pub const SYS_fstatat: u32 = 469;
pub const SYS_fstatat64: u32 = 470;
pub const SYS_linkat: u32 = 471;
pub const SYS_unlinkat: u32 = 472;
pub const SYS_readlinkat: u32 = 473;
pub const SYS_symlinkat: u32 = 474;
pub const SYS_mkdirat: u32 = 475;
pub const SYS_getattrlistat: u32 = 476;
pub const SYS_proc_trace_log: u32 = 477;
pub const SYS_bsdthread_ctl: u32 = 478;
pub const SYS_openbyid_np: u32 = 479;
pub const SYS_recvmsg_x: u32 = 480;
pub const SYS_sendmsg_x: u32 = 481;
pub const SYS_thread_selfusage: u32 = 482;
pub const SYS_csrctl: u32 = 483;
pub const SYS_guarded_open_dprotected_np: u32 = 484;
pub const SYS_guarded_write_np: u32 = 485;
pub const SYS_guarded_pwrite_np: u32 = 486;
pub const SYS_guarded_writev_np: u32 = 487;
pub const SYS_renameatx_np: u32 = 488;
pub const SYS_mremap_encrypted: u32 = 489;
pub const SYS_netagent_trigger: u32 = 490;
pub const SYS_stack_snapshot_with_config: u32 = 491;
pub const SYS_microstackshot: u32 = 492;
pub const SYS_grab_pgo_data: u32 = 493;
pub const SYS_persona: u32 = 494;
pub const SYS_mach_eventlink_signal: u32 = 496;
pub const SYS_mach_eventlink_wait_until: u32 = 497;
pub const SYS_mach_eventlink_signal_wait_until: u32 = 498;
pub const SYS_work_interval_ctl: u32 = 499;
pub const SYS_getentropy: u32 = 500;
pub const SYS_necp_open: u32 = 501;
pub const SYS_necp_client_action: u32 = 502;
pub const SYS___nexus_open: u32 = 503;
pub const SYS___nexus_register: u32 = 504;
pub const SYS___nexus_deregister: u32 = 505;
pub const SYS___nexus_create: u32 = 506;
pub const SYS___nexus_destroy: u32 = 507;
pub const SYS___nexus_get_opt: u32 = 508;
pub const SYS___nexus_set_opt: u32 = 509;
pub const SYS___channel_open: u32 = 510;
pub const SYS___channel_get_info: u32 = 511;
pub const SYS___channel_sync: u32 = 512;
pub const SYS___channel_get_opt: u32 = 513;
pub const SYS___channel_set_opt: u32 = 514;
pub const SYS_ulock_wait: u32 = 515;
pub const SYS_ulock_wake: u32 = 516;
pub const SYS_fclonefileat: u32 = 517;
pub const SYS_fs_snapshot: u32 = 518;
pub const SYS_register_uexc_handler: u32 = 519;
pub const SYS_terminate_with_payload: u32 = 520;
pub const SYS_abort_with_payload: u32 = 521;
pub const SYS_necp_session_open: u32 = 522;
pub const SYS_necp_session_action: u32 = 523;
pub const SYS_setattrlistat: u32 = 524;
pub const SYS_net_qos_guideline: u32 = 525;
pub const SYS_fmount: u32 = 526;
pub const SYS_ntp_adjtime: u32 = 527;
pub const SYS_ntp_gettime: u32 = 528;
pub const SYS_os_fault_with_payload: u32 = 529;
pub const SYS_kqueue_workloop_ctl: u32 = 530;
pub const SYS___mach_bridge_remote_time: u32 = 531;
pub const SYS_coalition_ledger: u32 = 532;
pub const SYS_log_data: u32 = 533;
pub const SYS_memorystatus_available_memory: u32 = 534;
pub const SYS_objc_bp_assist_cfg_np: u32 = 535;
pub const SYS_shared_region_map_and_slide_2_np: u32 = 536;
pub const SYS_pivot_root: u32 = 537;
pub const SYS_task_inspect_for_pid: u32 = 538;
pub const SYS_task_read_for_pid: u32 = 539;
pub const SYS_preadv: u32 = 540;
pub const SYS_pwritev: u32 = 541;
pub const SYS_preadv_nocancel: u32 = 542;
pub const SYS_pwritev_nocancel: u32 = 543;
pub const SYS_ulock_wait2: u32 = 544;
pub const SYS_proc_info_extended_id: u32 = 545;
pub const SYS_tracker_action: u32 = 546;
pub const SYS_debug_syscall_reject: u32 = 547;
pub const SYS_debug_syscall_reject_config: u32 = 548;
pub const SYS_graftdmg: u32 = 549;
pub const SYS_map_with_linking_np: u32 = 550;
pub const SYS_freadlink: u32 = 551;
pub const SYS_record_system_event: u32 = 552;
pub const SYS_mkfifoat: u32 = 553;
pub const SYS_mknodat: u32 = 554;
pub const SYS_ungraftdmg: u32 = 555;
pub const SYS_MAXSYSCALL: u32 = 556;
pub const SYS_invalid: u32 = 63;
pub const TR_BREADHIT: u32 = 0;
pub const TR_BREADMISS: u32 = 1;
pub const TR_BWRITE: u32 = 2;
pub const TR_BREADHITRA: u32 = 3;
pub const TR_BREADMISSRA: u32 = 4;
pub const TR_XFODMISS: u32 = 5;
pub const TR_XFODHIT: u32 = 6;
pub const TR_BRELSE: u32 = 7;
pub const TR_BREALLOC: u32 = 8;
pub const TR_MALL: u32 = 10;
pub const TR_INTRANS: u32 = 20;
pub const TR_EINTRANS: u32 = 21;
pub const TR_FRECLAIM: u32 = 22;
pub const TR_RECLAIM: u32 = 23;
pub const TR_XSFREC: u32 = 24;
pub const TR_XIFREC: u32 = 25;
pub const TR_WAITMEM: u32 = 26;
pub const TR_EWAITMEM: u32 = 27;
pub const TR_ZFOD: u32 = 28;
pub const TR_EXFOD: u32 = 29;
pub const TR_VRFOD: u32 = 30;
pub const TR_CACHEFOD: u32 = 31;
pub const TR_SWAPIN: u32 = 32;
pub const TR_PGINDONE: u32 = 33;
pub const TR_SWAPIO: u32 = 34;
pub const TR_VADVISE: u32 = 40;
pub const TR_STAMP: u32 = 45;
pub const TR_NFLAGS: u32 = 100;
pub const TRCSIZ: u32 = 4096;
pub const VTRACE: u32 = 115;
pub const VTR_DISABLE: u32 = 0;
pub const VTR_ENABLE: u32 = 1;
pub const VTR_VALUE: u32 = 2;
pub const VTR_UALARM: u32 = 3;
pub const VTR_STAMP: u32 = 4;
pub const TS_SO_OLOWAT: u32 = 1;
pub const TS_ASYNC: u32 = 2;
pub const TS_BUSY: u32 = 4;
pub const TS_CARR_ON: u32 = 8;
pub const TS_FLUSH: u32 = 16;
pub const TS_ISOPEN: u32 = 32;
pub const TS_TBLOCK: u32 = 64;
pub const TS_TIMEOUT: u32 = 128;
pub const TS_TTSTOP: u32 = 256;
pub const TS_XCLUDE: u32 = 1024;
pub const TS_BKSL: u32 = 2048;
pub const TS_CNTTB: u32 = 4096;
pub const TS_ERASE: u32 = 8192;
pub const TS_LNCH: u32 = 16384;
pub const TS_TYPEN: u32 = 32768;
pub const TS_LOCAL: u32 = 63488;
pub const TS_CAN_BYPASS_L_RINT: u32 = 65536;
pub const TS_CONNECTED: u32 = 131072;
pub const TS_SNOOP: u32 = 262144;
pub const TS_SO_OCOMPLETE: u32 = 524288;
pub const TS_ZOMBIE: u32 = 1048576;
pub const TS_CAR_OFLOW: u32 = 2097152;
pub const TS_IOCTL_NOT_OK: u32 = 16777216;
pub const TS_REVOKE: u32 = 33554432;
pub const ORDINARY: u32 = 0;
pub const CONTROL: u32 = 1;
pub const BACKSPACE: u32 = 2;
pub const NEWLINE: u32 = 3;
pub const TAB: u32 = 4;
pub const VTAB: u32 = 5;
pub const RETURN: u32 = 6;
pub const DMSET: u32 = 0;
pub const DMBIS: u32 = 1;
pub const DMBIC: u32 = 2;
pub const DMGET: u32 = 3;
pub const TTY_CHARMASK: u32 = 255;
pub const TTY_QUOTE: u32 = 256;
pub const TTY_ERRORMASK: u32 = 4278190080;
pub const TTY_FE: u32 = 16777216;
pub const TTY_PE: u32 = 33554432;
pub const TTY_OE: u32 = 67108864;
pub const TTY_BI: u32 = 134217728;
pub const VPRINT: u32 = 64;
pub const VPLOT: u32 = 128;
pub const VPRINTPLOT: u32 = 256;
pub const HAVE_VT_LOCKERFS: u32 = 1;
pub const VNODE_READ: u32 = 1;
pub const VNODE_WRITE: u32 = 2;
pub const VNODE_BLOCKMAP_NO_TRACK: u32 = 4;
pub const VNODE_CLUSTER_VERIFY: u32 = 8;
pub const PREALLOCATE: u32 = 1;
pub const ALLOCATECONTIG: u32 = 2;
pub const ALLOCATEALL: u32 = 4;
pub const ALLOCATEPERSIST: u32 = 8;
pub const ALLOCATEFROMPEOF: u32 = 16;
pub const ALLOCATEFROMVOL: u32 = 32;
pub const VNOVAL: i32 = -1;
pub const IOCS_BUFFER_NUM_SIZE_BUCKETS: u32 = 10;
pub const IOCS_BUFFER_MAX_BUCKET: u32 = 9;
pub const IOCS_BUFFER_NUM_COMPRESSION_BUCKETS: u32 = 7;
pub const IOCS_BLOCK_NUM_SIZE_BUCKETS: u32 = 16;
pub const IOCS_SBE_PATH_LEN: u32 = 128;
pub const IOCS_PATH_START_BYTES_TO_COPY: u32 = 108;
pub const IOCS_PATH_END_BYTES_TO_COPY: u32 = 20;
pub const IOCS_SYSCTL_LIVE: u32 = 1;
pub const IOCS_SYSCTL_STORE_BUFFER_RD_ONLY: u32 = 2;
pub const IOCS_SYSCTL_STORE_BUFFER_MARK: u32 = 4;
pub const _PATH_DEFPATH: &[u8; 14usize] = b"/usr/bin:/bin\0";
pub const _PATH_STDPATH: &[u8; 30usize] = b"/usr/bin:/bin:/usr/sbin:/sbin\0";
pub const _PATH_BSHELL: &[u8; 8usize] = b"/bin/sh\0";
pub const _PATH_CONSOLE: &[u8; 13usize] = b"/dev/console\0";
pub const _PATH_CSHELL: &[u8; 9usize] = b"/bin/csh\0";
pub const _PATH_DEFTAPE: &[u8; 11usize] = b"/dev/nrst0\0";
pub const _PATH_DEVDB: &[u8; 16usize] = b"/var/run/dev.db\0";
pub const _PATH_DEVNULL: &[u8; 10usize] = b"/dev/null\0";
pub const _PATH_DRUM: &[u8; 10usize] = b"/dev/drum\0";
pub const _PATH_FSIRAND: &[u8; 14usize] = b"/sbin/fsirand\0";
pub const _PATH_KMEM: &[u8; 10usize] = b"/dev/kmem\0";
pub const _PATH_KVMDB: &[u8; 15usize] = b"/var/db/kvm.db\0";
pub const _PATH_LOCALE: &[u8; 18usize] = b"/usr/share/locale\0";
pub const _PATH_MAILDIR: &[u8; 10usize] = b"/var/mail\0";
pub const _PATH_MAN: &[u8; 15usize] = b"/usr/share/man\0";
pub const _PATH_MEM: &[u8; 9usize] = b"/dev/mem\0";
pub const _PATH_NOLOGIN: &[u8; 13usize] = b"/etc/nologin\0";
pub const _PATH_RSH: &[u8; 13usize] = b"/usr/bin/rsh\0";
pub const _PATH_SENDMAIL: &[u8; 19usize] = b"/usr/sbin/sendmail\0";
pub const _PATH_SHELLS: &[u8; 12usize] = b"/etc/shells\0";
pub const _PATH_TTY: &[u8; 9usize] = b"/dev/tty\0";
pub const _PATH_UNIX: &[u8; 6usize] = b"/mach\0";
pub const _PATH_VI: &[u8; 12usize] = b"/usr/bin/vi\0";
pub const _PATH_DEV: &[u8; 6usize] = b"/dev/\0";
pub const _PATH_TMP: &[u8; 6usize] = b"/tmp/\0";
pub const _PATH_UUCPLOCK: &[u8; 17usize] = b"/var/spool/lock/\0";
pub const _PATH_VARDB: &[u8; 9usize] = b"/var/db/\0";
pub const _PATH_VARRUN: &[u8; 10usize] = b"/var/run/\0";
pub const _PATH_VARTMP: &[u8; 10usize] = b"/var/tmp/\0";
pub const EX_OK: u32 = 0;
pub const EX__BASE: u32 = 64;
pub const EX_USAGE: u32 = 64;
pub const EX_DATAERR: u32 = 65;
pub const EX_NOINPUT: u32 = 66;
pub const EX_NOUSER: u32 = 67;
pub const EX_NOHOST: u32 = 68;
pub const EX_UNAVAILABLE: u32 = 69;
pub const EX_SOFTWARE: u32 = 70;
pub const EX_OSERR: u32 = 71;
pub const EX_OSFILE: u32 = 72;
pub const EX_CANTCREAT: u32 = 73;
pub const EX_IOERR: u32 = 74;
pub const EX_TEMPFAIL: u32 = 75;
pub const EX_PROTOCOL: u32 = 76;
pub const EX_NOPERM: u32 = 77;
pub const EX_CONFIG: u32 = 78;
pub const EX__MAX: u32 = 78;
pub const MH_MAGIC: u32 = 4277009102;
pub const MH_CIGAM: u32 = 3472551422;
pub const MH_MAGIC_64: u32 = 4277009103;
pub const MH_CIGAM_64: u32 = 3489328638;
pub const MH_OBJECT: u32 = 1;
pub const MH_EXECUTE: u32 = 2;
pub const MH_FVMLIB: u32 = 3;
pub const MH_CORE: u32 = 4;
pub const MH_PRELOAD: u32 = 5;
pub const MH_DYLIB: u32 = 6;
pub const MH_DYLINKER: u32 = 7;
pub const MH_BUNDLE: u32 = 8;
pub const MH_DYLIB_STUB: u32 = 9;
pub const MH_DSYM: u32 = 10;
pub const MH_KEXT_BUNDLE: u32 = 11;
pub const MH_FILESET: u32 = 12;
pub const MH_GPU_EXECUTE: u32 = 13;
pub const MH_GPU_DYLIB: u32 = 14;
pub const MH_NOUNDEFS: u32 = 1;
pub const MH_INCRLINK: u32 = 2;
pub const MH_DYLDLINK: u32 = 4;
pub const MH_BINDATLOAD: u32 = 8;
pub const MH_PREBOUND: u32 = 16;
pub const MH_SPLIT_SEGS: u32 = 32;
pub const MH_LAZY_INIT: u32 = 64;
pub const MH_TWOLEVEL: u32 = 128;
pub const MH_FORCE_FLAT: u32 = 256;
pub const MH_NOMULTIDEFS: u32 = 512;
pub const MH_NOFIXPREBINDING: u32 = 1024;
pub const MH_PREBINDABLE: u32 = 2048;
pub const MH_ALLMODSBOUND: u32 = 4096;
pub const MH_SUBSECTIONS_VIA_SYMBOLS: u32 = 8192;
pub const MH_CANONICAL: u32 = 16384;
pub const MH_WEAK_DEFINES: u32 = 32768;
pub const MH_BINDS_TO_WEAK: u32 = 65536;
pub const MH_ALLOW_STACK_EXECUTION: u32 = 131072;
pub const MH_ROOT_SAFE: u32 = 262144;
pub const MH_SETUID_SAFE: u32 = 524288;
pub const MH_NO_REEXPORTED_DYLIBS: u32 = 1048576;
pub const MH_PIE: u32 = 2097152;
pub const MH_DEAD_STRIPPABLE_DYLIB: u32 = 4194304;
pub const MH_HAS_TLV_DESCRIPTORS: u32 = 8388608;
pub const MH_NO_HEAP_EXECUTION: u32 = 16777216;
pub const MH_APP_EXTENSION_SAFE: u32 = 33554432;
pub const MH_NLIST_OUTOFSYNC_WITH_DYLDINFO: u32 = 67108864;
pub const MH_SIM_SUPPORT: u32 = 134217728;
pub const MH_DYLIB_IN_CACHE: u32 = 2147483648;
pub const LC_REQ_DYLD: u32 = 2147483648;
pub const LC_SEGMENT: u32 = 1;
pub const LC_SYMTAB: u32 = 2;
pub const LC_SYMSEG: u32 = 3;
pub const LC_THREAD: u32 = 4;
pub const LC_UNIXTHREAD: u32 = 5;
pub const LC_LOADFVMLIB: u32 = 6;
pub const LC_IDFVMLIB: u32 = 7;
pub const LC_IDENT: u32 = 8;
pub const LC_FVMFILE: u32 = 9;
pub const LC_PREPAGE: u32 = 10;
pub const LC_DYSYMTAB: u32 = 11;
pub const LC_LOAD_DYLIB: u32 = 12;
pub const LC_ID_DYLIB: u32 = 13;
pub const LC_LOAD_DYLINKER: u32 = 14;
pub const LC_ID_DYLINKER: u32 = 15;
pub const LC_PREBOUND_DYLIB: u32 = 16;
pub const LC_ROUTINES: u32 = 17;
pub const LC_SUB_FRAMEWORK: u32 = 18;
pub const LC_SUB_UMBRELLA: u32 = 19;
pub const LC_SUB_CLIENT: u32 = 20;
pub const LC_SUB_LIBRARY: u32 = 21;
pub const LC_TWOLEVEL_HINTS: u32 = 22;
pub const LC_PREBIND_CKSUM: u32 = 23;
pub const LC_LOAD_WEAK_DYLIB: u32 = 2147483672;
pub const LC_SEGMENT_64: u32 = 25;
pub const LC_ROUTINES_64: u32 = 26;
pub const LC_UUID: u32 = 27;
pub const LC_RPATH: u32 = 2147483676;
pub const LC_CODE_SIGNATURE: u32 = 29;
pub const LC_SEGMENT_SPLIT_INFO: u32 = 30;
pub const LC_REEXPORT_DYLIB: u32 = 2147483679;
pub const LC_LAZY_LOAD_DYLIB: u32 = 32;
pub const LC_ENCRYPTION_INFO: u32 = 33;
pub const LC_DYLD_INFO: u32 = 34;
pub const LC_DYLD_INFO_ONLY: u32 = 2147483682;
pub const LC_LOAD_UPWARD_DYLIB: u32 = 2147483683;
pub const LC_VERSION_MIN_MACOSX: u32 = 36;
pub const LC_VERSION_MIN_IPHONEOS: u32 = 37;
pub const LC_FUNCTION_STARTS: u32 = 38;
pub const LC_DYLD_ENVIRONMENT: u32 = 39;
pub const LC_MAIN: u32 = 2147483688;
pub const LC_DATA_IN_CODE: u32 = 41;
pub const LC_SOURCE_VERSION: u32 = 42;
pub const LC_DYLIB_CODE_SIGN_DRS: u32 = 43;
pub const LC_ENCRYPTION_INFO_64: u32 = 44;
pub const LC_LINKER_OPTION: u32 = 45;
pub const LC_LINKER_OPTIMIZATION_HINT: u32 = 46;
pub const LC_VERSION_MIN_TVOS: u32 = 47;
pub const LC_VERSION_MIN_WATCHOS: u32 = 48;
pub const LC_NOTE: u32 = 49;
pub const LC_BUILD_VERSION: u32 = 50;
pub const LC_DYLD_EXPORTS_TRIE: u32 = 2147483699;
pub const LC_DYLD_CHAINED_FIXUPS: u32 = 2147483700;
pub const LC_FILESET_ENTRY: u32 = 2147483701;
pub const SG_HIGHVM: u32 = 1;
pub const SG_FVMLIB: u32 = 2;
pub const SG_NORELOC: u32 = 4;
pub const SG_PROTECTED_VERSION_1: u32 = 8;
pub const SG_READ_ONLY: u32 = 16;
pub const SECTION_TYPE: u32 = 255;
pub const SECTION_ATTRIBUTES: u32 = 4294967040;
pub const S_REGULAR: u32 = 0;
pub const S_ZEROFILL: u32 = 1;
pub const S_CSTRING_LITERALS: u32 = 2;
pub const S_4BYTE_LITERALS: u32 = 3;
pub const S_8BYTE_LITERALS: u32 = 4;
pub const S_LITERAL_POINTERS: u32 = 5;
pub const S_NON_LAZY_SYMBOL_POINTERS: u32 = 6;
pub const S_LAZY_SYMBOL_POINTERS: u32 = 7;
pub const S_SYMBOL_STUBS: u32 = 8;
pub const S_MOD_INIT_FUNC_POINTERS: u32 = 9;
pub const S_MOD_TERM_FUNC_POINTERS: u32 = 10;
pub const S_COALESCED: u32 = 11;
pub const S_GB_ZEROFILL: u32 = 12;
pub const S_INTERPOSING: u32 = 13;
pub const S_16BYTE_LITERALS: u32 = 14;
pub const S_DTRACE_DOF: u32 = 15;
pub const S_LAZY_DYLIB_SYMBOL_POINTERS: u32 = 16;
pub const S_THREAD_LOCAL_REGULAR: u32 = 17;
pub const S_THREAD_LOCAL_ZEROFILL: u32 = 18;
pub const S_THREAD_LOCAL_VARIABLES: u32 = 19;
pub const S_THREAD_LOCAL_VARIABLE_POINTERS: u32 = 20;
pub const S_THREAD_LOCAL_INIT_FUNCTION_POINTERS: u32 = 21;
pub const S_INIT_FUNC_OFFSETS: u32 = 22;
pub const SECTION_ATTRIBUTES_USR: u32 = 4278190080;
pub const S_ATTR_PURE_INSTRUCTIONS: u32 = 2147483648;
pub const S_ATTR_NO_TOC: u32 = 1073741824;
pub const S_ATTR_STRIP_STATIC_SYMS: u32 = 536870912;
pub const S_ATTR_NO_DEAD_STRIP: u32 = 268435456;
pub const S_ATTR_LIVE_SUPPORT: u32 = 134217728;
pub const S_ATTR_SELF_MODIFYING_CODE: u32 = 67108864;
pub const S_ATTR_DEBUG: u32 = 33554432;
pub const SECTION_ATTRIBUTES_SYS: u32 = 16776960;
pub const S_ATTR_SOME_INSTRUCTIONS: u32 = 1024;
pub const S_ATTR_EXT_RELOC: u32 = 512;
pub const S_ATTR_LOC_RELOC: u32 = 256;
pub const SEG_PAGEZERO: &[u8; 11usize] = b"__PAGEZERO\0";
pub const SEG_TEXT: &[u8; 7usize] = b"__TEXT\0";
pub const SECT_TEXT: &[u8; 7usize] = b"__text\0";
pub const SECT_FVMLIB_INIT0: &[u8; 15usize] = b"__fvmlib_init0\0";
pub const SECT_FVMLIB_INIT1: &[u8; 15usize] = b"__fvmlib_init1\0";
pub const SEG_DATA: &[u8; 7usize] = b"__DATA\0";
pub const SECT_DATA: &[u8; 7usize] = b"__data\0";
pub const SECT_BSS: &[u8; 6usize] = b"__bss\0";
pub const SECT_COMMON: &[u8; 9usize] = b"__common\0";
pub const SEG_OBJC: &[u8; 7usize] = b"__OBJC\0";
pub const SECT_OBJC_SYMBOLS: &[u8; 15usize] = b"__symbol_table\0";
pub const SECT_OBJC_MODULES: &[u8; 14usize] = b"__module_info\0";
pub const SECT_OBJC_STRINGS: &[u8; 16usize] = b"__selector_strs\0";
pub const SECT_OBJC_REFS: &[u8; 16usize] = b"__selector_refs\0";
pub const SEG_ICON: &[u8; 7usize] = b"__ICON\0";
pub const SECT_ICON_HEADER: &[u8; 9usize] = b"__header\0";
pub const SECT_ICON_TIFF: &[u8; 7usize] = b"__tiff\0";
pub const SEG_LINKEDIT: &[u8; 11usize] = b"__LINKEDIT\0";
pub const SEG_UNIXSTACK: &[u8; 12usize] = b"__UNIXSTACK\0";
pub const SEG_IMPORT: &[u8; 9usize] = b"__IMPORT\0";
pub const INDIRECT_SYMBOL_LOCAL: u32 = 2147483648;
pub const INDIRECT_SYMBOL_ABS: u32 = 1073741824;
pub const PLATFORM_UNKNOWN: u32 = 0;
pub const PLATFORM_ANY: u32 = 4294967295;
pub const PLATFORM_MACOS: u32 = 1;
pub const PLATFORM_IOS: u32 = 2;
pub const PLATFORM_TVOS: u32 = 3;
pub const PLATFORM_WATCHOS: u32 = 4;
pub const PLATFORM_BRIDGEOS: u32 = 5;
pub const PLATFORM_MACCATALYST: u32 = 6;
pub const PLATFORM_IOSSIMULATOR: u32 = 7;
pub const PLATFORM_TVOSSIMULATOR: u32 = 8;
pub const PLATFORM_WATCHOSSIMULATOR: u32 = 9;
pub const PLATFORM_DRIVERKIT: u32 = 10;
pub const PLATFORM_FIRMWARE: u32 = 13;
pub const PLATFORM_SEPOS: u32 = 14;
pub const TOOL_CLANG: u32 = 1;
pub const TOOL_SWIFT: u32 = 2;
pub const TOOL_LD: u32 = 3;
pub const TOOL_LLD: u32 = 4;
pub const TOOL_METAL: u32 = 1024;
pub const TOOL_AIRLLD: u32 = 1025;
pub const TOOL_AIRNT: u32 = 1026;
pub const TOOL_AIRNT_PLUGIN: u32 = 1027;
pub const TOOL_AIRPACK: u32 = 1028;
pub const TOOL_GPUARCHIVER: u32 = 1031;
pub const TOOL_METAL_FRAMEWORK: u32 = 1032;
pub const REBASE_TYPE_POINTER: u32 = 1;
pub const REBASE_TYPE_TEXT_ABSOLUTE32: u32 = 2;
pub const REBASE_TYPE_TEXT_PCREL32: u32 = 3;
pub const REBASE_OPCODE_MASK: u32 = 240;
pub const REBASE_IMMEDIATE_MASK: u32 = 15;
pub const REBASE_OPCODE_DONE: u32 = 0;
pub const REBASE_OPCODE_SET_TYPE_IMM: u32 = 16;
pub const REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u32 = 32;
pub const REBASE_OPCODE_ADD_ADDR_ULEB: u32 = 48;
pub const REBASE_OPCODE_ADD_ADDR_IMM_SCALED: u32 = 64;
pub const REBASE_OPCODE_DO_REBASE_IMM_TIMES: u32 = 80;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES: u32 = 96;
pub const REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: u32 = 112;
pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB: u32 = 128;
pub const BIND_TYPE_POINTER: u32 = 1;
pub const BIND_TYPE_TEXT_ABSOLUTE32: u32 = 2;
pub const BIND_TYPE_TEXT_PCREL32: u32 = 3;
pub const BIND_SPECIAL_DYLIB_SELF: u32 = 0;
pub const BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: i32 = -1;
pub const BIND_SPECIAL_DYLIB_FLAT_LOOKUP: i32 = -2;
pub const BIND_SPECIAL_DYLIB_WEAK_LOOKUP: i32 = -3;
pub const BIND_SYMBOL_FLAGS_WEAK_IMPORT: u32 = 1;
pub const BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: u32 = 8;
pub const BIND_OPCODE_MASK: u32 = 240;
pub const BIND_IMMEDIATE_MASK: u32 = 15;
pub const BIND_OPCODE_DONE: u32 = 0;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: u32 = 16;
pub const BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: u32 = 32;
pub const BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: u32 = 48;
pub const BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: u32 = 64;
pub const BIND_OPCODE_SET_TYPE_IMM: u32 = 80;
pub const BIND_OPCODE_SET_ADDEND_SLEB: u32 = 96;
pub const BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u32 = 112;
pub const BIND_OPCODE_ADD_ADDR_ULEB: u32 = 128;
pub const BIND_OPCODE_DO_BIND: u32 = 144;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: u32 = 160;
pub const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: u32 = 176;
pub const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: u32 = 192;
pub const BIND_OPCODE_THREADED: u32 = 208;
pub const BIND_SUBOPCODE_THREADED_SET_BIND_ORDINAL_TABLE_SIZE_ULEB: u32 = 0;
pub const BIND_SUBOPCODE_THREADED_APPLY: u32 = 1;
pub const EXPORT_SYMBOL_FLAGS_KIND_MASK: u32 = 3;
pub const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: u32 = 0;
pub const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: u32 = 1;
pub const EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: u32 = 2;
pub const EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION: u32 = 4;
pub const EXPORT_SYMBOL_FLAGS_REEXPORT: u32 = 8;
pub const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: u32 = 16;
pub const EXPORT_SYMBOL_FLAGS_STATIC_RESOLVER: u32 = 32;
pub const DICE_KIND_DATA: u32 = 1;
pub const DICE_KIND_JUMP_TABLE8: u32 = 2;
pub const DICE_KIND_JUMP_TABLE16: u32 = 3;
pub const DICE_KIND_JUMP_TABLE32: u32 = 4;
pub const DICE_KIND_ABS_JUMP_TABLE32: u32 = 5;
pub const NSLINKMODULE_OPTION_NONE: u32 = 0;
pub const NSLINKMODULE_OPTION_BINDNOW: u32 = 1;
pub const NSLINKMODULE_OPTION_PRIVATE: u32 = 2;
pub const NSLINKMODULE_OPTION_RETURN_ON_ERROR: u32 = 4;
pub const NSLINKMODULE_OPTION_DONT_CALL_MOD_INIT_ROUTINES: u32 = 8;
pub const NSLINKMODULE_OPTION_TRAILING_PHYS_NAME: u32 = 16;
pub const NSUNLINKMODULE_OPTION_NONE: u32 = 0;
pub const NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED: u32 = 1;
pub const NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES: u32 = 2;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_BIND: u32 = 0;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_NOW: u32 = 1;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_FULLY: u32 = 2;
pub const NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR: u32 = 4;
pub const NSADDIMAGE_OPTION_NONE: u32 = 0;
pub const NSADDIMAGE_OPTION_RETURN_ON_ERROR: u32 = 1;
pub const NSADDIMAGE_OPTION_WITH_SEARCHING: u32 = 2;
pub const NSADDIMAGE_OPTION_RETURN_ONLY_IF_LOADED: u32 = 4;
pub const NSADDIMAGE_OPTION_MATCH_FILENAME_BY_INSTALLNAME: u32 = 8;
pub const UNWIND_SECTION_VERSION: u32 = 1;
pub const UNWIND_SECOND_LEVEL_REGULAR: u32 = 2;
pub const UNWIND_SECOND_LEVEL_COMPRESSED: u32 = 3;
pub const FAT_MAGIC: u32 = 3405691582;
pub const FAT_CIGAM: u32 = 3199925962;
pub const FAT_MAGIC_64: u32 = 3405691583;
pub const FAT_CIGAM_64: u32 = 3216703178;
pub const _MH_EXECUTE_SYM: &[u8; 20usize] = b"__mh_execute_header\0";
pub const MH_EXECUTE_SYM: &[u8; 19usize] = b"_mh_execute_header\0";
pub const _MH_BUNDLE_SYM: &[u8; 19usize] = b"__mh_bundle_header\0";
pub const MH_BUNDLE_SYM: &[u8; 18usize] = b"_mh_bundle_header\0";
pub const _MH_DYLIB_SYM: &[u8; 18usize] = b"__mh_dylib_header\0";
pub const MH_DYLIB_SYM: &[u8; 17usize] = b"_mh_dylib_header\0";
pub const _MH_DYLINKER_SYM: &[u8; 21usize] = b"__mh_dylinker_header\0";
pub const MH_DYLINKER_SYM: &[u8; 20usize] = b"_mh_dylinker_header\0";
pub const N_STAB: u32 = 224;
pub const N_PEXT: u32 = 16;
pub const N_TYPE: u32 = 14;
pub const N_EXT: u32 = 1;
pub const N_UNDF: u32 = 0;
pub const N_ABS: u32 = 2;
pub const N_SECT: u32 = 14;
pub const N_PBUD: u32 = 12;
pub const N_INDR: u32 = 10;
pub const NO_SECT: u32 = 0;
pub const MAX_SECT: u32 = 255;
pub const REFERENCE_TYPE: u32 = 7;
pub const REFERENCE_FLAG_UNDEFINED_NON_LAZY: u32 = 0;
pub const REFERENCE_FLAG_UNDEFINED_LAZY: u32 = 1;
pub const REFERENCE_FLAG_DEFINED: u32 = 2;
pub const REFERENCE_FLAG_PRIVATE_DEFINED: u32 = 3;
pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY: u32 = 4;
pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY: u32 = 5;
pub const REFERENCED_DYNAMICALLY: u32 = 16;
pub const SELF_LIBRARY_ORDINAL: u32 = 0;
pub const MAX_LIBRARY_ORDINAL: u32 = 253;
pub const DYNAMIC_LOOKUP_ORDINAL: u32 = 254;
pub const EXECUTABLE_ORDINAL: u32 = 255;
pub const N_NO_DEAD_STRIP: u32 = 32;
pub const N_DESC_DISCARDED: u32 = 32;
pub const N_WEAK_REF: u32 = 64;
pub const N_WEAK_DEF: u32 = 128;
pub const N_REF_TO_WEAK: u32 = 128;
pub const N_ARM_THUMB_DEF: u32 = 8;
pub const N_SYMBOL_RESOLVER: u32 = 256;
pub const N_ALT_ENTRY: u32 = 512;
pub const N_COLD_FUNC: u32 = 1024;
pub const SYMDEF: &[u8; 10usize] = b"__.SYMDEF\0";
pub const SYMDEF_SORTED: &[u8; 17usize] = b"__.SYMDEF SORTED\0";
pub const SYMDEF_64: &[u8; 13usize] = b"__.SYMDEF_64\0";
pub const SYMDEF_64_SORTED: &[u8; 20usize] = b"__.SYMDEF_64 SORTED\0";
pub const R_ABS: u32 = 0;
pub const R_SCATTERED: u32 = 2147483648;
pub const N_GSYM: u32 = 32;
pub const N_FNAME: u32 = 34;
pub const N_FUN: u32 = 36;
pub const N_STSYM: u32 = 38;
pub const N_LCSYM: u32 = 40;
pub const N_BNSYM: u32 = 46;
pub const N_AST: u32 = 50;
pub const N_OPT: u32 = 60;
pub const N_RSYM: u32 = 64;
pub const N_SLINE: u32 = 68;
pub const N_ENSYM: u32 = 78;
pub const N_SSYM: u32 = 96;
pub const N_SO: u32 = 100;
pub const N_OSO: u32 = 102;
pub const N_LSYM: u32 = 128;
pub const N_BINCL: u32 = 130;
pub const N_SOL: u32 = 132;
pub const N_PARAMS: u32 = 134;
pub const N_VERSION: u32 = 136;
pub const N_OLEVEL: u32 = 138;
pub const N_PSYM: u32 = 160;
pub const N_EINCL: u32 = 162;
pub const N_ENTRY: u32 = 164;
pub const N_LBRAC: u32 = 192;
pub const N_EXCL: u32 = 194;
pub const N_RBRAC: u32 = 224;
pub const N_BCOMM: u32 = 226;
pub const N_ECOMM: u32 = 228;
pub const N_ECOML: u32 = 232;
pub const N_LENG: u32 = 254;
pub const N_PC: u32 = 48;
pub const OBJC_API_VERSION: u32 = 2;
pub const OBJC_NO_GC: u32 = 1;
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: u32 = 1;
pub const OBJC_OLD_DISPATCH_PROTOTYPES: u32 = 0;
pub const OBJC_BOOL_IS_BOOL: u32 = 1;
pub const NSIntegerMax: u64 = 9223372036854775807;
pub const NSIntegerMin: i64 = -9223372036854775808;
pub const NSUIntegerMax: i32 = -1;
pub const NSINTEGER_DEFINED: u32 = 1;
pub const OBJC_GETCLASSHOOK_DEFINED: u32 = 1;
pub const OBJC_ADDLOADIMAGEFUNC_DEFINED: u32 = 1;
pub const OBJC_SETHOOK_LAZYCLASSNAMER_DEFINED: u32 = 1;
pub const OBJC_REALIZECLASSFROMSWIFT_DEFINED: u32 = 1;
pub const _C_ID: u8 = 64u8;
pub const _C_CLASS: u8 = 35u8;
pub const _C_SEL: u8 = 58u8;
pub const _C_CHR: u8 = 99u8;
pub const _C_UCHR: u8 = 67u8;
pub const _C_SHT: u8 = 115u8;
pub const _C_USHT: u8 = 83u8;
pub const _C_INT: u8 = 105u8;
pub const _C_UINT: u8 = 73u8;
pub const _C_LNG: u8 = 108u8;
pub const _C_ULNG: u8 = 76u8;
pub const _C_LNG_LNG: u8 = 113u8;
pub const _C_ULNG_LNG: u8 = 81u8;
pub const _C_INT128: u8 = 116u8;
pub const _C_UINT128: u8 = 84u8;
pub const _C_FLT: u8 = 102u8;
pub const _C_DBL: u8 = 100u8;
pub const _C_LNG_DBL: u8 = 68u8;
pub const _C_BFLD: u8 = 98u8;
pub const _C_BOOL: u8 = 66u8;
pub const _C_VOID: u8 = 118u8;
pub const _C_UNDEF: u8 = 63u8;
pub const _C_PTR: u8 = 94u8;
pub const _C_CHARPTR: u8 = 42u8;
pub const _C_ATOM: u8 = 37u8;
pub const _C_ARY_B: u8 = 91u8;
pub const _C_ARY_E: u8 = 93u8;
pub const _C_UNION_B: u8 = 40u8;
pub const _C_UNION_E: u8 = 41u8;
pub const _C_STRUCT_B: u8 = 123u8;
pub const _C_STRUCT_E: u8 = 125u8;
pub const _C_VECTOR: u8 = 33u8;
pub const _C_COMPLEX: u8 = 106u8;
pub const _C_ATOMIC: u8 = 65u8;
pub const _C_CONST: u8 = 114u8;
pub const _C_IN: u8 = 110u8;
pub const _C_INOUT: u8 = 78u8;
pub const _C_OUT: u8 = 111u8;
pub const _C_BYCOPY: u8 = 79u8;
pub const _C_BYREF: u8 = 82u8;
pub const _C_ONEWAY: u8 = 86u8;
pub const _C_GNUREGISTER: u8 = 43u8;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 1;
pub const OS_OBJECT_USE_OBJC: u32 = 1;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const __COREFOUNDATION_COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFBAG__: u32 = 1;
pub const __COREFOUNDATION_CFBINARYHEAP__: u32 = 1;
pub const __COREFOUNDATION_CFBITVECTOR__: u32 = 1;
pub const __COREFOUNDATION_CFBYTEORDER__: u32 = 1;
pub const CF_USE_OSBYTEORDER_H: u32 = 1;
pub const __COREFOUNDATION_CFCALENDAR__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFTIMEZONE__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const __COREFOUNDATION_CFCGTYPES__: u32 = 1;
pub const CGFLOAT_IS_DOUBLE: u32 = 1;
pub const CGFLOAT_DEFINED: u32 = 1;
pub const CGVECTOR_DEFINED: u32 = 1;
pub const __COREFOUNDATION_CFDATEFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBERFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFPREFERENCES__: u32 = 1;
pub const __COREFOUNDATION_CFPROPERTYLIST__: u32 = 1;
pub const __COREFOUNDATION_CFSTREAM__: u32 = 1;
pub const __COREFOUNDATION_CFURL__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const __COREFOUNDATION_CFSOCKET__: u32 = 1;
pub const __COREFOUNDATION_CFSET__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__: u32 = 1;
pub const __COREFOUNDATION_CFTREE__: u32 = 1;
pub const __COREFOUNDATION_CFURLACCESS__: u32 = 1;
pub const __COREFOUNDATION_CFUUID__: u32 = 1;
pub const __COREFOUNDATION_CFUTILITIES__: u32 = 1;
pub const __COREFOUNDATION_CFBUNDLE__: u32 = 1;
pub const __COREFOUNDATION_CFMESSAGEPORT__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGIN__: u32 = 1;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE: u32 = 1;
pub const __COREFOUNDATION_CFMACHPORT__: u32 = 1;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFURLENUMERATOR__: u32 = 1;
pub const __COREFOUNDATION_CFFILESECURITY__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__: u32 = 1;
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__: u32 = 1;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__: u32 = 1;
pub const __COREFOUNDATION_CFXMLNODE__: u32 = 1;
pub const __CFXMLNode_DEPRECATION_MSG: &[u8; 83usize] =
    b"CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFXMLPARSER__: u32 = 1;
pub const __CFXMLParser_DEPRECATION_MSG: &[u8; 85usize] =
    b"CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFPLUGINCOM__: u32 = 1;
pub const SEVERITY_SUCCESS: u32 = 0;
pub const SEVERITY_ERROR: u32 = 1;
pub const LAUNCH_KEY_SUBMITJOB: &[u8; 10usize] = b"SubmitJob\0";
pub const LAUNCH_KEY_REMOVEJOB: &[u8; 10usize] = b"RemoveJob\0";
pub const LAUNCH_KEY_STARTJOB: &[u8; 9usize] = b"StartJob\0";
pub const LAUNCH_KEY_STOPJOB: &[u8; 8usize] = b"StopJob\0";
pub const LAUNCH_KEY_GETJOB: &[u8; 7usize] = b"GetJob\0";
pub const LAUNCH_KEY_GETJOBS: &[u8; 8usize] = b"GetJobs\0";
pub const LAUNCH_KEY_CHECKIN: &[u8; 8usize] = b"CheckIn\0";
pub const LAUNCH_JOBKEY_LABEL: &[u8; 6usize] = b"Label\0";
pub const LAUNCH_JOBKEY_DISABLED: &[u8; 9usize] = b"Disabled\0";
pub const LAUNCH_JOBKEY_USERNAME: &[u8; 9usize] = b"UserName\0";
pub const LAUNCH_JOBKEY_GROUPNAME: &[u8; 10usize] = b"GroupName\0";
pub const LAUNCH_JOBKEY_TIMEOUT: &[u8; 8usize] = b"TimeOut\0";
pub const LAUNCH_JOBKEY_EXITTIMEOUT: &[u8; 12usize] = b"ExitTimeOut\0";
pub const LAUNCH_JOBKEY_INITGROUPS: &[u8; 11usize] = b"InitGroups\0";
pub const LAUNCH_JOBKEY_SOCKETS: &[u8; 8usize] = b"Sockets\0";
pub const LAUNCH_JOBKEY_MACHSERVICES: &[u8; 13usize] = b"MachServices\0";
pub const LAUNCH_JOBKEY_MACHSERVICELOOKUPPOLICIES: &[u8; 26usize] = b"MachServiceLookupPolicies\0";
pub const LAUNCH_JOBKEY_INETDCOMPATIBILITY: &[u8; 19usize] = b"inetdCompatibility\0";
pub const LAUNCH_JOBKEY_ENABLEGLOBBING: &[u8; 15usize] = b"EnableGlobbing\0";
pub const LAUNCH_JOBKEY_PROGRAMARGUMENTS: &[u8; 17usize] = b"ProgramArguments\0";
pub const LAUNCH_JOBKEY_PROGRAM: &[u8; 8usize] = b"Program\0";
pub const LAUNCH_JOBKEY_ONDEMAND: &[u8; 9usize] = b"OnDemand\0";
pub const LAUNCH_JOBKEY_KEEPALIVE: &[u8; 10usize] = b"KeepAlive\0";
pub const LAUNCH_JOBKEY_LIMITLOADTOHOSTS: &[u8; 17usize] = b"LimitLoadToHosts\0";
pub const LAUNCH_JOBKEY_LIMITLOADFROMHOSTS: &[u8; 19usize] = b"LimitLoadFromHosts\0";
pub const LAUNCH_JOBKEY_LIMITLOADTOSESSIONTYPE: &[u8; 23usize] = b"LimitLoadToSessionType\0";
pub const LAUNCH_JOBKEY_LIMITLOADTOHARDWARE: &[u8; 20usize] = b"LimitLoadToHardware\0";
pub const LAUNCH_JOBKEY_LIMITLOADFROMHARDWARE: &[u8; 22usize] = b"LimitLoadFromHardware\0";
pub const LAUNCH_JOBKEY_RUNATLOAD: &[u8; 10usize] = b"RunAtLoad\0";
pub const LAUNCH_JOBKEY_ROOTDIRECTORY: &[u8; 14usize] = b"RootDirectory\0";
pub const LAUNCH_JOBKEY_WORKINGDIRECTORY: &[u8; 17usize] = b"WorkingDirectory\0";
pub const LAUNCH_JOBKEY_ENVIRONMENTVARIABLES: &[u8; 21usize] = b"EnvironmentVariables\0";
pub const LAUNCH_JOBKEY_USERENVIRONMENTVARIABLES: &[u8; 25usize] = b"UserEnvironmentVariables\0";
pub const LAUNCH_JOBKEY_UMASK: &[u8; 6usize] = b"Umask\0";
pub const LAUNCH_JOBKEY_NICE: &[u8; 5usize] = b"Nice\0";
pub const LAUNCH_JOBKEY_HOPEFULLYEXITSFIRST: &[u8; 20usize] = b"HopefullyExitsFirst\0";
pub const LAUNCH_JOBKEY_HOPEFULLYEXITSLAST: &[u8; 19usize] = b"HopefullyExitsLast\0";
pub const LAUNCH_JOBKEY_LOWPRIORITYIO: &[u8; 14usize] = b"LowPriorityIO\0";
pub const LAUNCH_JOBKEY_LOWPRIORITYBACKGROUNDIO: &[u8; 24usize] = b"LowPriorityBackgroundIO\0";
pub const LAUNCH_JOBKEY_MATERIALIZEDATALESSFILES: &[u8; 25usize] = b"MaterializeDatalessFiles\0";
pub const LAUNCH_JOBKEY_SESSIONCREATE: &[u8; 14usize] = b"SessionCreate\0";
pub const LAUNCH_JOBKEY_STARTONMOUNT: &[u8; 13usize] = b"StartOnMount\0";
pub const LAUNCH_JOBKEY_SOFTRESOURCELIMITS: &[u8; 19usize] = b"SoftResourceLimits\0";
pub const LAUNCH_JOBKEY_HARDRESOURCELIMITS: &[u8; 19usize] = b"HardResourceLimits\0";
pub const LAUNCH_JOBKEY_STANDARDINPATH: &[u8; 15usize] = b"StandardInPath\0";
pub const LAUNCH_JOBKEY_STANDARDOUTPATH: &[u8; 16usize] = b"StandardOutPath\0";
pub const LAUNCH_JOBKEY_STANDARDERRORPATH: &[u8; 18usize] = b"StandardErrorPath\0";
pub const LAUNCH_JOBKEY_DEBUG: &[u8; 6usize] = b"Debug\0";
pub const LAUNCH_JOBKEY_WAITFORDEBUGGER: &[u8; 16usize] = b"WaitForDebugger\0";
pub const LAUNCH_JOBKEY_QUEUEDIRECTORIES: &[u8; 17usize] = b"QueueDirectories\0";
pub const LAUNCH_JOBKEY_HOMERELATIVEQUEUEDIRECTORIES: &[u8; 29usize] =
    b"HomeRelativeQueueDirectories\0";
pub const LAUNCH_JOBKEY_WATCHPATHS: &[u8; 11usize] = b"WatchPaths\0";
pub const LAUNCH_JOBKEY_STARTINTERVAL: &[u8; 14usize] = b"StartInterval\0";
pub const LAUNCH_JOBKEY_STARTCALENDARINTERVAL: &[u8; 22usize] = b"StartCalendarInterval\0";
pub const LAUNCH_JOBKEY_BONJOURFDS: &[u8; 11usize] = b"BonjourFDs\0";
pub const LAUNCH_JOBKEY_LASTEXITSTATUS: &[u8; 15usize] = b"LastExitStatus\0";
pub const LAUNCH_JOBKEY_PID: &[u8; 4usize] = b"PID\0";
pub const LAUNCH_JOBKEY_THROTTLEINTERVAL: &[u8; 17usize] = b"ThrottleInterval\0";
pub const LAUNCH_JOBKEY_LAUNCHONLYONCE: &[u8; 15usize] = b"LaunchOnlyOnce\0";
pub const LAUNCH_JOBKEY_ABANDONPROCESSGROUP: &[u8; 20usize] = b"AbandonProcessGroup\0";
pub const LAUNCH_JOBKEY_IGNOREPROCESSGROUPATSHUTDOWN: &[u8; 29usize] =
    b"IgnoreProcessGroupAtShutdown\0";
pub const LAUNCH_JOBKEY_LEGACYTIMERS: &[u8; 13usize] = b"LegacyTimers\0";
pub const LAUNCH_JOBKEY_ENABLEPRESSUREDEXIT: &[u8; 20usize] = b"EnablePressuredExit\0";
pub const LAUNCH_JOBKEY_ENABLETRANSACTIONS: &[u8; 19usize] = b"EnableTransactions\0";
pub const LAUNCH_JOBKEY_DRAINMESSAGESONFAILEDINIT: &[u8; 26usize] = b"DrainMessagesOnFailedInit\0";
pub const LAUNCH_JOBKEY_POLICIES: &[u8; 9usize] = b"Policies\0";
pub const LAUNCH_JOBKEY_BUNDLEPROGRAM: &[u8; 14usize] = b"BundleProgram\0";
pub const LAUNCH_JOBKEY_ASSOCIATEDBUNDLEIDENTIFIERS: &[u8; 28usize] =
    b"AssociatedBundleIdentifiers\0";
pub const LAUNCH_JOBKEY_PUBLISHESEVENTS: &[u8; 16usize] = b"PublishesEvents\0";
pub const LAUNCH_KEY_PUBLISHESEVENTS_DOMAININTERNAL: &[u8; 15usize] = b"DomainInternal\0";
pub const LAUNCH_JOBPOLICY_DENYCREATINGOTHERJOBS: &[u8; 22usize] = b"DenyCreatingOtherJobs\0";
pub const LAUNCH_JOBINETDCOMPATIBILITY_WAIT: &[u8; 5usize] = b"Wait\0";
pub const LAUNCH_JOBINETDCOMPATIBILITY_INSTANCES: &[u8; 10usize] = b"Instances\0";
pub const LAUNCH_JOBKEY_MACH_RESETATCLOSE: &[u8; 13usize] = b"ResetAtClose\0";
pub const LAUNCH_JOBKEY_MACH_HIDEUNTILCHECKIN: &[u8; 17usize] = b"HideUntilCheckIn\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_SUCCESSFULEXIT: &[u8; 15usize] = b"SuccessfulExit\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_NETWORKSTATE: &[u8; 13usize] = b"NetworkState\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_PATHSTATE: &[u8; 10usize] = b"PathState\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_HOMERELATIVEPATHSTATE: &[u8; 22usize] =
    b"HomeRelativePathState\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_OTHERJOBACTIVE: &[u8; 15usize] = b"OtherJobActive\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_OTHERJOBENABLED: &[u8; 16usize] = b"OtherJobEnabled\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_AFTERINITIALDEMAND: &[u8; 19usize] = b"AfterInitialDemand\0";
pub const LAUNCH_JOBKEY_KEEPALIVE_CRASHED: &[u8; 8usize] = b"Crashed\0";
pub const LAUNCH_JOBKEY_LAUNCHEVENTS: &[u8; 13usize] = b"LaunchEvents\0";
pub const LAUNCH_JOBKEY_CAL_MINUTE: &[u8; 7usize] = b"Minute\0";
pub const LAUNCH_JOBKEY_CAL_HOUR: &[u8; 5usize] = b"Hour\0";
pub const LAUNCH_JOBKEY_CAL_DAY: &[u8; 4usize] = b"Day\0";
pub const LAUNCH_JOBKEY_CAL_WEEKDAY: &[u8; 8usize] = b"Weekday\0";
pub const LAUNCH_JOBKEY_CAL_MONTH: &[u8; 6usize] = b"Month\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_CORE: &[u8; 5usize] = b"Core\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_CPU: &[u8; 4usize] = b"CPU\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_DATA: &[u8; 5usize] = b"Data\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_FSIZE: &[u8; 9usize] = b"FileSize\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_MEMLOCK: &[u8; 11usize] = b"MemoryLock\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_NOFILE: &[u8; 14usize] = b"NumberOfFiles\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_NPROC: &[u8; 18usize] = b"NumberOfProcesses\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_RSS: &[u8; 16usize] = b"ResidentSetSize\0";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_STACK: &[u8; 6usize] = b"Stack\0";
pub const LAUNCH_JOBKEY_DISABLED_MACHINETYPE: &[u8; 12usize] = b"MachineType\0";
pub const LAUNCH_JOBKEY_DISABLED_MODELNAME: &[u8; 10usize] = b"ModelName\0";
pub const LAUNCH_JOBKEY_DATASTORES: &[u8; 11usize] = b"Datastores\0";
pub const LAUNCH_JOBKEY_DATASTORES_SIZELIMIT: &[u8; 10usize] = b"SizeLimit\0";
pub const LAUNCH_JOBSOCKETKEY_TYPE: &[u8; 9usize] = b"SockType\0";
pub const LAUNCH_JOBSOCKETKEY_PASSIVE: &[u8; 12usize] = b"SockPassive\0";
pub const LAUNCH_JOBSOCKETKEY_BONJOUR: &[u8; 8usize] = b"Bonjour\0";
pub const LAUNCH_JOBSOCKETKEY_SECUREWITHKEY: &[u8; 20usize] = b"SecureSocketWithKey\0";
pub const LAUNCH_JOBSOCKETKEY_PATHNAME: &[u8; 13usize] = b"SockPathName\0";
pub const LAUNCH_JOBSOCKETKEY_PATHMODE: &[u8; 13usize] = b"SockPathMode\0";
pub const LAUNCH_JOBSOCKETKEY_PATHOWNER: &[u8; 14usize] = b"SockPathOwner\0";
pub const LAUNCH_JOBSOCKETKEY_PATHGROUP: &[u8; 14usize] = b"SockPathGroup\0";
pub const LAUNCH_JOBSOCKETKEY_NODENAME: &[u8; 13usize] = b"SockNodeName\0";
pub const LAUNCH_JOBSOCKETKEY_SERVICENAME: &[u8; 16usize] = b"SockServiceName\0";
pub const LAUNCH_JOBSOCKETKEY_FAMILY: &[u8; 11usize] = b"SockFamily\0";
pub const LAUNCH_JOBSOCKETKEY_PROTOCOL: &[u8; 13usize] = b"SockProtocol\0";
pub const LAUNCH_JOBSOCKETKEY_MULTICASTGROUP: &[u8; 15usize] = b"MulticastGroup\0";
pub const LAUNCH_JOBKEY_PROCESSTYPE: &[u8; 12usize] = b"ProcessType\0";
pub const LAUNCH_KEY_PROCESSTYPE_APP: &[u8; 4usize] = b"App\0";
pub const LAUNCH_KEY_PROCESSTYPE_STANDARD: &[u8; 9usize] = b"Standard\0";
pub const LAUNCH_KEY_PROCESSTYPE_BACKGROUND: &[u8; 11usize] = b"Background\0";
pub const LAUNCH_KEY_PROCESSTYPE_INTERACTIVE: &[u8; 12usize] = b"Interactive\0";
pub const LAUNCH_KEY_PROCESSTYPE_ADAPTIVE: &[u8; 9usize] = b"Adaptive\0";
pub const IPHONE_SIMULATOR_HOST_MIN_VERSION_REQUIRED: u32 = 999999;
pub const XPC_API_VERSION: u32 = 20200610;
pub const XPC_CONNECTION_MACH_SERVICE_LISTENER: u32 = 1;
pub const XPC_CONNECTION_MACH_SERVICE_PRIVILEGED: u32 = 2;
pub const DER_ENCODE_ENABLE: u32 = 1;
pub const DER_DECODE_ENABLE: u32 = 1;
pub const DER_MULTIBYTE_TAGS: u32 = 1;
pub const DER_TAG_SIZE: u32 = 8;
pub const SEC_OS_IPHONE: u32 = 0;
pub const SEC_OS_OSX: u32 = 1;
pub const SECURITY_TYPE_UNIFICATION: u32 = 1;
pub const _CSSMTYPE_H_: u32 = 1;
pub const _CSSMCONFIG_H_: u32 = 1;
pub const SEC_ASN1_TAG_MASK: u32 = 255;
pub const SEC_ASN1_TAGNUM_MASK: u32 = 31;
pub const SEC_ASN1_BOOLEAN: u32 = 1;
pub const SEC_ASN1_INTEGER: u32 = 2;
pub const SEC_ASN1_BIT_STRING: u32 = 3;
pub const SEC_ASN1_OCTET_STRING: u32 = 4;
pub const SEC_ASN1_NULL: u32 = 5;
pub const SEC_ASN1_OBJECT_ID: u32 = 6;
pub const SEC_ASN1_OBJECT_DESCRIPTOR: u32 = 7;
pub const SEC_ASN1_REAL: u32 = 9;
pub const SEC_ASN1_ENUMERATED: u32 = 10;
pub const SEC_ASN1_EMBEDDED_PDV: u32 = 11;
pub const SEC_ASN1_UTF8_STRING: u32 = 12;
pub const SEC_ASN1_SEQUENCE: u32 = 16;
pub const SEC_ASN1_SET: u32 = 17;
pub const SEC_ASN1_NUMERIC_STRING: u32 = 18;
pub const SEC_ASN1_PRINTABLE_STRING: u32 = 19;
pub const SEC_ASN1_T61_STRING: u32 = 20;
pub const SEC_ASN1_VIDEOTEX_STRING: u32 = 21;
pub const SEC_ASN1_IA5_STRING: u32 = 22;
pub const SEC_ASN1_UTC_TIME: u32 = 23;
pub const SEC_ASN1_GENERALIZED_TIME: u32 = 24;
pub const SEC_ASN1_GRAPHIC_STRING: u32 = 25;
pub const SEC_ASN1_VISIBLE_STRING: u32 = 26;
pub const SEC_ASN1_GENERAL_STRING: u32 = 27;
pub const SEC_ASN1_UNIVERSAL_STRING: u32 = 28;
pub const SEC_ASN1_BMP_STRING: u32 = 30;
pub const SEC_ASN1_HIGH_TAG_NUMBER: u32 = 31;
pub const SEC_ASN1_TELETEX_STRING: u32 = 20;
pub const SEC_ASN1_METHOD_MASK: u32 = 32;
pub const SEC_ASN1_PRIMITIVE: u32 = 0;
pub const SEC_ASN1_CONSTRUCTED: u32 = 32;
pub const SEC_ASN1_CLASS_MASK: u32 = 192;
pub const SEC_ASN1_UNIVERSAL: u32 = 0;
pub const SEC_ASN1_APPLICATION: u32 = 64;
pub const SEC_ASN1_CONTEXT_SPECIFIC: u32 = 128;
pub const SEC_ASN1_PRIVATE: u32 = 192;
pub const SEC_ASN1_OPTIONAL: u32 = 256;
pub const SEC_ASN1_EXPLICIT: u32 = 512;
pub const SEC_ASN1_ANY: u32 = 1024;
pub const SEC_ASN1_INLINE: u32 = 2048;
pub const SEC_ASN1_POINTER: u32 = 4096;
pub const SEC_ASN1_GROUP: u32 = 8192;
pub const SEC_ASN1_DYNAMIC: u32 = 16384;
pub const SEC_ASN1_SKIP: u32 = 32768;
pub const SEC_ASN1_INNER: u32 = 65536;
pub const SEC_ASN1_SAVE: u32 = 131072;
pub const SEC_ASN1_SKIP_REST: u32 = 524288;
pub const SEC_ASN1_CHOICE: u32 = 1048576;
pub const SEC_ASN1_SIGNED_INT: u32 = 8388608;
pub const SEC_ASN1_SEQUENCE_OF: u32 = 8208;
pub const SEC_ASN1_SET_OF: u32 = 8209;
pub const SEC_ASN1_ANY_CONTENTS: u32 = 66560;
pub const _X509DEFS_H_: u32 = 1;
pub const BER_TAG_UNKNOWN: u32 = 0;
pub const BER_TAG_BOOLEAN: u32 = 1;
pub const BER_TAG_INTEGER: u32 = 2;
pub const BER_TAG_BIT_STRING: u32 = 3;
pub const BER_TAG_OCTET_STRING: u32 = 4;
pub const BER_TAG_NULL: u32 = 5;
pub const BER_TAG_OID: u32 = 6;
pub const BER_TAG_OBJECT_DESCRIPTOR: u32 = 7;
pub const BER_TAG_EXTERNAL: u32 = 8;
pub const BER_TAG_REAL: u32 = 9;
pub const BER_TAG_ENUMERATED: u32 = 10;
pub const BER_TAG_PKIX_UTF8_STRING: u32 = 12;
pub const BER_TAG_SEQUENCE: u32 = 16;
pub const BER_TAG_SET: u32 = 17;
pub const BER_TAG_NUMERIC_STRING: u32 = 18;
pub const BER_TAG_PRINTABLE_STRING: u32 = 19;
pub const BER_TAG_T61_STRING: u32 = 20;
pub const BER_TAG_TELETEX_STRING: u32 = 20;
pub const BER_TAG_VIDEOTEX_STRING: u32 = 21;
pub const BER_TAG_IA5_STRING: u32 = 22;
pub const BER_TAG_UTC_TIME: u32 = 23;
pub const BER_TAG_GENERALIZED_TIME: u32 = 24;
pub const BER_TAG_GRAPHIC_STRING: u32 = 25;
pub const BER_TAG_ISO646_STRING: u32 = 26;
pub const BER_TAG_GENERAL_STRING: u32 = 27;
pub const BER_TAG_VISIBLE_STRING: u32 = 26;
pub const BER_TAG_PKIX_UNIVERSAL_STRING: u32 = 28;
pub const BER_TAG_PKIX_BMP_STRING: u32 = 30;
pub const _CSSMAPPLE_H_: u32 = 1;
pub const _CSSMERR_H_: u32 = 1;
pub const CE_KU_DigitalSignature: u32 = 32768;
pub const CE_KU_NonRepudiation: u32 = 16384;
pub const CE_KU_KeyEncipherment: u32 = 8192;
pub const CE_KU_DataEncipherment: u32 = 4096;
pub const CE_KU_KeyAgreement: u32 = 2048;
pub const CE_KU_KeyCertSign: u32 = 1024;
pub const CE_KU_CRLSign: u32 = 512;
pub const CE_KU_EncipherOnly: u32 = 256;
pub const CE_KU_DecipherOnly: u32 = 128;
pub const CE_CR_Unspecified: u32 = 0;
pub const CE_CR_KeyCompromise: u32 = 1;
pub const CE_CR_CACompromise: u32 = 2;
pub const CE_CR_AffiliationChanged: u32 = 3;
pub const CE_CR_Superseded: u32 = 4;
pub const CE_CR_CessationOfOperation: u32 = 5;
pub const CE_CR_CertificateHold: u32 = 6;
pub const CE_CR_RemoveFromCRL: u32 = 8;
pub const CE_CD_Unspecified: u32 = 128;
pub const CE_CD_KeyCompromise: u32 = 64;
pub const CE_CD_CACompromise: u32 = 32;
pub const CE_CD_AffiliationChanged: u32 = 16;
pub const CE_CD_Superseded: u32 = 8;
pub const CE_CD_CessationOfOperation: u32 = 4;
pub const CE_CD_CertificateHold: u32 = 2;
pub const CSSM_APPLE_TP_SSL_OPTS_VERSION: u32 = 1;
pub const CSSM_APPLE_TP_SSL_CLIENT: u32 = 1;
pub const CSSM_APPLE_TP_CRL_OPTS_VERSION: u32 = 0;
pub const CSSM_APPLE_TP_SMIME_OPTS_VERSION: u32 = 0;
pub const CSSM_APPLE_TP_ACTION_VERSION: u32 = 0;
pub const CSSM_TP_APPLE_EVIDENCE_VERSION: u32 = 0;
pub const CSSM_EVIDENCE_FORM_APPLE_CUSTOM: u32 = 2147483648;
pub const CSSM_APPLE_CRL_END_OF_TIME: &[u8; 15usize] = b"99991231235959\0";
pub const kKeychainSuffix: &[u8; 10usize] = b".keychain\0";
pub const kKeychainDbSuffix: &[u8; 13usize] = b".keychain-db\0";
pub const kSystemKeychainName: &[u8; 16usize] = b"System.keychain\0";
pub const kSystemKeychainDir: &[u8; 20usize] = b"/Library/Keychains/\0";
pub const kSystemUnlockFile: &[u8; 18usize] = b"/var/db/SystemKey\0";
pub const kSystemKeychainPath: &[u8; 35usize] = b"/Library/Keychains/System.keychain\0";
pub const CSSM_APPLE_ACL_TAG_PARTITION_ID: &[u8; 16usize] = b"___PARTITION___\0";
pub const CSSM_APPLE_ACL_TAG_INTEGRITY: &[u8; 16usize] = b"___INTEGRITY___\0";
pub const errSecErrnoBase: u32 = 100000;
pub const errSecErrnoLimit: u32 = 100255;
pub const SEC_KEYCHAIN_SETTINGS_VERS1: u32 = 1;
pub const SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION: u32 = 0;
pub const __AuthSession__: u32 = 1;
pub const kAuthorizationExternalFormLength: u32 = 32;
pub const _CSSM_H_: u32 = 1;
pub const _EMMTYPE_H_: u32 = 1;
pub const CSSM_HINT_CALLBACK: u32 = 1;
pub const CSSM_MANAGER_SERVICE_REQUEST: u32 = 1;
pub const CSSM_MANAGER_REPLY: u32 = 2;
pub const _CSSMAPI_H_: u32 = 1;
pub const _CSSMACI_H_: u32 = 1;
pub const _CSSMCLI_H_: u32 = 1;
pub const _CSSMCSPI_H_: u32 = 1;
pub const _CSSMSPI_H_: u32 = 1;
pub const _CSSMDLI_H_: u32 = 1;
pub const _CSSMKRAPI_H_: u32 = 1;
pub const CSSM_KR_INDIV_POLICY: u32 = 1;
pub const CSSM_KR_ENT_POLICY: u32 = 2;
pub const CSSM_KR_LE_MAN_POLICY: u32 = 3;
pub const CSSM_KR_LE_USE_POLICY: u32 = 4;
pub const CSSM_KR_INDIV: u32 = 1;
pub const CSSM_KR_ENT: u32 = 2;
pub const CSSM_KR_LE_MAN: u32 = 4;
pub const CSSM_KR_LE_USE: u32 = 8;
pub const CSSM_KR_LE: u32 = 12;
pub const CSSM_KR_OPTIMIZE: u32 = 16;
pub const CSSM_KR_DROP_WORKFACTOR: u32 = 32;
pub const _CSSMKRSPI_H_: u32 = 1;
pub const _CSSMTPI_H_: u32 = 1;
pub const _EMMSPI_H_: u32 = 1;
pub const _MDS_H_: u32 = 1;
pub const _MDS_SCHEMA_H_: u32 = 1;
pub const MDS_OBJECT_DIRECTORY_NAME: &[u8; 21usize] = b"MDS Object Directory\0";
pub const MDS_CDSA_DIRECTORY_NAME: &[u8; 19usize] = b"MDS CDSA Directory\0";
pub const CSSM_DB_RELATIONID_MDS_START: u32 = 1073741824;
pub const CSSM_DB_RELATIONID_MDS_END: u32 = 1073758208;
pub const MDS_OBJECT_RECORDTYPE: u32 = 1073741824;
pub const MDS_CDSA_SCHEMA_START: u32 = 1073741824;
pub const MDS_CDSADIR_CSSM_RECORDTYPE: u32 = 1073741825;
pub const MDS_CDSADIR_KRMM_RECORDTYPE: u32 = 1073741826;
pub const MDS_CDSADIR_EMM_RECORDTYPE: u32 = 1073741827;
pub const MDS_CDSADIR_COMMON_RECORDTYPE: u32 = 1073741828;
pub const MDS_CDSADIR_CSP_PRIMARY_RECORDTYPE: u32 = 1073741829;
pub const MDS_CDSADIR_CSP_CAPABILITY_RECORDTYPE: u32 = 1073741830;
pub const MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_RECORDTYPE: u32 = 1073741831;
pub const MDS_CDSADIR_CSP_SC_INFO_RECORDTYPE: u32 = 1073741832;
pub const MDS_CDSADIR_DL_PRIMARY_RECORDTYPE: u32 = 1073741833;
pub const MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_RECORDTYPE: u32 = 1073741834;
pub const MDS_CDSADIR_CL_PRIMARY_RECORDTYPE: u32 = 1073741835;
pub const MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_RECORDTYPE: u32 = 1073741836;
pub const MDS_CDSADIR_TP_PRIMARY_RECORDTYPE: u32 = 1073741837;
pub const MDS_CDSADIR_TP_OIDS_RECORDTYPE: u32 = 1073741838;
pub const MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_RECORDTYPE: u32 = 1073741839;
pub const MDS_CDSADIR_EMM_PRIMARY_RECORDTYPE: u32 = 1073741840;
pub const MDS_CDSADIR_AC_PRIMARY_RECORDTYPE: u32 = 1073741841;
pub const MDS_CDSADIR_KR_PRIMARY_RECORDTYPE: u32 = 1073741842;
pub const MDS_CDSADIR_MDS_SCHEMA_RELATIONS: u32 = 1073741843;
pub const MDS_CDSADIR_MDS_SCHEMA_ATTRIBUTES: u32 = 1073741844;
pub const MDS_CDSADIR_MDS_SCHEMA_INDEXES: u32 = 1073741845;
pub const CSSM_DB_ATTRIBUTE_MDS_START: u32 = 1073741824;
pub const CSSM_DB_ATTRIBUTE_MDS_END: u32 = 1073758208;
pub const MDS_CDSAATTR_MODULE_ID: u32 = 1073741825;
pub const MDS_CDSAATTR_MANIFEST: u32 = 1073741826;
pub const MDS_CDSAATTR_MODULE_NAME: u32 = 1073741827;
pub const MDS_CDSAATTR_PATH: u32 = 1073741828;
pub const MDS_CDSAATTR_CDSAVERSION: u32 = 1073741829;
pub const MDS_CDSAATTR_VENDOR: u32 = 1073741830;
pub const MDS_CDSAATTR_DESC: u32 = 1073741832;
pub const MDS_CDSAATTR_INTERFACE_GUID: u32 = 1073741833;
pub const MDS_CDSAATTR_POLICY_STMT: u32 = 1073741834;
pub const MDS_CDSAATTR_EMMSPECVERSION: u32 = 1073741835;
pub const MDS_CDSAATTR_EMM_VERSION: u32 = 1073741836;
pub const MDS_CDSAATTR_EMM_VENDOR: u32 = 1073741837;
pub const MDS_CDSAATTR_EMM_TYPE: u32 = 1073741838;
pub const MDS_CDSAATTR_SSID: u32 = 1073741839;
pub const MDS_CDSAATTR_SERVICE_TYPE: u32 = 1073741840;
pub const MDS_CDSAATTR_NATIVE_SERVICES: u32 = 1073741841;
pub const MDS_CDSAATTR_DYNAMIC_FLAG: u32 = 1073741842;
pub const MDS_CDSAATTR_MULTITHREAD_FLAG: u32 = 1073741843;
pub const MDS_CDSAATTR_SERVICE_MASK: u32 = 1073741844;
pub const MDS_CDSAATTR_CSP_TYPE: u32 = 1073741845;
pub const MDS_CDSAATTR_CSP_FLAGS: u32 = 1073741846;
pub const MDS_CDSAATTR_CSP_CUSTOMFLAGS: u32 = 1073741847;
pub const MDS_CDSAATTR_USEE_TAGS: u32 = 1073741848;
pub const MDS_CDSAATTR_CONTEXT_TYPE: u32 = 1073741849;
pub const MDS_CDSAATTR_ALG_TYPE: u32 = 1073741850;
pub const MDS_CDSAATTR_GROUP_ID: u32 = 1073741851;
pub const MDS_CDSAATTR_ATTRIBUTE_TYPE: u32 = 1073741852;
pub const MDS_CDSAATTR_ATTRIBUTE_VALUE: u32 = 1073741853;
pub const MDS_CDSAATTR_PRODUCT_DESC: u32 = 1073741854;
pub const MDS_CDSAATTR_PRODUCT_VENDOR: u32 = 1073741855;
pub const MDS_CDSAATTR_PRODUCT_VERSION: u32 = 1073741856;
pub const MDS_CDSAATTR_PRODUCT_FLAGS: u32 = 1073741857;
pub const MDS_CDSAATTR_PRODUCT_CUSTOMFLAGS: u32 = 1073741858;
pub const MDS_CDSAATTR_STANDARD_DESC: u32 = 1073741859;
pub const MDS_CDSAATTR_STANDARD_VERSION: u32 = 1073741860;
pub const MDS_CDSAATTR_READER_DESC: u32 = 1073741861;
pub const MDS_CDSAATTR_READER_VENDOR: u32 = 1073741862;
pub const MDS_CDSAATTR_READER_VERSION: u32 = 1073741863;
pub const MDS_CDSAATTR_READER_FWVERSION: u32 = 1073741864;
pub const MDS_CDSAATTR_READER_FLAGS: u32 = 1073741865;
pub const MDS_CDSAATTR_READER_CUSTOMFLAGS: u32 = 1073741866;
pub const MDS_CDSAATTR_READER_SERIALNUMBER: u32 = 1073741867;
pub const MDS_CDSAATTR_SC_DESC: u32 = 1073741868;
pub const MDS_CDSAATTR_SC_VENDOR: u32 = 1073741869;
pub const MDS_CDSAATTR_SC_VERSION: u32 = 1073741870;
pub const MDS_CDSAATTR_SC_FWVERSION: u32 = 1073741871;
pub const MDS_CDSAATTR_SC_FLAGS: u32 = 1073741872;
pub const MDS_CDSAATTR_SC_CUSTOMFLAGS: u32 = 1073741873;
pub const MDS_CDSAATTR_SC_SERIALNUMBER: u32 = 1073741874;
pub const MDS_CDSAATTR_DL_TYPE: u32 = 1073741875;
pub const MDS_CDSAATTR_QUERY_LIMITS: u32 = 1073741876;
pub const MDS_CDSAATTR_CONJUNCTIVE_OPS: u32 = 1073741877;
pub const MDS_CDSAATTR_RELATIONAL_OPS: u32 = 1073741878;
pub const MDS_CDSAATTR_PROTOCOL: u32 = 1073741879;
pub const MDS_CDSAATTR_CERT_TYPEFORMAT: u32 = 1073741880;
pub const MDS_CDSAATTR_CRL_TYPEFORMAT: u32 = 1073741881;
pub const MDS_CDSAATTR_CERT_FIELDNAMES: u32 = 1073741882;
pub const MDS_CDSAATTR_BUNDLE_TYPEFORMAT: u32 = 1073741883;
pub const MDS_CDSAATTR_CERT_CLASSNAME: u32 = 1073741884;
pub const MDS_CDSAATTR_ROOTCERT: u32 = 1073741885;
pub const MDS_CDSAATTR_ROOTCERT_TYPEFORMAT: u32 = 1073741886;
pub const MDS_CDSAATTR_VALUE: u32 = 1073741887;
pub const MDS_CDSAATTR_REQCREDENTIALS: u32 = 1073741888;
pub const MDS_CDSAATTR_SAMPLETYPES: u32 = 1073741889;
pub const MDS_CDSAATTR_ACLSUBJECTTYPES: u32 = 1073741890;
pub const MDS_CDSAATTR_AUTHTAGS: u32 = 1073741891;
pub const MDS_CDSAATTR_USEETAG: u32 = 1073741892;
pub const MDS_CDSAATTR_RETRIEVALMODE: u32 = 1073741893;
pub const MDS_CDSAATTR_OID: u32 = 1073741894;
pub const MDS_CDSAATTR_XLATIONTYPEFORMAT: u32 = 1073741895;
pub const MDS_CDSAATTR_DEFAULT_TEMPLATE_TYPE: u32 = 1073741896;
pub const MDS_CDSAATTR_TEMPLATE_FIELD_NAMES: u32 = 1073741897;
pub const MDS_CDSAATTR_AUTHORITY_REQUEST_TYPE: u32 = 1073741898;
pub const MDS_OBJECT_NUM_RELATIONS: u32 = 1;
pub const MDS_OBJECT_NUM_ATTRIBUTES: u32 = 4;
pub const MDS_CDSADIR_NUM_RELATIONS: u32 = 19;
pub const MDS_CDSADIR_CSSM_NUM_ATTRIBUTES: u32 = 4;
pub const MDS_CDSADIR_EMM_NUM_ATTRIBUTES: u32 = 11;
pub const MDS_CDSADIR_COMMON_NUM_ATTRIBUTES: u32 = 9;
pub const MDS_CDSADIR_CSP_PRIMARY_NUM_ATTRIBUTES: u32 = 13;
pub const MDS_CDSADIR_CSP_CAPABILITY_NUM_ATTRIBUTES: u32 = 9;
pub const MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES: u32 = 16;
pub const MDS_CDSADIR_CSP_SC_INFO_NUM_ATTRIBUTES: u32 = 9;
pub const MDS_CDSADIR_DL_PRIMARY_NUM_ATTRIBUTES: u32 = 13;
pub const MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES: u32 = 10;
pub const MDS_CDSADIR_CL_PRIMARY_NUM_ATTRIBUTES: u32 = 13;
pub const MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES: u32 = 8;
pub const MDS_CDSADIR_TP_PRIMARY_NUM_ATTRIBUTES: u32 = 10;
pub const MDS_CDSADIR_TP_OIDS_NUM_ATTRIBUTES: u32 = 4;
pub const MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES: u32 = 14;
pub const MDS_CDSADIR_EMM_PRIMARY_NUM_ATTRIBUTES: u32 = 9;
pub const MDS_CDSADIR_AC_PRIMARY_NUM_ATTRIBUTES: u32 = 6;
pub const MDS_CDSADIR_SCHEMA_RELATONS_NUM_ATTRIBUTES: u32 = 2;
pub const MDS_CDSADIR_SCHEMA_ATTRIBUTES_NUM_ATTRIBUTES: u32 = 6;
pub const MDS_CDSADIR_SCHEMA_INDEXES_NUM_ATTRIBUTES: u32 = 5;
pub const _OIDSBASE_H_: u32 = 1;
pub const INTEL_LENGTH: u32 = 7;
pub const INTEL_CDSASECURITY_LENGTH: u32 = 8;
pub const INTEL_SEC_FORMATS_LENGTH: u32 = 9;
pub const INTEL_SEC_ALGS_LENGTH: u32 = 10;
pub const INTEL_SEC_OBJECT_BUNDLE_LENGTH: u32 = 10;
pub const INTEL_CERT_AND_PRIVATE_KEY_2_0_LENGTH: u32 = 11;
pub const INTEL_X509_C_DATATYPE: u32 = 1;
pub const INTEL_X509_LDAPSTRING_DATATYPE: u32 = 2;
pub const OID_ISO_CCITT_DIR_SERVICE: u32 = 85;
pub const OID_DS: u32 = 85;
pub const OID_DS_LENGTH: u32 = 1;
pub const OID_ATTR_TYPE_LENGTH: u32 = 2;
pub const OID_EXTENSION_LENGTH: u32 = 2;
pub const OID_ISO_STANDARD: u32 = 40;
pub const OID_ISO_MEMBER: u32 = 42;
pub const OID_ISO_IDENTIFIED_ORG: u32 = 43;
pub const OID_ITU_RFCDATA_MEMBER_LENGTH: u32 = 1;
pub const OID_ITU_RFCDATA: u32 = 9;
pub const OID_ISO_MEMBER_LENGTH: u32 = 1;
pub const OID_US_LENGTH: u32 = 3;
pub const OID_RSA_LENGTH: u32 = 6;
pub const OID_RSA_HASH_LENGTH: u32 = 7;
pub const OID_RSA_ENCRYPT_LENGTH: u32 = 7;
pub const OID_PKCS_LENGTH: u32 = 7;
pub const OID_PKCS_1_LENGTH: u32 = 8;
pub const OID_PKCS_3_LENGTH: u32 = 8;
pub const OID_PKCS_5_LENGTH: u32 = 8;
pub const OID_PKCS_7_LENGTH: u32 = 8;
pub const OID_PKCS_9_LENGTH: u32 = 8;
pub const OID_PKCS_11_LENGTH: u32 = 8;
pub const OID_PKCS_12_LENGTH: u32 = 8;
pub const OID_ANSI_X9_42_LEN: u32 = 6;
pub const OID_ANSI_X9_42_SCHEME_LEN: u32 = 7;
pub const OID_ANSI_X9_42_NAMED_SCHEME_LEN: u32 = 7;
pub const OID_ANSI_X9_62_LEN: u32 = 5;
pub const OID_ANSI_X9_62_ELL_CURVE_LEN: u32 = 6;
pub const OID_ANSI_X9_62_SIG_TYPE_LEN: u32 = 6;
pub const OID_PKIX_LENGTH: u32 = 6;
pub const OID_PE_LENGTH: u32 = 7;
pub const OID_QT_LENGTH: u32 = 7;
pub const OID_KP_LENGTH: u32 = 7;
pub const OID_OTHER_NAME_LENGTH: u32 = 7;
pub const OID_PDA_LENGTH: u32 = 7;
pub const OID_QCS_LENGTH: u32 = 7;
pub const OID_AD_LENGTH: u32 = 7;
pub const OID_AD_OCSP_LENGTH: u32 = 8;
pub const OID_ETSI_LENGTH: u32 = 2;
pub const OID_ETSI_QCS_LENGTH: u32 = 5;
pub const OID_OIW_LENGTH: u32 = 2;
pub const OID_OIW_SECSIG_LENGTH: u32 = 3;
pub const OID_OIW_ALGORITHM_LENGTH: u32 = 4;
pub const OID_NIST_HASHALG_LENGTH: u32 = 8;
pub const OID_KERBv5_LEN: u32 = 5;
pub const OID_KERBv5_PKINIT_LEN: u32 = 6;
pub const OID_CERTICOM_LEN: u32 = 3;
pub const OID_CERTICOM_ELL_CURVE_LEN: u32 = 4;
pub const APPLE_OID_LENGTH: u32 = 6;
pub const APPLE_ADS_OID_LENGTH: u32 = 7;
pub const APPLE_TP_OID_LENGTH: u32 = 8;
pub const APPLE_ALG_OID_LENGTH: u32 = 8;
pub const APPLE_DOTMAC_CERT_OID_LENGTH: u32 = 8;
pub const APPLE_DOTMAC_CERT_REQ_OID_LENGTH: u32 = 9;
pub const APPLE_DOTMAC_CERT_EXTEN_OID_LENGTH: u32 = 9;
pub const APPLE_DOTMAC_CERT_REQ_VALUE_OID_LENGTH: u32 = 9;
pub const APPLE_EKU_OID_LENGTH: u32 = 8;
pub const APPLE_EKU_CODE_SIGNING_LENGTH: u32 = 9;
pub const APPLE_CERT_POLICIES_LENGTH: u32 = 8;
pub const APPLE_CERT_POLICIES_MACAPPSTORE_LENGTH: u32 = 9;
pub const APPLE_CERT_POLICIES_MACAPPSTORE_RECEIPT_LENGTH: u32 = 10;
pub const APPLE_CERT_POLICIES_APPLEID_LENGTH: u32 = 9;
pub const APPLE_CERT_POLICIES_APPLEID_SHARING_LENGTH: u32 = 10;
pub const APPLE_CERT_POLICIES_MOBILE_STORE_SIGNING_LENGTH: u32 = 9;
pub const APPLE_CERT_POLICIES_TEST_MOBILE_STORE_SIGNING_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_OID_LENGTH: u32 = 8;
pub const APPLE_EXTENSION_CODE_SIGNING_LENGTH: u32 = 9;
pub const APPLE_EXTENSION_MACAPPSTORE_RECEIPT_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH: u32 = 9;
pub const APPLE_EXTENSION_WWDR_INTERMEDIATE_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_ITMS_INTERMEDIATE_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_AAI_INTERMEDIATE_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_APPLEID_INTERMEDIATE_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_SYSINT2_INTERMEDIATE_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_DEVELOPER_AUTHENTICATION_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_SERVER_AUTHENTICATION_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_ESCROW_SERVICE_LENGTH: u32 = 10;
pub const APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING_LENGTH: u32 = 9;
pub const APPLE_EXTENSION_APPLEID_SHARING_LENGTH: u32 = 9;
pub const NETSCAPE_BASE_OID_LEN: u32 = 7;
pub const NETSCAPE_CERT_EXTEN_LENGTH: u32 = 8;
pub const NETSCAPE_CERT_POLICY_LENGTH: u32 = 8;
pub const OID_ITU_RFCDATA_2342_LENGTH: u32 = 3;
pub const OID_ITU_RFCDATA_2342_UCL_LENGTH: u32 = 7;
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_LENGTH: u32 = 8;
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_LENGTH: u32 = 9;
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_DOMAINCOMPONENT_LENGTH: u32 = 10;
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_USERID_LENGTH: u32 = 10;
pub const _OIDSCERT_H_: u32 = 1;
pub const INTEL_X509V3_CERT_R08_LENGTH: u32 = 11;
pub const INTEL_X509V3_CERT_PRIVATE_EXTENSIONS_LENGTH: u32 = 12;
pub const INTEL_X509V3_SIGN_R08_LENGTH: u32 = 11;
pub const CE_NCT_SSL_Client: u32 = 32768;
pub const CE_NCT_SSL_Server: u32 = 16384;
pub const CE_NCT_SMIME: u32 = 8192;
pub const CE_NCT_ObjSign: u32 = 4096;
pub const CE_NCT_Reserved: u32 = 2048;
pub const CE_NCT_SSL_CA: u32 = 1024;
pub const CE_NCT_SMIME_CA: u32 = 512;
pub const CE_NCT_ObjSignCA: u32 = 256;
pub const _OIDSCRL_H_: u32 = 1;
pub const INTEL_X509V2_CRL_R08_LENGTH: u32 = 11;
pub const kAuthorizationEnvironmentUsername: &[u8; 9usize] = b"username\0";
pub const kAuthorizationEnvironmentPassword: &[u8; 9usize] = b"password\0";
pub const kAuthorizationEnvironmentShared: &[u8; 7usize] = b"shared\0";
pub const kAuthorizationRightExecute: &[u8; 23usize] = b"system.privilege.admin\0";
pub const kAuthorizationEnvironmentPrompt: &[u8; 7usize] = b"prompt\0";
pub const kAuthorizationEnvironmentIcon: &[u8; 5usize] = b"icon\0";
pub const kAuthorizationPamResult: &[u8; 11usize] = b"pam_result\0";
pub const kAuthorizationFlags: &[u8; 6usize] = b"flags\0";
pub const kAuthorizationRightRule: &[u8; 5usize] = b"rule\0";
pub const kAuthorizationRuleIsAdmin: &[u8; 9usize] = b"is-admin\0";
pub const kAuthorizationRuleAuthenticateAsSessionUser: &[u8; 27usize] =
    b"authenticate-session-owner\0";
pub const kAuthorizationRuleAuthenticateAsAdmin: &[u8; 19usize] = b"authenticate-admin\0";
pub const kAuthorizationRuleClassAllow: &[u8; 6usize] = b"allow\0";
pub const kAuthorizationRuleClassDeny: &[u8; 5usize] = b"deny\0";
pub const kAuthorizationComment: &[u8; 8usize] = b"comment\0";
pub const __SEC_ENCRYPT_TRANSFORM__: u32 = 1;
pub const _EISL_H_: u32 = 1;
pub type max_align_t = f64;
extern "C" {
    pub fn cacosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn casinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn catanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ccosf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccos(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn csinf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csin(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ctanf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctan(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cacoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn casinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn catanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ccoshf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn csinhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn ctanhf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanh(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cexpf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexp(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn clogf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clog(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cabsf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cabs(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cabsl(arg1: __BindgenComplex<u128>) -> f64;
}
extern "C" {
    pub fn cpowf(arg1: __BindgenComplex<f32>, arg2: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpow(arg1: __BindgenComplex<f64>, arg2: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(
        arg1: __BindgenComplex<u128>,
        arg2: __BindgenComplex<u128>,
    ) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn csqrtf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrt(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cargf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn carg(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cargl(arg1: __BindgenComplex<u128>) -> f64;
}
extern "C" {
    pub fn cimagf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cimag(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cimagl(arg1: __BindgenComplex<u128>) -> f64;
}
extern "C" {
    pub fn conjf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn conj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn conjl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn cprojf(arg1: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cproj(arg1: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(arg1: __BindgenComplex<u128>) -> __BindgenComplex<u128>;
}
extern "C" {
    pub fn crealf(arg1: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn creal(arg1: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creall(arg1: __BindgenComplex<u128>) -> f64;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _copyfile_state {
    _unused: [u8; 0],
}
pub type copyfile_state_t = *mut _copyfile_state;
pub type copyfile_flags_t = u32;
extern "C" {
    pub fn copyfile(
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        state: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcopyfile(
        from_fd: ::std::os::raw::c_int,
        to_fd: ::std::os::raw::c_int,
        arg1: copyfile_state_t,
        flags: copyfile_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_free(arg1: copyfile_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_alloc() -> copyfile_state_t;
}
extern "C" {
    pub fn copyfile_state_get(
        s: copyfile_state_t,
        flag: u32,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile_state_set(
        s: copyfile_state_t,
        flag: u32,
        src: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type copyfile_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: copyfile_state_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn err(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    ) -> !;
}
extern "C" {
    pub fn errc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> !;
}
extern "C" {
    pub fn verrc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: __darwin_va_list,
    ) -> !;
}
extern "C" {
    pub fn errx(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn verrx(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    ) -> !;
}
extern "C" {
    pub fn warn(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarn(arg1: *const ::std::os::raw::c_char, arg2: __darwin_va_list);
}
extern "C" {
    pub fn warnc(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnc(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    );
}
extern "C" {
    pub fn warnx(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vwarnx(arg1: *const ::std::os::raw::c_char, arg2: __darwin_va_list);
}
extern "C" {
    pub fn err_set_file(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn err_set_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn err_set_exit_b(arg1: *mut ::std::os::raw::c_void);
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fenv_t {
    pub __fpsr: ::std::os::raw::c_ulonglong,
    pub __fpcr: ::std::os::raw::c_ulonglong,
}
pub type fexcept_t = ::std::os::raw::c_ushort;
pub const __fpcr_trap_invalid: _bindgen_ty_1 = 256;
pub const __fpcr_trap_divbyzero: _bindgen_ty_1 = 512;
pub const __fpcr_trap_overflow: _bindgen_ty_1 = 1024;
pub const __fpcr_trap_underflow: _bindgen_ty_1 = 2048;
pub const __fpcr_trap_inexact: _bindgen_ty_1 = 4096;
pub const __fpcr_trap_denormal: _bindgen_ty_1 = 32768;
pub const __fpcr_flush_to_zero: _bindgen_ty_1 = 16777216;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const __fpsr_saturation: _bindgen_ty_2 = 134217728;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub static _FE_DFL_ENV: fenv_t;
}
extern "C" {
    pub static _FE_DFL_DISABLE_DENORMS_ENV: fenv_t;
}
extern "C" {
    pub fn feclearexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetexceptflag(
        arg1: *mut fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feraiseexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetexceptflag(
        arg1: *const fexcept_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fetestexcept(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetround() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetround(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fegetenv(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feholdexcept(arg1: *mut fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fesetenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feupdateenv(arg1: *const fenv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
extern "C" {
    pub fn readpassphrase(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type jmp_buf = [::std::os::raw::c_int; 48usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 49usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn longjmperror();
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
pub type ucontext_t = __darwin_ucontext;
pub type pid_t = __darwin_pid_t;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type pthread_t = __darwin_pthread_t;
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type rsize_t = ::std::os::raw::c_ulong;
pub const memory_order_memory_order_relaxed: memory_order = 0;
pub const memory_order_memory_order_consume: memory_order = 1;
pub const memory_order_memory_order_acquire: memory_order = 2;
pub const memory_order_memory_order_release: memory_order = 3;
pub const memory_order_memory_order_acq_rel: memory_order = 4;
pub const memory_order_memory_order_seq_cst: memory_order = 5;
pub type memory_order = ::std::os::raw::c_uint;
extern "C" {
    pub fn atomic_thread_fence(arg1: memory_order);
}
extern "C" {
    pub fn atomic_signal_fence(arg1: memory_order);
}
pub type atomic_bool = u8;
pub type atomic_char = u8;
pub type atomic_schar = u8;
pub type atomic_uchar = u8;
pub type atomic_short = u16;
pub type atomic_ushort = u16;
pub type atomic_int = u32;
pub type atomic_uint = u32;
pub type atomic_long = u64;
pub type atomic_ulong = u64;
pub type atomic_llong = u64;
pub type atomic_ullong = u64;
pub type atomic_char16_t = u16;
pub type atomic_char32_t = u32;
pub type atomic_wchar_t = u32;
pub type atomic_int_least8_t = u8;
pub type atomic_uint_least8_t = u8;
pub type atomic_int_least16_t = u16;
pub type atomic_uint_least16_t = u16;
pub type atomic_int_least32_t = u32;
pub type atomic_uint_least32_t = u32;
pub type atomic_int_least64_t = u64;
pub type atomic_uint_least64_t = u64;
pub type atomic_int_fast8_t = u8;
pub type atomic_uint_fast8_t = u8;
pub type atomic_int_fast16_t = u16;
pub type atomic_uint_fast16_t = u16;
pub type atomic_int_fast32_t = u32;
pub type atomic_uint_fast32_t = u32;
pub type atomic_int_fast64_t = u64;
pub type atomic_uint_fast64_t = u64;
pub type atomic_intptr_t = u64;
pub type atomic_uintptr_t = u64;
pub type atomic_size_t = u64;
pub type atomic_ptrdiff_t = u64;
pub type atomic_intmax_t = u64;
pub type atomic_uintmax_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic_flag {
    pub _Value: atomic_bool,
}
extern "C" {
    pub fn atomic_flag_test_and_set(arg1: *mut atomic_flag) -> bool;
}
extern "C" {
    pub fn atomic_flag_test_and_set_explicit(arg1: *mut atomic_flag, arg2: memory_order) -> bool;
}
extern "C" {
    pub fn atomic_flag_clear(arg1: *mut atomic_flag);
}
extern "C" {
    pub fn atomic_flag_clear_explicit(arg1: *mut atomic_flag, arg2: memory_order);
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type id_t = __darwin_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_reserved: [u64; 14usize],
}
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub __bindgen_anon_1: wait__bindgen_ty_1,
    pub __bindgen_anon_2: wait__bindgen_ty_2,
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub type _Argument_type_is_not_arithmetic = ::std::os::raw::c_void;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
extern "C" {
    pub fn getpwuid(arg1: uid_t) -> *mut passwd;
}
extern "C" {
    pub fn getpwnam(arg1: *const ::std::os::raw::c_char) -> *mut passwd;
}
extern "C" {
    pub fn getpwuid_r(
        arg1: uid_t,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpwent() -> *mut passwd;
}
extern "C" {
    pub fn setpwent();
}
extern "C" {
    pub fn endpwent();
}
pub type uuid_t = __darwin_uuid_t;
pub type uuid_string_t = __darwin_uuid_string_t;
extern "C" {
    pub static UUID_NULL: uuid_t;
}
extern "C" {
    pub fn uuid_clear(uu: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_compare(
        uu1: *mut ::std::os::raw::c_uchar,
        uu2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_copy(dst: *mut ::std::os::raw::c_uchar, src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_random(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_generate_time(out: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn uuid_is_null(uu: *mut ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_parse(
        in_: *mut ::std::os::raw::c_char,
        uu: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uuid_unparse(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_lower(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn uuid_unparse_upper(uu: *mut ::std::os::raw::c_uchar, out: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setpassent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn user_from_uid(arg1: uid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpwuuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut passwd;
}
extern "C" {
    pub fn getpwuuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut passwd,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut passwd,
    ) -> ::std::os::raw::c_int;
}
pub type tcflag_t = ::std::os::raw::c_ulong;
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_cc: [cc_t; 20usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
extern "C" {
    pub fn cfgetispeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetospeed(arg1: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetispeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetospeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(arg1: ::std::os::raw::c_int, arg2: *mut termios) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsendbreak(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(arg1: *mut termios);
}
extern "C" {
    pub fn cfsetspeed(arg1: *mut termios, arg2: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn login(arg1: *mut utmp);
}
extern "C" {
    pub fn login_tty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logwtmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn opendev(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut termios,
        arg5: *mut winsize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fparseln(
        arg1: *mut FILE,
        arg2: *mut usize,
        arg3: *mut usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn forkpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut termios,
        arg4: *mut winsize,
    ) -> pid_t;
}
extern "C" {
    pub fn pidlock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttylock(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyunlock(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyaction(
        tty: *mut ::std::os::raw::c_char,
        act: *mut ::std::os::raw::c_char,
        user: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttymsg(
        arg1: *mut iovec,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlog {
    pub ll_time: time_t,
    pub ll_line: [::std::os::raw::c_char; 8usize],
    pub ll_host: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmp {
    pub ut_line: [::std::os::raw::c_char; 8usize],
    pub ut_name: [::std::os::raw::c_char; 8usize],
    pub ut_host: [::std::os::raw::c_char; 16usize],
    pub ut_time: ::std::os::raw::c_long,
}
pub type mbstate_t = __darwin_mbstate_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: ::std::os::raw::c_int, arg3: *mut FILE)
        -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const ::std::os::raw::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: __darwin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t, arg3: *mut mbstate_t)
        -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsftime(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(
        arg1: *const ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        arg1: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemmove(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: __darwin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut wchar_t, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize) -> usize;
}
pub type wctrans_t = __darwin_wctrans_t;
extern "C" {
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(arg1: *const ::std::os::raw::c_char) -> wctrans_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
extern "C" {
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _c_locale: locale_t;
}
extern "C" {
    pub fn duplocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn localeconv_l(arg1: locale_t) -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn querylocale(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn ___runetype_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune_l(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctype_t;
}
extern "C" {
    pub fn strtoimax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        nptr: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        nptr: *const wchar_t,
        endptr: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
        arg1: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn fprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> f64;
}
extern "C" {
    pub fn atoi_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mblen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtod_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtouq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasestr_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn btowc_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_l(
        arg1: *mut wchar_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: locale_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn fputws_l(arg1: *const wchar_t, arg2: *mut FILE, arg3: locale_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn getwchar_l(arg1: locale_t) -> wint_t;
}
extern "C" {
    pub fn mbrlen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc_l(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit_l(arg1: *const mbstate_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc_l(arg1: wchar_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn putwchar_l(arg1: wchar_t, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn swprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc_l(arg1: wint_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn vfwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf_l(
        arg1: *mut wchar_t,
        n: usize,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: wchar_t,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime_l(
        arg1: *mut wchar_t,
        arg2: usize,
        arg3: *const wchar_t,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstol_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswidth_l(arg1: *const wchar_t, arg2: usize, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        arg1: *mut wchar_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob_l(arg1: wint_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth_l(arg1: wchar_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf_l(arg1: locale_t, arg2: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf_l(
        arg1: *const wchar_t,
        arg2: locale_t,
        arg3: *const wchar_t,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf_l(
        arg1: locale_t,
        arg2: *const wchar_t,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(arg1: *const wchar_t, arg2: *mut *mut wchar_t, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstoll_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs_l(
        arg1: *mut wchar_t,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        n: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const wchar_t,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn fgetwln_l(arg1: *mut FILE, arg2: *mut usize, arg3: locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn nextwctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn towctrans_l(arg1: wint_t, arg2: wctrans_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctrans_t;
}
pub type nl_item = __darwin_nl_item;
extern "C" {
    pub fn nl_langinfo_l(arg1: nl_item, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
pub type regoff_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regex_t {
    pub re_magic: ::std::os::raw::c_int,
    pub re_nsub: usize,
    pub re_endp: *const ::std::os::raw::c_char,
    pub re_g: *mut re_guts,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_t {
    pub rm_so: regoff_t,
    pub rm_eo: regoff_t,
}
extern "C" {
    pub fn regcomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regncomp_l(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp_l(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec_l(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
        arg6: locale_t,
    ) -> ::std::os::raw::c_int;
}
pub type xattr_operation_intent_t = ::std::os::raw::c_uint;
pub type xattr_flags_t = u64;
extern "C" {
    pub fn xattr_preserve_for_intent(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_operation_intent_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xattr_name_with_flags(
        arg1: *const ::std::os::raw::c_char,
        arg2: xattr_flags_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_name_without_flags(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xattr_flags_from_name(arg1: *const ::std::os::raw::c_char) -> xattr_flags_t;
}
extern "C" {
    pub fn xattr_intent_with_flags(
        arg1: xattr_operation_intent_t,
        arg2: xattr_flags_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct aiocb {
    pub aio_fildes: ::std::os::raw::c_int,
    pub aio_offset: off_t,
    pub aio_buf: *mut ::std::os::raw::c_void,
    pub aio_nbytes: usize,
    pub aio_reqprio: ::std::os::raw::c_int,
    pub aio_sigevent: sigevent,
    pub aio_lio_opcode: ::std::os::raw::c_int,
}
extern "C" {
    pub fn aio_cancel(fd: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_error(aiocbp: *const aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_fsync(op: ::std::os::raw::c_int, aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_read(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_return(aiocbp: *mut aiocb) -> isize;
}
extern "C" {
    pub fn aio_suspend(
        aiocblist: *const *const aiocb,
        nent: ::std::os::raw::c_int,
        timeoutp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aio_write(aiocbp: *mut aiocb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lio_listio(
        mode: ::std::os::raw::c_int,
        aiocblist: *const *mut aiocb,
        nent: ::std::os::raw::c_int,
        sigp: *mut sigevent,
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __padding: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
extern "C" {
    pub fn closedir(arg1: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn opendir(arg1: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn readdir(arg1: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        arg1: *mut DIR,
        arg2: *mut dirent,
        arg3: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(arg1: *mut DIR);
}
extern "C" {
    pub fn seekdir(arg1: *mut DIR, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(arg1: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fdopendir(arg1: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn alphasort(arg1: *mut *const dirent, arg2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dirfd(dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut *mut dirent,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"]
    pub fn getdirentries(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __opendir2(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int)
        -> *mut DIR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_info {
    pub dli_fname: *const ::std::os::raw::c_char,
    pub dli_fbase: *mut ::std::os::raw::c_void,
    pub dli_sname: *const ::std::os::raw::c_char,
    pub dli_saddr: *mut ::std::os::raw::c_void,
}
pub type Dl_info = dl_info;
extern "C" {
    pub fn dladdr(arg1: *const ::std::os::raw::c_void, arg2: *mut Dl_info)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlclose(__handle: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlerror() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dlopen(
        __path: *const ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlsym(
        __handle: *mut ::std::os::raw::c_void,
        __symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dlopen_preflight(__path: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
pub type fspecread_t = fspecread;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_dprotected_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat_authenticated_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmtmsg(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fnmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
extern "C" {
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTW {
    pub base: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
extern "C" {
    pub fn ftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nftw(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const stat,
                arg3: ::std::os::raw::c_int,
                arg4: *mut FTW,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct glob_t {
    pub __bindgen_anon_1: glob_t__bindgen_ty_1,
    pub gl_pathc: usize,
    pub gl_matchc: ::std::os::raw::c_int,
    pub gl_offs: usize,
    pub gl_flags: ::std::os::raw::c_int,
    pub gl_pathv: *mut *mut ::std::os::raw::c_char,
    pub gl_closedir: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub gl_readdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut dirent,
    >,
    pub gl_opendir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub gl_lstat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_stat: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union glob_t__bindgen_ty_1 {
    pub gl_errfunc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub gl_errblk: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn glob(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glob_b(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut glob_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn globfree(arg1: *mut glob_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn getgrgid(arg1: gid_t) -> *mut group;
}
extern "C" {
    pub fn getgrnam(arg1: *const ::std::os::raw::c_char) -> *mut group;
}
extern "C" {
    pub fn getgrgid_r(
        arg1: gid_t,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrnam_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrent() -> *mut group;
}
extern "C" {
    pub fn setgrent();
}
extern "C" {
    pub fn endgrent();
}
extern "C" {
    pub fn group_from_gid(arg1: gid_t, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getgruuid(arg1: *mut ::std::os::raw::c_uchar) -> *mut group;
}
extern "C" {
    pub fn getgruuid_r(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut group,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut *mut group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgrfile(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setgroupent(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _libiconv_version: ::std::os::raw::c_int;
}
pub type iconv_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn iconv_open(
        __tocode: *const ::std::os::raw::c_char,
        __fromcode: *const ::std::os::raw::c_char,
    ) -> iconv_t;
}
extern "C" {
    pub fn iconv(
        __cd: iconv_t,
        __inbuf: *mut *mut ::std::os::raw::c_char,
        __inbytesleft: *mut usize,
        __outbuf: *mut *mut ::std::os::raw::c_char,
        __outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn iconv_close(_cd: iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iconvctl(
        cd: iconv_t,
        request: ::std::os::raw::c_int,
        argument: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type iconv_unicode_char_hook = ::std::option::Option<
    unsafe extern "C" fn(uc: ::std::os::raw::c_uint, data: *mut ::std::os::raw::c_void),
>;
pub type iconv_wide_char_hook =
    ::std::option::Option<unsafe extern "C" fn(wc: wchar_t, data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_hooks {
    pub uc_hook: iconv_unicode_char_hook,
    pub wc_hook: iconv_wide_char_hook,
    pub data: *mut ::std::os::raw::c_void,
}
pub type iconv_unicode_mb_to_uc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_uint,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_unicode_uc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: ::std::os::raw::c_uint,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_mb_to_wc_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        inbuf: *const ::std::os::raw::c_char,
        inbufsize: usize,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const wchar_t,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
pub type iconv_wchar_wc_to_mb_fallback = ::std::option::Option<
    unsafe extern "C" fn(
        code: wchar_t,
        write_replacement: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_char,
                buflen: usize,
                callback_arg: *mut ::std::os::raw::c_void,
            ),
        >,
        callback_arg: *mut ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconv_fallbacks {
    pub mb_to_uc_fallback: iconv_unicode_mb_to_uc_fallback,
    pub uc_to_mb_fallback: iconv_unicode_uc_to_mb_fallback,
    pub mb_to_wc_fallback: iconv_wchar_mb_to_wc_fallback,
    pub wc_to_mb_fallback: iconv_wchar_wc_to_mb_fallback,
    pub data: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn iconvlist(
        do_one: ::std::option::Option<
            unsafe extern "C" fn(
                namescount: ::std::os::raw::c_uint,
                names: *const *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn iconv_canonicalize(name: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn libiconv_set_relocation_prefix(
        orig_prefix: *const ::std::os::raw::c_char,
        curr_prefix: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddrs {
    pub ifa_next: *mut ifaddrs,
    pub ifa_name: *mut ::std::os::raw::c_char,
    pub ifa_flags: ::std::os::raw::c_uint,
    pub ifa_addr: *mut sockaddr,
    pub ifa_netmask: *mut sockaddr,
    pub ifa_dstaddr: *mut sockaddr,
    pub ifa_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmaddrs {
    pub ifma_next: *mut ifmaddrs,
    pub ifma_name: *mut sockaddr,
    pub ifma_addr: *mut sockaddr,
    pub ifma_lladdr: *mut sockaddr,
}
extern "C" {
    pub fn getifaddrs(arg1: *mut *mut ifaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifaddrs(arg1: *mut ifaddrs);
}
extern "C" {
    pub fn getifmaddrs(arg1: *mut *mut ifmaddrs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeifmaddrs(arg1: *mut ifmaddrs);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttysize {
    pub ts_lines: ::std::os::raw::c_ushort,
    pub ts_cols: ::std::os::raw::c_ushort,
    pub ts_xxx: ::std::os::raw::c_ushort,
    pub ts_yyy: ::std::os::raw::c_ushort,
}
extern "C" {
    pub fn ioctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nl_langinfo(arg1: nl_item) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn basename_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dirname_r(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strfmon(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct datum {
    pub dptr: *mut ::std::os::raw::c_void,
    pub dsize: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBM {
    pub __opaque: [::std::os::raw::c_char; 68usize],
}
extern "C" {
    pub fn dbm_clearerr(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_close(arg1: *mut DBM);
}
extern "C" {
    pub fn dbm_delete(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_dirfno(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_error(arg1: *mut DBM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbm_fetch(arg1: *mut DBM, arg2: datum) -> datum;
}
extern "C" {
    pub fn dbm_firstkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_forder(arg1: *mut DBM, arg2: datum) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dbm_nextkey(arg1: *mut DBM) -> datum;
}
extern "C" {
    pub fn dbm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: mode_t,
    ) -> *mut DBM;
}
extern "C" {
    pub fn dbm_store(
        arg1: *mut DBM,
        arg2: datum,
        arg3: datum,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub sdl_len: u_char,
    pub sdl_family: u_char,
    pub sdl_index: u_short,
    pub sdl_type: u_char,
    pub sdl_nlen: u_char,
    pub sdl_alen: u_char,
    pub sdl_slen: u_char,
    pub sdl_data: [::std::os::raw::c_char; 12usize],
}
extern "C" {
    pub fn link_addr(arg1: *const ::std::os::raw::c_char, arg2: *mut sockaddr_dl);
}
extern "C" {
    pub fn link_ntoa(arg1: *const sockaddr_dl) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct net_event_data {
    pub if_family: u_int32_t,
    pub if_unit: u_int32_t,
    pub if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval32 {
    pub tv_sec: __int32_t,
    pub tv_usec: __int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_data {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int32_t,
    pub ifi_ipackets: u_int32_t,
    pub ifi_ierrors: u_int32_t,
    pub ifi_opackets: u_int32_t,
    pub ifi_oerrors: u_int32_t,
    pub ifi_collisions: u_int32_t,
    pub ifi_ibytes: u_int32_t,
    pub ifi_obytes: u_int32_t,
    pub ifi_imcasts: u_int32_t,
    pub ifi_omcasts: u_int32_t,
    pub ifi_iqdrops: u_int32_t,
    pub ifi_noproto: u_int32_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
    pub ifi_unused2: u_int32_t,
    pub ifi_hwassist: u_int32_t,
    pub ifi_reserved1: u_int32_t,
    pub ifi_reserved2: u_int32_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct if_data64 {
    pub ifi_type: u_char,
    pub ifi_typelen: u_char,
    pub ifi_physical: u_char,
    pub ifi_addrlen: u_char,
    pub ifi_hdrlen: u_char,
    pub ifi_recvquota: u_char,
    pub ifi_xmitquota: u_char,
    pub ifi_unused1: u_char,
    pub ifi_mtu: u_int32_t,
    pub ifi_metric: u_int32_t,
    pub ifi_baudrate: u_int64_t,
    pub ifi_ipackets: u_int64_t,
    pub ifi_ierrors: u_int64_t,
    pub ifi_opackets: u_int64_t,
    pub ifi_oerrors: u_int64_t,
    pub ifi_collisions: u_int64_t,
    pub ifi_ibytes: u_int64_t,
    pub ifi_obytes: u_int64_t,
    pub ifi_imcasts: u_int64_t,
    pub ifi_omcasts: u_int64_t,
    pub ifi_iqdrops: u_int64_t,
    pub ifi_noproto: u_int64_t,
    pub ifi_recvtiming: u_int32_t,
    pub ifi_xmittiming: u_int32_t,
    pub ifi_lastchange: timeval32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifqueue {
    pub ifq_head: *mut ::std::os::raw::c_void,
    pub ifq_tail: *mut ::std::os::raw::c_void,
    pub ifq_len: ::std::os::raw::c_int,
    pub ifq_maxlen: ::std::os::raw::c_int,
    pub ifq_drops: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_clonereq {
    pub ifcr_total: ::std::os::raw::c_int,
    pub ifcr_count: ::std::os::raw::c_int,
    pub ifcr_buffer: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr {
    pub ifm_msglen: ::std::os::raw::c_ushort,
    pub ifm_version: ::std::os::raw::c_uchar,
    pub ifm_type: ::std::os::raw::c_uchar,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: ::std::os::raw::c_ushort,
    pub ifm_data: if_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifa_msghdr {
    pub ifam_msglen: ::std::os::raw::c_ushort,
    pub ifam_version: ::std::os::raw::c_uchar,
    pub ifam_type: ::std::os::raw::c_uchar,
    pub ifam_addrs: ::std::os::raw::c_int,
    pub ifam_flags: ::std::os::raw::c_int,
    pub ifam_index: ::std::os::raw::c_ushort,
    pub ifam_metric: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr {
    pub ifmam_msglen: ::std::os::raw::c_ushort,
    pub ifmam_version: ::std::os::raw::c_uchar,
    pub ifmam_type: ::std::os::raw::c_uchar,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_msghdr2 {
    pub ifm_msglen: u_short,
    pub ifm_version: u_char,
    pub ifm_type: u_char,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: u_short,
    pub ifm_snd_len: ::std::os::raw::c_int,
    pub ifm_snd_maxlen: ::std::os::raw::c_int,
    pub ifm_snd_drops: ::std::os::raw::c_int,
    pub ifm_timer: ::std::os::raw::c_int,
    pub ifm_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr2 {
    pub ifmam_msglen: u_short,
    pub ifmam_version: u_char,
    pub ifmam_type: u_char,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: u_short,
    pub ifmam_refcount: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifdevmtu {
    pub ifdm_current: ::std::os::raw::c_int,
    pub ifdm_min: ::std::os::raw::c_int,
    pub ifdm_max: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifkpi {
    pub __bindgen_anon_1: ifkpi__bindgen_ty_1,
    pub ifk_module_id: ::std::os::raw::c_uint,
    pub ifk_type: ::std::os::raw::c_uint,
    pub ifk_data: ifkpi__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifkpi__bindgen_ty_1 {
    pub ifk_ptr: *mut ::std::os::raw::c_void,
    pub ifk_value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub __bindgen_anon_1: ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_phys: ::std::os::raw::c_int,
    pub ifru_media: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_devmtu: ifdevmtu,
    pub ifru_kpi: ifkpi,
    pub ifru_wake_flags: u_int32_t,
    pub ifru_route_refcnt: u_int32_t,
    pub ifru_cap: [::std::os::raw::c_int; 2usize],
    pub ifru_functional_type: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr,
    pub ifra_broadaddr: sockaddr,
    pub ifra_mask: sockaddr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rslvmulti_req {
    pub sa: *mut sockaddr,
    pub llsa: *mut *mut sockaddr,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifmediareq {
    pub ifm_name: [::std::os::raw::c_char; 16usize],
    pub ifm_current: ::std::os::raw::c_int,
    pub ifm_mask: ::std::os::raw::c_int,
    pub ifm_status: ::std::os::raw::c_int,
    pub ifm_active: ::std::os::raw::c_int,
    pub ifm_count: ::std::os::raw::c_int,
    pub ifm_ulist: *mut ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ifdrv {
    pub ifd_name: [::std::os::raw::c_char; 16usize],
    pub ifd_cmd: ::std::os::raw::c_ulong,
    pub ifd_len: usize,
    pub ifd_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifstat {
    pub ifs_name: [::std::os::raw::c_char; 16usize],
    pub ascii: [::std::os::raw::c_char; 801usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub __bindgen_anon_1: ifconf__bindgen_ty_1,
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: caddr_t,
    pub ifcu_req: *mut ifreq,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_dl_proto_data {
    pub link_data: net_event_data,
    pub proto_family: u_int32_t,
    pub proto_remaining_count: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_nameindex {
    pub if_index: ::std::os::raw::c_uint,
    pub if_name: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn if_nametoindex(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn if_indextoname(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn if_nameindex() -> *mut if_nameindex;
}
extern "C" {
    pub fn if_freenameindex(arg1: *mut if_nameindex);
}
pub type tcp_seq = __uint32_t;
pub type tcp_cc = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr {
    pub th_sport: ::std::os::raw::c_ushort,
    pub th_dport: ::std::os::raw::c_ushort,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: ::std::os::raw::c_uchar,
    pub th_win: ::std::os::raw::c_ushort,
    pub th_sum: ::std::os::raw::c_ushort,
    pub th_urp: ::std::os::raw::c_ushort,
}
impl tcphdr {
    #[inline]
    pub fn th_x2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: ::std::os::raw::c_uint,
        th_off: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u32 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u32 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_connection_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_snd_wscale: u_int8_t,
    pub tcpi_rcv_wscale: u_int8_t,
    pub __pad1: u_int8_t,
    pub tcpi_options: u_int32_t,
    pub tcpi_flags: u_int32_t,
    pub tcpi_rto: u_int32_t,
    pub tcpi_maxseg: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_snd_wnd: u_int32_t,
    pub tcpi_snd_sbbytes: u_int32_t,
    pub tcpi_rcv_wnd: u_int32_t,
    pub tcpi_rttcur: u_int32_t,
    pub tcpi_srtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub tcpi_txpackets: u_int64_t,
    pub tcpi_txbytes: u_int64_t,
    pub tcpi_txretransmitbytes: u_int64_t,
    pub tcpi_rxpackets: u_int64_t,
    pub tcpi_rxbytes: u_int64_t,
    pub tcpi_rxoutoforderbytes: u_int64_t,
    pub tcpi_txretransmitpackets: u_int64_t,
}
impl tcp_connection_info {
    #[inline]
    pub fn tcpi_tfo_cookie_req(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_loss(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_loss(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_acked(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_acked(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_syn_data_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_syn_data_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_req_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_req_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_sent(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_sent(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_invalid(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_invalid(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_cookie_wrong(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_cookie_wrong(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_no_cookie_rcv(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_no_cookie_rcv(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_heuristics_disable(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_heuristics_disable(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_send_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_send_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_recv_blackhole(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_recv_blackhole(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_tfo_onebyte_proxy(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tcpi_tfo_onebyte_proxy(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pad2(&self) -> u_int32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set___pad2(&mut self, val: u_int32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_tfo_cookie_req: u_int32_t,
        tcpi_tfo_cookie_rcv: u_int32_t,
        tcpi_tfo_syn_loss: u_int32_t,
        tcpi_tfo_syn_data_sent: u_int32_t,
        tcpi_tfo_syn_data_acked: u_int32_t,
        tcpi_tfo_syn_data_rcv: u_int32_t,
        tcpi_tfo_cookie_req_rcv: u_int32_t,
        tcpi_tfo_cookie_sent: u_int32_t,
        tcpi_tfo_cookie_invalid: u_int32_t,
        tcpi_tfo_cookie_wrong: u_int32_t,
        tcpi_tfo_no_cookie_rcv: u_int32_t,
        tcpi_tfo_heuristics_disable: u_int32_t,
        tcpi_tfo_send_blackhole: u_int32_t,
        tcpi_tfo_recv_blackhole: u_int32_t,
        tcpi_tfo_onebyte_proxy: u_int32_t,
        __pad2: u_int32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tcpi_tfo_cookie_req: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req) };
            tcpi_tfo_cookie_req as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tcpi_tfo_cookie_rcv: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_rcv) };
            tcpi_tfo_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tcpi_tfo_syn_loss: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_syn_loss) };
            tcpi_tfo_syn_loss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tcpi_tfo_syn_data_sent: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_sent) };
            tcpi_tfo_syn_data_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tcpi_tfo_syn_data_acked: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_acked) };
            tcpi_tfo_syn_data_acked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tcpi_tfo_syn_data_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_syn_data_rcv) };
            tcpi_tfo_syn_data_rcv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tcpi_tfo_cookie_req_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_req_rcv) };
            tcpi_tfo_cookie_req_rcv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tcpi_tfo_cookie_sent: u32 = unsafe { ::std::mem::transmute(tcpi_tfo_cookie_sent) };
            tcpi_tfo_cookie_sent as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tcpi_tfo_cookie_invalid: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_invalid) };
            tcpi_tfo_cookie_invalid as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tcpi_tfo_cookie_wrong: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_cookie_wrong) };
            tcpi_tfo_cookie_wrong as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tcpi_tfo_no_cookie_rcv: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_no_cookie_rcv) };
            tcpi_tfo_no_cookie_rcv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tcpi_tfo_heuristics_disable: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_heuristics_disable) };
            tcpi_tfo_heuristics_disable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tcpi_tfo_send_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_send_blackhole) };
            tcpi_tfo_send_blackhole as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tcpi_tfo_recv_blackhole: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_recv_blackhole) };
            tcpi_tfo_recv_blackhole as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tcpi_tfo_onebyte_proxy: u32 =
                unsafe { ::std::mem::transmute(tcpi_tfo_onebyte_proxy) };
            tcpi_tfo_onebyte_proxy as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let __pad2: u32 = unsafe { ::std::mem::transmute(__pad2) };
            __pad2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __nl_cat_d {
    pub __data: *mut ::std::os::raw::c_void,
    pub __size: ::std::os::raw::c_int,
}
pub type nl_catd = *mut __nl_cat_d;
extern "C" {
    pub fn catopen(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> nl_catd;
}
extern "C" {
    pub fn catgets(
        arg1: nl_catd,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn catclose(arg1: nl_catd) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: ::std::os::raw::c_int,
    pub events: ::std::os::raw::c_short,
    pub revents: ::std::os::raw::c_short,
}
pub type nfds_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn poll(
        arg1: *mut pollfd,
        arg2: nfds_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_yield_np();
}
extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
pub type posix_spawnattr_t = *mut ::std::os::raw::c_void;
pub type posix_spawn_file_actions_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn posix_spawn(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnp(
        arg1: *mut pid_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const posix_spawn_file_actions_t,
        arg4: *const posix_spawnattr_t,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addclose(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_adddup2(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addopen(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_destroy(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_init(
        arg1: *mut posix_spawn_file_actions_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_destroy(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigdefault(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getflags(
        arg1: *const posix_spawnattr_t,
        arg2: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getpgroup(
        arg1: *const posix_spawnattr_t,
        arg2: *mut pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getsigmask(
        arg1: *const posix_spawnattr_t,
        arg2: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_init(arg1: *mut posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigdefault(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setflags(
        arg1: *mut posix_spawnattr_t,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setpgroup(
        arg1: *mut posix_spawnattr_t,
        arg2: pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setsigmask(
        arg1: *mut posix_spawnattr_t,
        arg2: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type boolean_t = ::std::os::raw::c_int;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type vm32_offset_t = u32;
pub type vm32_address_t = u32;
pub type vm32_size_t = u32;
pub type mach_port_context_t = vm_offset_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
    pub flags: u32,
    pub mpl: mach_port_limits_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
pub type arm_state_hdr_t = arm_state_hdr;
pub type arm_thread_state_t = __darwin_arm_thread_state;
pub type arm_thread_state32_t = __darwin_arm_thread_state;
pub type arm_thread_state64_t = __darwin_arm_thread_state64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct arm_unified_thread_state {
    pub __bindgen_anon_1: arm_unified_thread_state__bindgen_ty_1,
    pub ash: arm_state_hdr_t,
    pub uts: arm_unified_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union arm_unified_thread_state__bindgen_ty_1 {
    pub ts_32: arm_thread_state32_t,
    pub ts_64: arm_thread_state64_t,
}
pub type arm_unified_thread_state_t = arm_unified_thread_state;
pub type arm_vfp_state_t = __darwin_arm_vfp_state;
pub type arm_neon_state_t = __darwin_arm_neon_state;
pub type arm_neon_state32_t = __darwin_arm_neon_state;
pub type arm_neon_state64_t = __darwin_arm_neon_state64;
pub type arm_exception_state_t = __darwin_arm_exception_state;
pub type arm_exception_state32_t = __darwin_arm_exception_state;
pub type arm_exception_state64_t = __darwin_arm_exception_state64;
pub type arm_debug_state32_t = __darwin_arm_debug_state32;
pub type arm_debug_state64_t = __darwin_arm_debug_state64;
pub type arm_pagein_state_t = __arm_pagein_state;
pub type arm_debug_state_t = __arm_legacy_debug_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
extern "C" {
    pub fn posix_spawnattr_getbinpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_getarchpref_np(
        arg1: *const posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setauditsessionport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setbinpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setarchpref_np(
        arg1: *mut posix_spawnattr_t,
        arg2: usize,
        arg3: *mut cpu_type_t,
        arg4: *mut cpu_subtype_t,
        arg5: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setexceptionports_np(
        arg1: *mut posix_spawnattr_t,
        arg2: exception_mask_t,
        arg3: mach_port_t,
        arg4: exception_behavior_t,
        arg5: thread_state_flavor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setspecialport_np(
        arg1: *mut posix_spawnattr_t,
        arg2: mach_port_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_setnosmt_np(attr: *const posix_spawnattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_csm_np(
        attr: *const posix_spawnattr_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addinherit_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawn_file_actions_addfchdir_np(
        arg1: *mut posix_spawn_file_actions_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_set_qos_class_np(
        __attr: *mut posix_spawnattr_t,
        __qos_class: qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_spawnattr_get_qos_class_np(
        __attr: *const posix_spawnattr_t,
        __qos_class: *mut qos_class_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pthread_mutex_enable_legacy_mode();
}
extern "C" {
    pub fn pthread_create_from_mach_thread(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regcomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regerror(
        arg1: ::std::os::raw::c_int,
        arg2: *const regex_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> usize;
}
extern "C" {
    pub fn regexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regfree(arg1: *mut regex_t);
}
extern "C" {
    pub fn regncomp(
        arg1: *mut regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regnexec(
        arg1: *const regex_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwcomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        __pmatch: *mut regmatch_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwncomp(
        arg1: *mut regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn regwnexec(
        arg1: *const regex_t,
        arg2: *const wchar_t,
        arg3: usize,
        arg4: usize,
        __pmatch: *mut regmatch_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry {
    pub key: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
}
pub type ENTRY = entry;
pub const ACTION_FIND: ACTION = 0;
pub const ACTION_ENTER: ACTION = 1;
pub type ACTION = ::std::os::raw::c_uint;
pub const VISIT_preorder: VISIT = 0;
pub const VISIT_postorder: VISIT = 1;
pub const VISIT_endorder: VISIT = 2;
pub const VISIT_leaf: VISIT = 3;
pub type VISIT = ::std::os::raw::c_uint;
extern "C" {
    pub fn hcreate(arg1: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hdestroy();
}
extern "C" {
    pub fn hsearch(arg1: ENTRY, arg2: ACTION) -> *mut ENTRY;
}
extern "C" {
    pub fn insque(arg1: *mut ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn remque(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn tdelete(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tfind(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn tsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn twalk(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: VISIT,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
pub type sem_t = ::std::os::raw::c_int;
extern "C" {
    pub fn sem_close(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_destroy(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_getvalue(
        arg1: *mut sem_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_init(
        arg1: *mut sem_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> *mut sem_t;
}
extern "C" {
    pub fn sem_post(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_trywait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sem_wait(arg1: *mut sem_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kevent {
    pub ident: usize,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: isize,
    pub udata: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kevent64_s {
    pub ident: u64,
    pub filter: i16,
    pub flags: u16,
    pub fflags: u32,
    pub data: i64,
    pub udata: u64,
    pub ext: [u64; 2usize],
}
pub const eNoteReapDeprecated: _bindgen_ty_3 = 268435456;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const eNoteExitReparentedDeprecated: _bindgen_ty_4 = 524288;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct knote {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct klist {
    pub slh_first: *mut knote,
}
extern "C" {
    pub fn kqueue() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent,
        nevents: ::std::os::raw::c_int,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kevent64(
        kq: ::std::os::raw::c_int,
        changelist: *const kevent64_s,
        nchanges: ::std::os::raw::c_int,
        eventlist: *mut kevent64_s,
        nevents: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgrp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_ident {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct extern_proc {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1,
    pub p_un: extern_proc__bindgen_ty_1,
    pub p_vmspace: *mut vmspace,
    pub p_sigacts: *mut sigacts,
    pub p_flag: ::std::os::raw::c_int,
    pub p_stat: ::std::os::raw::c_char,
    pub p_pid: pid_t,
    pub p_oppid: pid_t,
    pub p_dupfd: ::std::os::raw::c_int,
    pub user_stack: caddr_t,
    pub exit_thread: *mut ::std::os::raw::c_void,
    pub p_debugger: ::std::os::raw::c_int,
    pub sigwait: boolean_t,
    pub p_estcpu: u_int,
    pub p_cpticks: ::std::os::raw::c_int,
    pub p_pctcpu: fixpt_t,
    pub p_wchan: *mut ::std::os::raw::c_void,
    pub p_wmesg: *mut ::std::os::raw::c_char,
    pub p_swtime: u_int,
    pub p_slptime: u_int,
    pub p_realtimer: itimerval,
    pub p_rtime: timeval,
    pub p_uticks: u_quad_t,
    pub p_sticks: u_quad_t,
    pub p_iticks: u_quad_t,
    pub p_traceflag: ::std::os::raw::c_int,
    pub p_tracep: *mut vnode,
    pub p_siglist: ::std::os::raw::c_int,
    pub p_textvp: *mut vnode,
    pub p_holdcnt: ::std::os::raw::c_int,
    pub p_sigmask: sigset_t,
    pub p_sigignore: sigset_t,
    pub p_sigcatch: sigset_t,
    pub p_priority: u_char,
    pub p_usrpri: u_char,
    pub p_nice: ::std::os::raw::c_char,
    pub p_comm: [::std::os::raw::c_char; 17usize],
    pub p_pgrp: *mut pgrp,
    pub p_addr: *mut user,
    pub p_xstat: u_short,
    pub p_acflag: u_short,
    pub p_ru: *mut rusage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union extern_proc__bindgen_ty_1 {
    pub __bindgen_anon_1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub p_st1: extern_proc__bindgen_ty_1__bindgen_ty_1,
    pub __p_starttime: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extern_proc__bindgen_ty_1__bindgen_ty_1 {
    pub __p_forw: *mut proc_,
    pub __p_back: *mut proc_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct label {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pseminfo {
    pub psem_flags: ::std::os::raw::c_uint,
    pub psem_usecount: ::std::os::raw::c_uint,
    pub psem_mode: mode_t,
    pub psem_uid: uid_t,
    pub psem_gid: gid_t,
    pub psem_name: [::std::os::raw::c_char; 32usize],
    pub psem_semobject: *mut ::std::os::raw::c_void,
    pub psem_label: *mut label,
    pub psem_creator_pid: pid_t,
    pub psem_creator_uniqueid: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
    pub uid: uid_t,
    pub gid: gid_t,
    pub cuid: uid_t,
    pub cgid: gid_t,
    pub mode: mode_t,
    pub _seq: ::std::os::raw::c_ushort,
    pub _key: key_t,
}
extern "C" {
    pub fn ftok(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> key_t;
}
extern "C" {
    pub fn mlockall(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlockall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mmap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mprotect(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msync(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munlock(arg1: *const ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn munmap(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shm_unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madvise(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mincore(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn minherit(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type msgqnum_t = ::std::os::raw::c_ulong;
pub type msglen_t = ::std::os::raw::c_ulong;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msqid_ds_new {
    pub msg_perm: ipc_perm,
    pub msg_first: __int32_t,
    pub msg_last: __int32_t,
    pub msg_cbytes: msglen_t,
    pub msg_qnum: msgqnum_t,
    pub msg_qbytes: msglen_t,
    pub msg_lspid: pid_t,
    pub msg_lrpid: pid_t,
    pub msg_stime: time_t,
    pub msg_pad1: __int32_t,
    pub msg_rtime: time_t,
    pub msg_pad2: __int32_t,
    pub msg_ctime: time_t,
    pub msg_pad3: __int32_t,
    pub msg_pad4: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg {
    pub msg_next: *mut msg,
    pub msg_type: ::std::os::raw::c_long,
    pub msg_ts: ::std::os::raw::c_ushort,
    pub msg_spot: ::std::os::raw::c_short,
    pub label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mymsg {
    pub mtype: ::std::os::raw::c_long,
    pub mtext: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msginfo {
    pub msgmax: ::std::os::raw::c_int,
    pub msgmni: ::std::os::raw::c_int,
    pub msgmnb: ::std::os::raw::c_int,
    pub msgtql: ::std::os::raw::c_int,
    pub msgssz: ::std::os::raw::c_int,
    pub msgseg: ::std::os::raw::c_int,
}
extern "C" {
    pub fn msgsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __msqid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgget(arg1: key_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgrcv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn msgsnd(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __semid_ds_new {
    pub sem_perm: ipc_perm,
    pub sem_base: __int32_t,
    pub sem_nsems: ::std::os::raw::c_ushort,
    pub sem_otime: time_t,
    pub sem_pad1: __int32_t,
    pub sem_ctime: time_t,
    pub sem_pad2: __int32_t,
    pub sem_pad3: [__int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem {
    pub semval: ::std::os::raw::c_ushort,
    pub sempid: pid_t,
    pub semncnt: ::std::os::raw::c_ushort,
    pub semzcnt: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sembuf {
    pub sem_num: ::std::os::raw::c_ushort,
    pub sem_op: ::std::os::raw::c_short,
    pub sem_flg: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union semun {
    pub val: ::std::os::raw::c_int,
    pub buf: *mut __semid_ds_new,
    pub array: *mut ::std::os::raw::c_ushort,
}
pub type semun_t = semun;
extern "C" {
    pub fn semsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semget(
        arg1: key_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn semop(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sembuf,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
pub type shmatt_t = ::std::os::raw::c_ushort;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __shmid_ds_new {
    pub shm_perm: ipc_perm,
    pub shm_segsz: usize,
    pub shm_lpid: pid_t,
    pub shm_cpid: pid_t,
    pub shm_nattch: shmatt_t,
    pub shm_atime: time_t,
    pub shm_dtime: time_t,
    pub shm_ctime: time_t,
    pub shm_internal: *mut ::std::os::raw::c_void,
}
extern "C" {
    pub fn shmsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn shmctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut __shmid_ds_new,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmdt(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shmget(arg1: key_t, arg2: usize, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshminfo {
    pub pshm_flags: ::std::os::raw::c_uint,
    pub pshm_usecount: ::std::os::raw::c_uint,
    pub pshm_length: off_t,
    pub pshm_mode: mode_t,
    pub pshm_uid: uid_t,
    pub pshm_gid: gid_t,
    pub pshm_name: [::std::os::raw::c_char; 32usize],
    pub pshm_memobject: *mut ::std::os::raw::c_void,
    pub pshm_label: *mut label,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: fsblkcnt_t,
    pub f_bfree: fsblkcnt_t,
    pub f_bavail: fsblkcnt_t,
    pub f_files: fsfilcnt_t,
    pub f_ffree: fsfilcnt_t,
    pub f_favail: fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
}
extern "C" {
    pub fn fstatvfs(arg1: ::std::os::raw::c_int, arg2: *mut statvfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statvfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut statvfs,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
extern "C" {
    pub fn times(arg1: *mut tms) -> clock_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
pub type fsobj_id_t = fsobj_id;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct secure_boot_cryptex_args {
    pub sbc_version: u_int32_t,
    pub sbc_4cc: u_int32_t,
    pub sbc_authentic_manifest_fd: ::std::os::raw::c_int,
    pub sbc_user_manifest_fd: ::std::os::raw::c_int,
    pub sbc_payload_fd: ::std::os::raw::c_int,
    pub sbc_flags: u_int64_t,
}
pub type secure_boot_cryptex_args_t = secure_boot_cryptex_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union graft_args {
    pub max_size: [u_int8_t; 512usize],
    pub sbc_args: secure_boot_cryptex_args_t,
}
pub type graftdmg_args_un = graft_args;
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext64 {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext64,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext64: *mut __darwin_mcontext64,
}
pub type ucontext64_t = __darwin_ucontext64;
pub const uio_rw_UIO_READ: uio_rw = 0;
pub const uio_rw_UIO_WRITE: uio_rw = 1;
pub type uio_rw = ::std::os::raw::c_uint;
extern "C" {
    pub fn readv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        arg1: ::std::os::raw::c_int,
        arg2: *const iovec,
        arg3: ::std::os::raw::c_int,
        arg4: off_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_len: ::std::os::raw::c_uchar,
    pub sun_family: sa_family_t,
    pub sun_path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utsname {
    pub sysname: [::std::os::raw::c_char; 256usize],
    pub nodename: [::std::os::raw::c_char; 256usize],
    pub release: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub machine: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn uname(arg1: *mut utsname) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn fgetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn setxattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetxattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
        position: u_int32_t,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn removexattr(
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fremovexattr(
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listxattr(
        path: *const ::std::os::raw::c_char,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn flistxattr(
        fd: ::std::os::raw::c_int,
        namebuff: *mut ::std::os::raw::c_char,
        size: usize,
        options: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_syslog$DARWIN_EXTSN"]
    pub fn syslog(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __darwin_va_list,
    );
}
extern "C" {
    pub fn ulimit(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freadlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
extern "C" {
    pub fn utime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const utimbuf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utmpx {
    pub ut_user: [::std::os::raw::c_char; 256usize],
    pub ut_id: [::std::os::raw::c_char; 4usize],
    pub ut_line: [::std::os::raw::c_char; 32usize],
    pub ut_pid: pid_t,
    pub ut_type: ::std::os::raw::c_short,
    pub ut_tv: timeval,
    pub ut_host: [::std::os::raw::c_char; 256usize],
    pub ut_pad: [__uint32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lastlogx {
    pub ll_tv: timeval,
    pub ll_line: [::std::os::raw::c_char; 32usize],
    pub ll_host: [::std::os::raw::c_char; 256usize],
}
extern "C" {
    pub fn endutxent();
}
extern "C" {
    pub fn endutxent_wtmp();
}
extern "C" {
    pub fn getlastlogx(arg1: uid_t, arg2: *mut lastlogx) -> *mut lastlogx;
}
extern "C" {
    pub fn getlastlogxbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut lastlogx,
    ) -> *mut lastlogx;
}
extern "C" {
    pub fn getutmp(arg1: *const utmpx, arg2: *mut utmp);
}
extern "C" {
    pub fn getutmpx(arg1: *const utmp, arg2: *mut utmpx);
}
extern "C" {
    pub fn getutxent() -> *mut utmpx;
}
extern "C" {
    pub fn getutxent_wtmp() -> *mut utmpx;
}
extern "C" {
    pub fn getutxid(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn getutxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn pututxline(arg1: *const utmpx) -> *mut utmpx;
}
extern "C" {
    pub fn setutxent();
}
extern "C" {
    pub fn setutxent_wtmp(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn utmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wtmpxname(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wordexp_t {
    pub we_wordc: usize,
    pub we_wordv: *mut *mut ::std::os::raw::c_char,
    pub we_offs: usize,
}
extern "C" {
    pub fn wordexp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut wordexp_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wordfree(arg1: *mut wordexp_t);
}
pub type bpf_int32 = i32;
pub type bpf_u_int32 = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
    pub bf_len: u_int,
    pub bf_insns: *mut bpf_insn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_stat {
    pub bs_recv: u_int,
    pub bs_drop: u_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_version {
    pub bv_major: u_short,
    pub bv_minor: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_hdr {
    pub bh_tstamp: timeval32,
    pub bh_caplen: bpf_u_int32,
    pub bh_datalen: bpf_u_int32,
    pub bh_hdrlen: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
    pub code: u_short,
    pub jt: u_char,
    pub jf: u_char,
    pub k: bpf_u_int32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bpf_dltlist {
    pub __bindgen_anon_1: bpf_dltlist__bindgen_ty_1,
    pub bfl_len: u_int32_t,
    pub bfl_u: bpf_dltlist__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union bpf_dltlist__bindgen_ty_1 {
    pub bflu_list: *mut u_int32_t,
    pub bflu_pad: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_header {
    pub ether_dhost: [u_char; 6usize],
    pub ether_shost: [u_char; 6usize],
    pub ether_type: u_short,
}
pub type ether_header_t = ether_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_addr {
    pub octet: [u_char; 6usize],
}
pub type ether_addr_t = ether_addr;
extern "C" {
    pub fn ether_hostton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_line(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ether_addr,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ether_ntoa(arg1: *const ether_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ether_aton(arg1: *const ::std::os::raw::c_char) -> *mut ether_addr;
}
extern "C" {
    pub fn ether_ntohost(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ether_addr,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arphdr {
    pub ar_hrd: u_short,
    pub ar_pro: u_short,
    pub ar_hln: u_char,
    pub ar_pln: u_char,
    pub ar_op: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arpreq {
    pub arp_pa: sockaddr,
    pub arp_ha: sockaddr,
    pub arp_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arpstat {
    pub txrequests: u32,
    pub txreplies: u32,
    pub txannounces: u32,
    pub rxrequests: u32,
    pub rxreplies: u32,
    pub received: u32,
    pub txconflicts: u32,
    pub invalidreqs: u32,
    pub reqnobufs: u32,
    pub dropped: u32,
    pub purged: u32,
    pub timeouts: u32,
    pub dupips: u32,
    pub inuse: u32,
    pub txurequests: u32,
    pub held: u32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct llc {
    pub __bindgen_anon_1: llc__bindgen_ty_1,
    pub llc_dsap: u_int8_t,
    pub llc_ssap: u_int8_t,
    pub llc_un: llc__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union llc__bindgen_ty_1 {
    pub __bindgen_anon_1: llc__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: llc__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: llc__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: llc__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: llc__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: llc__bindgen_ty_1__bindgen_ty_6,
    pub type_u: llc__bindgen_ty_1__bindgen_ty_1,
    pub type_i: llc__bindgen_ty_1__bindgen_ty_2,
    pub type_s: llc__bindgen_ty_1__bindgen_ty_3,
    pub type_frmr: llc__bindgen_ty_1__bindgen_ty_4,
    pub type_snap: llc__bindgen_ty_1__bindgen_ty_5,
    pub type_raw: llc__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_1 {
    pub control: u_int8_t,
    pub format_id: u_int8_t,
    pub class_id: u_int8_t,
    pub window_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_2 {
    pub num_snd_x2: u_int8_t,
    pub num_rcv_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_3 {
    pub control: u_int8_t,
    pub num_rcv_x2: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_4 {
    pub control: u_int8_t,
    pub frmr_rej_pdu0: u_int8_t,
    pub frmr_rej_pdu1: u_int8_t,
    pub frmr_control: u_int8_t,
    pub frmr_control_ext: u_int8_t,
    pub frmr_cause: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_5 {
    pub control: u_int8_t,
    pub org_code: [u_int8_t; 3usize],
    pub ether_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llc__bindgen_ty_1__bindgen_ty_6 {
    pub control: u_int8_t,
    pub control_ext: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct frmrinfo {
    pub frmr_rej_pdu0: u_int8_t,
    pub frmr_rej_pdu1: u_int8_t,
    pub frmr_control: u_int8_t,
    pub frmr_control_ext: u_int8_t,
    pub frmr_cause: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmedia_description {
    pub ifmt_word: ::std::os::raw::c_int,
    pub ifmt_string: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmibdata {
    pub ifmd_name: [::std::os::raw::c_char; 16usize],
    pub ifmd_pcount: ::std::os::raw::c_uint,
    pub ifmd_flags: ::std::os::raw::c_uint,
    pub ifmd_snd_len: ::std::os::raw::c_uint,
    pub ifmd_snd_maxlen: ::std::os::raw::c_uint,
    pub ifmd_snd_drops: ::std::os::raw::c_uint,
    pub ifmd_filler: [::std::os::raw::c_uint; 4usize],
    pub ifmd_data: if_data64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifs_iso_8802_3 {
    pub dot3StatsAlignmentErrors: u_int32_t,
    pub dot3StatsFCSErrors: u_int32_t,
    pub dot3StatsSingleCollisionFrames: u_int32_t,
    pub dot3StatsMultipleCollisionFrames: u_int32_t,
    pub dot3StatsSQETestErrors: u_int32_t,
    pub dot3StatsDeferredTransmissions: u_int32_t,
    pub dot3StatsLateCollisions: u_int32_t,
    pub dot3StatsExcessiveCollisions: u_int32_t,
    pub dot3StatsInternalMacTransmitErrors: u_int32_t,
    pub dot3StatsCarrierSenseErrors: u_int32_t,
    pub dot3StatsFrameTooLongs: u_int32_t,
    pub dot3StatsInternalMacReceiveErrors: u_int32_t,
    pub dot3StatsEtherChipSet: u_int32_t,
    pub dot3StatsMissedFrames: u_int32_t,
    pub dot3StatsCollFrequencies: [u_int32_t; 16usize],
    pub dot3Compliance: u_int32_t,
}
pub const dot3Vendors_dot3VendorAMD: dot3Vendors = 1;
pub const dot3Vendors_dot3VendorIntel: dot3Vendors = 2;
pub const dot3Vendors_dot3VendorNational: dot3Vendors = 4;
pub const dot3Vendors_dot3VendorFujitsu: dot3Vendors = 5;
pub const dot3Vendors_dot3VendorDigital: dot3Vendors = 6;
pub const dot3Vendors_dot3VendorWesternDigital: dot3Vendors = 7;
pub type dot3Vendors = ::std::os::raw::c_uint;
pub const dot3ChipSetAMD7990: _bindgen_ty_5 = 1;
pub const dot3ChipSetAMD79900: _bindgen_ty_5 = 2;
pub const dot3ChipSetAMD79C940: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const dot3ChipSetIntel82586: _bindgen_ty_6 = 1;
pub const dot3ChipSetIntel82596: _bindgen_ty_6 = 2;
pub const dot3ChipSetIntel82557: _bindgen_ty_6 = 3;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const dot3ChipSetNational8390: _bindgen_ty_7 = 1;
pub const dot3ChipSetNationalSonic: _bindgen_ty_7 = 2;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const dot3ChipSetFujitsu86950: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const dot3ChipSetDigitalDC21040: _bindgen_ty_9 = 1;
pub const dot3ChipSetDigitalDC21140: _bindgen_ty_9 = 2;
pub const dot3ChipSetDigitalDC21041: _bindgen_ty_9 = 3;
pub const dot3ChipSetDigitalDC21140A: _bindgen_ty_9 = 4;
pub const dot3ChipSetDigitalDC21142: _bindgen_ty_9 = 5;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const dot3ChipSetWesternDigital83C690: _bindgen_ty_10 = 1;
pub const dot3ChipSetWesternDigital83C790: _bindgen_ty_10 = 2;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_family_id {
    pub iffmid_len: u_int32_t,
    pub iffmid_id: u_int32_t,
    pub iffmid_str: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utun_stats_param {
    pub utsp_packets: u_int64_t,
    pub utsp_bytes: u_int64_t,
    pub utsp_errors: u_int64_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_cellular_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_min_queue_size: u_int32_t,
    pub ul_avg_queue_size: u_int32_t,
    pub ul_max_queue_size: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub config_inactivity_time: u_int32_t,
    pub config_backoff_time: u_int32_t,
    pub mss_recommended: u_int16_t,
    pub reserved_1: u_int16_t,
    pub reserved_2: u_int32_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
    pub reserved_5: u_int64_t,
    pub reserved_6: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_cellular_status {
    pub if_cell_u: if_cellular_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_cellular_status__bindgen_ty_1 {
    pub if_status_v1: if_cellular_status_v1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct if_wifi_status_v1 {
    pub valid_bitmask: u_int32_t,
    pub link_quality_metric: u_int32_t,
    pub ul_effective_bandwidth: u_int32_t,
    pub ul_max_bandwidth: u_int32_t,
    pub ul_min_latency: u_int32_t,
    pub ul_effective_latency: u_int32_t,
    pub ul_max_latency: u_int32_t,
    pub ul_retxt_level: u_int32_t,
    pub ul_bytes_lost: u_int32_t,
    pub ul_error_rate: u_int32_t,
    pub dl_effective_bandwidth: u_int32_t,
    pub dl_max_bandwidth: u_int32_t,
    pub dl_min_latency: u_int32_t,
    pub dl_effective_latency: u_int32_t,
    pub dl_max_latency: u_int32_t,
    pub dl_error_rate: u_int32_t,
    pub config_frequency: u_int32_t,
    pub config_multicast_rate: u_int32_t,
    pub scan_count: u_int32_t,
    pub scan_duration: u_int32_t,
    pub reserved_1: u_int64_t,
    pub reserved_2: u_int64_t,
    pub reserved_3: u_int64_t,
    pub reserved_4: u_int64_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_wifi_status {
    pub if_wifi_u: if_wifi_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_wifi_status__bindgen_ty_1 {
    pub if_status_v1: if_wifi_status_v1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_link_status {
    pub __bindgen_anon_1: if_link_status__bindgen_ty_1,
    pub ifsr_version: u_int32_t,
    pub ifsr_len: u_int32_t,
    pub ifsr_u: if_link_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_link_status__bindgen_ty_1 {
    pub ifsr_cell: if_cellular_status,
    pub ifsr_wifi: if_wifi_status,
}
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_1:
    ifnet_interface_advisory_version = 1;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_2:
    ifnet_interface_advisory_version = 2;
pub const ifnet_interface_advisory_version_IF_INTERFACE_ADVISORY_VERSION_CURRENT:
    ifnet_interface_advisory_version = 2;
pub type ifnet_interface_advisory_version = u8;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_TX:
    ifnet_interface_advisory_direction = 1;
pub const ifnet_interface_advisory_direction_IF_INTERFACE_ADVISORY_DIRECTION_RX:
    ifnet_interface_advisory_direction = 2;
pub type ifnet_interface_advisory_direction = u8;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_WIFI:
    ifnet_interface_advisory_interface_type = 1;
pub const ifnet_interface_advisory_interface_type_IF_INTERFACE_ADVISORY_INTERFACE_TYPE_CELL:
    ifnet_interface_advisory_interface_type = 2;
pub type ifnet_interface_advisory_interface_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_header {
    pub version: ifnet_interface_advisory_version,
    pub direction: ifnet_interface_advisory_direction,
    pub interface_type: ifnet_interface_advisory_interface_type,
    pub reserved: u8,
}
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_UP:
    ifnet_interface_advisory_rate_trend = 2147483647;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_DOWN:
    ifnet_interface_advisory_rate_trend = -2147483648;
pub const ifnet_interface_advisory_rate_trend_IF_INTERFACE_ADVISORY_RATE_SUGGESTION_RAMP_NEUTRAL:
    ifnet_interface_advisory_rate_trend = 0;
pub type ifnet_interface_advisory_rate_trend = i32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_capacity {
    pub rate_trend_suggestion: ifnet_interface_advisory_rate_trend,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
}
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_NOT_AVAIL:
    ifnet_interface_advisory_wifi_freq_band = 0;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_24GHZ:
    ifnet_interface_advisory_wifi_freq_band = 1;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_5GHZ:
    ifnet_interface_advisory_wifi_freq_band = 2;
pub const ifnet_interface_advisory_wifi_freq_band_IF_INTERFACE_ADVISORY_FREQ_BAND_WIFI_6GHZ:
    ifnet_interface_advisory_wifi_freq_band = 3;
pub type ifnet_interface_advisory_wifi_freq_band = u8;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_wifi_context {
    pub frequency_band: ifnet_interface_advisory_wifi_freq_band,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
    pub radio_coex: u8,
    pub wlan_duty_cycle: u16,
    pub wifi_observed_tx_bitrate: [u32; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory_cell_context {
    pub radio_access_technology: u8,
    pub reference_signal_level: i16,
    pub signal_level: i16,
    pub signal_quality: i8,
    pub uplink_bler: u8,
    pub downlink_bler: u8,
    pub bandwidth_limitation_indication: u8,
    pub cdrx_state: u8,
    pub cdrx_cycle: u16,
    pub estimated_outage_period: u16,
    pub outage_state: u8,
    pub __pad: u8,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_1 {
    pub version: u8,
    pub direction: u8,
    pub _reserved: u16,
    pub rate_trend_suggestion: i32,
    pub timestamp: u64,
    pub max_bandwidth: u64,
    pub total_byte_count: u64,
    pub average_throughput: u64,
    pub flushable_queue_size: u32,
    pub non_flushable_queue_size: u32,
    pub average_delay: u32,
    pub frequency_band: u8,
    pub intermittent_state: u8,
    pub estimated_intermittent_period: u16,
    pub single_outage_period: u16,
    pub bt_coex: u8,
    pub quality_score_delay: u8,
    pub quality_score_loss: u8,
    pub quality_score_channel: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2 {
    pub __bindgen_anon_1: ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub header: ifnet_interface_advisory_header,
    pub capacity: ifnet_interface_advisory_capacity,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifnet_interface_advisory__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub wifi_context: ifnet_interface_advisory_wifi_context,
    pub cell_context: ifnet_interface_advisory_cell_context,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_descriptor_common {
    pub itd_type: u8,
    pub _reserved: u8,
    pub itd_len: u16,
    pub itd_flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifnet_ip_addr {
    pub __bindgen_anon_1: ifnet_ip_addr__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union ifnet_ip_addr__bindgen_ty_1 {
    pub addr8: [u8; 16usize],
    pub addr16: [u16; 8usize],
    pub addr32: [u32; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ifnet_traffic_descriptor_inet {
    pub inet_common: ifnet_traffic_descriptor_common,
    pub inet_mask: u8,
    pub inet_ipver: u8,
    pub inet_proto: u8,
    pub _reserved: u8,
    pub inet_laddr: ifnet_ip_addr,
    pub inet_raddr: ifnet_ip_addr,
    pub inet_lport: u16,
    pub inet_rport: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action {
    pub ra_type: u8,
    pub _reserved: u8,
    pub ra_len: u16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet_traffic_rule_action_steer {
    pub ras_common: ifnet_traffic_rule_action,
    pub ras_qset_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_nke {
    pub nke_handle: ::std::os::raw::c_uint,
    pub nke_where: ::std::os::raw::c_uint,
    pub nke_flags: ::std::os::raw::c_int,
    pub reserved: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ndrv {
    pub snd_len: ::std::os::raw::c_uchar,
    pub snd_family: ::std::os::raw::c_uchar,
    pub snd_name: [::std::os::raw::c_uchar; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ndrv_demux_desc {
    pub __bindgen_anon_1: ndrv_demux_desc__bindgen_ty_1,
    pub type_: u_int16_t,
    pub length: u_int16_t,
    pub data: ndrv_demux_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ndrv_demux_desc__bindgen_ty_1 {
    pub ether_type: u_int16_t,
    pub sap: [u_int8_t; 3usize],
    pub snap: [u_int8_t; 5usize],
    pub other: [u_int8_t; 28usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndrv_protocol_desc {
    pub version: u_int32_t,
    pub protocol_family: u_int32_t,
    pub demux_count: u_int32_t,
    pub demux_list: *mut ndrv_demux_desc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_msg {
    pub sadb_msg_version: u_int8_t,
    pub sadb_msg_type: u_int8_t,
    pub sadb_msg_errno: u_int8_t,
    pub sadb_msg_satype: u_int8_t,
    pub sadb_msg_len: u_int16_t,
    pub sadb_msg_reserved: u_int16_t,
    pub sadb_msg_seq: u_int32_t,
    pub sadb_msg_pid: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ext {
    pub sadb_ext_len: u_int16_t,
    pub sadb_ext_type: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sa {
    pub sadb_sa_len: u_int16_t,
    pub sadb_sa_exttype: u_int16_t,
    pub sadb_sa_spi: u_int32_t,
    pub sadb_sa_replay: u_int8_t,
    pub sadb_sa_state: u_int8_t,
    pub sadb_sa_auth: u_int8_t,
    pub sadb_sa_encrypt: u_int8_t,
    pub sadb_sa_flags: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_lifetime {
    pub sadb_lifetime_len: u_int16_t,
    pub sadb_lifetime_exttype: u_int16_t,
    pub sadb_lifetime_allocations: u_int32_t,
    pub sadb_lifetime_bytes: u_int64_t,
    pub sadb_lifetime_addtime: u_int64_t,
    pub sadb_lifetime_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_address {
    pub sadb_address_len: u_int16_t,
    pub sadb_address_exttype: u_int16_t,
    pub sadb_address_proto: u_int8_t,
    pub sadb_address_prefixlen: u_int8_t,
    pub sadb_address_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_key {
    pub sadb_key_len: u_int16_t,
    pub sadb_key_exttype: u_int16_t,
    pub sadb_key_bits: u_int16_t,
    pub sadb_key_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_ident {
    pub sadb_ident_len: u_int16_t,
    pub sadb_ident_exttype: u_int16_t,
    pub sadb_ident_type: u_int16_t,
    pub sadb_ident_reserved: u_int16_t,
    pub sadb_ident_id: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sens {
    pub sadb_sens_len: u_int16_t,
    pub sadb_sens_exttype: u_int16_t,
    pub sadb_sens_dpd: u_int32_t,
    pub sadb_sens_sens_level: u_int8_t,
    pub sadb_sens_sens_len: u_int8_t,
    pub sadb_sens_integ_level: u_int8_t,
    pub sadb_sens_integ_len: u_int8_t,
    pub sadb_sens_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_prop {
    pub sadb_prop_len: u_int16_t,
    pub sadb_prop_exttype: u_int16_t,
    pub sadb_prop_replay: u_int8_t,
    pub sadb_prop_reserved: [u_int8_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_comb {
    pub sadb_comb_auth: u_int8_t,
    pub sadb_comb_encrypt: u_int8_t,
    pub sadb_comb_flags: u_int16_t,
    pub sadb_comb_auth_minbits: u_int16_t,
    pub sadb_comb_auth_maxbits: u_int16_t,
    pub sadb_comb_encrypt_minbits: u_int16_t,
    pub sadb_comb_encrypt_maxbits: u_int16_t,
    pub sadb_comb_reserved: u_int32_t,
    pub sadb_comb_soft_allocations: u_int32_t,
    pub sadb_comb_hard_allocations: u_int32_t,
    pub sadb_comb_soft_bytes: u_int64_t,
    pub sadb_comb_hard_bytes: u_int64_t,
    pub sadb_comb_soft_addtime: u_int64_t,
    pub sadb_comb_hard_addtime: u_int64_t,
    pub sadb_comb_soft_usetime: u_int64_t,
    pub sadb_comb_hard_usetime: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_supported {
    pub sadb_supported_len: u_int16_t,
    pub sadb_supported_exttype: u_int16_t,
    pub sadb_supported_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_alg {
    pub sadb_alg_id: u_int8_t,
    pub sadb_alg_ivlen: u_int8_t,
    pub sadb_alg_minbits: u_int16_t,
    pub sadb_alg_maxbits: u_int16_t,
    pub sadb_alg_reserved: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_spirange {
    pub sadb_spirange_len: u_int16_t,
    pub sadb_spirange_exttype: u_int16_t,
    pub sadb_spirange_min: u_int32_t,
    pub sadb_spirange_max: u_int32_t,
    pub sadb_spirange_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_kmprivate {
    pub sadb_x_kmprivate_len: u_int16_t,
    pub sadb_x_kmprivate_exttype: u_int16_t,
    pub sadb_x_kmprivate_reserved: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sadb_x_sa2 {
    pub __bindgen_anon_1: sadb_x_sa2__bindgen_ty_1,
    pub __bindgen_anon_2: sadb_x_sa2__bindgen_ty_2,
    pub sadb_x_sa2_len: u_int16_t,
    pub sadb_x_sa2_exttype: u_int16_t,
    pub sadb_x_sa2_mode: u_int8_t,
    pub sadb_x_sa2_sequence: u_int32_t,
    pub sadb_x_sa2_reqid: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_1 {
    pub sadb_x_sa2_reserved1: u_int8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sadb_x_sa2__bindgen_ty_2 {
    pub sadb_x_sa2_reserved2: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_policy {
    pub sadb_x_policy_len: u_int16_t,
    pub sadb_x_policy_exttype: u_int16_t,
    pub sadb_x_policy_type: u_int16_t,
    pub sadb_x_policy_dir: u_int8_t,
    pub sadb_x_policy_reserved: u_int8_t,
    pub sadb_x_policy_id: u_int32_t,
    pub sadb_x_policy_reserved2: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_x_ipsecrequest {
    pub sadb_x_ipsecrequest_len: u_int16_t,
    pub sadb_x_ipsecrequest_proto: u_int16_t,
    pub sadb_x_ipsecrequest_mode: u_int8_t,
    pub sadb_x_ipsecrequest_level: u_int8_t,
    pub sadb_x_ipsecrequest_reqid: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sadb_session_id {
    pub sadb_session_id_len: u_int16_t,
    pub sadb_session_id_exttype: u_int16_t,
    pub sadb_session_id_v: [u_int64_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sastat {
    pub spi: u_int32_t,
    pub created: u_int32_t,
    pub lft_c: sadb_lifetime,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct sadb_sastat {
    pub sadb_sastat_len: u_int16_t,
    pub sadb_sastat_exttype: u_int16_t,
    pub sadb_sastat_dir: u_int32_t,
    pub sadb_sastat_reserved: u_int32_t,
    pub sadb_sastat_list_len: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_metrics {
    pub rmx_locks: u_int32_t,
    pub rmx_mtu: u_int32_t,
    pub rmx_hopcount: u_int32_t,
    pub rmx_expire: i32,
    pub rmx_recvpipe: u_int32_t,
    pub rmx_sendpipe: u_int32_t,
    pub rmx_ssthresh: u_int32_t,
    pub rmx_rtt: u_int32_t,
    pub rmx_rttvar: u_int32_t,
    pub rmx_pksent: u_int32_t,
    pub rmx_state: u_int32_t,
    pub rmx_filler: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtstat {
    pub rts_badredirect: ::std::os::raw::c_short,
    pub rts_dynamic: ::std::os::raw::c_short,
    pub rts_newgateway: ::std::os::raw::c_short,
    pub rts_unreach: ::std::os::raw::c_short,
    pub rts_wildcard: ::std::os::raw::c_short,
    pub rts_badrtgwroute: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_pid: pid_t,
    pub rtm_seq: ::std::os::raw::c_int,
    pub rtm_errno: ::std::os::raw::c_int,
    pub rtm_use: ::std::os::raw::c_int,
    pub rtm_inits: u_int32_t,
    pub rtm_rmx: rt_metrics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr2 {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_refcnt: i32,
    pub rtm_parentflags: ::std::os::raw::c_int,
    pub rtm_reserved: ::std::os::raw::c_int,
    pub rtm_use: ::std::os::raw::c_int,
    pub rtm_inits: u_int32_t,
    pub rtm_rmx: rt_metrics,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_addrinfo {
    pub rti_addrs: ::std::os::raw::c_int,
    pub rti_info: [*mut sockaddr; 8usize],
}
pub type n_short = __uint16_t;
pub type n_long = __uint32_t;
pub type n_time = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ip_tos: u_char,
    pub ip_len: u_short,
    pub ip_id: u_short,
    pub ip_off: u_short,
    pub ip_ttl: u_char,
    pub ip_p: u_char,
    pub ip_sum: u_short,
    pub ip_src: in_addr,
    pub ip_dst: in_addr,
}
impl ip {
    #[inline]
    pub fn ip_hl(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_hl(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ip_v(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_v(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ip_hl: u_int, ip_v: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ip_hl: u32 = unsafe { ::std::mem::transmute(ip_hl) };
            ip_hl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ip_v: u32 = unsafe { ::std::mem::transmute(ip_v) };
            ip_v as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_timestamp {
    pub ipt_code: u_char,
    pub ipt_len: u_char,
    pub ipt_ptr: u_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ipt_timestamp: ip_timestamp_ipt_timestamp,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip_timestamp_ipt_timestamp {
    pub ipt_time: [n_long; 1usize],
    pub ipt_ta: [ip_timestamp_ipt_timestamp_ipt_ta; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_timestamp_ipt_timestamp_ipt_ta {
    pub ipt_addr: in_addr,
    pub ipt_time: n_long,
}
impl ip_timestamp {
    #[inline]
    pub fn ipt_flg(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_flg(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ipt_oflw(&self) -> u_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_oflw(&mut self, val: u_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ipt_flg: u_int, ipt_oflw: u_int) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ipt_flg: u32 = unsafe { ::std::mem::transmute(ipt_flg) };
            ipt_flg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ipt_oflw: u32 = unsafe { ::std::mem::transmute(ipt_oflw) };
            ipt_oflw as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udphdr {
    pub uh_sport: u_short,
    pub uh_dport: u_short,
    pub uh_ulen: u_short,
    pub uh_sum: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bootp {
    pub bp_op: u_char,
    pub bp_htype: u_char,
    pub bp_hlen: u_char,
    pub bp_hops: u_char,
    pub bp_xid: u_int32_t,
    pub bp_secs: u_short,
    pub bp_unused: u_short,
    pub bp_ciaddr: in_addr,
    pub bp_yiaddr: in_addr,
    pub bp_siaddr: in_addr,
    pub bp_giaddr: in_addr,
    pub bp_chaddr: [u_char; 16usize],
    pub bp_sname: [u_char; 64usize],
    pub bp_file: [u_char; 128usize],
    pub bp_vend: [u_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vend {
    pub v_magic: [u_char; 4usize],
    pub v_flags: u_int32_t,
    pub v_unused: [u_char; 56usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nextvend {
    pub __bindgen_anon_1: nextvend__bindgen_ty_1,
    pub nv_magic: [u_char; 4usize],
    pub nv_version: u_char,
    pub nv_U: nextvend__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nextvend__bindgen_ty_1 {
    pub __bindgen_anon_1: nextvend__bindgen_ty_1__bindgen_ty_1,
    pub NV0: [u_char; 58usize],
    pub NV1: nextvend__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nextvend__bindgen_ty_1__bindgen_ty_1 {
    pub NV1_opcode: u_char,
    pub NV1_xid: u_char,
    pub NV1_text: [u_char; 55usize],
    pub NV1_null: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bootp_packet {
    pub bp_ip: ip,
    pub bp_udp: udphdr,
    pub bp_bootp: bootp,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_hdr {
    pub __bindgen_anon_1: icmp6_hdr__bindgen_ty_1,
    pub icmp6_type: u_int8_t,
    pub icmp6_code: u_int8_t,
    pub icmp6_cksum: u_int16_t,
    pub icmp6_dataun: icmp6_hdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp6_hdr__bindgen_ty_1 {
    pub icmp6_un_data32: [u_int32_t; 1usize],
    pub icmp6_un_data16: [u_int16_t; 2usize],
    pub icmp6_un_data8: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct mld_hdr {
    pub mld_icmp6_hdr: icmp6_hdr,
    pub mld_addr: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_solicit {
    pub nd_rs_hdr: icmp6_hdr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_router_advert {
    pub nd_ra_hdr: icmp6_hdr,
    pub nd_ra_reachable: u_int32_t,
    pub nd_ra_retransmit: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_solicit {
    pub nd_ns_hdr: icmp6_hdr,
    pub nd_ns_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_neighbor_advert {
    pub nd_na_hdr: icmp6_hdr,
    pub nd_na_target: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_redirect {
    pub nd_rd_hdr: icmp6_hdr,
    pub nd_rd_target: in6_addr,
    pub nd_rd_dst: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_hdr {
    pub nd_opt_type: u_int8_t,
    pub nd_opt_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_prefix_info {
    pub nd_opt_pi_type: u_int8_t,
    pub nd_opt_pi_len: u_int8_t,
    pub nd_opt_pi_prefix_len: u_int8_t,
    pub nd_opt_pi_flags_reserved: u_int8_t,
    pub nd_opt_pi_valid_time: u_int32_t,
    pub nd_opt_pi_preferred_time: u_int32_t,
    pub nd_opt_pi_reserved2: u_int32_t,
    pub nd_opt_pi_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_nonce {
    pub nd_opt_nonce_type: u_int8_t,
    pub nd_opt_nonce_len: u_int8_t,
    pub nd_opt_nonce: [u_int8_t; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_rd_hdr {
    pub nd_opt_rh_type: u_int8_t,
    pub nd_opt_rh_len: u_int8_t,
    pub nd_opt_rh_reserved1: u_int16_t,
    pub nd_opt_rh_reserved2: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_mtu {
    pub nd_opt_mtu_type: u_int8_t,
    pub nd_opt_mtu_len: u_int8_t,
    pub nd_opt_mtu_reserved: u_int16_t,
    pub nd_opt_mtu_mtu: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_route_info {
    pub nd_opt_rti_type: u_int8_t,
    pub nd_opt_rti_len: u_int8_t,
    pub nd_opt_rti_prefixlen: u_int8_t,
    pub nd_opt_rti_flags: u_int8_t,
    pub nd_opt_rti_lifetime: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct nd_opt_rdnss {
    pub nd_opt_rdnss_type: u_int8_t,
    pub nd_opt_rdnss_len: u_int8_t,
    pub nd_opt_rdnss_reserved: u_int16_t,
    pub nd_opt_rdnss_lifetime: u_int32_t,
    pub nd_opt_rdnss_addr: [in6_addr; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_dnssl {
    pub nd_opt_dnssl_type: u_int8_t,
    pub nd_opt_dnssl_len: u_int8_t,
    pub nd_opt_dnssl_reserved: u_int16_t,
    pub nd_opt_dnssl_lifetime: u_int32_t,
    pub nd_opt_dnssl_domains: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nd_opt_pref64 {
    pub nd_opt_pref64_type: u_int8_t,
    pub nd_opt_pref64_len: u_int8_t,
    pub nd_opt_pref64_scaled_lifetime_plc: u_int16_t,
    pub nd_opt_pref64_prefix: [u_int32_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_namelookup {
    pub icmp6_nl_hdr: icmp6_hdr,
    pub icmp6_nl_nonce: [u_int8_t; 8usize],
    pub icmp6_nl_ttl: i32,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_nodeinfo {
    pub icmp6_ni_hdr: icmp6_hdr,
    pub icmp6_ni_nonce: [u_int8_t; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ni_reply_fqdn {
    pub ni_fqdn_ttl: u_int32_t,
    pub ni_fqdn_namelen: u_int8_t,
    pub ni_fqdn_name: [u_int8_t; 3usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct icmp6_router_renum {
    pub rr_hdr: icmp6_hdr,
    pub rr_segnum: u_int8_t,
    pub rr_flags: u_int8_t,
    pub rr_maxdelay: u_int16_t,
    pub rr_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_match {
    pub rpm_code: u_int8_t,
    pub rpm_len: u_int8_t,
    pub rpm_ordinal: u_int8_t,
    pub rpm_matchlen: u_int8_t,
    pub rpm_minlen: u_int8_t,
    pub rpm_maxlen: u_int8_t,
    pub rpm_reserved: u_int16_t,
    pub rpm_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_pco_use {
    pub rpu_uselen: u_int8_t,
    pub rpu_keeplen: u_int8_t,
    pub rpu_ramask: u_int8_t,
    pub rpu_raflags: u_int8_t,
    pub rpu_vltime: u_int32_t,
    pub rpu_pltime: u_int32_t,
    pub rpu_flags: u_int32_t,
    pub rpu_prefix: in6_addr,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct rr_result {
    pub rrr_flags: u_int16_t,
    pub rrr_ordinal: u_int8_t,
    pub rrr_matchedlen: u_int8_t,
    pub rrr_ifid: u_int32_t,
    pub rrr_prefix: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_filter {
    pub icmp6_filt: [u_int32_t; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6errstat {
    pub icp6errs_dst_unreach_noroute: u_quad_t,
    pub icp6errs_dst_unreach_admin: u_quad_t,
    pub icp6errs_dst_unreach_beyondscope: u_quad_t,
    pub icp6errs_dst_unreach_addr: u_quad_t,
    pub icp6errs_dst_unreach_noport: u_quad_t,
    pub icp6errs_packet_too_big: u_quad_t,
    pub icp6errs_time_exceed_transit: u_quad_t,
    pub icp6errs_time_exceed_reassembly: u_quad_t,
    pub icp6errs_paramprob_header: u_quad_t,
    pub icp6errs_paramprob_nextheader: u_quad_t,
    pub icp6errs_paramprob_option: u_quad_t,
    pub icp6errs_redirect: u_quad_t,
    pub icp6errs_unknown: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6stat {
    pub icp6s_error: u_quad_t,
    pub icp6s_canterror: u_quad_t,
    pub icp6s_toofreq: u_quad_t,
    pub icp6s_outhist: [u_quad_t; 256usize],
    pub icp6s_badcode: u_quad_t,
    pub icp6s_tooshort: u_quad_t,
    pub icp6s_checksum: u_quad_t,
    pub icp6s_badlen: u_quad_t,
    pub icp6s_reflect: u_quad_t,
    pub icp6s_inhist: [u_quad_t; 256usize],
    pub icp6s_nd_toomanyopt: u_quad_t,
    pub icp6s_outerrhist: icmp6errstat,
    pub icp6s_pmtuchg: u_quad_t,
    pub icp6s_nd_badopt: u_quad_t,
    pub icp6s_badns: u_quad_t,
    pub icp6s_badna: u_quad_t,
    pub icp6s_badrs: u_quad_t,
    pub icp6s_badra: u_quad_t,
    pub icp6s_badredirect: u_quad_t,
    pub icp6s_rfc6980_drop: u_quad_t,
    pub icp6s_badpkttoobig: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp_ra_addr {
    pub ira_addr: u_int32_t,
    pub ira_preference: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct icmp {
    pub __bindgen_anon_1: icmp__bindgen_ty_1,
    pub __bindgen_anon_2: icmp__bindgen_ty_2,
    pub icmp_type: u_char,
    pub icmp_code: u_char,
    pub icmp_cksum: u_short,
    pub icmp_hun: icmp__bindgen_ty_1,
    pub icmp_dun: icmp__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_1 {
    pub ih_pptr: u_char,
    pub ih_gwaddr: in_addr,
    pub ih_idseq: icmp__bindgen_ty_1_ih_idseq,
    pub ih_void: ::std::os::raw::c_int,
    pub ih_pmtu: icmp__bindgen_ty_1_ih_pmtu,
    pub ih_rtradv: icmp__bindgen_ty_1_ih_rtradv,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_idseq {
    pub icd_id: n_short,
    pub icd_seq: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_pmtu {
    pub ipm_void: n_short,
    pub ipm_nextmtu: n_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_1_ih_rtradv {
    pub irt_num_addrs: u_char,
    pub irt_wpa: u_char,
    pub irt_lifetime: u_int16_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union icmp__bindgen_ty_2 {
    pub id_ts: icmp__bindgen_ty_2_id_ts,
    pub id_ip: icmp__bindgen_ty_2_id_ip,
    pub id_radv: icmp_ra_addr,
    pub id_mask: u_int32_t,
    pub id_data: [::std::os::raw::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ts {
    pub its_otime: n_time,
    pub its_rtime: n_time,
    pub its_ttime: n_time,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp__bindgen_ty_2_id_ip {
    pub idi_ip: ip,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmpstat {
    pub icps_error: u_int32_t,
    pub icps_oldshort: u_int32_t,
    pub icps_oldicmp: u_int32_t,
    pub icps_outhist: [u_int32_t; 41usize],
    pub icps_badcode: u_int32_t,
    pub icps_tooshort: u_int32_t,
    pub icps_checksum: u_int32_t,
    pub icps_badlen: u_int32_t,
    pub icps_reflect: u_int32_t,
    pub icps_inhist: [u_int32_t; 41usize],
    pub icps_bmcastecho: u_int32_t,
    pub icps_bmcasttstamp: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ether_arp {
    pub ea_hdr: arphdr,
    pub arp_sha: [u_char; 6usize],
    pub arp_spa: [u_char; 4usize],
    pub arp_tha: [u_char; 6usize],
    pub arp_tpa: [u_char; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_inarp {
    pub sin_len: u_char,
    pub sin_family: u_char,
    pub sin_port: u_short,
    pub sin_addr: in_addr,
    pub sin_srcaddr: in_addr,
    pub sin_tos: u_short,
    pub sin_other: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp {
    pub igmp_type: u_char,
    pub igmp_code: u_char,
    pub igmp_cksum: u_short,
    pub igmp_group: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpv3 {
    pub igmp_type: u_char,
    pub igmp_code: u_char,
    pub igmp_cksum: u_short,
    pub igmp_group: in_addr,
    pub igmp_misc: u_char,
    pub igmp_qqi: u_char,
    pub igmp_numsrc: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp_grouprec {
    pub ig_type: u_char,
    pub ig_datalen: u_char,
    pub ig_numsrc: u_short,
    pub ig_group: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmp_report {
    pub ir_type: u_char,
    pub ir_rsv1: u_char,
    pub ir_cksum: u_short,
    pub ir_rsv2: u_short,
    pub ir_numgrps: u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpstat_v3 {
    pub igps_version: u32,
    pub igps_len: u32,
    pub igps_rcv_total: u64,
    pub igps_rcv_tooshort: u64,
    pub igps_rcv_badttl: u64,
    pub igps_rcv_badsum: u64,
    pub igps_rcv_v1v2_queries: u64,
    pub igps_rcv_v3_queries: u64,
    pub igps_rcv_badqueries: u64,
    pub igps_rcv_gen_queries: u64,
    pub igps_rcv_group_queries: u64,
    pub igps_rcv_gsr_queries: u64,
    pub igps_drop_gsr_queries: u64,
    pub igps_rcv_reports: u64,
    pub igps_rcv_badreports: u64,
    pub igps_rcv_ourreports: u64,
    pub igps_rcv_nora: u64,
    pub igps_snd_reports: u64,
    pub __igps_pad: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igmpstat {
    pub igps_rcv_total: u_int,
    pub igps_rcv_tooshort: u_int,
    pub igps_rcv_badsum: u_int,
    pub igps_rcv_queries: u_int,
    pub igps_rcv_badqueries: u_int,
    pub igps_rcv_reports: u_int,
    pub igps_rcv_badreports: u_int,
    pub igps_rcv_ourreports: u_int,
    pub igps_snd_reports: u_int,
}
pub type so_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsockbuf {
    pub sb_cc: u_int32_t,
    pub sb_hiwat: u_int32_t,
    pub sb_mbcnt: u_int32_t,
    pub sb_mbmax: u_int32_t,
    pub sb_lowat: i32,
    pub sb_flags: ::std::os::raw::c_short,
    pub sb_timeo: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsocket {
    pub xso_len: u_int32_t,
    pub xso_so: u_int32_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int32_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xsocket64 {
    pub xso_len: u_int32_t,
    pub xso_so: u_int64_t,
    pub so_type: ::std::os::raw::c_short,
    pub so_options: ::std::os::raw::c_short,
    pub so_linger: ::std::os::raw::c_short,
    pub so_state: ::std::os::raw::c_short,
    pub so_pcb: u_int64_t,
    pub xso_protocol: ::std::os::raw::c_int,
    pub xso_family: ::std::os::raw::c_int,
    pub so_qlen: ::std::os::raw::c_short,
    pub so_incqlen: ::std::os::raw::c_short,
    pub so_qlimit: ::std::os::raw::c_short,
    pub so_timeo: ::std::os::raw::c_short,
    pub so_error: u_short,
    pub so_pgid: pid_t,
    pub so_oobmark: u_int32_t,
    pub so_rcv: xsockbuf,
    pub so_snd: xsockbuf,
    pub so_uid: uid_t,
}
pub const so_tracker_action_SO_TRACKER_ACTION_INVALID: so_tracker_action = 0;
pub const so_tracker_action_SO_TRACKER_ACTION_ADD: so_tracker_action = 1;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_BY_APP: so_tracker_action = 2;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_ALL: so_tracker_action = 3;
pub const so_tracker_action_SO_TRACKER_ACTION_DUMP_MAX: so_tracker_action = 4;
pub type so_tracker_action = ::std::os::raw::c_uint;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_INVALID: so_tracker_attribute = 0;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS_FAMILY: so_tracker_attribute = 1;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_ADDRESS: so_tracker_attribute = 2;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_APP_UUID: so_tracker_attribute = 3;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN: so_tracker_attribute = 4;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DOMAIN_OWNER: so_tracker_attribute = 5;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_FLAGS: so_tracker_attribute = 6;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_DUMP_ENTRY: so_tracker_attribute = 7;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MEMORY_USED: so_tracker_attribute = 8;
pub const so_tracker_attribute_SO_TRACKER_ATTRIBUTE_MAX: so_tracker_attribute = 9;
pub type so_tracker_attribute = ::std::os::raw::c_uint;
extern "C" {
    pub fn tracker_action(
        action: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buffer_size: usize,
    ) -> ::std::os::raw::c_int;
}
pub type inp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr_4in6 {
    pub ia46_pad32: [u_int32_t; 3usize],
    pub ia46_addr4: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _inpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbinfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbport {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_pktopts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_moptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcbpolicy {
    _unused: [u8; 0],
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct inpcb {
    pub __bindgen_anon_1: inpcb__bindgen_ty_1,
    pub __bindgen_anon_2: inpcb__bindgen_ty_2,
    pub __bindgen_anon_3: inpcb__bindgen_ty_3,
    pub __bindgen_anon_4: inpcb__bindgen_ty_4,
    pub __bindgen_anon_5: inpcb__bindgen_ty_5,
    pub inp_hash: _inpcb_list_entry,
    pub reserved1: in_addr,
    pub reserved2: in_addr,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: _inpcb_list_entry,
    pub inp_ppcb: u_int32_t,
    pub inp_pcbinfo: u_int32_t,
    pub inp_socket: u_int32_t,
    pub nat_owner: u_char,
    pub nat_cookie: u_int32_t,
    pub inp_portlist: _inpcb_list_entry,
    pub inp_phd: u_int32_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: inpcb__bindgen_ty_1,
    pub inp_dependladdr: inpcb__bindgen_ty_2,
    pub inp_dependroute: inpcb__bindgen_ty_3,
    pub inp_depend4: inpcb__bindgen_ty_4,
    pub inp_depend6: inpcb__bindgen_ty_5,
    pub hash_element: ::std::os::raw::c_int,
    pub inp_saved_ppcb: u_int32_t,
    pub inp_sp: u_int32_t,
    pub reserved: [u_int32_t; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inpcb__bindgen_ty_3 {
    pub inp4_route: [u_char; 20usize],
    pub inp6_route: [u_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_4 {
    pub inp4_ip_tos: u_char,
    pub inp4_options: u_int32_t,
    pub inp4_moptions: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inpcb__bindgen_ty_5 {
    pub inp6_options: u_int32_t,
    pub inp6_hlim: u_int8_t,
    pub unused_uint8_1: u_int8_t,
    pub unused_uint16_1: ushort,
    pub inp6_outputopts: u_int32_t,
    pub inp6_moptions: u_int32_t,
    pub inp6_icmp6filt: u_int32_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb {
    pub xi_len: u_int32_t,
    pub xi_inp: inpcb,
    pub xi_socket: xsocket,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct inpcb64_list_entry {
    pub le_next: u_int64_t,
    pub le_prev: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xinpcb64 {
    pub __bindgen_anon_1: xinpcb64__bindgen_ty_1,
    pub __bindgen_anon_2: xinpcb64__bindgen_ty_2,
    pub __bindgen_anon_3: xinpcb64__bindgen_ty_3,
    pub __bindgen_anon_4: xinpcb64__bindgen_ty_4,
    pub xi_len: u_int64_t,
    pub xi_inpp: u_int64_t,
    pub inp_fport: u_short,
    pub inp_lport: u_short,
    pub inp_list: inpcb64_list_entry,
    pub inp_ppcb: u_int64_t,
    pub inp_pcbinfo: u_int64_t,
    pub inp_portlist: inpcb64_list_entry,
    pub inp_phd: u_int64_t,
    pub inp_gencnt: inp_gen_t,
    pub inp_flags: ::std::os::raw::c_int,
    pub inp_flow: u_int32_t,
    pub inp_vflag: u_char,
    pub inp_ip_ttl: u_char,
    pub inp_ip_p: u_char,
    pub inp_dependfaddr: xinpcb64__bindgen_ty_1,
    pub inp_dependladdr: xinpcb64__bindgen_ty_2,
    pub inp_depend4: xinpcb64__bindgen_ty_3,
    pub inp_depend6: xinpcb64__bindgen_ty_4,
    pub xi_socket: xsocket64,
    pub xi_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xinpcb64__bindgen_ty_1 {
    pub inp46_foreign: in_addr_4in6,
    pub inp6_foreign: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xinpcb64__bindgen_ty_2 {
    pub inp46_local: in_addr_4in6,
    pub inp6_local: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xinpcb64__bindgen_ty_3 {
    pub inp4_ip_tos: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xinpcb64__bindgen_ty_4 {
    pub inp6_hlim: u_int8_t,
    pub inp6_cksum: ::std::os::raw::c_int,
    pub inp6_ifindex: u_short,
    pub inp6_hops: ::std::os::raw::c_short,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct xinpgen {
    pub xig_len: u_int32_t,
    pub xig_count: u_int,
    pub xig_gen: inp_gen_t,
    pub xig_sogen: so_gen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_sys {
    pub ss_len: u_char,
    pub ss_family: u_char,
    pub ss_sysaddr: u_int16_t,
    pub ss_reserved: [u_int32_t; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_event_msg {
    pub total_size: u_int32_t,
    pub vendor_code: u_int32_t,
    pub kev_class: u_int32_t,
    pub kev_subclass: u_int32_t,
    pub id: u_int32_t,
    pub event_code: u_int32_t,
    pub event_data: [u_int32_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_request {
    pub vendor_code: u_int32_t,
    pub kev_class: u_int32_t,
    pub kev_subclass: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_vendor_code {
    pub vendor_code: u_int32_t,
    pub vendor_string: [::std::os::raw::c_char; 200usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_aliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr_in,
    pub ifra_broadaddr: sockaddr_in,
    pub ifra_mask: sockaddr_in,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_data {
    pub link_data: net_event_data,
    pub ia_addr: in_addr,
    pub ia_net: u_int32_t,
    pub ia_netmask: u_int32_t,
    pub ia_subnet: u_int32_t,
    pub ia_subnetmask: u_int32_t,
    pub ia_netbroadcast: in_addr,
    pub ia_dstaddr: in_addr,
}
#[repr(C)]
#[derive(Debug)]
pub struct kev_in_collision {
    pub link_data: net_event_data,
    pub ia_ipaddr: in_addr,
    pub hw_len: u_char,
    pub hw_addr: __IncompleteArrayField<u_char>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_arpfailure {
    pub link_data: net_event_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_arpalive {
    pub link_data: net_event_data,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in_portinuse {
    pub port: u_int16_t,
    pub req_pid: u_int32_t,
    pub reserved: [u_int32_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_addrlifetime {
    pub ia6t_expire: time_t,
    pub ia6t_preferred: time_t,
    pub ia6t_vltime: u_int32_t,
    pub ia6t_pltime: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addrpolicy {
    pub addr: sockaddr_in6,
    pub addrmask: sockaddr_in6,
    pub preced: ::std::os::raw::c_int,
    pub label: ::std::os::raw::c_int,
    pub use_: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_ifstat {
    pub ifs6_in_receive: u_quad_t,
    pub ifs6_in_hdrerr: u_quad_t,
    pub ifs6_in_toobig: u_quad_t,
    pub ifs6_in_noroute: u_quad_t,
    pub ifs6_in_addrerr: u_quad_t,
    pub ifs6_in_protounknown: u_quad_t,
    pub ifs6_in_truncated: u_quad_t,
    pub ifs6_in_discard: u_quad_t,
    pub ifs6_in_deliver: u_quad_t,
    pub ifs6_out_forward: u_quad_t,
    pub ifs6_out_request: u_quad_t,
    pub ifs6_out_discard: u_quad_t,
    pub ifs6_out_fragok: u_quad_t,
    pub ifs6_out_fragfail: u_quad_t,
    pub ifs6_out_fragcreat: u_quad_t,
    pub ifs6_reass_reqd: u_quad_t,
    pub ifs6_reass_ok: u_quad_t,
    pub ifs6_atmfrag_rcvd: u_quad_t,
    pub ifs6_reass_fail: u_quad_t,
    pub ifs6_in_mcast: u_quad_t,
    pub ifs6_out_mcast: u_quad_t,
    pub ifs6_cantfoward_icmp6: u_quad_t,
    pub ifs6_addr_expiry_cnt: u_quad_t,
    pub ifs6_pfx_expiry_cnt: u_quad_t,
    pub ifs6_defrtr_expiry_cnt: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icmp6_ifstat {
    pub ifs6_in_msg: u_quad_t,
    pub ifs6_in_error: u_quad_t,
    pub ifs6_in_dstunreach: u_quad_t,
    pub ifs6_in_adminprohib: u_quad_t,
    pub ifs6_in_timeexceed: u_quad_t,
    pub ifs6_in_paramprob: u_quad_t,
    pub ifs6_in_pkttoobig: u_quad_t,
    pub ifs6_in_echo: u_quad_t,
    pub ifs6_in_echoreply: u_quad_t,
    pub ifs6_in_routersolicit: u_quad_t,
    pub ifs6_in_routeradvert: u_quad_t,
    pub ifs6_in_neighborsolicit: u_quad_t,
    pub ifs6_in_neighboradvert: u_quad_t,
    pub ifs6_in_redirect: u_quad_t,
    pub ifs6_in_mldquery: u_quad_t,
    pub ifs6_in_mldreport: u_quad_t,
    pub ifs6_in_mlddone: u_quad_t,
    pub ifs6_out_msg: u_quad_t,
    pub ifs6_out_error: u_quad_t,
    pub ifs6_out_dstunreach: u_quad_t,
    pub ifs6_out_adminprohib: u_quad_t,
    pub ifs6_out_timeexceed: u_quad_t,
    pub ifs6_out_paramprob: u_quad_t,
    pub ifs6_out_pkttoobig: u_quad_t,
    pub ifs6_out_echo: u_quad_t,
    pub ifs6_out_echoreply: u_quad_t,
    pub ifs6_out_routersolicit: u_quad_t,
    pub ifs6_out_routeradvert: u_quad_t,
    pub ifs6_out_neighborsolicit: u_quad_t,
    pub ifs6_out_neighboradvert: u_quad_t,
    pub ifs6_out_redirect: u_quad_t,
    pub ifs6_out_mldquery: u_quad_t,
    pub ifs6_out_mldreport: u_quad_t,
    pub ifs6_out_mlddone: u_quad_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_ifreq {
    pub __bindgen_anon_1: in6_ifreq__bindgen_ty_1,
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: in6_ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr_in6,
    pub ifru_dstaddr: sockaddr_in6,
    pub ifru_flags: ::std::os::raw::c_int,
    pub ifru_flags6: ::std::os::raw::c_int,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_intval: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_lifetime: in6_addrlifetime,
    pub ifru_stat: in6_ifstat,
    pub ifru_icmp6stat: icmp6_ifstat,
    pub ifru_scope_id: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_aliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr_in6,
    pub ifra_broadaddr: sockaddr_in6,
    pub ifra_prefixmask: sockaddr_in6,
    pub ifra_flags: ::std::os::raw::c_int,
    pub ifra_lifetime: in6_addrlifetime,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags {
    pub prf_ra: in6_prflags_prf_ra,
    pub prf_reserved1: u_char,
    pub prf_reserved2: u_short,
    pub prf_rr: in6_prflags_prf_rr,
    pub prf_reserved3: u_char,
    pub prf_reserved4: u_short,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags_prf_ra {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_prflags_prf_ra {
    #[inline]
    pub fn onlink(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlink(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autonomous(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autonomous(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        onlink: u_char,
        autonomous: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let onlink: u8 = unsafe { ::std::mem::transmute(onlink) };
            onlink as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autonomous: u8 = unsafe { ::std::mem::transmute(autonomous) };
            autonomous as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_prflags_prf_rr {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_prflags_prf_rr {
    #[inline]
    pub fn decrvalid(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrvalid(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn decrprefd(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_decrprefd(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        decrvalid: u_char,
        decrprefd: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let decrvalid: u8 = unsafe { ::std::mem::transmute(decrvalid) };
            decrvalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let decrprefd: u8 = unsafe { ::std::mem::transmute(decrprefd) };
            decrprefd as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_prefixreq {
    pub ipr_name: [::std::os::raw::c_char; 16usize],
    pub ipr_origin: u_char,
    pub ipr_plen: u_char,
    pub ipr_vltime: u_int32_t,
    pub ipr_pltime: u_int32_t,
    pub ipr_flags: in6_prflags,
    pub ipr_prefix: sockaddr_in6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_rrenumreq {
    pub irr_name: [::std::os::raw::c_char; 16usize],
    pub irr_origin: u_char,
    pub irr_m_len: u_char,
    pub irr_m_minlen: u_char,
    pub irr_m_maxlen: u_char,
    pub irr_u_uselen: u_char,
    pub irr_u_keeplen: u_char,
    pub irr_raflagmask: in6_rrenumreq_irr_raflagmask,
    pub irr_vltime: u_int32_t,
    pub irr_pltime: u_int32_t,
    pub irr_flags: in6_prflags,
    pub irr_matchprefix: sockaddr_in6,
    pub irr_useprefix: sockaddr_in6,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct in6_rrenumreq_irr_raflagmask {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl in6_rrenumreq_irr_raflagmask {
    #[inline]
    pub fn onlink(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_onlink(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn autonomous(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_autonomous(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u_char {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u_char) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        onlink: u_char,
        autonomous: u_char,
        reserved: u_char,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let onlink: u8 = unsafe { ::std::mem::transmute(onlink) };
            onlink as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let autonomous: u8 = unsafe { ::std::mem::transmute(autonomous) };
            autonomous as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kev_in6_addrlifetime {
    pub ia6t_expire: u_int32_t,
    pub ia6t_preferred: u_int32_t,
    pub ia6t_vltime: u_int32_t,
    pub ia6t_pltime: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kev_in6_data {
    pub link_data: net_event_data,
    pub ia_addr: sockaddr_in6,
    pub ia_net: sockaddr_in6,
    pub ia_dstaddr: sockaddr_in6,
    pub ia_prefixmask: sockaddr_in6,
    pub ia_plen: u_int32_t,
    pub ia6_flags: u_int32_t,
    pub ia_lifetime: kev_in6_addrlifetime,
    pub ia_mac: [u8; 6usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ip6_hdr {
    pub __bindgen_anon_1: ip6_hdr__bindgen_ty_1,
    pub ip6_ctlun: ip6_hdr__bindgen_ty_1,
    pub ip6_src: in6_addr,
    pub ip6_dst: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip6_hdr__bindgen_ty_1 {
    pub ip6_un1: ip6_hdr__bindgen_ty_1_ip6_hdrctl,
    pub ip6_un2_vfc: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hdr__bindgen_ty_1_ip6_hdrctl {
    pub ip6_un1_flow: u_int32_t,
    pub ip6_un1_plen: u_int16_t,
    pub ip6_un1_nxt: u_int8_t,
    pub ip6_un1_hlim: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_ext {
    pub ip6e_nxt: u_int8_t,
    pub ip6e_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_hbh {
    pub ip6h_nxt: u_int8_t,
    pub ip6h_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_dest {
    pub ip6d_nxt: u_int8_t,
    pub ip6d_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt {
    pub ip6o_type: u_int8_t,
    pub ip6o_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_jumbo {
    pub ip6oj_type: u_int8_t,
    pub ip6oj_len: u_int8_t,
    pub ip6oj_jumbo_len: [u_int8_t; 4usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_nsap {
    pub ip6on_type: u_int8_t,
    pub ip6on_len: u_int8_t,
    pub ip6on_src_nsap_len: u_int8_t,
    pub ip6on_dst_nsap_len: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_tunnel {
    pub ip6ot_type: u_int8_t,
    pub ip6ot_len: u_int8_t,
    pub ip6ot_encap_limit: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_opt_router {
    pub ip6or_type: u_int8_t,
    pub ip6or_len: u_int8_t,
    pub ip6or_value: [u_int8_t; 2usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr {
    pub ip6r_nxt: u_int8_t,
    pub ip6r_len: u_int8_t,
    pub ip6r_type: u_int8_t,
    pub ip6r_segleft: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_rthdr0 {
    pub ip6r0_nxt: u_int8_t,
    pub ip6r0_len: u_int8_t,
    pub ip6r0_type: u_int8_t,
    pub ip6r0_segleft: u_int8_t,
    pub ip6r0_reserved: u_int32_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ip6_frag {
    pub ip6f_nxt: u_int8_t,
    pub ip6f_reserved: u_int8_t,
    pub ip6f_offlg: u_int16_t,
    pub ip6f_ident: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipovly {
    pub ih_x1: [u_char; 9usize],
    pub ih_pr: u_char,
    pub ih_len: u_short,
    pub ih_src: in_addr,
    pub ih_dst: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipstat {
    pub ips_total: u_int32_t,
    pub ips_badsum: u_int32_t,
    pub ips_tooshort: u_int32_t,
    pub ips_toosmall: u_int32_t,
    pub ips_badhlen: u_int32_t,
    pub ips_badlen: u_int32_t,
    pub ips_fragments: u_int32_t,
    pub ips_fragdropped: u_int32_t,
    pub ips_fragtimeout: u_int32_t,
    pub ips_forward: u_int32_t,
    pub ips_fastforward: u_int32_t,
    pub ips_cantforward: u_int32_t,
    pub ips_redirectsent: u_int32_t,
    pub ips_noproto: u_int32_t,
    pub ips_delivered: u_int32_t,
    pub ips_localout: u_int32_t,
    pub ips_odropped: u_int32_t,
    pub ips_reassembled: u_int32_t,
    pub ips_fragmented: u_int32_t,
    pub ips_ofragments: u_int32_t,
    pub ips_cantfrag: u_int32_t,
    pub ips_badoptions: u_int32_t,
    pub ips_noroute: u_int32_t,
    pub ips_badvers: u_int32_t,
    pub ips_rawout: u_int32_t,
    pub ips_toolong: u_int32_t,
    pub ips_notmember: u_int32_t,
    pub ips_nogif: u_int32_t,
    pub ips_badaddr: u_int32_t,
    pub ips_pktdropcntrl: u_int32_t,
    pub ips_rcv_swcsum: u_int32_t,
    pub ips_rcv_swcsum_bytes: u_int32_t,
    pub ips_snd_swcsum: u_int32_t,
    pub ips_snd_swcsum_bytes: u_int32_t,
    pub ips_adj: u_int32_t,
    pub ips_adj_hwcsum_clr: u_int32_t,
    pub ips_rxc_collisions: u_int32_t,
    pub ips_rxc_chained: u_int32_t,
    pub ips_rxc_notchain: u_int32_t,
    pub ips_rxc_chainsz_gt2: u_int32_t,
    pub ips_rxc_chainsz_gt4: u_int32_t,
    pub ips_rxc_notlist: u_int32_t,
    pub ips_raw_sappend_fail: u_int32_t,
    pub ips_necp_policy_drop: u_int32_t,
    pub ips_rcv_if_weak_match: u_int32_t,
    pub ips_rcv_if_no_match: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_linklocal_stat {
    pub iplls_in_total: u_int32_t,
    pub iplls_in_badttl: u_int32_t,
    pub iplls_out_total: u_int32_t,
    pub iplls_out_badttl: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tseg_qent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tsegqe_head {
    pub lh_first: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpcb {
    pub t_segq: tsegqe_head,
    pub t_dupacks: ::std::os::raw::c_int,
    pub unused: u_int32_t,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_inpcb: u_int32_t,
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat {
    pub tcps_connattempt: u_int32_t,
    pub tcps_accepts: u_int32_t,
    pub tcps_connects: u_int32_t,
    pub tcps_drops: u_int32_t,
    pub tcps_conndrops: u_int32_t,
    pub tcps_closed: u_int32_t,
    pub tcps_segstimed: u_int32_t,
    pub tcps_rttupdated: u_int32_t,
    pub tcps_delack: u_int32_t,
    pub tcps_timeoutdrop: u_int32_t,
    pub tcps_rexmttimeo: u_int32_t,
    pub tcps_persisttimeo: u_int32_t,
    pub tcps_keeptimeo: u_int32_t,
    pub tcps_keepprobe: u_int32_t,
    pub tcps_keepdrops: u_int32_t,
    pub tcps_sndtotal: u_int32_t,
    pub tcps_sndpack: u_int32_t,
    pub tcps_sndbyte: u_int32_t,
    pub tcps_sndrexmitpack: u_int32_t,
    pub tcps_sndrexmitbyte: u_int32_t,
    pub tcps_sndacks: u_int32_t,
    pub tcps_sndprobe: u_int32_t,
    pub tcps_sndurg: u_int32_t,
    pub tcps_sndwinup: u_int32_t,
    pub tcps_sndctrl: u_int32_t,
    pub tcps_rcvtotal: u_int32_t,
    pub tcps_rcvpack: u_int32_t,
    pub tcps_rcvbyte: u_int32_t,
    pub tcps_rcvbadsum: u_int32_t,
    pub tcps_rcvbadoff: u_int32_t,
    pub tcps_rcvmemdrop: u_int32_t,
    pub tcps_rcvshort: u_int32_t,
    pub tcps_rcvduppack: u_int32_t,
    pub tcps_rcvdupbyte: u_int32_t,
    pub tcps_rcvpartduppack: u_int32_t,
    pub tcps_rcvpartdupbyte: u_int32_t,
    pub tcps_rcvoopack: u_int32_t,
    pub tcps_rcvoobyte: u_int32_t,
    pub tcps_rcvpackafterwin: u_int32_t,
    pub tcps_rcvbyteafterwin: u_int32_t,
    pub tcps_rcvafterclose: u_int32_t,
    pub tcps_rcvwinprobe: u_int32_t,
    pub tcps_rcvdupack: u_int32_t,
    pub tcps_rcvacktoomuch: u_int32_t,
    pub tcps_rcvackpack: u_int32_t,
    pub tcps_rcvackbyte: u_int32_t,
    pub tcps_rcvwinupd: u_int32_t,
    pub tcps_pawsdrop: u_int32_t,
    pub tcps_predack: u_int32_t,
    pub tcps_preddat: u_int32_t,
    pub tcps_pcbcachemiss: u_int32_t,
    pub tcps_cachedrtt: u_int32_t,
    pub tcps_cachedrttvar: u_int32_t,
    pub tcps_cachedssthresh: u_int32_t,
    pub tcps_usedrtt: u_int32_t,
    pub tcps_usedrttvar: u_int32_t,
    pub tcps_usedssthresh: u_int32_t,
    pub tcps_persistdrop: u_int32_t,
    pub tcps_badsyn: u_int32_t,
    pub tcps_mturesent: u_int32_t,
    pub tcps_listendrop: u_int32_t,
    pub tcps_synchallenge: u_int32_t,
    pub tcps_rstchallenge: u_int32_t,
    pub tcps_minmssdrops: u_int32_t,
    pub tcps_sndrexmitbad: u_int32_t,
    pub tcps_badrst: u_int32_t,
    pub tcps_sc_added: u_int32_t,
    pub tcps_sc_retransmitted: u_int32_t,
    pub tcps_sc_dupsyn: u_int32_t,
    pub tcps_sc_dropped: u_int32_t,
    pub tcps_sc_completed: u_int32_t,
    pub tcps_sc_bucketoverflow: u_int32_t,
    pub tcps_sc_cacheoverflow: u_int32_t,
    pub tcps_sc_reset: u_int32_t,
    pub tcps_sc_stale: u_int32_t,
    pub tcps_sc_aborted: u_int32_t,
    pub tcps_sc_badack: u_int32_t,
    pub tcps_sc_unreach: u_int32_t,
    pub tcps_sc_zonefail: u_int32_t,
    pub tcps_sc_sendcookie: u_int32_t,
    pub tcps_sc_recvcookie: u_int32_t,
    pub tcps_hc_added: u_int32_t,
    pub tcps_hc_bucketoverflow: u_int32_t,
    pub tcps_sack_recovery_episode: u_int32_t,
    pub tcps_sack_rexmits: u_int32_t,
    pub tcps_sack_rexmit_bytes: u_int32_t,
    pub tcps_sack_rcv_blocks: u_int32_t,
    pub tcps_sack_send_blocks: u_int32_t,
    pub tcps_sack_sboverflow: u_int32_t,
    pub tcps_bg_rcvtotal: u_int32_t,
    pub tcps_rxtfindrop: u_int32_t,
    pub tcps_fcholdpacket: u_int32_t,
    pub tcps_limited_txt: u_int32_t,
    pub tcps_early_rexmt: u_int32_t,
    pub tcps_sack_ackadv: u_int32_t,
    pub tcps_rcv_swcsum: u_int32_t,
    pub tcps_rcv_swcsum_bytes: u_int32_t,
    pub tcps_rcv6_swcsum: u_int32_t,
    pub tcps_rcv6_swcsum_bytes: u_int32_t,
    pub tcps_snd_swcsum: u_int32_t,
    pub tcps_snd_swcsum_bytes: u_int32_t,
    pub tcps_snd6_swcsum: u_int32_t,
    pub tcps_snd6_swcsum_bytes: u_int32_t,
    pub tcps_unused_1: u_int32_t,
    pub tcps_unused_2: u_int32_t,
    pub tcps_unused_3: u_int32_t,
    pub tcps_invalid_mpcap: u_int32_t,
    pub tcps_invalid_joins: u_int32_t,
    pub tcps_mpcap_fallback: u_int32_t,
    pub tcps_join_fallback: u_int32_t,
    pub tcps_estab_fallback: u_int32_t,
    pub tcps_invalid_opt: u_int32_t,
    pub tcps_mp_outofwin: u_int32_t,
    pub tcps_mp_reducedwin: u_int32_t,
    pub tcps_mp_badcsum: u_int32_t,
    pub tcps_mp_oodata: u_int32_t,
    pub tcps_mp_switches: u_int32_t,
    pub tcps_mp_rcvtotal: u_int32_t,
    pub tcps_mp_rcvbytes: u_int32_t,
    pub tcps_mp_sndpacks: u_int32_t,
    pub tcps_mp_sndbytes: u_int32_t,
    pub tcps_join_rxmts: u_int32_t,
    pub tcps_tailloss_rto: u_int32_t,
    pub tcps_reordered_pkts: u_int32_t,
    pub tcps_recovered_pkts: u_int32_t,
    pub tcps_pto: u_int32_t,
    pub tcps_rto_after_pto: u_int32_t,
    pub tcps_tlp_recovery: u_int32_t,
    pub tcps_tlp_recoverlastpkt: u_int32_t,
    pub tcps_ecn_client_success: u_int32_t,
    pub tcps_ecn_recv_ece: u_int32_t,
    pub tcps_ecn_sent_ece: u_int32_t,
    pub tcps_detect_reordering: u_int32_t,
    pub tcps_delay_recovery: u_int32_t,
    pub tcps_avoid_rxmt: u_int32_t,
    pub tcps_unnecessary_rxmt: u_int32_t,
    pub tcps_nostretchack: u_int32_t,
    pub tcps_rescue_rxmt: u_int32_t,
    pub tcps_pto_in_recovery: u_int32_t,
    pub tcps_pmtudbh_reverted: u_int32_t,
    pub tcps_dsack_disable: u_int32_t,
    pub tcps_dsack_ackloss: u_int32_t,
    pub tcps_dsack_badrexmt: u_int32_t,
    pub tcps_dsack_sent: u_int32_t,
    pub tcps_dsack_recvd: u_int32_t,
    pub tcps_dsack_recvd_old: u_int32_t,
    pub tcps_mp_sel_symtomsd: u_int32_t,
    pub tcps_mp_sel_rtt: u_int32_t,
    pub tcps_mp_sel_rto: u_int32_t,
    pub tcps_mp_sel_peer: u_int32_t,
    pub tcps_mp_num_probes: u_int32_t,
    pub tcps_mp_verdowngrade: u_int32_t,
    pub tcps_drop_after_sleep: u_int32_t,
    pub tcps_probe_if: u_int32_t,
    pub tcps_probe_if_conflict: u_int32_t,
    pub tcps_ecn_client_setup: u_int32_t,
    pub tcps_ecn_server_setup: u_int32_t,
    pub tcps_ecn_server_success: u_int32_t,
    pub tcps_ecn_ace_syn_not_ect: u_int32_t,
    pub tcps_ecn_ace_syn_ect1: u_int32_t,
    pub tcps_ecn_ace_syn_ect0: u_int32_t,
    pub tcps_ecn_ace_syn_ce: u_int32_t,
    pub tcps_ecn_lost_synack: u_int32_t,
    pub tcps_ecn_lost_syn: u_int32_t,
    pub tcps_ecn_not_supported: u_int32_t,
    pub tcps_ecn_recv_ce: u_int32_t,
    pub tcps_ecn_ace_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ce: u_int32_t,
    pub tcps_ecn_conn_recv_ece: u_int32_t,
    pub tcps_ecn_conn_plnoce: u_int32_t,
    pub tcps_ecn_conn_pl_ce: u_int32_t,
    pub tcps_ecn_conn_nopl_ce: u_int32_t,
    pub tcps_ecn_fallback_synloss: u_int32_t,
    pub tcps_ecn_fallback_reorder: u_int32_t,
    pub tcps_ecn_fallback_ce: u_int32_t,
    pub tcps_tfo_syn_data_rcv: u_int32_t,
    pub tcps_tfo_cookie_req_rcv: u_int32_t,
    pub tcps_tfo_cookie_sent: u_int32_t,
    pub tcps_tfo_cookie_invalid: u_int32_t,
    pub tcps_tfo_cookie_req: u_int32_t,
    pub tcps_tfo_cookie_rcv: u_int32_t,
    pub tcps_tfo_syn_data_sent: u_int32_t,
    pub tcps_tfo_syn_data_acked: u_int32_t,
    pub tcps_tfo_syn_loss: u_int32_t,
    pub tcps_tfo_blackhole: u_int32_t,
    pub tcps_tfo_cookie_wrong: u_int32_t,
    pub tcps_tfo_no_cookie_rcv: u_int32_t,
    pub tcps_tfo_heuristics_disable: u_int32_t,
    pub tcps_tfo_sndblackhole: u_int32_t,
    pub tcps_mss_to_default: u_int32_t,
    pub tcps_mss_to_medium: u_int32_t,
    pub tcps_mss_to_low: u_int32_t,
    pub tcps_ecn_fallback_droprst: u_int32_t,
    pub tcps_ecn_fallback_droprxmt: u_int32_t,
    pub tcps_ecn_fallback_synrst: u_int32_t,
    pub tcps_mptcp_rcvmemdrop: u_int32_t,
    pub tcps_mptcp_rcvduppack: u_int32_t,
    pub tcps_mptcp_rcvpackafterwin: u_int32_t,
    pub tcps_timer_drift_le_1_ms: u_int32_t,
    pub tcps_timer_drift_le_10_ms: u_int32_t,
    pub tcps_timer_drift_le_20_ms: u_int32_t,
    pub tcps_timer_drift_le_50_ms: u_int32_t,
    pub tcps_timer_drift_le_100_ms: u_int32_t,
    pub tcps_timer_drift_le_200_ms: u_int32_t,
    pub tcps_timer_drift_le_500_ms: u_int32_t,
    pub tcps_timer_drift_le_1000_ms: u_int32_t,
    pub tcps_timer_drift_gt_1000_ms: u_int32_t,
    pub tcps_mptcp_handover_attempt: u_int32_t,
    pub tcps_mptcp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_fp_handover_attempt: u_int32_t,
    pub tcps_mptcp_fp_interactive_attempt: u_int32_t,
    pub tcps_mptcp_fp_aggregate_attempt: u_int32_t,
    pub tcps_mptcp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_fp_heuristic_fallback: u_int32_t,
    pub tcps_mptcp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_interactive_success: u_int32_t,
    pub tcps_mptcp_aggregate_success: u_int32_t,
    pub tcps_mptcp_fp_handover_success_wifi: u_int32_t,
    pub tcps_mptcp_fp_handover_success_cell: u_int32_t,
    pub tcps_mptcp_fp_interactive_success: u_int32_t,
    pub tcps_mptcp_fp_aggregate_success: u_int32_t,
    pub tcps_mptcp_handover_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_wifi_from_cell: u_int32_t,
    pub tcps_mptcp_interactive_cell_from_wifi: u_int32_t,
    pub tcps_mptcp_handover_cell_bytes: u_int64_t,
    pub tcps_mptcp_interactive_cell_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_cell_bytes: u_int64_t,
    pub tcps_mptcp_handover_all_bytes: u_int64_t,
    pub tcps_mptcp_interactive_all_bytes: u_int64_t,
    pub tcps_mptcp_aggregate_all_bytes: u_int64_t,
    pub tcps_mptcp_back_to_wifi: u_int32_t,
    pub tcps_mptcp_wifi_proxy: u_int32_t,
    pub tcps_mptcp_cell_proxy: u_int32_t,
    pub tcps_ka_offload_drops: u_int32_t,
    pub tcps_mptcp_triggered_cell: u_int32_t,
    pub tcps_fin_timeout_drops: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpstat_local {
    pub badformat: u_int64_t,
    pub unspecv6: u_int64_t,
    pub synfin: u_int64_t,
    pub badformatipsec: u_int64_t,
    pub noconnnolist: u_int64_t,
    pub noconnlist: u_int64_t,
    pub listbadsyn: u_int64_t,
    pub icmp6unreach: u_int64_t,
    pub deprecate6: u_int64_t,
    pub ooopacket: u_int64_t,
    pub rstinsynrcv: u_int64_t,
    pub dospacket: u_int64_t,
    pub cleanup: u_int64_t,
    pub synwindow: u_int64_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb {
    pub xt_len: u_int32_t,
    pub xt_inp: inpcb,
    pub xt_tp: tcpcb,
    pub xt_socket: xsocket,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct xtcpcb64 {
    pub xt_len: u_int32_t,
    pub xt_inpcb: xinpcb64,
    pub t_segq: u_int64_t,
    pub t_dupacks: ::std::os::raw::c_int,
    pub t_timer: [::std::os::raw::c_int; 4usize],
    pub t_state: ::std::os::raw::c_int,
    pub t_flags: u_int,
    pub t_force: ::std::os::raw::c_int,
    pub snd_una: tcp_seq,
    pub snd_max: tcp_seq,
    pub snd_nxt: tcp_seq,
    pub snd_up: tcp_seq,
    pub snd_wl1: tcp_seq,
    pub snd_wl2: tcp_seq,
    pub iss: tcp_seq,
    pub irs: tcp_seq,
    pub rcv_nxt: tcp_seq,
    pub rcv_adv: tcp_seq,
    pub rcv_wnd: u_int32_t,
    pub rcv_up: tcp_seq,
    pub snd_wnd: u_int32_t,
    pub snd_cwnd: u_int32_t,
    pub snd_ssthresh: u_int32_t,
    pub t_maxopd: u_int,
    pub t_rcvtime: u_int32_t,
    pub t_starttime: u_int32_t,
    pub t_rtttime: ::std::os::raw::c_int,
    pub t_rtseq: tcp_seq,
    pub t_rxtcur: ::std::os::raw::c_int,
    pub t_maxseg: u_int,
    pub t_srtt: ::std::os::raw::c_int,
    pub t_rttvar: ::std::os::raw::c_int,
    pub t_rxtshift: ::std::os::raw::c_int,
    pub t_rttmin: u_int,
    pub t_rttupdated: u_int32_t,
    pub max_sndwnd: u_int32_t,
    pub t_softerror: ::std::os::raw::c_int,
    pub t_oobflags: ::std::os::raw::c_char,
    pub t_iobc: ::std::os::raw::c_char,
    pub snd_scale: u_char,
    pub rcv_scale: u_char,
    pub request_r_scale: u_char,
    pub requested_s_scale: u_char,
    pub ts_recent: u_int32_t,
    pub ts_recent_age: u_int32_t,
    pub last_ack_sent: tcp_seq,
    pub cc_send: tcp_cc,
    pub cc_recv: tcp_cc,
    pub snd_recover: tcp_seq,
    pub snd_cwnd_prev: u_int32_t,
    pub snd_ssthresh_prev: u_int32_t,
    pub t_badrxtwin: u_int32_t,
    pub xt_alignment_hack: u_quad_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpiphdr {
    pub ti_i: ipovly,
    pub ti_t: tcphdr,
}
pub type au_id_t = uid_t;
pub type au_asid_t = pid_t;
pub type au_event_t = u_int16_t;
pub type au_emod_t = u_int16_t;
pub type au_class_t = u_int32_t;
pub type au_asflgs_t = u_int64_t;
pub type au_ctlmode_t = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid {
    pub port: dev_t,
    pub machine: u_int32_t,
}
pub type au_tid_t = au_tid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid_addr {
    pub at_port: dev_t,
    pub at_type: u_int32_t,
    pub at_addr: [u_int32_t; 4usize],
}
pub type au_tid_addr_t = au_tid_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_mask {
    pub am_success: ::std::os::raw::c_uint,
    pub am_failure: ::std::os::raw::c_uint,
}
pub type au_mask_t = au_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_t,
    pub ai_asid: au_asid_t,
}
pub type auditinfo_t = auditinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditinfo_addr {
    pub ai_auid: au_id_t,
    pub ai_mask: au_mask_t,
    pub ai_termid: au_tid_addr_t,
    pub ai_asid: au_asid_t,
    pub ai_flags: au_asflgs_t,
}
pub type auditinfo_addr_t = auditinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_t,
    pub ap_asid: au_asid_t,
}
pub type auditpinfo_t = auditpinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct auditpinfo_addr {
    pub ap_pid: pid_t,
    pub ap_auid: au_id_t,
    pub ap_mask: au_mask_t,
    pub ap_termid: au_tid_addr_t,
    pub ap_asid: au_asid_t,
    pub ap_flags: au_asflgs_t,
}
pub type auditpinfo_addr_t = auditpinfo_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_session {
    pub as_aia_p: *mut auditinfo_addr_t,
    pub as_mask: au_mask_t,
}
pub type au_session_t = au_session;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_expire_after {
    pub age: time_t,
    pub size: usize,
    pub op_type: ::std::os::raw::c_uchar,
}
pub type au_expire_after_t = au_expire_after;
pub type token_t = au_token;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_qctrl {
    pub aq_hiwater: ::std::os::raw::c_int,
    pub aq_lowater: ::std::os::raw::c_int,
    pub aq_bufsz: ::std::os::raw::c_int,
    pub aq_delay: ::std::os::raw::c_int,
    pub aq_minfree: ::std::os::raw::c_int,
}
pub type au_qctrl_t = au_qctrl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_stat {
    pub as_version: ::std::os::raw::c_uint,
    pub as_numevent: ::std::os::raw::c_uint,
    pub as_generated: ::std::os::raw::c_int,
    pub as_nonattrib: ::std::os::raw::c_int,
    pub as_kernel: ::std::os::raw::c_int,
    pub as_audit: ::std::os::raw::c_int,
    pub as_auditctl: ::std::os::raw::c_int,
    pub as_enqueue: ::std::os::raw::c_int,
    pub as_written: ::std::os::raw::c_int,
    pub as_wblocked: ::std::os::raw::c_int,
    pub as_rblocked: ::std::os::raw::c_int,
    pub as_dropped: ::std::os::raw::c_int,
    pub as_totalsize: ::std::os::raw::c_int,
    pub as_memused: ::std::os::raw::c_uint,
}
pub type au_stat_t = audit_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_fstat {
    pub af_filesz: u_int64_t,
    pub af_currsz: u_int64_t,
}
pub type au_fstat_t = audit_fstat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_evclass_map {
    pub ec_number: au_event_t,
    pub ec_class: au_class_t,
}
pub type au_evclass_map_t = au_evclass_map;
extern "C" {
    pub fn audit(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditon(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn auditctl(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauid(arg1: *mut au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauid(arg1: *const au_id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit_addr(
        arg1: *mut auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit_addr(
        arg1: *const auditinfo_addr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getaudit(arg1: *mut auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setaudit(arg1: *const auditinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_session_self() -> mach_port_name_t;
}
extern "C" {
    pub fn audit_session_join(port: mach_port_name_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_session_port(
        asid: au_asid_t,
        portname: *mut mach_port_name_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cred {
    _unused: [u8; 0],
}
pub type kauth_cred_t = *mut ucred;
pub type posix_cred_t = *mut posix_cred;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xucred {
    pub cr_version: u_int,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vmspace {
    pub dummy: i32,
    pub dummy2: caddr_t,
    pub dummy3: [i32; 5usize],
    pub dummy4: [caddr_t; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlname {
    pub ctl_name: *mut ::std::os::raw::c_char,
    pub ctl_type: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pcred {
    pub pc_lock: [::std::os::raw::c_char; 72usize],
    pub pc_ucred: *mut ucred,
    pub p_ruid: uid_t,
    pub p_svuid: uid_t,
    pub p_rgid: gid_t,
    pub p_svgid: gid_t,
    pub p_refcnt: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ucred {
    pub cr_ref: i32,
    pub cr_uid: uid_t,
    pub cr_ngroups: ::std::os::raw::c_short,
    pub cr_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinfo_proc {
    pub kp_proc: extern_proc,
    pub kp_eproc: kinfo_proc_eproc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kinfo_proc_eproc {
    pub e_paddr: *mut proc_,
    pub e_sess: *mut session,
    pub e_pcred: _pcred,
    pub e_ucred: _ucred,
    pub e_vm: vmspace,
    pub e_ppid: pid_t,
    pub e_pgid: pid_t,
    pub e_jobc: ::std::os::raw::c_short,
    pub e_tdev: dev_t,
    pub e_tpgid: pid_t,
    pub e_tsess: *mut session,
    pub e_wmesg: [::std::os::raw::c_char; 8usize],
    pub e_xsize: segsz_t,
    pub e_xrssize: ::std::os::raw::c_short,
    pub e_xccount: ::std::os::raw::c_short,
    pub e_xswrss: ::std::os::raw::c_short,
    pub e_flag: i32,
    pub e_login: [::std::os::raw::c_char; 12usize],
    pub e_spare: [i32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsw_usage {
    pub xsu_total: u_int64_t,
    pub xsu_avail: u_int64_t,
    pub xsu_used: u_int64_t,
    pub xsu_pagesize: u_int32_t,
    pub xsu_encrypted: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loadavg {
    pub ldavg: [fixpt_t; 3usize],
    pub fscale: ::std::os::raw::c_long,
}
extern "C" {
    pub static mut averunnable: loadavg;
}
extern "C" {
    pub fn sysctl(
        arg1: *mut ::std::os::raw::c_int,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *mut ::std::os::raw::c_void,
        arg6: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sysctlnametomib(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udpiphdr {
    pub ui_i: ipovly,
    pub ui_u: udphdr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udpstat {
    pub udps_ipackets: u_int32_t,
    pub udps_hdrops: u_int32_t,
    pub udps_badsum: u_int32_t,
    pub udps_badlen: u_int32_t,
    pub udps_noport: u_int32_t,
    pub udps_noportbcast: u_int32_t,
    pub udps_fullsock: u_int32_t,
    pub udpps_pcbcachemiss: u_int32_t,
    pub udpps_pcbhashmiss: u_int32_t,
    pub udps_opackets: u_int32_t,
    pub udps_fastout: u_int32_t,
    pub udps_nosum: u_int32_t,
    pub udps_noportmcast: u_int32_t,
    pub udps_filtermcast: u_int32_t,
    pub udps_rcv_swcsum: u_int32_t,
    pub udps_rcv_swcsum_bytes: u_int32_t,
    pub udps_rcv6_swcsum: u_int32_t,
    pub udps_rcv6_swcsum_bytes: u_int32_t,
    pub udps_snd_swcsum: u_int32_t,
    pub udps_snd_swcsum_bytes: u_int32_t,
    pub udps_snd6_swcsum: u_int32_t,
    pub udps_snd6_swcsum_bytes: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat {
    pub irq_ex_cnt: u32,
    pub ipi_cnt: u32,
    pub timer_cnt: u32,
    pub undef_ex_cnt: u32,
    pub unaligned_cnt: u32,
    pub vfp_cnt: u32,
    pub vfp_shortv_cnt: u32,
    pub data_ex_cnt: u32,
    pub instr_ex_cnt: u32,
}
pub type processor_cpu_stat_data_t = processor_cpu_stat;
pub type processor_cpu_stat_t = *mut processor_cpu_stat;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_stat64 {
    pub irq_ex_cnt: u64,
    pub ipi_cnt: u64,
    pub timer_cnt: u64,
    pub undef_ex_cnt: u64,
    pub unaligned_cnt: u64,
    pub vfp_cnt: u64,
    pub vfp_shortv_cnt: u64,
    pub data_ex_cnt: u64,
    pub instr_ex_cnt: u64,
    pub pmi_cnt: u64,
}
pub type processor_cpu_stat64_data_t = processor_cpu_stat64;
pub type processor_cpu_stat64_t = *mut processor_cpu_stat64;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64_2 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
pub type task_basic_info_64_2_data_t = task_basic_info_64_2;
pub type task_basic_info_64_2_t = *mut task_basic_info_64_2;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_energy: u64,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 1024usize];
pub type nspace_name_t = [::std::os::raw::c_char; 1024usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type bank_action_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_persona_info {
    pub unique_pid: u64,
    pub pid: i32,
    pub flags: u32,
    pub pidversion: u32,
    pub persona_id: u32,
    pub uid: u32,
    pub gid: u32,
    pub macho_uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_token {
    pub originator: proc_persona_info,
    pub proximate: proc_persona_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct persona_modify_info {
    pub persona_id: u32,
    pub unique_pid: u64,
}
extern "C" {
    pub fn _NSGetArgv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetArgc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _NSGetEnviron() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetProgname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _NSGetMachExecuteHeader() -> *mut mach_header_64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const ::std::os::raw::c_char,
    pub has_arg: ::std::os::raw::c_int,
    pub flag: *mut ::std::os::raw::c_int,
    pub val: ::std::os::raw::c_int,
}
extern "C" {
    pub fn getopt_long(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt_long_only(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const option,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: _bindgen_ty_11 = 0;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const kNilOptions: _bindgen_ty_12 = 0;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const kUnknownType: _bindgen_ty_14 = 1061109567;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: _bindgen_ty_15 = 0;
pub const bold: _bindgen_ty_15 = 1;
pub const italic: _bindgen_ty_15 = 2;
pub const underline: _bindgen_ty_15 = 4;
pub const outline: _bindgen_ty_15 = 8;
pub const shadow: _bindgen_ty_15 = 16;
pub const condense: _bindgen_ty_15 = 32;
pub const extend: _bindgen_ty_15 = 64;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
pub const developStage: _bindgen_ty_16 = 32;
pub const alphaStage: _bindgen_ty_16 = 64;
pub const betaStage: _bindgen_ty_16 = 96;
pub const finalStage: _bindgen_ty_16 = 128;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
pub const OSUnknownByteOrder: _bindgen_ty_17 = 0;
pub const OSLittleEndian: _bindgen_ty_17 = 1;
pub const OSBigEndian: _bindgen_ty_17 = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
extern "C" {
    pub fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_attributes(
        clock_ctrl: clock_ctrl_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_priv_subsystem {
    pub Request_clock_set_time: __Request__clock_set_time_t,
    pub Request_clock_set_attributes: __Request__clock_set_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_priv_subsystem {
    pub Reply_clock_set_time: __Reply__clock_set_time_t,
    pub Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn host_get_boot_info(
        host_priv: host_priv_t,
        boot_info: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_reboot(host_priv: host_priv_t, options: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn host_priv_statistics(
        host_priv: host_priv_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_default_memory_manager(
        host_priv: host_priv_t,
        default_manager: *mut memory_object_default_t,
        cluster_size: memory_object_cluster_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_wire(
        host_priv: host_priv_t,
        thread: thread_act_t,
        wired: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate_cpm(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processors(
        host_priv: host_priv_t,
        out_processor_list: *mut processor_array_t,
        out_processor_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_control(
        host_priv: host_priv_t,
        clock_id: clock_id_t,
        clock_ctrl: *mut clock_ctrl_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_create(
        host_priv: host_priv_t,
        info: vm_address_t,
        module: *mut kmod_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) -> kern_return_t;
}
extern "C" {
    pub fn kmod_control(
        host_priv: host_priv_t,
        module: kmod_t,
        flavor: kmod_control_flavor_t,
        data: *mut kmod_args_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_special_port(
        host_priv: host_priv_t,
        node: ::std::os::raw::c_int,
        which: ::std::os::raw::c_int,
        port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_special_port(
        host_priv: host_priv_t,
        which: ::std::os::raw::c_int,
        port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_swap_exception_ports(
        host_priv: host_priv_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlerss: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_wire(
        host_priv: host_priv_t,
        task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        desired_access: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_sets(
        host_priv: host_priv_t,
        processor_sets: *mut processor_set_name_array_t,
        processor_setsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_set_priv(
        host_priv: host_priv_t,
        set_name: processor_set_name_t,
        set: *mut processor_set_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn host_get_UNDServer(host: host_priv_t, server: *mut UNDServerRef) -> kern_return_t;
}
extern "C" {
    pub fn kext_request(
        host_priv: host_priv_t,
        user_log_flags: u32,
        request_data: vm_offset_t,
        request_dataCnt: mach_msg_type_number_t,
        response_data: *mut vm_offset_t,
        response_dataCnt: *mut mach_msg_type_number_t,
        log_data: *mut vm_offset_t,
        log_dataCnt: *mut mach_msg_type_number_t,
        op_result: *mut kern_return_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub options: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub cluster_size: memory_object_cluster_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wired: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processors_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub info: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub module: kmod_t,
    pub flavor: kmod_control_flavor_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub node: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub desired_access: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_sets_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub request_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub user_log_flags: u32,
    pub request_dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_priv_subsystem {
    pub Request_host_get_boot_info: __Request__host_get_boot_info_t,
    pub Request_host_reboot: __Request__host_reboot_t,
    pub Request_host_priv_statistics: __Request__host_priv_statistics_t,
    pub Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    pub Request_vm_wire: __Request__vm_wire_t,
    pub Request_thread_wire: __Request__thread_wire_t,
    pub Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    pub Request_host_processors: __Request__host_processors_t,
    pub Request_host_get_clock_control: __Request__host_get_clock_control_t,
    pub Request_kmod_create: __Request__kmod_create_t,
    pub Request_kmod_destroy: __Request__kmod_destroy_t,
    pub Request_kmod_control: __Request__kmod_control_t,
    pub Request_host_get_special_port: __Request__host_get_special_port_t,
    pub Request_host_set_special_port: __Request__host_set_special_port_t,
    pub Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    pub Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    pub Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    pub Request_mach_vm_wire: __Request__mach_vm_wire_t,
    pub Request_host_processor_sets: __Request__host_processor_sets_t,
    pub Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    pub Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    pub Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    pub Request_kext_request: __Request__kext_request_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_boot_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub boot_infoOffset: mach_msg_type_number_t,
    pub boot_infoCnt: mach_msg_type_number_t,
    pub boot_info: [::std::os::raw::c_char; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_reboot_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_priv_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_default_memory_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_manager: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_cpm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processors_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_ctrl: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub module: kmod_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_control_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlerss: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_sets_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub processor_sets: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_setsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_set_priv_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_UNDServer_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub server: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kext_request_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub response_data: mach_msg_ool_descriptor_t,
    pub log_data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub response_dataCnt: mach_msg_type_number_t,
    pub log_dataCnt: mach_msg_type_number_t,
    pub op_result: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_priv_subsystem {
    pub Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    pub Reply_host_reboot: __Reply__host_reboot_t,
    pub Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    pub Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    pub Reply_vm_wire: __Reply__vm_wire_t,
    pub Reply_thread_wire: __Reply__thread_wire_t,
    pub Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    pub Reply_host_processors: __Reply__host_processors_t,
    pub Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    pub Reply_kmod_create: __Reply__kmod_create_t,
    pub Reply_kmod_destroy: __Reply__kmod_destroy_t,
    pub Reply_kmod_control: __Reply__kmod_control_t,
    pub Reply_host_get_special_port: __Reply__host_get_special_port_t,
    pub Reply_host_set_special_port: __Reply__host_set_special_port_t,
    pub Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    pub Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    pub Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    pub Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    pub Reply_host_processor_sets: __Reply__host_processor_sets_t,
    pub Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    pub Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    pub Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    pub Reply_kext_request: __Reply__kext_request_t,
}
extern "C" {
    pub fn host_security_create_task_token(
        host_security: host_security_t,
        parent_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_security_set_task_token(
        host_security: host_security_t,
        target_task: task_t,
        sec_token: security_token_t,
        audit_token: audit_token_t,
        host: host_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub target_task: mach_msg_port_descriptor_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub sec_token: security_token_t,
    pub audit_token: audit_token_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__host_security_subsystem {
    pub Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    pub Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_create_task_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_security_set_task_token_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__host_security_subsystem {
    pub Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    pub Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
}
extern "C" {
    pub fn processor_start(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_exit(processor: processor_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_info(
        processor: processor_t,
        flavor: processor_flavor_t,
        host: *mut host_t,
        processor_info_out: processor_info_t,
        processor_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_control(
        processor: processor_t,
        processor_cmd: processor_info_t,
        processor_cmdCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_assign(
        processor: processor_t,
        new_set: processor_set_t,
        wait: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_get_assignment(
        processor: processor_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_start_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_exit_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub processor_cmdCnt: mach_msg_type_number_t,
    pub processor_cmd: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub wait: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_subsystem {
    pub Request_processor_start: __Request__processor_start_t,
    pub Request_processor_exit: __Request__processor_exit_t,
    pub Request_processor_info: __Request__processor_info_t,
    pub Request_processor_control: __Request__processor_control_t,
    pub Request_processor_assign: __Request__processor_assign_t,
    pub Request_processor_get_assignment: __Request__processor_get_assignment_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_start_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_exit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub processor_info_outCnt: mach_msg_type_number_t,
    pub processor_info_out: [integer_t; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_subsystem {
    pub Reply_processor_start: __Reply__processor_start_t,
    pub Reply_processor_exit: __Reply__processor_exit_t,
    pub Reply_processor_info: __Reply__processor_info_t,
    pub Reply_processor_control: __Reply__processor_control_t,
    pub Reply_processor_assign: __Reply__processor_assign_t,
    pub Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
}
extern "C" {
    pub fn processor_set_statistics(
        pset: processor_set_name_t,
        flavor: processor_set_flavor_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_destroy(set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_max_priority(
        processor_set: processor_set_t,
        max_priority: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_enable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_disable(
        processor_set: processor_set_t,
        policy: ::std::os::raw::c_int,
        change_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks(
        processor_set: processor_set_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_threads(
        processor_set: processor_set_t,
        thread_list: *mut thread_act_array_t,
        thread_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_policy_control(
        pset: processor_set_t,
        flavor: processor_set_flavor_t,
        policy_info: processor_set_info_t,
        policy_infoCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_stack_usage(
        pset: processor_set_t,
        ltotal: *mut ::std::os::raw::c_uint,
        space: *mut vm_size_t,
        resident: *mut vm_size_t,
        maxusage: *mut vm_size_t,
        maxstack: *mut vm_offset_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_info(
        set_name: processor_set_name_t,
        flavor: ::std::os::raw::c_int,
        host: *mut host_t,
        info_out: processor_set_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_tasks_with_flavor(
        processor_set: processor_set_t,
        flavor: mach_task_flavor_t,
        task_list: *mut task_array_t,
        task_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub max_priority: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub change_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_set_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 5usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: mach_task_flavor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__processor_set_subsystem {
    pub Request_processor_set_statistics: __Request__processor_set_statistics_t,
    pub Request_processor_set_destroy: __Request__processor_set_destroy_t,
    pub Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    pub Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    pub Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    pub Request_processor_set_tasks: __Request__processor_set_tasks_t,
    pub Request_processor_set_threads: __Request__processor_set_threads_t,
    pub Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    pub Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    pub Request_processor_set_info: __Request__processor_set_info_t,
    pub Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_max_priority_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_enable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_disable_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub thread_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_policy_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_stack_usage_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ltotal: ::std::os::raw::c_uint,
    pub space: vm_size_t,
    pub resident: vm_size_t,
    pub maxusage: vm_size_t,
    pub maxstack: vm_offset_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub host: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_tasks_with_flavor_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub task_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__processor_set_subsystem {
    pub Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    pub Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    pub Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    pub Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    pub Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    pub Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    pub Reply_processor_set_threads: __Reply__processor_set_threads_t,
    pub Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    pub Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    pub Reply_processor_set_info: __Reply__processor_set_info_t,
    pub Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
}
pub type sync_policy_t = ::std::os::raw::c_int;
extern "C" {
    pub fn semaphore_signal(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_all(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait(semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t)
        -> kern_return_t;
}
extern "C" {
    pub fn semaphore_timedwait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
        wait_time: mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_wait_signal(
        wait_semaphore: semaphore_t,
        signal_semaphore: semaphore_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) -> kern_return_t;
}
extern "C" {
    pub fn task_create(
        target_task: task_t,
        ledgers: ledger_array_t,
        ledgersCnt: mach_msg_type_number_t,
        inherit_memory: boolean_t,
        child_task: *mut task_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_terminate(target_task: task_t) -> kern_return_t;
}
extern "C" {
    pub fn task_threads(
        target_task: task_inspect_t,
        act_list: *mut thread_act_array_t,
        act_listCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_register(
        target_task: task_t,
        init_port_set: mach_port_array_t,
        init_port_setCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_ports_lookup(
        target_task: task_t,
        init_port_set: *mut mach_port_array_t,
        init_port_setCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_info(
        target_task: task_name_t,
        flavor: task_flavor_t,
        task_info_out: task_info_t,
        task_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_info(
        target_task: task_t,
        flavor: task_flavor_t,
        task_info_in: task_info_t,
        task_info_inCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_resume(target_task: task_read_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_special_port(
        task: task_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_special_port(
        task: task_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_create(parent_task: task_t, child_act: *mut thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_create_running(
        parent_task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
        child_act: *mut thread_act_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_exception_ports(
        task: task_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_create(
        task: task_t,
        new_lock_set: *mut lock_set_t,
        n_ulocks: ::std::os::raw::c_int,
        policy: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn lock_set_destroy(task: task_t, lock_set: lock_set_t) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_create(
        task: task_t,
        semaphore: *mut semaphore_t,
        policy: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn semaphore_destroy(task: task_t, semaphore: semaphore_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_set(
        task: task_policy_set_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_policy_get(
        task: task_policy_get_t,
        flavor: task_policy_flavor_t,
        policy_info: task_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_sample(task: task_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_policy(
        task: task_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation(
        target_port: task_t,
        routine_entry_pt: vm_address_t,
        routine_number: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_emulation_vector(
        task: task_t,
        vector_start: *mut ::std::os::raw::c_int,
        emulation_vector: *mut emulation_vector_t,
        emulation_vectorCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_emulation_vector(
        task: task_t,
        vector_start: ::std::os::raw::c_int,
        emulation_vector: emulation_vector_t,
        emulation_vectorCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_ras_pc(
        target_task: task_t,
        basepc: vm_address_t,
        boundspc: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_zone_info(
        target_task: task_inspect_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut task_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign(
        task: task_t,
        new_set: processor_set_t,
        assign_threads: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_assign_default(task: task_t, assign_threads: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn task_get_assignment(
        task: task_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_policy(
        task: task_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
        change: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_state(
        task: task_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_state(
        task: task_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_phys_footprint_limit(
        task: task_t,
        new_limit: ::std::os::raw::c_int,
        old_limit: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_suspend2(
        target_task: task_read_t,
        suspend_token: *mut task_suspension_token_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_resume2(suspend_token: task_suspension_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_purgable_info(
        task: task_inspect_t,
        stats: *mut task_purgable_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_mach_voucher(
        task: task_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn task_swap_mach_voucher(
        task: task_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_generate_corpse(
        task: task_read_t,
        corpse_task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut vm_address_t,
        kcd_size: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_unregister_dyld_image_infos(
        task: task_t,
        dyld_images: dyld_kernel_image_info_array_t,
        dyld_imagesCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_dyld_image_infos(
        task: task_read_t,
        dyld_images: *mut dyld_kernel_image_info_array_t,
        dyld_imagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_shared_cache_image_info(
        task: task_t,
        dyld_cache_image: dyld_kernel_image_info_t,
        no_cache: boolean_t,
        private_cache: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) -> kern_return_t;
}
extern "C" {
    pub fn task_register_dyld_get_process_state(
        task: task_t,
        dyld_process_state: *mut dyld_kernel_process_info_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_corpse_info_64(
        task: task_t,
        corspe_task: task_read_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_inspect(
        task: task_inspect_t,
        flavor: task_inspect_flavor_t,
        info_out: task_inspect_info_t,
        info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exc_guard_behavior(
        task: task_inspect_t,
        behavior: *mut task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_exc_guard_behavior(
        task: task_t,
        behavior: task_exc_guard_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_register(
        target_task: task_read_t,
        notify: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_create_identity_token(task: task_t, token: *mut task_id_token_t) -> kern_return_t;
}
extern "C" {
    pub fn task_identity_token_get_task_port(
        token: task_id_token_t,
        flavor: task_flavor_t,
        task_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_deregister(
        target_task: task_read_t,
        notify: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_sync_upcall(task: task_t, port: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn task_set_corpse_forking_behavior(
        task: task_t,
        behavior: task_corpse_forking_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_test_async_upcall_propagation(
        task: task_t,
        port: mach_port_t,
        qos: ::std::os::raw::c_int,
        iotier: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_map_kcdata_object_64(
        task: task_t,
        kcdata_object: kcdata_object_t,
        kcd_addr_begin: *mut mach_vm_address_t,
        kcd_size: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub ledgers: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledgersCnt: mach_msg_type_number_t,
    pub inherit_memory: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_threads_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
    pub task_info_inCnt: mach_msg_type_number_t,
    pub task_info_in: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub n_ulocks: ::std::os::raw::c_int,
    pub policy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
    pub change: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub routine_entry_pt: vm_address_t,
    pub routine_number: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub basepc: vm_address_t,
    pub boundspc: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub assign_threads: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
    pub change: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub new_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_suspend2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_resume2_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_purgable_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_cache_image: dyld_kernel_image_info_t,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub dyld_state: u8,
    pub dyld_statePad: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corspe_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_inspect_flavor_t,
    pub info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: task_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub notify: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub behavior: task_corpse_forking_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub qos: ::std::os::raw::c_int,
    pub iotier: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub kcdata_object: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__task_subsystem {
    pub Request_task_create: __Request__task_create_t,
    pub Request_task_terminate: __Request__task_terminate_t,
    pub Request_task_threads: __Request__task_threads_t,
    pub Request_mach_ports_register: __Request__mach_ports_register_t,
    pub Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    pub Request_task_info: __Request__task_info_t,
    pub Request_task_set_info: __Request__task_set_info_t,
    pub Request_task_suspend: __Request__task_suspend_t,
    pub Request_task_resume: __Request__task_resume_t,
    pub Request_task_get_special_port: __Request__task_get_special_port_t,
    pub Request_task_set_special_port: __Request__task_set_special_port_t,
    pub Request_thread_create: __Request__thread_create_t,
    pub Request_thread_create_running: __Request__thread_create_running_t,
    pub Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    pub Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    pub Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    pub Request_lock_set_create: __Request__lock_set_create_t,
    pub Request_lock_set_destroy: __Request__lock_set_destroy_t,
    pub Request_semaphore_create: __Request__semaphore_create_t,
    pub Request_semaphore_destroy: __Request__semaphore_destroy_t,
    pub Request_task_policy_set: __Request__task_policy_set_t,
    pub Request_task_policy_get: __Request__task_policy_get_t,
    pub Request_task_sample: __Request__task_sample_t,
    pub Request_task_policy: __Request__task_policy_t,
    pub Request_task_set_emulation: __Request__task_set_emulation_t,
    pub Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    pub Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    pub Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    pub Request_task_zone_info: __Request__task_zone_info_t,
    pub Request_task_assign: __Request__task_assign_t,
    pub Request_task_assign_default: __Request__task_assign_default_t,
    pub Request_task_get_assignment: __Request__task_get_assignment_t,
    pub Request_task_set_policy: __Request__task_set_policy_t,
    pub Request_task_get_state: __Request__task_get_state_t,
    pub Request_task_set_state: __Request__task_set_state_t,
    pub Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    pub Request_task_suspend2: __Request__task_suspend2_t,
    pub Request_task_resume2: __Request__task_resume2_t,
    pub Request_task_purgable_info: __Request__task_purgable_info_t,
    pub Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    pub Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    pub Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    pub Request_task_generate_corpse: __Request__task_generate_corpse_t,
    pub Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    pub Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    pub Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    pub Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    pub Request_task_register_dyld_shared_cache_image_info:
        __Request__task_register_dyld_shared_cache_image_info_t,
    pub Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    pub Request_task_register_dyld_get_process_state:
        __Request__task_register_dyld_get_process_state_t,
    pub Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    pub Request_task_inspect: __Request__task_inspect_t,
    pub Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    pub Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    pub Request_task_dyld_process_info_notify_register:
        __Request__task_dyld_process_info_notify_register_t,
    pub Request_task_create_identity_token: __Request__task_create_identity_token_t,
    pub Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    pub Request_task_dyld_process_info_notify_deregister:
        __Request__task_dyld_process_info_notify_deregister_t,
    pub Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    pub Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    pub Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
    pub Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t,
    pub Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_task: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_threads_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub act_list: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub act_listCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_ports_lookup_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub init_port_set: mach_msg_ool_ports_descriptor_t,
    pub NDR: NDR_record_t,
    pub init_port_setCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub task_info_outCnt: mach_msg_type_number_t,
    pub task_info_out: [integer_t; 90usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_create_running_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub child_act: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_lock_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__lock_set_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub semaphore: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__semaphore_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub emulation_vector: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub vector_start: ::std::os::raw::c_int,
    pub emulation_vectorCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_emulation_vector_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_ras_pc_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_phys_footprint_limit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_limit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_suspend2_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub suspend_token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_resume2_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_purgable_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub stats: task_purgable_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_generate_corpse_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub corpse_task_port: mach_msg_port_descriptor_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: vm_address_t,
    pub kcd_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_unregister_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_dyld_image_infos_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub dyld_images: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dyld_imagesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_shared_cache_image_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_set_dyld_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_register_dyld_get_process_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dyld_process_state: dyld_kernel_process_info_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_corpse_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_inspect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info_outCnt: mach_msg_type_number_t,
    pub info_out: [integer_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub behavior: task_exc_guard_behavior_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_exc_guard_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_register_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_create_identity_token_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub token: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_identity_token_get_task_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub task_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_dyld_process_info_notify_deregister_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_sync_upcall_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_corpse_forking_behavior_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_test_async_upcall_propagation_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_map_kcdata_object_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kcd_addr_begin: mach_vm_address_t,
    pub kcd_size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__task_subsystem {
    pub Reply_task_create: __Reply__task_create_t,
    pub Reply_task_terminate: __Reply__task_terminate_t,
    pub Reply_task_threads: __Reply__task_threads_t,
    pub Reply_mach_ports_register: __Reply__mach_ports_register_t,
    pub Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    pub Reply_task_info: __Reply__task_info_t,
    pub Reply_task_set_info: __Reply__task_set_info_t,
    pub Reply_task_suspend: __Reply__task_suspend_t,
    pub Reply_task_resume: __Reply__task_resume_t,
    pub Reply_task_get_special_port: __Reply__task_get_special_port_t,
    pub Reply_task_set_special_port: __Reply__task_set_special_port_t,
    pub Reply_thread_create: __Reply__thread_create_t,
    pub Reply_thread_create_running: __Reply__thread_create_running_t,
    pub Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    pub Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    pub Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    pub Reply_lock_set_create: __Reply__lock_set_create_t,
    pub Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    pub Reply_semaphore_create: __Reply__semaphore_create_t,
    pub Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    pub Reply_task_policy_set: __Reply__task_policy_set_t,
    pub Reply_task_policy_get: __Reply__task_policy_get_t,
    pub Reply_task_sample: __Reply__task_sample_t,
    pub Reply_task_policy: __Reply__task_policy_t,
    pub Reply_task_set_emulation: __Reply__task_set_emulation_t,
    pub Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    pub Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    pub Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    pub Reply_task_zone_info: __Reply__task_zone_info_t,
    pub Reply_task_assign: __Reply__task_assign_t,
    pub Reply_task_assign_default: __Reply__task_assign_default_t,
    pub Reply_task_get_assignment: __Reply__task_get_assignment_t,
    pub Reply_task_set_policy: __Reply__task_set_policy_t,
    pub Reply_task_get_state: __Reply__task_get_state_t,
    pub Reply_task_set_state: __Reply__task_set_state_t,
    pub Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    pub Reply_task_suspend2: __Reply__task_suspend2_t,
    pub Reply_task_resume2: __Reply__task_resume2_t,
    pub Reply_task_purgable_info: __Reply__task_purgable_info_t,
    pub Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    pub Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    pub Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    pub Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    pub Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    pub Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    pub Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    pub Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    pub Reply_task_register_dyld_shared_cache_image_info:
        __Reply__task_register_dyld_shared_cache_image_info_t,
    pub Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    pub Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    pub Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    pub Reply_task_inspect: __Reply__task_inspect_t,
    pub Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    pub Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    pub Reply_task_dyld_process_info_notify_register:
        __Reply__task_dyld_process_info_notify_register_t,
    pub Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    pub Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    pub Reply_task_dyld_process_info_notify_deregister:
        __Reply__task_dyld_process_info_notify_deregister_t,
    pub Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    pub Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    pub Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
    pub Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t,
    pub Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t,
}
extern "C" {
    pub fn thread_terminate(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn act_get_state(
        target_act: thread_read_t,
        flavor: ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn act_set_state(
        target_act: thread_act_t,
        flavor: ::std::os::raw::c_int,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_state(
        target_act: thread_read_t,
        flavor: thread_state_flavor_t,
        old_state: thread_state_t,
        old_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_state(
        target_act: thread_act_t,
        flavor: thread_state_flavor_t,
        new_state: thread_state_t,
        new_stateCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_suspend(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_resume(target_act: thread_read_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_abort_safely(target_act: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_depress_abort(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_special_port(
        thr_act: thread_inspect_t,
        which_port: ::std::os::raw::c_int,
        special_port: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_special_port(
        thr_act: thread_act_t,
        which_port: ::std::os::raw::c_int,
        special_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_info(
        target_act: thread_inspect_t,
        flavor: thread_flavor_t,
        thread_info_out: thread_info_t,
        thread_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_exception_ports(
        thread: thread_act_t,
        exception_mask: exception_mask_t,
        new_port: mach_port_t,
        behavior: exception_behavior_t,
        new_flavor: thread_state_flavor_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers: exception_handler_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy(
        thr_act: thread_act_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        set_limit: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_set(
        thread: thread_act_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_policy_get(
        thread: thread_inspect_t,
        flavor: thread_policy_flavor_t,
        policy_info: thread_policy_t,
        policy_infoCnt: *mut mach_msg_type_number_t,
        get_default: *mut boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_sample(thread: thread_act_t, reply: mach_port_t) -> kern_return_t;
}
extern "C" {
    pub fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign(thread: thread_act_t, new_set: processor_set_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_assign_default(thread: thread_act_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_assignment(
        thread: thread_inspect_t,
        assigned_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_policy(
        thr_act: thread_act_t,
        pset: processor_set_t,
        policy: policy_t,
        base: policy_base_t,
        baseCnt: mach_msg_type_number_t,
        limit: policy_limit_t,
        limitCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_mach_voucher(
        thr_act: thread_read_t,
        which: mach_voucher_selector_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) -> kern_return_t;
}
extern "C" {
    pub fn thread_swap_mach_voucher(
        thr_act: thread_act_t,
        new_voucher: ipc_voucher_t,
        old_voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_convert_thread_state(
        thread: thread_act_t,
        direction: ::std::os::raw::c_int,
        flavor: thread_state_flavor_t,
        in_state: thread_state_t,
        in_stateCnt: mach_msg_type_number_t,
        out_state: thread_state_t,
        out_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn thread_get_exception_ports_info(
        port: mach_port_t,
        exception_mask: exception_mask_t,
        masks: exception_mask_array_t,
        masksCnt: *mut mach_msg_type_number_t,
        old_handlers_info: exception_handler_info_array_t,
        old_behaviors: exception_behavior_array_t,
        old_flavors: exception_flavor_array_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_terminate_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub old_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_state_flavor_t,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_suspend_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_resume_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub which_port: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_flavor_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
    pub behavior: exception_behavior_t,
    pub new_flavor: thread_state_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub set_limit: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: thread_policy_flavor_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub reply: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub trace_status: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_assign_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pset: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub policy: policy_t,
    pub baseCnt: mach_msg_type_number_t,
    pub base: [integer_t; 5usize],
    pub limitCnt: mach_msg_type_number_t,
    pub limit: [integer_t; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub which: mach_voucher_selector_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_voucher: mach_msg_port_descriptor_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub direction: ::std::os::raw::c_int,
    pub flavor: thread_state_flavor_t,
    pub in_stateCnt: mach_msg_type_number_t,
    pub in_state: [natural_t; 1296usize],
    pub out_stateCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception_mask: exception_mask_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__thread_act_subsystem {
    pub Request_thread_terminate: __Request__thread_terminate_t,
    pub Request_act_get_state: __Request__act_get_state_t,
    pub Request_act_set_state: __Request__act_set_state_t,
    pub Request_thread_get_state: __Request__thread_get_state_t,
    pub Request_thread_set_state: __Request__thread_set_state_t,
    pub Request_thread_suspend: __Request__thread_suspend_t,
    pub Request_thread_resume: __Request__thread_resume_t,
    pub Request_thread_abort: __Request__thread_abort_t,
    pub Request_thread_abort_safely: __Request__thread_abort_safely_t,
    pub Request_thread_depress_abort: __Request__thread_depress_abort_t,
    pub Request_thread_get_special_port: __Request__thread_get_special_port_t,
    pub Request_thread_set_special_port: __Request__thread_set_special_port_t,
    pub Request_thread_info: __Request__thread_info_t,
    pub Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    pub Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    pub Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    pub Request_thread_policy: __Request__thread_policy_t,
    pub Request_thread_policy_set: __Request__thread_policy_set_t,
    pub Request_thread_policy_get: __Request__thread_policy_get_t,
    pub Request_thread_sample: __Request__thread_sample_t,
    pub Request_etap_trace_thread: __Request__etap_trace_thread_t,
    pub Request_thread_assign: __Request__thread_assign_t,
    pub Request_thread_assign_default: __Request__thread_assign_default_t,
    pub Request_thread_get_assignment: __Request__thread_get_assignment_t,
    pub Request_thread_set_policy: __Request__thread_set_policy_t,
    pub Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    pub Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    pub Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    pub Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    pub Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_terminate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__act_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_suspend_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_resume_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_abort_safely_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_depress_abort_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_special_port_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub special_port: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_special_port_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub thread_info_outCnt: mach_msg_type_number_t,
    pub thread_info_out: [integer_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_exception_ports_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_handlers: [mach_msg_port_descriptor_t; 32usize],
    pub NDR: NDR_record_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_policy_get_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub policy_infoCnt: mach_msg_type_number_t,
    pub policy_info: [integer_t; 16usize],
    pub get_default: boolean_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_sample_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__etap_trace_thread_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_assign_default_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_assignment_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub assigned_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_policy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_set_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_swap_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub old_voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_convert_thread_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_stateCnt: mach_msg_type_number_t,
    pub out_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__thread_get_exception_ports_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub masksCnt: mach_msg_type_number_t,
    pub masks: [exception_mask_t; 32usize],
    pub old_handlers_info: [exception_handler_info_t; 32usize],
    pub old_behaviors: [exception_behavior_t; 32usize],
    pub old_flavors: [thread_state_flavor_t; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__thread_act_subsystem {
    pub Reply_thread_terminate: __Reply__thread_terminate_t,
    pub Reply_act_get_state: __Reply__act_get_state_t,
    pub Reply_act_set_state: __Reply__act_set_state_t,
    pub Reply_thread_get_state: __Reply__thread_get_state_t,
    pub Reply_thread_set_state: __Reply__thread_set_state_t,
    pub Reply_thread_suspend: __Reply__thread_suspend_t,
    pub Reply_thread_resume: __Reply__thread_resume_t,
    pub Reply_thread_abort: __Reply__thread_abort_t,
    pub Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    pub Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    pub Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    pub Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    pub Reply_thread_info: __Reply__thread_info_t,
    pub Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    pub Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    pub Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    pub Reply_thread_policy: __Reply__thread_policy_t,
    pub Reply_thread_policy_set: __Reply__thread_policy_set_t,
    pub Reply_thread_policy_get: __Reply__thread_policy_get_t,
    pub Reply_thread_sample: __Reply__thread_sample_t,
    pub Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    pub Reply_thread_assign: __Reply__thread_assign_t,
    pub Reply_thread_assign_default: __Reply__thread_assign_default_t,
    pub Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    pub Reply_thread_set_policy: __Reply__thread_set_policy_t,
    pub Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    pub Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    pub Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    pub Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    pub Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
}
extern "C" {
    pub fn vm_region(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_allocate(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_deallocate(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_protect(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_inherit(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_write(
        target_task: vm_map_t,
        address: vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_copy(
        target_task: vm_map_t,
        source_address: vm_address_t,
        size: vm_size_t,
        dest_address: vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_read_overwrite(
        target_task: vm_map_read_t,
        address: vm_address_t,
        size: vm_size_t,
        data: vm_address_t,
        outsize: *mut vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_msync(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_behavior_set(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: vm_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_machine_attribute(
        target_task: vm_map_t,
        address: vm_address_t,
        size: vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_wire(target_task: vm_map_t, must_wire: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut vm_size_t,
        offset: vm_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_page_query(
        target_map: vm_map_read_t,
        offset: vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_mapped_pages_info(
        task: vm_map_read_t,
        pages: *mut page_address_array_t,
        pagesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_recurse_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_info_64(
        task: vm_map_read_t,
        address: vm_address_t,
        region: *mut vm_info_region_64_t,
        objects: *mut vm_info_object_array_t,
        objectsCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_region_64(
        target_task: vm_map_read_t,
        address: *mut vm_address_t,
        size: *mut vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_make_memory_entry_64(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mach_port_t,
        parent_entry: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_64(
        target_task: vm_map_t,
        address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_purgable_control(
        target_task: vm_map_t,
        address: vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn vm_map_exec_lockdown(target_task: vm_map_t) -> kern_return_t;
}
extern "C" {
    pub fn vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut vm_address_t,
        size: vm_size_t,
        mask: vm_address_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: vm_address_t,
    pub size: vm_size_t,
    pub dest_address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub data: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: vm_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub must_wire: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
    pub offset: vm_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_entry: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: vm_address_t,
    pub size: vm_size_t,
    pub mask: vm_address_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__vm_map_subsystem {
    pub Request_vm_region: __Request__vm_region_t,
    pub Request_vm_allocate: __Request__vm_allocate_t,
    pub Request_vm_deallocate: __Request__vm_deallocate_t,
    pub Request_vm_protect: __Request__vm_protect_t,
    pub Request_vm_inherit: __Request__vm_inherit_t,
    pub Request_vm_read: __Request__vm_read_t,
    pub Request_vm_read_list: __Request__vm_read_list_t,
    pub Request_vm_write: __Request__vm_write_t,
    pub Request_vm_copy: __Request__vm_copy_t,
    pub Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    pub Request_vm_msync: __Request__vm_msync_t,
    pub Request_vm_behavior_set: __Request__vm_behavior_set_t,
    pub Request_vm_map: __Request__vm_map_t,
    pub Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    pub Request_vm_remap: __Request__vm_remap_t,
    pub Request_task_wire: __Request__task_wire_t,
    pub Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    pub Request_vm_map_page_query: __Request__vm_map_page_query_t,
    pub Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    pub Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    pub Request_vm_region_recurse: __Request__vm_region_recurse_t,
    pub Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    pub Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    pub Request_vm_region_64: __Request__vm_region_64_t,
    pub Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    pub Request_vm_map_64: __Request__vm_map_64_t,
    pub Request_vm_purgable_control: __Request__vm_purgable_control_t,
    pub Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    pub Request_vm_remap_new: __Request__vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_wire_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_mapped_pages_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pages: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub pagesCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_recurse_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_info_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub objects: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub region: vm_info_region_64_t,
    pub objectsCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_region_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_make_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_map_exec_lockdown_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__vm_map_subsystem {
    pub Reply_vm_region: __Reply__vm_region_t,
    pub Reply_vm_allocate: __Reply__vm_allocate_t,
    pub Reply_vm_deallocate: __Reply__vm_deallocate_t,
    pub Reply_vm_protect: __Reply__vm_protect_t,
    pub Reply_vm_inherit: __Reply__vm_inherit_t,
    pub Reply_vm_read: __Reply__vm_read_t,
    pub Reply_vm_read_list: __Reply__vm_read_list_t,
    pub Reply_vm_write: __Reply__vm_write_t,
    pub Reply_vm_copy: __Reply__vm_copy_t,
    pub Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    pub Reply_vm_msync: __Reply__vm_msync_t,
    pub Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    pub Reply_vm_map: __Reply__vm_map_t,
    pub Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    pub Reply_vm_remap: __Reply__vm_remap_t,
    pub Reply_task_wire: __Reply__task_wire_t,
    pub Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    pub Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    pub Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    pub Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    pub Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    pub Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    pub Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    pub Reply_vm_region_64: __Reply__vm_region_64_t,
    pub Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    pub Reply_vm_map_64: __Reply__vm_map_64_t,
    pub Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    pub Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    pub Reply_vm_remap_new: __Reply__vm_remap_new_t,
}
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
extern "C" {
    pub fn mach_host_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_thread_self() -> mach_port_t;
}
extern "C" {
    pub fn mach_task_is_self(task: task_name_t) -> boolean_t;
}
extern "C" {
    pub fn host_page_size(arg1: host_t, arg2: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub static mut mach_task_self_: mach_port_t;
}
extern "C" {
    pub fn clock_sleep_trap(
        clock_name: mach_port_name_t,
        sleep_type: sleep_type_t,
        sleep_sec: ::std::os::raw::c_int,
        sleep_nsec: ::std::os::raw::c_int,
        wakeup_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_allocate_trap(
        target: mach_port_name_t,
        addr: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_deallocate_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_dyld_process_info_notify_get(
        names_addr: mach_port_name_array_t,
        names_count_addr: *mut natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_protect_trap(
        target: mach_port_name_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_map_trap(
        target: mach_port_name_t,
        address: *mut mach_vm_offset_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        cur_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_vm_purgable_control_trap(
        target: mach_port_name_t,
        address: mach_vm_offset_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_allocate_trap(
        target: mach_port_name_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_deallocate_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_mod_refs_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_move_member_trap(
        target: mach_port_name_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_right_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        poly: mach_port_name_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_get_attributes_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_insert_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_extract_member_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_construct_trap(
        target: mach_port_name_t,
        options: *mut mach_port_options_t,
        context: u64,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_destruct_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_guard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_unguard_trap(
        target: mach_port_name_t,
        name: mach_port_name_t,
        guard: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_generate_activity_id(
        target: mach_port_name_t,
        count: ::std::os::raw::c_int,
        activity_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapon(
        filename: u64,
        flags: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_swapoff(filename: u64, flags: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn macx_triggers(
        hi_water: ::std::os::raw::c_int,
        low_water: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        alert_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_suspend(suspend: boolean_t) -> kern_return_t;
}
extern "C" {
    pub fn macx_backing_store_recovery(pid: ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn swtch_pri(pri: ::std::os::raw::c_int) -> boolean_t;
}
extern "C" {
    pub fn swtch() -> boolean_t;
}
extern "C" {
    pub fn thread_switch(
        thread_name: mach_port_name_t,
        option: ::std::os::raw::c_int,
        option_time: mach_msg_timeout_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_self_trap() -> mach_port_name_t;
}
extern "C" {
    pub fn host_create_mach_voucher_trap(
        host: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipes_size: ::std::os::raw::c_int,
        voucher: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe_trap(
        voucher_name: mach_port_name_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipe_size: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_type_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _kernelrpc_mach_port_request_notification_trap(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_name_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_name_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        tn: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn pid_for_task(t: mach_port_name_t, x: *mut ::std::os::raw::c_int) -> kern_return_t;
}
extern "C" {
    pub fn debug_control_port_for_pid(
        target_tport: mach_port_name_t,
        pid: ::std::os::raw::c_int,
        t: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub static mut bootstrap_port: mach_port_t;
}
extern "C" {
    pub static mut vprintf_stderr_func: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ap: va_list,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn host_info(
        host: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_kernel_version(
        host: host_t,
        kernel_version: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _host_page_size(host: host_t, out_page_size: *mut vm_size_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry(
        host: host_t,
        internal: boolean_t,
        size: vm_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_processor_info(
        host: host_t,
        flavor: processor_flavor_t,
        out_processor_count: *mut natural_t,
        out_processor_info: *mut processor_info_array_t,
        out_processor_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_io_main(host: host_t, io_main: *mut io_main_t) -> kern_return_t;
}
extern "C" {
    pub fn host_get_clock_service(
        host: host_t,
        clock_id: clock_id_t,
        clock_serv: *mut clock_serv_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn kmod_get_info(
        host: host_t,
        modules: *mut kmod_args_t,
        modulesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_virtual_physical_table_info(
        host: host_t,
        info: *mut hash_info_bucket_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_default(
        host: host_t,
        default_set: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn processor_set_create(
        host: host_t,
        new_set: *mut processor_set_t,
        new_name: *mut processor_set_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_object_memory_entry_64(
        host: host_t,
        internal: boolean_t,
        size: memory_object_size_t,
        permission: vm_prot_t,
        pager: memory_object_t,
        entry_handle: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info_out: host_info_t,
        host_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_request_notification(
        host: host_t,
        notify_type: host_flavor_t,
        notify_port: mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_lockgroup_info(
        host: host_t,
        lockgroup_info: *mut lockgroup_info_array_t,
        lockgroup_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_statistics64(
        host_priv: host_t,
        flavor: host_flavor_t,
        host_info64_out: host_info64_t,
        host_info64_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_create_mach_voucher(
        host: host_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: mach_msg_type_number_t,
        voucher: *mut ipc_voucher_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        new_key: *mut mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_register_well_known_mach_voucher_attr_manager(
        host: host_t,
        attr_manager: mach_voucher_attr_manager_t,
        default_value: mach_voucher_attr_value_handle_t,
        key: mach_voucher_attr_key_t,
        new_attr_control: *mut ipc_voucher_attr_control_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) -> kern_return_t;
}
extern "C" {
    pub fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_info(
        host: host_priv_t,
        names: *mut mach_zone_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        info: *mut mach_zone_info_array_t,
        infoCnt: *mut mach_msg_type_number_t,
        memory_info: *mut mach_memory_info_array_t,
        memory_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_set_multiuser_config_flags(
        host_priv: host_priv_t,
        multiuser_flags: u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_get_multiuser_config_flags(
        host: host_t,
        multiuser_flags: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn host_check_multiuser_mode(host: host_t, multiuser_mode: *mut u32) -> kern_return_t;
}
extern "C" {
    pub fn mach_zone_info_for_zone(
        host: host_priv_t,
        name: mach_zone_name_t,
        info: *mut mach_zone_info_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_kernel_version_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request___host_page_size_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: vm_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: processor_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_io_main_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub clock_id: clock_id_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__kmod_get_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_default_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__processor_set_create_t {
    pub Head: mach_msg_header_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub pager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub internal: boolean_t,
    pub size: memory_object_size_t,
    pub permission: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub notify_type: host_flavor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: host_flavor_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub attr_manager: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub default_value: mach_voucher_attr_value_handle_t,
    pub key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_info_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_zone_name_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_host_subsystem {
    pub Request_host_info: __Request__host_info_t,
    pub Request_host_kernel_version: __Request__host_kernel_version_t,
    pub Request__host_page_size: __Request___host_page_size_t,
    pub Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    pub Request_host_processor_info: __Request__host_processor_info_t,
    pub Request_host_get_io_main: __Request__host_get_io_main_t,
    pub Request_host_get_clock_service: __Request__host_get_clock_service_t,
    pub Request_kmod_get_info: __Request__kmod_get_info_t,
    pub Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    pub Request_processor_set_default: __Request__processor_set_default_t,
    pub Request_processor_set_create: __Request__processor_set_create_t,
    pub Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    pub Request_host_statistics: __Request__host_statistics_t,
    pub Request_host_request_notification: __Request__host_request_notification_t,
    pub Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    pub Request_host_statistics64: __Request__host_statistics64_t,
    pub Request_mach_zone_info: __Request__mach_zone_info_t,
    pub Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    pub Request_host_register_mach_voucher_attr_manager:
        __Request__host_register_mach_voucher_attr_manager_t,
    pub Request_host_register_well_known_mach_voucher_attr_manager:
        __Request__host_register_well_known_mach_voucher_attr_manager_t,
    pub Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    pub Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    pub Request_mach_memory_info: __Request__mach_memory_info_t,
    pub Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    pub Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    pub Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    pub Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_kernel_version_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub kernel_versionOffset: mach_msg_type_number_t,
    pub kernel_versionCnt: mach_msg_type_number_t,
    pub kernel_version: [::std::os::raw::c_char; 512usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___host_page_size_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_page_size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_processor_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub out_processor_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub out_processor_count: natural_t,
    pub out_processor_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_io_main_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub io_main: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_clock_service_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub clock_serv: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__kmod_get_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub modules: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub modulesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_virtual_physical_table_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_default_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub default_set: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__processor_set_create_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_set: mach_msg_port_descriptor_t,
    pub new_name: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_object_memory_entry_64_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub entry_handle: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info_outCnt: mach_msg_type_number_t,
    pub host_info_out: [integer_t; 68usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_request_notification_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_lockgroup_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub lockgroup_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub lockgroup_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_statistics64_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub host_info64_outCnt: mach_msg_type_number_t,
    pub host_info64_out: [integer_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_create_mach_voucher_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub voucher: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub new_key: mach_voucher_attr_key_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_register_well_known_mach_voucher_attr_manager_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub new_attr_control: mach_msg_port_descriptor_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_atm_diagnostic_flag_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub diagnostic_flag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub info: mach_msg_ool_descriptor_t,
    pub memory_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub infoCnt: mach_msg_type_number_t,
    pub memory_infoCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_set_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_get_multiuser_config_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__host_check_multiuser_mode_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub multiuser_mode: u32,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_zone_info_for_zone_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub info: mach_zone_info_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_host_subsystem {
    pub Reply_host_info: __Reply__host_info_t,
    pub Reply_host_kernel_version: __Reply__host_kernel_version_t,
    pub Reply__host_page_size: __Reply___host_page_size_t,
    pub Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    pub Reply_host_processor_info: __Reply__host_processor_info_t,
    pub Reply_host_get_io_main: __Reply__host_get_io_main_t,
    pub Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    pub Reply_kmod_get_info: __Reply__kmod_get_info_t,
    pub Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    pub Reply_processor_set_default: __Reply__processor_set_default_t,
    pub Reply_processor_set_create: __Reply__processor_set_create_t,
    pub Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    pub Reply_host_statistics: __Reply__host_statistics_t,
    pub Reply_host_request_notification: __Reply__host_request_notification_t,
    pub Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    pub Reply_host_statistics64: __Reply__host_statistics64_t,
    pub Reply_mach_zone_info: __Reply__mach_zone_info_t,
    pub Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    pub Reply_host_register_mach_voucher_attr_manager:
        __Reply__host_register_mach_voucher_attr_manager_t,
    pub Reply_host_register_well_known_mach_voucher_attr_manager:
        __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    pub Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    pub Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    pub Reply_mach_memory_info: __Reply__mach_memory_info_t,
    pub Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    pub Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    pub Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    pub Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
}
pub type routine_arg_type = ::std::os::raw::c_uint;
pub type routine_arg_offset = ::std::os::raw::c_uint;
pub type routine_arg_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_arg_descriptor {
    pub type_: routine_arg_type,
    pub size: routine_arg_size,
    pub count: routine_arg_size,
    pub offset: routine_arg_offset,
}
pub type rpc_routine_arg_descriptor_t = *mut rpc_routine_arg_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: rpc_routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
pub type rpc_routine_descriptor_t = *mut rpc_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_signature {
    pub rd: rpc_routine_descriptor,
    pub rad: [rpc_routine_arg_descriptor; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpc_subsystem {
    pub reserved: *mut ::std::os::raw::c_void,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: ::std::os::raw::c_uint,
    pub base_addr: vm_address_t,
    pub routine: [rpc_routine_descriptor; 1usize],
    pub arg_descriptor: [rpc_routine_arg_descriptor; 1usize],
}
pub type rpc_subsystem_t = *mut rpc_subsystem;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
extern "C" {
    pub fn mach_error_string(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mach_error(str_: *const ::std::os::raw::c_char, error_value: mach_error_t);
}
extern "C" {
    pub fn mach_error_type(error_value: mach_error_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn panic_init(arg1: mach_port_t);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn slot_name(
        arg1: cpu_type_t,
        arg2: cpu_subtype_t,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mig_reply_setup(arg1: *mut mach_msg_header_t, arg2: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_destroy(arg1: *mut mach_msg_header_t);
}
extern "C" {
    pub fn mach_msg_receive(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_send(arg1: *mut mach_msg_header_t) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_once(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg_server_importance(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mach_msg_header_t,
                arg2: *mut mach_msg_header_t,
            ) -> boolean_t,
        >,
        arg2: mach_msg_size_t,
        arg3: mach_port_t,
        arg4: mach_msg_options_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn clock_get_res(arg1: mach_port_t, arg2: *mut clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_set_res(arg1: mach_port_t, arg2: clock_res_t) -> kern_return_t;
}
extern "C" {
    pub fn clock_sleep(
        arg1: mach_port_t,
        arg2: ::std::os::raw::c_int,
        arg3: mach_timespec_t,
        arg4: *mut mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct voucher_mach_msg_state_s {
    _unused: [u8; 0],
}
pub type voucher_mach_msg_state_t = *mut voucher_mach_msg_state_s;
extern "C" {
    pub fn voucher_mach_msg_set(msg: *mut mach_msg_header_t) -> boolean_t;
}
extern "C" {
    pub fn voucher_mach_msg_clear(msg: *mut mach_msg_header_t);
}
extern "C" {
    pub fn voucher_mach_msg_adopt(msg: *mut mach_msg_header_t) -> voucher_mach_msg_state_t;
}
extern "C" {
    pub fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t);
}
pub type string_t = *const ::std::os::raw::c_char;
extern "C" {
    pub fn clock_get_time(
        clock_serv: clock_serv_t,
        cur_time: *mut mach_timespec_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_get_attributes(
        clock_serv: clock_serv_t,
        flavor: clock_flavor_t,
        clock_attr: clock_attr_t,
        clock_attrCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn clock_alarm(
        clock_serv: clock_serv_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
        alarm_port: clock_reply_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_time_t {
    pub Head: mach_msg_header_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub flavor: clock_flavor_t,
    pub clock_attrCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub alarm_port: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_subsystem {
    pub Request_clock_get_time: __Request__clock_get_time_t,
    pub Request_clock_get_attributes: __Request__clock_get_attributes_t,
    pub Request_clock_alarm: __Request__clock_alarm_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_time_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub cur_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub clock_attrCnt: mach_msg_type_number_t,
    pub clock_attr: [::std::os::raw::c_int; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_subsystem {
    pub Reply_clock_get_time: __Reply__clock_get_time_t,
    pub Reply_clock_get_attributes: __Reply__clock_get_attributes_t,
    pub Reply_clock_alarm: __Reply__clock_alarm_t,
}
extern "C" {
    pub fn clock_alarm_reply(
        alarm_port: clock_reply_t,
        alarm_portPoly: mach_msg_type_name_t,
        alarm_code: kern_return_t,
        alarm_type: alarm_type_t,
        alarm_time: mach_timespec_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub alarm_code: kern_return_t,
    pub alarm_type: alarm_type_t,
    pub alarm_time: mach_timespec_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__clock_reply_subsystem {
    pub Request_clock_alarm_reply: __Request__clock_alarm_reply_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__clock_alarm_reply_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__clock_reply_subsystem {
    pub Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t,
}
extern "C" {
    pub fn exception_raise(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state(
        exception_port: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn exception_raise_state_identity(
        exception_port: mach_port_t,
        thread: mach_port_t,
        task: mach_port_t,
        exception: exception_type_t,
        code: exception_data_t,
        codeCnt: mach_msg_type_number_t,
        flavor: *mut ::std::os::raw::c_int,
        old_state: thread_state_t,
        old_stateCnt: mach_msg_type_number_t,
        new_state: thread_state_t,
        new_stateCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub thread: mach_msg_port_descriptor_t,
    pub task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub exception: exception_type_t,
    pub codeCnt: mach_msg_type_number_t,
    pub code: [integer_t; 2usize],
    pub flavor: ::std::os::raw::c_int,
    pub old_stateCnt: mach_msg_type_number_t,
    pub old_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__exc_subsystem {
    pub Request_exception_raise: __Request__exception_raise_t,
    pub Request_exception_raise_state: __Request__exception_raise_state_t,
    pub Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__exception_raise_state_identity_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub flavor: ::std::os::raw::c_int,
    pub new_stateCnt: mach_msg_type_number_t,
    pub new_state: [natural_t; 1296usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__exc_subsystem {
    pub Reply_exception_raise: __Reply__exception_raise_t,
    pub Reply_exception_raise_state: __Reply__exception_raise_state_t,
    pub Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timebase_info {
    pub numer: u32,
    pub denom: u32,
}
pub type mach_timebase_info_t = *mut mach_timebase_info;
pub type mach_timebase_info_data_t = mach_timebase_info;
extern "C" {
    pub fn mach_timebase_info(info: mach_timebase_info_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_wait_until(deadline: u64) -> kern_return_t;
}
extern "C" {
    pub fn mach_absolute_time() -> u64;
}
extern "C" {
    pub fn mach_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_time() -> u64;
}
extern "C" {
    pub fn mach_continuous_approximate_time() -> u64;
}
extern "C" {
    pub fn mach_vm_allocate(
        target: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_deallocate(
        target: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_protect(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        set_maximum: boolean_t,
        new_protection: vm_prot_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_inherit(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: *mut vm_offset_t,
        dataCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_list(
        target_task: vm_map_read_t,
        data_list: *mut mach_vm_read_entry,
        count: natural_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_write(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        data: vm_offset_t,
        dataCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_copy(
        target_task: vm_map_t,
        source_address: mach_vm_address_t,
        size: mach_vm_size_t,
        dest_address: mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_read_overwrite(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        data: mach_vm_address_t,
        outsize: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_msync(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        sync_flags: vm_sync_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_behavior_set(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        new_behavior: vm_behavior_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_map(
        target_task: vm_map_t,
        address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        object: mem_entry_name_port_t,
        offset: memory_object_offset_t,
        copy: boolean_t,
        cur_protection: vm_prot_t,
        max_protection: vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_machine_attribute(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        size: mach_vm_size_t,
        attribute: vm_machine_attribute_t,
        value: *mut vm_machine_attribute_val_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_query(
        target_map: vm_map_read_t,
        offset: mach_vm_offset_t,
        disposition: *mut integer_t,
        ref_count: *mut integer_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region_recurse(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        nesting_depth: *mut natural_t,
        info: vm_region_recurse_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_region(
        target_task: vm_map_read_t,
        address: *mut mach_vm_address_t,
        size: *mut mach_vm_size_t,
        flavor: vm_region_flavor_t,
        info: vm_region_info_t,
        infoCnt: *mut mach_msg_type_number_t,
        object_name: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn _mach_make_memory_entry(
        target_task: vm_map_t,
        size: *mut memory_object_size_t,
        offset: memory_object_offset_t,
        permission: vm_prot_t,
        object_handle: *mut mem_entry_name_port_t,
        parent_handle: mem_entry_name_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_purgable_control(
        target_task: vm_map_t,
        address: mach_vm_address_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_info(
        target_task: vm_map_read_t,
        address: mach_vm_address_t,
        flavor: vm_page_info_flavor_t,
        info: vm_page_info_t,
        infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_page_range_query(
        target_map: vm_map_read_t,
        address: mach_vm_offset_t,
        size: mach_vm_size_t,
        dispositions: mach_vm_address_t,
        dispositions_count: *mut mach_vm_size_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_vm_remap_new(
        target_task: vm_map_t,
        target_address: *mut mach_vm_address_t,
        size: mach_vm_size_t,
        mask: mach_vm_offset_t,
        flags: ::std::os::raw::c_int,
        src_task: vm_map_read_t,
        src_address: mach_vm_address_t,
        copy: boolean_t,
        cur_protection: *mut vm_prot_t,
        max_protection: *mut vm_prot_t,
        inheritance: vm_inherit_t,
    ) -> kern_return_t;
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub set_maximum: boolean_t,
    pub new_protection: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub data_list: mach_vm_read_entry_t,
    pub count: natural_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub source_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub dest_address: mach_vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub data: mach_vm_address_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub sync_flags: vm_sync_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub new_behavior: vm_behavior_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub offset: memory_object_offset_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub attribute: vm_machine_attribute_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub offset: mach_vm_offset_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_region_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub parent_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
    pub offset: memory_object_offset_t,
    pub permission: vm_prot_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub flavor: vm_page_info_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_offset_t,
    pub size: mach_vm_size_t,
    pub dispositions: mach_vm_address_t,
    pub dispositions_count: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub src_task: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub target_address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub mask: mach_vm_offset_t,
    pub flags: ::std::os::raw::c_int,
    pub src_address: mach_vm_address_t,
    pub copy: boolean_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_vm_subsystem {
    pub Request_mach_vm_allocate: __Request__mach_vm_allocate_t,
    pub Request_mach_vm_deallocate: __Request__mach_vm_deallocate_t,
    pub Request_mach_vm_protect: __Request__mach_vm_protect_t,
    pub Request_mach_vm_inherit: __Request__mach_vm_inherit_t,
    pub Request_mach_vm_read: __Request__mach_vm_read_t,
    pub Request_mach_vm_read_list: __Request__mach_vm_read_list_t,
    pub Request_mach_vm_write: __Request__mach_vm_write_t,
    pub Request_mach_vm_copy: __Request__mach_vm_copy_t,
    pub Request_mach_vm_read_overwrite: __Request__mach_vm_read_overwrite_t,
    pub Request_mach_vm_msync: __Request__mach_vm_msync_t,
    pub Request_mach_vm_behavior_set: __Request__mach_vm_behavior_set_t,
    pub Request_mach_vm_map: __Request__mach_vm_map_t,
    pub Request_mach_vm_machine_attribute: __Request__mach_vm_machine_attribute_t,
    pub Request_mach_vm_remap: __Request__mach_vm_remap_t,
    pub Request_mach_vm_page_query: __Request__mach_vm_page_query_t,
    pub Request_mach_vm_region_recurse: __Request__mach_vm_region_recurse_t,
    pub Request_mach_vm_region: __Request__mach_vm_region_t,
    pub Request__mach_make_memory_entry: __Request___mach_make_memory_entry_t,
    pub Request_mach_vm_purgable_control: __Request__mach_vm_purgable_control_t,
    pub Request_mach_vm_page_info: __Request__mach_vm_page_info_t,
    pub Request_mach_vm_page_range_query: __Request__mach_vm_page_range_query_t,
    pub Request_mach_vm_remap_new: __Request__mach_vm_remap_new_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_protect_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_inherit_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub data: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub dataCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_list_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub data_list: mach_vm_read_entry_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_write_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_copy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_read_overwrite_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub outsize: mach_vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_msync_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_behavior_set_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_map_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_machine_attribute_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub value: vm_machine_attribute_val_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub disposition: integer_t,
    pub ref_count: integer_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_recurse_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub nesting_depth: natural_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 19usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_region_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_name: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 10usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply___mach_make_memory_entry_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub object_handle: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub size: memory_object_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [::std::os::raw::c_int; 32usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_page_range_query_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dispositions_count: mach_vm_size_t,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_vm_remap_new_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub target_address: mach_vm_address_t,
    pub cur_protection: vm_prot_t,
    pub max_protection: vm_prot_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_vm_subsystem {
    pub Reply_mach_vm_allocate: __Reply__mach_vm_allocate_t,
    pub Reply_mach_vm_deallocate: __Reply__mach_vm_deallocate_t,
    pub Reply_mach_vm_protect: __Reply__mach_vm_protect_t,
    pub Reply_mach_vm_inherit: __Reply__mach_vm_inherit_t,
    pub Reply_mach_vm_read: __Reply__mach_vm_read_t,
    pub Reply_mach_vm_read_list: __Reply__mach_vm_read_list_t,
    pub Reply_mach_vm_write: __Reply__mach_vm_write_t,
    pub Reply_mach_vm_copy: __Reply__mach_vm_copy_t,
    pub Reply_mach_vm_read_overwrite: __Reply__mach_vm_read_overwrite_t,
    pub Reply_mach_vm_msync: __Reply__mach_vm_msync_t,
    pub Reply_mach_vm_behavior_set: __Reply__mach_vm_behavior_set_t,
    pub Reply_mach_vm_map: __Reply__mach_vm_map_t,
    pub Reply_mach_vm_machine_attribute: __Reply__mach_vm_machine_attribute_t,
    pub Reply_mach_vm_remap: __Reply__mach_vm_remap_t,
    pub Reply_mach_vm_page_query: __Reply__mach_vm_page_query_t,
    pub Reply_mach_vm_region_recurse: __Reply__mach_vm_region_recurse_t,
    pub Reply_mach_vm_region: __Reply__mach_vm_region_t,
    pub Reply__mach_make_memory_entry: __Reply___mach_make_memory_entry_t,
    pub Reply_mach_vm_purgable_control: __Reply__mach_vm_purgable_control_t,
    pub Reply_mach_vm_page_info: __Reply__mach_vm_page_info_t,
    pub Reply_mach_vm_page_range_query: __Reply__mach_vm_page_range_query_t,
    pub Reply_mach_vm_remap_new: __Reply__mach_vm_remap_new_t,
}
extern "C" {
    pub fn mach_voucher_extract_attr_content(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        content: mach_voucher_attr_content_t,
        contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_attr_recipe(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        recipe: mach_voucher_attr_raw_recipe_t,
        recipeCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_extract_all_attr_recipes(
        voucher: ipc_voucher_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_attr_command(
        voucher: ipc_voucher_t,
        key: mach_voucher_attr_key_t,
        command: mach_voucher_attr_command_t,
        in_content: mach_voucher_attr_content_t,
        in_contentCnt: mach_msg_type_number_t,
        out_content: mach_voucher_attr_content_t,
        out_contentCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_voucher_debug_info(
        task: ipc_space_read_t,
        voucher_name: mach_port_name_t,
        recipes: mach_voucher_attr_raw_recipe_array_t,
        recipesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub recipeCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_command_t,
    pub in_contentCnt: mach_msg_type_number_t,
    pub in_content: [u8; 4096usize],
    pub out_contentCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub voucher_name: mach_port_name_t,
    pub recipesCnt: mach_msg_type_number_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_voucher_subsystem {
    pub Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t,
    pub Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t,
    pub Request_mach_voucher_extract_all_attr_recipes:
        __Request__mach_voucher_extract_all_attr_recipes_t,
    pub Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t,
    pub Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_content_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub contentCnt: mach_msg_type_number_t,
    pub content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_attr_recipe_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipeCnt: mach_msg_type_number_t,
    pub recipe: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_extract_all_attr_recipes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_attr_command_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub out_contentCnt: mach_msg_type_number_t,
    pub out_content: [u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_voucher_debug_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub recipesCnt: mach_msg_type_number_t,
    pub recipes: [u8; 5120usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_voucher_subsystem {
    pub Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t,
    pub Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t,
    pub Reply_mach_voucher_extract_all_attr_recipes:
        __Reply__mach_voucher_extract_all_attr_recipes_t,
    pub Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t,
    pub Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t,
}
extern "C" {
    pub fn mach_memory_entry_purgable_control(
        mem_entry: mem_entry_name_port_t,
        control: vm_purgable_t,
        state: *mut ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_access_tracking(
        mem_entry: mem_entry_name_port_t,
        access_tracking: *mut ::std::os::raw::c_int,
        access_tracking_reads: *mut u32,
        access_tracking_writes: *mut u32,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_memory_entry_ownership(
        mem_entry: mem_entry_name_port_t,
        owner: task_t,
        ledger_tag: ::std::os::raw::c_int,
        ledger_flags: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub control: vm_purgable_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub access_tracking: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub owner: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub ledger_tag: ::std::os::raw::c_int,
    pub ledger_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__memory_entry_subsystem {
    pub Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t,
    pub Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t,
    pub Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_purgable_control_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_access_tracking_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub access_tracking: ::std::os::raw::c_int,
    pub access_tracking_reads: u32,
    pub access_tracking_writes: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_memory_entry_ownership_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__memory_entry_subsystem {
    pub Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t,
    pub Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t,
    pub Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct port_obj_tentry {
    pub pos_value: *mut ::std::os::raw::c_void,
    pub pos_type: ::std::os::raw::c_int,
}
extern "C" {
    pub fn port_obj_init(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut port_obj_table: *mut port_obj_tentry;
}
extern "C" {
    pub static mut port_obj_table_size: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_mapping_np {
    pub sfm_address: mach_vm_address_t,
    pub sfm_size: mach_vm_size_t,
    pub sfm_file_offset: mach_vm_offset_t,
    pub sfm_max_prot: vm_prot_t,
    pub sfm_init_prot: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_mapping_slide_np {
    pub sms_address: mach_vm_address_t,
    pub sms_size: mach_vm_size_t,
    pub sms_file_offset: mach_vm_offset_t,
    pub sms_slide_size: user_addr_t,
    pub sms_slide_start: user_addr_t,
    pub sms_max_prot: vm_prot_t,
    pub sms_init_prot: vm_prot_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_file_np {
    pub sf_fd: ::std::os::raw::c_int,
    pub sf_mappings_count: u32,
    pub sf_slide: u32,
}
extern "C" {
    pub fn shared_region_check_np(startaddress: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shared_region_map_np(
        fd: ::std::os::raw::c_int,
        mappingCount: u32,
        mappings: *const shared_file_mapping_np,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shared_region_slide_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thread_get_register_pointer_values(
        thread: thread_t,
        sp: *mut usize,
        length: *mut usize,
        values: *mut usize,
    ) -> kern_return_t;
}
pub type io_buf_ptr_t = *mut ::std::os::raw::c_char;
pub type io_name_t = [::std::os::raw::c_char; 128usize];
pub type io_string_t = [::std::os::raw::c_char; 512usize];
pub type io_string_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_struct_inband_t = [::std::os::raw::c_char; 4096usize];
pub type io_user_scalar_t = u64;
pub type io_user_reference_t = u64;
pub type io_scalar_inband_t = [io_user_scalar_t; 16usize];
pub type io_async_ref_t = [io_user_reference_t; 8usize];
pub type io_scalar_inband64_t = [io_user_scalar_t; 16usize];
pub type io_async_ref64_t = [io_user_reference_t; 8usize];
pub type io_object_t = mach_port_t;
extern "C" {
    pub static mut main_device_port: mach_port_t;
}
pub type OSAtomic_int64_aligned64_t = i64;
extern "C" {
    pub fn OSAtomicAdd32(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd32Barrier(__theAmount: i32, __theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicIncrement32(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicIncrement32Barrier(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicDecrement32(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicDecrement32Barrier(__theValue: *mut i32) -> i32;
}
extern "C" {
    pub fn OSAtomicAdd64(__theAmount: i64, __theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicAdd64Barrier(
        __theAmount: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> i64;
}
extern "C" {
    pub fn OSAtomicIncrement64(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicIncrement64Barrier(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicDecrement64(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicDecrement64Barrier(__theValue: *mut OSAtomic_int64_aligned64_t) -> i64;
}
extern "C" {
    pub fn OSAtomicOr32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicOr32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicAnd32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Barrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32Orig(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicXor32OrigBarrier(__theMask: u32, __theValue: *mut u32) -> i32;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32(__oldValue: i32, __newValue: i32, __theValue: *mut i32)
        -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap32Barrier(
        __oldValue: i32,
        __newValue: i32,
        __theValue: *mut i32,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtr(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapPtrBarrier(
        __oldValue: *mut ::std::os::raw::c_void,
        __newValue: *mut ::std::os::raw::c_void,
        __theValue: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapInt(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapIntBarrier(
        __oldValue: ::std::os::raw::c_int,
        __newValue: ::std::os::raw::c_int,
        __theValue: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLong(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwapLongBarrier(
        __oldValue: ::std::os::raw::c_long,
        __newValue: ::std::os::raw::c_long,
        __theValue: *mut ::std::os::raw::c_long,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicCompareAndSwap64Barrier(
        __oldValue: i64,
        __newValue: i64,
        __theValue: *mut OSAtomic_int64_aligned64_t,
    ) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSet(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndSetBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClear(__n: u32, __theAddress: *mut ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn OSAtomicTestAndClearBarrier(__n: u32, __theAddress: *mut ::std::os::raw::c_void)
        -> bool;
}
extern "C" {
    pub fn OSMemoryBarrier();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_18 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: *mut ::std::os::raw::c_void,
    pub opaque3: ::std::os::raw::c_int,
}
pub type OSFifoQueueHead = _bindgen_ty_18;
extern "C" {
    pub fn OSAtomicFifoEnqueue(
        __list: *mut OSFifoQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicFifoDequeue(
        __list: *mut OSFifoQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type OSSpinLock = i32;
extern "C" {
    pub fn OSSpinLockTry(__lock: *mut OSSpinLock) -> bool;
}
extern "C" {
    pub fn OSSpinLockLock(__lock: *mut OSSpinLock);
}
extern "C" {
    pub fn OSSpinLockUnlock(__lock: *mut OSSpinLock);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_19 {
    pub opaque1: *mut ::std::os::raw::c_void,
    pub opaque2: ::std::os::raw::c_long,
}
pub type OSQueueHead = _bindgen_ty_19;
extern "C" {
    pub fn OSAtomicEnqueue(
        __list: *mut OSQueueHead,
        __new: *mut ::std::os::raw::c_void,
        __offset: usize,
    );
}
extern "C" {
    pub fn OSAtomicDequeue(
        __list: *mut OSQueueHead,
        __offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_unfair_lock_s {
    pub _os_unfair_lock_opaque: u32,
}
pub type os_unfair_lock = os_unfair_lock_s;
pub type os_unfair_lock_t = *mut os_unfair_lock_s;
extern "C" {
    pub fn os_unfair_lock_lock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_trylock(lock: os_unfair_lock_t) -> bool;
}
extern "C" {
    pub fn os_unfair_lock_unlock(lock: os_unfair_lock_t);
}
extern "C" {
    pub fn os_unfair_lock_assert_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_unfair_lock_assert_not_owner(lock: *const os_unfair_lock);
}
extern "C" {
    pub fn os_proc_available_memory() -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *const ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub malloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            num_items: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub valloc: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, size: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(zone: *mut _malloc_zone_t)>,
    pub zone_name: *const ::std::os::raw::c_char,
    pub batch_malloc: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            size: usize,
            results: *mut *mut ::std::os::raw::c_void,
            num_requested: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
    >,
    pub batch_free: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            to_be_freed: *mut *mut ::std::os::raw::c_void,
            num_to_be_freed: ::std::os::raw::c_uint,
        ),
    >,
    pub introspect: *mut malloc_introspection_t,
    pub version: ::std::os::raw::c_uint,
    pub memalign: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            alignment: usize,
            size: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free_definite_size: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ),
    >,
    pub pressure_relief: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, goal: usize) -> usize,
    >,
    pub claimed_address: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut _malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
        ) -> boolean_t,
    >,
    pub try_free_default: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut _malloc_zone_t, ptr: *mut ::std::os::raw::c_void),
    >,
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_default_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_create_zone(
        start_size: vm_size_t,
        flags: ::std::os::raw::c_uint,
    ) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_destroy_zone(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_malloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_calloc(
        zone: *mut malloc_zone_t,
        num_items: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_valloc(zone: *mut malloc_zone_t, size: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_free(zone: *mut malloc_zone_t, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_from_ptr(ptr: *const ::std::os::raw::c_void) -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_size(ptr: *const ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn malloc_good_size(size: usize) -> usize;
}
extern "C" {
    pub fn malloc_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_zone_batch_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        results: *mut *mut ::std::os::raw::c_void,
        num_requested: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn malloc_zone_batch_free(
        zone: *mut malloc_zone_t,
        to_be_freed: *mut *mut ::std::os::raw::c_void,
        num: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn malloc_default_purgeable_zone() -> *mut malloc_zone_t;
}
extern "C" {
    pub fn malloc_make_purgeable(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_make_nonpurgeable(ptr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc_zone_register(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_unregister(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_set_zone_name(zone: *mut malloc_zone_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn malloc_get_zone_name(zone: *mut malloc_zone_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn malloc_zone_pressure_relief(zone: *mut malloc_zone_t, goal: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_range_t {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_statistics_t {
    pub blocks_in_use: ::std::os::raw::c_uint,
    pub size_in_use: usize,
    pub max_size_in_use: usize,
    pub size_allocated: usize,
}
pub type memory_reader_t = ::std::option::Option<
    unsafe extern "C" fn(
        remote_task: task_t,
        remote_address: vm_address_t,
        size: vm_size_t,
        local_memory: *mut *mut ::std::os::raw::c_void,
    ) -> kern_return_t,
>;
pub type vm_range_recorder_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: task_t,
        arg2: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_uint,
        arg3: *mut vm_range_t,
        arg4: ::std::os::raw::c_uint,
    ),
>;
pub type print_task_printer_t =
    ::std::option::Option<unsafe extern "C" fn(fmt: *const ::std::os::raw::c_char, ...)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct malloc_introspection_t {
    pub enumerator: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            arg1: *mut ::std::os::raw::c_void,
            type_mask: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            recorder: vm_range_recorder_t,
        ) -> kern_return_t,
    >,
    pub good_size:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, size: usize) -> usize>,
    pub check: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub print:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t, verbose: boolean_t)>,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void),
    >,
    pub force_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub force_unlock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub statistics: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t),
    >,
    pub zone_locked:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub enable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t) -> boolean_t>,
    pub disable_discharge_checking:
        ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub discharge: ::std::option::Option<
        unsafe extern "C" fn(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void),
    >,
    pub enumerate_discharged_pointers: ::std::option::Option<
        unsafe extern "C" fn(
            zone: *mut malloc_zone_t,
            report_discharged: *mut ::std::os::raw::c_void,
        ),
    >,
    pub reinit_lock: ::std::option::Option<unsafe extern "C" fn(zone: *mut malloc_zone_t)>,
    pub print_task: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            level: ::std::os::raw::c_uint,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            printer: print_task_printer_t,
        ),
    >,
    pub task_statistics: ::std::option::Option<
        unsafe extern "C" fn(
            task: task_t,
            zone_address: vm_address_t,
            reader: memory_reader_t,
            stats: *mut malloc_statistics_t,
        ),
    >,
}
extern "C" {
    pub fn malloc_printf(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn malloc_get_all_zones(
        task: task_t,
        reader: memory_reader_t,
        addresses: *mut *mut vm_address_t,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn malloc_zone_print_ptr_info(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_check(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_print(zone: *mut malloc_zone_t, verbose: boolean_t);
}
extern "C" {
    pub fn malloc_zone_statistics(zone: *mut malloc_zone_t, stats: *mut malloc_statistics_t);
}
extern "C" {
    pub fn malloc_zone_log(zone: *mut malloc_zone_t, address: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mstats {
    pub bytes_total: usize,
    pub chunks_used: usize,
    pub bytes_used: usize,
    pub chunks_free: usize,
    pub bytes_free: usize,
}
extern "C" {
    pub fn mstats() -> mstats;
}
extern "C" {
    pub fn malloc_zone_enable_discharge_checking(zone: *mut malloc_zone_t) -> boolean_t;
}
extern "C" {
    pub fn malloc_zone_disable_discharge_checking(zone: *mut malloc_zone_t);
}
extern "C" {
    pub fn malloc_zone_discharge(zone: *mut malloc_zone_t, memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc_zone_enumerate_discharged_pointers(
        zone: *mut malloc_zone_t,
        report_discharged: *mut ::std::os::raw::c_void,
    );
}
pub type NXSwappedFloat = ::std::os::raw::c_ulong;
pub type NXSwappedDouble = ::std::os::raw::c_ulonglong;
pub const NXByteOrder_NX_UnknownByteOrder: NXByteOrder = 0;
pub const NXByteOrder_NX_LittleEndian: NXByteOrder = 1;
pub const NXByteOrder_NX_BigEndian: NXByteOrder = 2;
pub type NXByteOrder = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union fasttrap_instr_t {
    pub __bindgen_anon_1: fasttrap_instr_t__bindgen_ty_1,
    pub instr32: u32,
    pub instr16: fasttrap_instr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fasttrap_instr_t__bindgen_ty_1 {
    pub instr1: u16,
    pub instr2: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fasttrap_machtp {
    pub ftmt_instr: fasttrap_instr_t,
    pub ftmt_fntype: u8,
    pub ftmt_thumb: u8,
    pub ftmt_type: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl fasttrap_machtp {
    #[inline]
    pub fn ftmt_installed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ftmt_installed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ftmt_retired(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ftmt_retired(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ftmt_installed: u8,
        ftmt_retired: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ftmt_installed: u8 = unsafe { ::std::mem::transmute(ftmt_installed) };
            ftmt_installed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ftmt_retired: u8 = unsafe { ::std::mem::transmute(ftmt_retired) };
            ftmt_retired as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type fasttrap_machtp_t = fasttrap_machtp;
extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub fn au_open() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_write(d: ::std::os::raw::c_int, m: *mut token_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close(
        d: ::std::os::raw::c_int,
        keep: ::std::os::raw::c_int,
        event: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close_buffer(
        d: ::std::os::raw::c_int,
        event: ::std::os::raw::c_short,
        buffer: *mut u_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_close_token(
        tok: *mut token_t,
        buffer: *mut u_char,
        buflen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_to_file(file: *const ::std::os::raw::c_char, tm: timeval) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_ex_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
        aia: *mut auditinfo_addr,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header64_tm(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
        tm: timeval,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header_ex(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header64(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_header32_ex(
        rec_size: ::std::os::raw::c_int,
        e_type: au_event_t,
        e_mod: au_emod_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_me() -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u32,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg32(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u32,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_arg64(
        n: ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        v: u64,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_data(
        unit_print: ::std::os::raw::c_char,
        unit_type: ::std::os::raw::c_char,
        unit_count: ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exit(retval: ::std::os::raw::c_int, err: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_groups(groups: *mut ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_newgroups(n: u16, groups: *mut gid_t) -> *mut token_t;
}
extern "C" {
    pub fn au_to_in_addr(internet_addr: *mut in_addr) -> *mut token_t;
}
extern "C" {
    pub fn au_to_in_addr_ex(internet_addr: *mut in6_addr) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ip(ip: *mut ip) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ipc(type_: ::std::os::raw::c_char, id: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_ipc_perm(perm: *mut ipc_perm) -> *mut token_t;
}
extern "C" {
    pub fn au_to_iport(iport: u16) -> *mut token_t;
}
extern "C" {
    pub fn au_to_opaque(data: *const ::std::os::raw::c_char, bytes: u16) -> *mut token_t;
}
extern "C" {
    pub fn au_to_path(path: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process32(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process64(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process32_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_process64_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return(status: ::std::os::raw::c_char, ret: u32) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return32(status: ::std::os::raw::c_char, ret: u32) -> *mut token_t;
}
extern "C" {
    pub fn au_to_return64(status: ::std::os::raw::c_char, ret: u64) -> *mut token_t;
}
extern "C" {
    pub fn au_to_seq(audit_count: ::std::os::raw::c_long) -> *mut token_t;
}
extern "C" {
    pub fn au_to_socket_ex(
        so_domain: u_short,
        so_type: u_short,
        sa_local: *mut sockaddr,
        sa_remote: *mut sockaddr,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet(so: *mut sockaddr_in) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet32(so: *mut sockaddr_in) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_inet128(so: *mut sockaddr_in6) -> *mut token_t;
}
extern "C" {
    pub fn au_to_sock_unix(so: *mut sockaddr_un) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject32(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject64(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject32_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_subject64_ex(
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exec_args(argv: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_exec_env(envp: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_certificate_hash(hash: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_krb5_principal(principal: *mut *mut ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_text(text: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_kevent(kev: *mut kevent) -> *mut token_t;
}
extern "C" {
    pub fn au_to_trailer(rec_size: ::std::os::raw::c_int) -> *mut token_t;
}
extern "C" {
    pub fn au_to_zonename(zonename: *const ::std::os::raw::c_char) -> *mut token_t;
}
extern "C" {
    pub fn au_to_identity(
        signer_type: u32,
        signing_id: *const ::std::os::raw::c_char,
        signing_id_trunc: u_char,
        team_id: *const ::std::os::raw::c_char,
        team_id_trunc: u_char,
        cdhash: *mut u8,
        cdhash_len: u16,
    ) -> *mut token_t;
}
extern "C" {
    pub fn au_bsm_to_domain(
        bsm_domain: u_short,
        local_domainp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_errno(
        bsm_error: u_char,
        errorp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_fcntl_cmd(
        bsm_fcntl_cmd: u_short,
        local_fcntl_cmdp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_bsm_to_socket_type(
        bsm_socket_type: u_short,
        local_socket_typep: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_domain_to_bsm(local_domain: ::std::os::raw::c_int) -> u_short;
}
extern "C" {
    pub fn au_errno_to_bsm(local_errno: ::std::os::raw::c_int) -> u_char;
}
extern "C" {
    pub fn au_fcntl_cmd_to_bsm(local_fcntl_command: ::std::os::raw::c_int) -> u_short;
}
extern "C" {
    pub fn au_socket_type_to_bsm(local_socket_type: ::std::os::raw::c_int) -> u_short;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_event_ent {
    pub ae_number: au_event_t,
    pub ae_name: *mut ::std::os::raw::c_char,
    pub ae_desc: *mut ::std::os::raw::c_char,
    pub ae_class: au_class_t,
}
pub type au_event_ent_t = au_event_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_class_ent {
    pub ac_name: *mut ::std::os::raw::c_char,
    pub ac_class: au_class_t,
    pub ac_desc: *mut ::std::os::raw::c_char,
}
pub type au_class_ent_t = au_class_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_user_ent {
    pub au_name: *mut ::std::os::raw::c_char,
    pub au_always: au_mask_t,
    pub au_never: au_mask_t,
}
pub type au_user_ent_t = au_user_ent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid32 {
    pub port: u_int32_t,
    pub addr: u_int32_t,
}
pub type au_tid32_t = au_tid32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tid64 {
    pub port: u_int64_t,
    pub addr: u_int32_t,
}
pub type au_tid64_t = au_tid64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tidaddr32 {
    pub port: u_int32_t,
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
pub type au_tidaddr32_t = au_tidaddr32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_tidaddr64 {
    pub port: u_int64_t,
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
pub type au_tidaddr64_t = au_tidaddr64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arg32_t {
    pub no: u_char,
    pub val: u_int32_t,
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arg64_t {
    pub no: u_char,
    pub val: u_int64_t,
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_arb_t {
    pub howtopr: u_char,
    pub bu: u_char,
    pub uc: u_char,
    pub data: *mut u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_attr32_t {
    pub mode: u_int32_t,
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub fsid: u_int32_t,
    pub nid: u_int64_t,
    pub dev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_attr64_t {
    pub mode: u_int32_t,
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub fsid: u_int32_t,
    pub nid: u_int64_t,
    pub dev: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_execarg_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_execenv_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_cert_hash_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_krb5_principal_t {
    pub count: u_int32_t,
    pub text: [*mut ::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_exit_t {
    pub status: u_int32_t,
    pub ret: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_file_t {
    pub s: u_int32_t,
    pub ms: u_int32_t,
    pub len: u_int16_t,
    pub name: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_groups_t {
    pub no: u_int16_t,
    pub list: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header32_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub s: u_int32_t,
    pub ms: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header32_ex_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub ad_type: u_int32_t,
    pub addr: [u_int32_t; 4usize],
    pub s: u_int32_t,
    pub ms: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header64_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub s: u_int64_t,
    pub ms: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_header64_ex_t {
    pub size: u_int32_t,
    pub version: u_char,
    pub e_type: u_int16_t,
    pub e_mod: u_int16_t,
    pub ad_type: u_int32_t,
    pub addr: [u_int32_t; 4usize],
    pub s: u_int64_t,
    pub ms: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_inaddr_t {
    pub addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_inaddr_ex_t {
    pub type_: u_int32_t,
    pub addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ip_t {
    pub version: u_char,
    pub tos: u_char,
    pub len: u_int16_t,
    pub id: u_int16_t,
    pub offset: u_int16_t,
    pub ttl: u_char,
    pub prot: u_char,
    pub chksm: u_int16_t,
    pub src: u_int32_t,
    pub dest: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ipc_t {
    pub type_: u_char,
    pub id: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ipcperm_t {
    pub uid: u_int32_t,
    pub gid: u_int32_t,
    pub puid: u_int32_t,
    pub pgid: u_int32_t,
    pub mode: u_int32_t,
    pub seq: u_int32_t,
    pub key: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_iport_t {
    pub port: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_opaque_t {
    pub size: u_int16_t,
    pub data: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_path_t {
    pub len: u_int16_t,
    pub path: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc32_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc64_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc32ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_proc64ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ret32_t {
    pub status: u_char,
    pub ret: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_ret64_t {
    pub err: u_char,
    pub val: u_int64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_seq_t {
    pub seqno: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socket_t {
    pub type_: u_int16_t,
    pub l_port: u_int16_t,
    pub l_addr: u_int32_t,
    pub r_port: u_int16_t,
    pub r_addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socket_ex32_t {
    pub domain: u_int16_t,
    pub type_: u_int16_t,
    pub atype: u_int16_t,
    pub l_port: u_int16_t,
    pub l_addr: [u_int32_t; 4usize],
    pub r_port: u_int32_t,
    pub r_addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketinet_ex32_t {
    pub family: u_int16_t,
    pub port: u_int16_t,
    pub addr: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketinet32_t {
    pub family: u_int16_t,
    pub port: u_int16_t,
    pub addr: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_socketunix_t {
    pub family: u_int16_t,
    pub path: [::std::os::raw::c_char; 104usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject32_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject64_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tid64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject32ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_subject64ex_t {
    pub auid: u_int32_t,
    pub euid: u_int32_t,
    pub egid: u_int32_t,
    pub ruid: u_int32_t,
    pub rgid: u_int32_t,
    pub pid: u_int32_t,
    pub sid: u_int32_t,
    pub tid: au_tidaddr64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_text_t {
    pub len: u_int16_t,
    pub text: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_zonename_t {
    pub len: u_int16_t,
    pub zonename: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_kevent_t {
    pub ident: u_int32_t,
    pub filter: u_int16_t,
    pub flags: u_int16_t,
    pub fflags: u_int32_t,
    pub data: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_invalid_t {
    pub length: u_int16_t,
    pub data: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_identity_t {
    pub signer_type: u_int32_t,
    pub signing_id_len: u_int16_t,
    pub signing_id: *mut ::std::os::raw::c_char,
    pub signing_id_truncated: u_char,
    pub team_id_len: u_int16_t,
    pub team_id: *mut ::std::os::raw::c_char,
    pub team_id_truncated: u_char,
    pub cdhash_len: u_int16_t,
    pub cdhash: *mut u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_trailer_t {
    pub magic: u_int16_t,
    pub count: u_int32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tokenstr {
    pub __bindgen_anon_1: tokenstr__bindgen_ty_1,
    pub id: u_char,
    pub data: *mut u_char,
    pub len: usize,
    pub tt: tokenstr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tokenstr__bindgen_ty_1 {
    pub arg32: au_arg32_t,
    pub arg64: au_arg64_t,
    pub arb: au_arb_t,
    pub attr32: au_attr32_t,
    pub attr64: au_attr64_t,
    pub execarg: au_execarg_t,
    pub execenv: au_execenv_t,
    pub exit: au_exit_t,
    pub file: au_file_t,
    pub grps: au_groups_t,
    pub hdr32: au_header32_t,
    pub hdr32_ex: au_header32_ex_t,
    pub hdr64: au_header64_t,
    pub hdr64_ex: au_header64_ex_t,
    pub inaddr: au_inaddr_t,
    pub inaddr_ex: au_inaddr_ex_t,
    pub ip: au_ip_t,
    pub ipc: au_ipc_t,
    pub ipcperm: au_ipcperm_t,
    pub iport: au_iport_t,
    pub opaque: au_opaque_t,
    pub path: au_path_t,
    pub proc32: au_proc32_t,
    pub proc32_ex: au_proc32ex_t,
    pub proc64: au_proc64_t,
    pub proc64_ex: au_proc64ex_t,
    pub ret32: au_ret32_t,
    pub ret64: au_ret64_t,
    pub seq: au_seq_t,
    pub socket: au_socket_t,
    pub socket_ex32: au_socket_ex32_t,
    pub sockinet_ex32: au_socketinet_ex32_t,
    pub sockunix: au_socketunix_t,
    pub subj32: au_subject32_t,
    pub subj32_ex: au_subject32ex_t,
    pub subj64: au_subject64_t,
    pub subj64_ex: au_subject64ex_t,
    pub text: au_text_t,
    pub kevent: au_kevent_t,
    pub invalid: au_invalid_t,
    pub trail: au_trailer_t,
    pub zonename: au_zonename_t,
    pub cert_hash: au_cert_hash_t,
    pub krb5_principal: au_krb5_principal_t,
    pub identity: au_identity_t,
}
pub type tokenstr_t = tokenstr;
extern "C" {
    pub fn audit_submit(
        au_event: ::std::os::raw::c_short,
        auid: au_id_t,
        status: ::std::os::raw::c_char,
        reterr: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauclass();
}
extern "C" {
    pub fn endauclass();
}
extern "C" {
    pub fn getauclassent() -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassent_r(class_int: *mut au_class_ent_t) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnam(name: *const ::std::os::raw::c_char) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnam_r(
        class_int: *mut au_class_ent_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnum(class_number: au_class_t) -> *mut au_class_ent;
}
extern "C" {
    pub fn getauclassnum_r(
        class_int: *mut au_class_ent_t,
        class_number: au_class_t,
    ) -> *mut au_class_ent;
}
extern "C" {
    pub fn setac();
}
extern "C" {
    pub fn endac();
}
extern "C" {
    pub fn getacdir(
        name: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacmin(min_val: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacfilesz(size_val: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacflg(
        auditstr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacna(
        auditstr: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacpol(auditstr: *mut ::std::os::raw::c_char, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacsflagsmask(
        which: *const ::std::os::raw::c_char,
        auditstr: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getachost(auditstr: *mut ::std::os::raw::c_char, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getacexpire(
        andflg: *mut ::std::os::raw::c_int,
        age: *mut time_t,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauditflagsbin(
        auditstr: *mut ::std::os::raw::c_char,
        masks: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getauditflagschar(
        auditstr: *mut ::std::os::raw::c_char,
        masks: *mut au_mask_t,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_preselect(
        event: au_event_t,
        mask_p: *mut au_mask_t,
        sorf: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_poltostr(
        policy: ::std::os::raw::c_int,
        maxsize: usize,
        buf: *mut ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn au_strtopol(
        polstr: *const ::std::os::raw::c_char,
        policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sflagstostr(flags: u64, maxsize: usize, buf: *mut ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn au_strtosflags(
        sflagsstr: *const ::std::os::raw::c_char,
        flags: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setauevent();
}
extern "C" {
    pub fn endauevent();
}
extern "C" {
    pub fn getauevent() -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevent_r(e: *mut au_event_ent) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnam(name: *const ::std::os::raw::c_char) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnam_r(
        e: *mut au_event_ent,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnum(event_number: au_event_t) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnum_r(e: *mut au_event_ent, event_number: au_event_t) -> *mut au_event_ent;
}
extern "C" {
    pub fn getauevnonam(event_name: *const ::std::os::raw::c_char) -> *mut au_event_t;
}
extern "C" {
    pub fn getauevnonam_r(
        ev: *mut au_event_t,
        event_name: *const ::std::os::raw::c_char,
    ) -> *mut au_event_t;
}
extern "C" {
    pub fn setauuser();
}
extern "C" {
    pub fn endauuser();
}
extern "C" {
    pub fn getauuserent() -> *mut au_user_ent;
}
extern "C" {
    pub fn getauuserent_r(u: *mut au_user_ent) -> *mut au_user_ent;
}
extern "C" {
    pub fn getauusernam(name: *const ::std::os::raw::c_char) -> *mut au_user_ent;
}
extern "C" {
    pub fn getauusernam_r(
        u: *mut au_user_ent,
        name: *const ::std::os::raw::c_char,
    ) -> *mut au_user_ent;
}
extern "C" {
    pub fn au_user_mask(
        username: *mut ::std::os::raw::c_char,
        mask_p: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfauditflags(
        usremask: *mut au_mask_t,
        usrdmask: *mut au_mask_t,
        lastmask: *mut au_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_read_rec(fp: *mut FILE, buf: *mut *mut u_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_fetch_tok(
        tok: *mut tokenstr_t,
        buf: *mut u_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_print_tok(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        raw: ::std::os::raw::c_char,
        sfrm: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn au_print_flags_tok(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn au_print_tok_xml(
        outfp: *mut FILE,
        tok: *mut tokenstr_t,
        del: *mut ::std::os::raw::c_char,
        raw: ::std::os::raw::c_char,
        sfrm: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn au_print_xml_header(outfp: *mut FILE);
}
extern "C" {
    pub fn au_print_xml_footer(outfp: *mut FILE);
}
extern "C" {
    pub fn au_strerror(bsm_error: u_char) -> *const ::std::os::raw::c_char;
}
pub const kAUNoErr: _bindgen_ty_20 = 0;
pub const kAUBadParamErr: _bindgen_ty_20 = -66049;
pub const kAUStatErr: _bindgen_ty_20 = -66048;
pub const kAUSysctlErr: _bindgen_ty_20 = -66047;
pub const kAUOpenErr: _bindgen_ty_20 = -66046;
pub const kAUMakeSubjectTokErr: _bindgen_ty_20 = -66045;
pub const kAUWriteSubjectTokErr: _bindgen_ty_20 = -66044;
pub const kAUWriteCallerTokErr: _bindgen_ty_20 = -66043;
pub const kAUMakeReturnTokErr: _bindgen_ty_20 = -66042;
pub const kAUWriteReturnTokErr: _bindgen_ty_20 = -66041;
pub const kAUCloseErr: _bindgen_ty_20 = -66040;
pub const kAUMakeTextTokErr: _bindgen_ty_20 = -66039;
pub const kAULastErr: _bindgen_ty_20 = -66038;
pub type _bindgen_ty_20 = ::std::os::raw::c_int;
extern "C" {
    pub fn au_free_token(tok: *mut token_t);
}
extern "C" {
    pub fn au_get_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_notify_initialize() -> u32;
}
extern "C" {
    pub fn au_notify_terminate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cannot_audit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_terminal_id_ex(tid: *mut au_tid_addr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_terminal_id(tid: *mut au_tid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write(
        event_code: ::std::os::raw::c_short,
        subject: *mut token_t,
        misctok: *mut token_t,
        retval: ::std::os::raw::c_char,
        errcode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success_ex(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_success_self(
        event_code: ::std::os::raw::c_short,
        misctok: *mut token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_ex(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        auid: au_id_t,
        euid: uid_t,
        egid: gid_t,
        ruid: uid_t,
        rgid: gid_t,
        pid: pid_t,
        sid: au_asid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_self(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_na_ex(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        euid: uid_t,
        egid: gid_t,
        pid: pid_t,
        tid: *mut au_tid_addr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_write_failure_na(
        event_code: ::std::os::raw::c_short,
        errmsg: *mut ::std::os::raw::c_char,
        errret: ::std::os::raw::c_int,
        euid: uid_t,
        egid: gid_t,
        pid: pid_t,
        tid: *mut au_tid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_token_to_au32(
        atoken: audit_token_t,
        auidp: *mut uid_t,
        euidp: *mut uid_t,
        egidp: *mut gid_t,
        ruidp: *mut uid_t,
        rgidp: *mut gid_t,
        pidp: *mut pid_t,
        asidp: *mut au_asid_t,
        tidp: *mut au_tid_t,
    );
}
extern "C" {
    pub fn audit_token_to_auid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_euid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_egid(atoken: audit_token_t) -> gid_t;
}
extern "C" {
    pub fn audit_token_to_ruid(atoken: audit_token_t) -> uid_t;
}
extern "C" {
    pub fn audit_token_to_rgid(atoken: audit_token_t) -> gid_t;
}
extern "C" {
    pub fn audit_token_to_pid(atoken: audit_token_t) -> pid_t;
}
extern "C" {
    pub fn audit_token_to_asid(atoken: audit_token_t) -> au_asid_t;
}
extern "C" {
    pub fn audit_token_to_pidversion(atoken: audit_token_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_car(path: *mut ::std::os::raw::c_char, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_class(evc_map: *mut au_evclass_map_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_class(evc_map: *mut au_evclass_map_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_cond(cond: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_cond(cond: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_cwd(path: *mut ::std::os::raw::c_char, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_fsize(fstat: *mut au_fstat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_fsize(fstat: *mut au_fstat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_kmask(kmask: *mut au_mask_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_kmask(kmask: *mut au_mask_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_kaudit(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_kaudit(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_pmask(api: *mut auditpinfo_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_pinfo(api: *mut auditpinfo_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_pinfo_addr(apia: *mut auditpinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_policy(policy: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_policy(policy: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_qctrl(qctrl: *mut au_qctrl_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_qctrl(qctrl: *mut au_qctrl_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sflags(flags: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_sflags(flags: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sflags_mask(
        which: *const ::std::os::raw::c_char,
        mask: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_sflags_mask(
        which: *const ::std::os::raw::c_char,
        mask: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_sinfo_addr(aia: *mut auditinfo_addr_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_stat(stats: *mut au_stat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_set_stat(stats: *mut au_stat_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_send_trigger(trigger: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_ctlmode(mode: *mut au_ctlmode_t, sz: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn audit_get_expire_after(
        expire: *mut au_expire_after_t,
        sz: usize,
    ) -> ::std::os::raw::c_int;
}
pub type audit_filter_attach_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type audit_filter_reinit_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type audit_filter_record_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        ts: *mut timespec,
        token_count: ::std::os::raw::c_int,
        tok: *const tokenstr_t,
    ),
>;
pub type audit_filter_rawrecord_t = ::std::option::Option<
    unsafe extern "C" fn(
        instance: *mut ::std::os::raw::c_void,
        ts: *mut timespec,
        data: *mut ::std::os::raw::c_void,
        len: u_int,
    ),
>;
pub type audit_filter_detach_t =
    ::std::option::Option<unsafe extern "C" fn(instance: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token {
    pub __bindgen_anon_1: au_token__bindgen_ty_1,
    pub t_data: *mut u_char,
    pub len: usize,
    pub tokens: au_token__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_token__bindgen_ty_1 {
    pub tqe_next: *mut au_token,
    pub tqe_prev: *mut *mut au_token,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record {
    pub __bindgen_anon_1: au_record__bindgen_ty_1,
    pub __bindgen_anon_2: au_record__bindgen_ty_2,
    pub used: ::std::os::raw::c_char,
    pub desc: ::std::os::raw::c_int,
    pub token_q: au_record__bindgen_ty_1,
    pub data: *mut u_char,
    pub len: usize,
    pub au_rec_q: au_record__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record__bindgen_ty_1 {
    pub tqh_first: *mut au_token,
    pub tqh_last: *mut *mut au_token,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_record__bindgen_ty_2 {
    pub le_next: *mut au_record,
    pub le_prev: *mut *mut au_record,
}
pub type au_record_t = au_record;
pub const audit_session_flags_AU_SESSION_FLAG_IS_INITIAL: audit_session_flags = 1;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_GRAPHIC_ACCESS: audit_session_flags = 16;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_TTY: audit_session_flags = 32;
pub const audit_session_flags_AU_SESSION_FLAG_IS_REMOTE: audit_session_flags = 4096;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_CONSOLE_ACCESS: audit_session_flags = 8192;
pub const audit_session_flags_AU_SESSION_FLAG_HAS_AUTHENTICATED: audit_session_flags = 16384;
pub type audit_session_flags = ::std::os::raw::c_uint;
pub const au_sdev_open_flags_AU_SDEVF_NONBLOCK: au_sdev_open_flags = 1;
pub const au_sdev_open_flags_AU_SDEVF_ALLSESSIONS: au_sdev_open_flags = 65536;
pub type au_sdev_open_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct au_sdev_handle {
    pub ash_fp: *mut FILE,
    pub ash_buf: *mut u_char,
    pub ash_reclen: ::std::os::raw::c_int,
    pub ash_bytesread: ::std::os::raw::c_int,
}
pub type au_sdev_handle_t = au_sdev_handle;
extern "C" {
    pub fn au_sdev_open(flags: ::std::os::raw::c_int) -> *mut au_sdev_handle_t;
}
extern "C" {
    pub fn au_sdev_close(ash: *mut au_sdev_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sdev_fd(ash: *mut au_sdev_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn au_sdev_read_aia(
        ash: *mut au_sdev_handle_t,
        event: *mut ::std::os::raw::c_int,
        aia_p: *mut auditinfo_addr_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSUniStr255 {
    pub length: u_int16_t,
    pub unicode: [u_int16_t; 255usize],
}
pub type ConstHFSUniStr255Param = *const HFSUniStr255;
pub const kHFSSigWord: _bindgen_ty_21 = 16964;
pub const kHFSPlusSigWord: _bindgen_ty_21 = 18475;
pub const kHFSXSigWord: _bindgen_ty_21 = 18520;
pub const kHFSPlusVersion: _bindgen_ty_21 = 4;
pub const kHFSXVersion: _bindgen_ty_21 = 5;
pub const kHFSPlusMountVersion: _bindgen_ty_21 = 825241136;
pub const kHFSJMountVersion: _bindgen_ty_21 = 1212568394;
pub const kFSKMountVersion: _bindgen_ty_21 = 1179863841;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const kHardLinkFileType: _bindgen_ty_22 = 1751936619;
pub const kHFSPlusCreator: _bindgen_ty_22 = 1751544619;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const kSymLinkFileType: _bindgen_ty_23 = 1936485995;
pub const kSymLinkCreator: _bindgen_ty_23 = 1919443312;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const kHFSMaxVolumeNameChars: _bindgen_ty_24 = 27;
pub const kHFSMaxFileNameChars: _bindgen_ty_24 = 31;
pub const kHFSPlusMaxFileNameChars: _bindgen_ty_24 = 255;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSExtentKey {
    pub keyLength: u_int8_t,
    pub forkType: u_int8_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusExtentKey {
    pub keyLength: u_int16_t,
    pub forkType: u_int8_t,
    pub pad: u_int8_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int32_t,
}
pub const kHFSExtentDensity: _bindgen_ty_25 = 3;
pub const kHFSPlusExtentDensity: _bindgen_ty_25 = 8;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSExtentDescriptor {
    pub startBlock: u_int16_t,
    pub blockCount: u_int16_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusExtentDescriptor {
    pub startBlock: u_int32_t,
    pub blockCount: u_int32_t,
}
pub type HFSExtentRecord = [HFSExtentDescriptor; 3usize];
pub type HFSPlusExtentRecord = [HFSPlusExtentDescriptor; 8usize];
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrFileInfo {
    pub __bindgen_anon_1: FndrFileInfo__bindgen_ty_1,
    pub fdType: u_int32_t,
    pub fdCreator: u_int32_t,
    pub fdFlags: u_int16_t,
    pub fdLocation: FndrFileInfo__bindgen_ty_1,
    pub opaque: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrFileInfo__bindgen_ty_1 {
    pub v: i16,
    pub h: i16,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo {
    pub __bindgen_anon_1: FndrDirInfo__bindgen_ty_1,
    pub __bindgen_anon_2: FndrDirInfo__bindgen_ty_2,
    pub frRect: FndrDirInfo__bindgen_ty_1,
    pub frFlags: ::std::os::raw::c_ushort,
    pub frLocation: FndrDirInfo__bindgen_ty_2,
    pub opaque: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo__bindgen_ty_1 {
    pub top: i16,
    pub left: i16,
    pub bottom: i16,
    pub right: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FndrDirInfo__bindgen_ty_2 {
    pub v: u_int16_t,
    pub h: u_int16_t,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrOpaqueInfo {
    pub _bindgen_opaque_blob: [u16; 8usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrExtendedDirInfo {
    pub document_id: u_int32_t,
    pub date_added: u_int32_t,
    pub extended_flags: u_int16_t,
    pub reserved3: u_int16_t,
    pub write_gen_counter: u_int32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FndrExtendedFileInfo {
    pub document_id: u_int32_t,
    pub date_added: u_int32_t,
    pub extended_flags: u_int16_t,
    pub reserved2: u_int16_t,
    pub write_gen_counter: u_int32_t,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusForkData {
    pub logicalSize: u_int64_t,
    pub clumpSize: u_int32_t,
    pub totalBlocks: u_int32_t,
    pub extents: HFSPlusExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct HFSPlusBSDInfo {
    pub __bindgen_anon_1: HFSPlusBSDInfo__bindgen_ty_1,
    pub ownerID: u_int32_t,
    pub groupID: u_int32_t,
    pub adminFlags: u_int8_t,
    pub ownerFlags: u_int8_t,
    pub fileMode: u_int16_t,
    pub special: HFSPlusBSDInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HFSPlusBSDInfo__bindgen_ty_1 {
    pub iNodeNum: u_int32_t,
    pub linkCount: u_int32_t,
    pub rawDevice: u_int32_t,
}
pub const kHFSRootParentID: _bindgen_ty_26 = 1;
pub const kHFSRootFolderID: _bindgen_ty_26 = 2;
pub const kHFSExtentsFileID: _bindgen_ty_26 = 3;
pub const kHFSCatalogFileID: _bindgen_ty_26 = 4;
pub const kHFSBadBlockFileID: _bindgen_ty_26 = 5;
pub const kHFSAllocationFileID: _bindgen_ty_26 = 6;
pub const kHFSStartupFileID: _bindgen_ty_26 = 7;
pub const kHFSAttributesFileID: _bindgen_ty_26 = 8;
pub const kHFSAttributeDataFileID: _bindgen_ty_26 = 13;
pub const kHFSRepairCatalogFileID: _bindgen_ty_26 = 14;
pub const kHFSBogusExtentFileID: _bindgen_ty_26 = 15;
pub const kHFSFirstUserCatalogNodeID: _bindgen_ty_26 = 16;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSCatalogKey {
    pub keyLength: u_int8_t,
    pub reserved: u_int8_t,
    pub parentID: u_int32_t,
    pub nodeName: [u_int8_t; 32usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusCatalogKey {
    pub keyLength: u_int16_t,
    pub parentID: u_int32_t,
    pub nodeName: HFSUniStr255,
}
pub const kHFSFolderRecord: _bindgen_ty_27 = 256;
pub const kHFSFileRecord: _bindgen_ty_27 = 512;
pub const kHFSFolderThreadRecord: _bindgen_ty_27 = 768;
pub const kHFSFileThreadRecord: _bindgen_ty_27 = 1024;
pub const kHFSPlusFolderRecord: _bindgen_ty_27 = 1;
pub const kHFSPlusFileRecord: _bindgen_ty_27 = 2;
pub const kHFSPlusFolderThreadRecord: _bindgen_ty_27 = 3;
pub const kHFSPlusFileThreadRecord: _bindgen_ty_27 = 4;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const kHFSFileLockedBit: _bindgen_ty_28 = 0;
pub const kHFSFileLockedMask: _bindgen_ty_28 = 1;
pub const kHFSThreadExistsBit: _bindgen_ty_28 = 1;
pub const kHFSThreadExistsMask: _bindgen_ty_28 = 2;
pub const kHFSHasAttributesBit: _bindgen_ty_28 = 2;
pub const kHFSHasAttributesMask: _bindgen_ty_28 = 4;
pub const kHFSHasSecurityBit: _bindgen_ty_28 = 3;
pub const kHFSHasSecurityMask: _bindgen_ty_28 = 8;
pub const kHFSHasFolderCountBit: _bindgen_ty_28 = 4;
pub const kHFSHasFolderCountMask: _bindgen_ty_28 = 16;
pub const kHFSHasLinkChainBit: _bindgen_ty_28 = 5;
pub const kHFSHasLinkChainMask: _bindgen_ty_28 = 32;
pub const kHFSHasChildLinkBit: _bindgen_ty_28 = 6;
pub const kHFSHasChildLinkMask: _bindgen_ty_28 = 64;
pub const kHFSHasDateAddedBit: _bindgen_ty_28 = 7;
pub const kHFSHasDateAddedMask: _bindgen_ty_28 = 128;
pub const kHFSFastDevPinnedBit: _bindgen_ty_28 = 8;
pub const kHFSFastDevPinnedMask: _bindgen_ty_28 = 256;
pub const kHFSDoNotFastDevPinBit: _bindgen_ty_28 = 9;
pub const kHFSDoNotFastDevPinMask: _bindgen_ty_28 = 512;
pub const kHFSFastDevCandidateBit: _bindgen_ty_28 = 10;
pub const kHFSFastDevCandidateMask: _bindgen_ty_28 = 1024;
pub const kHFSAutoCandidateBit: _bindgen_ty_28 = 11;
pub const kHFSAutoCandidateMask: _bindgen_ty_28 = 2048;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(2))]
pub struct HFSCatalogFolder {
    pub _bindgen_opaque_blob: [u16; 35usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSPlusCatalogFolder {
    pub _bindgen_opaque_blob: [u16; 44usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSCatalogFile {
    pub _bindgen_opaque_blob: [u16; 51usize],
}
#[repr(C)]
#[repr(align(2))]
pub struct HFSPlusCatalogFile {
    pub _bindgen_opaque_blob: [u16; 124usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSCatalogThread {
    pub recordType: i16,
    pub reserved: [i32; 2usize],
    pub parentID: u_int32_t,
    pub nodeName: [u_int8_t; 32usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusCatalogThread {
    pub recordType: i16,
    pub reserved: i16,
    pub parentID: u_int32_t,
    pub nodeName: HFSUniStr255,
}
pub const kHFSPlusAttrInlineData: _bindgen_ty_29 = 16;
pub const kHFSPlusAttrForkData: _bindgen_ty_29 = 32;
pub const kHFSPlusAttrExtents: _bindgen_ty_29 = 48;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrForkData {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub theFork: HFSPlusForkData,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrExtents {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub extents: HFSPlusExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrData {
    pub recordType: u_int32_t,
    pub reserved: [u_int32_t; 2usize],
    pub attrSize: u_int32_t,
    pub attrData: [u_int8_t; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrInlineData {
    pub recordType: u_int32_t,
    pub reserved: u_int32_t,
    pub logicalSize: u_int32_t,
    pub userData: [u_int8_t; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HFSPlusAttrRecord {
    pub recordType: u_int32_t,
    pub inlineData: HFSPlusAttrInlineData,
    pub attrData: HFSPlusAttrData,
    pub forkData: HFSPlusAttrForkData,
    pub overflowExtents: HFSPlusAttrExtents,
}
pub const kHFSMaxAttrNameLen: _bindgen_ty_30 = 127;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusAttrKey {
    pub keyLength: u_int16_t,
    pub pad: u_int16_t,
    pub fileID: u_int32_t,
    pub startBlock: u_int32_t,
    pub attrNameLen: u_int16_t,
    pub attrName: [u_int16_t; 127usize],
}
pub const kHFSPlusExtentKeyMaximumLength: _bindgen_ty_31 = 10;
pub const kHFSExtentKeyMaximumLength: _bindgen_ty_31 = 7;
pub const kHFSPlusCatalogKeyMaximumLength: _bindgen_ty_31 = 516;
pub const kHFSPlusCatalogKeyMinimumLength: _bindgen_ty_31 = 6;
pub const kHFSCatalogKeyMaximumLength: _bindgen_ty_31 = 37;
pub const kHFSCatalogKeyMinimumLength: _bindgen_ty_31 = 6;
pub const kHFSPlusCatalogMinNodeSize: _bindgen_ty_31 = 4096;
pub const kHFSPlusExtentMinNodeSize: _bindgen_ty_31 = 512;
pub const kHFSPlusAttrMinNodeSize: _bindgen_ty_31 = 4096;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const kHFSVolumeHardwareLockBit: _bindgen_ty_32 = 7;
pub const kHFSVolumeUnmountedBit: _bindgen_ty_32 = 8;
pub const kHFSVolumeSparedBlocksBit: _bindgen_ty_32 = 9;
pub const kHFSVolumeNoCacheRequiredBit: _bindgen_ty_32 = 10;
pub const kHFSBootVolumeInconsistentBit: _bindgen_ty_32 = 11;
pub const kHFSCatalogNodeIDsReusedBit: _bindgen_ty_32 = 12;
pub const kHFSVolumeJournaledBit: _bindgen_ty_32 = 13;
pub const kHFSVolumeInconsistentBit: _bindgen_ty_32 = 14;
pub const kHFSVolumeSoftwareLockBit: _bindgen_ty_32 = 15;
pub const kHFSUnusedNodeFixBit: _bindgen_ty_32 = 31;
pub const kHFSContentProtectionBit: _bindgen_ty_32 = 30;
pub const kHFSVolumeHardwareLockMask: _bindgen_ty_32 = 128;
pub const kHFSVolumeUnmountedMask: _bindgen_ty_32 = 256;
pub const kHFSVolumeSparedBlocksMask: _bindgen_ty_32 = 512;
pub const kHFSVolumeNoCacheRequiredMask: _bindgen_ty_32 = 1024;
pub const kHFSBootVolumeInconsistentMask: _bindgen_ty_32 = 2048;
pub const kHFSCatalogNodeIDsReusedMask: _bindgen_ty_32 = 4096;
pub const kHFSVolumeJournaledMask: _bindgen_ty_32 = 8192;
pub const kHFSVolumeInconsistentMask: _bindgen_ty_32 = 16384;
pub const kHFSVolumeSoftwareLockMask: _bindgen_ty_32 = 32768;
pub const kHFSContentProtectionMask: _bindgen_ty_32 = 1073741824;
pub const kHFSUnusedNodeFixMask: _bindgen_ty_32 = 2147483648;
pub const kHFSMDBAttributesMask: _bindgen_ty_32 = 33664;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
pub const kHFSUnusedNodesFixDate: _bindgen_ty_33 = 3320784000;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSMasterDirectoryBlock {
    pub drSigWord: u_int16_t,
    pub drCrDate: u_int32_t,
    pub drLsMod: u_int32_t,
    pub drAtrb: u_int16_t,
    pub drNmFls: u_int16_t,
    pub drVBMSt: u_int16_t,
    pub drAllocPtr: u_int16_t,
    pub drNmAlBlks: u_int16_t,
    pub drAlBlkSiz: u_int32_t,
    pub drClpSiz: u_int32_t,
    pub drAlBlSt: u_int16_t,
    pub drNxtCNID: u_int32_t,
    pub drFreeBks: u_int16_t,
    pub drVN: [u_int8_t; 28usize],
    pub drVolBkUp: u_int32_t,
    pub drVSeqNum: u_int16_t,
    pub drWrCnt: u_int32_t,
    pub drXTClpSiz: u_int32_t,
    pub drCTClpSiz: u_int32_t,
    pub drNmRtDirs: u_int16_t,
    pub drFilCnt: u_int32_t,
    pub drDirCnt: u_int32_t,
    pub drFndrInfo: [u_int32_t; 8usize],
    pub drEmbedSigWord: u_int16_t,
    pub drEmbedExtent: HFSExtentDescriptor,
    pub drXTFlSize: u_int32_t,
    pub drXTExtRec: HFSExtentRecord,
    pub drCTFlSize: u_int32_t,
    pub drCTExtRec: HFSExtentRecord,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct HFSPlusVolumeHeader {
    pub signature: u_int16_t,
    pub version: u_int16_t,
    pub attributes: u_int32_t,
    pub lastMountedVersion: u_int32_t,
    pub journalInfoBlock: u_int32_t,
    pub createDate: u_int32_t,
    pub modifyDate: u_int32_t,
    pub backupDate: u_int32_t,
    pub checkedDate: u_int32_t,
    pub fileCount: u_int32_t,
    pub folderCount: u_int32_t,
    pub blockSize: u_int32_t,
    pub totalBlocks: u_int32_t,
    pub freeBlocks: u_int32_t,
    pub nextAllocation: u_int32_t,
    pub rsrcClumpSize: u_int32_t,
    pub dataClumpSize: u_int32_t,
    pub nextCatalogID: u_int32_t,
    pub writeCount: u_int32_t,
    pub encodingsBitmap: u_int64_t,
    pub finderInfo: [u_int8_t; 32usize],
    pub allocationFile: HFSPlusForkData,
    pub extentsFile: HFSPlusForkData,
    pub catalogFile: HFSPlusForkData,
    pub attributesFile: HFSPlusForkData,
    pub startupFile: HFSPlusForkData,
}
pub const BTreeKeyLimits_kMaxKeyLength: BTreeKeyLimits = 520;
pub type BTreeKeyLimits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union BTreeKey {
    pub length8: u_int8_t,
    pub length16: u_int16_t,
    pub rawData: [u_int8_t; 522usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BTNodeDescriptor {
    pub fLink: u_int32_t,
    pub bLink: u_int32_t,
    pub kind: i8,
    pub height: u_int8_t,
    pub numRecords: u_int16_t,
    pub reserved: u_int16_t,
}
pub const kBTLeafNode: _bindgen_ty_34 = -1;
pub const kBTIndexNode: _bindgen_ty_34 = 0;
pub const kBTHeaderNode: _bindgen_ty_34 = 1;
pub const kBTMapNode: _bindgen_ty_34 = 2;
pub type _bindgen_ty_34 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct BTHeaderRec {
    pub treeDepth: u_int16_t,
    pub rootNode: u_int32_t,
    pub leafRecords: u_int32_t,
    pub firstLeafNode: u_int32_t,
    pub lastLeafNode: u_int32_t,
    pub nodeSize: u_int16_t,
    pub maxKeyLength: u_int16_t,
    pub totalNodes: u_int32_t,
    pub freeNodes: u_int32_t,
    pub reserved1: u_int16_t,
    pub clumpSize: u_int32_t,
    pub btreeType: u_int8_t,
    pub keyCompareType: u_int8_t,
    pub attributes: u_int32_t,
    pub reserved3: [u_int32_t; 16usize],
}
pub const kBTBadCloseMask: _bindgen_ty_35 = 1;
pub const kBTBigKeysMask: _bindgen_ty_35 = 2;
pub const kBTVariableIndexKeysMask: _bindgen_ty_35 = 4;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub const kHFSCaseFolding: _bindgen_ty_36 = 207;
pub const kHFSBinaryCompare: _bindgen_ty_36 = 188;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct JournalInfoBlock {
    pub flags: u_int32_t,
    pub device_signature: [u_int32_t; 8usize],
    pub offset: u_int64_t,
    pub size: u_int64_t,
    pub ext_jnl_uuid: uuid_string_t,
    pub machine_serial_num: [::std::os::raw::c_char; 48usize],
    pub reserved: [::std::os::raw::c_char; 43usize],
}
pub const kJIJournalInFSMask: _bindgen_ty_37 = 1;
pub const kJIJournalOnOtherDeviceMask: _bindgen_ty_37 = 2;
pub const kJIJournalNeedInitMask: _bindgen_ty_37 = 4;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub type text_encoding_t = u_int32_t;
pub type fsobj_type_t = u_int32_t;
pub type fsobj_tag_t = u_int32_t;
pub type fsfile_type_t = u_int32_t;
pub type fsvolid_t = u_int32_t;
pub type attrgroup_t = u_int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrlist {
    pub bitmapcount: u_short,
    pub reserved: u_int16_t,
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_set {
    pub commonattr: attrgroup_t,
    pub volattr: attrgroup_t,
    pub dirattr: attrgroup_t,
    pub fileattr: attrgroup_t,
    pub forkattr: attrgroup_t,
}
pub type attribute_set_t = attribute_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attrreference {
    pub attr_dataoffset: i32,
    pub attr_length: u_int32_t,
}
pub type attrreference_t = attrreference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct diskextent {
    pub startblock: u_int32_t,
    pub blockcount: u_int32_t,
}
pub type extentrecord = [diskextent; 8usize];
pub type vol_capabilities_set_t = [u_int32_t; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_capabilities_attr {
    pub capabilities: vol_capabilities_set_t,
    pub valid: vol_capabilities_set_t,
}
pub type vol_capabilities_attr_t = vol_capabilities_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vol_attributes_attr {
    pub validattr: attribute_set_t,
    pub nativeattr: attribute_set_t,
}
pub type vol_attributes_attr_t = vol_attributes_attr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    pub returnattrs: *mut attrlist,
    pub returnbuffer: *mut ::std::os::raw::c_void,
    pub returnbuffersize: usize,
    pub maxmatches: u_long,
    pub timelimit: timeval,
    pub searchparams1: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams1: usize,
    pub searchparams2: *mut ::std::os::raw::c_void,
    pub sizeofsearchparams2: usize,
    pub searchattrs: attrlist,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    pub ss_union_flags: u32,
    pub ss_union_layer: u32,
    pub ss_fsstate: [u_char; 548usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statfs {
    pub f_bsize: u32,
    pub f_iosize: i32,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_type: u32,
    pub f_flags: u32,
    pub f_fssubtype: u32,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_flags_ext: u32,
    pub f_reserved: [u32; 7usize],
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vfsstatfs {
    pub f_bsize: u32,
    pub f_iosize: usize,
    pub f_blocks: u64,
    pub f_bfree: u64,
    pub f_bavail: u64,
    pub f_bused: u64,
    pub f_files: u64,
    pub f_ffree: u64,
    pub f_fsid: fsid_t,
    pub f_owner: uid_t,
    pub f_flags: u64,
    pub f_fstypename: [::std::os::raw::c_char; 16usize],
    pub f_mntonname: [::std::os::raw::c_char; 1024usize],
    pub f_mntfromname: [::std::os::raw::c_char; 1024usize],
    pub f_fssubtype: u32,
    pub f_reserved: [*mut ::std::os::raw::c_void; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount {
    _unused: [u8; 0],
}
pub type mount_t = *mut mount;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode {
    _unused: [u8; 0],
}
pub type vnode_t = *mut vnode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsconf {
    pub vfc_reserved1: u32,
    pub vfc_name: [::std::os::raw::c_char; 15usize],
    pub vfc_typenum: ::std::os::raw::c_int,
    pub vfc_refcount: ::std::os::raw::c_int,
    pub vfc_flags: ::std::os::raw::c_int,
    pub vfc_reserved2: u32,
    pub vfc_reserved3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsidctl {
    pub vc_vers: ::std::os::raw::c_int,
    pub vc_fsid: fsid_t,
    pub vc_ptr: *mut ::std::os::raw::c_void,
    pub vc_len: usize,
    pub vc_spare: [u_int32_t; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsquery {
    pub vq_flags: u_int32_t,
    pub vq_spare: [u_int32_t; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_server {
    pub vs_minutes: i32,
    pub vs_server_name: [u_int8_t; 768usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct netfs_status {
    pub ns_status: u_int32_t,
    pub ns_mountopts: [::std::os::raw::c_char; 512usize],
    pub ns_waittime: u32,
    pub ns_threadcount: u32,
    pub ns_threadids: __IncompleteArrayField<u64>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fhandle {
    pub fh_len: ::std::os::raw::c_uint,
    pub fh_data: [::std::os::raw::c_uchar; 128usize],
}
pub type fhandle_t = fhandle;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_BOOT: graftdmg_type_t = 1;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_PREBOOT: graftdmg_type_t = 2;
pub const graftdmg_type_t_GRAFTDMG_CRYPTEX_DOWNLEVEL: graftdmg_type_t = 3;
pub type graftdmg_type_t = u32;
extern "C" {
    pub fn fhopen(arg1: *const fhandle, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatfs(arg1: ::std::os::raw::c_int, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfh(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fhandle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getfsstat(
        arg1: *mut statfs,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo(arg1: *mut *mut statfs, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmntinfo_r_np(
        arg1: *mut *mut statfs,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn statfs(arg1: *const ::std::os::raw::c_char, arg2: *mut statfs) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unmount(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvfsbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut vfsconf,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hfs_mount_args {
    pub fspec: *mut ::std::os::raw::c_char,
    pub hfs_uid: uid_t,
    pub hfs_gid: gid_t,
    pub hfs_mask: mode_t,
    pub hfs_encoding: u_int32_t,
    pub hfs_timezone: timezone,
    pub flags: ::std::os::raw::c_int,
    pub journal_tbuffer_size: ::std::os::raw::c_int,
    pub journal_flags: ::std::os::raw::c_int,
    pub journal_disable: ::std::os::raw::c_int,
}
pub type chtype = ::std::os::raw::c_uint;
pub type mmask_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn unctrl(arg1: chtype) -> *mut ::std::os::raw::c_char;
}
pub type NCURSES_BOOL = ::std::os::raw::c_uchar;
extern "C" {
    pub static mut acs_map: [chtype; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    _unused: [u8; 0],
}
pub type SCREEN = screen;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _win_st {
    _unused: [u8; 0],
}
pub type WINDOW = _win_st;
pub type attr_t = chtype;
extern "C" {
    pub fn addch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchnstr(arg1: *const chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addchstr(arg1: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attroff(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attron(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attrset(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_get(
        arg1: *mut attr_t,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn baudrate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn beep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgd(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bkgdset(arg1: chtype);
}
extern "C" {
    pub fn border(
        arg1: chtype,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_box"]
    pub fn box_(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_change_color() -> bool;
}
extern "C" {
    pub fn cbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chgat(
        arg1: ::std::os::raw::c_int,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtobot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clrtoeol() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn color_set(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn COLOR_PAIR(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copywin(
        arg1: *const WINDOW,
        arg2: *mut WINDOW,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn curs_set(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delay_output(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delscreen(arg1: *mut SCREEN);
}
extern "C" {
    pub fn delwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deleteln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn derwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn doupdate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn echo() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn echochar(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erase() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endwin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erasechar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn filter();
}
extern "C" {
    pub fn flash() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushinp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbkgd(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getstr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
}
extern "C" {
    pub fn halfdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_colors() -> bool;
}
extern "C" {
    pub fn has_ic() -> bool;
}
extern "C" {
    pub fn has_il() -> bool;
}
extern "C" {
    pub fn hline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idcok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn idlok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn immedok(arg1: *mut WINDOW, arg2: bool);
}
extern "C" {
    pub fn inch() -> chtype;
}
extern "C" {
    pub fn inchnstr(arg1: *mut chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inchstr(arg1: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initscr() -> *mut WINDOW;
}
extern "C" {
    pub fn init_color(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_pair(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insch(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insdelln(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insertln() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insnstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn insstr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intrflush(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isendwin() -> bool;
}
extern "C" {
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn is_wintouched(arg1: *mut WINDOW) -> bool;
}
extern "C" {
    pub fn keyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn keypad(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn leaveok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meta(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_move"]
    pub fn move_(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvaddstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvchgat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: attr_t,
        arg5: ::std::os::raw::c_short,
        arg6: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvcur(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvdelch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvderwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvgetstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvhline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinch(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> chtype;
}
extern "C" {
    pub fn mvinchnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinchstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsch(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsnstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinsstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvinstr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvprintw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvscanw(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvvline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: chtype,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwaddstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: attr_t,
        arg6: ::std::os::raw::c_short,
        arg7: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwdelch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwgetstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwhline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> chtype;
}
extern "C" {
    pub fn mvwinchnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinchstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsch(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsnstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinsstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwinstr(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwprintw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwscanw(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mvwvline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: chtype,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn napms(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newpad(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut WINDOW;
}
extern "C" {
    pub fn newterm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut FILE,
    ) -> *mut SCREEN;
}
extern "C" {
    pub fn newwin(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn nl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nocbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nodelay(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noecho() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nonl() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noqiflush();
}
extern "C" {
    pub fn noraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn notimeout(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overlay(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn overwrite(arg1: *const WINDOW, arg2: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pair_content(
        arg1: ::std::os::raw::c_short,
        arg2: *mut ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PAIR_NUMBER(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pnoutrefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prefresh(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printw(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qiflush();
}
extern "C" {
    pub fn raw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn redrawwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_prog_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_shell_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ripoffline(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut WINDOW,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn savetty() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanw(arg1: *mut ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_dump(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_init(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scroll(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scrollok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_restore(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scr_set(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setscrreg(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
}
extern "C" {
    pub fn slk_attroff(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attron(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attrset(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_attr() -> attr_t;
}
extern "C" {
    pub fn slk_attr_set(
        arg1: attr_t,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_clear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_color(arg1: ::std::os::raw::c_short) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_label(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn slk_noutrefresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_refresh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_restore() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_set(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slk_touch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standout() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn standend() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn start_color() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn subpad(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn subwin(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut WINDOW;
}
extern "C" {
    pub fn syncok(arg1: *mut WINDOW, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn termattrs() -> chtype;
}
extern "C" {
    pub fn termname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timeout(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn touchline(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn touchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn typeahead(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn untouchwin(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_env(arg1: bool);
}
extern "C" {
    pub fn vidattr(arg1: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vidputs(
        arg1: chtype,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vline(arg1: chtype, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_printw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vw_scanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchnstr(
        arg1: *mut WINDOW,
        arg2: *const chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddchstr(arg1: *mut WINDOW, arg2: *const chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waddstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattron(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattroff(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattrset(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_get(
        arg1: *mut WINDOW,
        arg2: *mut attr_t,
        arg3: *mut ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_on(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_off(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wattr_set(
        arg1: *mut WINDOW,
        arg2: attr_t,
        arg3: ::std::os::raw::c_short,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
}
extern "C" {
    pub fn wborder(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: chtype,
        arg4: chtype,
        arg5: chtype,
        arg6: chtype,
        arg7: chtype,
        arg8: chtype,
        arg9: chtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wchgat(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: attr_t,
        arg4: ::std::os::raw::c_short,
        arg5: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclear(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtobot(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wclrtoeol(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcolor_set(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcursyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wdelch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wdeleteln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn werase(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetch(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wgetstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winch(arg1: *mut WINDOW) -> chtype;
}
extern "C" {
    pub fn winchnstr(
        arg1: *mut WINDOW,
        arg2: *mut chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winnstr(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsch(arg1: *mut WINDOW, arg2: chtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsdelln(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsertln(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsnstr(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winsstr(arg1: *mut WINDOW, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winstr(arg1: *mut WINDOW, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmove(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintw(
        arg1: *mut WINDOW,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wredrawln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrefresh(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanw(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscrl(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsetscrreg(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandout(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wstandend(arg1: *mut WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wsyncdown(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wsyncup(arg1: *mut WINDOW);
}
extern "C" {
    pub fn wtimeout(arg1: *mut WINDOW, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wtouchln(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wvline(
        arg1: *mut WINDOW,
        arg2: chtype,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetflag(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetnum(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tigetstr(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putp(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tparm(arg1: *mut ::std::os::raw::c_char, ...) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getattrs(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcurx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcury(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getbegy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmaxy(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getparx(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpary(arg1: *const WINDOW) -> ::std::os::raw::c_int;
}
pub type NCURSES_WINDOW_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut WINDOW,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type NCURSES_SCREEN_CB = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut SCREEN,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn is_term_resized(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn keybound(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn curses_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn assume_default_colors(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn define_key(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_defined(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keyok(arg1: ::std::os::raw::c_int, arg2: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resize_term(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resizeterm(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_escdelay(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_tabsize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_default_colors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_extended_names(arg1: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_legacy_coding(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_screen(
        arg1: *mut SCREEN,
        arg2: NCURSES_SCREEN_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_window(
        arg1: *mut WINDOW,
        arg2: NCURSES_WINDOW_CB,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wresize(
        arg1: *mut WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nofilter();
}
extern "C" {
    pub fn wgetparent(arg1: *const WINDOW) -> *mut WINDOW;
}
extern "C" {
    pub fn is_cleared(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idcok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_idlok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_immedok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_keypad(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_leaveok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_nodelay(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_notimeout(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_scrollok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn is_syncok(arg1: *const WINDOW) -> bool;
}
extern "C" {
    pub fn wgetscrreg(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut curscr: *mut WINDOW;
}
extern "C" {
    pub static mut newscr: *mut WINDOW;
}
extern "C" {
    pub static mut stdscr: *mut WINDOW;
}
extern "C" {
    pub static mut ttytype: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut COLORS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLOR_PAIRS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut COLS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ESCDELAY: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut LINES: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut TABSIZE: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEVENT {
    pub id: ::std::os::raw::c_short,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub bstate: mmask_t,
}
extern "C" {
    pub fn getmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetmouse(arg1: *mut MEVENT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
}
extern "C" {
    pub fn wenclose(
        arg1: *const WINDOW,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn mouseinterval(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmouse_trafo(
        arg1: *const WINDOW,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: bool,
    ) -> bool;
}
extern "C" {
    pub fn mouse_trafo(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: bool,
    ) -> bool;
}
extern "C" {
    pub fn mcprint(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_key(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ah {
    pub ah_nxt: u_int8_t,
    pub ah_len: u_int8_t,
    pub ah_reserve: u_int16_t,
    pub ah_spi: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newah {
    pub ah_nxt: u_int8_t,
    pub ah_len: u_int8_t,
    pub ah_reserve: u_int16_t,
    pub ah_spi: u_int32_t,
    pub ah_seq: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp {
    pub esp_spi: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newesp {
    pub esp_spi: u_int32_t,
    pub esp_seq: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esptail {
    pub esp_padlen: u_int8_t,
    pub esp_nxt: u_int8_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsecstat {
    pub in_success: u_quad_t,
    pub in_polvio: u_quad_t,
    pub in_nosa: u_quad_t,
    pub in_inval: u_quad_t,
    pub in_nomem: u_quad_t,
    pub in_badspi: u_quad_t,
    pub in_ahreplay: u_quad_t,
    pub in_espreplay: u_quad_t,
    pub in_ahauthsucc: u_quad_t,
    pub in_ahauthfail: u_quad_t,
    pub in_espauthsucc: u_quad_t,
    pub in_espauthfail: u_quad_t,
    pub in_esphist: [u_quad_t; 256usize],
    pub in_ahhist: [u_quad_t; 256usize],
    pub in_comphist: [u_quad_t; 256usize],
    pub out_success: u_quad_t,
    pub out_polvio: u_quad_t,
    pub out_nosa: u_quad_t,
    pub out_inval: u_quad_t,
    pub out_nomem: u_quad_t,
    pub out_noroute: u_quad_t,
    pub out_esphist: [u_quad_t; 256usize],
    pub out_ahhist: [u_quad_t; 256usize],
    pub out_comphist: [u_quad_t; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_info {
    pub wake_pkt: [u_int8_t; 100usize],
    pub wake_uuid: uuid_string_t,
    pub wake_pkt_spi: u_int32_t,
    pub wake_pkt_seq: u_int32_t,
    pub wake_pkt_len: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipsec_wake_pkt_event_data {
    pub wake_uuid: uuid_string_t,
}
extern "C" {
    pub fn ipsec_set_policy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> caddr_t;
}
extern "C" {
    pub fn ipsec_get_policylen(arg1: caddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ipsec_dump_policy(
        arg1: caddr_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ipsec_strerror() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipcomp {
    pub comp_nxt: u_int8_t,
    pub comp_flags: u_int8_t,
    pub comp_cpi: u_int16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rip6stat {
    pub rip6s_ipackets: u_quad_t,
    pub rip6s_isum: u_quad_t,
    pub rip6s_badsum: u_quad_t,
    pub rip6s_nosock: u_quad_t,
    pub rip6s_nosockmcast: u_quad_t,
    pub rip6s_fullsock: u_quad_t,
    pub rip6s_opackets: u_quad_t,
}
pub type comp_t = u_int16_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acct {
    pub ac_comm: [::std::os::raw::c_char; 10usize],
    pub ac_utime: comp_t,
    pub ac_stime: comp_t,
    pub ac_etime: comp_t,
    pub ac_btime: u_int32_t,
    pub ac_uid: uid_t,
    pub ac_gid: gid_t,
    pub ac_mem: u_int16_t,
    pub ac_io: comp_t,
    pub ac_tty: dev_t,
    pub ac_flag: u_int8_t,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
pub type daddr64_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf {
    _unused: [u8; 0],
}
pub type buf_t = *mut buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file {
    _unused: [u8; 0],
}
pub type file_t = *mut file;
pub type proc_t = *mut proc_;
pub type proc_ident_t = *mut proc_ident;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uio {
    _unused: [u8; 0],
}
pub type uio_t = *mut uio;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfs_context {
    _unused: [u8; 0],
}
pub type vfs_context_t = *mut vfs_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfstable {
    _unused: [u8; 0],
}
pub type vfstable_t = *mut vfstable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifnet {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mbuf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pkthdr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __socket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockopt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifaddr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifmultiaddr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ifnet_filter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __rtentry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __if_clone {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __bufattr {
    _unused: [u8; 0],
}
pub type ifnet_t = *mut __ifnet;
pub type mbuf_t = *mut __mbuf;
pub type pkthdr_t = *mut __pkthdr;
pub type socket_t = *mut __socket;
pub type sockopt_t = *mut __sockopt;
pub type ifaddr_t = *mut __ifaddr;
pub type ifmultiaddr_t = *mut __ifmultiaddr;
pub type interface_filter_t = *mut __ifnet_filter;
pub type route_t = *mut __rtentry;
pub type if_clone_t = *mut __if_clone;
pub type bufattr_t = *mut __bufattr;
pub type kauth_action_t = ::std::os::raw::c_int;
extern "C" {
    pub fn buf_markaged(bp: buf_t);
}
extern "C" {
    pub fn buf_markinvalid(bp: buf_t);
}
extern "C" {
    pub fn buf_markdelayed(bp: buf_t);
}
extern "C" {
    pub fn buf_markclean(arg1: buf_t);
}
extern "C" {
    pub fn buf_markeintr(bp: buf_t);
}
extern "C" {
    pub fn buf_markfua(bp: buf_t);
}
extern "C" {
    pub fn buf_fua(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_valid(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_fromcache(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_upl(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_uploffset(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_rcred(bp: buf_t) -> kauth_cred_t;
}
extern "C" {
    pub fn buf_wcred(bp: buf_t) -> kauth_cred_t;
}
extern "C" {
    pub fn buf_proc(bp: buf_t) -> proc_t;
}
extern "C" {
    pub fn buf_dirtyoff(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_dirtyend(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setdirtyoff(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_setdirtyend(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_error(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_seterror(bp: buf_t, arg1: errno_t);
}
extern "C" {
    pub fn buf_setflags(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_clearflags(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_flags(bp: buf_t) -> i32;
}
extern "C" {
    pub fn buf_reset(bp: buf_t, flags: i32);
}
extern "C" {
    pub fn buf_map(bp: buf_t, io_addr: *mut caddr_t) -> errno_t;
}
extern "C" {
    pub fn buf_map_range(bp: buf_t, io_addr: *mut caddr_t) -> errno_t;
}
extern "C" {
    pub fn buf_unmap(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_unmap_range(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_setdrvdata(bp: buf_t, drvdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn buf_drvdata(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_setfsprivate(bp: buf_t, fsprivate: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn buf_fsprivate(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_blkno(bp: buf_t) -> daddr64_t;
}
extern "C" {
    pub fn buf_lblkno(bp: buf_t) -> daddr64_t;
}
extern "C" {
    pub fn buf_lblksize(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setblkno(bp: buf_t, blkno: daddr64_t);
}
extern "C" {
    pub fn buf_setlblkno(bp: buf_t, lblkno: daddr64_t);
}
extern "C" {
    pub fn buf_setlblksize(bp: buf_t, lblksize: u32);
}
extern "C" {
    pub fn buf_count(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_size(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_resid(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_setcount(bp: buf_t, bcount: u32);
}
extern "C" {
    pub fn buf_setsize(bp: buf_t, arg1: u32);
}
extern "C" {
    pub fn buf_setresid(bp: buf_t, resid: u32);
}
extern "C" {
    pub fn buf_setdataptr(bp: buf_t, data: usize);
}
extern "C" {
    pub fn buf_dataptr(bp: buf_t) -> usize;
}
extern "C" {
    pub fn buf_vnode(bp: buf_t) -> vnode_t;
}
extern "C" {
    pub fn buf_setvnode(bp: buf_t, vp: vnode_t);
}
extern "C" {
    pub fn buf_device(bp: buf_t) -> dev_t;
}
extern "C" {
    pub fn buf_setdevice(bp: buf_t, vp: vnode_t) -> errno_t;
}
extern "C" {
    pub fn buf_strategy(devvp: vnode_t, ap: *mut ::std::os::raw::c_void) -> errno_t;
}
extern "C" {
    pub fn buf_invalblkno(vp: vnode_t, lblkno: daddr64_t, flags: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn buf_callback(bp: buf_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn buf_setcallback(
        bp: buf_t,
        callback: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        transaction: *mut ::std::os::raw::c_void,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_setupl(bp: buf_t, upl: upl_t, offset: u32) -> errno_t;
}
extern "C" {
    pub fn buf_clone(
        bp: buf_t,
        io_offset: ::std::os::raw::c_int,
        io_size: ::std::os::raw::c_int,
        iodone: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_create_shadow(
        bp: buf_t,
        force_copy: boolean_t,
        external_storage: usize,
        iodone: ::std::option::Option<
            unsafe extern "C" fn(arg1: buf_t, arg2: *mut ::std::os::raw::c_void),
        >,
        arg: *mut ::std::os::raw::c_void,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_shadow(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_alloc(vp: vnode_t) -> buf_t;
}
extern "C" {
    pub fn buf_free(bp: buf_t);
}
extern "C" {
    pub fn buf_invalidateblks(
        vp: vnode_t,
        flags: ::std::os::raw::c_int,
        slpflag: ::std::os::raw::c_int,
        slptimeo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_flushdirtyblks(
        vp: vnode_t,
        wait: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn buf_iterate(
        vp: vnode_t,
        callout: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: buf_t,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        flags: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn buf_clear(bp: buf_t);
}
extern "C" {
    pub fn buf_bawrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_bdwrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_bwrite(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_biodone(bp: buf_t);
}
extern "C" {
    pub fn buf_biowait(bp: buf_t) -> errno_t;
}
extern "C" {
    pub fn buf_brelse(bp: buf_t);
}
extern "C" {
    pub fn buf_bread(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_breadn(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        rablks: *mut daddr64_t,
        rasizes: *mut ::std::os::raw::c_int,
        nrablks: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_meta_bread(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn buf_meta_breadn(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        rablks: *mut daddr64_t,
        rasizes: *mut ::std::os::raw::c_int,
        nrablks: ::std::os::raw::c_int,
        cred: kauth_cred_t,
        bpp: *mut buf_t,
    ) -> errno_t;
}
extern "C" {
    pub fn minphys(bp: buf_t) -> u_int;
}
extern "C" {
    pub fn physio(
        f_strategy: ::std::option::Option<unsafe extern "C" fn(arg1: buf_t)>,
        bp: buf_t,
        dev: dev_t,
        flags: ::std::os::raw::c_int,
        f_minphys: ::std::option::Option<unsafe extern "C" fn(arg1: buf_t) -> u_int>,
        uio: *mut uio,
        blocksize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buf_getblk(
        vp: vnode_t,
        blkno: daddr64_t,
        size: ::std::os::raw::c_int,
        slpflag: ::std::os::raw::c_int,
        slptimeo: ::std::os::raw::c_int,
        operation: ::std::os::raw::c_int,
    ) -> buf_t;
}
extern "C" {
    pub fn buf_geteblk(size: ::std::os::raw::c_int) -> buf_t;
}
extern "C" {
    pub fn buf_clear_redundancy_flags(bp: buf_t, flags: u32);
}
extern "C" {
    pub fn buf_redundancy_flags(bp: buf_t) -> u32;
}
extern "C" {
    pub fn buf_set_redundancy_flags(bp: buf_t, flags: u32);
}
extern "C" {
    pub fn buf_attr(bp: buf_t) -> bufattr_t;
}
extern "C" {
    pub fn buf_markstatic(bp: buf_t);
}
extern "C" {
    pub fn buf_static(bp: buf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufattr_markioscheduled(bap: bufattr_t);
}
extern "C" {
    pub fn bufattr_ioscheduled(bap: bufattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufattr_markexpeditedmeta(bap: bufattr_t);
}
extern "C" {
    pub fn bufattr_expeditedmeta(bap: bufattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclonefileat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clonefile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_extent_t {
    pub offset: u64,
    pub length: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_firmware_path_t {
    pub path: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_format_capacity_t {
    pub blockCount: u64,
    pub blockSize: u32,
    pub reserved0096: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_format_capacities_t {
    pub capacities: *mut dk_format_capacity_t,
    pub capacitiesCount: u32,
    pub reserved0096: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_synchronize_t {
    pub offset: u64,
    pub length: u64,
    pub options: u32,
    pub reserved0160: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_unmap_t {
    pub extents: *mut dk_extent_t,
    pub extentsCount: u32,
    pub options: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_corestorage_info_t {
    pub flags: u64,
    pub hotfile_size: u64,
    pub hibernate_minsize: u64,
    pub swapfile_pinning: u64,
    pub padding: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_provision_extent_t {
    pub offset: u64,
    pub length: u64,
    pub provisionType: u8,
    pub reserved: [u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_provision_status_t {
    pub offset: u64,
    pub length: u64,
    pub options: u64,
    pub reserved: u32,
    pub extentsCount: u32,
    pub extents: *mut dk_provision_extent_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dk_error_description_t {
    pub options: u64,
    pub reserved: u64,
    pub description_size: u64,
    pub description: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eventreq {
    pub er_type: ::std::os::raw::c_int,
    pub er_handle: ::std::os::raw::c_int,
    pub er_data: *mut ::std::os::raw::c_void,
    pub er_rcnt: ::std::os::raw::c_int,
    pub er_wcnt: ::std::os::raw::c_int,
    pub er_ecnt: ::std::os::raw::c_int,
    pub er_eventbits: ::std::os::raw::c_int,
}
pub type er_t = *mut eventreq;
extern "C" {
    pub fn modwatch(arg1: er_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn watchevent(arg1: er_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn waitevent(arg1: er_t, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonhdr {
    pub lpc: u32,
    pub hpc: u32,
    pub ncnt: u32,
    pub version: i32,
    pub profrate: i32,
    pub spare: [i32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonhdr_64 {
    pub lpc: u64,
    pub hpc: u64,
    pub ncnt: u32,
    pub version: i32,
    pub profrate: i32,
    pub spare: [i32; 3usize],
}
pub type gmonhdr_t = gmonhdr_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tostruct {
    pub selfpc: u32,
    pub count: i32,
    pub link: u16,
    pub order: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tostruct_64 {
    pub selfpc: u64,
    pub count: i32,
    pub link: u16,
    pub order: u16,
}
pub type tostruct_t = tostruct_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc {
    pub raw_frompc: u32,
    pub raw_selfpc: u32,
    pub raw_count: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_64 {
    pub raw_frompc: u64,
    pub raw_selfpc: u64,
    pub raw_count: i32,
}
pub type rawarc_t = rawarc_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmonparam {
    pub state: ::std::os::raw::c_int,
    pub kcount: *mut u_short,
    pub kcountsize: u_long,
    pub froms: *mut u_short,
    pub fromssize: u_long,
    pub tos: *mut tostruct_t,
    pub tossize: u_long,
    pub tolimit: ::std::os::raw::c_long,
    pub lowpc: u_long,
    pub highpc: u_long,
    pub textsize: u_long,
    pub hashfraction: u_long,
}
extern "C" {
    pub static mut _gmonparam: gmonparam;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gmon_data {
    pub type_: u32,
    pub size: u32,
}
pub type gmon_data_t = gmon_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_order {
    pub raw_frompc: u32,
    pub raw_selfpc: u32,
    pub raw_count: u32,
    pub raw_order: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rawarc_order_64 {
    pub raw_frompc: u64,
    pub raw_selfpc: u64,
    pub raw_count: u32,
    pub raw_order: u32,
}
pub type rawarc_order_t = rawarc_order_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttychars {
    pub tc_erase: ::std::os::raw::c_char,
    pub tc_kill: ::std::os::raw::c_char,
    pub tc_intrc: ::std::os::raw::c_char,
    pub tc_quitc: ::std::os::raw::c_char,
    pub tc_startc: ::std::os::raw::c_char,
    pub tc_stopc: ::std::os::raw::c_char,
    pub tc_eofc: ::std::os::raw::c_char,
    pub tc_brkc: ::std::os::raw::c_char,
    pub tc_suspc: ::std::os::raw::c_char,
    pub tc_dsuspc: ::std::os::raw::c_char,
    pub tc_rprntc: ::std::os::raw::c_char,
    pub tc_flushc: ::std::os::raw::c_char,
    pub tc_werasc: ::std::os::raw::c_char,
    pub tc_lnextc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tchars {
    pub t_intrc: ::std::os::raw::c_char,
    pub t_quitc: ::std::os::raw::c_char,
    pub t_startc: ::std::os::raw::c_char,
    pub t_stopc: ::std::os::raw::c_char,
    pub t_eofc: ::std::os::raw::c_char,
    pub t_brkc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltchars {
    pub t_suspc: ::std::os::raw::c_char,
    pub t_dsuspc: ::std::os::raw::c_char,
    pub t_rprntc: ::std::os::raw::c_char,
    pub t_flushc: ::std::os::raw::c_char,
    pub t_werasc: ::std::os::raw::c_char,
    pub t_lnextc: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgttyb {
    pub sg_ispeed: ::std::os::raw::c_char,
    pub sg_ospeed: ::std::os::raw::c_char,
    pub sg_erase: ::std::os::raw::c_char,
    pub sg_kill: ::std::os::raw::c_char,
    pub sg_flags: ::std::os::raw::c_short,
}
extern "C" {
    pub fn kdebug_signpost(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_start(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kdebug_signpost_end(
        code: u32,
        arg1: usize,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_event_data {
    pub ctl_id: u_int32_t,
    pub ctl_unit: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_info {
    pub ctl_id: u_int32_t,
    pub ctl_name: [::std::os::raw::c_char; 96usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_ctl {
    pub sc_len: u_char,
    pub sc_family: u_char,
    pub ss_sysaddr: u_int16_t,
    pub sc_id: u_int32_t,
    pub sc_unit: u_int32_t,
    pub sc_reserved: [u_int32_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbstat {
    pub m_mbufs: u_int32_t,
    pub m_clusters: u_int32_t,
    pub m_spare: u_int32_t,
    pub m_clfree: u_int32_t,
    pub m_drops: u_int32_t,
    pub m_wait: u_int32_t,
    pub m_drain: u_int32_t,
    pub m_mtypes: [u_short; 256usize],
    pub m_mcfail: u_int32_t,
    pub m_mpfail: u_int32_t,
    pub m_msize: u_int32_t,
    pub m_mclbytes: u_int32_t,
    pub m_minclsize: u_int32_t,
    pub m_mlen: u_int32_t,
    pub m_mhlen: u_int32_t,
    pub m_bigclusters: u_int32_t,
    pub m_bigclfree: u_int32_t,
    pub m_bigmclbytes: u_int32_t,
    pub m_forcedefunct: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ombstat {
    pub m_mbufs: u_int32_t,
    pub m_clusters: u_int32_t,
    pub m_spare: u_int32_t,
    pub m_clfree: u_int32_t,
    pub m_drops: u_int32_t,
    pub m_wait: u_int32_t,
    pub m_drain: u_int32_t,
    pub m_mtypes: [u_short; 256usize],
    pub m_mcfail: u_int32_t,
    pub m_mpfail: u_int32_t,
    pub m_msize: u_int32_t,
    pub m_mclbytes: u_int32_t,
    pub m_minclsize: u_int32_t,
    pub m_mlen: u_int32_t,
    pub m_mhlen: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mb_class_stat {
    pub mbcl_cname: [::std::os::raw::c_char; 16usize],
    pub mbcl_size: u_int32_t,
    pub mbcl_total: u_int32_t,
    pub mbcl_active: u_int32_t,
    pub mbcl_infree: u_int32_t,
    pub mbcl_slab_cnt: u_int32_t,
    pub mbcl_pad: u_int32_t,
    pub mbcl_alloc_cnt: u_int64_t,
    pub mbcl_free_cnt: u_int64_t,
    pub mbcl_notified: u_int64_t,
    pub mbcl_purge_cnt: u_int64_t,
    pub mbcl_fail_cnt: u_int64_t,
    pub mbcl_ctotal: u_int32_t,
    pub mbcl_release_cnt: u_int32_t,
    pub mbcl_mc_state: u_int32_t,
    pub mbcl_mc_cached: u_int32_t,
    pub mbcl_mc_waiter_cnt: u_int32_t,
    pub mbcl_mc_wretry_cnt: u_int32_t,
    pub mbcl_mc_nwretry_cnt: u_int32_t,
    pub mbcl_peak_reported: u_int32_t,
    pub mbcl_reserved: [u_int32_t; 7usize],
}
pub type mb_class_stat_t = mb_class_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mb_stat {
    pub mbs_cnt: u_int32_t,
    pub mbs_pad: u_int32_t,
    pub mbs_class: [mb_class_stat_t; 1usize],
}
pub type mb_stat_t = mb_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgbuf {
    pub msg_magic: ::std::os::raw::c_int,
    pub msg_size: ::std::os::raw::c_int,
    pub msg_bufx: ::std::os::raw::c_int,
    pub msg_bufr: ::std::os::raw::c_int,
    pub msg_bufc: *mut ::std::os::raw::c_char,
}
pub type netaddr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct np_uid_t {
    pub np_uid_high: ::std::os::raw::c_long,
    pub np_uid_low: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct network_port_t {
    pub np_receiver: netaddr_t,
    pub np_owner: netaddr_t,
    pub np_puid: np_uid_t,
    pub np_sid: np_uid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipebuf {
    pub cnt: u_int,
    pub in_: u_int,
    pub out: u_int,
    pub size: u_int,
    pub buffer: caddr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_bsdinfo {
    pub pbi_flags: u32,
    pub pbi_status: u32,
    pub pbi_xstatus: u32,
    pub pbi_pid: u32,
    pub pbi_ppid: u32,
    pub pbi_uid: uid_t,
    pub pbi_gid: gid_t,
    pub pbi_ruid: uid_t,
    pub pbi_rgid: gid_t,
    pub pbi_svuid: uid_t,
    pub pbi_svgid: gid_t,
    pub rfu_1: u32,
    pub pbi_comm: [::std::os::raw::c_char; 16usize],
    pub pbi_name: [::std::os::raw::c_char; 32usize],
    pub pbi_nfiles: u32,
    pub pbi_pgid: u32,
    pub pbi_pjobc: u32,
    pub e_tdev: u32,
    pub e_tpgid: u32,
    pub pbi_nice: i32,
    pub pbi_start_tvsec: u64,
    pub pbi_start_tvusec: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_bsdshortinfo {
    pub pbsi_pid: u32,
    pub pbsi_ppid: u32,
    pub pbsi_pgid: u32,
    pub pbsi_status: u32,
    pub pbsi_comm: [::std::os::raw::c_char; 16usize],
    pub pbsi_flags: u32,
    pub pbsi_uid: uid_t,
    pub pbsi_gid: gid_t,
    pub pbsi_ruid: uid_t,
    pub pbsi_rgid: gid_t,
    pub pbsi_svuid: uid_t,
    pub pbsi_svgid: gid_t,
    pub pbsi_rfu: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_taskinfo {
    pub pti_virtual_size: u64,
    pub pti_resident_size: u64,
    pub pti_total_user: u64,
    pub pti_total_system: u64,
    pub pti_threads_user: u64,
    pub pti_threads_system: u64,
    pub pti_policy: i32,
    pub pti_faults: i32,
    pub pti_pageins: i32,
    pub pti_cow_faults: i32,
    pub pti_messages_sent: i32,
    pub pti_messages_received: i32,
    pub pti_syscalls_mach: i32,
    pub pti_syscalls_unix: i32,
    pub pti_csw: i32,
    pub pti_threadnum: i32,
    pub pti_numrunning: i32,
    pub pti_priority: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_taskallinfo {
    pub pbsd: proc_bsdinfo,
    pub ptinfo: proc_taskinfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_threadinfo {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regioninfo {
    pub pri_protection: u32,
    pub pri_max_protection: u32,
    pub pri_inheritance: u32,
    pub pri_flags: u32,
    pub pri_offset: u64,
    pub pri_behavior: u32,
    pub pri_user_wired_count: u32,
    pub pri_user_tag: u32,
    pub pri_pages_resident: u32,
    pub pri_pages_shared_now_private: u32,
    pub pri_pages_swapped_out: u32,
    pub pri_pages_dirtied: u32,
    pub pri_ref_count: u32,
    pub pri_shadow_depth: u32,
    pub pri_share_mode: u32,
    pub pri_private_pages_resident: u32,
    pub pri_shared_pages_resident: u32,
    pub pri_obj_id: u32,
    pub pri_depth: u32,
    pub pri_address: u64,
    pub pri_size: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_workqueueinfo {
    pub pwq_nthreads: u32,
    pub pwq_runthreads: u32,
    pub pwq_blockedthreads: u32,
    pub pwq_state: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fileinfo {
    pub fi_openflags: u32,
    pub fi_status: u32,
    pub fi_offset: off_t,
    pub fi_type: i32,
    pub fi_guardflags: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct proc_exitreasonbasicinfo {
    pub beri_namespace: u32,
    pub beri_code: u64,
    pub beri_flags: u64,
    pub beri_reason_buf_size: u32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct proc_exitreasoninfo {
    pub eri_namespace: u32,
    pub eri_code: u64,
    pub eri_flags: u64,
    pub eri_reason_buf_size: u32,
    pub eri_kcd_buf: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vinfo_stat {
    pub vst_dev: u32,
    pub vst_mode: u16,
    pub vst_nlink: u16,
    pub vst_ino: u64,
    pub vst_uid: uid_t,
    pub vst_gid: gid_t,
    pub vst_atime: i64,
    pub vst_atimensec: i64,
    pub vst_mtime: i64,
    pub vst_mtimensec: i64,
    pub vst_ctime: i64,
    pub vst_ctimensec: i64,
    pub vst_birthtime: i64,
    pub vst_birthtimensec: i64,
    pub vst_size: off_t,
    pub vst_blocks: i64,
    pub vst_blksize: i32,
    pub vst_flags: u32,
    pub vst_gen: u32,
    pub vst_rdev: u32,
    pub vst_qspare: [i64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_info {
    pub vi_stat: vinfo_stat,
    pub vi_type: ::std::os::raw::c_int,
    pub vi_pad: ::std::os::raw::c_int,
    pub vi_fsid: fsid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_info_path {
    pub vip_vi: vnode_info,
    pub vip_path: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_fdinfo {
    pub pfi: proc_fileinfo,
    pub pvi: vnode_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vnode_fdinfowithpath {
    pub pfi: proc_fileinfo,
    pub pvip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regionwithpathinfo {
    pub prp_prinfo: proc_regioninfo,
    pub prp_vip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_regionpath {
    pub prpo_addr: u64,
    pub prpo_regionlength: u64,
    pub prpo_path: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_vnodepathinfo {
    pub pvi_cdir: vnode_info_path,
    pub pvi_rdir: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_threadwithpathinfo {
    pub pt: proc_threadinfo,
    pub pvip: vnode_info_path,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in4in6_addr {
    pub i46a_pad32: [u_int32_t; 3usize],
    pub i46a_addr4: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_sockinfo {
    pub __bindgen_anon_1: in_sockinfo__bindgen_ty_1,
    pub __bindgen_anon_2: in_sockinfo__bindgen_ty_2,
    pub __bindgen_anon_3: in_sockinfo__bindgen_ty_3,
    pub __bindgen_anon_4: in_sockinfo__bindgen_ty_4,
    pub insi_fport: ::std::os::raw::c_int,
    pub insi_lport: ::std::os::raw::c_int,
    pub insi_gencnt: u64,
    pub insi_flags: u32,
    pub insi_flow: u32,
    pub insi_vflag: u8,
    pub insi_ip_ttl: u8,
    pub rfu_1: u32,
    pub insi_faddr: in_sockinfo__bindgen_ty_1,
    pub insi_laddr: in_sockinfo__bindgen_ty_2,
    pub insi_v4: in_sockinfo__bindgen_ty_3,
    pub insi_v6: in_sockinfo__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_sockinfo__bindgen_ty_1 {
    pub ina_46: in4in6_addr,
    pub ina_6: in6_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_sockinfo__bindgen_ty_2 {
    pub ina_46: in4in6_addr,
    pub ina_6: in6_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_sockinfo__bindgen_ty_3 {
    pub in4_tos: u_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_sockinfo__bindgen_ty_4 {
    pub in6_hlim: u8,
    pub in6_cksum: ::std::os::raw::c_int,
    pub in6_ifindex: u_short,
    pub in6_hops: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_sockinfo {
    pub tcpsi_ini: in_sockinfo,
    pub tcpsi_state: ::std::os::raw::c_int,
    pub tcpsi_timer: [::std::os::raw::c_int; 4usize],
    pub tcpsi_mss: ::std::os::raw::c_int,
    pub tcpsi_flags: u32,
    pub rfu_1: u32,
    pub tcpsi_tp: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct un_sockinfo {
    pub __bindgen_anon_1: un_sockinfo__bindgen_ty_1,
    pub __bindgen_anon_2: un_sockinfo__bindgen_ty_2,
    pub unsi_conn_so: u64,
    pub unsi_conn_pcb: u64,
    pub unsi_addr: un_sockinfo__bindgen_ty_1,
    pub unsi_caddr: un_sockinfo__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sockinfo__bindgen_ty_1 {
    pub ua_sun: sockaddr_un,
    pub ua_dummy: [::std::os::raw::c_char; 255usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union un_sockinfo__bindgen_ty_2 {
    pub ua_sun: sockaddr_un,
    pub ua_dummy: [::std::os::raw::c_char; 255usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndrv_info {
    pub ndrvsi_if_family: u32,
    pub ndrvsi_if_unit: u32,
    pub ndrvsi_if_name: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_event_info {
    pub kesi_vendor_code_filter: u32,
    pub kesi_class_filter: u32,
    pub kesi_subclass_filter: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kern_ctl_info {
    pub kcsi_id: u32,
    pub kcsi_reg_unit: u32,
    pub kcsi_flags: u32,
    pub kcsi_recvbufsize: u32,
    pub kcsi_sendbufsize: u32,
    pub kcsi_unit: u32,
    pub kcsi_name: [::std::os::raw::c_char; 96usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsock_sockinfo {
    pub local_cid: u32,
    pub local_port: u32,
    pub remote_cid: u32,
    pub remote_port: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockbuf_info {
    pub sbi_cc: u32,
    pub sbi_hiwat: u32,
    pub sbi_mbcnt: u32,
    pub sbi_mbmax: u32,
    pub sbi_lowat: u32,
    pub sbi_flags: ::std::os::raw::c_short,
    pub sbi_timeo: ::std::os::raw::c_short,
}
pub const SOCKINFO_GENERIC: _bindgen_ty_38 = 0;
pub const SOCKINFO_IN: _bindgen_ty_38 = 1;
pub const SOCKINFO_TCP: _bindgen_ty_38 = 2;
pub const SOCKINFO_UN: _bindgen_ty_38 = 3;
pub const SOCKINFO_NDRV: _bindgen_ty_38 = 4;
pub const SOCKINFO_KERN_EVENT: _bindgen_ty_38 = 5;
pub const SOCKINFO_KERN_CTL: _bindgen_ty_38 = 6;
pub const SOCKINFO_VSOCK: _bindgen_ty_38 = 7;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_info {
    pub __bindgen_anon_1: socket_info__bindgen_ty_1,
    pub soi_stat: vinfo_stat,
    pub soi_so: u64,
    pub soi_pcb: u64,
    pub soi_type: ::std::os::raw::c_int,
    pub soi_protocol: ::std::os::raw::c_int,
    pub soi_family: ::std::os::raw::c_int,
    pub soi_options: ::std::os::raw::c_short,
    pub soi_linger: ::std::os::raw::c_short,
    pub soi_state: ::std::os::raw::c_short,
    pub soi_qlen: ::std::os::raw::c_short,
    pub soi_incqlen: ::std::os::raw::c_short,
    pub soi_qlimit: ::std::os::raw::c_short,
    pub soi_timeo: ::std::os::raw::c_short,
    pub soi_error: u_short,
    pub soi_oobmark: u32,
    pub soi_rcv: sockbuf_info,
    pub soi_snd: sockbuf_info,
    pub soi_kind: ::std::os::raw::c_int,
    pub rfu_1: u32,
    pub soi_proto: socket_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union socket_info__bindgen_ty_1 {
    pub pri_in: in_sockinfo,
    pub pri_tcp: tcp_sockinfo,
    pub pri_un: un_sockinfo,
    pub pri_ndrv: ndrv_info,
    pub pri_kern_event: kern_event_info,
    pub pri_kern_ctl: kern_ctl_info,
    pub pri_vsock: vsock_sockinfo,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct socket_fdinfo {
    pub pfi: proc_fileinfo,
    pub psi: socket_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psem_info {
    pub psem_stat: vinfo_stat,
    pub psem_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psem_fdinfo {
    pub pfi: proc_fileinfo,
    pub pseminfo: psem_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshm_info {
    pub pshm_stat: vinfo_stat,
    pub pshm_mappaddr: u64,
    pub pshm_name: [::std::os::raw::c_char; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pshm_fdinfo {
    pub pfi: proc_fileinfo,
    pub pshminfo: pshm_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_info {
    pub pipe_stat: vinfo_stat,
    pub pipe_handle: u64,
    pub pipe_peerhandle: u64,
    pub pipe_status: ::std::os::raw::c_int,
    pub rfu_1: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_fdinfo {
    pub pfi: proc_fileinfo,
    pub pipeinfo: pipe_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_info {
    pub kq_stat: vinfo_stat,
    pub kq_state: u32,
    pub rfu_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_dyninfo {
    pub kqdi_info: kqueue_info,
    pub kqdi_servicer: u64,
    pub kqdi_owner: u64,
    pub kqdi_sync_waiters: u32,
    pub kqdi_sync_waiter_qos: u8,
    pub kqdi_async_qos: u8,
    pub kqdi_request_state: u16,
    pub kqdi_events_qos: u8,
    pub kqdi_pri: u8,
    pub kqdi_pol: u8,
    pub kqdi_cpupercent: u8,
    pub _kqdi_reserved0: [u8; 4usize],
    pub _kqdi_reserved1: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kqueue_fdinfo {
    pub pfi: proc_fileinfo,
    pub kqueueinfo: kqueue_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct appletalk_info {
    pub atalk_stat: vinfo_stat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct appletalk_fdinfo {
    pub pfi: proc_fileinfo,
    pub appletalkinfo: appletalk_info,
}
pub type proc_info_udata_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fdinfo {
    pub proc_fd: i32,
    pub proc_fdtype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_fileportinfo {
    pub proc_fileport: u32,
    pub proc_fdtype: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_channel_info {
    pub chi_instance: uuid_t,
    pub chi_port: u32,
    pub chi_type: u32,
    pub chi_flags: u32,
    pub rfu_1: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct channel_fdinfo {
    pub pfi: proc_fileinfo,
    pub channelinfo: proc_channel_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqfilehdr {
    pub dqh_magic: u_int32_t,
    pub dqh_version: u_int32_t,
    pub dqh_maxentries: u_int32_t,
    pub dqh_entrycnt: u_int32_t,
    pub dqh_flags: u_int32_t,
    pub dqh_chktime: u_int32_t,
    pub dqh_btime: u_int32_t,
    pub dqh_itime: u_int32_t,
    pub dqh_string: [::std::os::raw::c_char; 16usize],
    pub dqh_spare: [u_int32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dqblk {
    pub dqb_bhardlimit: u_int64_t,
    pub dqb_bsoftlimit: u_int64_t,
    pub dqb_curbytes: u_int64_t,
    pub dqb_ihardlimit: u_int32_t,
    pub dqb_isoftlimit: u_int32_t,
    pub dqb_curinodes: u_int32_t,
    pub dqb_btime: u_int32_t,
    pub dqb_itime: u_int32_t,
    pub dqb_id: u_int32_t,
    pub dqb_spare: [u_int32_t; 4usize],
}
extern "C" {
    pub fn quotactl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: caddr_t,
    ) -> ::std::os::raw::c_int;
}
pub type rbto_compare_nodes_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type rbto_compare_key_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree_ops_t {
    pub rbto_compare_nodes: rbto_compare_nodes_fn,
    pub rbto_compare_key: rbto_compare_key_fn,
    pub rbto_node_offset: usize,
    pub rbto_context: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub opaque: [*mut ::std::os::raw::c_void; 3usize],
}
pub type rb_node_t = rb_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_tree {
    pub opaque: [*mut ::std::os::raw::c_void; 8usize],
}
pub type rb_tree_t = rb_tree;
extern "C" {
    pub fn rb_tree_init(arg1: *mut rb_tree_t, arg2: *const rb_tree_ops_t);
}
extern "C" {
    pub fn rb_tree_insert_node(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_geq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_find_node_leq(
        arg1: *mut rb_tree_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_remove_node(arg1: *mut rb_tree_t, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rb_tree_iterate(
        arg1: *mut rb_tree_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rb_tree_count(arg1: *mut rb_tree_t) -> usize;
}
extern "C" {
    pub fn usrctl(flags: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot_np(
        howto: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pstats {
    pub p_ru: rusage,
    pub p_cru: rusage,
    pub p_prof: pstats_uprof,
    pub ps_start: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pstats_uprof {
    pub pr_next: *mut pstats_uprof,
    pub pr_base: caddr_t,
    pub pr_size: u_int32_t,
    pub pr_off: u_int32_t,
    pub pr_scale: u_int32_t,
    pub pr_addr: u_int32_t,
    pub pr_ticks: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sbuf {
    pub s_buf: *mut ::std::os::raw::c_char,
    pub s_unused: *mut ::std::os::raw::c_void,
    pub s_size: ::std::os::raw::c_int,
    pub s_len: ::std::os::raw::c_int,
    pub s_flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeb {
    pub time: time_t,
    pub millitm: ::std::os::raw::c_ushort,
    pub timezone: ::std::os::raw::c_short,
    pub dstflag: ::std::os::raw::c_short,
}
extern "C" {
    pub fn ftime(arg1: *mut timeb) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct speedtab {
    pub sp_speed: ::std::os::raw::c_int,
    pub sp_code: ::std::os::raw::c_int,
}
pub type unp_gen_t = u_quad_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _unpcb_list_entry {
    pub le_next: u_int32_t,
    pub le_prev: u_int32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xunpgen {
    pub xug_len: u_int32_t,
    pub xug_count: u_int,
    pub xug_gen: unp_gen_t,
    pub xug_sogen: so_gen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waitq_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user {}
pub const vtype_VNON: vtype = 0;
pub const vtype_VREG: vtype = 1;
pub const vtype_VDIR: vtype = 2;
pub const vtype_VBLK: vtype = 3;
pub const vtype_VCHR: vtype = 4;
pub const vtype_VLNK: vtype = 5;
pub const vtype_VSOCK: vtype = 6;
pub const vtype_VFIFO: vtype = 7;
pub const vtype_VBAD: vtype = 8;
pub const vtype_VSTR: vtype = 9;
pub const vtype_VCPLX: vtype = 10;
pub type vtype = ::std::os::raw::c_uint;
pub const vtagtype_VT_NON: vtagtype = 0;
pub const vtagtype_VT_UFS: vtagtype = 1;
pub const vtagtype_VT_NFS: vtagtype = 2;
pub const vtagtype_VT_MFS: vtagtype = 3;
pub const vtagtype_VT_MSDOSFS: vtagtype = 4;
pub const vtagtype_VT_LFS: vtagtype = 5;
pub const vtagtype_VT_LOFS: vtagtype = 6;
pub const vtagtype_VT_FDESC: vtagtype = 7;
pub const vtagtype_VT_PORTAL: vtagtype = 8;
pub const vtagtype_VT_NULL: vtagtype = 9;
pub const vtagtype_VT_UMAP: vtagtype = 10;
pub const vtagtype_VT_KERNFS: vtagtype = 11;
pub const vtagtype_VT_PROCFS: vtagtype = 12;
pub const vtagtype_VT_AFS: vtagtype = 13;
pub const vtagtype_VT_ISOFS: vtagtype = 14;
pub const vtagtype_VT_MOCKFS: vtagtype = 15;
pub const vtagtype_VT_HFS: vtagtype = 16;
pub const vtagtype_VT_ZFS: vtagtype = 17;
pub const vtagtype_VT_DEVFS: vtagtype = 18;
pub const vtagtype_VT_WEBDAV: vtagtype = 19;
pub const vtagtype_VT_UDF: vtagtype = 20;
pub const vtagtype_VT_AFP: vtagtype = 21;
pub const vtagtype_VT_CDDA: vtagtype = 22;
pub const vtagtype_VT_CIFS: vtagtype = 23;
pub const vtagtype_VT_OTHER: vtagtype = 24;
pub const vtagtype_VT_APFS: vtagtype = 25;
pub const vtagtype_VT_LOCKERFS: vtagtype = 26;
pub const vtagtype_VT_BINDFS: vtagtype = 27;
pub type vtagtype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_compression_stats {
    pub uncompressed_size: u64,
    pub compressed_size: u64,
    pub buffer_size_compression_dist: [[u32; 7usize]; 10usize],
    pub block_compressed_size_dist: [u32; 16usize],
}
pub type io_compression_stats_t = *mut io_compression_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iocs_store_buffer_entry {
    pub path_name: [::std::os::raw::c_char; 128usize],
    pub iocs: io_compression_stats,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct qelem {
    pub q_forw: *mut qelem,
    pub q_back: *mut qelem,
    pub q_data: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn map_fd(
        fd: ::std::os::raw::c_int,
        offset: vm_offset_t,
        addr: *mut vm_offset_t,
        find_space: boolean_t,
        numbytes: vm_size_t,
    ) -> kern_return_t;
}
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_sel_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_objc_class_ro_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_uint;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header {
    pub magic: u32,
    pub cputype: i32,
    pub cpusubtype: i32,
    pub filetype: u32,
    pub ncmds: u32,
    pub sizeofcmds: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_header_64 {
    pub magic: u32,
    pub cputype: i32,
    pub cpusubtype: i32,
    pub filetype: u32,
    pub ncmds: u32,
    pub sizeofcmds: u32,
    pub flags: u32,
    pub reserved: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct load_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lc_str {
    pub offset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segment_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: u32,
    pub vmsize: u32,
    pub fileoff: u32,
    pub filesize: u32,
    pub maxprot: i32,
    pub initprot: i32,
    pub nsects: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct segment_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub segname: [::std::os::raw::c_char; 16usize],
    pub vmaddr: u64,
    pub vmsize: u64,
    pub fileoff: u64,
    pub filesize: u64,
    pub maxprot: i32,
    pub initprot: i32,
    pub nsects: u32,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct section {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: u32,
    pub size: u32,
    pub offset: u32,
    pub align: u32,
    pub reloff: u32,
    pub nreloc: u32,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct section_64 {
    pub sectname: [::std::os::raw::c_char; 16usize],
    pub segname: [::std::os::raw::c_char; 16usize],
    pub addr: u64,
    pub size: u64,
    pub offset: u32,
    pub align: u32,
    pub reloff: u32,
    pub nreloc: u32,
    pub flags: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmlib {
    pub name: lc_str,
    pub minor_version: u32,
    pub header_addr: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmlib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub fvmlib: fvmlib,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylib {
    pub name: lc_str,
    pub timestamp: u32,
    pub current_version: u32,
    pub compatibility_version: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub dylib: dylib,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_framework_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub umbrella: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_client_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub client: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_umbrella_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub sub_umbrella: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sub_library_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub sub_library: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prebound_dylib_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
    pub nmodules: u32,
    pub linked_modules: lc_str,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dylinker_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routines_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub init_address: u32,
    pub init_module: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
    pub reserved4: u32,
    pub reserved5: u32,
    pub reserved6: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routines_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub init_address: u64,
    pub init_module: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
    pub reserved6: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symtab_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub symoff: u32,
    pub nsyms: u32,
    pub stroff: u32,
    pub strsize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dysymtab_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub iundefsym: u32,
    pub nundefsym: u32,
    pub tocoff: u32,
    pub ntoc: u32,
    pub modtaboff: u32,
    pub nmodtab: u32,
    pub extrefsymoff: u32,
    pub nextrefsyms: u32,
    pub indirectsymoff: u32,
    pub nindirectsyms: u32,
    pub extreloff: u32,
    pub nextrel: u32,
    pub locreloff: u32,
    pub nlocrel: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_table_of_contents {
    pub symbol_index: u32,
    pub module_index: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_module {
    pub module_name: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub irefsym: u32,
    pub nrefsym: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextrel: u32,
    pub nextrel: u32,
    pub iinit_iterm: u32,
    pub ninit_nterm: u32,
    pub objc_module_info_addr: u32,
    pub objc_module_info_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dylib_module_64 {
    pub module_name: u32,
    pub iextdefsym: u32,
    pub nextdefsym: u32,
    pub irefsym: u32,
    pub nrefsym: u32,
    pub ilocalsym: u32,
    pub nlocalsym: u32,
    pub iextrel: u32,
    pub nextrel: u32,
    pub iinit_iterm: u32,
    pub ninit_nterm: u32,
    pub objc_module_info_size: u32,
    pub objc_module_info_addr: u64,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct dylib_reference {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl dylib_reference {
    #[inline]
    pub fn isym(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_isym(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isym: u32, flags: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let isym: u32 = unsafe { ::std::mem::transmute(isym) };
            isym as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twolevel_hints_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub offset: u32,
    pub nhints: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct twolevel_hint {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl twolevel_hint {
    #[inline]
    pub fn isub_image(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_isub_image(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn itoc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_itoc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(isub_image: u32, itoc: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let isub_image: u32 = unsafe { ::std::mem::transmute(isub_image) };
            isub_image as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let itoc: u32 = unsafe { ::std::mem::transmute(itoc) };
            itoc as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prebind_cksum_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cksum: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uuid_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub uuid: [u8; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rpath_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub path: lc_str,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linkedit_data_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub dataoff: u32,
    pub datasize: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encryption_info_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cryptoff: u32,
    pub cryptsize: u32,
    pub cryptid: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct encryption_info_command_64 {
    pub cmd: u32,
    pub cmdsize: u32,
    pub cryptoff: u32,
    pub cryptsize: u32,
    pub cryptid: u32,
    pub pad: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct version_min_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub version: u32,
    pub sdk: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct build_version_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub platform: u32,
    pub minos: u32,
    pub sdk: u32,
    pub ntools: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct build_tool_version {
    pub tool: u32,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_info_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub rebase_off: u32,
    pub rebase_size: u32,
    pub bind_off: u32,
    pub bind_size: u32,
    pub weak_bind_off: u32,
    pub weak_bind_size: u32,
    pub lazy_bind_off: u32,
    pub lazy_bind_size: u32,
    pub export_off: u32,
    pub export_size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linker_option_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symseg_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub offset: u32,
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ident_command {
    pub cmd: u32,
    pub cmdsize: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fvmfile_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub name: lc_str,
    pub header_addr: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entry_point_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub entryoff: u64,
    pub stacksize: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct source_version_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub version: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct data_in_code_entry {
    pub offset: u32,
    pub length: u16,
    pub kind: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tlv_descriptor {
    pub thunk: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut tlv_descriptor) -> *mut ::std::os::raw::c_void,
    >,
    pub key: ::std::os::raw::c_ulong,
    pub offset: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct note_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub data_owner: [::std::os::raw::c_char; 16usize],
    pub offset: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fileset_entry_command {
    pub cmd: u32,
    pub cmdsize: u32,
    pub vmaddr: u64,
    pub fileoff: u64,
    pub entry_id: lc_str,
    pub reserved: u32,
}
extern "C" {
    pub fn _dyld_image_count() -> u32;
}
extern "C" {
    pub fn _dyld_get_image_header(image_index: u32) -> *const mach_header;
}
extern "C" {
    pub fn _dyld_get_image_vmaddr_slide(image_index: u32) -> isize;
}
extern "C" {
    pub fn _dyld_get_image_name(image_index: u32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dyld_register_func_for_add_image(
        func: ::std::option::Option<
            unsafe extern "C" fn(mh: *const mach_header, vmaddr_slide: isize),
        >,
    );
}
extern "C" {
    pub fn _dyld_register_func_for_remove_image(
        func: ::std::option::Option<
            unsafe extern "C" fn(mh: *const mach_header, vmaddr_slide: isize),
        >,
    );
}
extern "C" {
    pub fn NSVersionOfRunTimeLibrary(libraryName: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn NSVersionOfLinkTimeLibrary(libraryName: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn _NSGetExecutablePath(
        buf: *mut ::std::os::raw::c_char,
        bufsize: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tlv_atexit(
        termFunc: ::std::option::Option<unsafe extern "C" fn(objAddr: *mut ::std::os::raw::c_void)>,
        objAddr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _tlv_bootstrap();
}
extern "C" {
    pub fn _dyld_shared_cache_contains_path(path: *const ::std::os::raw::c_char) -> bool;
}
pub const DYLD_BOOL_FALSE: DYLD_BOOL = 0;
pub const DYLD_BOOL_TRUE: DYLD_BOOL = 1;
pub type DYLD_BOOL = ::std::os::raw::c_uint;
pub const NSObjectFileImageReturnCode_NSObjectFileImageFailure: NSObjectFileImageReturnCode = 0;
pub const NSObjectFileImageReturnCode_NSObjectFileImageSuccess: NSObjectFileImageReturnCode = 1;
pub const NSObjectFileImageReturnCode_NSObjectFileImageInappropriateFile:
    NSObjectFileImageReturnCode = 2;
pub const NSObjectFileImageReturnCode_NSObjectFileImageArch: NSObjectFileImageReturnCode = 3;
pub const NSObjectFileImageReturnCode_NSObjectFileImageFormat: NSObjectFileImageReturnCode = 4;
pub const NSObjectFileImageReturnCode_NSObjectFileImageAccess: NSObjectFileImageReturnCode = 5;
pub type NSObjectFileImageReturnCode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NSObjectFileImage {
    _unused: [u8; 0],
}
pub type NSObjectFileImage = *mut __NSObjectFileImage;
extern "C" {
    pub fn NSCreateObjectFileImageFromFile(
        pathName: *const ::std::os::raw::c_char,
        objectFileImage: *mut NSObjectFileImage,
    ) -> NSObjectFileImageReturnCode;
}
extern "C" {
    pub fn NSCreateObjectFileImageFromMemory(
        address: *const ::std::os::raw::c_void,
        size: usize,
        objectFileImage: *mut NSObjectFileImage,
    ) -> NSObjectFileImageReturnCode;
}
extern "C" {
    pub fn NSDestroyObjectFileImage(objectFileImage: NSObjectFileImage) -> bool;
}
extern "C" {
    pub fn NSSymbolDefinitionCountInObjectFileImage(objectFileImage: NSObjectFileImage) -> u32;
}
extern "C" {
    pub fn NSSymbolDefinitionNameInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        ordinal: u32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSSymbolReferenceCountInObjectFileImage(objectFileImage: NSObjectFileImage) -> u32;
}
extern "C" {
    pub fn NSSymbolReferenceNameInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        ordinal: u32,
        tentative_definition: *mut bool,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSIsSymbolDefinedInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        symbolName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NSGetSectionDataInObjectFileImage(
        objectFileImage: NSObjectFileImage,
        segmentName: *const ::std::os::raw::c_char,
        sectionName: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NSModule {
    _unused: [u8; 0],
}
pub type NSModule = *mut __NSModule;
extern "C" {
    pub fn NSNameOfModule(m: NSModule) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSLibraryNameForModule(m: NSModule) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSLinkModule(
        objectFileImage: NSObjectFileImage,
        moduleName: *const ::std::os::raw::c_char,
        options: u32,
    ) -> NSModule;
}
extern "C" {
    pub fn NSUnLinkModule(module: NSModule, options: u32) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __NSSymbol {
    _unused: [u8; 0],
}
pub type NSSymbol = *mut __NSSymbol;
extern "C" {
    pub fn NSIsSymbolNameDefined(symbolName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn NSIsSymbolNameDefinedWithHint(
        symbolName: *const ::std::os::raw::c_char,
        libraryNameHint: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NSIsSymbolNameDefinedInImage(
        image: *const mach_header,
        symbolName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn NSLookupAndBindSymbol(symbolName: *const ::std::os::raw::c_char) -> NSSymbol;
}
extern "C" {
    pub fn NSLookupAndBindSymbolWithHint(
        symbolName: *const ::std::os::raw::c_char,
        libraryNameHint: *const ::std::os::raw::c_char,
    ) -> NSSymbol;
}
extern "C" {
    pub fn NSLookupSymbolInModule(
        module: NSModule,
        symbolName: *const ::std::os::raw::c_char,
    ) -> NSSymbol;
}
extern "C" {
    pub fn NSLookupSymbolInImage(
        image: *const mach_header,
        symbolName: *const ::std::os::raw::c_char,
        options: u32,
    ) -> NSSymbol;
}
extern "C" {
    pub fn NSNameOfSymbol(symbol: NSSymbol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn NSAddressOfSymbol(symbol: NSSymbol) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NSModuleForSymbol(symbol: NSSymbol) -> NSModule;
}
pub const NSLinkEditErrors_NSLinkEditFileAccessError: NSLinkEditErrors = 0;
pub const NSLinkEditErrors_NSLinkEditFileFormatError: NSLinkEditErrors = 1;
pub const NSLinkEditErrors_NSLinkEditMachResourceError: NSLinkEditErrors = 2;
pub const NSLinkEditErrors_NSLinkEditUnixResourceError: NSLinkEditErrors = 3;
pub const NSLinkEditErrors_NSLinkEditOtherError: NSLinkEditErrors = 4;
pub const NSLinkEditErrors_NSLinkEditWarningError: NSLinkEditErrors = 5;
pub const NSLinkEditErrors_NSLinkEditMultiplyDefinedError: NSLinkEditErrors = 6;
pub const NSLinkEditErrors_NSLinkEditUndefinedError: NSLinkEditErrors = 7;
pub type NSLinkEditErrors = ::std::os::raw::c_uint;
pub const NSOtherErrorNumbers_NSOtherErrorRelocation: NSOtherErrorNumbers = 0;
pub const NSOtherErrorNumbers_NSOtherErrorLazyBind: NSOtherErrorNumbers = 1;
pub const NSOtherErrorNumbers_NSOtherErrorIndrLoop: NSOtherErrorNumbers = 2;
pub const NSOtherErrorNumbers_NSOtherErrorLazyInit: NSOtherErrorNumbers = 3;
pub const NSOtherErrorNumbers_NSOtherErrorInvalidArgs: NSOtherErrorNumbers = 4;
pub type NSOtherErrorNumbers = ::std::os::raw::c_uint;
extern "C" {
    pub fn NSLinkEditError(
        c: *mut NSLinkEditErrors,
        errorNumber: *mut ::std::os::raw::c_int,
        fileName: *mut *const ::std::os::raw::c_char,
        errorString: *mut *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSLinkEditErrorHandlers {
    pub undefined:
        ::std::option::Option<unsafe extern "C" fn(symbolName: *const ::std::os::raw::c_char)>,
    pub multiple: ::std::option::Option<
        unsafe extern "C" fn(s: NSSymbol, oldModule: NSModule, newModule: NSModule) -> NSModule,
    >,
    pub linkEdit: ::std::option::Option<
        unsafe extern "C" fn(
            errorClass: NSLinkEditErrors,
            errorNumber: ::std::os::raw::c_int,
            fileName: *const ::std::os::raw::c_char,
            errorString: *const ::std::os::raw::c_char,
        ),
    >,
}
extern "C" {
    pub fn NSInstallLinkEditErrorHandlers(handlers: *const NSLinkEditErrorHandlers);
}
extern "C" {
    pub fn NSAddLibrary(pathName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn NSAddLibraryWithSearching(pathName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn NSAddImage(
        image_name: *const ::std::os::raw::c_char,
        options: u32,
    ) -> *const mach_header;
}
extern "C" {
    pub fn _dyld_present() -> bool;
}
extern "C" {
    pub fn _dyld_launched_prebound() -> bool;
}
extern "C" {
    pub fn _dyld_all_twolevel_modules_prebound() -> bool;
}
extern "C" {
    pub fn _dyld_bind_fully_image_containing_address(
        address: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn _dyld_image_containing_address(address: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    pub fn _dyld_lookup_and_bind(
        symbol_name: *const ::std::os::raw::c_char,
        address: *mut *mut ::std::os::raw::c_void,
        module: *mut NSModule,
    );
}
extern "C" {
    pub fn _dyld_lookup_and_bind_with_hint(
        symbol_name: *const ::std::os::raw::c_char,
        library_name_hint: *const ::std::os::raw::c_char,
        address: *mut *mut ::std::os::raw::c_void,
        module: *mut NSModule,
    );
}
extern "C" {
    pub fn _dyld_lookup_and_bind_fully(
        symbol_name: *const ::std::os::raw::c_char,
        address: *mut *mut ::std::os::raw::c_void,
        module: *mut NSModule,
    );
}
extern "C" {
    pub fn _dyld_get_image_header_containing_address(
        address: *const ::std::os::raw::c_void,
    ) -> *const mach_header;
}
pub type compact_unwind_encoding_t = u32;
pub const UNWIND_IS_NOT_FUNCTION_START: _bindgen_ty_39 = 2147483648;
pub const UNWIND_HAS_LSDA: _bindgen_ty_39 = 1073741824;
pub const UNWIND_PERSONALITY_MASK: _bindgen_ty_39 = 805306368;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const UNWIND_X86_MODE_MASK: _bindgen_ty_40 = 251658240;
pub const UNWIND_X86_MODE_EBP_FRAME: _bindgen_ty_40 = 16777216;
pub const UNWIND_X86_MODE_STACK_IMMD: _bindgen_ty_40 = 33554432;
pub const UNWIND_X86_MODE_STACK_IND: _bindgen_ty_40 = 50331648;
pub const UNWIND_X86_MODE_DWARF: _bindgen_ty_40 = 67108864;
pub const UNWIND_X86_EBP_FRAME_REGISTERS: _bindgen_ty_40 = 32767;
pub const UNWIND_X86_EBP_FRAME_OFFSET: _bindgen_ty_40 = 16711680;
pub const UNWIND_X86_FRAMELESS_STACK_SIZE: _bindgen_ty_40 = 16711680;
pub const UNWIND_X86_FRAMELESS_STACK_ADJUST: _bindgen_ty_40 = 57344;
pub const UNWIND_X86_FRAMELESS_STACK_REG_COUNT: _bindgen_ty_40 = 7168;
pub const UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION: _bindgen_ty_40 = 1023;
pub const UNWIND_X86_DWARF_SECTION_OFFSET: _bindgen_ty_40 = 16777215;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const UNWIND_X86_REG_NONE: _bindgen_ty_41 = 0;
pub const UNWIND_X86_REG_EBX: _bindgen_ty_41 = 1;
pub const UNWIND_X86_REG_ECX: _bindgen_ty_41 = 2;
pub const UNWIND_X86_REG_EDX: _bindgen_ty_41 = 3;
pub const UNWIND_X86_REG_EDI: _bindgen_ty_41 = 4;
pub const UNWIND_X86_REG_ESI: _bindgen_ty_41 = 5;
pub const UNWIND_X86_REG_EBP: _bindgen_ty_41 = 6;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const UNWIND_X86_64_MODE_MASK: _bindgen_ty_42 = 251658240;
pub const UNWIND_X86_64_MODE_RBP_FRAME: _bindgen_ty_42 = 16777216;
pub const UNWIND_X86_64_MODE_STACK_IMMD: _bindgen_ty_42 = 33554432;
pub const UNWIND_X86_64_MODE_STACK_IND: _bindgen_ty_42 = 50331648;
pub const UNWIND_X86_64_MODE_DWARF: _bindgen_ty_42 = 67108864;
pub const UNWIND_X86_64_RBP_FRAME_REGISTERS: _bindgen_ty_42 = 32767;
pub const UNWIND_X86_64_RBP_FRAME_OFFSET: _bindgen_ty_42 = 16711680;
pub const UNWIND_X86_64_FRAMELESS_STACK_SIZE: _bindgen_ty_42 = 16711680;
pub const UNWIND_X86_64_FRAMELESS_STACK_ADJUST: _bindgen_ty_42 = 57344;
pub const UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT: _bindgen_ty_42 = 7168;
pub const UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION: _bindgen_ty_42 = 1023;
pub const UNWIND_X86_64_DWARF_SECTION_OFFSET: _bindgen_ty_42 = 16777215;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const UNWIND_X86_64_REG_NONE: _bindgen_ty_43 = 0;
pub const UNWIND_X86_64_REG_RBX: _bindgen_ty_43 = 1;
pub const UNWIND_X86_64_REG_R12: _bindgen_ty_43 = 2;
pub const UNWIND_X86_64_REG_R13: _bindgen_ty_43 = 3;
pub const UNWIND_X86_64_REG_R14: _bindgen_ty_43 = 4;
pub const UNWIND_X86_64_REG_R15: _bindgen_ty_43 = 5;
pub const UNWIND_X86_64_REG_RBP: _bindgen_ty_43 = 6;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const UNWIND_ARM64_MODE_MASK: _bindgen_ty_44 = 251658240;
pub const UNWIND_ARM64_MODE_FRAMELESS: _bindgen_ty_44 = 33554432;
pub const UNWIND_ARM64_MODE_DWARF: _bindgen_ty_44 = 50331648;
pub const UNWIND_ARM64_MODE_FRAME: _bindgen_ty_44 = 67108864;
pub const UNWIND_ARM64_FRAME_X19_X20_PAIR: _bindgen_ty_44 = 1;
pub const UNWIND_ARM64_FRAME_X21_X22_PAIR: _bindgen_ty_44 = 2;
pub const UNWIND_ARM64_FRAME_X23_X24_PAIR: _bindgen_ty_44 = 4;
pub const UNWIND_ARM64_FRAME_X25_X26_PAIR: _bindgen_ty_44 = 8;
pub const UNWIND_ARM64_FRAME_X27_X28_PAIR: _bindgen_ty_44 = 16;
pub const UNWIND_ARM64_FRAME_D8_D9_PAIR: _bindgen_ty_44 = 256;
pub const UNWIND_ARM64_FRAME_D10_D11_PAIR: _bindgen_ty_44 = 512;
pub const UNWIND_ARM64_FRAME_D12_D13_PAIR: _bindgen_ty_44 = 1024;
pub const UNWIND_ARM64_FRAME_D14_D15_PAIR: _bindgen_ty_44 = 2048;
pub const UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK: _bindgen_ty_44 = 16773120;
pub const UNWIND_ARM64_DWARF_SECTION_OFFSET: _bindgen_ty_44 = 16777215;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const UNWIND_ARM_MODE_MASK: _bindgen_ty_45 = 251658240;
pub const UNWIND_ARM_MODE_FRAME: _bindgen_ty_45 = 16777216;
pub const UNWIND_ARM_MODE_FRAME_D: _bindgen_ty_45 = 33554432;
pub const UNWIND_ARM_MODE_DWARF: _bindgen_ty_45 = 67108864;
pub const UNWIND_ARM_FRAME_STACK_ADJUST_MASK: _bindgen_ty_45 = 12582912;
pub const UNWIND_ARM_FRAME_FIRST_PUSH_R4: _bindgen_ty_45 = 1;
pub const UNWIND_ARM_FRAME_FIRST_PUSH_R5: _bindgen_ty_45 = 2;
pub const UNWIND_ARM_FRAME_FIRST_PUSH_R6: _bindgen_ty_45 = 4;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R8: _bindgen_ty_45 = 8;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R9: _bindgen_ty_45 = 16;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R10: _bindgen_ty_45 = 32;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R11: _bindgen_ty_45 = 64;
pub const UNWIND_ARM_FRAME_SECOND_PUSH_R12: _bindgen_ty_45 = 128;
pub const UNWIND_ARM_FRAME_D_REG_COUNT_MASK: _bindgen_ty_45 = 1792;
pub const UNWIND_ARM_DWARF_SECTION_OFFSET: _bindgen_ty_45 = 16777215;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_section_header {
    pub version: u32,
    pub commonEncodingsArraySectionOffset: u32,
    pub commonEncodingsArrayCount: u32,
    pub personalityArraySectionOffset: u32,
    pub personalityArrayCount: u32,
    pub indexSectionOffset: u32,
    pub indexCount: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_section_header_index_entry {
    pub functionOffset: u32,
    pub secondLevelPagesSectionOffset: u32,
    pub lsdaIndexArraySectionOffset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_section_header_lsda_index_entry {
    pub functionOffset: u32,
    pub lsdaOffset: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_regular_second_level_entry {
    pub functionOffset: u32,
    pub encoding: compact_unwind_encoding_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_regular_second_level_page_header {
    pub kind: u32,
    pub entryPageOffset: u16,
    pub entryCount: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unwind_info_compressed_second_level_page_header {
    pub kind: u32,
    pub entryPageOffset: u16,
    pub entryCount: u16,
    pub encodingsPageOffset: u16,
    pub encodingsCount: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXArchInfo {
    pub name: *const ::std::os::raw::c_char,
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub byteorder: NXByteOrder,
    pub description: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn NXGetAllArchInfos() -> *const NXArchInfo;
}
extern "C" {
    pub fn NXGetLocalArchInfo() -> *const NXArchInfo;
}
extern "C" {
    pub fn NXGetArchInfoFromName(name: *const ::std::os::raw::c_char) -> *const NXArchInfo;
}
extern "C" {
    pub fn NXGetArchInfoFromCpuType(
        cputype: cpu_type_t,
        cpusubtype: cpu_subtype_t,
    ) -> *const NXArchInfo;
}
extern "C" {
    pub fn NXFreeArchInfo(x: *const NXArchInfo);
}
extern "C" {
    pub fn NXFindBestFatArch(
        cputype: cpu_type_t,
        cpusubtype: cpu_subtype_t,
        fat_archs: *mut fat_arch,
        nfat_archs: u32,
    ) -> *mut fat_arch;
}
extern "C" {
    pub fn NXFindBestFatArch_64(
        cputype: cpu_type_t,
        cpusubtype: cpu_subtype_t,
        fat_archs64: *mut fat_arch_64,
        nfat_archs: u32,
    ) -> *mut fat_arch_64;
}
extern "C" {
    pub fn NXCombineCpuSubtypes(
        cputype: cpu_type_t,
        cpusubtype1: cpu_subtype_t,
        cpusubtype2: cpu_subtype_t,
    ) -> cpu_subtype_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fat_header {
    pub magic: u32,
    pub nfat_arch: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fat_arch {
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub offset: u32,
    pub size: u32,
    pub align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fat_arch_64 {
    pub cputype: cpu_type_t,
    pub cpusubtype: cpu_subtype_t,
    pub offset: u64,
    pub size: u64,
    pub align: u32,
    pub reserved: u32,
}
extern "C" {
    pub fn getsectdata(
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsectdatafromFramework(
        FrameworkName: *const ::std::os::raw::c_char,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_end() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_etext() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_edata() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getsectbyname(
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
    ) -> *const section_64;
}
extern "C" {
    pub fn getsectiondata(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut u8;
}
extern "C" {
    pub fn getsegbyname(segname: *const ::std::os::raw::c_char) -> *const segment_command_64;
}
extern "C" {
    pub fn getsegmentdata(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut u8;
}
extern "C" {
    pub fn getsectdatafromheader(
        mhp: *const mach_header,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsectbynamefromheader(
        mhp: *const mach_header,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
    ) -> *const section;
}
extern "C" {
    pub fn getsectbynamefromheaderwithswap(
        mhp: *mut mach_header,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        fSwap: ::std::os::raw::c_int,
    ) -> *const section;
}
extern "C" {
    pub fn getsectdatafromheader_64(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        size: *mut u64,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsectbynamefromheader_64(
        mhp: *const mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
    ) -> *const section_64;
}
extern "C" {
    pub fn getsectbynamefromheaderwithswap_64(
        mhp: *mut mach_header_64,
        segname: *const ::std::os::raw::c_char,
        sectname: *const ::std::os::raw::c_char,
        fSwap: ::std::os::raw::c_int,
    ) -> *const section;
}
extern "C" {
    pub static _mh_execute_header: mach_header_64;
}
extern "C" {
    pub static _mh_bundle_header: mach_header_64;
}
extern "C" {
    pub static _mh_dylib_header: mach_header_64;
}
extern "C" {
    pub static _mh_dylinker_header: mach_header_64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nlist {
    pub n_un: nlist__bindgen_ty_1,
    pub n_type: u8,
    pub n_sect: u8,
    pub n_desc: i16,
    pub n_value: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nlist__bindgen_ty_1 {
    pub n_strx: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nlist_64 {
    pub n_un: nlist_64__bindgen_ty_1,
    pub n_type: u8,
    pub n_sect: u8,
    pub n_desc: u16,
    pub n_value: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nlist_64__bindgen_ty_1 {
    pub n_strx: u32,
}
extern "C" {
    pub fn nlist(
        filename: *const ::std::os::raw::c_char,
        list: *mut nlist,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ranlib {
    pub ran_un: ranlib__bindgen_ty_1,
    pub ran_off: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ranlib__bindgen_ty_1 {
    pub ran_strx: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ranlib_64 {
    pub ran_un: ranlib_64__bindgen_ty_1,
    pub ran_off: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ranlib_64__bindgen_ty_1 {
    pub ran_strx: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct relocation_info {
    pub r_address: i32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl relocation_info {
    #[inline]
    pub fn r_symbolnum(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_r_symbolnum(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn r_pcrel(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_pcrel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn r_length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_r_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn r_extern(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_extern(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn r_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_r_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        r_symbolnum: u32,
        r_pcrel: u32,
        r_length: u32,
        r_extern: u32,
        r_type: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let r_symbolnum: u32 = unsafe { ::std::mem::transmute(r_symbolnum) };
            r_symbolnum as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let r_pcrel: u32 = unsafe { ::std::mem::transmute(r_pcrel) };
            r_pcrel as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let r_length: u32 = unsafe { ::std::mem::transmute(r_length) };
            r_length as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let r_extern: u32 = unsafe { ::std::mem::transmute(r_extern) };
            r_extern as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let r_type: u32 = unsafe { ::std::mem::transmute(r_type) };
            r_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scattered_relocation_info {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub r_value: i32,
}
impl scattered_relocation_info {
    #[inline]
    pub fn r_address(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_r_address(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn r_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_r_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn r_length(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_r_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn r_pcrel(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_pcrel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn r_scattered(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_r_scattered(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        r_address: u32,
        r_type: u32,
        r_length: u32,
        r_pcrel: u32,
        r_scattered: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let r_address: u32 = unsafe { ::std::mem::transmute(r_address) };
            r_address as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let r_type: u32 = unsafe { ::std::mem::transmute(r_type) };
            r_type as u64
        });
        __bindgen_bitfield_unit.set(28usize, 2u8, {
            let r_length: u32 = unsafe { ::std::mem::transmute(r_length) };
            r_length as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let r_pcrel: u32 = unsafe { ::std::mem::transmute(r_pcrel) };
            r_pcrel as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let r_scattered: u32 = unsafe { ::std::mem::transmute(r_scattered) };
            r_scattered as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const reloc_type_generic_GENERIC_RELOC_VANILLA: reloc_type_generic = 0;
pub const reloc_type_generic_GENERIC_RELOC_PAIR: reloc_type_generic = 1;
pub const reloc_type_generic_GENERIC_RELOC_SECTDIFF: reloc_type_generic = 2;
pub const reloc_type_generic_GENERIC_RELOC_PB_LA_PTR: reloc_type_generic = 3;
pub const reloc_type_generic_GENERIC_RELOC_LOCAL_SECTDIFF: reloc_type_generic = 4;
pub const reloc_type_generic_GENERIC_RELOC_TLV: reloc_type_generic = 5;
pub type reloc_type_generic = ::std::os::raw::c_uint;
extern "C" {
    pub fn swap_fat_header(fat_header: *mut fat_header, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_fat_arch(fat_archs: *mut fat_arch, nfat_arch: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_fat_arch_64(
        fat_archs64: *mut fat_arch_64,
        nfat_arch: u32,
        target_byte_order: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_mach_header(mh: *mut mach_header, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_mach_header_64(mh: *mut mach_header_64, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_load_command(lc: *mut load_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_segment_command(sg: *mut segment_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_segment_command_64(sg: *mut segment_command_64, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_section(s: *mut section, nsects: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_section_64(s: *mut section_64, nsects: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_symtab_command(st: *mut symtab_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_dysymtab_command(dyst: *mut dysymtab_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_symseg_command(ss: *mut symseg_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_fvmlib_command(fl: *mut fvmlib_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_dylib_command(dl: *mut dylib_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_sub_framework_command(
        sub: *mut sub_framework_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_sub_umbrella_command(usub: *mut sub_umbrella_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_sub_library_command(lsub: *mut sub_library_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_sub_client_command(csub: *mut sub_client_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_prebound_dylib_command(
        pbdylib: *mut prebound_dylib_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylinker_command(dyld: *mut dylinker_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_fvmfile_command(ff: *mut fvmfile_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_thread_command(ut: *mut thread_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_ident_command(ident: *mut ident_command, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_routines_command(r_cmd: *mut routines_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_routines_command_64(r_cmd: *mut routines_command_64, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_twolevel_hints_command(
        hints_cmd: *mut twolevel_hints_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_prebind_cksum_command(
        cksum_cmd: *mut prebind_cksum_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_uuid_command(uuid_cmd: *mut uuid_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_linkedit_data_command(ld: *mut linkedit_data_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_version_min_command(
        ver_cmd: *mut version_min_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_rpath_command(rpath_cmd: *mut rpath_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_encryption_command(ec: *mut encryption_info_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_encryption_command_64(
        ec: *mut encryption_info_command_64,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_linker_option_command(lo: *mut linker_option_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_dyld_info_command(ed: *mut dyld_info_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_entry_point_command(ep: *mut entry_point_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_source_version_command(
        sv: *mut source_version_command,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_note_command(nc: *mut note_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_build_version_command(bv: *mut build_version_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_build_tool_version(
        bt: *mut build_tool_version,
        ntools: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_twolevel_hint(hints: *mut twolevel_hint, nhints: u32, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_fileset_entry_command(lc: *mut fileset_entry_command, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_nlist(symbols: *mut nlist, nsymbols: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_nlist_64(symbols: *mut nlist_64, nsymbols: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_ranlib(ranlibs: *mut ranlib, nranlibs: u32, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_ranlib_64(ranlibs: *mut ranlib_64, nranlibs: u64, target_byte_order: NXByteOrder);
}
extern "C" {
    pub fn swap_relocation_info(
        relocs: *mut relocation_info,
        nrelocs: u32,
        target_byte_order: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_indirect_symbols(
        indirect_symbols: *mut u32,
        nindirect_symbols: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylib_reference(
        refs: *mut dylib_reference,
        nrefs: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylib_module(mods: *mut dylib_module, nmods: u32, target_byte_sex: NXByteOrder);
}
extern "C" {
    pub fn swap_dylib_module_64(
        mods: *mut dylib_module_64,
        nmods: u32,
        target_byte_sex: NXByteOrder,
    );
}
extern "C" {
    pub fn swap_dylib_table_of_contents(
        tocs: *mut dylib_table_of_contents,
        ntocs: u32,
        target_byte_sex: NXByteOrder,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Class(pub id);
impl std::ops::Deref for Class {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Class {}
impl Class {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Class), alloc) })
    }
}
impl IClass for Class {}
pub trait IClass: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_object {
    pub isa: Class,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = bool;
pub type objc_zone_t = *mut _malloc_zone_t;
extern "C" {
    pub fn sel_getName(sel: objc::runtime::Sel) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_registerName(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sel_isMapped(sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn sel_getUid(str_: *const ::std::os::raw::c_char) -> objc::runtime::Sel;
}
pub type objc_objectptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn objc_retainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedPointer(obj: id) -> objc_objectptr_t;
}
pub type NSInteger = ::std::os::raw::c_long;
pub type NSUInteger = ::std::os::raw::c_ulong;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSString(pub id);
impl std::ops::Deref for NSString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSString {}
impl NSString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSString), alloc) })
    }
}
impl INSString for NSString {}
pub trait INSString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSMethodSignature(pub id);
impl std::ops::Deref for NSMethodSignature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMethodSignature {}
impl NSMethodSignature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSMethodSignature), alloc) })
    }
}
impl INSMethodSignature for NSMethodSignature {}
pub trait INSMethodSignature: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSInvocation(pub id);
impl std::ops::Deref for NSInvocation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocation {}
impl NSInvocation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSInvocation), alloc) })
    }
}
impl INSInvocation for NSInvocation {}
pub trait INSInvocation: Sized + std::ops::Deref {}
pub trait PNSObject: Sized + std::ops::Deref {
    unsafe fn isEqual_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqual: object)
    }
    unsafe fn class(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, class)
    }
    unsafe fn self_(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, self)
    }
    unsafe fn performSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performSelector: aSelector)
    }
    unsafe fn performSelector_withObject_(&self, aSelector: objc::runtime::Sel, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object)
    }
    unsafe fn performSelector_withObject_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object1: id,
        object2: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object1 withObject : object2)
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxy)
    }
    unsafe fn isKindOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isKindOfClass: aClass)
    }
    unsafe fn isMemberOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMemberOfClass: aClass)
    }
    unsafe fn conformsToProtocol_(&self, aProtocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, conformsToProtocol: aProtocol)
    }
    unsafe fn respondsToSelector_(&self, aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, respondsToSelector: aSelector)
    }
    unsafe fn retain(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retain)
    }
    unsafe fn release(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, release)
    }
    unsafe fn autorelease(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autorelease)
    }
    unsafe fn retainCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainCount)
    }
    unsafe fn zone(&self) -> *mut _NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zone)
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hash)
    }
    unsafe fn superclass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, superclass)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSZone {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSObject(pub id);
impl std::ops::Deref for NSObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSObject {}
impl NSObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSObject), alloc) })
    }
}
impl PNSObject for NSObject {}
impl INSObject for NSObject {}
pub trait INSObject: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn copy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copy)
    }
    unsafe fn mutableCopy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopy)
    }
    unsafe fn methodForSelector_(&self, aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodForSelector: aSelector)
    }
    unsafe fn doesNotRecognizeSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesNotRecognizeSelector: aSelector)
    }
    unsafe fn forwardingTargetForSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardingTargetForSelector: aSelector)
    }
    unsafe fn forwardInvocation_(&self, anInvocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardInvocation: anInvocation)
    }
    unsafe fn methodSignatureForSelector_(&self, aSelector: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignatureForSelector: aSelector)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn load()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), load)
    }
    unsafe fn initialize()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), initialize)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), new)
    }
    unsafe fn allocWithZone_(zone: *mut _NSZone) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), allocWithZone: zone)
    }
    unsafe fn alloc() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), alloc)
    }
    unsafe fn copyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), copyWithZone: zone)
    }
    unsafe fn mutableCopyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), mutableCopyWithZone: zone)
    }
    unsafe fn instancesRespondToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instancesRespondToSelector: aSelector)
    }
    unsafe fn conformsToProtocol_(protocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), conformsToProtocol: protocol)
    }
    unsafe fn instanceMethodForSelector_(aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instanceMethodForSelector: aSelector)
    }
    unsafe fn instanceMethodSignatureForSelector_(
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSObject),
            instanceMethodSignatureForSelector: aSelector
        )
    }
    unsafe fn isSubclassOfClass_(aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), isSubclassOfClass: aClass)
    }
    unsafe fn resolveClassMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveClassMethod: sel)
    }
    unsafe fn resolveInstanceMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveInstanceMethod: sel)
    }
    unsafe fn hash() -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), hash)
    }
    unsafe fn superclass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), superclass)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), class)
    }
    unsafe fn description() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), description)
    }
    unsafe fn debugDescription() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method {
    _unused: [u8; 0],
}
pub type Method = *mut objc_method;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_ivar {
    _unused: [u8; 0],
}
pub type Ivar = *mut objc_ivar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_category {
    _unused: [u8; 0],
}
pub type Category = *mut objc_category;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property {
    _unused: [u8; 0],
}
pub type objc_property_t = *mut objc_property;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_description {
    pub name: objc::runtime::Sel,
    pub types: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_property_attribute_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn object_copy(obj: id, size: usize) -> id;
}
extern "C" {
    pub fn object_dispose(obj: id) -> id;
}
extern "C" {
    pub fn object_getClass(obj: id) -> Class;
}
extern "C" {
    pub fn object_setClass(obj: id, cls: Class) -> Class;
}
extern "C" {
    pub fn object_isClass(obj: id) -> BOOL;
}
extern "C" {
    pub fn object_getIvar(obj: id, ivar: Ivar) -> id;
}
extern "C" {
    pub fn object_setIvar(obj: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setIvarWithStrongDefault(obj: id, ivar: Ivar, value: id);
}
extern "C" {
    pub fn object_setInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_setInstanceVariableWithStrongDefault(
        obj: id,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn object_getInstanceVariable(
        obj: id,
        name: *const ::std::os::raw::c_char,
        outValue: *mut *mut ::std::os::raw::c_void,
    ) -> Ivar;
}
extern "C" {
    pub fn objc_getClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_getMetaClass(name: *const ::std::os::raw::c_char) -> id;
}
extern "C" {
    pub fn objc_lookUpClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn objc_getRequiredClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn objc_getClassList(
        buffer: Class,
        bufferCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_copyClassList(outCount: *mut ::std::os::raw::c_uint) -> Class;
}
extern "C" {
    pub fn objc_enumerateClasses(
        image: *const ::std::os::raw::c_void,
        namePrefix: *const ::std::os::raw::c_char,
        conformingTo: Protocol,
        subclassing: Class,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn class_getName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_isMetaClass(cls: Class) -> BOOL;
}
extern "C" {
    pub fn class_getSuperclass(cls: Class) -> Class;
}
extern "C" {
    pub fn class_setSuperclass(cls: Class, newSuper: Class) -> Class;
}
extern "C" {
    pub fn class_getVersion(cls: Class) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn class_setVersion(cls: Class, version: ::std::os::raw::c_int);
}
extern "C" {
    pub fn class_getInstanceSize(cls: Class) -> usize;
}
extern "C" {
    pub fn class_getInstanceVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_getClassVariable(cls: Class, name: *const ::std::os::raw::c_char) -> Ivar;
}
extern "C" {
    pub fn class_copyIvarList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Ivar;
}
extern "C" {
    pub fn class_getInstanceMethod(cls: Class, name: objc::runtime::Sel) -> Method;
}
extern "C" {
    pub fn class_getClassMethod(cls: Class, name: objc::runtime::Sel) -> Method;
}
extern "C" {
    pub fn class_getMethodImplementation(cls: Class, name: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_getMethodImplementation_stret(cls: Class, name: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_respondsToSelector(cls: Class, sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn class_copyMethodList(cls: Class, outCount: *mut ::std::os::raw::c_uint) -> *mut Method;
}
extern "C" {
    pub fn class_conformsToProtocol(cls: Class, protocol: Protocol) -> BOOL;
}
extern "C" {
    pub fn class_copyProtocolList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut Protocol;
}
extern "C" {
    pub fn class_getProperty(cls: Class, name: *const ::std::os::raw::c_char) -> objc_property_t;
}
extern "C" {
    pub fn class_copyPropertyList(
        cls: Class,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn class_getIvarLayout(cls: Class) -> *const u8;
}
extern "C" {
    pub fn class_getWeakIvarLayout(cls: Class) -> *const u8;
}
extern "C" {
    pub fn class_addMethod(
        cls: Class,
        name: objc::runtime::Sel,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceMethod(
        cls: Class,
        name: objc::runtime::Sel,
        imp: IMP,
        types: *const ::std::os::raw::c_char,
    ) -> IMP;
}
extern "C" {
    pub fn class_addIvar(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        size: usize,
        alignment: u8,
        types: *const ::std::os::raw::c_char,
    ) -> BOOL;
}
extern "C" {
    pub fn class_addProtocol(cls: Class, protocol: Protocol) -> BOOL;
}
extern "C" {
    pub fn class_addProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    ) -> BOOL;
}
extern "C" {
    pub fn class_replaceProperty(
        cls: Class,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn class_setIvarLayout(cls: Class, layout: *const u8);
}
extern "C" {
    pub fn class_setWeakIvarLayout(cls: Class, layout: *const u8);
}
extern "C" {
    pub fn objc_getFutureClass(name: *const ::std::os::raw::c_char) -> Class;
}
extern "C" {
    pub fn class_createInstance(cls: Class, extraBytes: usize) -> id;
}
extern "C" {
    pub fn objc_constructInstance(cls: Class, bytes: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_destructInstance(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn objc_allocateClassPair(
        superclass: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_registerClassPair(cls: Class);
}
extern "C" {
    pub fn objc_duplicateClass(
        original: Class,
        name: *const ::std::os::raw::c_char,
        extraBytes: usize,
    ) -> Class;
}
extern "C" {
    pub fn objc_disposeClassPair(cls: Class);
}
extern "C" {
    pub fn method_getName(m: Method) -> objc::runtime::Sel;
}
extern "C" {
    pub fn method_getImplementation(m: Method) -> IMP;
}
extern "C" {
    pub fn method_getTypeEncoding(m: Method) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_getNumberOfArguments(m: Method) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn method_copyReturnType(m: Method) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_copyArgumentType(
        m: Method,
        index: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn method_getReturnType(m: Method, dst: *mut ::std::os::raw::c_char, dst_len: usize);
}
extern "C" {
    pub fn method_getArgumentType(
        m: Method,
        index: ::std::os::raw::c_uint,
        dst: *mut ::std::os::raw::c_char,
        dst_len: usize,
    );
}
extern "C" {
    pub fn method_getDescription(m: Method) -> *mut objc_method_description;
}
extern "C" {
    pub fn method_setImplementation(m: Method, imp: IMP) -> IMP;
}
extern "C" {
    pub fn method_exchangeImplementations(m1: Method, m2: Method);
}
extern "C" {
    pub fn ivar_getName(v: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getTypeEncoding(v: Ivar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ivar_getOffset(v: Ivar) -> isize;
}
extern "C" {
    pub fn property_getName(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_getAttributes(property: objc_property_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_copyAttributeList(
        property: objc_property_t,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_attribute_t;
}
extern "C" {
    pub fn property_copyAttributeValue(
        property: objc_property_t,
        attributeName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_getProtocol(name: *const ::std::os::raw::c_char) -> Protocol;
}
extern "C" {
    pub fn objc_copyProtocolList(outCount: *mut ::std::os::raw::c_uint) -> *mut Protocol;
}
extern "C" {
    pub fn protocol_conformsToProtocol(proto: Protocol, other: Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_isEqual(proto: Protocol, other: Protocol) -> BOOL;
}
extern "C" {
    pub fn protocol_getName(proto: Protocol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn protocol_getMethodDescription(
        proto: Protocol,
        aSel: objc::runtime::Sel,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    ) -> objc_method_description;
}
extern "C" {
    pub fn protocol_copyMethodDescriptionList(
        proto: Protocol,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_method_description;
}
extern "C" {
    pub fn protocol_getProperty(
        proto: Protocol,
        name: *const ::std::os::raw::c_char,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyPropertyList2(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    ) -> *mut objc_property_t;
}
extern "C" {
    pub fn protocol_copyProtocolList(
        proto: Protocol,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut Protocol;
}
extern "C" {
    pub fn objc_allocateProtocol(name: *const ::std::os::raw::c_char) -> Protocol;
}
extern "C" {
    pub fn objc_registerProtocol(proto: Protocol);
}
extern "C" {
    pub fn protocol_addMethodDescription(
        proto: Protocol,
        name: objc::runtime::Sel,
        types: *const ::std::os::raw::c_char,
        isRequiredMethod: BOOL,
        isInstanceMethod: BOOL,
    );
}
extern "C" {
    pub fn protocol_addProtocol(proto: Protocol, addition: Protocol);
}
extern "C" {
    pub fn protocol_addProperty(
        proto: Protocol,
        name: *const ::std::os::raw::c_char,
        attributes: *const objc_property_attribute_t,
        attributeCount: ::std::os::raw::c_uint,
        isRequiredProperty: BOOL,
        isInstanceProperty: BOOL,
    );
}
extern "C" {
    pub fn objc_copyImageNames(
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn class_getImageName(cls: Class) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn objc_copyClassNamesForImage(
        image: *const ::std::os::raw::c_char,
        outCount: *mut ::std::os::raw::c_uint,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_isEqual(lhs: objc::runtime::Sel, rhs: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn objc_enumerationMutation(obj: id);
}
extern "C" {
    pub fn objc_setEnumerationMutationHandler(
        handler: ::std::option::Option<unsafe extern "C" fn(arg1: id)>,
    );
}
extern "C" {
    pub fn objc_setForwardHandler(
        fwd: *mut ::std::os::raw::c_void,
        fwd_stret: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn imp_implementationWithBlock(block: id) -> IMP;
}
extern "C" {
    pub fn imp_getBlock(anImp: IMP) -> id;
}
extern "C" {
    pub fn imp_removeBlock(anImp: IMP) -> BOOL;
}
extern "C" {
    pub fn objc_loadWeak(location: *mut id) -> id;
}
extern "C" {
    pub fn objc_storeWeak(location: *mut id, obj: id) -> id;
}
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_ASSIGN: objc_AssociationPolicy = 0;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_RETAIN_NONATOMIC: objc_AssociationPolicy = 1;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_COPY_NONATOMIC: objc_AssociationPolicy = 3;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_RETAIN: objc_AssociationPolicy = 769;
pub const objc_AssociationPolicy_OBJC_ASSOCIATION_COPY: objc_AssociationPolicy = 771;
pub type objc_AssociationPolicy = usize;
extern "C" {
    pub fn objc_setAssociatedObject(
        object: id,
        key: *const ::std::os::raw::c_void,
        value: id,
        policy: objc_AssociationPolicy,
    );
}
extern "C" {
    pub fn objc_getAssociatedObject(object: id, key: *const ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_removeAssociatedObjects(object: id);
}
pub type objc_hook_getImageName = ::std::option::Option<
    unsafe extern "C" fn(cls: Class, outImageName: *mut *const ::std::os::raw::c_char) -> BOOL,
>;
extern "C" {
    pub fn objc_setHook_getImageName(
        newValue: objc_hook_getImageName,
        outOldValue: *mut objc_hook_getImageName,
    );
}
pub type objc_hook_getClass = ::std::option::Option<
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char, outClass: Class) -> BOOL,
>;
extern "C" {
    pub fn objc_setHook_getClass(
        newValue: objc_hook_getClass,
        outOldValue: *mut objc_hook_getClass,
    );
}
pub type objc_func_loadImage =
    ::std::option::Option<unsafe extern "C" fn(header: *const mach_header)>;
extern "C" {
    pub fn objc_addLoadImageFunc(func: objc_func_loadImage);
}
pub type objc_hook_lazyClassNamer =
    ::std::option::Option<unsafe extern "C" fn(cls: Class) -> *const ::std::os::raw::c_char>;
extern "C" {
    pub fn objc_setHook_lazyClassNamer(
        newValue: objc_hook_lazyClassNamer,
        oldOutValue: *mut objc_hook_lazyClassNamer,
    );
}
pub type _objc_swiftMetadataInitializer = ::std::option::Option<
    unsafe extern "C" fn(cls: Class, arg: *mut ::std::os::raw::c_void) -> Class,
>;
extern "C" {
    pub fn _objc_realizeClassFromSwift(
        cls: Class,
        previously: *mut ::std::os::raw::c_void,
    ) -> Class;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_method_list {
    _unused: [u8; 0],
}
extern "C" {
    pub fn class_lookupMethod(cls: Class, sel: objc::runtime::Sel) -> IMP;
}
extern "C" {
    pub fn class_respondsToMethod(cls: Class, sel: objc::runtime::Sel) -> BOOL;
}
extern "C" {
    pub fn _objc_flush_caches(cls: Class);
}
extern "C" {
    pub fn object_copyFromZone(anObject: id, nBytes: usize, z: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn class_createInstanceFromZone(
        arg1: Class,
        idxIvars: usize,
        z: *mut ::std::os::raw::c_void,
    ) -> id;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_super {
    pub receiver: id,
    pub super_class: Class,
}
extern "C" {
    pub fn objc_msgSend();
}
extern "C" {
    pub fn objc_msgSendSuper();
}
extern "C" {
    pub fn objc_msgSend_stret();
}
extern "C" {
    pub fn objc_msgSendSuper_stret();
}
extern "C" {
    pub fn method_invoke();
}
extern "C" {
    pub fn method_invoke_stret();
}
extern "C" {
    pub fn _objc_msgForward();
}
extern "C" {
    pub fn _objc_msgForward_stret();
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct Protocol(pub id);
impl std::ops::Deref for Protocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Protocol {}
impl Protocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(Protocol), alloc) })
    }
}
impl INSObject for Protocol {}
impl PNSObject for Protocol {}
impl From<Protocol> for NSObject {
    fn from(child: Protocol) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for Protocol {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<Protocol, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(Protocol)) };
        if is_kind_of {
            Ok(Protocol(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to Protocol")
        }
    }
}
impl IProtocol for Protocol {}
pub trait IProtocol: Sized + std::ops::Deref {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXHashTablePrototype {
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            data: *const ::std::os::raw::c_void,
        ) -> usize,
    >,
    pub isEqual: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            data1: *const ::std::os::raw::c_void,
            data2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const ::std::os::raw::c_void,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub style: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXHashTable {
    pub prototype: *const NXHashTablePrototype,
    pub count: ::std::os::raw::c_uint,
    pub nbBuckets: ::std::os::raw::c_uint,
    pub buckets: *mut ::std::os::raw::c_void,
    pub info: *const ::std::os::raw::c_void,
}
extern "C" {
    pub fn NXCreateHashTableFromZone(
        prototype: NXHashTablePrototype,
        capacity: ::std::os::raw::c_uint,
        info: *const ::std::os::raw::c_void,
        z: *mut ::std::os::raw::c_void,
    ) -> *mut NXHashTable;
}
extern "C" {
    pub fn NXCreateHashTable(
        prototype: NXHashTablePrototype,
        capacity: ::std::os::raw::c_uint,
        info: *const ::std::os::raw::c_void,
    ) -> *mut NXHashTable;
}
extern "C" {
    pub fn NXFreeHashTable(table: *mut NXHashTable);
}
extern "C" {
    pub fn NXEmptyHashTable(table: *mut NXHashTable);
}
extern "C" {
    pub fn NXResetHashTable(table: *mut NXHashTable);
}
extern "C" {
    pub fn NXCompareHashTables(table1: *mut NXHashTable, table2: *mut NXHashTable) -> BOOL;
}
extern "C" {
    pub fn NXCopyHashTable(table: *mut NXHashTable) -> *mut NXHashTable;
}
extern "C" {
    pub fn NXCountHashTable(table: *mut NXHashTable) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn NXHashMember(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXHashGet(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NXHashInsert(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NXHashInsertIfAbsent(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn NXHashRemove(
        table: *mut NXHashTable,
        data: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NXHashState {
    pub i: ::std::os::raw::c_int,
    pub j: ::std::os::raw::c_int,
}
extern "C" {
    pub fn NXInitHashState(table: *mut NXHashTable) -> NXHashState;
}
extern "C" {
    pub fn NXNextHashState(
        table: *mut NXHashTable,
        state: *mut NXHashState,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXPtrHash(
        info: *const ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn NXStrHash(
        info: *const ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn NXPtrIsEqual(
        info: *const ::std::os::raw::c_void,
        data1: *const ::std::os::raw::c_void,
        data2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXStrIsEqual(
        info: *const ::std::os::raw::c_void,
        data1: *const ::std::os::raw::c_void,
        data2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NXNoEffectFree(info: *const ::std::os::raw::c_void, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn NXReallyFree(info: *const ::std::os::raw::c_void, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub static NXPtrPrototype: NXHashTablePrototype;
}
extern "C" {
    pub static NXStrPrototype: NXHashTablePrototype;
}
extern "C" {
    pub static NXPtrStructKeyPrototype: NXHashTablePrototype;
}
extern "C" {
    pub static NXStrStructKeyPrototype: NXHashTablePrototype;
}
pub const OBJC_RATIO_COLLECTION: _bindgen_ty_46 = 0;
pub const OBJC_GENERATIONAL_COLLECTION: _bindgen_ty_46 = 1;
pub const OBJC_FULL_COLLECTION: _bindgen_ty_46 = 2;
pub const OBJC_EXHAUSTIVE_COLLECTION: _bindgen_ty_46 = 3;
pub const OBJC_COLLECT_IF_NEEDED: _bindgen_ty_46 = 8;
pub const OBJC_WAIT_UNTIL_DONE: _bindgen_ty_46 = 16;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub const OBJC_CLEAR_RESIDENT_STACK: _bindgen_ty_47 = 1;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub type objc_exception_preprocessor =
    ::std::option::Option<unsafe extern "C" fn(exception: id) -> id>;
pub type objc_exception_matcher = ::std::option::Option<
    unsafe extern "C" fn(catch_type: Class, exception: id) -> ::std::os::raw::c_int,
>;
pub type objc_uncaught_exception_handler =
    ::std::option::Option<unsafe extern "C" fn(exception: id)>;
pub type objc_exception_handler =
    ::std::option::Option<unsafe extern "C" fn(unused: id, context: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn objc_exception_throw(exception: id) -> !;
}
extern "C" {
    pub fn objc_exception_rethrow() -> !;
}
extern "C" {
    pub fn objc_begin_catch(exc_buf: *mut ::std::os::raw::c_void) -> id;
}
extern "C" {
    pub fn objc_end_catch();
}
extern "C" {
    pub fn objc_terminate() -> !;
}
extern "C" {
    pub fn objc_setExceptionPreprocessor(
        fn_: objc_exception_preprocessor,
    ) -> objc_exception_preprocessor;
}
extern "C" {
    pub fn objc_setExceptionMatcher(fn_: objc_exception_matcher) -> objc_exception_matcher;
}
extern "C" {
    pub fn objc_setUncaughtExceptionHandler(
        fn_: objc_uncaught_exception_handler,
    ) -> objc_uncaught_exception_handler;
}
extern "C" {
    pub fn objc_addExceptionHandler(
        fn_: objc_exception_handler,
        context: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn objc_removeExceptionHandler(token: usize);
}
extern "C" {
    pub fn objc_sync_enter(obj: id) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objc_sync_exit(obj: id) -> ::std::os::raw::c_int;
}
pub const OBJC_SYNC_SUCCESS: _bindgen_ty_48 = 0;
pub const OBJC_SYNC_NOT_OWNING_THREAD_ERROR: _bindgen_ty_48 = -1;
pub type _bindgen_ty_48 = ::std::os::raw::c_int;
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_object(pub id);
impl std::ops::Deref for OS_object {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_object {}
impl OS_object {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_object), alloc) })
    }
}
impl INSObject for OS_object {}
impl PNSObject for OS_object {}
impl From<OS_object> for NSObject {
    fn from(child: OS_object) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_object {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_object, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_object)) };
        if is_kind_of {
            Ok(OS_object(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_object")
        }
    }
}
impl IOS_object for OS_object {}
pub trait IOS_object: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
extern "C" {
    pub fn os_retain(object: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup(pub id);
impl std::ops::Deref for OS_os_workgroup {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup {}
impl OS_os_workgroup {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup), alloc) })
    }
}
impl IOS_object for OS_os_workgroup {}
impl From<OS_os_workgroup> for OS_object {
    fn from(child: OS_os_workgroup) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl INSObject for OS_os_workgroup {}
impl PNSObject for OS_os_workgroup {}
impl From<OS_os_workgroup> for NSObject {
    fn from(child: OS_os_workgroup) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup)) };
        if is_kind_of {
            Ok(OS_os_workgroup(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup")
        }
    }
}
impl IOS_os_workgroup for OS_os_workgroup {}
pub trait IOS_os_workgroup: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_t = OS_os_workgroup;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
extern "C" {
    pub fn os_workgroup_copy_port(
        wg: OS_os_workgroup,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: OS_os_workgroup,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
extern "C" {
    pub fn os_workgroup_join(
        wg: OS_os_workgroup,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_leave(wg: OS_os_workgroup, token: os_workgroup_join_token_t);
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: OS_os_workgroup,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: OS_os_workgroup,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_workgroup_cancel(wg: OS_os_workgroup);
}
extern "C" {
    pub fn os_workgroup_testcancel(wg: OS_os_workgroup) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t = *mut os_workgroup_max_parallel_threads_attr_s;
extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: OS_os_workgroup,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_interval: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_interval(pub id);
impl std::ops::Deref for OS_os_workgroup_interval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_interval {}
impl OS_os_workgroup_interval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_interval), alloc) })
    }
}
impl POS_os_workgroup_interval for OS_os_workgroup_interval {}
impl IOS_os_workgroup for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_interval) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_object for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for OS_object {
    fn from(child: OS_os_workgroup_interval) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl INSObject for OS_os_workgroup_interval {}
impl PNSObject for OS_os_workgroup_interval {}
impl From<OS_os_workgroup_interval> for NSObject {
    fn from(child: OS_os_workgroup_interval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_interval {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_interval, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_interval)) };
        if is_kind_of {
            Ok(OS_os_workgroup_interval(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_interval")
        }
    }
}
impl IOS_os_workgroup_interval for OS_os_workgroup_interval {}
pub trait IOS_os_workgroup_interval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_interval_t = OS_os_workgroup;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t = *mut os_workgroup_interval_data_opaque_s;
extern "C" {
    pub fn os_workgroup_interval_start(
        wg: OS_os_workgroup,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_update(
        wg: OS_os_workgroup,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: OS_os_workgroup,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub trait POS_os_workgroup_parallel: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct OS_os_workgroup_parallel(pub id);
impl std::ops::Deref for OS_os_workgroup_parallel {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for OS_os_workgroup_parallel {}
impl OS_os_workgroup_parallel {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(OS_os_workgroup_parallel), alloc) })
    }
}
impl POS_os_workgroup_parallel for OS_os_workgroup_parallel {}
impl IOS_os_workgroup for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_os_workgroup {
    fn from(child: OS_os_workgroup_parallel) -> OS_os_workgroup {
        OS_os_workgroup(child.0)
    }
}
impl std::convert::TryFrom<OS_os_workgroup> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_os_workgroup) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_os_workgroup cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_object for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for OS_object {
    fn from(child: OS_os_workgroup_parallel) -> OS_object {
        OS_object(child.0)
    }
}
impl std::convert::TryFrom<OS_object> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: OS_object) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This OS_object cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl INSObject for OS_os_workgroup_parallel {}
impl PNSObject for OS_os_workgroup_parallel {}
impl From<OS_os_workgroup_parallel> for NSObject {
    fn from(child: OS_os_workgroup_parallel) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for OS_os_workgroup_parallel {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<OS_os_workgroup_parallel, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(OS_os_workgroup_parallel)) };
        if is_kind_of {
            Ok(OS_os_workgroup_parallel(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to OS_os_workgroup_parallel")
        }
    }
}
impl IOS_os_workgroup_parallel for OS_os_workgroup_parallel {}
pub trait IOS_os_workgroup_parallel: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
}
pub type os_workgroup_parallel_t = OS_os_workgroup;
extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: _bindgen_ty_49 = 18446744073709551614;
pub type _bindgen_ty_49 = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
extern "C" {
    pub fn dispatch_walltime(when: *const timespec, delta: i64) -> dispatch_time_t;
}
pub trait POS_dispatch_object: Sized + std::ops::Deref {}
pub type dispatch_object_t = NSObject;
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub use self::qos_class_t as dispatch_qos_class_t;
extern "C" {
    pub fn dispatch_retain(object: NSObject);
}
extern "C" {
    pub fn dispatch_release(object: NSObject);
}
extern "C" {
    pub fn dispatch_get_context(object: NSObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_set_context(object: NSObject, context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_set_finalizer_f(object: NSObject, finalizer: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_activate(object: NSObject);
}
extern "C" {
    pub fn dispatch_suspend(object: NSObject);
}
extern "C" {
    pub fn dispatch_resume(object: NSObject);
}
extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dispatch_wait(object: *mut ::std::os::raw::c_void, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
extern "C" {
    pub fn dispatch_debug(object: NSObject, message: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dispatch_debugv(object: NSObject, message: *const ::std::os::raw::c_char, ap: va_list);
}
pub trait POS_dispatch_queue: Sized + std::ops::Deref {}
pub type dispatch_queue_t = NSObject;
pub trait POS_dispatch_queue_global: Sized + std::ops::Deref {}
pub type dispatch_queue_global_t = NSObject;
pub trait POS_dispatch_queue_serial: Sized + std::ops::Deref {}
pub type dispatch_queue_serial_t = NSObject;
pub trait POS_dispatch_queue_main: Sized + std::ops::Deref {}
pub type dispatch_queue_main_t = NSObject;
pub trait POS_dispatch_queue_concurrent: Sized + std::ops::Deref {}
pub type dispatch_queue_concurrent_t = NSObject;
extern "C" {
    pub fn dispatch_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_apply(iterations: usize, queue: NSObject, block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, iteration: usize),
        >,
    );
}
extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}
pub trait POS_dispatch_queue_attr: Sized + std::ops::Deref {}
pub type dispatch_queue_attr_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(attr: NSObject) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT:
    dispatch_autorelease_frequency_t = 0;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:
    dispatch_autorelease_frequency_t = 1;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER:
    dispatch_autorelease_frequency_t = 2;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: NSObject,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_queue_create_with_target$V2"]
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
        target: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: NSObject,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_get_label(queue: NSObject) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: NSObject,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
extern "C" {
    pub fn dispatch_set_target_queue(object: NSObject, queue: NSObject);
}
extern "C" {
    pub fn dispatch_main() -> !;
}
extern "C" {
    pub fn dispatch_after(when: dispatch_time_t, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_sync(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait(queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: NSObject,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_get_specific(key: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue$V2"]
    pub fn dispatch_assert_queue(queue: NSObject);
}
extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: NSObject);
}
extern "C" {
    #[link_name = "\u{1}_dispatch_assert_queue_not$V2"]
    pub fn dispatch_assert_queue_not(queue: NSObject);
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER: dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED: dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT: dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS: dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS: dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS: dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: NSObject,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub trait POS_dispatch_source: Sized + std::ops::Deref {}
pub type dispatch_source_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: NSObject,
    ) -> dispatch_source_t;
}
extern "C" {
    pub fn dispatch_source_set_event_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_event_handler_f(source: NSObject, handler: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(source: NSObject, handler: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_source_cancel(source: NSObject);
}
extern "C" {
    pub fn dispatch_source_testcancel(source: NSObject) -> isize;
}
extern "C" {
    pub fn dispatch_source_get_handle(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_mask(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_data(source: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_source_merge_data(source: NSObject, value: usize);
}
extern "C" {
    pub fn dispatch_source_set_timer(
        source: NSObject,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler(source: NSObject, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: NSObject,
        handler: dispatch_function_t,
    );
}
pub trait POS_dispatch_group: Sized + std::ops::Deref {}
pub type dispatch_group_t = NSObject;
extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
extern "C" {
    pub fn dispatch_group_async(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_group_async_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_wait(group: NSObject, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_group_notify(group: NSObject, queue: NSObject, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_group_notify_f(
        group: NSObject,
        queue: NSObject,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_enter(group: NSObject);
}
extern "C" {
    pub fn dispatch_group_leave(group: NSObject);
}
pub trait POS_dispatch_semaphore: Sized + std::ops::Deref {}
pub type dispatch_semaphore_t = NSObject;
extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
extern "C" {
    pub fn dispatch_semaphore_wait(dsema: NSObject, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_semaphore_signal(dsema: NSObject) -> isize;
}
pub type dispatch_once_t = isize;
extern "C" {
    pub fn dispatch_once(predicate: *mut dispatch_once_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub trait POS_dispatch_data: Sized + std::ops::Deref {}
pub type dispatch_data_t = NSObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_data_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: NSObject,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_get_size(data: NSObject) -> usize;
}
extern "C" {
    pub fn dispatch_data_create_map(
        data: NSObject,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_concat(data1: NSObject, data2: NSObject) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_subrange(
        data: NSObject,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_data_apply(data: NSObject, applier: dispatch_data_applier_t) -> bool;
}
extern "C" {
    pub fn dispatch_data_copy_region(
        data: NSObject,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: NSObject,
        queue: NSObject,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub trait POS_dispatch_io: Sized + std::ops::Deref {}
pub type dispatch_io_t = NSObject;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: NSObject,
        queue: NSObject,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_io_read(
        channel: NSObject,
        offset: off_t,
        length: usize,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
extern "C" {
    pub fn dispatch_io_write(
        channel: NSObject,
        offset: off_t,
        data: NSObject,
        queue: NSObject,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_close(channel: NSObject, flags: dispatch_io_close_flags_t);
}
extern "C" {
    pub fn dispatch_io_barrier(channel: NSObject, barrier: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_io_get_descriptor(channel: NSObject) -> dispatch_fd_t;
}
extern "C" {
    pub fn dispatch_io_set_high_water(channel: NSObject, high_water: usize);
}
extern "C" {
    pub fn dispatch_io_set_low_water(channel: NSObject, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_set_interval(
        channel: NSObject,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub trait POS_dispatch_workloop: Sized + std::ops::Deref {}
pub type dispatch_workloop_t = NSObject;
extern "C" {
    pub fn dispatch_workloop_create(label: *const ::std::os::raw::c_char) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: NSObject,
        frequency: dispatch_autorelease_frequency_t,
    );
}
extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(workloop: NSObject, workgroup: OS_os_workgroup);
}
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSArray(pub id);
impl std::ops::Deref for NSArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArray {}
impl NSArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSArray), alloc) })
    }
}
impl INSArray for NSArray {}
pub trait INSArray: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSAttributedString(pub id);
impl std::ops::Deref for NSAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedString {}
impl NSAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSAttributedString), alloc) })
    }
}
impl INSAttributedString for NSAttributedString {}
pub trait INSAttributedString: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNull(pub id);
impl std::ops::Deref for NSNull {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNull {}
impl NSNull {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNull), alloc) })
    }
}
impl INSNull for NSNull {}
pub trait INSNull: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSCharacterSet(pub id);
impl std::ops::Deref for NSCharacterSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCharacterSet {}
impl NSCharacterSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSCharacterSet), alloc) })
    }
}
impl INSCharacterSet for NSCharacterSet {}
pub trait INSCharacterSet: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSData(pub id);
impl std::ops::Deref for NSData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSData {}
impl NSData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSData), alloc) })
    }
}
impl INSData for NSData {}
pub trait INSData: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDate(pub id);
impl std::ops::Deref for NSDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDate {}
impl NSDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDate), alloc) })
    }
}
impl INSDate for NSDate {}
pub trait INSDate: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSTimeZone(pub id);
impl std::ops::Deref for NSTimeZone {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimeZone {}
impl NSTimeZone {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSTimeZone), alloc) })
    }
}
impl INSTimeZone for NSTimeZone {}
pub trait INSTimeZone: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSDictionary(pub id);
impl std::ops::Deref for NSDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDictionary {}
impl NSDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSDictionary), alloc) })
    }
}
impl INSDictionary for NSDictionary {}
pub trait INSDictionary: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSError(pub id);
impl std::ops::Deref for NSError {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSError {}
impl NSError {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSError), alloc) })
    }
}
impl INSError for NSError {}
pub trait INSError: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSLocale(pub id);
impl std::ops::Deref for NSLocale {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLocale {}
impl NSLocale {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSLocale), alloc) })
    }
}
impl INSLocale for NSLocale {}
pub trait INSLocale: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSNumber(pub id);
impl std::ops::Deref for NSNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumber {}
impl NSNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSNumber), alloc) })
    }
}
impl INSNumber for NSNumber {}
pub trait INSNumber: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSSet(pub id);
impl std::ops::Deref for NSSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSet {}
impl NSSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSSet), alloc) })
    }
}
impl INSSet for NSSet {}
pub trait INSSet: Sized + std::ops::Deref {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone)]
pub struct NSURL(pub id);
impl std::ops::Deref for NSURL {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURL {}
impl NSURL {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(class!(NSURL), alloc) })
    }
}
impl INSURL for NSURL {}
pub trait INSURL: Sized + std::ops::Deref {}
extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult_kCFCompareLessThan: CFComparisonResult = -1;
pub const CFComparisonResult_kCFCompareEqualTo: CFComparisonResult = 0;
pub const CFComparisonResult_kCFCompareGreaterThan: CFComparisonResult = 1;
pub type CFComparisonResult = CFIndex;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, info: *mut ::std::os::raw::c_void),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}
extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFBagRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFBagReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFBagCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFBagEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFBagHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
extern "C" {
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}
extern "C" {
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}
pub type CFBagApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBag {
    _unused: [u8; 0],
}
pub type CFBagRef = *const __CFBag;
pub type CFMutableBagRef = *mut __CFBag;
extern "C" {
    pub fn CFBagGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theBag: CFBagRef,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
}
extern "C" {
    pub fn CFBagGetCountOfValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValue(
        theBag: CFBagRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBagGetValueIfPresent(
        theBag: CFBagRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValues(theBag: CFBagRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagApplyFunction(
        theBag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBagAddValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagSetValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: CFAllocatorRef,
            ptr: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(allocator: CFAllocatorRef, ptr: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            ptr1: *const ::std::os::raw::c_void,
            ptr2: *const ::std::os::raw::c_void,
            context: *mut ::std::os::raw::c_void,
        ) -> CFComparisonResult,
    >,
}
extern "C" {
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}
pub type CFBinaryHeapApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(val: *const ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBinaryHeap {
    _unused: [u8; 0],
}
pub type CFBinaryHeapRef = *mut __CFBinaryHeap;
extern "C" {
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBinaryHeapCallBacks,
        compareContext: *const CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapGetCountOfValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapContainsValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}
extern "C" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
pub type CFBit = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBitVector {
    _unused: [u8; 0],
}
pub type CFBitVectorRef = *const __CFBitVector;
pub type CFMutableBitVectorRef = *mut __CFBitVector;
extern "C" {
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        numBits: CFIndex,
    ) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}
extern "C" {
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}
extern "C" {
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut UInt8);
}
extern "C" {
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}
extern "C" {
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
pub const __CFByteOrder_CFByteOrderUnknown: __CFByteOrder = 0;
pub const __CFByteOrder_CFByteOrderLittleEndian: __CFByteOrder = 1;
pub const __CFByteOrder_CFByteOrderBigEndian: __CFByteOrder = 2;
pub type __CFByteOrder = ::std::os::raw::c_uint;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat32 {
    pub v: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSwappedFloat64 {
    pub v: u64,
}
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDrop:
    CFNotificationSuspensionBehavior = 1;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorCoalesce:
    CFNotificationSuspensionBehavior = 2;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorHold:
    CFNotificationSuspensionBehavior = 3;
pub const CFNotificationSuspensionBehavior_CFNotificationSuspensionBehaviorDeliverImmediately:
    CFNotificationSuspensionBehavior = 4;
pub type CFNotificationSuspensionBehavior = CFIndex;
extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: _bindgen_ty_50 = 1;
pub const kCFNotificationPostToAllSessions: _bindgen_ty_50 = 2;
pub type _bindgen_ty_50 = CFOptionFlags;
extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionUnknown: CFLocaleLanguageDirection =
    0;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionLeftToRight:
    CFLocaleLanguageDirection = 1;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionRightToLeft:
    CFLocaleLanguageDirection = 2;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionTopToBottom:
    CFLocaleLanguageDirection = 3;
pub const CFLocaleLanguageDirection_kCFLocaleLanguageDirectionBottomToTop:
    CFLocaleLanguageDirection = 4;
pub type CFLocaleLanguageDirection = CFIndex;
extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
}
extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) -> CFDateRef;
}
extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
pub const CFGregorianUnitFlags_kCFGregorianUnitsYears: CFGregorianUnitFlags = 1;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMonths: CFGregorianUnitFlags = 2;
pub const CFGregorianUnitFlags_kCFGregorianUnitsDays: CFGregorianUnitFlags = 4;
pub const CFGregorianUnitFlags_kCFGregorianUnitsHours: CFGregorianUnitFlags = 8;
pub const CFGregorianUnitFlags_kCFGregorianUnitsMinutes: CFGregorianUnitFlags = 16;
pub const CFGregorianUnitFlags_kCFGregorianUnitsSeconds: CFGregorianUnitFlags = 32;
pub const CFGregorianUnitFlags_kCFGregorianAllUnits: CFGregorianUnitFlags = 16777215;
pub type CFGregorianUnitFlags = CFOptionFlags;
extern "C" {
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) -> Boolean;
}
extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef)
        -> CFGregorianDate;
}
extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
extern "C" {
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: *mut UInt8);
}
extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
extern "C" {
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex);
}
extern "C" {
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8, length: CFIndex);
}
extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub const CFDataSearchFlags_kCFDataSearchBackwards: CFDataSearchFlags = 1;
pub const CFDataSearchFlags_kCFDataSearchAnchored: CFDataSearchFlags = 2;
pub type CFDataSearchFlags = CFOptionFlags;
extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetControl: CFCharacterSetPredefinedSet = 1;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespace: CFCharacterSetPredefinedSet = 2;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetWhitespaceAndNewline:
    CFCharacterSetPredefinedSet = 3;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecimalDigit: CFCharacterSetPredefinedSet = 4;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLetter: CFCharacterSetPredefinedSet = 5;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetLowercaseLetter: CFCharacterSetPredefinedSet =
    6;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetUppercaseLetter: CFCharacterSetPredefinedSet =
    7;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNonBase: CFCharacterSetPredefinedSet = 8;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetDecomposable: CFCharacterSetPredefinedSet = 9;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetAlphaNumeric: CFCharacterSetPredefinedSet = 10;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetPunctuation: CFCharacterSetPredefinedSet = 11;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetCapitalizedLetter:
    CFCharacterSetPredefinedSet = 13;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetSymbol: CFCharacterSetPredefinedSet = 14;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetNewline: CFCharacterSetPredefinedSet = 15;
pub const CFCharacterSetPredefinedSet_kCFCharacterSetIllegal: CFCharacterSetPredefinedSet = 12;
pub type CFCharacterSetPredefinedSet = CFIndex;
extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange);
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef);
}
extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
pub type CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings_kCFStringEncodingMacRoman: CFStringBuiltInEncodings = 0;
pub const CFStringBuiltInEncodings_kCFStringEncodingWindowsLatin1: CFStringBuiltInEncodings = 1280;
pub const CFStringBuiltInEncodings_kCFStringEncodingISOLatin1: CFStringBuiltInEncodings = 513;
pub const CFStringBuiltInEncodings_kCFStringEncodingNextStepLatin: CFStringBuiltInEncodings = 2817;
pub const CFStringBuiltInEncodings_kCFStringEncodingASCII: CFStringBuiltInEncodings = 1536;
pub const CFStringBuiltInEncodings_kCFStringEncodingUnicode: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF8: CFStringBuiltInEncodings = 134217984;
pub const CFStringBuiltInEncodings_kCFStringEncodingNonLossyASCII: CFStringBuiltInEncodings = 3071;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16: CFStringBuiltInEncodings = 256;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16BE: CFStringBuiltInEncodings = 268435712;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF16LE: CFStringBuiltInEncodings = 335544576;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32: CFStringBuiltInEncodings = 201326848;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32BE: CFStringBuiltInEncodings = 402653440;
pub const CFStringBuiltInEncodings_kCFStringEncodingUTF32LE: CFStringBuiltInEncodings = 469762304;
pub type CFStringBuiltInEncodings = CFStringEncoding;
extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        errorPtr: *mut CFErrorRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateStringWithValidatedFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        validFormatSpecifiers: CFStringRef,
        format: CFStringRef,
        arguments: va_list,
        errorPtr: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) -> UniChar;
}
extern "C" {
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: *mut UniChar);
}
extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetFastestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub const CFStringCompareFlags_kCFCompareCaseInsensitive: CFStringCompareFlags = 1;
pub const CFStringCompareFlags_kCFCompareBackwards: CFStringCompareFlags = 4;
pub const CFStringCompareFlags_kCFCompareAnchored: CFStringCompareFlags = 8;
pub const CFStringCompareFlags_kCFCompareNonliteral: CFStringCompareFlags = 16;
pub const CFStringCompareFlags_kCFCompareLocalized: CFStringCompareFlags = 32;
pub const CFStringCompareFlags_kCFCompareNumerically: CFStringCompareFlags = 64;
pub const CFStringCompareFlags_kCFCompareDiacriticInsensitive: CFStringCompareFlags = 128;
pub const CFStringCompareFlags_kCFCompareWidthInsensitive: CFStringCompareFlags = 256;
pub const CFStringCompareFlags_kCFCompareForcedOrdering: CFStringCompareFlags = 512;
pub type CFStringCompareFlags = CFOptionFlags;
extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
extern "C" {
    pub fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef);
}
extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: va_list,
    );
}
extern "C" {
    pub fn CFStringInsert(str_: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef);
}
extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
extern "C" {
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
extern "C" {
    pub fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef);
}
pub const CFStringNormalizationForm_kCFStringNormalizationFormD: CFStringNormalizationForm = 0;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKD: CFStringNormalizationForm = 1;
pub const CFStringNormalizationForm_kCFStringNormalizationFormC: CFStringNormalizationForm = 2;
pub const CFStringNormalizationForm_kCFStringNormalizationFormKC: CFStringNormalizationForm = 3;
pub type CFStringNormalizationForm = CFIndex;
extern "C" {
    pub fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm);
}
extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) -> UInt32;
}
extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
extern "C" {
    pub fn __CFStringMakeConstantString(cStr: *const ::std::os::raw::c_char) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneResetSystem();
}
extern "C" {
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}
extern "C" {
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}
extern "C" {
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        tryAbbrev: Boolean,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}
extern "C" {
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}
extern "C" {
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleStandard: CFTimeZoneNameStyle = 0;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortStandard: CFTimeZoneNameStyle = 1;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleDaylightSaving: CFTimeZoneNameStyle = 2;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortDaylightSaving: CFTimeZoneNameStyle = 3;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleGeneric: CFTimeZoneNameStyle = 4;
pub const CFTimeZoneNameStyle_kCFTimeZoneNameStyleShortGeneric: CFTimeZoneNameStyle = 5;
pub type CFTimeZoneNameStyle = CFIndex;
extern "C" {
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCalendar {
    _unused: [u8; 0],
}
pub type CFCalendarRef = *mut __CFCalendar;
extern "C" {
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
}
extern "C" {
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
}
extern "C" {
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
}
pub const CFCalendarUnit_kCFCalendarUnitEra: CFCalendarUnit = 2;
pub const CFCalendarUnit_kCFCalendarUnitYear: CFCalendarUnit = 4;
pub const CFCalendarUnit_kCFCalendarUnitMonth: CFCalendarUnit = 8;
pub const CFCalendarUnit_kCFCalendarUnitDay: CFCalendarUnit = 16;
pub const CFCalendarUnit_kCFCalendarUnitHour: CFCalendarUnit = 32;
pub const CFCalendarUnit_kCFCalendarUnitMinute: CFCalendarUnit = 64;
pub const CFCalendarUnit_kCFCalendarUnitSecond: CFCalendarUnit = 128;
pub const CFCalendarUnit_kCFCalendarUnitWeek: CFCalendarUnit = 256;
pub const CFCalendarUnit_kCFCalendarUnitWeekday: CFCalendarUnit = 512;
pub const CFCalendarUnit_kCFCalendarUnitWeekdayOrdinal: CFCalendarUnit = 1024;
pub const CFCalendarUnit_kCFCalendarUnitQuarter: CFCalendarUnit = 2048;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfMonth: CFCalendarUnit = 4096;
pub const CFCalendarUnit_kCFCalendarUnitWeekOfYear: CFCalendarUnit = 8192;
pub const CFCalendarUnit_kCFCalendarUnitYearForWeekOfYear: CFCalendarUnit = 16384;
pub type CFCalendarUnit = CFOptionFlags;
extern "C" {
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarComposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarDecomposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub const kCFCalendarComponentsWrap: _bindgen_ty_51 = 1;
pub type _bindgen_ty_51 = CFOptionFlags;
extern "C" {
    pub fn CFCalendarAddComponents(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarGetComponentDifference(
        calendar: CFCalendarRef,
        startingAT: CFAbsoluteTime,
        resultAT: CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub type CGFloat = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPoint {
    pub x: CGFloat,
    pub y: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGSize {
    pub width: CGFloat,
    pub height: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGVector {
    pub dx: CGFloat,
    pub dy: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGRect {
    pub origin: CGPoint,
    pub size: CGSize,
}
pub const CGRectEdge_CGRectMinXEdge: CGRectEdge = 0;
pub const CGRectEdge_CGRectMinYEdge: CGRectEdge = 1;
pub const CGRectEdge_CGRectMaxXEdge: CGRectEdge = 2;
pub const CGRectEdge_CGRectMaxYEdge: CGRectEdge = 3;
pub type CGRectEdge = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransform {
    pub a: CGFloat,
    pub b: CGFloat,
    pub c: CGFloat,
    pub d: CGFloat,
    pub tx: CGFloat,
    pub ty: CGFloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGAffineTransformComponents {
    pub scale: CGSize,
    pub horizontalShear: CGFloat,
    pub rotation: CGFloat,
    pub translation: CGVector,
}
pub type CFDateFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDateFormatter {
    _unused: [u8; 0],
}
pub type CFDateFormatterRef = *mut __CFDateFormatter;
extern "C" {
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}
pub const CFDateFormatterStyle_kCFDateFormatterNoStyle: CFDateFormatterStyle = 0;
pub const CFDateFormatterStyle_kCFDateFormatterShortStyle: CFDateFormatterStyle = 1;
pub const CFDateFormatterStyle_kCFDateFormatterMediumStyle: CFDateFormatterStyle = 2;
pub const CFDateFormatterStyle_kCFDateFormatterLongStyle: CFDateFormatterStyle = 3;
pub const CFDateFormatterStyle_kCFDateFormatterFullStyle: CFDateFormatterStyle = 4;
pub type CFDateFormatterStyle = CFIndex;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithYear: CFISO8601DateFormatOptions = 1;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithMonth: CFISO8601DateFormatOptions = 2;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithWeekOfYear:
    CFISO8601DateFormatOptions = 4;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDay: CFISO8601DateFormatOptions = 16;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTime: CFISO8601DateFormatOptions = 32;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithTimeZone: CFISO8601DateFormatOptions =
    64;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithSpaceBetweenDateAndTime:
    CFISO8601DateFormatOptions = 128;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithDashSeparatorInDate:
    CFISO8601DateFormatOptions = 256;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTime:
    CFISO8601DateFormatOptions = 512;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithColonSeparatorInTimeZone:
    CFISO8601DateFormatOptions = 1024;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFractionalSeconds:
    CFISO8601DateFormatOptions = 2048;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullDate: CFISO8601DateFormatOptions =
    275;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithFullTime: CFISO8601DateFormatOptions =
    1632;
pub const CFISO8601DateFormatOptions_kCFISO8601DateFormatWithInternetDateTime:
    CFISO8601DateFormatOptions = 1907;
pub type CFISO8601DateFormatOptions = CFOptionFlags;
extern "C" {
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        formatOptions: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        dateStyle: CFDateFormatterStyle,
        timeStyle: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}
extern "C" {
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBoolean {
    _unused: [u8; 0],
}
pub type CFBooleanRef = *const __CFBoolean;
extern "C" {
    pub static kCFBooleanTrue: CFBooleanRef;
}
extern "C" {
    pub static kCFBooleanFalse: CFBooleanRef;
}
extern "C" {
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}
pub const CFNumberType_kCFNumberSInt8Type: CFNumberType = 1;
pub const CFNumberType_kCFNumberSInt16Type: CFNumberType = 2;
pub const CFNumberType_kCFNumberSInt32Type: CFNumberType = 3;
pub const CFNumberType_kCFNumberSInt64Type: CFNumberType = 4;
pub const CFNumberType_kCFNumberFloat32Type: CFNumberType = 5;
pub const CFNumberType_kCFNumberFloat64Type: CFNumberType = 6;
pub const CFNumberType_kCFNumberCharType: CFNumberType = 7;
pub const CFNumberType_kCFNumberShortType: CFNumberType = 8;
pub const CFNumberType_kCFNumberIntType: CFNumberType = 9;
pub const CFNumberType_kCFNumberLongType: CFNumberType = 10;
pub const CFNumberType_kCFNumberLongLongType: CFNumberType = 11;
pub const CFNumberType_kCFNumberFloatType: CFNumberType = 12;
pub const CFNumberType_kCFNumberDoubleType: CFNumberType = 13;
pub const CFNumberType_kCFNumberCFIndexType: CFNumberType = 14;
pub const CFNumberType_kCFNumberNSIntegerType: CFNumberType = 15;
pub const CFNumberType_kCFNumberCGFloatType: CFNumberType = 16;
pub const CFNumberType_kCFNumberMaxType: CFNumberType = 16;
pub type CFNumberType = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumber {
    _unused: [u8; 0],
}
pub type CFNumberRef = *const __CFNumber;
extern "C" {
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNaN: CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        theType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}
extern "C" {
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}
extern "C" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}
extern "C" {
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        theType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberCompare(
        number: CFNumberRef,
        otherNumber: CFNumberRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
pub type CFNumberFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumberFormatter {
    _unused: [u8; 0],
}
pub type CFNumberFormatterRef = *mut __CFNumberFormatter;
extern "C" {
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}
pub const CFNumberFormatterStyle_kCFNumberFormatterNoStyle: CFNumberFormatterStyle = 0;
pub const CFNumberFormatterStyle_kCFNumberFormatterDecimalStyle: CFNumberFormatterStyle = 1;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyStyle: CFNumberFormatterStyle = 2;
pub const CFNumberFormatterStyle_kCFNumberFormatterPercentStyle: CFNumberFormatterStyle = 3;
pub const CFNumberFormatterStyle_kCFNumberFormatterScientificStyle: CFNumberFormatterStyle = 4;
pub const CFNumberFormatterStyle_kCFNumberFormatterSpellOutStyle: CFNumberFormatterStyle = 5;
pub const CFNumberFormatterStyle_kCFNumberFormatterOrdinalStyle: CFNumberFormatterStyle = 6;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyISOCodeStyle: CFNumberFormatterStyle = 8;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyPluralStyle: CFNumberFormatterStyle = 9;
pub const CFNumberFormatterStyle_kCFNumberFormatterCurrencyAccountingStyle: CFNumberFormatterStyle =
    10;
pub type CFNumberFormatterStyle = CFIndex;
extern "C" {
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}
extern "C" {
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}
extern "C" {
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        numberType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub const CFNumberFormatterOptionFlags_kCFNumberFormatterParseIntegersOnly:
    CFNumberFormatterOptionFlags = 1;
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
extern "C" {
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        numberType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundCeiling:
    CFNumberFormatterRoundingMode = 0;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundFloor:
    CFNumberFormatterRoundingMode = 1;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundDown: CFNumberFormatterRoundingMode =
    2;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundUp: CFNumberFormatterRoundingMode =
    3;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfEven:
    CFNumberFormatterRoundingMode = 4;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfDown:
    CFNumberFormatterRoundingMode = 5;
pub const CFNumberFormatterRoundingMode_kCFNumberFormatterRoundHalfUp:
    CFNumberFormatterRoundingMode = 6;
pub type CFNumberFormatterRoundingMode = CFIndex;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforePrefix:
    CFNumberFormatterPadPosition = 0;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterPrefix:
    CFNumberFormatterPadPosition = 1;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadBeforeSuffix:
    CFNumberFormatterPadPosition = 2;
pub const CFNumberFormatterPadPosition_kCFNumberFormatterPadAfterSuffix:
    CFNumberFormatterPadPosition = 3;
pub type CFNumberFormatterPadPosition = CFIndex;
extern "C" {
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currencyCode: CFStringRef,
        defaultFractionDigits: *mut i32,
        roundingIncrement: *mut f64,
    ) -> Boolean;
}
extern "C" {
    pub static kCFPreferencesAnyApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyUser: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentUser: CFStringRef;
}
extern "C" {
    pub fn CFPreferencesCopyAppValue(
        key: CFStringRef,
        applicationID: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesGetAppBooleanValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesGetAppIntegerValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPreferencesSetAppValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef);
}
extern "C" {
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        applicationID: CFStringRef,
        suiteID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFPreferencesSetValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSynchronize(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyApplicationList(
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesCopyKeyList(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) -> Boolean;
}
pub const CFURLPathStyle_kCFURLPOSIXPathStyle: CFURLPathStyle = 0;
pub const CFURLPathStyle_kCFURLHFSPathStyle: CFURLPathStyle = 1;
pub const CFURLPathStyle_kCFURLWindowsPathStyle: CFURLPathStyle = 2;
pub type CFURLPathStyle = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURL {
    _unused: [u8; 0],
}
pub type CFURLRef = *const __CFURL;
extern "C" {
    pub fn CFURLGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        URLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escapeWhitespace: Boolean,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        URLString: CFStringRef,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relativeURLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
        useCompatibilityMode: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolveAgainstBase: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) -> CFStringRef;
}
extern "C" {
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
}
extern "C" {
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyParameterString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyQueryString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef)
        -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        pathComponent: CFStringRef,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8, bufferLength: CFIndex) -> CFIndex;
}
pub const CFURLComponentType_kCFURLComponentScheme: CFURLComponentType = 1;
pub const CFURLComponentType_kCFURLComponentNetLocation: CFURLComponentType = 2;
pub const CFURLComponentType_kCFURLComponentPath: CFURLComponentType = 3;
pub const CFURLComponentType_kCFURLComponentResourceSpecifier: CFURLComponentType = 4;
pub const CFURLComponentType_kCFURLComponentUser: CFURLComponentType = 5;
pub const CFURLComponentType_kCFURLComponentPassword: CFURLComponentType = 6;
pub const CFURLComponentType_kCFURLComponentUserInfo: CFURLComponentType = 7;
pub const CFURLComponentType_kCFURLComponentHost: CFURLComponentType = 8;
pub const CFURLComponentType_kCFURLComponentPort: CFURLComponentType = 9;
pub const CFURLComponentType_kCFURLComponentParameterString: CFURLComponentType = 10;
pub const CFURLComponentType_kCFURLComponentQuery: CFURLComponentType = 11;
pub const CFURLComponentType_kCFURLComponentFragment: CFURLComponentType = 12;
pub type CFURLComponentType = CFIndex;
extern "C" {
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        rangeIncludingSeparators: *mut CFRange,
    ) -> CFRange;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        origString: CFStringRef,
        charsToLeaveEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveUnescaped: CFStringRef,
        legalURLCharactersToBeEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSRef {
    _unused: [u8; 0],
}
extern "C" {
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: *const FSRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut FSRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValueTypeRefPtr: *mut ::std::os::raw::c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyedPropertyValues: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}
extern "C" {
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}
extern "C" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}
extern "C" {
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
    );
}
extern "C" {
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub static kCFURLNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsDirectoryKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsVolumeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPackageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsApplicationKey: CFStringRef;
}
extern "C" {
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsHiddenKey: CFStringRef;
}
extern "C" {
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentAccessDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPurgeableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSparseKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLinkCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelNumberKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelColorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}
extern "C" {
    pub static kCFURLEffectiveIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCustomIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsReadableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsWritableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTagNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCanonicalPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}
extern "C" {
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsAliasFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionNone: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionComplete: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationMinimalBookmarkMask:
    CFURLBookmarkCreationOptions = 512;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSuitableForBookmarkFile:
    CFURLBookmarkCreationOptions = 1024;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithSecurityScope:
    CFURLBookmarkCreationOptions = 2048;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    CFURLBookmarkCreationOptions = 4096;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationWithoutImplicitSecurityScope:
    CFURLBookmarkCreationOptions = 536870912;
pub const CFURLBookmarkCreationOptions_kCFURLBookmarkCreationPreferFileIDResolutionMask:
    CFURLBookmarkCreationOptions = 256;
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithSecurityScope:
    CFURLBookmarkResolutionOptions = 1024;
pub const CFURLBookmarkResolutionOptions_kCFURLBookmarkResolutionWithoutImplicitStartAccessing:
    CFURLBookmarkResolutionOptions = 32768;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutUIMask:
    CFURLBookmarkResolutionOptions = 256;
pub const CFURLBookmarkResolutionOptions_kCFBookmarkResolutionWithoutMountingMask:
    CFURLBookmarkResolutionOptions = 512;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resourcePropertiesToInclude: CFArrayRef,
        relativeToURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relativeToURL: CFURLRef,
        resourcePropertiesToInclude: CFArrayRef,
        isStale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertiesToReturn: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertyKey: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        fileURL: CFURLRef,
        errorRef: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLWriteBookmarkDataToFile(
        bookmarkRef: CFDataRef,
        fileURL: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        errorRef: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocatorRef: CFAllocatorRef,
        aliasRecordDataRef: CFDataRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub const CFRunLoopRunResult_kCFRunLoopRunFinished: CFRunLoopRunResult = 1;
pub const CFRunLoopRunResult_kCFRunLoopRunStopped: CFRunLoopRunResult = 2;
pub const CFRunLoopRunResult_kCFRunLoopRunTimedOut: CFRunLoopRunResult = 3;
pub const CFRunLoopRunResult_kCFRunLoopRunHandledSource: CFRunLoopRunResult = 4;
pub type CFRunLoopRunResult = SInt32;
pub const CFRunLoopActivity_kCFRunLoopEntry: CFRunLoopActivity = 1;
pub const CFRunLoopActivity_kCFRunLoopBeforeTimers: CFRunLoopActivity = 2;
pub const CFRunLoopActivity_kCFRunLoopBeforeSources: CFRunLoopActivity = 4;
pub const CFRunLoopActivity_kCFRunLoopBeforeWaiting: CFRunLoopActivity = 32;
pub const CFRunLoopActivity_kCFRunLoopAfterWaiting: CFRunLoopActivity = 64;
pub const CFRunLoopActivity_kCFRunLoopExit: CFRunLoopActivity = 128;
pub const CFRunLoopActivity_kCFRunLoopAllActivities: CFRunLoopActivity = 268435455;
pub type CFRunLoopActivity = CFOptionFlags;
extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopRun();
}
extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(timer: CFRunLoopTimerRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime);
}
extern "C" {
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: *mut CFRunLoopTimerContext);
}
extern "C" {
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSocket {
    _unused: [u8; 0],
}
pub type CFSocketRef = *mut __CFSocket;
pub const CFSocketError_kCFSocketSuccess: CFSocketError = 0;
pub const CFSocketError_kCFSocketError: CFSocketError = -1;
pub const CFSocketError_kCFSocketTimeout: CFSocketError = -2;
pub type CFSocketError = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketSignature {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
pub const CFSocketCallBackType_kCFSocketNoCallBack: CFSocketCallBackType = 0;
pub const CFSocketCallBackType_kCFSocketReadCallBack: CFSocketCallBackType = 1;
pub const CFSocketCallBackType_kCFSocketAcceptCallBack: CFSocketCallBackType = 2;
pub const CFSocketCallBackType_kCFSocketDataCallBack: CFSocketCallBackType = 3;
pub const CFSocketCallBackType_kCFSocketConnectCallBack: CFSocketCallBackType = 4;
pub const CFSocketCallBackType_kCFSocketWriteCallBack: CFSocketCallBackType = 8;
pub type CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketAutomaticallyReenableReadCallBack: _bindgen_ty_52 = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: _bindgen_ty_52 = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: _bindgen_ty_52 = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: _bindgen_ty_52 = 8;
pub const kCFSocketLeaveErrors: _bindgen_ty_52 = 64;
pub const kCFSocketCloseOnInvalidate: _bindgen_ty_52 = 128;
pub type _bindgen_ty_52 = CFOptionFlags;
pub type CFSocketCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        s: CFSocketRef,
        type_: CFSocketCallBackType,
        address: CFDataRef,
        data: *const ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFSocketNativeHandle = ::std::os::raw::c_int;
extern "C" {
    pub fn CFSocketGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocolFamily: SInt32,
        socketType: SInt32,
        protocol: SInt32,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketInvalidate(s: CFSocketRef);
}
extern "C" {
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
}
extern "C" {
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
}
extern "C" {
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
}
extern "C" {
    pub fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *const CFSocketSignature,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketUnregister(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
extern "C" {
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
extern "C" {
    pub static kCFSocketCommandKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketNameKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketValueKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketResultKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketRegisterCommand: CFStringRef;
}
extern "C" {
    pub static kCFSocketRetrieveCommand: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamError {
    pub domain: CFIndex,
    pub error: SInt32,
}
pub type CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus_kCFStreamStatusNotOpen: CFStreamStatus = 0;
pub const CFStreamStatus_kCFStreamStatusOpening: CFStreamStatus = 1;
pub const CFStreamStatus_kCFStreamStatusOpen: CFStreamStatus = 2;
pub const CFStreamStatus_kCFStreamStatusReading: CFStreamStatus = 3;
pub const CFStreamStatus_kCFStreamStatusWriting: CFStreamStatus = 4;
pub const CFStreamStatus_kCFStreamStatusAtEnd: CFStreamStatus = 5;
pub const CFStreamStatus_kCFStreamStatusClosed: CFStreamStatus = 6;
pub const CFStreamStatus_kCFStreamStatusError: CFStreamStatus = 7;
pub type CFStreamStatus = CFIndex;
pub const CFStreamEventType_kCFStreamEventNone: CFStreamEventType = 0;
pub const CFStreamEventType_kCFStreamEventOpenCompleted: CFStreamEventType = 1;
pub const CFStreamEventType_kCFStreamEventHasBytesAvailable: CFStreamEventType = 2;
pub const CFStreamEventType_kCFStreamEventCanAcceptBytes: CFStreamEventType = 4;
pub const CFStreamEventType_kCFStreamEventErrorOccurred: CFStreamEventType = 8;
pub const CFStreamEventType_kCFStreamEventEndEncountered: CFStreamEventType = 16;
pub type CFStreamEventType = CFOptionFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
pub type CFReadStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFReadStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFWriteStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFWriteStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static mut kCFStreamPropertyDataWritten: CFStreamPropertyKey;
}
extern "C" {
    pub fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut UInt8,
        bufferCapacity: CFIndex,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        bufferAllocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        fileURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
        transferBufferSize: CFIndex,
    );
}
extern "C" {
    pub static mut kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
}
extern "C" {
    pub static kCFStreamErrorDomainSOCKS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxy: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyHost: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyPort: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSVersion: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion4: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion5: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSUser: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSPassword: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainSSL: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySocketSecurityLevel: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNone: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
}
extern "C" {
    pub fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: UInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *const CFSocketSignature,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamClose(stream: CFReadStreamRef);
}
extern "C" {
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef);
}
extern "C" {
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        maxBytesToRead: CFIndex,
        numBytesRead: *mut CFIndex,
    ) -> *const UInt8;
}
extern "C" {
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFReadStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFWriteStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: NSObject);
}
extern "C" {
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: NSObject);
}
extern "C" {
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) -> dispatch_queue_t;
}
extern "C" {
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) -> dispatch_queue_t;
}
pub const CFStreamErrorDomain_kCFStreamErrorDomainCustom: CFStreamErrorDomain = -1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainPOSIX: CFStreamErrorDomain = 1;
pub const CFStreamErrorDomain_kCFStreamErrorDomainMacOSStatus: CFStreamErrorDomain = 2;
pub type CFStreamErrorDomain = CFIndex;
extern "C" {
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
}
extern "C" {
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
}
pub const CFPropertyListMutabilityOptions_kCFPropertyListImmutable:
    CFPropertyListMutabilityOptions = 0;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainers:
    CFPropertyListMutabilityOptions = 1;
pub const CFPropertyListMutabilityOptions_kCFPropertyListMutableContainersAndLeaves:
    CFPropertyListMutabilityOptions = 2;
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
extern "C" {
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        mutabilityOption: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        mutabilityOption: CFOptionFlags,
    ) -> CFPropertyListRef;
}
pub const CFPropertyListFormat_kCFPropertyListOpenStepFormat: CFPropertyListFormat = 1;
pub const CFPropertyListFormat_kCFPropertyListXMLFormat_v1_0: CFPropertyListFormat = 100;
pub const CFPropertyListFormat_kCFPropertyListBinaryFormat_v1_0: CFPropertyListFormat = 200;
pub type CFPropertyListFormat = CFIndex;
extern "C" {
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}
extern "C" {
    pub fn CFPropertyListWriteToStream(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        mutabilityOption: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
pub const kCFPropertyListReadCorruptError: _bindgen_ty_53 = 3840;
pub const kCFPropertyListReadUnknownVersionError: _bindgen_ty_53 = 3841;
pub const kCFPropertyListReadStreamError: _bindgen_ty_53 = 3842;
pub const kCFPropertyListWriteStreamError: _bindgen_ty_53 = 3851;
pub type _bindgen_ty_53 = CFIndex;
extern "C" {
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListWrite(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type CFSetRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFSetReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFSetCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFSetEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFSetHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
extern "C" {
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}
extern "C" {
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}
pub type CFSetApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSet {
    _unused: [u8; 0],
}
pub type CFSetRef = *const __CFSet;
pub type CFMutableSetRef = *mut __CFSet;
extern "C" {
    pub fn CFSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theSet: CFSetRef,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
}
extern "C" {
    pub fn CFSetGetCountOfValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValue(
        theSet: CFSetRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFSetGetValueIfPresent(
        theSet: CFSetRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValues(theSet: CFSetRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetApplyFunction(
        theSet: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFSetAddValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetSetValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef);
}
pub const CFStringEncodings_kCFStringEncodingMacJapanese: CFStringEncodings = 1;
pub const CFStringEncodings_kCFStringEncodingMacChineseTrad: CFStringEncodings = 2;
pub const CFStringEncodings_kCFStringEncodingMacKorean: CFStringEncodings = 3;
pub const CFStringEncodings_kCFStringEncodingMacArabic: CFStringEncodings = 4;
pub const CFStringEncodings_kCFStringEncodingMacHebrew: CFStringEncodings = 5;
pub const CFStringEncodings_kCFStringEncodingMacGreek: CFStringEncodings = 6;
pub const CFStringEncodings_kCFStringEncodingMacCyrillic: CFStringEncodings = 7;
pub const CFStringEncodings_kCFStringEncodingMacDevanagari: CFStringEncodings = 9;
pub const CFStringEncodings_kCFStringEncodingMacGurmukhi: CFStringEncodings = 10;
pub const CFStringEncodings_kCFStringEncodingMacGujarati: CFStringEncodings = 11;
pub const CFStringEncodings_kCFStringEncodingMacOriya: CFStringEncodings = 12;
pub const CFStringEncodings_kCFStringEncodingMacBengali: CFStringEncodings = 13;
pub const CFStringEncodings_kCFStringEncodingMacTamil: CFStringEncodings = 14;
pub const CFStringEncodings_kCFStringEncodingMacTelugu: CFStringEncodings = 15;
pub const CFStringEncodings_kCFStringEncodingMacKannada: CFStringEncodings = 16;
pub const CFStringEncodings_kCFStringEncodingMacMalayalam: CFStringEncodings = 17;
pub const CFStringEncodings_kCFStringEncodingMacSinhalese: CFStringEncodings = 18;
pub const CFStringEncodings_kCFStringEncodingMacBurmese: CFStringEncodings = 19;
pub const CFStringEncodings_kCFStringEncodingMacKhmer: CFStringEncodings = 20;
pub const CFStringEncodings_kCFStringEncodingMacThai: CFStringEncodings = 21;
pub const CFStringEncodings_kCFStringEncodingMacLaotian: CFStringEncodings = 22;
pub const CFStringEncodings_kCFStringEncodingMacGeorgian: CFStringEncodings = 23;
pub const CFStringEncodings_kCFStringEncodingMacArmenian: CFStringEncodings = 24;
pub const CFStringEncodings_kCFStringEncodingMacChineseSimp: CFStringEncodings = 25;
pub const CFStringEncodings_kCFStringEncodingMacTibetan: CFStringEncodings = 26;
pub const CFStringEncodings_kCFStringEncodingMacMongolian: CFStringEncodings = 27;
pub const CFStringEncodings_kCFStringEncodingMacEthiopic: CFStringEncodings = 28;
pub const CFStringEncodings_kCFStringEncodingMacCentralEurRoman: CFStringEncodings = 29;
pub const CFStringEncodings_kCFStringEncodingMacVietnamese: CFStringEncodings = 30;
pub const CFStringEncodings_kCFStringEncodingMacExtArabic: CFStringEncodings = 31;
pub const CFStringEncodings_kCFStringEncodingMacSymbol: CFStringEncodings = 33;
pub const CFStringEncodings_kCFStringEncodingMacDingbats: CFStringEncodings = 34;
pub const CFStringEncodings_kCFStringEncodingMacTurkish: CFStringEncodings = 35;
pub const CFStringEncodings_kCFStringEncodingMacCroatian: CFStringEncodings = 36;
pub const CFStringEncodings_kCFStringEncodingMacIcelandic: CFStringEncodings = 37;
pub const CFStringEncodings_kCFStringEncodingMacRomanian: CFStringEncodings = 38;
pub const CFStringEncodings_kCFStringEncodingMacCeltic: CFStringEncodings = 39;
pub const CFStringEncodings_kCFStringEncodingMacGaelic: CFStringEncodings = 40;
pub const CFStringEncodings_kCFStringEncodingMacFarsi: CFStringEncodings = 140;
pub const CFStringEncodings_kCFStringEncodingMacUkrainian: CFStringEncodings = 152;
pub const CFStringEncodings_kCFStringEncodingMacInuit: CFStringEncodings = 236;
pub const CFStringEncodings_kCFStringEncodingMacVT100: CFStringEncodings = 252;
pub const CFStringEncodings_kCFStringEncodingMacHFS: CFStringEncodings = 255;
pub const CFStringEncodings_kCFStringEncodingISOLatin2: CFStringEncodings = 514;
pub const CFStringEncodings_kCFStringEncodingISOLatin3: CFStringEncodings = 515;
pub const CFStringEncodings_kCFStringEncodingISOLatin4: CFStringEncodings = 516;
pub const CFStringEncodings_kCFStringEncodingISOLatinCyrillic: CFStringEncodings = 517;
pub const CFStringEncodings_kCFStringEncodingISOLatinArabic: CFStringEncodings = 518;
pub const CFStringEncodings_kCFStringEncodingISOLatinGreek: CFStringEncodings = 519;
pub const CFStringEncodings_kCFStringEncodingISOLatinHebrew: CFStringEncodings = 520;
pub const CFStringEncodings_kCFStringEncodingISOLatin5: CFStringEncodings = 521;
pub const CFStringEncodings_kCFStringEncodingISOLatin6: CFStringEncodings = 522;
pub const CFStringEncodings_kCFStringEncodingISOLatinThai: CFStringEncodings = 523;
pub const CFStringEncodings_kCFStringEncodingISOLatin7: CFStringEncodings = 525;
pub const CFStringEncodings_kCFStringEncodingISOLatin8: CFStringEncodings = 526;
pub const CFStringEncodings_kCFStringEncodingISOLatin9: CFStringEncodings = 527;
pub const CFStringEncodings_kCFStringEncodingISOLatin10: CFStringEncodings = 528;
pub const CFStringEncodings_kCFStringEncodingDOSLatinUS: CFStringEncodings = 1024;
pub const CFStringEncodings_kCFStringEncodingDOSGreek: CFStringEncodings = 1029;
pub const CFStringEncodings_kCFStringEncodingDOSBalticRim: CFStringEncodings = 1030;
pub const CFStringEncodings_kCFStringEncodingDOSLatin1: CFStringEncodings = 1040;
pub const CFStringEncodings_kCFStringEncodingDOSGreek1: CFStringEncodings = 1041;
pub const CFStringEncodings_kCFStringEncodingDOSLatin2: CFStringEncodings = 1042;
pub const CFStringEncodings_kCFStringEncodingDOSCyrillic: CFStringEncodings = 1043;
pub const CFStringEncodings_kCFStringEncodingDOSTurkish: CFStringEncodings = 1044;
pub const CFStringEncodings_kCFStringEncodingDOSPortuguese: CFStringEncodings = 1045;
pub const CFStringEncodings_kCFStringEncodingDOSIcelandic: CFStringEncodings = 1046;
pub const CFStringEncodings_kCFStringEncodingDOSHebrew: CFStringEncodings = 1047;
pub const CFStringEncodings_kCFStringEncodingDOSCanadianFrench: CFStringEncodings = 1048;
pub const CFStringEncodings_kCFStringEncodingDOSArabic: CFStringEncodings = 1049;
pub const CFStringEncodings_kCFStringEncodingDOSNordic: CFStringEncodings = 1050;
pub const CFStringEncodings_kCFStringEncodingDOSRussian: CFStringEncodings = 1051;
pub const CFStringEncodings_kCFStringEncodingDOSGreek2: CFStringEncodings = 1052;
pub const CFStringEncodings_kCFStringEncodingDOSThai: CFStringEncodings = 1053;
pub const CFStringEncodings_kCFStringEncodingDOSJapanese: CFStringEncodings = 1056;
pub const CFStringEncodings_kCFStringEncodingDOSChineseSimplif: CFStringEncodings = 1057;
pub const CFStringEncodings_kCFStringEncodingDOSKorean: CFStringEncodings = 1058;
pub const CFStringEncodings_kCFStringEncodingDOSChineseTrad: CFStringEncodings = 1059;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin2: CFStringEncodings = 1281;
pub const CFStringEncodings_kCFStringEncodingWindowsCyrillic: CFStringEncodings = 1282;
pub const CFStringEncodings_kCFStringEncodingWindowsGreek: CFStringEncodings = 1283;
pub const CFStringEncodings_kCFStringEncodingWindowsLatin5: CFStringEncodings = 1284;
pub const CFStringEncodings_kCFStringEncodingWindowsHebrew: CFStringEncodings = 1285;
pub const CFStringEncodings_kCFStringEncodingWindowsArabic: CFStringEncodings = 1286;
pub const CFStringEncodings_kCFStringEncodingWindowsBalticRim: CFStringEncodings = 1287;
pub const CFStringEncodings_kCFStringEncodingWindowsVietnamese: CFStringEncodings = 1288;
pub const CFStringEncodings_kCFStringEncodingWindowsKoreanJohab: CFStringEncodings = 1296;
pub const CFStringEncodings_kCFStringEncodingANSEL: CFStringEncodings = 1537;
pub const CFStringEncodings_kCFStringEncodingJIS_X0201_76: CFStringEncodings = 1568;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_83: CFStringEncodings = 1569;
pub const CFStringEncodings_kCFStringEncodingJIS_X0208_90: CFStringEncodings = 1570;
pub const CFStringEncodings_kCFStringEncodingJIS_X0212_90: CFStringEncodings = 1571;
pub const CFStringEncodings_kCFStringEncodingJIS_C6226_78: CFStringEncodings = 1572;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213: CFStringEncodings = 1576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_MenKuTen: CFStringEncodings = 1577;
pub const CFStringEncodings_kCFStringEncodingGB_2312_80: CFStringEncodings = 1584;
pub const CFStringEncodings_kCFStringEncodingGBK_95: CFStringEncodings = 1585;
pub const CFStringEncodings_kCFStringEncodingGB_18030_2000: CFStringEncodings = 1586;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_87: CFStringEncodings = 1600;
pub const CFStringEncodings_kCFStringEncodingKSC_5601_92_Johab: CFStringEncodings = 1601;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P1: CFStringEncodings = 1617;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P2: CFStringEncodings = 1618;
pub const CFStringEncodings_kCFStringEncodingCNS_11643_92_P3: CFStringEncodings = 1619;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP: CFStringEncodings = 2080;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_2: CFStringEncodings = 2081;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_1: CFStringEncodings = 2082;
pub const CFStringEncodings_kCFStringEncodingISO_2022_JP_3: CFStringEncodings = 2083;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN: CFStringEncodings = 2096;
pub const CFStringEncodings_kCFStringEncodingISO_2022_CN_EXT: CFStringEncodings = 2097;
pub const CFStringEncodings_kCFStringEncodingISO_2022_KR: CFStringEncodings = 2112;
pub const CFStringEncodings_kCFStringEncodingEUC_JP: CFStringEncodings = 2336;
pub const CFStringEncodings_kCFStringEncodingEUC_CN: CFStringEncodings = 2352;
pub const CFStringEncodings_kCFStringEncodingEUC_TW: CFStringEncodings = 2353;
pub const CFStringEncodings_kCFStringEncodingEUC_KR: CFStringEncodings = 2368;
pub const CFStringEncodings_kCFStringEncodingShiftJIS: CFStringEncodings = 2561;
pub const CFStringEncodings_kCFStringEncodingKOI8_R: CFStringEncodings = 2562;
pub const CFStringEncodings_kCFStringEncodingBig5: CFStringEncodings = 2563;
pub const CFStringEncodings_kCFStringEncodingMacRomanLatin1: CFStringEncodings = 2564;
pub const CFStringEncodings_kCFStringEncodingHZ_GB_2312: CFStringEncodings = 2565;
pub const CFStringEncodings_kCFStringEncodingBig5_HKSCS_1999: CFStringEncodings = 2566;
pub const CFStringEncodings_kCFStringEncodingVISCII: CFStringEncodings = 2567;
pub const CFStringEncodings_kCFStringEncodingKOI8_U: CFStringEncodings = 2568;
pub const CFStringEncodings_kCFStringEncodingBig5_E: CFStringEncodings = 2569;
pub const CFStringEncodings_kCFStringEncodingNextStepJapanese: CFStringEncodings = 2818;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_US: CFStringEncodings = 3073;
pub const CFStringEncodings_kCFStringEncodingEBCDIC_CP037: CFStringEncodings = 3074;
pub const CFStringEncodings_kCFStringEncodingUTF7: CFStringEncodings = 67109120;
pub const CFStringEncodings_kCFStringEncodingUTF7_IMAP: CFStringEncodings = 2576;
pub const CFStringEncodings_kCFStringEncodingShiftJIS_X0213_00: CFStringEncodings = 1576;
pub type CFStringEncodings = CFIndex;
pub type CFTreeRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
pub type CFTreeApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTree {
    _unused: [u8; 0],
}
pub type CFTreeRef = *mut __CFTree;
extern "C" {
    pub fn CFTreeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *const CFTreeContext) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}
extern "C" {
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}
extern "C" {
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}
extern "C" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext);
}
extern "C" {
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32) -> Boolean;
}
extern "C" {
    pub fn CFURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
pub const CFURLError_kCFURLUnknownError: CFURLError = -10;
pub const CFURLError_kCFURLUnknownSchemeError: CFURLError = -11;
pub const CFURLError_kCFURLResourceNotFoundError: CFURLError = -12;
pub const CFURLError_kCFURLResourceAccessViolationError: CFURLError = -13;
pub const CFURLError_kCFURLRemoteHostUnavailableError: CFURLError = -14;
pub const CFURLError_kCFURLImproperArgumentsError: CFURLError = -15;
pub const CFURLError_kCFURLUnknownPropertyKeyError: CFURLError = -16;
pub const CFURLError_kCFURLPropertyKeyUnavailableError: CFURLError = -17;
pub const CFURLError_kCFURLTimeoutError: CFURLError = -18;
pub type CFURLError = CFIndex;
extern "C" {
    pub static kCFURLFileExists: CFStringRef;
}
extern "C" {
    pub static kCFURLFileDirectoryContents: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLength: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLastModificationTime: CFStringRef;
}
extern "C" {
    pub static kCFURLFilePOSIXMode: CFStringRef;
}
extern "C" {
    pub static kCFURLFileOwnerID: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusCode: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusLine: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUUID {
    _unused: [u8; 0],
}
pub type CFUUIDRef = *const __CFUUID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFUUIDBytes {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
extern "C" {
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
}
extern "C" {
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
}
extern "C" {
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) -> CFUUIDRef;
}
extern "C" {
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBundle {
    _unused: [u8; 0],
}
pub type CFBundleRef = *mut __CFBundle;
pub type CFPlugInRef = *mut __CFBundle;
extern "C" {
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleNameKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleLocalizationsKey: CFStringRef;
}
extern "C" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directoryURL: CFURLRef,
        bundleType: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}
extern "C" {
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    );
}
extern "C" {
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
}
extern "C" {
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        tableName: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLInDirectory(
        bundleURL: CFURLRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundleURL: CFURLRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForPreferences(
        locArray: CFArrayRef,
        prefArray: CFArrayRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}
pub const kCFBundleExecutableArchitectureI386: _bindgen_ty_54 = 7;
pub const kCFBundleExecutableArchitecturePPC: _bindgen_ty_54 = 18;
pub const kCFBundleExecutableArchitectureX86_64: _bindgen_ty_54 = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: _bindgen_ty_54 = 16777234;
pub const kCFBundleExecutableArchitectureARM64: _bindgen_ty_54 = 16777228;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}
extern "C" {
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        functionName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        functionNames: CFArrayRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbolName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbolNames: CFArrayRef,
        stbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executableName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
}
extern "C" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}
pub type CFBundleRefNum = ::std::os::raw::c_int;
extern "C" {
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}
extern "C" {
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        refNum: *mut CFBundleRefNum,
        localizedRefNum: *mut CFBundleRefNum,
    ) -> SInt32;
}
extern "C" {
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMessagePort {
    _unused: [u8; 0],
}
pub type CFMessagePortRef = *mut __CFMessagePort;
pub const kCFMessagePortSuccess: _bindgen_ty_55 = 0;
pub const kCFMessagePortSendTimeout: _bindgen_ty_55 = -1;
pub const kCFMessagePortReceiveTimeout: _bindgen_ty_55 = -2;
pub const kCFMessagePortIsInvalid: _bindgen_ty_55 = -3;
pub const kCFMessagePortTransportError: _bindgen_ty_55 = -4;
pub const kCFMessagePortBecameInvalidError: _bindgen_ty_55 = -5;
pub type _bindgen_ty_55 = SInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFMessagePortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        local: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFMessagePortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(ms: CFMessagePortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}
extern "C" {
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}
extern "C" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}
extern "C" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}
extern "C" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        sendTimeout: CFTimeInterval,
        rcvTimeout: CFTimeInterval,
        replyMode: CFStringRef,
        returnData: *mut CFDataRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: NSObject);
}
extern "C" {
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInFactoriesKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInTypesKey: CFStringRef;
}
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInUnloadFunction = ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) -> CFPlugInRef;
}
extern "C" {
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean);
}
extern "C" {
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        typeUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factoryUUID: CFUUIDRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunction(
        factoryUUID: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factoryUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
        functionName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef);
}
extern "C" {
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFPlugInInstance {
    _unused: [u8; 0],
}
pub type CFPlugInInstanceRef = *mut __CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction = ::std::option::Option<
    unsafe extern "C" fn(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<unsafe extern "C" fn(instanceData: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFPlugInInstanceGetInstanceData(
        instance: CFPlugInInstanceRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instanceDataSize: CFIndex,
        deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction,
        factoryName: CFStringRef,
        getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMachPort {
    _unused: [u8; 0],
}
pub type CFMachPortRef = *mut __CFMachPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMachPortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type CFMachPortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        port: CFMachPortRef,
        msg: *mut ::std::os::raw::c_void,
        size: CFIndex,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFMachPortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(port: CFMachPortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMachPortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMachPortCreate(
        allocator: CFAllocatorRef,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortCreateWithPort(
        allocator: CFAllocatorRef,
        portNum: mach_port_t,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
}
extern "C" {
    pub fn CFMachPortGetContext(port: CFMachPortRef, context: *mut CFMachPortContext);
}
extern "C" {
    pub fn CFMachPortInvalidate(port: CFMachPortRef);
}
extern "C" {
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
}
extern "C" {
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
        -> CFMachPortInvalidationCallBack;
}
extern "C" {
    pub fn CFMachPortSetInvalidationCallBack(
        port: CFMachPortRef,
        callout: CFMachPortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMachPortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        port: CFMachPortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAttributedString {
    _unused: [u8; 0],
}
pub type CFAttributedStringRef = *const __CFAttributedString;
pub type CFMutableAttributedStringRef = *mut __CFAttributedString;
extern "C" {
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFAttributedStringGetAttributes(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        effectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttribute(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        effectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        aStr: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringReplaceString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringGetMutableString(
        aStr: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFAttributedStringSetAttributes(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clearOtherAttributes: Boolean,
    );
}
extern "C" {
    pub fn CFAttributedStringSetAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFAttributedStringRemoveAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringReplaceAttributedString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef);
}
extern "C" {
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURLEnumerator {
    _unused: [u8; 0],
}
pub type CFURLEnumeratorRef = *const __CFURLEnumerator;
extern "C" {
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
}
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDefaultBehavior: CFURLEnumeratorOptions = 0;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorDescendRecursively: CFURLEnumeratorOptions = 1;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipInvisibles: CFURLEnumeratorOptions = 2;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateFileReferenceURLs: CFURLEnumeratorOptions =
    4;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorSkipPackageContents: CFURLEnumeratorOptions = 8;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPreOrder:
    CFURLEnumeratorOptions = 16;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorIncludeDirectoriesPostOrder:
    CFURLEnumeratorOptions = 32;
pub const CFURLEnumeratorOptions_kCFURLEnumeratorGenerateRelativePathURLs: CFURLEnumeratorOptions =
    64;
pub type CFURLEnumeratorOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLEnumeratorCreateForDirectoryURL(
        alloc: CFAllocatorRef,
        directoryURL: CFURLRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
extern "C" {
    pub fn CFURLEnumeratorCreateForMountedVolumes(
        alloc: CFAllocatorRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
pub const CFURLEnumeratorResult_kCFURLEnumeratorSuccess: CFURLEnumeratorResult = 1;
pub const CFURLEnumeratorResult_kCFURLEnumeratorEnd: CFURLEnumeratorResult = 2;
pub const CFURLEnumeratorResult_kCFURLEnumeratorError: CFURLEnumeratorResult = 3;
pub const CFURLEnumeratorResult_kCFURLEnumeratorDirectoryPostOrderSuccess: CFURLEnumeratorResult =
    4;
pub type CFURLEnumeratorResult = CFIndex;
extern "C" {
    pub fn CFURLEnumeratorGetNextURL(
        enumerator: CFURLEnumeratorRef,
        url: *mut CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLEnumeratorResult;
}
extern "C" {
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef);
}
extern "C" {
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) -> CFIndex;
}
extern "C" {
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileSecurity {
    _unused: [u8; 0],
}
pub type CFFileSecurityRef = *mut __CFFileSecurity;
extern "C" {
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        fileSec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCopyOwnerUUID(
        fileSec: CFFileSecurityRef,
        ownerUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyGroupUUID(
        fileSec: CFFileSecurityRef,
        groupUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: *mut acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: *mut uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: *mut gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) -> Boolean;
}
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwner: CFFileSecurityClearOptions = 1;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroup: CFFileSecurityClearOptions = 2;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearMode: CFFileSecurityClearOptions = 4;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearOwnerUUID: CFFileSecurityClearOptions = 8;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearGroupUUID: CFFileSecurityClearOptions = 16;
pub const CFFileSecurityClearOptions_kCFFileSecurityClearAccessControlList:
    CFFileSecurityClearOptions = 32;
pub type CFFileSecurityClearOptions = CFOptionFlags;
extern "C" {
    pub fn CFFileSecurityClearProperties(
        fileSec: CFFileSecurityRef,
        clearPropertyMask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFStringTokenizer {
    _unused: [u8; 0],
}
pub type CFStringTokenizerRef = *mut __CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: _bindgen_ty_56 = 0;
pub const kCFStringTokenizerUnitSentence: _bindgen_ty_56 = 1;
pub const kCFStringTokenizerUnitParagraph: _bindgen_ty_56 = 2;
pub const kCFStringTokenizerUnitLineBreak: _bindgen_ty_56 = 3;
pub const kCFStringTokenizerUnitWordBoundary: _bindgen_ty_56 = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: _bindgen_ty_56 = 65536;
pub const kCFStringTokenizerAttributeLanguage: _bindgen_ty_56 = 131072;
pub type _bindgen_ty_56 = CFOptionFlags;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNone: CFStringTokenizerTokenType = 0;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenNormal: CFStringTokenizerTokenType = 1;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasSubTokensMask:
    CFStringTokenizerTokenType = 2;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasDerivedSubTokensMask:
    CFStringTokenizerTokenType = 4;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasHasNumbersMask:
    CFStringTokenizerTokenType = 8;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenHasNonLettersMask:
    CFStringTokenizerTokenType = 16;
pub const CFStringTokenizerTokenType_kCFStringTokenizerTokenIsCJWordMask:
    CFStringTokenizerTokenType = 32;
pub type CFStringTokenizerTokenType = CFOptionFlags;
extern "C" {
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}
extern "C" {
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}
extern "C" {
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}
extern "C" {
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        maxRangeLength: CFIndex,
        derivedSubTokens: CFMutableArrayRef,
    ) -> CFIndex;
}
pub type CFFileDescriptorNativeDescriptor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileDescriptor {
    _unused: [u8; 0],
}
pub type CFFileDescriptorRef = *mut __CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: _bindgen_ty_57 = 1;
pub const kCFFileDescriptorWriteCallBack: _bindgen_ty_57 = 2;
pub type _bindgen_ty_57 = CFOptionFlags;
pub type CFFileDescriptorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        f: CFFileDescriptorRef,
        callBackTypes: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
extern "C" {
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        closeOnInvalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *const CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}
extern "C" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}
extern "C" {
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}
extern "C" {
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}
extern "C" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}
extern "C" {
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUserNotification {
    _unused: [u8; 0],
}
pub type CFUserNotificationRef = *mut __CFUserNotification;
pub type CFUserNotificationCallBack = ::std::option::Option<
    unsafe extern "C" fn(userNotification: CFUserNotificationRef, responseFlags: CFOptionFlags),
>;
extern "C" {
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUserNotificationCreate(
        allocator: CFAllocatorRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        error: *mut SInt32,
        dictionary: CFDictionaryRef,
    ) -> CFUserNotificationRef;
}
extern "C" {
    pub fn CFUserNotificationReceiveResponse(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationGetResponseValue(
        userNotification: CFUserNotificationRef,
        key: CFStringRef,
        idx: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFUserNotificationGetResponseDictionary(
        userNotification: CFUserNotificationRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFUserNotificationUpdate(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        dictionary: CFDictionaryRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCreateRunLoopSource(
        allocator: CFAllocatorRef,
        userNotification: CFUserNotificationRef,
        callout: CFUserNotificationCallBack,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFUserNotificationDisplayNotice(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationDisplayAlert(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
        alternateButtonTitle: CFStringRef,
        otherButtonTitle: CFStringRef,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
pub const kCFUserNotificationStopAlertLevel: _bindgen_ty_58 = 0;
pub const kCFUserNotificationNoteAlertLevel: _bindgen_ty_58 = 1;
pub const kCFUserNotificationCautionAlertLevel: _bindgen_ty_58 = 2;
pub const kCFUserNotificationPlainAlertLevel: _bindgen_ty_58 = 3;
pub type _bindgen_ty_58 = CFOptionFlags;
pub const kCFUserNotificationDefaultResponse: _bindgen_ty_59 = 0;
pub const kCFUserNotificationAlternateResponse: _bindgen_ty_59 = 1;
pub const kCFUserNotificationOtherResponse: _bindgen_ty_59 = 2;
pub const kCFUserNotificationCancelResponse: _bindgen_ty_59 = 3;
pub type _bindgen_ty_59 = CFOptionFlags;
pub const kCFUserNotificationNoDefaultButtonFlag: _bindgen_ty_60 = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: _bindgen_ty_60 = 64;
pub type _bindgen_ty_60 = CFOptionFlags;
extern "C" {
    pub static kCFUserNotificationIconURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertTopMostKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationKeyboardTypesKey: CFStringRef;
}
pub const kCFXMLNodeCurrentVersion: _bindgen_ty_61 = 1;
pub type _bindgen_ty_61 = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLNode {
    _unused: [u8; 0],
}
pub type CFXMLNodeRef = *const __CFXMLNode;
pub type CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocument: CFXMLNodeTypeCode = 1;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeElement: CFXMLNodeTypeCode = 2;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeAttribute: CFXMLNodeTypeCode = 3;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeProcessingInstruction: CFXMLNodeTypeCode = 4;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeComment: CFXMLNodeTypeCode = 5;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeText: CFXMLNodeTypeCode = 6;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeCDATASection: CFXMLNodeTypeCode = 7;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocumentFragment: CFXMLNodeTypeCode = 8;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeEntity: CFXMLNodeTypeCode = 9;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeEntityReference: CFXMLNodeTypeCode = 10;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeDocumentType: CFXMLNodeTypeCode = 11;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeWhitespace: CFXMLNodeTypeCode = 12;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeNotation: CFXMLNodeTypeCode = 13;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeElementTypeDeclaration: CFXMLNodeTypeCode = 14;
pub const CFXMLNodeTypeCode_kCFXMLNodeTypeAttributeListDeclaration: CFXMLNodeTypeCode = 15;
pub type CFXMLNodeTypeCode = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementInfo {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub _reserved: [::std::os::raw::c_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLProcessingInstructionInfo {
    pub dataString: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentInfo {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLExternalID {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentTypeInfo {
    pub externalID: CFXMLExternalID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLNotationInfo {
    pub externalID: CFXMLExternalID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementTypeDeclarationInfo {
    pub contentDescription: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeDeclarationInfo {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeListDeclarationInfo {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParameter: CFXMLEntityTypeCode = 0;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParsedInternal: CFXMLEntityTypeCode = 1;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeParsedExternal: CFXMLEntityTypeCode = 2;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeUnparsed: CFXMLEntityTypeCode = 3;
pub const CFXMLEntityTypeCode_kCFXMLEntityTypeCharacter: CFXMLEntityTypeCode = 4;
pub type CFXMLEntityTypeCode = CFIndex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityInfo {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityReferenceInfo {
    pub entityType: CFXMLEntityTypeCode,
}
extern "C" {
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLNodeCreate(
        alloc: CFAllocatorRef,
        xmlType: CFXMLNodeTypeCode,
        dataString: CFStringRef,
        additionalInfoPtr: *const ::std::os::raw::c_void,
        version: CFIndex,
    ) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
}
extern "C" {
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) -> CFXMLNodeRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLParser {
    _unused: [u8; 0],
}
pub type CFXMLParserRef = *mut __CFXMLParser;
pub const CFXMLParserOptions_kCFXMLParserValidateDocument: CFXMLParserOptions = 1;
pub const CFXMLParserOptions_kCFXMLParserSkipMetaData: CFXMLParserOptions = 2;
pub const CFXMLParserOptions_kCFXMLParserReplacePhysicalEntities: CFXMLParserOptions = 4;
pub const CFXMLParserOptions_kCFXMLParserSkipWhitespace: CFXMLParserOptions = 8;
pub const CFXMLParserOptions_kCFXMLParserResolveExternalEntities: CFXMLParserOptions = 16;
pub const CFXMLParserOptions_kCFXMLParserAddImpliedAttributes: CFXMLParserOptions = 32;
pub const CFXMLParserOptions_kCFXMLParserAllOptions: CFXMLParserOptions = 16777215;
pub const CFXMLParserOptions_kCFXMLParserNoOptions: CFXMLParserOptions = 0;
pub type CFXMLParserOptions = CFOptionFlags;
pub const CFXMLParserStatusCode_kCFXMLStatusParseNotBegun: CFXMLParserStatusCode = -2;
pub const CFXMLParserStatusCode_kCFXMLStatusParseInProgress: CFXMLParserStatusCode = -1;
pub const CFXMLParserStatusCode_kCFXMLStatusParseSuccessful: CFXMLParserStatusCode = 0;
pub const CFXMLParserStatusCode_kCFXMLErrorUnexpectedEOF: CFXMLParserStatusCode = 1;
pub const CFXMLParserStatusCode_kCFXMLErrorUnknownEncoding: CFXMLParserStatusCode = 2;
pub const CFXMLParserStatusCode_kCFXMLErrorEncodingConversionFailure: CFXMLParserStatusCode = 3;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedProcessingInstruction: CFXMLParserStatusCode =
    4;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedDTD: CFXMLParserStatusCode = 5;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedName: CFXMLParserStatusCode = 6;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCDSect: CFXMLParserStatusCode = 7;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCloseTag: CFXMLParserStatusCode = 8;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedStartTag: CFXMLParserStatusCode = 9;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedDocument: CFXMLParserStatusCode = 10;
pub const CFXMLParserStatusCode_kCFXMLErrorElementlessDocument: CFXMLParserStatusCode = 11;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedComment: CFXMLParserStatusCode = 12;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedCharacterReference: CFXMLParserStatusCode = 13;
pub const CFXMLParserStatusCode_kCFXMLErrorMalformedParsedCharacterData: CFXMLParserStatusCode = 14;
pub const CFXMLParserStatusCode_kCFXMLErrorNoData: CFXMLParserStatusCode = 15;
pub type CFXMLParserStatusCode = CFIndex;
pub type CFXMLParserCreateXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        nodeDesc: CFXMLNodeRef,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFXMLParserAddChildCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        parent: *mut ::std::os::raw::c_void,
        child: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserEndXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        xmlType: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserResolveExternalEntityCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        extID: *mut CFXMLExternalID,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFXMLParserHandleErrorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        error: CFXMLParserStatusCode,
        info: *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserCallBacks {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}
pub type CFXMLParserRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFXMLParserReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFXMLParserCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}
extern "C" {
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLParserCreate(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef, context: *mut CFXMLParserContext);
}
extern "C" {
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: *mut CFXMLParserCallBacks);
}
extern "C" {
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
}
extern "C" {
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) -> CFXMLParserStatusCode;
}
extern "C" {
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLParserAbort(
        parser: CFXMLParserRef,
        errorCode: CFXMLParserStatusCode,
        errorDescription: CFStringRef,
    );
}
extern "C" {
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
}
extern "C" {
    pub fn CFXMLTreeCreateFromData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateFromDataWithError(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        errorDict: *mut CFDictionaryRef,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) -> CFDataRef;
}
extern "C" {
    pub fn CFXMLCreateStringByEscapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLCreateStringByUnescapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorDescription: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLocation: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
}
pub type HRESULT = SInt32;
pub type ULONG = UInt32;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type REFIID = CFUUIDBytes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknownVTbl {
    pub _reserved: *mut ::std::os::raw::c_void,
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            thisPointer: *mut ::std::os::raw::c_void,
            iid: REFIID,
            ppv: *mut LPVOID,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
    pub Release: ::std::option::Option<
        unsafe extern "C" fn(thisPointer: *mut ::std::os::raw::c_void) -> ULONG,
    >,
}
extern "C" {
    pub fn launch_activate_socket(
        name: *const ::std::os::raw::c_char,
        fds: *mut *mut ::std::os::raw::c_int,
        cnt: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _launch_data {
    _unused: [u8; 0],
}
pub type launch_data_t = *mut _launch_data;
pub type launch_data_dict_iterator_t = ::std::option::Option<
    unsafe extern "C" fn(
        lval: launch_data_t,
        key: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub const launch_data_type_t_LAUNCH_DATA_DICTIONARY: launch_data_type_t = 1;
pub const launch_data_type_t_LAUNCH_DATA_ARRAY: launch_data_type_t = 2;
pub const launch_data_type_t_LAUNCH_DATA_FD: launch_data_type_t = 3;
pub const launch_data_type_t_LAUNCH_DATA_INTEGER: launch_data_type_t = 4;
pub const launch_data_type_t_LAUNCH_DATA_REAL: launch_data_type_t = 5;
pub const launch_data_type_t_LAUNCH_DATA_BOOL: launch_data_type_t = 6;
pub const launch_data_type_t_LAUNCH_DATA_STRING: launch_data_type_t = 7;
pub const launch_data_type_t_LAUNCH_DATA_OPAQUE: launch_data_type_t = 8;
pub const launch_data_type_t_LAUNCH_DATA_ERRNO: launch_data_type_t = 9;
pub const launch_data_type_t_LAUNCH_DATA_MACHPORT: launch_data_type_t = 10;
pub type launch_data_type_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn launch_data_alloc(type_: launch_data_type_t) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_copy(ld: launch_data_t) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_get_type(ld: launch_data_t) -> launch_data_type_t;
}
extern "C" {
    pub fn launch_data_free(ld: launch_data_t);
}
extern "C" {
    pub fn launch_data_dict_insert(
        ldict: launch_data_t,
        lval: launch_data_t,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn launch_data_dict_lookup(
        ldict: launch_data_t,
        key: *const ::std::os::raw::c_char,
    ) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_dict_remove(
        ldict: launch_data_t,
        key: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn launch_data_dict_iterate(
        ldict: launch_data_t,
        iterator: launch_data_dict_iterator_t,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn launch_data_dict_get_count(ldict: launch_data_t) -> usize;
}
extern "C" {
    pub fn launch_data_array_set_index(
        larray: launch_data_t,
        lval: launch_data_t,
        idx: usize,
    ) -> bool;
}
extern "C" {
    pub fn launch_data_array_get_index(larray: launch_data_t, idx: usize) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_array_get_count(larray: launch_data_t) -> usize;
}
extern "C" {
    pub fn launch_data_new_fd(fd: ::std::os::raw::c_int) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_new_machport(val: mach_port_t) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_new_integer(val: ::std::os::raw::c_longlong) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_new_bool(val: bool) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_new_real(val: f64) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_new_string(val: *const ::std::os::raw::c_char) -> launch_data_t;
}
extern "C" {
    pub fn launch_data_new_opaque(bytes: *const ::std::os::raw::c_void, sz: usize)
        -> launch_data_t;
}
extern "C" {
    pub fn launch_data_set_fd(ld: launch_data_t, fd: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn launch_data_set_machport(ld: launch_data_t, mp: mach_port_t) -> bool;
}
extern "C" {
    pub fn launch_data_set_integer(ld: launch_data_t, val: ::std::os::raw::c_longlong) -> bool;
}
extern "C" {
    pub fn launch_data_set_bool(ld: launch_data_t, val: bool) -> bool;
}
extern "C" {
    pub fn launch_data_set_real(ld: launch_data_t, val: f64) -> bool;
}
extern "C" {
    pub fn launch_data_set_string(ld: launch_data_t, val: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn launch_data_set_opaque(
        ld: launch_data_t,
        bytes: *const ::std::os::raw::c_void,
        sz: usize,
    ) -> bool;
}
extern "C" {
    pub fn launch_data_get_fd(ld: launch_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn launch_data_get_machport(ld: launch_data_t) -> mach_port_t;
}
extern "C" {
    pub fn launch_data_get_integer(ld: launch_data_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn launch_data_get_bool(ld: launch_data_t) -> bool;
}
extern "C" {
    pub fn launch_data_get_real(ld: launch_data_t) -> f64;
}
extern "C" {
    pub fn launch_data_get_string(ld: launch_data_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn launch_data_get_opaque(ld: launch_data_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn launch_data_get_opaque_size(ld: launch_data_t) -> usize;
}
extern "C" {
    pub fn launch_data_get_errno(ld: launch_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn launch_get_fd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn launch_msg(request: launch_data_t) -> launch_data_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xpc_type_s {
    _unused: [u8; 0],
}
pub type xpc_type_t = *const _xpc_type_s;
pub trait POS_xpc_object: Sized + std::ops::Deref {}
pub type xpc_object_t = NSObject;
pub type xpc_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub static _xpc_type_connection: _xpc_type_s;
}
pub type xpc_connection_t = xpc_object_t;
pub type xpc_connection_handler_t =
    ::std::option::Option<unsafe extern "C" fn(connection: NSObject)>;
extern "C" {
    pub static _xpc_type_endpoint: _xpc_type_s;
}
pub type xpc_endpoint_t = xpc_object_t;
extern "C" {
    pub static _xpc_type_null: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_bool: _xpc_type_s;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xpc_bool_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static _xpc_bool_true: _xpc_bool_s;
}
extern "C" {
    pub static _xpc_bool_false: _xpc_bool_s;
}
extern "C" {
    pub static _xpc_type_int64: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_uint64: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_double: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_date: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_data: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_string: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_uuid: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_fd: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_shmem: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_array: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_dictionary: _xpc_type_s;
}
extern "C" {
    pub static _xpc_type_error: _xpc_type_s;
}
extern "C" {
    pub static _xpc_error_key_description: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static _xpc_event_key_name: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static _xpc_type_session: _xpc_type_s;
}
pub type xpc_session_t = xpc_object_t;
extern "C" {
    pub static _xpc_type_rich_error: _xpc_type_s;
}
pub type xpc_rich_error_t = xpc_object_t;
extern "C" {
    pub fn xpc_endpoint_create(connection: NSObject) -> xpc_endpoint_t;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_REPEATING: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_DELAY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_GRACE_PERIOD: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_1_MIN: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_5_MIN: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_15_MIN: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_30_MIN: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_1_HOUR: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_4_HOURS: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_8_HOURS: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_1_DAY: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_INTERVAL_7_DAYS: i64;
}
extern "C" {
    pub static XPC_ACTIVITY_PRIORITY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_PRIORITY_MAINTENANCE: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_PRIORITY_UTILITY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_ALLOW_BATTERY: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_PREVENT_DEVICE_SLEEP: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_REQUIRE_BATTERY_LEVEL: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static XPC_ACTIVITY_REQUIRE_HDD_SPINNING: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static _xpc_type_activity: _xpc_type_s;
}
pub type xpc_activity_t = xpc_object_t;
pub type xpc_activity_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub static XPC_ACTIVITY_CHECK_IN: xpc_object_t;
}
extern "C" {
    pub fn xpc_activity_register(
        identifier: *const ::std::os::raw::c_char,
        criteria: NSObject,
        handler: xpc_activity_handler_t,
    );
}
extern "C" {
    pub fn xpc_activity_copy_criteria(activity: NSObject) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_activity_set_criteria(activity: NSObject, criteria: NSObject);
}
pub const XPC_ACTIVITY_STATE_CHECK_IN: _bindgen_ty_62 = 0;
pub const XPC_ACTIVITY_STATE_WAIT: _bindgen_ty_62 = 1;
pub const XPC_ACTIVITY_STATE_RUN: _bindgen_ty_62 = 2;
pub const XPC_ACTIVITY_STATE_DEFER: _bindgen_ty_62 = 3;
pub const XPC_ACTIVITY_STATE_CONTINUE: _bindgen_ty_62 = 4;
pub const XPC_ACTIVITY_STATE_DONE: _bindgen_ty_62 = 5;
pub type _bindgen_ty_62 = ::std::os::raw::c_uint;
pub type xpc_activity_state_t = ::std::os::raw::c_long;
extern "C" {
    pub fn xpc_activity_get_state(activity: NSObject) -> xpc_activity_state_t;
}
extern "C" {
    pub fn xpc_activity_set_state(activity: NSObject, state: xpc_activity_state_t) -> bool;
}
extern "C" {
    pub fn xpc_activity_should_defer(activity: NSObject) -> bool;
}
extern "C" {
    pub fn xpc_activity_unregister(identifier: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xpc_dictionary_s {
    _unused: [u8; 0],
}
extern "C" {
    pub static _xpc_error_connection_interrupted: _xpc_dictionary_s;
}
extern "C" {
    pub static _xpc_error_connection_invalid: _xpc_dictionary_s;
}
extern "C" {
    pub static _xpc_error_termination_imminent: _xpc_dictionary_s;
}
extern "C" {
    pub static _xpc_error_peer_code_signing_requirement: _xpc_dictionary_s;
}
pub type xpc_finalizer_t =
    ::std::option::Option<unsafe extern "C" fn(value: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn xpc_connection_create(
        name: *const ::std::os::raw::c_char,
        targetq: NSObject,
    ) -> xpc_connection_t;
}
extern "C" {
    pub fn xpc_connection_create_mach_service(
        name: *const ::std::os::raw::c_char,
        targetq: NSObject,
        flags: u64,
    ) -> xpc_connection_t;
}
extern "C" {
    pub fn xpc_connection_create_from_endpoint(endpoint: NSObject) -> xpc_connection_t;
}
extern "C" {
    pub fn xpc_connection_set_target_queue(connection: NSObject, targetq: NSObject);
}
extern "C" {
    pub fn xpc_connection_set_event_handler(connection: NSObject, handler: xpc_handler_t);
}
extern "C" {
    pub fn xpc_connection_activate(connection: NSObject);
}
extern "C" {
    pub fn xpc_connection_suspend(connection: NSObject);
}
extern "C" {
    pub fn xpc_connection_resume(connection: NSObject);
}
extern "C" {
    pub fn xpc_connection_send_message(connection: NSObject, message: NSObject);
}
extern "C" {
    pub fn xpc_connection_send_barrier(connection: NSObject, barrier: dispatch_block_t);
}
extern "C" {
    pub fn xpc_connection_send_message_with_reply(
        connection: NSObject,
        message: NSObject,
        replyq: NSObject,
        handler: xpc_handler_t,
    );
}
extern "C" {
    pub fn xpc_connection_send_message_with_reply_sync(
        connection: NSObject,
        message: NSObject,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_connection_cancel(connection: NSObject);
}
extern "C" {
    pub fn xpc_connection_get_name(connection: NSObject) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_connection_get_euid(connection: NSObject) -> uid_t;
}
extern "C" {
    pub fn xpc_connection_get_egid(connection: NSObject) -> gid_t;
}
extern "C" {
    pub fn xpc_connection_get_pid(connection: NSObject) -> pid_t;
}
extern "C" {
    pub fn xpc_connection_get_asid(connection: NSObject) -> au_asid_t;
}
extern "C" {
    pub fn xpc_connection_set_context(connection: NSObject, context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn xpc_connection_get_context(connection: NSObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xpc_connection_set_finalizer_f(connection: NSObject, finalizer: xpc_finalizer_t);
}
extern "C" {
    pub fn xpc_connection_set_peer_code_signing_requirement(
        connection: NSObject,
        requirement: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xpc_rich_error_copy_description(error: NSObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_rich_error_can_retry(error: NSObject) -> bool;
}
pub const xpc_session_create_flags_t_XPC_SESSION_CREATE_NONE: xpc_session_create_flags_t = 0;
pub const xpc_session_create_flags_t_XPC_SESSION_CREATE_INACTIVE: xpc_session_create_flags_t = 1;
pub const xpc_session_create_flags_t_XPC_SESSION_CREATE_MACH_PRIVILEGED:
    xpc_session_create_flags_t = 2;
pub type xpc_session_create_flags_t = u64;
pub type xpc_session_cancel_handler_t = *mut ::std::os::raw::c_void;
pub type xpc_session_incoming_message_handler_t = *mut ::std::os::raw::c_void;
pub type xpc_session_reply_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn xpc_session_copy_description(session: NSObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_session_create_xpc_service(
        name: *const ::std::os::raw::c_char,
        target_queue: NSObject,
        flags: xpc_session_create_flags_t,
        error_out: *mut xpc_rich_error_t,
    ) -> xpc_session_t;
}
extern "C" {
    pub fn xpc_session_create_mach_service(
        mach_service: *const ::std::os::raw::c_char,
        target_queue: NSObject,
        flags: xpc_session_create_flags_t,
        error_out: *mut xpc_rich_error_t,
    ) -> xpc_session_t;
}
extern "C" {
    pub fn xpc_session_set_incoming_message_handler(
        session: NSObject,
        handler: xpc_session_incoming_message_handler_t,
    );
}
extern "C" {
    pub fn xpc_session_set_cancel_handler(
        session: NSObject,
        cancel_handler: xpc_session_cancel_handler_t,
    );
}
extern "C" {
    pub fn xpc_session_activate(session: NSObject, error_out: *mut xpc_rich_error_t) -> bool;
}
extern "C" {
    pub fn xpc_session_cancel(session: NSObject);
}
extern "C" {
    pub fn xpc_session_send_message(session: NSObject, message: NSObject) -> xpc_rich_error_t;
}
extern "C" {
    pub fn xpc_session_send_message_with_reply_sync(
        session: NSObject,
        message: NSObject,
        error_out: *mut xpc_rich_error_t,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_session_send_message_with_reply_async(
        session: NSObject,
        message: NSObject,
        reply_handler: xpc_session_reply_handler_t,
    );
}
extern "C" {
    pub fn xpc_retain(object: NSObject) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_release(object: NSObject);
}
extern "C" {
    pub fn xpc_get_type(object: NSObject) -> xpc_type_t;
}
extern "C" {
    pub fn xpc_type_get_name(type_: xpc_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_copy(object: NSObject) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_equal(object1: NSObject, object2: NSObject) -> bool;
}
extern "C" {
    pub fn xpc_hash(object: NSObject) -> usize;
}
extern "C" {
    pub fn xpc_copy_description(object: NSObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_null_create() -> xpc_object_t;
}
extern "C" {
    pub fn xpc_bool_create(value: bool) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_bool_get_value(xbool: NSObject) -> bool;
}
extern "C" {
    pub fn xpc_int64_create(value: i64) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_int64_get_value(xint: NSObject) -> i64;
}
extern "C" {
    pub fn xpc_uint64_create(value: u64) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_uint64_get_value(xuint: NSObject) -> u64;
}
extern "C" {
    pub fn xpc_double_create(value: f64) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_double_get_value(xdouble: NSObject) -> f64;
}
extern "C" {
    pub fn xpc_date_create(interval: i64) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_date_create_from_current() -> xpc_object_t;
}
extern "C" {
    pub fn xpc_date_get_value(xdate: NSObject) -> i64;
}
extern "C" {
    pub fn xpc_data_create(bytes: *const ::std::os::raw::c_void, length: usize) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_data_create_with_dispatch_data(ddata: NSObject) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_data_get_length(xdata: NSObject) -> usize;
}
extern "C" {
    pub fn xpc_data_get_bytes_ptr(xdata: NSObject) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn xpc_data_get_bytes(
        xdata: NSObject,
        buffer: *mut ::std::os::raw::c_void,
        off: usize,
        length: usize,
    ) -> usize;
}
extern "C" {
    pub fn xpc_string_create(string: *const ::std::os::raw::c_char) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_string_create_with_format(fmt: *const ::std::os::raw::c_char, ...) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_string_create_with_format_and_arguments(
        fmt: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_string_get_length(xstring: NSObject) -> usize;
}
extern "C" {
    pub fn xpc_string_get_string_ptr(xstring: NSObject) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_uuid_create(uuid: *const ::std::os::raw::c_uchar) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_uuid_get_bytes(xuuid: NSObject) -> *const u8;
}
extern "C" {
    pub fn xpc_fd_create(fd: ::std::os::raw::c_int) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_fd_dup(xfd: NSObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xpc_shmem_create(region: *mut ::std::os::raw::c_void, length: usize) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_shmem_map(xshmem: NSObject, region: *mut *mut ::std::os::raw::c_void) -> usize;
}
pub type xpc_array_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn xpc_array_create(objects: *const NSObject, count: usize) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_array_create_empty() -> xpc_object_t;
}
extern "C" {
    pub fn xpc_array_set_value(xarray: NSObject, index: usize, value: NSObject);
}
extern "C" {
    pub fn xpc_array_append_value(xarray: NSObject, value: NSObject);
}
extern "C" {
    pub fn xpc_array_get_count(xarray: NSObject) -> usize;
}
extern "C" {
    pub fn xpc_array_get_value(xarray: NSObject, index: usize) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_array_apply(xarray: NSObject, applier: xpc_array_applier_t) -> bool;
}
extern "C" {
    pub fn xpc_array_set_bool(xarray: NSObject, index: usize, value: bool);
}
extern "C" {
    pub fn xpc_array_set_int64(xarray: NSObject, index: usize, value: i64);
}
extern "C" {
    pub fn xpc_array_set_uint64(xarray: NSObject, index: usize, value: u64);
}
extern "C" {
    pub fn xpc_array_set_double(xarray: NSObject, index: usize, value: f64);
}
extern "C" {
    pub fn xpc_array_set_date(xarray: NSObject, index: usize, value: i64);
}
extern "C" {
    pub fn xpc_array_set_data(
        xarray: NSObject,
        index: usize,
        bytes: *const ::std::os::raw::c_void,
        length: usize,
    );
}
extern "C" {
    pub fn xpc_array_set_string(
        xarray: NSObject,
        index: usize,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xpc_array_set_uuid(xarray: NSObject, index: usize, uuid: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn xpc_array_set_fd(xarray: NSObject, index: usize, fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xpc_array_set_connection(xarray: NSObject, index: usize, connection: NSObject);
}
extern "C" {
    pub fn xpc_array_get_bool(xarray: NSObject, index: usize) -> bool;
}
extern "C" {
    pub fn xpc_array_get_int64(xarray: NSObject, index: usize) -> i64;
}
extern "C" {
    pub fn xpc_array_get_uint64(xarray: NSObject, index: usize) -> u64;
}
extern "C" {
    pub fn xpc_array_get_double(xarray: NSObject, index: usize) -> f64;
}
extern "C" {
    pub fn xpc_array_get_date(xarray: NSObject, index: usize) -> i64;
}
extern "C" {
    pub fn xpc_array_get_data(
        xarray: NSObject,
        index: usize,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn xpc_array_get_string(xarray: NSObject, index: usize) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_array_get_uuid(xarray: NSObject, index: usize) -> *const u8;
}
extern "C" {
    pub fn xpc_array_dup_fd(xarray: NSObject, index: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xpc_array_create_connection(xarray: NSObject, index: usize) -> xpc_connection_t;
}
extern "C" {
    pub fn xpc_array_get_dictionary(xarray: NSObject, index: usize) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_array_get_array(xarray: NSObject, index: usize) -> xpc_object_t;
}
pub type xpc_dictionary_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn xpc_dictionary_create(
        keys: *const *const ::std::os::raw::c_char,
        values: *const NSObject,
        count: usize,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_dictionary_create_empty() -> xpc_object_t;
}
extern "C" {
    pub fn xpc_dictionary_create_reply(original: NSObject) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_dictionary_set_value(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        value: NSObject,
    );
}
extern "C" {
    pub fn xpc_dictionary_get_value(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_dictionary_get_count(xdict: NSObject) -> usize;
}
extern "C" {
    pub fn xpc_dictionary_apply(xdict: NSObject, applier: xpc_dictionary_applier_t) -> bool;
}
extern "C" {
    pub fn xpc_dictionary_get_remote_connection(xdict: NSObject) -> xpc_connection_t;
}
extern "C" {
    pub fn xpc_dictionary_set_bool(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        value: bool,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_int64(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        value: i64,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_uint64(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        value: u64,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_double(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        value: f64,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_date(xdict: NSObject, key: *const ::std::os::raw::c_char, value: i64);
}
extern "C" {
    pub fn xpc_dictionary_set_data(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        bytes: *const ::std::os::raw::c_void,
        length: usize,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_string(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_uuid(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        uuid: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_fd(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        fd: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xpc_dictionary_set_connection(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        connection: NSObject,
    );
}
extern "C" {
    pub fn xpc_dictionary_get_bool(xdict: NSObject, key: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn xpc_dictionary_get_int64(xdict: NSObject, key: *const ::std::os::raw::c_char) -> i64;
}
extern "C" {
    pub fn xpc_dictionary_get_uint64(xdict: NSObject, key: *const ::std::os::raw::c_char) -> u64;
}
extern "C" {
    pub fn xpc_dictionary_get_double(xdict: NSObject, key: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn xpc_dictionary_get_date(xdict: NSObject, key: *const ::std::os::raw::c_char) -> i64;
}
extern "C" {
    pub fn xpc_dictionary_get_data(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
        length: *mut usize,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn xpc_dictionary_get_string(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xpc_dictionary_get_uuid(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> *const u8;
}
extern "C" {
    pub fn xpc_dictionary_dup_fd(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xpc_dictionary_create_connection(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> xpc_connection_t;
}
extern "C" {
    pub fn xpc_dictionary_get_dictionary(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_dictionary_get_array(
        xdict: NSObject,
        key: *const ::std::os::raw::c_char,
    ) -> xpc_object_t;
}
extern "C" {
    pub fn xpc_main(handler: xpc_connection_handler_t) -> !;
}
extern "C" {
    pub fn xpc_transaction_begin();
}
extern "C" {
    pub fn xpc_transaction_end();
}
extern "C" {
    pub fn xpc_set_event_stream_handler(
        stream: *const ::std::os::raw::c_char,
        targetq: NSObject,
        handler: xpc_handler_t,
    );
}
pub type DERByte = u8;
pub type DERShort = u16;
pub type DERInt = u32;
pub type DERLong = u64;
pub type DERSize = usize;
pub type DERBool = bool;
pub type DERTag = DERLong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DERItem {
    pub data: *mut DERByte,
    pub length: DERSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecCertificate {
    _unused: [u8; 0],
}
pub type SecCertificateRef = *mut __SecCertificate;
pub type OpaqueSecCertificateRef = __SecCertificate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecIdentity {
    _unused: [u8; 0],
}
pub type SecIdentityRef = *mut __SecIdentity;
pub type OpaqueSecIdentityRef = __SecIdentity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKey {
    _unused: [u8; 0],
}
pub type SecKeyRef = *mut __SecKey;
pub type OpaqueSecKeyRef = __SecKey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecPolicy {
    _unused: [u8; 0],
}
pub type SecPolicyRef = *mut __SecPolicy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecAccessControl {
    _unused: [u8; 0],
}
pub type SecAccessControlRef = *mut __SecAccessControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKeychain {
    _unused: [u8; 0],
}
pub type SecKeychainRef = *mut __SecKeychain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKeychainItem {
    _unused: [u8; 0],
}
pub type SecKeychainItemRef = *mut __SecKeychainItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecKeychainSearch {
    _unused: [u8; 0],
}
pub type SecKeychainSearchRef = *mut __SecKeychainSearch;
pub type SecKeychainAttrType = OSType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainAttribute {
    pub tag: SecKeychainAttrType,
    pub length: UInt32,
    pub data: *mut ::std::os::raw::c_void,
}
pub type SecKeychainAttributePtr = *mut SecKeychainAttribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainAttributeList {
    pub count: UInt32,
    pub attr: *mut SecKeychainAttribute,
}
pub type SecKeychainStatus = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecTrustedApplication {
    _unused: [u8; 0],
}
pub type SecTrustedApplicationRef = *mut __SecTrustedApplication;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecAccess {
    _unused: [u8; 0],
}
pub type SecAccessRef = *mut __SecAccess;
pub type OpaqueSecAccessRef = __SecAccess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecACL {
    _unused: [u8; 0],
}
pub type SecACLRef = *mut __SecACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecPassword {
    _unused: [u8; 0],
}
pub type SecPasswordRef = *mut __SecPassword;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainAttributeInfo {
    pub count: UInt32,
    pub tag: *mut UInt32,
    pub format: *mut UInt32,
}
extern "C" {
    pub fn SecCopyErrorMessageString(
        status: OSStatus,
        reserved: *mut ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub const errSecSuccess: _bindgen_ty_63 = 0;
pub const errSecUnimplemented: _bindgen_ty_63 = -4;
pub const errSecDiskFull: _bindgen_ty_63 = -34;
pub const errSecDskFull: _bindgen_ty_63 = -34;
pub const errSecIO: _bindgen_ty_63 = -36;
pub const errSecOpWr: _bindgen_ty_63 = -49;
pub const errSecParam: _bindgen_ty_63 = -50;
pub const errSecWrPerm: _bindgen_ty_63 = -61;
pub const errSecAllocate: _bindgen_ty_63 = -108;
pub const errSecUserCanceled: _bindgen_ty_63 = -128;
pub const errSecBadReq: _bindgen_ty_63 = -909;
pub const errSecInternalComponent: _bindgen_ty_63 = -2070;
pub const errSecCoreFoundationUnknown: _bindgen_ty_63 = -4960;
pub const errSecMissingEntitlement: _bindgen_ty_63 = -34018;
pub const errSecRestrictedAPI: _bindgen_ty_63 = -34020;
pub const errSecNotAvailable: _bindgen_ty_63 = -25291;
pub const errSecReadOnly: _bindgen_ty_63 = -25292;
pub const errSecAuthFailed: _bindgen_ty_63 = -25293;
pub const errSecNoSuchKeychain: _bindgen_ty_63 = -25294;
pub const errSecInvalidKeychain: _bindgen_ty_63 = -25295;
pub const errSecDuplicateKeychain: _bindgen_ty_63 = -25296;
pub const errSecDuplicateCallback: _bindgen_ty_63 = -25297;
pub const errSecInvalidCallback: _bindgen_ty_63 = -25298;
pub const errSecDuplicateItem: _bindgen_ty_63 = -25299;
pub const errSecItemNotFound: _bindgen_ty_63 = -25300;
pub const errSecBufferTooSmall: _bindgen_ty_63 = -25301;
pub const errSecDataTooLarge: _bindgen_ty_63 = -25302;
pub const errSecNoSuchAttr: _bindgen_ty_63 = -25303;
pub const errSecInvalidItemRef: _bindgen_ty_63 = -25304;
pub const errSecInvalidSearchRef: _bindgen_ty_63 = -25305;
pub const errSecNoSuchClass: _bindgen_ty_63 = -25306;
pub const errSecNoDefaultKeychain: _bindgen_ty_63 = -25307;
pub const errSecInteractionNotAllowed: _bindgen_ty_63 = -25308;
pub const errSecReadOnlyAttr: _bindgen_ty_63 = -25309;
pub const errSecWrongSecVersion: _bindgen_ty_63 = -25310;
pub const errSecKeySizeNotAllowed: _bindgen_ty_63 = -25311;
pub const errSecNoStorageModule: _bindgen_ty_63 = -25312;
pub const errSecNoCertificateModule: _bindgen_ty_63 = -25313;
pub const errSecNoPolicyModule: _bindgen_ty_63 = -25314;
pub const errSecInteractionRequired: _bindgen_ty_63 = -25315;
pub const errSecDataNotAvailable: _bindgen_ty_63 = -25316;
pub const errSecDataNotModifiable: _bindgen_ty_63 = -25317;
pub const errSecCreateChainFailed: _bindgen_ty_63 = -25318;
pub const errSecInvalidPrefsDomain: _bindgen_ty_63 = -25319;
pub const errSecInDarkWake: _bindgen_ty_63 = -25320;
pub const errSecACLNotSimple: _bindgen_ty_63 = -25240;
pub const errSecPolicyNotFound: _bindgen_ty_63 = -25241;
pub const errSecInvalidTrustSetting: _bindgen_ty_63 = -25242;
pub const errSecNoAccessForItem: _bindgen_ty_63 = -25243;
pub const errSecInvalidOwnerEdit: _bindgen_ty_63 = -25244;
pub const errSecTrustNotAvailable: _bindgen_ty_63 = -25245;
pub const errSecUnsupportedFormat: _bindgen_ty_63 = -25256;
pub const errSecUnknownFormat: _bindgen_ty_63 = -25257;
pub const errSecKeyIsSensitive: _bindgen_ty_63 = -25258;
pub const errSecMultiplePrivKeys: _bindgen_ty_63 = -25259;
pub const errSecPassphraseRequired: _bindgen_ty_63 = -25260;
pub const errSecInvalidPasswordRef: _bindgen_ty_63 = -25261;
pub const errSecInvalidTrustSettings: _bindgen_ty_63 = -25262;
pub const errSecNoTrustSettings: _bindgen_ty_63 = -25263;
pub const errSecPkcs12VerifyFailure: _bindgen_ty_63 = -25264;
pub const errSecNotSigner: _bindgen_ty_63 = -26267;
pub const errSecDecode: _bindgen_ty_63 = -26275;
pub const errSecServiceNotAvailable: _bindgen_ty_63 = -67585;
pub const errSecInsufficientClientID: _bindgen_ty_63 = -67586;
pub const errSecDeviceReset: _bindgen_ty_63 = -67587;
pub const errSecDeviceFailed: _bindgen_ty_63 = -67588;
pub const errSecAppleAddAppACLSubject: _bindgen_ty_63 = -67589;
pub const errSecApplePublicKeyIncomplete: _bindgen_ty_63 = -67590;
pub const errSecAppleSignatureMismatch: _bindgen_ty_63 = -67591;
pub const errSecAppleInvalidKeyStartDate: _bindgen_ty_63 = -67592;
pub const errSecAppleInvalidKeyEndDate: _bindgen_ty_63 = -67593;
pub const errSecConversionError: _bindgen_ty_63 = -67594;
pub const errSecAppleSSLv2Rollback: _bindgen_ty_63 = -67595;
pub const errSecQuotaExceeded: _bindgen_ty_63 = -67596;
pub const errSecFileTooBig: _bindgen_ty_63 = -67597;
pub const errSecInvalidDatabaseBlob: _bindgen_ty_63 = -67598;
pub const errSecInvalidKeyBlob: _bindgen_ty_63 = -67599;
pub const errSecIncompatibleDatabaseBlob: _bindgen_ty_63 = -67600;
pub const errSecIncompatibleKeyBlob: _bindgen_ty_63 = -67601;
pub const errSecHostNameMismatch: _bindgen_ty_63 = -67602;
pub const errSecUnknownCriticalExtensionFlag: _bindgen_ty_63 = -67603;
pub const errSecNoBasicConstraints: _bindgen_ty_63 = -67604;
pub const errSecNoBasicConstraintsCA: _bindgen_ty_63 = -67605;
pub const errSecInvalidAuthorityKeyID: _bindgen_ty_63 = -67606;
pub const errSecInvalidSubjectKeyID: _bindgen_ty_63 = -67607;
pub const errSecInvalidKeyUsageForPolicy: _bindgen_ty_63 = -67608;
pub const errSecInvalidExtendedKeyUsage: _bindgen_ty_63 = -67609;
pub const errSecInvalidIDLinkage: _bindgen_ty_63 = -67610;
pub const errSecPathLengthConstraintExceeded: _bindgen_ty_63 = -67611;
pub const errSecInvalidRoot: _bindgen_ty_63 = -67612;
pub const errSecCRLExpired: _bindgen_ty_63 = -67613;
pub const errSecCRLNotValidYet: _bindgen_ty_63 = -67614;
pub const errSecCRLNotFound: _bindgen_ty_63 = -67615;
pub const errSecCRLServerDown: _bindgen_ty_63 = -67616;
pub const errSecCRLBadURI: _bindgen_ty_63 = -67617;
pub const errSecUnknownCertExtension: _bindgen_ty_63 = -67618;
pub const errSecUnknownCRLExtension: _bindgen_ty_63 = -67619;
pub const errSecCRLNotTrusted: _bindgen_ty_63 = -67620;
pub const errSecCRLPolicyFailed: _bindgen_ty_63 = -67621;
pub const errSecIDPFailure: _bindgen_ty_63 = -67622;
pub const errSecSMIMEEmailAddressesNotFound: _bindgen_ty_63 = -67623;
pub const errSecSMIMEBadExtendedKeyUsage: _bindgen_ty_63 = -67624;
pub const errSecSMIMEBadKeyUsage: _bindgen_ty_63 = -67625;
pub const errSecSMIMEKeyUsageNotCritical: _bindgen_ty_63 = -67626;
pub const errSecSMIMENoEmailAddress: _bindgen_ty_63 = -67627;
pub const errSecSMIMESubjAltNameNotCritical: _bindgen_ty_63 = -67628;
pub const errSecSSLBadExtendedKeyUsage: _bindgen_ty_63 = -67629;
pub const errSecOCSPBadResponse: _bindgen_ty_63 = -67630;
pub const errSecOCSPBadRequest: _bindgen_ty_63 = -67631;
pub const errSecOCSPUnavailable: _bindgen_ty_63 = -67632;
pub const errSecOCSPStatusUnrecognized: _bindgen_ty_63 = -67633;
pub const errSecEndOfData: _bindgen_ty_63 = -67634;
pub const errSecIncompleteCertRevocationCheck: _bindgen_ty_63 = -67635;
pub const errSecNetworkFailure: _bindgen_ty_63 = -67636;
pub const errSecOCSPNotTrustedToAnchor: _bindgen_ty_63 = -67637;
pub const errSecRecordModified: _bindgen_ty_63 = -67638;
pub const errSecOCSPSignatureError: _bindgen_ty_63 = -67639;
pub const errSecOCSPNoSigner: _bindgen_ty_63 = -67640;
pub const errSecOCSPResponderMalformedReq: _bindgen_ty_63 = -67641;
pub const errSecOCSPResponderInternalError: _bindgen_ty_63 = -67642;
pub const errSecOCSPResponderTryLater: _bindgen_ty_63 = -67643;
pub const errSecOCSPResponderSignatureRequired: _bindgen_ty_63 = -67644;
pub const errSecOCSPResponderUnauthorized: _bindgen_ty_63 = -67645;
pub const errSecOCSPResponseNonceMismatch: _bindgen_ty_63 = -67646;
pub const errSecCodeSigningBadCertChainLength: _bindgen_ty_63 = -67647;
pub const errSecCodeSigningNoBasicConstraints: _bindgen_ty_63 = -67648;
pub const errSecCodeSigningBadPathLengthConstraint: _bindgen_ty_63 = -67649;
pub const errSecCodeSigningNoExtendedKeyUsage: _bindgen_ty_63 = -67650;
pub const errSecCodeSigningDevelopment: _bindgen_ty_63 = -67651;
pub const errSecResourceSignBadCertChainLength: _bindgen_ty_63 = -67652;
pub const errSecResourceSignBadExtKeyUsage: _bindgen_ty_63 = -67653;
pub const errSecTrustSettingDeny: _bindgen_ty_63 = -67654;
pub const errSecInvalidSubjectName: _bindgen_ty_63 = -67655;
pub const errSecUnknownQualifiedCertStatement: _bindgen_ty_63 = -67656;
pub const errSecMobileMeRequestQueued: _bindgen_ty_63 = -67657;
pub const errSecMobileMeRequestRedirected: _bindgen_ty_63 = -67658;
pub const errSecMobileMeServerError: _bindgen_ty_63 = -67659;
pub const errSecMobileMeServerNotAvailable: _bindgen_ty_63 = -67660;
pub const errSecMobileMeServerAlreadyExists: _bindgen_ty_63 = -67661;
pub const errSecMobileMeServerServiceErr: _bindgen_ty_63 = -67662;
pub const errSecMobileMeRequestAlreadyPending: _bindgen_ty_63 = -67663;
pub const errSecMobileMeNoRequestPending: _bindgen_ty_63 = -67664;
pub const errSecMobileMeCSRVerifyFailure: _bindgen_ty_63 = -67665;
pub const errSecMobileMeFailedConsistencyCheck: _bindgen_ty_63 = -67666;
pub const errSecNotInitialized: _bindgen_ty_63 = -67667;
pub const errSecInvalidHandleUsage: _bindgen_ty_63 = -67668;
pub const errSecPVCReferentNotFound: _bindgen_ty_63 = -67669;
pub const errSecFunctionIntegrityFail: _bindgen_ty_63 = -67670;
pub const errSecInternalError: _bindgen_ty_63 = -67671;
pub const errSecMemoryError: _bindgen_ty_63 = -67672;
pub const errSecInvalidData: _bindgen_ty_63 = -67673;
pub const errSecMDSError: _bindgen_ty_63 = -67674;
pub const errSecInvalidPointer: _bindgen_ty_63 = -67675;
pub const errSecSelfCheckFailed: _bindgen_ty_63 = -67676;
pub const errSecFunctionFailed: _bindgen_ty_63 = -67677;
pub const errSecModuleManifestVerifyFailed: _bindgen_ty_63 = -67678;
pub const errSecInvalidGUID: _bindgen_ty_63 = -67679;
pub const errSecInvalidHandle: _bindgen_ty_63 = -67680;
pub const errSecInvalidDBList: _bindgen_ty_63 = -67681;
pub const errSecInvalidPassthroughID: _bindgen_ty_63 = -67682;
pub const errSecInvalidNetworkAddress: _bindgen_ty_63 = -67683;
pub const errSecCRLAlreadySigned: _bindgen_ty_63 = -67684;
pub const errSecInvalidNumberOfFields: _bindgen_ty_63 = -67685;
pub const errSecVerificationFailure: _bindgen_ty_63 = -67686;
pub const errSecUnknownTag: _bindgen_ty_63 = -67687;
pub const errSecInvalidSignature: _bindgen_ty_63 = -67688;
pub const errSecInvalidName: _bindgen_ty_63 = -67689;
pub const errSecInvalidCertificateRef: _bindgen_ty_63 = -67690;
pub const errSecInvalidCertificateGroup: _bindgen_ty_63 = -67691;
pub const errSecTagNotFound: _bindgen_ty_63 = -67692;
pub const errSecInvalidQuery: _bindgen_ty_63 = -67693;
pub const errSecInvalidValue: _bindgen_ty_63 = -67694;
pub const errSecCallbackFailed: _bindgen_ty_63 = -67695;
pub const errSecACLDeleteFailed: _bindgen_ty_63 = -67696;
pub const errSecACLReplaceFailed: _bindgen_ty_63 = -67697;
pub const errSecACLAddFailed: _bindgen_ty_63 = -67698;
pub const errSecACLChangeFailed: _bindgen_ty_63 = -67699;
pub const errSecInvalidAccessCredentials: _bindgen_ty_63 = -67700;
pub const errSecInvalidRecord: _bindgen_ty_63 = -67701;
pub const errSecInvalidACL: _bindgen_ty_63 = -67702;
pub const errSecInvalidSampleValue: _bindgen_ty_63 = -67703;
pub const errSecIncompatibleVersion: _bindgen_ty_63 = -67704;
pub const errSecPrivilegeNotGranted: _bindgen_ty_63 = -67705;
pub const errSecInvalidScope: _bindgen_ty_63 = -67706;
pub const errSecPVCAlreadyConfigured: _bindgen_ty_63 = -67707;
pub const errSecInvalidPVC: _bindgen_ty_63 = -67708;
pub const errSecEMMLoadFailed: _bindgen_ty_63 = -67709;
pub const errSecEMMUnloadFailed: _bindgen_ty_63 = -67710;
pub const errSecAddinLoadFailed: _bindgen_ty_63 = -67711;
pub const errSecInvalidKeyRef: _bindgen_ty_63 = -67712;
pub const errSecInvalidKeyHierarchy: _bindgen_ty_63 = -67713;
pub const errSecAddinUnloadFailed: _bindgen_ty_63 = -67714;
pub const errSecLibraryReferenceNotFound: _bindgen_ty_63 = -67715;
pub const errSecInvalidAddinFunctionTable: _bindgen_ty_63 = -67716;
pub const errSecInvalidServiceMask: _bindgen_ty_63 = -67717;
pub const errSecModuleNotLoaded: _bindgen_ty_63 = -67718;
pub const errSecInvalidSubServiceID: _bindgen_ty_63 = -67719;
pub const errSecAttributeNotInContext: _bindgen_ty_63 = -67720;
pub const errSecModuleManagerInitializeFailed: _bindgen_ty_63 = -67721;
pub const errSecModuleManagerNotFound: _bindgen_ty_63 = -67722;
pub const errSecEventNotificationCallbackNotFound: _bindgen_ty_63 = -67723;
pub const errSecInputLengthError: _bindgen_ty_63 = -67724;
pub const errSecOutputLengthError: _bindgen_ty_63 = -67725;
pub const errSecPrivilegeNotSupported: _bindgen_ty_63 = -67726;
pub const errSecDeviceError: _bindgen_ty_63 = -67727;
pub const errSecAttachHandleBusy: _bindgen_ty_63 = -67728;
pub const errSecNotLoggedIn: _bindgen_ty_63 = -67729;
pub const errSecAlgorithmMismatch: _bindgen_ty_63 = -67730;
pub const errSecKeyUsageIncorrect: _bindgen_ty_63 = -67731;
pub const errSecKeyBlobTypeIncorrect: _bindgen_ty_63 = -67732;
pub const errSecKeyHeaderInconsistent: _bindgen_ty_63 = -67733;
pub const errSecUnsupportedKeyFormat: _bindgen_ty_63 = -67734;
pub const errSecUnsupportedKeySize: _bindgen_ty_63 = -67735;
pub const errSecInvalidKeyUsageMask: _bindgen_ty_63 = -67736;
pub const errSecUnsupportedKeyUsageMask: _bindgen_ty_63 = -67737;
pub const errSecInvalidKeyAttributeMask: _bindgen_ty_63 = -67738;
pub const errSecUnsupportedKeyAttributeMask: _bindgen_ty_63 = -67739;
pub const errSecInvalidKeyLabel: _bindgen_ty_63 = -67740;
pub const errSecUnsupportedKeyLabel: _bindgen_ty_63 = -67741;
pub const errSecInvalidKeyFormat: _bindgen_ty_63 = -67742;
pub const errSecUnsupportedVectorOfBuffers: _bindgen_ty_63 = -67743;
pub const errSecInvalidInputVector: _bindgen_ty_63 = -67744;
pub const errSecInvalidOutputVector: _bindgen_ty_63 = -67745;
pub const errSecInvalidContext: _bindgen_ty_63 = -67746;
pub const errSecInvalidAlgorithm: _bindgen_ty_63 = -67747;
pub const errSecInvalidAttributeKey: _bindgen_ty_63 = -67748;
pub const errSecMissingAttributeKey: _bindgen_ty_63 = -67749;
pub const errSecInvalidAttributeInitVector: _bindgen_ty_63 = -67750;
pub const errSecMissingAttributeInitVector: _bindgen_ty_63 = -67751;
pub const errSecInvalidAttributeSalt: _bindgen_ty_63 = -67752;
pub const errSecMissingAttributeSalt: _bindgen_ty_63 = -67753;
pub const errSecInvalidAttributePadding: _bindgen_ty_63 = -67754;
pub const errSecMissingAttributePadding: _bindgen_ty_63 = -67755;
pub const errSecInvalidAttributeRandom: _bindgen_ty_63 = -67756;
pub const errSecMissingAttributeRandom: _bindgen_ty_63 = -67757;
pub const errSecInvalidAttributeSeed: _bindgen_ty_63 = -67758;
pub const errSecMissingAttributeSeed: _bindgen_ty_63 = -67759;
pub const errSecInvalidAttributePassphrase: _bindgen_ty_63 = -67760;
pub const errSecMissingAttributePassphrase: _bindgen_ty_63 = -67761;
pub const errSecInvalidAttributeKeyLength: _bindgen_ty_63 = -67762;
pub const errSecMissingAttributeKeyLength: _bindgen_ty_63 = -67763;
pub const errSecInvalidAttributeBlockSize: _bindgen_ty_63 = -67764;
pub const errSecMissingAttributeBlockSize: _bindgen_ty_63 = -67765;
pub const errSecInvalidAttributeOutputSize: _bindgen_ty_63 = -67766;
pub const errSecMissingAttributeOutputSize: _bindgen_ty_63 = -67767;
pub const errSecInvalidAttributeRounds: _bindgen_ty_63 = -67768;
pub const errSecMissingAttributeRounds: _bindgen_ty_63 = -67769;
pub const errSecInvalidAlgorithmParms: _bindgen_ty_63 = -67770;
pub const errSecMissingAlgorithmParms: _bindgen_ty_63 = -67771;
pub const errSecInvalidAttributeLabel: _bindgen_ty_63 = -67772;
pub const errSecMissingAttributeLabel: _bindgen_ty_63 = -67773;
pub const errSecInvalidAttributeKeyType: _bindgen_ty_63 = -67774;
pub const errSecMissingAttributeKeyType: _bindgen_ty_63 = -67775;
pub const errSecInvalidAttributeMode: _bindgen_ty_63 = -67776;
pub const errSecMissingAttributeMode: _bindgen_ty_63 = -67777;
pub const errSecInvalidAttributeEffectiveBits: _bindgen_ty_63 = -67778;
pub const errSecMissingAttributeEffectiveBits: _bindgen_ty_63 = -67779;
pub const errSecInvalidAttributeStartDate: _bindgen_ty_63 = -67780;
pub const errSecMissingAttributeStartDate: _bindgen_ty_63 = -67781;
pub const errSecInvalidAttributeEndDate: _bindgen_ty_63 = -67782;
pub const errSecMissingAttributeEndDate: _bindgen_ty_63 = -67783;
pub const errSecInvalidAttributeVersion: _bindgen_ty_63 = -67784;
pub const errSecMissingAttributeVersion: _bindgen_ty_63 = -67785;
pub const errSecInvalidAttributePrime: _bindgen_ty_63 = -67786;
pub const errSecMissingAttributePrime: _bindgen_ty_63 = -67787;
pub const errSecInvalidAttributeBase: _bindgen_ty_63 = -67788;
pub const errSecMissingAttributeBase: _bindgen_ty_63 = -67789;
pub const errSecInvalidAttributeSubprime: _bindgen_ty_63 = -67790;
pub const errSecMissingAttributeSubprime: _bindgen_ty_63 = -67791;
pub const errSecInvalidAttributeIterationCount: _bindgen_ty_63 = -67792;
pub const errSecMissingAttributeIterationCount: _bindgen_ty_63 = -67793;
pub const errSecInvalidAttributeDLDBHandle: _bindgen_ty_63 = -67794;
pub const errSecMissingAttributeDLDBHandle: _bindgen_ty_63 = -67795;
pub const errSecInvalidAttributeAccessCredentials: _bindgen_ty_63 = -67796;
pub const errSecMissingAttributeAccessCredentials: _bindgen_ty_63 = -67797;
pub const errSecInvalidAttributePublicKeyFormat: _bindgen_ty_63 = -67798;
pub const errSecMissingAttributePublicKeyFormat: _bindgen_ty_63 = -67799;
pub const errSecInvalidAttributePrivateKeyFormat: _bindgen_ty_63 = -67800;
pub const errSecMissingAttributePrivateKeyFormat: _bindgen_ty_63 = -67801;
pub const errSecInvalidAttributeSymmetricKeyFormat: _bindgen_ty_63 = -67802;
pub const errSecMissingAttributeSymmetricKeyFormat: _bindgen_ty_63 = -67803;
pub const errSecInvalidAttributeWrappedKeyFormat: _bindgen_ty_63 = -67804;
pub const errSecMissingAttributeWrappedKeyFormat: _bindgen_ty_63 = -67805;
pub const errSecStagedOperationInProgress: _bindgen_ty_63 = -67806;
pub const errSecStagedOperationNotStarted: _bindgen_ty_63 = -67807;
pub const errSecVerifyFailed: _bindgen_ty_63 = -67808;
pub const errSecQuerySizeUnknown: _bindgen_ty_63 = -67809;
pub const errSecBlockSizeMismatch: _bindgen_ty_63 = -67810;
pub const errSecPublicKeyInconsistent: _bindgen_ty_63 = -67811;
pub const errSecDeviceVerifyFailed: _bindgen_ty_63 = -67812;
pub const errSecInvalidLoginName: _bindgen_ty_63 = -67813;
pub const errSecAlreadyLoggedIn: _bindgen_ty_63 = -67814;
pub const errSecInvalidDigestAlgorithm: _bindgen_ty_63 = -67815;
pub const errSecInvalidCRLGroup: _bindgen_ty_63 = -67816;
pub const errSecCertificateCannotOperate: _bindgen_ty_63 = -67817;
pub const errSecCertificateExpired: _bindgen_ty_63 = -67818;
pub const errSecCertificateNotValidYet: _bindgen_ty_63 = -67819;
pub const errSecCertificateRevoked: _bindgen_ty_63 = -67820;
pub const errSecCertificateSuspended: _bindgen_ty_63 = -67821;
pub const errSecInsufficientCredentials: _bindgen_ty_63 = -67822;
pub const errSecInvalidAction: _bindgen_ty_63 = -67823;
pub const errSecInvalidAuthority: _bindgen_ty_63 = -67824;
pub const errSecVerifyActionFailed: _bindgen_ty_63 = -67825;
pub const errSecInvalidCertAuthority: _bindgen_ty_63 = -67826;
pub const errSecInvalidCRLAuthority: _bindgen_ty_63 = -67827;
pub const errSecInvaldCRLAuthority: _bindgen_ty_63 = -67827;
pub const errSecInvalidCRLEncoding: _bindgen_ty_63 = -67828;
pub const errSecInvalidCRLType: _bindgen_ty_63 = -67829;
pub const errSecInvalidCRL: _bindgen_ty_63 = -67830;
pub const errSecInvalidFormType: _bindgen_ty_63 = -67831;
pub const errSecInvalidID: _bindgen_ty_63 = -67832;
pub const errSecInvalidIdentifier: _bindgen_ty_63 = -67833;
pub const errSecInvalidIndex: _bindgen_ty_63 = -67834;
pub const errSecInvalidPolicyIdentifiers: _bindgen_ty_63 = -67835;
pub const errSecInvalidTimeString: _bindgen_ty_63 = -67836;
pub const errSecInvalidReason: _bindgen_ty_63 = -67837;
pub const errSecInvalidRequestInputs: _bindgen_ty_63 = -67838;
pub const errSecInvalidResponseVector: _bindgen_ty_63 = -67839;
pub const errSecInvalidStopOnPolicy: _bindgen_ty_63 = -67840;
pub const errSecInvalidTuple: _bindgen_ty_63 = -67841;
pub const errSecMultipleValuesUnsupported: _bindgen_ty_63 = -67842;
pub const errSecNotTrusted: _bindgen_ty_63 = -67843;
pub const errSecNoDefaultAuthority: _bindgen_ty_63 = -67844;
pub const errSecRejectedForm: _bindgen_ty_63 = -67845;
pub const errSecRequestLost: _bindgen_ty_63 = -67846;
pub const errSecRequestRejected: _bindgen_ty_63 = -67847;
pub const errSecUnsupportedAddressType: _bindgen_ty_63 = -67848;
pub const errSecUnsupportedService: _bindgen_ty_63 = -67849;
pub const errSecInvalidTupleGroup: _bindgen_ty_63 = -67850;
pub const errSecInvalidBaseACLs: _bindgen_ty_63 = -67851;
pub const errSecInvalidTupleCredentials: _bindgen_ty_63 = -67852;
pub const errSecInvalidTupleCredendtials: _bindgen_ty_63 = -67852;
pub const errSecInvalidEncoding: _bindgen_ty_63 = -67853;
pub const errSecInvalidValidityPeriod: _bindgen_ty_63 = -67854;
pub const errSecInvalidRequestor: _bindgen_ty_63 = -67855;
pub const errSecRequestDescriptor: _bindgen_ty_63 = -67856;
pub const errSecInvalidBundleInfo: _bindgen_ty_63 = -67857;
pub const errSecInvalidCRLIndex: _bindgen_ty_63 = -67858;
pub const errSecNoFieldValues: _bindgen_ty_63 = -67859;
pub const errSecUnsupportedFieldFormat: _bindgen_ty_63 = -67860;
pub const errSecUnsupportedIndexInfo: _bindgen_ty_63 = -67861;
pub const errSecUnsupportedLocality: _bindgen_ty_63 = -67862;
pub const errSecUnsupportedNumAttributes: _bindgen_ty_63 = -67863;
pub const errSecUnsupportedNumIndexes: _bindgen_ty_63 = -67864;
pub const errSecUnsupportedNumRecordTypes: _bindgen_ty_63 = -67865;
pub const errSecFieldSpecifiedMultiple: _bindgen_ty_63 = -67866;
pub const errSecIncompatibleFieldFormat: _bindgen_ty_63 = -67867;
pub const errSecInvalidParsingModule: _bindgen_ty_63 = -67868;
pub const errSecDatabaseLocked: _bindgen_ty_63 = -67869;
pub const errSecDatastoreIsOpen: _bindgen_ty_63 = -67870;
pub const errSecMissingValue: _bindgen_ty_63 = -67871;
pub const errSecUnsupportedQueryLimits: _bindgen_ty_63 = -67872;
pub const errSecUnsupportedNumSelectionPreds: _bindgen_ty_63 = -67873;
pub const errSecUnsupportedOperator: _bindgen_ty_63 = -67874;
pub const errSecInvalidDBLocation: _bindgen_ty_63 = -67875;
pub const errSecInvalidAccessRequest: _bindgen_ty_63 = -67876;
pub const errSecInvalidIndexInfo: _bindgen_ty_63 = -67877;
pub const errSecInvalidNewOwner: _bindgen_ty_63 = -67878;
pub const errSecInvalidModifyMode: _bindgen_ty_63 = -67879;
pub const errSecMissingRequiredExtension: _bindgen_ty_63 = -67880;
pub const errSecExtendedKeyUsageNotCritical: _bindgen_ty_63 = -67881;
pub const errSecTimestampMissing: _bindgen_ty_63 = -67882;
pub const errSecTimestampInvalid: _bindgen_ty_63 = -67883;
pub const errSecTimestampNotTrusted: _bindgen_ty_63 = -67884;
pub const errSecTimestampServiceNotAvailable: _bindgen_ty_63 = -67885;
pub const errSecTimestampBadAlg: _bindgen_ty_63 = -67886;
pub const errSecTimestampBadRequest: _bindgen_ty_63 = -67887;
pub const errSecTimestampBadDataFormat: _bindgen_ty_63 = -67888;
pub const errSecTimestampTimeNotAvailable: _bindgen_ty_63 = -67889;
pub const errSecTimestampUnacceptedPolicy: _bindgen_ty_63 = -67890;
pub const errSecTimestampUnacceptedExtension: _bindgen_ty_63 = -67891;
pub const errSecTimestampAddInfoNotAvailable: _bindgen_ty_63 = -67892;
pub const errSecTimestampSystemFailure: _bindgen_ty_63 = -67893;
pub const errSecSigningTimeMissing: _bindgen_ty_63 = -67894;
pub const errSecTimestampRejection: _bindgen_ty_63 = -67895;
pub const errSecTimestampWaiting: _bindgen_ty_63 = -67896;
pub const errSecTimestampRevocationWarning: _bindgen_ty_63 = -67897;
pub const errSecTimestampRevocationNotification: _bindgen_ty_63 = -67898;
pub const errSecCertificatePolicyNotAllowed: _bindgen_ty_63 = -67899;
pub const errSecCertificateNameNotAllowed: _bindgen_ty_63 = -67900;
pub const errSecCertificateValidityPeriodTooLong: _bindgen_ty_63 = -67901;
pub const errSecCertificateIsCA: _bindgen_ty_63 = -67902;
pub const errSecCertificateDuplicateExtension: _bindgen_ty_63 = -67903;
pub type _bindgen_ty_63 = OSStatus;
pub const errSSLProtocol: _bindgen_ty_64 = -9800;
pub const errSSLNegotiation: _bindgen_ty_64 = -9801;
pub const errSSLFatalAlert: _bindgen_ty_64 = -9802;
pub const errSSLWouldBlock: _bindgen_ty_64 = -9803;
pub const errSSLSessionNotFound: _bindgen_ty_64 = -9804;
pub const errSSLClosedGraceful: _bindgen_ty_64 = -9805;
pub const errSSLClosedAbort: _bindgen_ty_64 = -9806;
pub const errSSLXCertChainInvalid: _bindgen_ty_64 = -9807;
pub const errSSLBadCert: _bindgen_ty_64 = -9808;
pub const errSSLCrypto: _bindgen_ty_64 = -9809;
pub const errSSLInternal: _bindgen_ty_64 = -9810;
pub const errSSLModuleAttach: _bindgen_ty_64 = -9811;
pub const errSSLUnknownRootCert: _bindgen_ty_64 = -9812;
pub const errSSLNoRootCert: _bindgen_ty_64 = -9813;
pub const errSSLCertExpired: _bindgen_ty_64 = -9814;
pub const errSSLCertNotYetValid: _bindgen_ty_64 = -9815;
pub const errSSLClosedNoNotify: _bindgen_ty_64 = -9816;
pub const errSSLBufferOverflow: _bindgen_ty_64 = -9817;
pub const errSSLBadCipherSuite: _bindgen_ty_64 = -9818;
pub const errSSLPeerUnexpectedMsg: _bindgen_ty_64 = -9819;
pub const errSSLPeerBadRecordMac: _bindgen_ty_64 = -9820;
pub const errSSLPeerDecryptionFail: _bindgen_ty_64 = -9821;
pub const errSSLPeerRecordOverflow: _bindgen_ty_64 = -9822;
pub const errSSLPeerDecompressFail: _bindgen_ty_64 = -9823;
pub const errSSLPeerHandshakeFail: _bindgen_ty_64 = -9824;
pub const errSSLPeerBadCert: _bindgen_ty_64 = -9825;
pub const errSSLPeerUnsupportedCert: _bindgen_ty_64 = -9826;
pub const errSSLPeerCertRevoked: _bindgen_ty_64 = -9827;
pub const errSSLPeerCertExpired: _bindgen_ty_64 = -9828;
pub const errSSLPeerCertUnknown: _bindgen_ty_64 = -9829;
pub const errSSLIllegalParam: _bindgen_ty_64 = -9830;
pub const errSSLPeerUnknownCA: _bindgen_ty_64 = -9831;
pub const errSSLPeerAccessDenied: _bindgen_ty_64 = -9832;
pub const errSSLPeerDecodeError: _bindgen_ty_64 = -9833;
pub const errSSLPeerDecryptError: _bindgen_ty_64 = -9834;
pub const errSSLPeerExportRestriction: _bindgen_ty_64 = -9835;
pub const errSSLPeerProtocolVersion: _bindgen_ty_64 = -9836;
pub const errSSLPeerInsufficientSecurity: _bindgen_ty_64 = -9837;
pub const errSSLPeerInternalError: _bindgen_ty_64 = -9838;
pub const errSSLPeerUserCancelled: _bindgen_ty_64 = -9839;
pub const errSSLPeerNoRenegotiation: _bindgen_ty_64 = -9840;
pub const errSSLPeerAuthCompleted: _bindgen_ty_64 = -9841;
pub const errSSLClientCertRequested: _bindgen_ty_64 = -9842;
pub const errSSLHostNameMismatch: _bindgen_ty_64 = -9843;
pub const errSSLConnectionRefused: _bindgen_ty_64 = -9844;
pub const errSSLDecryptionFail: _bindgen_ty_64 = -9845;
pub const errSSLBadRecordMac: _bindgen_ty_64 = -9846;
pub const errSSLRecordOverflow: _bindgen_ty_64 = -9847;
pub const errSSLBadConfiguration: _bindgen_ty_64 = -9848;
pub const errSSLUnexpectedRecord: _bindgen_ty_64 = -9849;
pub const errSSLWeakPeerEphemeralDHKey: _bindgen_ty_64 = -9850;
pub const errSSLClientHelloReceived: _bindgen_ty_64 = -9851;
pub const errSSLTransportReset: _bindgen_ty_64 = -9852;
pub const errSSLNetworkTimeout: _bindgen_ty_64 = -9853;
pub const errSSLConfigurationFailed: _bindgen_ty_64 = -9854;
pub const errSSLUnsupportedExtension: _bindgen_ty_64 = -9855;
pub const errSSLUnexpectedMessage: _bindgen_ty_64 = -9856;
pub const errSSLDecompressFail: _bindgen_ty_64 = -9857;
pub const errSSLHandshakeFail: _bindgen_ty_64 = -9858;
pub const errSSLDecodeError: _bindgen_ty_64 = -9859;
pub const errSSLInappropriateFallback: _bindgen_ty_64 = -9860;
pub const errSSLMissingExtension: _bindgen_ty_64 = -9861;
pub const errSSLBadCertificateStatusResponse: _bindgen_ty_64 = -9862;
pub const errSSLCertificateRequired: _bindgen_ty_64 = -9863;
pub const errSSLUnknownPSKIdentity: _bindgen_ty_64 = -9864;
pub const errSSLUnrecognizedName: _bindgen_ty_64 = -9865;
pub const errSSLATSViolation: _bindgen_ty_64 = -9880;
pub const errSSLATSMinimumVersionViolation: _bindgen_ty_64 = -9881;
pub const errSSLATSCiphersuiteViolation: _bindgen_ty_64 = -9882;
pub const errSSLATSMinimumKeySizeViolation: _bindgen_ty_64 = -9883;
pub const errSSLATSLeafCertificateHashAlgorithmViolation: _bindgen_ty_64 = -9884;
pub const errSSLATSCertificateHashAlgorithmViolation: _bindgen_ty_64 = -9885;
pub const errSSLATSCertificateTrustViolation: _bindgen_ty_64 = -9886;
pub const errSSLEarlyDataRejected: _bindgen_ty_64 = -9890;
pub type _bindgen_ty_64 = OSStatus;
pub type sint64 = i64;
pub type uint64 = u64;
pub type sint32 = i32;
pub type sint16 = i16;
pub type sint8 = i8;
pub type uint32 = u32;
pub type uint16 = u16;
pub type uint8 = u8;
pub type CSSM_INTPTR = isize;
pub type CSSM_SIZE = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_data {
    pub Length: usize,
    pub Data: *mut u8,
}
pub type SecAsn1Item = cssm_data;
pub type SecAsn1Oid = cssm_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecAsn1AlgId {
    pub algorithm: SecAsn1Oid,
    pub parameters: SecAsn1Item,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecAsn1PubKeyInfo {
    pub algorithm: SecAsn1AlgId,
    pub subjectPublicKey: SecAsn1Item,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecAsn1Template_struct {
    pub kind: u32,
    pub offset: u32,
    pub sub: *const ::std::os::raw::c_void,
    pub size: u32,
}
pub type SecAsn1Template = SecAsn1Template_struct;
pub type SecAsn1TemplateChooser = ::std::option::Option<
    unsafe extern "C" fn(
        arg: *mut ::std::os::raw::c_void,
        enc: Boolean,
        buf: *const ::std::os::raw::c_char,
        len: usize,
        dest: *mut ::std::os::raw::c_void,
    ) -> *const SecAsn1Template,
>;
pub type SecAsn1TemplateChooserPtr = SecAsn1TemplateChooser;
pub type CSSM_HANDLE = CSSM_INTPTR;
pub type CSSM_HANDLE_PTR = *mut CSSM_INTPTR;
pub type CSSM_LONG_HANDLE = uint64;
pub type CSSM_LONG_HANDLE_PTR = *mut uint64;
pub type CSSM_MODULE_HANDLE = CSSM_HANDLE;
pub type CSSM_MODULE_HANDLE_PTR = *mut CSSM_HANDLE;
pub type CSSM_CC_HANDLE = CSSM_LONG_HANDLE;
pub type CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;
pub type CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
pub type CSSM_AC_HANDLE = CSSM_MODULE_HANDLE;
pub type CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
pub type CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
pub type CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_INVALID_HANDLE: _bindgen_ty_65 = 0;
pub type _bindgen_ty_65 = ::std::os::raw::c_uint;
pub type CSSM_BOOL = sint32;
pub const CSSM_FALSE: _bindgen_ty_66 = 0;
pub const CSSM_TRUE: _bindgen_ty_66 = 1;
pub type _bindgen_ty_66 = ::std::os::raw::c_uint;
pub type CSSM_RETURN = sint32;
pub const CSSM_OK: _bindgen_ty_67 = 0;
pub type _bindgen_ty_67 = ::std::os::raw::c_uint;
pub const CSSM_MODULE_STRING_SIZE: _bindgen_ty_68 = 64;
pub type _bindgen_ty_68 = ::std::os::raw::c_uint;
pub type CSSM_STRING = [::std::os::raw::c_char; 68usize];
pub type CSSM_DATA_PTR = *mut SecAsn1Item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_guid {
    pub Data1: uint32,
    pub Data2: uint16,
    pub Data3: uint16,
    pub Data4: [uint8; 8usize],
}
pub type CSSM_GUID = cssm_guid;
pub type CSSM_GUID_PTR = *mut cssm_guid;
pub type CSSM_BITMASK = uint32;
pub type CSSM_KEY_HIERARCHY = CSSM_BITMASK;
pub const CSSM_KEY_HIERARCHY_NONE: _bindgen_ty_69 = 0;
pub const CSSM_KEY_HIERARCHY_INTEG: _bindgen_ty_69 = 1;
pub const CSSM_KEY_HIERARCHY_EXPORT: _bindgen_ty_69 = 2;
pub type _bindgen_ty_69 = ::std::os::raw::c_uint;
pub type CSSM_PVC_MODE = CSSM_BITMASK;
pub const CSSM_PVC_NONE: _bindgen_ty_70 = 0;
pub const CSSM_PVC_APP: _bindgen_ty_70 = 1;
pub const CSSM_PVC_SP: _bindgen_ty_70 = 2;
pub type _bindgen_ty_70 = ::std::os::raw::c_uint;
pub type CSSM_PRIVILEGE_SCOPE = uint32;
pub const CSSM_PRIVILEGE_SCOPE_NONE: _bindgen_ty_71 = 0;
pub const CSSM_PRIVILEGE_SCOPE_PROCESS: _bindgen_ty_71 = 1;
pub const CSSM_PRIVILEGE_SCOPE_THREAD: _bindgen_ty_71 = 2;
pub type _bindgen_ty_71 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_version {
    pub Major: uint32,
    pub Minor: uint32,
}
pub type CSSM_VERSION = cssm_version;
pub type CSSM_VERSION_PTR = *mut cssm_version;
pub type CSSM_SERVICE_MASK = uint32;
pub const CSSM_SERVICE_CSSM: _bindgen_ty_72 = 1;
pub const CSSM_SERVICE_CSP: _bindgen_ty_72 = 2;
pub const CSSM_SERVICE_DL: _bindgen_ty_72 = 4;
pub const CSSM_SERVICE_CL: _bindgen_ty_72 = 8;
pub const CSSM_SERVICE_TP: _bindgen_ty_72 = 16;
pub const CSSM_SERVICE_AC: _bindgen_ty_72 = 32;
pub const CSSM_SERVICE_KR: _bindgen_ty_72 = 64;
pub type _bindgen_ty_72 = ::std::os::raw::c_uint;
pub type CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_subservice_uid {
    pub Guid: CSSM_GUID,
    pub Version: CSSM_VERSION,
    pub SubserviceId: uint32,
    pub SubserviceType: CSSM_SERVICE_TYPE,
}
pub type CSSM_SUBSERVICE_UID = cssm_subservice_uid;
pub type CSSM_SUBSERVICE_UID_PTR = *mut cssm_subservice_uid;
pub type CSSM_MODULE_EVENT = uint32;
pub type CSSM_MODULE_EVENT_PTR = *mut uint32;
pub const CSSM_NOTIFY_INSERT: _bindgen_ty_73 = 1;
pub const CSSM_NOTIFY_REMOVE: _bindgen_ty_73 = 2;
pub const CSSM_NOTIFY_FAULT: _bindgen_ty_73 = 3;
pub type _bindgen_ty_73 = ::std::os::raw::c_uint;
pub type CSSM_API_ModuleEventHandler = ::std::option::Option<
    unsafe extern "C" fn(
        ModuleGuid: *const CSSM_GUID,
        AppNotifyCallbackCtx: *mut ::std::os::raw::c_void,
        SubserviceId: uint32,
        ServiceType: CSSM_SERVICE_TYPE,
        EventType: CSSM_MODULE_EVENT,
    ) -> CSSM_RETURN,
>;
pub type CSSM_ATTACH_FLAGS = uint32;
pub const CSSM_ATTACH_READ_ONLY: _bindgen_ty_74 = 1;
pub type _bindgen_ty_74 = ::std::os::raw::c_uint;
pub type CSSM_PRIVILEGE = uint64;
pub type CSSM_USEE_TAG = CSSM_PRIVILEGE;
pub const CSSM_USEE_LAST: _bindgen_ty_75 = 255;
pub const CSSM_USEE_NONE: _bindgen_ty_75 = 0;
pub const CSSM_USEE_DOMESTIC: _bindgen_ty_75 = 1;
pub const CSSM_USEE_FINANCIAL: _bindgen_ty_75 = 2;
pub const CSSM_USEE_KRLE: _bindgen_ty_75 = 3;
pub const CSSM_USEE_KRENT: _bindgen_ty_75 = 4;
pub const CSSM_USEE_SSL: _bindgen_ty_75 = 5;
pub const CSSM_USEE_AUTHENTICATION: _bindgen_ty_75 = 6;
pub const CSSM_USEE_KEYEXCH: _bindgen_ty_75 = 7;
pub const CSSM_USEE_MEDICAL: _bindgen_ty_75 = 8;
pub const CSSM_USEE_INSURANCE: _bindgen_ty_75 = 9;
pub const CSSM_USEE_WEAK: _bindgen_ty_75 = 10;
pub type _bindgen_ty_75 = ::std::os::raw::c_uint;
pub type CSSM_NET_ADDRESS_TYPE = uint32;
pub const CSSM_ADDR_NONE: _bindgen_ty_76 = 0;
pub const CSSM_ADDR_CUSTOM: _bindgen_ty_76 = 1;
pub const CSSM_ADDR_URL: _bindgen_ty_76 = 2;
pub const CSSM_ADDR_SOCKADDR: _bindgen_ty_76 = 3;
pub const CSSM_ADDR_NAME: _bindgen_ty_76 = 4;
pub type _bindgen_ty_76 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_net_address {
    pub AddressType: CSSM_NET_ADDRESS_TYPE,
    pub Address: SecAsn1Item,
}
pub type CSSM_NET_ADDRESS = cssm_net_address;
pub type CSSM_NET_ADDRESS_PTR = *mut cssm_net_address;
pub type CSSM_NET_PROTOCOL = uint32;
pub const CSSM_NET_PROTO_NONE: _bindgen_ty_77 = 0;
pub const CSSM_NET_PROTO_CUSTOM: _bindgen_ty_77 = 1;
pub const CSSM_NET_PROTO_UNSPECIFIED: _bindgen_ty_77 = 2;
pub const CSSM_NET_PROTO_LDAP: _bindgen_ty_77 = 3;
pub const CSSM_NET_PROTO_LDAPS: _bindgen_ty_77 = 4;
pub const CSSM_NET_PROTO_LDAPNS: _bindgen_ty_77 = 5;
pub const CSSM_NET_PROTO_X500DAP: _bindgen_ty_77 = 6;
pub const CSSM_NET_PROTO_FTP: _bindgen_ty_77 = 7;
pub const CSSM_NET_PROTO_FTPS: _bindgen_ty_77 = 8;
pub const CSSM_NET_PROTO_OCSP: _bindgen_ty_77 = 9;
pub const CSSM_NET_PROTO_CMP: _bindgen_ty_77 = 10;
pub const CSSM_NET_PROTO_CMPS: _bindgen_ty_77 = 11;
pub type _bindgen_ty_77 = ::std::os::raw::c_uint;
pub type CSSM_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        OutData: CSSM_DATA_PTR,
        CallerCtx: *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_crypto_data {
    pub Param: SecAsn1Item,
    pub Callback: CSSM_CALLBACK,
    pub CallerCtx: *mut ::std::os::raw::c_void,
}
pub type CSSM_CRYPTO_DATA = cssm_crypto_data;
pub type CSSM_CRYPTO_DATA_PTR = *mut cssm_crypto_data;
pub type CSSM_WORDID_TYPE = sint32;
pub const CSSM_WORDID__UNK_: _bindgen_ty_78 = -1;
pub const CSSM_WORDID__NLU_: _bindgen_ty_78 = 0;
pub const CSSM_WORDID__STAR_: _bindgen_ty_78 = 1;
pub const CSSM_WORDID_A: _bindgen_ty_78 = 2;
pub const CSSM_WORDID_ACL: _bindgen_ty_78 = 3;
pub const CSSM_WORDID_ALPHA: _bindgen_ty_78 = 4;
pub const CSSM_WORDID_B: _bindgen_ty_78 = 5;
pub const CSSM_WORDID_BER: _bindgen_ty_78 = 6;
pub const CSSM_WORDID_BINARY: _bindgen_ty_78 = 7;
pub const CSSM_WORDID_BIOMETRIC: _bindgen_ty_78 = 8;
pub const CSSM_WORDID_C: _bindgen_ty_78 = 9;
pub const CSSM_WORDID_CANCELED: _bindgen_ty_78 = 10;
pub const CSSM_WORDID_CERT: _bindgen_ty_78 = 11;
pub const CSSM_WORDID_COMMENT: _bindgen_ty_78 = 12;
pub const CSSM_WORDID_CRL: _bindgen_ty_78 = 13;
pub const CSSM_WORDID_CUSTOM: _bindgen_ty_78 = 14;
pub const CSSM_WORDID_D: _bindgen_ty_78 = 15;
pub const CSSM_WORDID_DATE: _bindgen_ty_78 = 16;
pub const CSSM_WORDID_DB_DELETE: _bindgen_ty_78 = 17;
pub const CSSM_WORDID_DB_EXEC_STORED_QUERY: _bindgen_ty_78 = 18;
pub const CSSM_WORDID_DB_INSERT: _bindgen_ty_78 = 19;
pub const CSSM_WORDID_DB_MODIFY: _bindgen_ty_78 = 20;
pub const CSSM_WORDID_DB_READ: _bindgen_ty_78 = 21;
pub const CSSM_WORDID_DBS_CREATE: _bindgen_ty_78 = 22;
pub const CSSM_WORDID_DBS_DELETE: _bindgen_ty_78 = 23;
pub const CSSM_WORDID_DECRYPT: _bindgen_ty_78 = 24;
pub const CSSM_WORDID_DELETE: _bindgen_ty_78 = 25;
pub const CSSM_WORDID_DELTA_CRL: _bindgen_ty_78 = 26;
pub const CSSM_WORDID_DER: _bindgen_ty_78 = 27;
pub const CSSM_WORDID_DERIVE: _bindgen_ty_78 = 28;
pub const CSSM_WORDID_DISPLAY: _bindgen_ty_78 = 29;
pub const CSSM_WORDID_DO: _bindgen_ty_78 = 30;
pub const CSSM_WORDID_DSA: _bindgen_ty_78 = 31;
pub const CSSM_WORDID_DSA_SHA1: _bindgen_ty_78 = 32;
pub const CSSM_WORDID_E: _bindgen_ty_78 = 33;
pub const CSSM_WORDID_ELGAMAL: _bindgen_ty_78 = 34;
pub const CSSM_WORDID_ENCRYPT: _bindgen_ty_78 = 35;
pub const CSSM_WORDID_ENTRY: _bindgen_ty_78 = 36;
pub const CSSM_WORDID_EXPORT_CLEAR: _bindgen_ty_78 = 37;
pub const CSSM_WORDID_EXPORT_WRAPPED: _bindgen_ty_78 = 38;
pub const CSSM_WORDID_G: _bindgen_ty_78 = 39;
pub const CSSM_WORDID_GE: _bindgen_ty_78 = 40;
pub const CSSM_WORDID_GENKEY: _bindgen_ty_78 = 41;
pub const CSSM_WORDID_HASH: _bindgen_ty_78 = 42;
pub const CSSM_WORDID_HASHED_PASSWORD: _bindgen_ty_78 = 43;
pub const CSSM_WORDID_HASHED_SUBJECT: _bindgen_ty_78 = 44;
pub const CSSM_WORDID_HAVAL: _bindgen_ty_78 = 45;
pub const CSSM_WORDID_IBCHASH: _bindgen_ty_78 = 46;
pub const CSSM_WORDID_IMPORT_CLEAR: _bindgen_ty_78 = 47;
pub const CSSM_WORDID_IMPORT_WRAPPED: _bindgen_ty_78 = 48;
pub const CSSM_WORDID_INTEL: _bindgen_ty_78 = 49;
pub const CSSM_WORDID_ISSUER: _bindgen_ty_78 = 50;
pub const CSSM_WORDID_ISSUER_INFO: _bindgen_ty_78 = 51;
pub const CSSM_WORDID_K_OF_N: _bindgen_ty_78 = 52;
pub const CSSM_WORDID_KEA: _bindgen_ty_78 = 53;
pub const CSSM_WORDID_KEYHOLDER: _bindgen_ty_78 = 54;
pub const CSSM_WORDID_L: _bindgen_ty_78 = 55;
pub const CSSM_WORDID_LE: _bindgen_ty_78 = 56;
pub const CSSM_WORDID_LOGIN: _bindgen_ty_78 = 57;
pub const CSSM_WORDID_LOGIN_NAME: _bindgen_ty_78 = 58;
pub const CSSM_WORDID_MAC: _bindgen_ty_78 = 59;
pub const CSSM_WORDID_MD2: _bindgen_ty_78 = 60;
pub const CSSM_WORDID_MD2WITHRSA: _bindgen_ty_78 = 61;
pub const CSSM_WORDID_MD4: _bindgen_ty_78 = 62;
pub const CSSM_WORDID_MD5: _bindgen_ty_78 = 63;
pub const CSSM_WORDID_MD5WITHRSA: _bindgen_ty_78 = 64;
pub const CSSM_WORDID_N: _bindgen_ty_78 = 65;
pub const CSSM_WORDID_NAME: _bindgen_ty_78 = 66;
pub const CSSM_WORDID_NDR: _bindgen_ty_78 = 67;
pub const CSSM_WORDID_NHASH: _bindgen_ty_78 = 68;
pub const CSSM_WORDID_NOT_AFTER: _bindgen_ty_78 = 69;
pub const CSSM_WORDID_NOT_BEFORE: _bindgen_ty_78 = 70;
pub const CSSM_WORDID_NULL: _bindgen_ty_78 = 71;
pub const CSSM_WORDID_NUMERIC: _bindgen_ty_78 = 72;
pub const CSSM_WORDID_OBJECT_HASH: _bindgen_ty_78 = 73;
pub const CSSM_WORDID_ONE_TIME: _bindgen_ty_78 = 74;
pub const CSSM_WORDID_ONLINE: _bindgen_ty_78 = 75;
pub const CSSM_WORDID_OWNER: _bindgen_ty_78 = 76;
pub const CSSM_WORDID_P: _bindgen_ty_78 = 77;
pub const CSSM_WORDID_PAM_NAME: _bindgen_ty_78 = 78;
pub const CSSM_WORDID_PASSWORD: _bindgen_ty_78 = 79;
pub const CSSM_WORDID_PGP: _bindgen_ty_78 = 80;
pub const CSSM_WORDID_PREFIX: _bindgen_ty_78 = 81;
pub const CSSM_WORDID_PRIVATE_KEY: _bindgen_ty_78 = 82;
pub const CSSM_WORDID_PROMPTED_BIOMETRIC: _bindgen_ty_78 = 83;
pub const CSSM_WORDID_PROMPTED_PASSWORD: _bindgen_ty_78 = 84;
pub const CSSM_WORDID_PROPAGATE: _bindgen_ty_78 = 85;
pub const CSSM_WORDID_PROTECTED_BIOMETRIC: _bindgen_ty_78 = 86;
pub const CSSM_WORDID_PROTECTED_PASSWORD: _bindgen_ty_78 = 87;
pub const CSSM_WORDID_PROTECTED_PIN: _bindgen_ty_78 = 88;
pub const CSSM_WORDID_PUBLIC_KEY: _bindgen_ty_78 = 89;
pub const CSSM_WORDID_PUBLIC_KEY_FROM_CERT: _bindgen_ty_78 = 90;
pub const CSSM_WORDID_Q: _bindgen_ty_78 = 91;
pub const CSSM_WORDID_RANGE: _bindgen_ty_78 = 92;
pub const CSSM_WORDID_REVAL: _bindgen_ty_78 = 93;
pub const CSSM_WORDID_RIPEMAC: _bindgen_ty_78 = 94;
pub const CSSM_WORDID_RIPEMD: _bindgen_ty_78 = 95;
pub const CSSM_WORDID_RIPEMD160: _bindgen_ty_78 = 96;
pub const CSSM_WORDID_RSA: _bindgen_ty_78 = 97;
pub const CSSM_WORDID_RSA_ISO9796: _bindgen_ty_78 = 98;
pub const CSSM_WORDID_RSA_PKCS: _bindgen_ty_78 = 99;
pub const CSSM_WORDID_RSA_PKCS_MD5: _bindgen_ty_78 = 100;
pub const CSSM_WORDID_RSA_PKCS_SHA1: _bindgen_ty_78 = 101;
pub const CSSM_WORDID_RSA_PKCS1: _bindgen_ty_78 = 102;
pub const CSSM_WORDID_RSA_PKCS1_MD5: _bindgen_ty_78 = 103;
pub const CSSM_WORDID_RSA_PKCS1_SHA1: _bindgen_ty_78 = 104;
pub const CSSM_WORDID_RSA_PKCS1_SIG: _bindgen_ty_78 = 105;
pub const CSSM_WORDID_RSA_RAW: _bindgen_ty_78 = 106;
pub const CSSM_WORDID_SDSIV1: _bindgen_ty_78 = 107;
pub const CSSM_WORDID_SEQUENCE: _bindgen_ty_78 = 108;
pub const CSSM_WORDID_SET: _bindgen_ty_78 = 109;
pub const CSSM_WORDID_SEXPR: _bindgen_ty_78 = 110;
pub const CSSM_WORDID_SHA1: _bindgen_ty_78 = 111;
pub const CSSM_WORDID_SHA1WITHDSA: _bindgen_ty_78 = 112;
pub const CSSM_WORDID_SHA1WITHECDSA: _bindgen_ty_78 = 113;
pub const CSSM_WORDID_SHA1WITHRSA: _bindgen_ty_78 = 114;
pub const CSSM_WORDID_SIGN: _bindgen_ty_78 = 115;
pub const CSSM_WORDID_SIGNATURE: _bindgen_ty_78 = 116;
pub const CSSM_WORDID_SIGNED_NONCE: _bindgen_ty_78 = 117;
pub const CSSM_WORDID_SIGNED_SECRET: _bindgen_ty_78 = 118;
pub const CSSM_WORDID_SPKI: _bindgen_ty_78 = 119;
pub const CSSM_WORDID_SUBJECT: _bindgen_ty_78 = 120;
pub const CSSM_WORDID_SUBJECT_INFO: _bindgen_ty_78 = 121;
pub const CSSM_WORDID_TAG: _bindgen_ty_78 = 122;
pub const CSSM_WORDID_THRESHOLD: _bindgen_ty_78 = 123;
pub const CSSM_WORDID_TIME: _bindgen_ty_78 = 124;
pub const CSSM_WORDID_URI: _bindgen_ty_78 = 125;
pub const CSSM_WORDID_VERSION: _bindgen_ty_78 = 126;
pub const CSSM_WORDID_X509_ATTRIBUTE: _bindgen_ty_78 = 127;
pub const CSSM_WORDID_X509V1: _bindgen_ty_78 = 128;
pub const CSSM_WORDID_X509V2: _bindgen_ty_78 = 129;
pub const CSSM_WORDID_X509V3: _bindgen_ty_78 = 130;
pub const CSSM_WORDID_X9_ATTRIBUTE: _bindgen_ty_78 = 131;
pub const CSSM_WORDID_VENDOR_START: _bindgen_ty_78 = 65536;
pub const CSSM_WORDID_VENDOR_END: _bindgen_ty_78 = 2147418112;
pub type _bindgen_ty_78 = ::std::os::raw::c_int;
pub type CSSM_LIST_ELEMENT_TYPE = uint32;
pub type CSSM_LIST_ELEMENT_TYPE_PTR = *mut uint32;
pub const CSSM_LIST_ELEMENT_DATUM: _bindgen_ty_79 = 0;
pub const CSSM_LIST_ELEMENT_SUBLIST: _bindgen_ty_79 = 1;
pub const CSSM_LIST_ELEMENT_WORDID: _bindgen_ty_79 = 2;
pub type _bindgen_ty_79 = ::std::os::raw::c_uint;
pub type CSSM_LIST_TYPE = uint32;
pub type CSSM_LIST_TYPE_PTR = *mut uint32;
pub const CSSM_LIST_TYPE_UNKNOWN: _bindgen_ty_80 = 0;
pub const CSSM_LIST_TYPE_CUSTOM: _bindgen_ty_80 = 1;
pub const CSSM_LIST_TYPE_SEXPR: _bindgen_ty_80 = 2;
pub type _bindgen_ty_80 = ::std::os::raw::c_uint;
pub type CSSM_LIST_ELEMENT_PTR = *mut cssm_list_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_list {
    pub ListType: CSSM_LIST_TYPE,
    pub Head: CSSM_LIST_ELEMENT_PTR,
    pub Tail: CSSM_LIST_ELEMENT_PTR,
}
pub type CSSM_LIST = cssm_list;
pub type CSSM_LIST_PTR = *mut cssm_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_list_element {
    pub __bindgen_anon_1: cssm_list_element__bindgen_ty_1,
    pub NextElement: *mut cssm_list_element,
    pub WordID: CSSM_WORDID_TYPE,
    pub ElementType: CSSM_LIST_ELEMENT_TYPE,
    pub Element: cssm_list_element__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cssm_list_element__bindgen_ty_1 {
    pub Sublist: CSSM_LIST,
    pub Word: SecAsn1Item,
}
pub type CSSM_LIST_ELEMENT = cssm_list_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_TUPLE {
    pub Issuer: CSSM_LIST,
    pub Subject: CSSM_LIST,
    pub Delegate: CSSM_BOOL,
    pub AuthorizationTag: CSSM_LIST,
    pub ValidityPeriod: CSSM_LIST,
}
pub type CSSM_TUPLE_PTR = *mut CSSM_TUPLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tuplegroup {
    pub NumberOfTuples: uint32,
    pub Tuples: CSSM_TUPLE_PTR,
}
pub type CSSM_TUPLEGROUP = cssm_tuplegroup;
pub type CSSM_TUPLEGROUP_PTR = *mut cssm_tuplegroup;
pub type CSSM_SAMPLE_TYPE = CSSM_WORDID_TYPE;
pub const CSSM_SAMPLE_TYPE_PASSWORD: _bindgen_ty_81 = 79;
pub const CSSM_SAMPLE_TYPE_HASHED_PASSWORD: _bindgen_ty_81 = 43;
pub const CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD: _bindgen_ty_81 = 87;
pub const CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD: _bindgen_ty_81 = 84;
pub const CSSM_SAMPLE_TYPE_SIGNED_NONCE: _bindgen_ty_81 = 117;
pub const CSSM_SAMPLE_TYPE_SIGNED_SECRET: _bindgen_ty_81 = 118;
pub const CSSM_SAMPLE_TYPE_BIOMETRIC: _bindgen_ty_81 = 8;
pub const CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC: _bindgen_ty_81 = 86;
pub const CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC: _bindgen_ty_81 = 83;
pub const CSSM_SAMPLE_TYPE_THRESHOLD: _bindgen_ty_81 = 123;
pub type _bindgen_ty_81 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_sample {
    pub TypedSample: CSSM_LIST,
    pub Verifier: *const CSSM_SUBSERVICE_UID,
}
pub type CSSM_SAMPLE = cssm_sample;
pub type CSSM_SAMPLE_PTR = *mut cssm_sample;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_samplegroup {
    pub NumberOfSamples: uint32,
    pub Samples: *const CSSM_SAMPLE,
}
pub type CSSM_SAMPLEGROUP = cssm_samplegroup;
pub type CSSM_SAMPLEGROUP_PTR = *mut cssm_samplegroup;
pub type CSSM_MALLOC = ::std::option::Option<
    unsafe extern "C" fn(
        size: CSSM_SIZE,
        allocref: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CSSM_FREE = ::std::option::Option<
    unsafe extern "C" fn(
        memblock: *mut ::std::os::raw::c_void,
        allocref: *mut ::std::os::raw::c_void,
    ),
>;
pub type CSSM_REALLOC = ::std::option::Option<
    unsafe extern "C" fn(
        memblock: *mut ::std::os::raw::c_void,
        size: CSSM_SIZE,
        allocref: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CSSM_CALLOC = ::std::option::Option<
    unsafe extern "C" fn(
        num: uint32,
        size: CSSM_SIZE,
        allocref: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_memory_funcs {
    pub malloc_func: CSSM_MALLOC,
    pub free_func: CSSM_FREE,
    pub realloc_func: CSSM_REALLOC,
    pub calloc_func: CSSM_CALLOC,
    pub AllocRef: *mut ::std::os::raw::c_void,
}
pub type CSSM_MEMORY_FUNCS = cssm_memory_funcs;
pub type CSSM_MEMORY_FUNCS_PTR = *mut cssm_memory_funcs;
pub type CSSM_API_MEMORY_FUNCS = CSSM_MEMORY_FUNCS;
pub type CSSM_API_MEMORY_FUNCS_PTR = *mut CSSM_API_MEMORY_FUNCS;
pub type CSSM_CHALLENGE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        Challenge: *const CSSM_LIST,
        Response: CSSM_SAMPLEGROUP_PTR,
        CallerCtx: *mut ::std::os::raw::c_void,
        MemFuncs: *const CSSM_MEMORY_FUNCS,
    ) -> CSSM_RETURN,
>;
pub type CSSM_CERT_TYPE = uint32;
pub type CSSM_CERT_TYPE_PTR = *mut uint32;
pub const CSSM_CERT_UNKNOWN: _bindgen_ty_82 = 0;
pub const CSSM_CERT_X_509v1: _bindgen_ty_82 = 1;
pub const CSSM_CERT_X_509v2: _bindgen_ty_82 = 2;
pub const CSSM_CERT_X_509v3: _bindgen_ty_82 = 3;
pub const CSSM_CERT_PGP: _bindgen_ty_82 = 4;
pub const CSSM_CERT_SPKI: _bindgen_ty_82 = 5;
pub const CSSM_CERT_SDSIv1: _bindgen_ty_82 = 6;
pub const CSSM_CERT_Intel: _bindgen_ty_82 = 8;
pub const CSSM_CERT_X_509_ATTRIBUTE: _bindgen_ty_82 = 9;
pub const CSSM_CERT_X9_ATTRIBUTE: _bindgen_ty_82 = 10;
pub const CSSM_CERT_TUPLE: _bindgen_ty_82 = 11;
pub const CSSM_CERT_ACL_ENTRY: _bindgen_ty_82 = 12;
pub const CSSM_CERT_MULTIPLE: _bindgen_ty_82 = 32766;
pub const CSSM_CERT_LAST: _bindgen_ty_82 = 32767;
pub const CSSM_CL_CUSTOM_CERT_TYPE: _bindgen_ty_82 = 32768;
pub type _bindgen_ty_82 = ::std::os::raw::c_uint;
pub type CSSM_CERT_ENCODING = uint32;
pub type CSSM_CERT_ENCODING_PTR = *mut uint32;
pub const CSSM_CERT_ENCODING_UNKNOWN: _bindgen_ty_83 = 0;
pub const CSSM_CERT_ENCODING_CUSTOM: _bindgen_ty_83 = 1;
pub const CSSM_CERT_ENCODING_BER: _bindgen_ty_83 = 2;
pub const CSSM_CERT_ENCODING_DER: _bindgen_ty_83 = 3;
pub const CSSM_CERT_ENCODING_NDR: _bindgen_ty_83 = 4;
pub const CSSM_CERT_ENCODING_SEXPR: _bindgen_ty_83 = 5;
pub const CSSM_CERT_ENCODING_PGP: _bindgen_ty_83 = 6;
pub const CSSM_CERT_ENCODING_MULTIPLE: _bindgen_ty_83 = 32766;
pub const CSSM_CERT_ENCODING_LAST: _bindgen_ty_83 = 32767;
pub const CSSM_CL_CUSTOM_CERT_ENCODING: _bindgen_ty_83 = 32768;
pub type _bindgen_ty_83 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_encoded_cert {
    pub CertType: CSSM_CERT_TYPE,
    pub CertEncoding: CSSM_CERT_ENCODING,
    pub CertBlob: SecAsn1Item,
}
pub type CSSM_ENCODED_CERT = cssm_encoded_cert;
pub type CSSM_ENCODED_CERT_PTR = *mut cssm_encoded_cert;
pub type CSSM_CERT_PARSE_FORMAT = uint32;
pub type CSSM_CERT_PARSE_FORMAT_PTR = *mut uint32;
pub const CSSM_CERT_PARSE_FORMAT_NONE: _bindgen_ty_84 = 0;
pub const CSSM_CERT_PARSE_FORMAT_CUSTOM: _bindgen_ty_84 = 1;
pub const CSSM_CERT_PARSE_FORMAT_SEXPR: _bindgen_ty_84 = 2;
pub const CSSM_CERT_PARSE_FORMAT_COMPLEX: _bindgen_ty_84 = 3;
pub const CSSM_CERT_PARSE_FORMAT_OID_NAMED: _bindgen_ty_84 = 4;
pub const CSSM_CERT_PARSE_FORMAT_TUPLE: _bindgen_ty_84 = 5;
pub const CSSM_CERT_PARSE_FORMAT_MULTIPLE: _bindgen_ty_84 = 32766;
pub const CSSM_CERT_PARSE_FORMAT_LAST: _bindgen_ty_84 = 32767;
pub const CSSM_CL_CUSTOM_CERT_PARSE_FORMAT: _bindgen_ty_84 = 32768;
pub type _bindgen_ty_84 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_parsed_cert {
    pub CertType: CSSM_CERT_TYPE,
    pub ParsedCertFormat: CSSM_CERT_PARSE_FORMAT,
    pub ParsedCert: *mut ::std::os::raw::c_void,
}
pub type CSSM_PARSED_CERT = cssm_parsed_cert;
pub type CSSM_PARSED_CERT_PTR = *mut cssm_parsed_cert;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_cert_pair {
    pub EncodedCert: CSSM_ENCODED_CERT,
    pub ParsedCert: CSSM_PARSED_CERT,
}
pub type CSSM_CERT_PAIR = cssm_cert_pair;
pub type CSSM_CERT_PAIR_PTR = *mut cssm_cert_pair;
pub type CSSM_CERTGROUP_TYPE = uint32;
pub type CSSM_CERTGROUP_TYPE_PTR = *mut uint32;
pub const CSSM_CERTGROUP_DATA: _bindgen_ty_85 = 0;
pub const CSSM_CERTGROUP_ENCODED_CERT: _bindgen_ty_85 = 1;
pub const CSSM_CERTGROUP_PARSED_CERT: _bindgen_ty_85 = 2;
pub const CSSM_CERTGROUP_CERT_PAIR: _bindgen_ty_85 = 3;
pub type _bindgen_ty_85 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_certgroup {
    pub __bindgen_anon_1: cssm_certgroup__bindgen_ty_1,
    pub CertType: CSSM_CERT_TYPE,
    pub CertEncoding: CSSM_CERT_ENCODING,
    pub NumCerts: uint32,
    pub GroupList: cssm_certgroup__bindgen_ty_1,
    pub CertGroupType: CSSM_CERTGROUP_TYPE,
    pub Reserved: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cssm_certgroup__bindgen_ty_1 {
    pub CertList: CSSM_DATA_PTR,
    pub EncodedCertList: CSSM_ENCODED_CERT_PTR,
    pub ParsedCertList: CSSM_PARSED_CERT_PTR,
    pub PairCertList: CSSM_CERT_PAIR_PTR,
}
pub type CSSM_CERTGROUP = cssm_certgroup;
pub type CSSM_CERTGROUP_PTR = *mut cssm_certgroup;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_base_certs {
    pub TPHandle: CSSM_TP_HANDLE,
    pub CLHandle: CSSM_CL_HANDLE,
    pub Certs: CSSM_CERTGROUP,
}
pub type CSSM_BASE_CERTS = cssm_base_certs;
pub type CSSM_BASE_CERTS_PTR = *mut cssm_base_certs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_access_credentials {
    pub EntryTag: CSSM_STRING,
    pub BaseCerts: CSSM_BASE_CERTS,
    pub Samples: CSSM_SAMPLEGROUP,
    pub Callback: CSSM_CHALLENGE_CALLBACK,
    pub CallerCtx: *mut ::std::os::raw::c_void,
}
pub type CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;
pub type CSSM_ACCESS_CREDENTIALS_PTR = *mut cssm_access_credentials;
pub type CSSM_ACL_SUBJECT_TYPE = sint32;
pub const CSSM_ACL_SUBJECT_TYPE_ANY: _bindgen_ty_86 = 1;
pub const CSSM_ACL_SUBJECT_TYPE_THRESHOLD: _bindgen_ty_86 = 123;
pub const CSSM_ACL_SUBJECT_TYPE_PASSWORD: _bindgen_ty_86 = 79;
pub const CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD: _bindgen_ty_86 = 87;
pub const CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD: _bindgen_ty_86 = 84;
pub const CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY: _bindgen_ty_86 = 89;
pub const CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT: _bindgen_ty_86 = 44;
pub const CSSM_ACL_SUBJECT_TYPE_BIOMETRIC: _bindgen_ty_86 = 8;
pub const CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC: _bindgen_ty_86 = 86;
pub const CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC: _bindgen_ty_86 = 83;
pub const CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME: _bindgen_ty_86 = 58;
pub const CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME: _bindgen_ty_86 = 78;
pub type _bindgen_ty_86 = ::std::os::raw::c_uint;
pub type CSSM_ACL_AUTHORIZATION_TAG = sint32;
pub const CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START: _bindgen_ty_87 = 65536;
pub const CSSM_ACL_AUTHORIZATION_ANY: _bindgen_ty_87 = 1;
pub const CSSM_ACL_AUTHORIZATION_LOGIN: _bindgen_ty_87 = 57;
pub const CSSM_ACL_AUTHORIZATION_GENKEY: _bindgen_ty_87 = 41;
pub const CSSM_ACL_AUTHORIZATION_DELETE: _bindgen_ty_87 = 25;
pub const CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED: _bindgen_ty_87 = 38;
pub const CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR: _bindgen_ty_87 = 37;
pub const CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED: _bindgen_ty_87 = 48;
pub const CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR: _bindgen_ty_87 = 47;
pub const CSSM_ACL_AUTHORIZATION_SIGN: _bindgen_ty_87 = 115;
pub const CSSM_ACL_AUTHORIZATION_ENCRYPT: _bindgen_ty_87 = 35;
pub const CSSM_ACL_AUTHORIZATION_DECRYPT: _bindgen_ty_87 = 24;
pub const CSSM_ACL_AUTHORIZATION_MAC: _bindgen_ty_87 = 59;
pub const CSSM_ACL_AUTHORIZATION_DERIVE: _bindgen_ty_87 = 28;
pub const CSSM_ACL_AUTHORIZATION_DBS_CREATE: _bindgen_ty_87 = 22;
pub const CSSM_ACL_AUTHORIZATION_DBS_DELETE: _bindgen_ty_87 = 23;
pub const CSSM_ACL_AUTHORIZATION_DB_READ: _bindgen_ty_87 = 21;
pub const CSSM_ACL_AUTHORIZATION_DB_INSERT: _bindgen_ty_87 = 19;
pub const CSSM_ACL_AUTHORIZATION_DB_MODIFY: _bindgen_ty_87 = 20;
pub const CSSM_ACL_AUTHORIZATION_DB_DELETE: _bindgen_ty_87 = 17;
pub type _bindgen_ty_87 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_authorizationgroup {
    pub NumberOfAuthTags: uint32,
    pub AuthTags: *mut CSSM_ACL_AUTHORIZATION_TAG,
}
pub type CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;
pub type CSSM_AUTHORIZATIONGROUP_PTR = *mut cssm_authorizationgroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_validity_period {
    pub StartDate: SecAsn1Item,
    pub EndDate: SecAsn1Item,
}
pub type CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;
pub type CSSM_ACL_VALIDITY_PERIOD_PTR = *mut cssm_acl_validity_period;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_entry_prototype {
    pub TypedSubject: CSSM_LIST,
    pub Delegate: CSSM_BOOL,
    pub Authorization: CSSM_AUTHORIZATIONGROUP,
    pub TimeRange: CSSM_ACL_VALIDITY_PERIOD,
    pub EntryTag: CSSM_STRING,
}
pub type CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;
pub type CSSM_ACL_ENTRY_PROTOTYPE_PTR = *mut cssm_acl_entry_prototype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_owner_prototype {
    pub TypedSubject: CSSM_LIST,
    pub Delegate: CSSM_BOOL,
}
pub type CSSM_ACL_OWNER_PROTOTYPE = cssm_acl_owner_prototype;
pub type CSSM_ACL_OWNER_PROTOTYPE_PTR = *mut cssm_acl_owner_prototype;
pub type CSSM_ACL_SUBJECT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        SubjectRequest: *const CSSM_LIST,
        SubjectResponse: CSSM_LIST_PTR,
        CallerContext: *mut ::std::os::raw::c_void,
        MemFuncs: *const CSSM_MEMORY_FUNCS,
    ) -> CSSM_RETURN,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_entry_input {
    pub Prototype: CSSM_ACL_ENTRY_PROTOTYPE,
    pub Callback: CSSM_ACL_SUBJECT_CALLBACK,
    pub CallerContext: *mut ::std::os::raw::c_void,
}
pub type CSSM_ACL_ENTRY_INPUT = cssm_acl_entry_input;
pub type CSSM_ACL_ENTRY_INPUT_PTR = *mut cssm_acl_entry_input;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_resource_control_context {
    pub AccessCred: CSSM_ACCESS_CREDENTIALS_PTR,
    pub InitialAclEntry: CSSM_ACL_ENTRY_INPUT,
}
pub type CSSM_RESOURCE_CONTROL_CONTEXT = cssm_resource_control_context;
pub type CSSM_RESOURCE_CONTROL_CONTEXT_PTR = *mut cssm_resource_control_context;
pub type CSSM_ACL_HANDLE = CSSM_HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_entry_info {
    pub EntryPublicInfo: CSSM_ACL_ENTRY_PROTOTYPE,
    pub EntryHandle: CSSM_ACL_HANDLE,
}
pub type CSSM_ACL_ENTRY_INFO = cssm_acl_entry_info;
pub type CSSM_ACL_ENTRY_INFO_PTR = *mut cssm_acl_entry_info;
pub type CSSM_ACL_EDIT_MODE = uint32;
pub const CSSM_ACL_EDIT_MODE_ADD: _bindgen_ty_88 = 1;
pub const CSSM_ACL_EDIT_MODE_DELETE: _bindgen_ty_88 = 2;
pub const CSSM_ACL_EDIT_MODE_REPLACE: _bindgen_ty_88 = 3;
pub type _bindgen_ty_88 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_edit {
    pub EditMode: CSSM_ACL_EDIT_MODE,
    pub OldEntryHandle: CSSM_ACL_HANDLE,
    pub NewEntry: *const CSSM_ACL_ENTRY_INPUT,
}
pub type CSSM_ACL_EDIT = cssm_acl_edit;
pub type CSSM_ACL_EDIT_PTR = *mut cssm_acl_edit;
pub type CSSM_PROC_ADDR = ::std::option::Option<unsafe extern "C" fn()>;
pub type CSSM_PROC_ADDR_PTR = *mut CSSM_PROC_ADDR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_func_name_addr {
    pub Name: CSSM_STRING,
    pub Address: CSSM_PROC_ADDR,
}
pub type CSSM_FUNC_NAME_ADDR = cssm_func_name_addr;
pub type CSSM_FUNC_NAME_ADDR_PTR = *mut cssm_func_name_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_date {
    pub Year: [uint8; 4usize],
    pub Month: [uint8; 2usize],
    pub Day: [uint8; 2usize],
}
pub type CSSM_DATE = cssm_date;
pub type CSSM_DATE_PTR = *mut cssm_date;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_range {
    pub Min: uint32,
    pub Max: uint32,
}
pub type CSSM_RANGE = cssm_range;
pub type CSSM_RANGE_PTR = *mut cssm_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_query_size_data {
    pub SizeInputBlock: uint32,
    pub SizeOutputBlock: uint32,
}
pub type CSSM_QUERY_SIZE_DATA = cssm_query_size_data;
pub type CSSM_QUERY_SIZE_DATA_PTR = *mut cssm_query_size_data;
pub type CSSM_HEADERVERSION = uint32;
pub const CSSM_KEYHEADER_VERSION: _bindgen_ty_89 = 2;
pub type _bindgen_ty_89 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_key_size {
    pub LogicalKeySizeInBits: uint32,
    pub EffectiveKeySizeInBits: uint32,
}
pub type CSSM_KEY_SIZE = cssm_key_size;
pub type CSSM_KEY_SIZE_PTR = *mut cssm_key_size;
pub type CSSM_KEYBLOB_TYPE = uint32;
pub const CSSM_KEYBLOB_RAW: _bindgen_ty_90 = 0;
pub const CSSM_KEYBLOB_REFERENCE: _bindgen_ty_90 = 2;
pub const CSSM_KEYBLOB_WRAPPED: _bindgen_ty_90 = 3;
pub const CSSM_KEYBLOB_OTHER: _bindgen_ty_90 = 4294967295;
pub type _bindgen_ty_90 = ::std::os::raw::c_uint;
pub type CSSM_KEYBLOB_FORMAT = uint32;
pub const CSSM_KEYBLOB_RAW_FORMAT_NONE: _bindgen_ty_91 = 0;
pub const CSSM_KEYBLOB_RAW_FORMAT_PKCS1: _bindgen_ty_91 = 1;
pub const CSSM_KEYBLOB_RAW_FORMAT_PKCS3: _bindgen_ty_91 = 2;
pub const CSSM_KEYBLOB_RAW_FORMAT_MSCAPI: _bindgen_ty_91 = 3;
pub const CSSM_KEYBLOB_RAW_FORMAT_PGP: _bindgen_ty_91 = 4;
pub const CSSM_KEYBLOB_RAW_FORMAT_FIPS186: _bindgen_ty_91 = 5;
pub const CSSM_KEYBLOB_RAW_FORMAT_BSAFE: _bindgen_ty_91 = 6;
pub const CSSM_KEYBLOB_RAW_FORMAT_CCA: _bindgen_ty_91 = 9;
pub const CSSM_KEYBLOB_RAW_FORMAT_PKCS8: _bindgen_ty_91 = 10;
pub const CSSM_KEYBLOB_RAW_FORMAT_SPKI: _bindgen_ty_91 = 11;
pub const CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING: _bindgen_ty_91 = 12;
pub const CSSM_KEYBLOB_RAW_FORMAT_OTHER: _bindgen_ty_91 = 4294967295;
pub type _bindgen_ty_91 = ::std::os::raw::c_uint;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_NONE: _bindgen_ty_92 = 0;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8: _bindgen_ty_92 = 1;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7: _bindgen_ty_92 = 2;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI: _bindgen_ty_92 = 3;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER: _bindgen_ty_92 = 4294967295;
pub type _bindgen_ty_92 = ::std::os::raw::c_uint;
pub const CSSM_KEYBLOB_REF_FORMAT_INTEGER: _bindgen_ty_93 = 0;
pub const CSSM_KEYBLOB_REF_FORMAT_STRING: _bindgen_ty_93 = 1;
pub const CSSM_KEYBLOB_REF_FORMAT_SPKI: _bindgen_ty_93 = 2;
pub const CSSM_KEYBLOB_REF_FORMAT_OTHER: _bindgen_ty_93 = 4294967295;
pub type _bindgen_ty_93 = ::std::os::raw::c_uint;
pub type CSSM_KEYCLASS = uint32;
pub const CSSM_KEYCLASS_PUBLIC_KEY: _bindgen_ty_94 = 0;
pub const CSSM_KEYCLASS_PRIVATE_KEY: _bindgen_ty_94 = 1;
pub const CSSM_KEYCLASS_SESSION_KEY: _bindgen_ty_94 = 2;
pub const CSSM_KEYCLASS_SECRET_PART: _bindgen_ty_94 = 3;
pub const CSSM_KEYCLASS_OTHER: _bindgen_ty_94 = 4294967295;
pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
pub type CSSM_KEYATTR_FLAGS = uint32;
pub const CSSM_KEYATTR_RETURN_DEFAULT: _bindgen_ty_95 = 0;
pub const CSSM_KEYATTR_RETURN_DATA: _bindgen_ty_95 = 268435456;
pub const CSSM_KEYATTR_RETURN_REF: _bindgen_ty_95 = 536870912;
pub const CSSM_KEYATTR_RETURN_NONE: _bindgen_ty_95 = 1073741824;
pub const CSSM_KEYATTR_PERMANENT: _bindgen_ty_95 = 1;
pub const CSSM_KEYATTR_PRIVATE: _bindgen_ty_95 = 2;
pub const CSSM_KEYATTR_MODIFIABLE: _bindgen_ty_95 = 4;
pub const CSSM_KEYATTR_SENSITIVE: _bindgen_ty_95 = 8;
pub const CSSM_KEYATTR_EXTRACTABLE: _bindgen_ty_95 = 32;
pub const CSSM_KEYATTR_ALWAYS_SENSITIVE: _bindgen_ty_95 = 16;
pub const CSSM_KEYATTR_NEVER_EXTRACTABLE: _bindgen_ty_95 = 64;
pub type _bindgen_ty_95 = ::std::os::raw::c_uint;
pub type CSSM_KEYUSE = uint32;
pub const CSSM_KEYUSE_ANY: _bindgen_ty_96 = 2147483648;
pub const CSSM_KEYUSE_ENCRYPT: _bindgen_ty_96 = 1;
pub const CSSM_KEYUSE_DECRYPT: _bindgen_ty_96 = 2;
pub const CSSM_KEYUSE_SIGN: _bindgen_ty_96 = 4;
pub const CSSM_KEYUSE_VERIFY: _bindgen_ty_96 = 8;
pub const CSSM_KEYUSE_SIGN_RECOVER: _bindgen_ty_96 = 16;
pub const CSSM_KEYUSE_VERIFY_RECOVER: _bindgen_ty_96 = 32;
pub const CSSM_KEYUSE_WRAP: _bindgen_ty_96 = 64;
pub const CSSM_KEYUSE_UNWRAP: _bindgen_ty_96 = 128;
pub const CSSM_KEYUSE_DERIVE: _bindgen_ty_96 = 256;
pub type _bindgen_ty_96 = ::std::os::raw::c_uint;
pub type CSSM_ALGORITHMS = uint32;
pub const CSSM_ALGID_NONE: _bindgen_ty_97 = 0;
pub const CSSM_ALGID_CUSTOM: _bindgen_ty_97 = 1;
pub const CSSM_ALGID_DH: _bindgen_ty_97 = 2;
pub const CSSM_ALGID_PH: _bindgen_ty_97 = 3;
pub const CSSM_ALGID_KEA: _bindgen_ty_97 = 4;
pub const CSSM_ALGID_MD2: _bindgen_ty_97 = 5;
pub const CSSM_ALGID_MD4: _bindgen_ty_97 = 6;
pub const CSSM_ALGID_MD5: _bindgen_ty_97 = 7;
pub const CSSM_ALGID_SHA1: _bindgen_ty_97 = 8;
pub const CSSM_ALGID_NHASH: _bindgen_ty_97 = 9;
pub const CSSM_ALGID_HAVAL: _bindgen_ty_97 = 10;
pub const CSSM_ALGID_RIPEMD: _bindgen_ty_97 = 11;
pub const CSSM_ALGID_IBCHASH: _bindgen_ty_97 = 12;
pub const CSSM_ALGID_RIPEMAC: _bindgen_ty_97 = 13;
pub const CSSM_ALGID_DES: _bindgen_ty_97 = 14;
pub const CSSM_ALGID_DESX: _bindgen_ty_97 = 15;
pub const CSSM_ALGID_RDES: _bindgen_ty_97 = 16;
pub const CSSM_ALGID_3DES_3KEY_EDE: _bindgen_ty_97 = 17;
pub const CSSM_ALGID_3DES_2KEY_EDE: _bindgen_ty_97 = 18;
pub const CSSM_ALGID_3DES_1KEY_EEE: _bindgen_ty_97 = 19;
pub const CSSM_ALGID_3DES_3KEY: _bindgen_ty_97 = 17;
pub const CSSM_ALGID_3DES_3KEY_EEE: _bindgen_ty_97 = 20;
pub const CSSM_ALGID_3DES_2KEY: _bindgen_ty_97 = 18;
pub const CSSM_ALGID_3DES_2KEY_EEE: _bindgen_ty_97 = 21;
pub const CSSM_ALGID_3DES_1KEY: _bindgen_ty_97 = 20;
pub const CSSM_ALGID_IDEA: _bindgen_ty_97 = 22;
pub const CSSM_ALGID_RC2: _bindgen_ty_97 = 23;
pub const CSSM_ALGID_RC5: _bindgen_ty_97 = 24;
pub const CSSM_ALGID_RC4: _bindgen_ty_97 = 25;
pub const CSSM_ALGID_SEAL: _bindgen_ty_97 = 26;
pub const CSSM_ALGID_CAST: _bindgen_ty_97 = 27;
pub const CSSM_ALGID_BLOWFISH: _bindgen_ty_97 = 28;
pub const CSSM_ALGID_SKIPJACK: _bindgen_ty_97 = 29;
pub const CSSM_ALGID_LUCIFER: _bindgen_ty_97 = 30;
pub const CSSM_ALGID_MADRYGA: _bindgen_ty_97 = 31;
pub const CSSM_ALGID_FEAL: _bindgen_ty_97 = 32;
pub const CSSM_ALGID_REDOC: _bindgen_ty_97 = 33;
pub const CSSM_ALGID_REDOC3: _bindgen_ty_97 = 34;
pub const CSSM_ALGID_LOKI: _bindgen_ty_97 = 35;
pub const CSSM_ALGID_KHUFU: _bindgen_ty_97 = 36;
pub const CSSM_ALGID_KHAFRE: _bindgen_ty_97 = 37;
pub const CSSM_ALGID_MMB: _bindgen_ty_97 = 38;
pub const CSSM_ALGID_GOST: _bindgen_ty_97 = 39;
pub const CSSM_ALGID_SAFER: _bindgen_ty_97 = 40;
pub const CSSM_ALGID_CRAB: _bindgen_ty_97 = 41;
pub const CSSM_ALGID_RSA: _bindgen_ty_97 = 42;
pub const CSSM_ALGID_DSA: _bindgen_ty_97 = 43;
pub const CSSM_ALGID_MD5WithRSA: _bindgen_ty_97 = 44;
pub const CSSM_ALGID_MD2WithRSA: _bindgen_ty_97 = 45;
pub const CSSM_ALGID_ElGamal: _bindgen_ty_97 = 46;
pub const CSSM_ALGID_MD2Random: _bindgen_ty_97 = 47;
pub const CSSM_ALGID_MD5Random: _bindgen_ty_97 = 48;
pub const CSSM_ALGID_SHARandom: _bindgen_ty_97 = 49;
pub const CSSM_ALGID_DESRandom: _bindgen_ty_97 = 50;
pub const CSSM_ALGID_SHA1WithRSA: _bindgen_ty_97 = 51;
pub const CSSM_ALGID_CDMF: _bindgen_ty_97 = 52;
pub const CSSM_ALGID_CAST3: _bindgen_ty_97 = 53;
pub const CSSM_ALGID_CAST5: _bindgen_ty_97 = 54;
pub const CSSM_ALGID_GenericSecret: _bindgen_ty_97 = 55;
pub const CSSM_ALGID_ConcatBaseAndKey: _bindgen_ty_97 = 56;
pub const CSSM_ALGID_ConcatKeyAndBase: _bindgen_ty_97 = 57;
pub const CSSM_ALGID_ConcatBaseAndData: _bindgen_ty_97 = 58;
pub const CSSM_ALGID_ConcatDataAndBase: _bindgen_ty_97 = 59;
pub const CSSM_ALGID_XORBaseAndData: _bindgen_ty_97 = 60;
pub const CSSM_ALGID_ExtractFromKey: _bindgen_ty_97 = 61;
pub const CSSM_ALGID_SSL3PrePrimaryGen: _bindgen_ty_97 = 62;
pub const CSSM_ALGID_SSL3PreMasterGen: _bindgen_ty_97 = 62;
pub const CSSM_ALGID_SSL3PrimaryDerive: _bindgen_ty_97 = 63;
pub const CSSM_ALGID_SSL3MasterDerive: _bindgen_ty_97 = 63;
pub const CSSM_ALGID_SSL3KeyAndMacDerive: _bindgen_ty_97 = 64;
pub const CSSM_ALGID_SSL3MD5_MAC: _bindgen_ty_97 = 65;
pub const CSSM_ALGID_SSL3SHA1_MAC: _bindgen_ty_97 = 66;
pub const CSSM_ALGID_PKCS5_PBKDF1_MD5: _bindgen_ty_97 = 67;
pub const CSSM_ALGID_PKCS5_PBKDF1_MD2: _bindgen_ty_97 = 68;
pub const CSSM_ALGID_PKCS5_PBKDF1_SHA1: _bindgen_ty_97 = 69;
pub const CSSM_ALGID_WrapLynks: _bindgen_ty_97 = 70;
pub const CSSM_ALGID_WrapSET_OAEP: _bindgen_ty_97 = 71;
pub const CSSM_ALGID_BATON: _bindgen_ty_97 = 72;
pub const CSSM_ALGID_ECDSA: _bindgen_ty_97 = 73;
pub const CSSM_ALGID_MAYFLY: _bindgen_ty_97 = 74;
pub const CSSM_ALGID_JUNIPER: _bindgen_ty_97 = 75;
pub const CSSM_ALGID_FASTHASH: _bindgen_ty_97 = 76;
pub const CSSM_ALGID_3DES: _bindgen_ty_97 = 77;
pub const CSSM_ALGID_SSL3MD5: _bindgen_ty_97 = 78;
pub const CSSM_ALGID_SSL3SHA1: _bindgen_ty_97 = 79;
pub const CSSM_ALGID_FortezzaTimestamp: _bindgen_ty_97 = 80;
pub const CSSM_ALGID_SHA1WithDSA: _bindgen_ty_97 = 81;
pub const CSSM_ALGID_SHA1WithECDSA: _bindgen_ty_97 = 82;
pub const CSSM_ALGID_DSA_BSAFE: _bindgen_ty_97 = 83;
pub const CSSM_ALGID_ECDH: _bindgen_ty_97 = 84;
pub const CSSM_ALGID_ECMQV: _bindgen_ty_97 = 85;
pub const CSSM_ALGID_PKCS12_SHA1_PBE: _bindgen_ty_97 = 86;
pub const CSSM_ALGID_ECNRA: _bindgen_ty_97 = 87;
pub const CSSM_ALGID_SHA1WithECNRA: _bindgen_ty_97 = 88;
pub const CSSM_ALGID_ECES: _bindgen_ty_97 = 89;
pub const CSSM_ALGID_ECAES: _bindgen_ty_97 = 90;
pub const CSSM_ALGID_SHA1HMAC: _bindgen_ty_97 = 91;
pub const CSSM_ALGID_FIPS186Random: _bindgen_ty_97 = 92;
pub const CSSM_ALGID_ECC: _bindgen_ty_97 = 93;
pub const CSSM_ALGID_MQV: _bindgen_ty_97 = 94;
pub const CSSM_ALGID_NRA: _bindgen_ty_97 = 95;
pub const CSSM_ALGID_IntelPlatformRandom: _bindgen_ty_97 = 96;
pub const CSSM_ALGID_UTC: _bindgen_ty_97 = 97;
pub const CSSM_ALGID_HAVAL3: _bindgen_ty_97 = 98;
pub const CSSM_ALGID_HAVAL4: _bindgen_ty_97 = 99;
pub const CSSM_ALGID_HAVAL5: _bindgen_ty_97 = 100;
pub const CSSM_ALGID_TIGER: _bindgen_ty_97 = 101;
pub const CSSM_ALGID_MD5HMAC: _bindgen_ty_97 = 102;
pub const CSSM_ALGID_PKCS5_PBKDF2: _bindgen_ty_97 = 103;
pub const CSSM_ALGID_RUNNING_COUNTER: _bindgen_ty_97 = 104;
pub const CSSM_ALGID_LAST: _bindgen_ty_97 = 2147483647;
pub const CSSM_ALGID_VENDOR_DEFINED: _bindgen_ty_97 = 2147483648;
pub type _bindgen_ty_97 = ::std::os::raw::c_uint;
pub type CSSM_ENCRYPT_MODE = uint32;
pub const CSSM_ALGMODE_NONE: _bindgen_ty_98 = 0;
pub const CSSM_ALGMODE_CUSTOM: _bindgen_ty_98 = 1;
pub const CSSM_ALGMODE_ECB: _bindgen_ty_98 = 2;
pub const CSSM_ALGMODE_ECBPad: _bindgen_ty_98 = 3;
pub const CSSM_ALGMODE_CBC: _bindgen_ty_98 = 4;
pub const CSSM_ALGMODE_CBC_IV8: _bindgen_ty_98 = 5;
pub const CSSM_ALGMODE_CBCPadIV8: _bindgen_ty_98 = 6;
pub const CSSM_ALGMODE_CFB: _bindgen_ty_98 = 7;
pub const CSSM_ALGMODE_CFB_IV8: _bindgen_ty_98 = 8;
pub const CSSM_ALGMODE_CFBPadIV8: _bindgen_ty_98 = 9;
pub const CSSM_ALGMODE_OFB: _bindgen_ty_98 = 10;
pub const CSSM_ALGMODE_OFB_IV8: _bindgen_ty_98 = 11;
pub const CSSM_ALGMODE_OFBPadIV8: _bindgen_ty_98 = 12;
pub const CSSM_ALGMODE_COUNTER: _bindgen_ty_98 = 13;
pub const CSSM_ALGMODE_BC: _bindgen_ty_98 = 14;
pub const CSSM_ALGMODE_PCBC: _bindgen_ty_98 = 15;
pub const CSSM_ALGMODE_CBCC: _bindgen_ty_98 = 16;
pub const CSSM_ALGMODE_OFBNLF: _bindgen_ty_98 = 17;
pub const CSSM_ALGMODE_PBC: _bindgen_ty_98 = 18;
pub const CSSM_ALGMODE_PFB: _bindgen_ty_98 = 19;
pub const CSSM_ALGMODE_CBCPD: _bindgen_ty_98 = 20;
pub const CSSM_ALGMODE_PUBLIC_KEY: _bindgen_ty_98 = 21;
pub const CSSM_ALGMODE_PRIVATE_KEY: _bindgen_ty_98 = 22;
pub const CSSM_ALGMODE_SHUFFLE: _bindgen_ty_98 = 23;
pub const CSSM_ALGMODE_ECB64: _bindgen_ty_98 = 24;
pub const CSSM_ALGMODE_CBC64: _bindgen_ty_98 = 25;
pub const CSSM_ALGMODE_OFB64: _bindgen_ty_98 = 26;
pub const CSSM_ALGMODE_CFB32: _bindgen_ty_98 = 28;
pub const CSSM_ALGMODE_CFB16: _bindgen_ty_98 = 29;
pub const CSSM_ALGMODE_CFB8: _bindgen_ty_98 = 30;
pub const CSSM_ALGMODE_WRAP: _bindgen_ty_98 = 31;
pub const CSSM_ALGMODE_PRIVATE_WRAP: _bindgen_ty_98 = 32;
pub const CSSM_ALGMODE_RELAYX: _bindgen_ty_98 = 33;
pub const CSSM_ALGMODE_ECB128: _bindgen_ty_98 = 34;
pub const CSSM_ALGMODE_ECB96: _bindgen_ty_98 = 35;
pub const CSSM_ALGMODE_CBC128: _bindgen_ty_98 = 36;
pub const CSSM_ALGMODE_OAEP_HASH: _bindgen_ty_98 = 37;
pub const CSSM_ALGMODE_PKCS1_EME_V15: _bindgen_ty_98 = 38;
pub const CSSM_ALGMODE_PKCS1_EME_OAEP: _bindgen_ty_98 = 39;
pub const CSSM_ALGMODE_PKCS1_EMSA_V15: _bindgen_ty_98 = 40;
pub const CSSM_ALGMODE_ISO_9796: _bindgen_ty_98 = 41;
pub const CSSM_ALGMODE_X9_31: _bindgen_ty_98 = 42;
pub const CSSM_ALGMODE_LAST: _bindgen_ty_98 = 2147483647;
pub const CSSM_ALGMODE_VENDOR_DEFINED: _bindgen_ty_98 = 2147483648;
pub type _bindgen_ty_98 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_keyheader {
    pub HeaderVersion: CSSM_HEADERVERSION,
    pub CspId: CSSM_GUID,
    pub BlobType: CSSM_KEYBLOB_TYPE,
    pub Format: CSSM_KEYBLOB_FORMAT,
    pub AlgorithmId: CSSM_ALGORITHMS,
    pub KeyClass: CSSM_KEYCLASS,
    pub LogicalKeySizeInBits: uint32,
    pub KeyAttr: CSSM_KEYATTR_FLAGS,
    pub KeyUsage: CSSM_KEYUSE,
    pub StartDate: CSSM_DATE,
    pub EndDate: CSSM_DATE,
    pub WrapAlgorithmId: CSSM_ALGORITHMS,
    pub WrapMode: CSSM_ENCRYPT_MODE,
    pub Reserved: uint32,
}
pub type CSSM_KEYHEADER = cssm_keyheader;
pub type CSSM_KEYHEADER_PTR = *mut cssm_keyheader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_key {
    pub KeyHeader: CSSM_KEYHEADER,
    pub KeyData: SecAsn1Item,
}
pub type CSSM_KEY = cssm_key;
pub type CSSM_KEY_PTR = *mut cssm_key;
pub type CSSM_WRAP_KEY = CSSM_KEY;
pub type CSSM_WRAP_KEY_PTR = *mut CSSM_KEY;
pub type CSSM_CSPTYPE = uint32;
pub const CSSM_CSP_SOFTWARE: _bindgen_ty_99 = 1;
pub const CSSM_CSP_HARDWARE: _bindgen_ty_99 = 2;
pub const CSSM_CSP_HYBRID: _bindgen_ty_99 = 3;
pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_dl_db_handle {
    pub DLHandle: CSSM_DL_HANDLE,
    pub DBHandle: CSSM_DB_HANDLE,
}
pub type CSSM_DL_DB_HANDLE = cssm_dl_db_handle;
pub type CSSM_DL_DB_HANDLE_PTR = *mut cssm_dl_db_handle;
pub type CSSM_CONTEXT_TYPE = uint32;
pub const CSSM_ALGCLASS_NONE: _bindgen_ty_100 = 0;
pub const CSSM_ALGCLASS_CUSTOM: _bindgen_ty_100 = 1;
pub const CSSM_ALGCLASS_SIGNATURE: _bindgen_ty_100 = 2;
pub const CSSM_ALGCLASS_SYMMETRIC: _bindgen_ty_100 = 3;
pub const CSSM_ALGCLASS_DIGEST: _bindgen_ty_100 = 4;
pub const CSSM_ALGCLASS_RANDOMGEN: _bindgen_ty_100 = 5;
pub const CSSM_ALGCLASS_UNIQUEGEN: _bindgen_ty_100 = 6;
pub const CSSM_ALGCLASS_MAC: _bindgen_ty_100 = 7;
pub const CSSM_ALGCLASS_ASYMMETRIC: _bindgen_ty_100 = 8;
pub const CSSM_ALGCLASS_KEYGEN: _bindgen_ty_100 = 9;
pub const CSSM_ALGCLASS_DERIVEKEY: _bindgen_ty_100 = 10;
pub type _bindgen_ty_100 = ::std::os::raw::c_uint;
pub const CSSM_ATTRIBUTE_DATA_NONE: _bindgen_ty_101 = 0;
pub const CSSM_ATTRIBUTE_DATA_UINT32: _bindgen_ty_101 = 268435456;
pub const CSSM_ATTRIBUTE_DATA_CSSM_DATA: _bindgen_ty_101 = 536870912;
pub const CSSM_ATTRIBUTE_DATA_CRYPTO_DATA: _bindgen_ty_101 = 805306368;
pub const CSSM_ATTRIBUTE_DATA_KEY: _bindgen_ty_101 = 1073741824;
pub const CSSM_ATTRIBUTE_DATA_STRING: _bindgen_ty_101 = 1342177280;
pub const CSSM_ATTRIBUTE_DATA_DATE: _bindgen_ty_101 = 1610612736;
pub const CSSM_ATTRIBUTE_DATA_RANGE: _bindgen_ty_101 = 1879048192;
pub const CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS: _bindgen_ty_101 = 2147483648;
pub const CSSM_ATTRIBUTE_DATA_VERSION: _bindgen_ty_101 = 16777216;
pub const CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE: _bindgen_ty_101 = 33554432;
pub const CSSM_ATTRIBUTE_DATA_KR_PROFILE: _bindgen_ty_101 = 50331648;
pub const CSSM_ATTRIBUTE_TYPE_MASK: _bindgen_ty_101 = 4278190080;
pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
pub type CSSM_ATTRIBUTE_TYPE = uint32;
pub const CSSM_ATTRIBUTE_NONE: _bindgen_ty_102 = 0;
pub const CSSM_ATTRIBUTE_CUSTOM: _bindgen_ty_102 = 536870913;
pub const CSSM_ATTRIBUTE_DESCRIPTION: _bindgen_ty_102 = 1342177282;
pub const CSSM_ATTRIBUTE_KEY: _bindgen_ty_102 = 1073741827;
pub const CSSM_ATTRIBUTE_INIT_VECTOR: _bindgen_ty_102 = 536870916;
pub const CSSM_ATTRIBUTE_SALT: _bindgen_ty_102 = 536870917;
pub const CSSM_ATTRIBUTE_PADDING: _bindgen_ty_102 = 268435462;
pub const CSSM_ATTRIBUTE_RANDOM: _bindgen_ty_102 = 536870919;
pub const CSSM_ATTRIBUTE_SEED: _bindgen_ty_102 = 805306376;
pub const CSSM_ATTRIBUTE_PASSPHRASE: _bindgen_ty_102 = 805306377;
pub const CSSM_ATTRIBUTE_KEY_LENGTH: _bindgen_ty_102 = 268435466;
pub const CSSM_ATTRIBUTE_KEY_LENGTH_RANGE: _bindgen_ty_102 = 1879048203;
pub const CSSM_ATTRIBUTE_BLOCK_SIZE: _bindgen_ty_102 = 268435468;
pub const CSSM_ATTRIBUTE_OUTPUT_SIZE: _bindgen_ty_102 = 268435469;
pub const CSSM_ATTRIBUTE_ROUNDS: _bindgen_ty_102 = 268435470;
pub const CSSM_ATTRIBUTE_IV_SIZE: _bindgen_ty_102 = 268435471;
pub const CSSM_ATTRIBUTE_ALG_PARAMS: _bindgen_ty_102 = 536870928;
pub const CSSM_ATTRIBUTE_LABEL: _bindgen_ty_102 = 536870929;
pub const CSSM_ATTRIBUTE_KEY_TYPE: _bindgen_ty_102 = 268435474;
pub const CSSM_ATTRIBUTE_MODE: _bindgen_ty_102 = 268435475;
pub const CSSM_ATTRIBUTE_EFFECTIVE_BITS: _bindgen_ty_102 = 268435476;
pub const CSSM_ATTRIBUTE_START_DATE: _bindgen_ty_102 = 1610612757;
pub const CSSM_ATTRIBUTE_END_DATE: _bindgen_ty_102 = 1610612758;
pub const CSSM_ATTRIBUTE_KEYUSAGE: _bindgen_ty_102 = 268435479;
pub const CSSM_ATTRIBUTE_KEYATTR: _bindgen_ty_102 = 268435480;
pub const CSSM_ATTRIBUTE_VERSION: _bindgen_ty_102 = 16777241;
pub const CSSM_ATTRIBUTE_PRIME: _bindgen_ty_102 = 536870938;
pub const CSSM_ATTRIBUTE_BASE: _bindgen_ty_102 = 536870939;
pub const CSSM_ATTRIBUTE_SUBPRIME: _bindgen_ty_102 = 536870940;
pub const CSSM_ATTRIBUTE_ALG_ID: _bindgen_ty_102 = 268435485;
pub const CSSM_ATTRIBUTE_ITERATION_COUNT: _bindgen_ty_102 = 268435486;
pub const CSSM_ATTRIBUTE_ROUNDS_RANGE: _bindgen_ty_102 = 1879048223;
pub const CSSM_ATTRIBUTE_KRPROFILE_LOCAL: _bindgen_ty_102 = 50331680;
pub const CSSM_ATTRIBUTE_KRPROFILE_REMOTE: _bindgen_ty_102 = 50331681;
pub const CSSM_ATTRIBUTE_CSP_HANDLE: _bindgen_ty_102 = 268435490;
pub const CSSM_ATTRIBUTE_DL_DB_HANDLE: _bindgen_ty_102 = 33554467;
pub const CSSM_ATTRIBUTE_ACCESS_CREDENTIALS: _bindgen_ty_102 = 2147483684;
pub const CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT: _bindgen_ty_102 = 268435493;
pub const CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT: _bindgen_ty_102 = 268435494;
pub const CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT: _bindgen_ty_102 = 268435495;
pub const CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT: _bindgen_ty_102 = 268435496;
pub type _bindgen_ty_102 = ::std::os::raw::c_uint;
pub type CSSM_PADDING = uint32;
pub const CSSM_PADDING_NONE: _bindgen_ty_103 = 0;
pub const CSSM_PADDING_CUSTOM: _bindgen_ty_103 = 1;
pub const CSSM_PADDING_ZERO: _bindgen_ty_103 = 2;
pub const CSSM_PADDING_ONE: _bindgen_ty_103 = 3;
pub const CSSM_PADDING_ALTERNATE: _bindgen_ty_103 = 4;
pub const CSSM_PADDING_FF: _bindgen_ty_103 = 5;
pub const CSSM_PADDING_PKCS5: _bindgen_ty_103 = 6;
pub const CSSM_PADDING_PKCS7: _bindgen_ty_103 = 7;
pub const CSSM_PADDING_CIPHERSTEALING: _bindgen_ty_103 = 8;
pub const CSSM_PADDING_RANDOM: _bindgen_ty_103 = 9;
pub const CSSM_PADDING_PKCS1: _bindgen_ty_103 = 10;
pub const CSSM_PADDING_SIGRAW: _bindgen_ty_103 = 11;
pub const CSSM_PADDING_VENDOR_DEFINED: _bindgen_ty_103 = 2147483648;
pub type _bindgen_ty_103 = ::std::os::raw::c_uint;
pub type CSSM_KEY_TYPE = CSSM_ALGORITHMS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_context_attribute {
    pub AttributeType: CSSM_ATTRIBUTE_TYPE,
    pub AttributeLength: uint32,
    pub Attribute: cssm_context_attribute_cssm_context_attribute_value,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cssm_context_attribute_cssm_context_attribute_value {
    pub String: *mut ::std::os::raw::c_char,
    pub Uint32: uint32,
    pub AccessCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
    pub Key: CSSM_KEY_PTR,
    pub Data: CSSM_DATA_PTR,
    pub Padding: CSSM_PADDING,
    pub Date: CSSM_DATE_PTR,
    pub Range: CSSM_RANGE_PTR,
    pub CryptoData: CSSM_CRYPTO_DATA_PTR,
    pub Version: CSSM_VERSION_PTR,
    pub DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
    pub KRProfile: *mut cssm_kr_profile,
}
pub type CSSM_CONTEXT_ATTRIBUTE = cssm_context_attribute;
pub type CSSM_CONTEXT_ATTRIBUTE_PTR = *mut cssm_context_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_context {
    pub ContextType: CSSM_CONTEXT_TYPE,
    pub AlgorithmType: CSSM_ALGORITHMS,
    pub NumberOfAttributes: uint32,
    pub ContextAttributes: CSSM_CONTEXT_ATTRIBUTE_PTR,
    pub CSPHandle: CSSM_CSP_HANDLE,
    pub Privileged: CSSM_BOOL,
    pub EncryptionProhibited: uint32,
    pub WorkFactor: uint32,
    pub Reserved: uint32,
}
pub type CSSM_CONTEXT = cssm_context;
pub type CSSM_CONTEXT_PTR = *mut cssm_context;
pub type CSSM_SC_FLAGS = uint32;
pub const CSSM_CSP_TOK_RNG: _bindgen_ty_104 = 1;
pub const CSSM_CSP_TOK_CLOCK_EXISTS: _bindgen_ty_104 = 64;
pub type _bindgen_ty_104 = ::std::os::raw::c_uint;
pub type CSSM_CSP_READER_FLAGS = uint32;
pub const CSSM_CSP_RDR_TOKENPRESENT: _bindgen_ty_105 = 1;
pub const CSSM_CSP_RDR_EXISTS: _bindgen_ty_105 = 2;
pub const CSSM_CSP_RDR_HW: _bindgen_ty_105 = 4;
pub type _bindgen_ty_105 = ::std::os::raw::c_uint;
pub type CSSM_CSP_FLAGS = uint32;
pub const CSSM_CSP_TOK_WRITE_PROTECTED: _bindgen_ty_106 = 2;
pub const CSSM_CSP_TOK_LOGIN_REQUIRED: _bindgen_ty_106 = 4;
pub const CSSM_CSP_TOK_USER_PIN_INITIALIZED: _bindgen_ty_106 = 8;
pub const CSSM_CSP_TOK_PROT_AUTHENTICATION: _bindgen_ty_106 = 256;
pub const CSSM_CSP_TOK_USER_PIN_EXPIRED: _bindgen_ty_106 = 1048576;
pub const CSSM_CSP_TOK_SESSION_KEY_PASSWORD: _bindgen_ty_106 = 2097152;
pub const CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD: _bindgen_ty_106 = 4194304;
pub const CSSM_CSP_STORES_PRIVATE_KEYS: _bindgen_ty_106 = 16777216;
pub const CSSM_CSP_STORES_PUBLIC_KEYS: _bindgen_ty_106 = 33554432;
pub const CSSM_CSP_STORES_SESSION_KEYS: _bindgen_ty_106 = 67108864;
pub const CSSM_CSP_STORES_CERTIFICATES: _bindgen_ty_106 = 134217728;
pub const CSSM_CSP_STORES_GENERIC: _bindgen_ty_106 = 268435456;
pub type _bindgen_ty_106 = ::std::os::raw::c_uint;
pub type CSSM_PKCS_OAEP_MGF = uint32;
pub const CSSM_PKCS_OAEP_MGF_NONE: _bindgen_ty_107 = 0;
pub const CSSM_PKCS_OAEP_MGF1_SHA1: _bindgen_ty_107 = 1;
pub const CSSM_PKCS_OAEP_MGF1_MD5: _bindgen_ty_107 = 2;
pub type _bindgen_ty_107 = ::std::os::raw::c_uint;
pub type CSSM_PKCS_OAEP_PSOURCE = uint32;
pub const CSSM_PKCS_OAEP_PSOURCE_NONE: _bindgen_ty_108 = 0;
pub const CSSM_PKCS_OAEP_PSOURCE_Pspecified: _bindgen_ty_108 = 1;
pub type _bindgen_ty_108 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_pkcs1_oaep_params {
    pub HashAlgorithm: uint32,
    pub HashParams: SecAsn1Item,
    pub MGF: CSSM_PKCS_OAEP_MGF,
    pub MGFParams: SecAsn1Item,
    pub PSource: CSSM_PKCS_OAEP_PSOURCE,
    pub PSourceParams: SecAsn1Item,
}
pub type CSSM_PKCS1_OAEP_PARAMS = cssm_pkcs1_oaep_params;
pub type CSSM_PKCS1_OAEP_PARAMS_PTR = *mut cssm_pkcs1_oaep_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_csp_operational_statistics {
    pub UserAuthenticated: CSSM_BOOL,
    pub DeviceFlags: CSSM_CSP_FLAGS,
    pub TokenMaxSessionCount: uint32,
    pub TokenOpenedSessionCount: uint32,
    pub TokenMaxRWSessionCount: uint32,
    pub TokenOpenedRWSessionCount: uint32,
    pub TokenTotalPublicMem: uint32,
    pub TokenFreePublicMem: uint32,
    pub TokenTotalPrivateMem: uint32,
    pub TokenFreePrivateMem: uint32,
}
pub type CSSM_CSP_OPERATIONAL_STATISTICS = cssm_csp_operational_statistics;
pub type CSSM_CSP_OPERATIONAL_STATISTICS_PTR = *mut cssm_csp_operational_statistics;
pub const CSSM_VALUE_NOT_AVAILABLE: _bindgen_ty_109 = -1;
pub type _bindgen_ty_109 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_pkcs5_pbkdf1_params {
    pub Passphrase: SecAsn1Item,
    pub InitVector: SecAsn1Item,
}
pub type CSSM_PKCS5_PBKDF1_PARAMS = cssm_pkcs5_pbkdf1_params;
pub type CSSM_PKCS5_PBKDF1_PARAMS_PTR = *mut cssm_pkcs5_pbkdf1_params;
pub type CSSM_PKCS5_PBKDF2_PRF = uint32;
pub const CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1: _bindgen_ty_110 = 0;
pub type _bindgen_ty_110 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_pkcs5_pbkdf2_params {
    pub Passphrase: SecAsn1Item,
    pub PseudoRandomFunction: CSSM_PKCS5_PBKDF2_PRF,
}
pub type CSSM_PKCS5_PBKDF2_PARAMS = cssm_pkcs5_pbkdf2_params;
pub type CSSM_PKCS5_PBKDF2_PARAMS_PTR = *mut cssm_pkcs5_pbkdf2_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_kea_derive_params {
    pub Rb: SecAsn1Item,
    pub Yb: SecAsn1Item,
}
pub type CSSM_KEA_DERIVE_PARAMS = cssm_kea_derive_params;
pub type CSSM_KEA_DERIVE_PARAMS_PTR = *mut cssm_kea_derive_params;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_authority_id {
    pub AuthorityCert: *mut SecAsn1Item,
    pub AuthorityLocation: CSSM_NET_ADDRESS_PTR,
}
pub type CSSM_TP_AUTHORITY_ID = cssm_tp_authority_id;
pub type CSSM_TP_AUTHORITY_ID_PTR = *mut cssm_tp_authority_id;
pub type CSSM_TP_AUTHORITY_REQUEST_TYPE = uint32;
pub type CSSM_TP_AUTHORITY_REQUEST_TYPE_PTR = *mut uint32;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTISSUE: _bindgen_ty_111 = 1;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE: _bindgen_ty_111 = 2;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND: _bindgen_ty_111 = 3;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTRESUME: _bindgen_ty_111 = 4;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY: _bindgen_ty_111 = 5;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE: _bindgen_ty_111 = 6;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER: _bindgen_ty_111 = 7;
pub const CSSM_TP_AUTHORITY_REQUEST_CRLISSUE: _bindgen_ty_111 = 256;
pub type _bindgen_ty_111 = ::std::os::raw::c_uint;
pub type CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ModuleHandle: CSSM_MODULE_HANDLE,
        CallerCtx: *mut ::std::os::raw::c_void,
        VerifiedCert: CSSM_DATA_PTR,
    ) -> CSSM_RETURN,
>;
pub type CSSM_OID_PTR = *mut SecAsn1Oid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_field {
    pub FieldOid: SecAsn1Oid,
    pub FieldValue: SecAsn1Item,
}
pub type CSSM_FIELD = cssm_field;
pub type CSSM_FIELD_PTR = *mut cssm_field;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_policyinfo {
    pub NumberOfPolicyIds: uint32,
    pub PolicyIds: CSSM_FIELD_PTR,
    pub PolicyControl: *mut ::std::os::raw::c_void,
}
pub type CSSM_TP_POLICYINFO = cssm_tp_policyinfo;
pub type CSSM_TP_POLICYINFO_PTR = *mut cssm_tp_policyinfo;
pub type CSSM_TP_SERVICES = uint32;
pub const CSSM_TP_KEY_ARCHIVE: _bindgen_ty_112 = 1;
pub const CSSM_TP_CERT_PUBLISH: _bindgen_ty_112 = 2;
pub const CSSM_TP_CERT_NOTIFY_RENEW: _bindgen_ty_112 = 4;
pub const CSSM_TP_CERT_DIR_UPDATE: _bindgen_ty_112 = 8;
pub const CSSM_TP_CRL_DISTRIBUTE: _bindgen_ty_112 = 16;
pub type _bindgen_ty_112 = ::std::os::raw::c_uint;
pub type CSSM_TP_ACTION = uint32;
pub const CSSM_TP_ACTION_DEFAULT: _bindgen_ty_113 = 0;
pub type _bindgen_ty_113 = ::std::os::raw::c_uint;
pub type CSSM_TP_STOP_ON = uint32;
pub const CSSM_TP_STOP_ON_POLICY: _bindgen_ty_114 = 0;
pub const CSSM_TP_STOP_ON_NONE: _bindgen_ty_114 = 1;
pub const CSSM_TP_STOP_ON_FIRST_PASS: _bindgen_ty_114 = 2;
pub const CSSM_TP_STOP_ON_FIRST_FAIL: _bindgen_ty_114 = 3;
pub type _bindgen_ty_114 = ::std::os::raw::c_uint;
pub type CSSM_TIMESTRING = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_dl_db_list {
    pub NumHandles: uint32,
    pub DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
}
pub type CSSM_DL_DB_LIST = cssm_dl_db_list;
pub type CSSM_DL_DB_LIST_PTR = *mut cssm_dl_db_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_callerauth_context {
    pub Policy: CSSM_TP_POLICYINFO,
    pub VerifyTime: CSSM_TIMESTRING,
    pub VerificationAbortOn: CSSM_TP_STOP_ON,
    pub CallbackWithVerifiedCert: CSSM_TP_VERIFICATION_RESULTS_CALLBACK,
    pub NumberOfAnchorCerts: uint32,
    pub AnchorCerts: CSSM_DATA_PTR,
    pub DBList: CSSM_DL_DB_LIST_PTR,
    pub CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
}
pub type CSSM_TP_CALLERAUTH_CONTEXT = cssm_tp_callerauth_context;
pub type CSSM_TP_CALLERAUTH_CONTEXT_PTR = *mut cssm_tp_callerauth_context;
pub type CSSM_CRL_PARSE_FORMAT = uint32;
pub type CSSM_CRL_PARSE_FORMAT_PTR = *mut uint32;
pub const CSSM_CRL_PARSE_FORMAT_NONE: _bindgen_ty_115 = 0;
pub const CSSM_CRL_PARSE_FORMAT_CUSTOM: _bindgen_ty_115 = 1;
pub const CSSM_CRL_PARSE_FORMAT_SEXPR: _bindgen_ty_115 = 2;
pub const CSSM_CRL_PARSE_FORMAT_COMPLEX: _bindgen_ty_115 = 3;
pub const CSSM_CRL_PARSE_FORMAT_OID_NAMED: _bindgen_ty_115 = 4;
pub const CSSM_CRL_PARSE_FORMAT_TUPLE: _bindgen_ty_115 = 5;
pub const CSSM_CRL_PARSE_FORMAT_MULTIPLE: _bindgen_ty_115 = 32766;
pub const CSSM_CRL_PARSE_FORMAT_LAST: _bindgen_ty_115 = 32767;
pub const CSSM_CL_CUSTOM_CRL_PARSE_FORMAT: _bindgen_ty_115 = 32768;
pub type _bindgen_ty_115 = ::std::os::raw::c_uint;
pub type CSSM_CRL_TYPE = uint32;
pub type CSSM_CRL_TYPE_PTR = *mut uint32;
pub const CSSM_CRL_TYPE_UNKNOWN: _bindgen_ty_116 = 0;
pub const CSSM_CRL_TYPE_X_509v1: _bindgen_ty_116 = 1;
pub const CSSM_CRL_TYPE_X_509v2: _bindgen_ty_116 = 2;
pub const CSSM_CRL_TYPE_SPKI: _bindgen_ty_116 = 3;
pub const CSSM_CRL_TYPE_MULTIPLE: _bindgen_ty_116 = 32766;
pub type _bindgen_ty_116 = ::std::os::raw::c_uint;
pub type CSSM_CRL_ENCODING = uint32;
pub type CSSM_CRL_ENCODING_PTR = *mut uint32;
pub const CSSM_CRL_ENCODING_UNKNOWN: _bindgen_ty_117 = 0;
pub const CSSM_CRL_ENCODING_CUSTOM: _bindgen_ty_117 = 1;
pub const CSSM_CRL_ENCODING_BER: _bindgen_ty_117 = 2;
pub const CSSM_CRL_ENCODING_DER: _bindgen_ty_117 = 3;
pub const CSSM_CRL_ENCODING_BLOOM: _bindgen_ty_117 = 4;
pub const CSSM_CRL_ENCODING_SEXPR: _bindgen_ty_117 = 5;
pub const CSSM_CRL_ENCODING_MULTIPLE: _bindgen_ty_117 = 32766;
pub type _bindgen_ty_117 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_encoded_crl {
    pub CrlType: CSSM_CRL_TYPE,
    pub CrlEncoding: CSSM_CRL_ENCODING,
    pub CrlBlob: SecAsn1Item,
}
pub type CSSM_ENCODED_CRL = cssm_encoded_crl;
pub type CSSM_ENCODED_CRL_PTR = *mut cssm_encoded_crl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_parsed_crl {
    pub CrlType: CSSM_CRL_TYPE,
    pub ParsedCrlFormat: CSSM_CRL_PARSE_FORMAT,
    pub ParsedCrl: *mut ::std::os::raw::c_void,
}
pub type CSSM_PARSED_CRL = cssm_parsed_crl;
pub type CSSM_PARSED_CRL_PTR = *mut cssm_parsed_crl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_crl_pair {
    pub EncodedCrl: CSSM_ENCODED_CRL,
    pub ParsedCrl: CSSM_PARSED_CRL,
}
pub type CSSM_CRL_PAIR = cssm_crl_pair;
pub type CSSM_CRL_PAIR_PTR = *mut cssm_crl_pair;
pub type CSSM_CRLGROUP_TYPE = uint32;
pub type CSSM_CRLGROUP_TYPE_PTR = *mut uint32;
pub const CSSM_CRLGROUP_DATA: _bindgen_ty_118 = 0;
pub const CSSM_CRLGROUP_ENCODED_CRL: _bindgen_ty_118 = 1;
pub const CSSM_CRLGROUP_PARSED_CRL: _bindgen_ty_118 = 2;
pub const CSSM_CRLGROUP_CRL_PAIR: _bindgen_ty_118 = 3;
pub type _bindgen_ty_118 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_crlgroup {
    pub __bindgen_anon_1: cssm_crlgroup__bindgen_ty_1,
    pub CrlType: CSSM_CRL_TYPE,
    pub CrlEncoding: CSSM_CRL_ENCODING,
    pub NumberOfCrls: uint32,
    pub GroupCrlList: cssm_crlgroup__bindgen_ty_1,
    pub CrlGroupType: CSSM_CRLGROUP_TYPE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cssm_crlgroup__bindgen_ty_1 {
    pub CrlList: CSSM_DATA_PTR,
    pub EncodedCrlList: CSSM_ENCODED_CRL_PTR,
    pub ParsedCrlList: CSSM_PARSED_CRL_PTR,
    pub PairCrlList: CSSM_CRL_PAIR_PTR,
}
pub type CSSM_CRLGROUP = cssm_crlgroup;
pub type CSSM_CRLGROUP_PTR = *mut cssm_crlgroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_fieldgroup {
    pub NumberOfFields: ::std::os::raw::c_int,
    pub Fields: CSSM_FIELD_PTR,
}
pub type CSSM_FIELDGROUP = cssm_fieldgroup;
pub type CSSM_FIELDGROUP_PTR = *mut cssm_fieldgroup;
pub type CSSM_EVIDENCE_FORM = uint32;
pub const CSSM_EVIDENCE_FORM_UNSPECIFIC: _bindgen_ty_119 = 0;
pub const CSSM_EVIDENCE_FORM_CERT: _bindgen_ty_119 = 1;
pub const CSSM_EVIDENCE_FORM_CRL: _bindgen_ty_119 = 2;
pub const CSSM_EVIDENCE_FORM_CERT_ID: _bindgen_ty_119 = 3;
pub const CSSM_EVIDENCE_FORM_CRL_ID: _bindgen_ty_119 = 4;
pub const CSSM_EVIDENCE_FORM_VERIFIER_TIME: _bindgen_ty_119 = 5;
pub const CSSM_EVIDENCE_FORM_CRL_THISTIME: _bindgen_ty_119 = 6;
pub const CSSM_EVIDENCE_FORM_CRL_NEXTTIME: _bindgen_ty_119 = 7;
pub const CSSM_EVIDENCE_FORM_POLICYINFO: _bindgen_ty_119 = 8;
pub const CSSM_EVIDENCE_FORM_TUPLEGROUP: _bindgen_ty_119 = 9;
pub type _bindgen_ty_119 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_evidence {
    pub EvidenceForm: CSSM_EVIDENCE_FORM,
    pub Evidence: *mut ::std::os::raw::c_void,
}
pub type CSSM_EVIDENCE = cssm_evidence;
pub type CSSM_EVIDENCE_PTR = *mut cssm_evidence;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_tp_verify_context {
    pub Action: CSSM_TP_ACTION,
    pub ActionData: SecAsn1Item,
    pub Crls: CSSM_CRLGROUP,
    pub Cred: CSSM_TP_CALLERAUTH_CONTEXT_PTR,
}
pub type CSSM_TP_VERIFY_CONTEXT = cssm_tp_verify_context;
pub type CSSM_TP_VERIFY_CONTEXT_PTR = *mut cssm_tp_verify_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_verify_context_result {
    pub NumberOfEvidences: uint32,
    pub Evidence: CSSM_EVIDENCE_PTR,
}
pub type CSSM_TP_VERIFY_CONTEXT_RESULT = cssm_tp_verify_context_result;
pub type CSSM_TP_VERIFY_CONTEXT_RESULT_PTR = *mut cssm_tp_verify_context_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_request_set {
    pub NumberOfRequests: uint32,
    pub Requests: *mut ::std::os::raw::c_void,
}
pub type CSSM_TP_REQUEST_SET = cssm_tp_request_set;
pub type CSSM_TP_REQUEST_SET_PTR = *mut cssm_tp_request_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_result_set {
    pub NumberOfResults: uint32,
    pub Results: *mut ::std::os::raw::c_void,
}
pub type CSSM_TP_RESULT_SET = cssm_tp_result_set;
pub type CSSM_TP_RESULT_SET_PTR = *mut cssm_tp_result_set;
pub type CSSM_TP_CONFIRM_STATUS = uint32;
pub type CSSM_TP_CONFIRM_STATUS_PTR = *mut uint32;
pub const CSSM_TP_CONFIRM_STATUS_UNKNOWN: _bindgen_ty_120 = 0;
pub const CSSM_TP_CONFIRM_ACCEPT: _bindgen_ty_120 = 1;
pub const CSSM_TP_CONFIRM_REJECT: _bindgen_ty_120 = 2;
pub type _bindgen_ty_120 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_confirm_response {
    pub NumberOfResponses: uint32,
    pub Responses: CSSM_TP_CONFIRM_STATUS_PTR,
}
pub type CSSM_TP_CONFIRM_RESPONSE = cssm_tp_confirm_response;
pub type CSSM_TP_CONFIRM_RESPONSE_PTR = *mut cssm_tp_confirm_response;
pub const CSSM_ESTIMATED_TIME_UNKNOWN: _bindgen_ty_121 = -1;
pub type _bindgen_ty_121 = ::std::os::raw::c_int;
pub const CSSM_ELAPSED_TIME_UNKNOWN: _bindgen_ty_122 = -1;
pub const CSSM_ELAPSED_TIME_COMPLETE: _bindgen_ty_122 = -2;
pub type _bindgen_ty_122 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certissue_input {
    pub CSPSubserviceUid: CSSM_SUBSERVICE_UID,
    pub CLHandle: CSSM_CL_HANDLE,
    pub NumberOfTemplateFields: uint32,
    pub SubjectCertFields: CSSM_FIELD_PTR,
    pub MoreServiceRequests: CSSM_TP_SERVICES,
    pub NumberOfServiceControls: uint32,
    pub ServiceControls: CSSM_FIELD_PTR,
    pub UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
}
pub type CSSM_TP_CERTISSUE_INPUT = cssm_tp_certissue_input;
pub type CSSM_TP_CERTISSUE_INPUT_PTR = *mut cssm_tp_certissue_input;
pub type CSSM_TP_CERTISSUE_STATUS = uint32;
pub const CSSM_TP_CERTISSUE_STATUS_UNKNOWN: _bindgen_ty_123 = 0;
pub const CSSM_TP_CERTISSUE_OK: _bindgen_ty_123 = 1;
pub const CSSM_TP_CERTISSUE_OKWITHCERTMODS: _bindgen_ty_123 = 2;
pub const CSSM_TP_CERTISSUE_OKWITHSERVICEMODS: _bindgen_ty_123 = 3;
pub const CSSM_TP_CERTISSUE_REJECTED: _bindgen_ty_123 = 4;
pub const CSSM_TP_CERTISSUE_NOT_AUTHORIZED: _bindgen_ty_123 = 5;
pub const CSSM_TP_CERTISSUE_WILL_BE_REVOKED: _bindgen_ty_123 = 6;
pub type _bindgen_ty_123 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certissue_output {
    pub IssueStatus: CSSM_TP_CERTISSUE_STATUS,
    pub CertGroup: CSSM_CERTGROUP_PTR,
    pub PerformedServiceRequests: CSSM_TP_SERVICES,
}
pub type CSSM_TP_CERTISSUE_OUTPUT = cssm_tp_certissue_output;
pub type CSSM_TP_CERTISSUE_OUTPUT_PTR = *mut cssm_tp_certissue_output;
pub type CSSM_TP_CERTCHANGE_ACTION = uint32;
pub const CSSM_TP_CERTCHANGE_NONE: _bindgen_ty_124 = 0;
pub const CSSM_TP_CERTCHANGE_REVOKE: _bindgen_ty_124 = 1;
pub const CSSM_TP_CERTCHANGE_HOLD: _bindgen_ty_124 = 2;
pub const CSSM_TP_CERTCHANGE_RELEASE: _bindgen_ty_124 = 3;
pub type _bindgen_ty_124 = ::std::os::raw::c_uint;
pub type CSSM_TP_CERTCHANGE_REASON = uint32;
pub const CSSM_TP_CERTCHANGE_REASON_UNKNOWN: _bindgen_ty_125 = 0;
pub const CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE: _bindgen_ty_125 = 1;
pub const CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE: _bindgen_ty_125 = 2;
pub const CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION: _bindgen_ty_125 = 3;
pub const CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE: _bindgen_ty_125 = 4;
pub const CSSM_TP_CERTCHANGE_REASON_SUPERCEDED: _bindgen_ty_125 = 5;
pub const CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE: _bindgen_ty_125 = 6;
pub const CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE: _bindgen_ty_125 = 7;
pub type _bindgen_ty_125 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certchange_input {
    pub Action: CSSM_TP_CERTCHANGE_ACTION,
    pub Reason: CSSM_TP_CERTCHANGE_REASON,
    pub CLHandle: CSSM_CL_HANDLE,
    pub Cert: CSSM_DATA_PTR,
    pub ChangeInfo: CSSM_FIELD_PTR,
    pub StartTime: CSSM_TIMESTRING,
    pub CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
}
pub type CSSM_TP_CERTCHANGE_INPUT = cssm_tp_certchange_input;
pub type CSSM_TP_CERTCHANGE_INPUT_PTR = *mut cssm_tp_certchange_input;
pub type CSSM_TP_CERTCHANGE_STATUS = uint32;
pub const CSSM_TP_CERTCHANGE_STATUS_UNKNOWN: _bindgen_ty_126 = 0;
pub const CSSM_TP_CERTCHANGE_OK: _bindgen_ty_126 = 1;
pub const CSSM_TP_CERTCHANGE_OKWITHNEWTIME: _bindgen_ty_126 = 2;
pub const CSSM_TP_CERTCHANGE_WRONGCA: _bindgen_ty_126 = 3;
pub const CSSM_TP_CERTCHANGE_REJECTED: _bindgen_ty_126 = 4;
pub const CSSM_TP_CERTCHANGE_NOT_AUTHORIZED: _bindgen_ty_126 = 5;
pub type _bindgen_ty_126 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certchange_output {
    pub ActionStatus: CSSM_TP_CERTCHANGE_STATUS,
    pub RevokeInfo: CSSM_FIELD,
}
pub type CSSM_TP_CERTCHANGE_OUTPUT = cssm_tp_certchange_output;
pub type CSSM_TP_CERTCHANGE_OUTPUT_PTR = *mut cssm_tp_certchange_output;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certverify_input {
    pub CLHandle: CSSM_CL_HANDLE,
    pub Cert: CSSM_DATA_PTR,
    pub VerifyContext: CSSM_TP_VERIFY_CONTEXT_PTR,
}
pub type CSSM_TP_CERTVERIFY_INPUT = cssm_tp_certverify_input;
pub type CSSM_TP_CERTVERIFY_INPUT_PTR = *mut cssm_tp_certverify_input;
pub type CSSM_TP_CERTVERIFY_STATUS = uint32;
pub const CSSM_TP_CERTVERIFY_UNKNOWN: _bindgen_ty_127 = 0;
pub const CSSM_TP_CERTVERIFY_VALID: _bindgen_ty_127 = 1;
pub const CSSM_TP_CERTVERIFY_INVALID: _bindgen_ty_127 = 2;
pub const CSSM_TP_CERTVERIFY_REVOKED: _bindgen_ty_127 = 3;
pub const CSSM_TP_CERTVERIFY_SUSPENDED: _bindgen_ty_127 = 4;
pub const CSSM_TP_CERTVERIFY_EXPIRED: _bindgen_ty_127 = 5;
pub const CSSM_TP_CERTVERIFY_NOT_VALID_YET: _bindgen_ty_127 = 6;
pub const CSSM_TP_CERTVERIFY_INVALID_AUTHORITY: _bindgen_ty_127 = 7;
pub const CSSM_TP_CERTVERIFY_INVALID_SIGNATURE: _bindgen_ty_127 = 8;
pub const CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE: _bindgen_ty_127 = 9;
pub const CSSM_TP_CERTVERIFY_INVALID_CERTGROUP: _bindgen_ty_127 = 10;
pub const CSSM_TP_CERTVERIFY_INVALID_POLICY: _bindgen_ty_127 = 11;
pub const CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS: _bindgen_ty_127 = 12;
pub const CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS: _bindgen_ty_127 = 13;
pub const CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT: _bindgen_ty_127 = 14;
pub const CSSM_TP_CERTVERIFY_INVALID_NAME_TREE: _bindgen_ty_127 = 15;
pub const CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT: _bindgen_ty_127 = 16;
pub type _bindgen_ty_127 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certverify_output {
    pub VerifyStatus: CSSM_TP_CERTVERIFY_STATUS,
    pub NumberOfEvidence: uint32,
    pub Evidence: CSSM_EVIDENCE_PTR,
}
pub type CSSM_TP_CERTVERIFY_OUTPUT = cssm_tp_certverify_output;
pub type CSSM_TP_CERTVERIFY_OUTPUT_PTR = *mut cssm_tp_certverify_output;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certnotarize_input {
    pub CLHandle: CSSM_CL_HANDLE,
    pub NumberOfFields: uint32,
    pub MoreFields: CSSM_FIELD_PTR,
    pub SignScope: CSSM_FIELD_PTR,
    pub ScopeSize: uint32,
    pub MoreServiceRequests: CSSM_TP_SERVICES,
    pub NumberOfServiceControls: uint32,
    pub ServiceControls: CSSM_FIELD_PTR,
    pub UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
}
pub type CSSM_TP_CERTNOTARIZE_INPUT = cssm_tp_certnotarize_input;
pub type CSSM_TP_CERTNOTARIZE_INPUT_PTR = *mut cssm_tp_certnotarize_input;
pub type CSSM_TP_CERTNOTARIZE_STATUS = uint32;
pub const CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN: _bindgen_ty_128 = 0;
pub const CSSM_TP_CERTNOTARIZE_OK: _bindgen_ty_128 = 1;
pub const CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS: _bindgen_ty_128 = 2;
pub const CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS: _bindgen_ty_128 = 3;
pub const CSSM_TP_CERTNOTARIZE_REJECTED: _bindgen_ty_128 = 4;
pub const CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED: _bindgen_ty_128 = 5;
pub type _bindgen_ty_128 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certnotarize_output {
    pub NotarizeStatus: CSSM_TP_CERTNOTARIZE_STATUS,
    pub NotarizedCertGroup: CSSM_CERTGROUP_PTR,
    pub PerformedServiceRequests: CSSM_TP_SERVICES,
}
pub type CSSM_TP_CERTNOTARIZE_OUTPUT = cssm_tp_certnotarize_output;
pub type CSSM_TP_CERTNOTARIZE_OUTPUT_PTR = *mut cssm_tp_certnotarize_output;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certreclaim_input {
    pub CLHandle: CSSM_CL_HANDLE,
    pub NumberOfSelectionFields: uint32,
    pub SelectionFields: CSSM_FIELD_PTR,
    pub UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
}
pub type CSSM_TP_CERTRECLAIM_INPUT = cssm_tp_certreclaim_input;
pub type CSSM_TP_CERTRECLAIM_INPUT_PTR = *mut cssm_tp_certreclaim_input;
pub type CSSM_TP_CERTRECLAIM_STATUS = uint32;
pub const CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN: _bindgen_ty_129 = 0;
pub const CSSM_TP_CERTRECLAIM_OK: _bindgen_ty_129 = 1;
pub const CSSM_TP_CERTRECLAIM_NOMATCH: _bindgen_ty_129 = 2;
pub const CSSM_TP_CERTRECLAIM_REJECTED: _bindgen_ty_129 = 3;
pub const CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED: _bindgen_ty_129 = 4;
pub type _bindgen_ty_129 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_certreclaim_output {
    pub ReclaimStatus: CSSM_TP_CERTRECLAIM_STATUS,
    pub ReclaimedCertGroup: CSSM_CERTGROUP_PTR,
    pub KeyCacheHandle: CSSM_LONG_HANDLE,
}
pub type CSSM_TP_CERTRECLAIM_OUTPUT = cssm_tp_certreclaim_output;
pub type CSSM_TP_CERTRECLAIM_OUTPUT_PTR = *mut cssm_tp_certreclaim_output;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_crlissue_input {
    pub CLHandle: CSSM_CL_HANDLE,
    pub CrlIdentifier: uint32,
    pub CrlThisTime: CSSM_TIMESTRING,
    pub PolicyIdentifier: CSSM_FIELD_PTR,
    pub CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
}
pub type CSSM_TP_CRLISSUE_INPUT = cssm_tp_crlissue_input;
pub type CSSM_TP_CRLISSUE_INPUT_PTR = *mut cssm_tp_crlissue_input;
pub type CSSM_TP_CRLISSUE_STATUS = uint32;
pub const CSSM_TP_CRLISSUE_STATUS_UNKNOWN: _bindgen_ty_130 = 0;
pub const CSSM_TP_CRLISSUE_OK: _bindgen_ty_130 = 1;
pub const CSSM_TP_CRLISSUE_NOT_CURRENT: _bindgen_ty_130 = 2;
pub const CSSM_TP_CRLISSUE_INVALID_DOMAIN: _bindgen_ty_130 = 3;
pub const CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER: _bindgen_ty_130 = 4;
pub const CSSM_TP_CRLISSUE_REJECTED: _bindgen_ty_130 = 5;
pub const CSSM_TP_CRLISSUE_NOT_AUTHORIZED: _bindgen_ty_130 = 6;
pub type _bindgen_ty_130 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_tp_crlissue_output {
    pub IssueStatus: CSSM_TP_CRLISSUE_STATUS,
    pub Crl: CSSM_ENCODED_CRL_PTR,
    pub CrlNextTime: CSSM_TIMESTRING,
}
pub type CSSM_TP_CRLISSUE_OUTPUT = cssm_tp_crlissue_output;
pub type CSSM_TP_CRLISSUE_OUTPUT_PTR = *mut cssm_tp_crlissue_output;
pub type CSSM_TP_FORM_TYPE = uint32;
pub const CSSM_TP_FORM_TYPE_GENERIC: _bindgen_ty_131 = 0;
pub const CSSM_TP_FORM_TYPE_REGISTRATION: _bindgen_ty_131 = 1;
pub type _bindgen_ty_131 = ::std::os::raw::c_uint;
pub type CSSM_CL_TEMPLATE_TYPE = uint32;
pub const CSSM_CL_TEMPLATE_INTERMEDIATE_CERT: _bindgen_ty_132 = 1;
pub const CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE: _bindgen_ty_132 = 2;
pub type _bindgen_ty_132 = ::std::os::raw::c_uint;
pub type CSSM_CERT_BUNDLE_TYPE = uint32;
pub const CSSM_CERT_BUNDLE_UNKNOWN: _bindgen_ty_133 = 0;
pub const CSSM_CERT_BUNDLE_CUSTOM: _bindgen_ty_133 = 1;
pub const CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA: _bindgen_ty_133 = 2;
pub const CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA: _bindgen_ty_133 = 3;
pub const CSSM_CERT_BUNDLE_PKCS12: _bindgen_ty_133 = 4;
pub const CSSM_CERT_BUNDLE_PFX: _bindgen_ty_133 = 5;
pub const CSSM_CERT_BUNDLE_SPKI_SEQUENCE: _bindgen_ty_133 = 6;
pub const CSSM_CERT_BUNDLE_PGP_KEYRING: _bindgen_ty_133 = 7;
pub const CSSM_CERT_BUNDLE_LAST: _bindgen_ty_133 = 32767;
pub const CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE: _bindgen_ty_133 = 32768;
pub type _bindgen_ty_133 = ::std::os::raw::c_uint;
pub type CSSM_CERT_BUNDLE_ENCODING = uint32;
pub const CSSM_CERT_BUNDLE_ENCODING_UNKNOWN: _bindgen_ty_134 = 0;
pub const CSSM_CERT_BUNDLE_ENCODING_CUSTOM: _bindgen_ty_134 = 1;
pub const CSSM_CERT_BUNDLE_ENCODING_BER: _bindgen_ty_134 = 2;
pub const CSSM_CERT_BUNDLE_ENCODING_DER: _bindgen_ty_134 = 3;
pub const CSSM_CERT_BUNDLE_ENCODING_SEXPR: _bindgen_ty_134 = 4;
pub const CSSM_CERT_BUNDLE_ENCODING_PGP: _bindgen_ty_134 = 5;
pub type _bindgen_ty_134 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_cert_bundle_header {
    pub BundleType: CSSM_CERT_BUNDLE_TYPE,
    pub BundleEncoding: CSSM_CERT_BUNDLE_ENCODING,
}
pub type CSSM_CERT_BUNDLE_HEADER = cssm_cert_bundle_header;
pub type CSSM_CERT_BUNDLE_HEADER_PTR = *mut cssm_cert_bundle_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_cert_bundle {
    pub BundleHeader: CSSM_CERT_BUNDLE_HEADER,
    pub Bundle: SecAsn1Item,
}
pub type CSSM_CERT_BUNDLE = cssm_cert_bundle;
pub type CSSM_CERT_BUNDLE_PTR = *mut cssm_cert_bundle;
pub const CSSM_FIELDVALUE_COMPLEX_DATA_TYPE: _bindgen_ty_135 = 4294967295;
pub type _bindgen_ty_135 = ::std::os::raw::c_uint;
pub type CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;
pub type CSSM_DB_ATTRIBUTE_NAME_FORMAT_PTR = *mut uint32;
pub const CSSM_DB_ATTRIBUTE_NAME_AS_STRING: _bindgen_ty_136 = 0;
pub const CSSM_DB_ATTRIBUTE_NAME_AS_OID: _bindgen_ty_136 = 1;
pub const CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER: _bindgen_ty_136 = 2;
pub type _bindgen_ty_136 = ::std::os::raw::c_uint;
pub type CSSM_DB_ATTRIBUTE_FORMAT = uint32;
pub type CSSM_DB_ATTRIBUTE_FORMAT_PTR = *mut uint32;
pub const CSSM_DB_ATTRIBUTE_FORMAT_STRING: _bindgen_ty_137 = 0;
pub const CSSM_DB_ATTRIBUTE_FORMAT_SINT32: _bindgen_ty_137 = 1;
pub const CSSM_DB_ATTRIBUTE_FORMAT_UINT32: _bindgen_ty_137 = 2;
pub const CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM: _bindgen_ty_137 = 3;
pub const CSSM_DB_ATTRIBUTE_FORMAT_REAL: _bindgen_ty_137 = 4;
pub const CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE: _bindgen_ty_137 = 5;
pub const CSSM_DB_ATTRIBUTE_FORMAT_BLOB: _bindgen_ty_137 = 6;
pub const CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32: _bindgen_ty_137 = 7;
pub const CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX: _bindgen_ty_137 = 8;
pub type _bindgen_ty_137 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_db_attribute_info {
    pub AttributeNameFormat: CSSM_DB_ATTRIBUTE_NAME_FORMAT,
    pub Label: cssm_db_attribute_info_cssm_db_attribute_label,
    pub AttributeFormat: CSSM_DB_ATTRIBUTE_FORMAT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cssm_db_attribute_info_cssm_db_attribute_label {
    pub AttributeName: *mut ::std::os::raw::c_char,
    pub AttributeOID: SecAsn1Oid,
    pub AttributeID: uint32,
}
pub type CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;
pub type CSSM_DB_ATTRIBUTE_INFO_PTR = *mut cssm_db_attribute_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_db_attribute_data {
    pub Info: CSSM_DB_ATTRIBUTE_INFO,
    pub NumberOfValues: uint32,
    pub Value: CSSM_DATA_PTR,
}
pub type CSSM_DB_ATTRIBUTE_DATA = cssm_db_attribute_data;
pub type CSSM_DB_ATTRIBUTE_DATA_PTR = *mut cssm_db_attribute_data;
pub type CSSM_DB_RECORDTYPE = uint32;
pub const CSSM_DB_RECORDTYPE_SCHEMA_START: _bindgen_ty_138 = 0;
pub const CSSM_DB_RECORDTYPE_SCHEMA_END: _bindgen_ty_138 = 4;
pub const CSSM_DB_RECORDTYPE_OPEN_GROUP_START: _bindgen_ty_138 = 10;
pub const CSSM_DB_RECORDTYPE_OPEN_GROUP_END: _bindgen_ty_138 = 18;
pub const CSSM_DB_RECORDTYPE_APP_DEFINED_START: _bindgen_ty_138 = 2147483648;
pub const CSSM_DB_RECORDTYPE_APP_DEFINED_END: _bindgen_ty_138 = 4294967295;
pub const CSSM_DL_DB_SCHEMA_INFO: _bindgen_ty_138 = 0;
pub const CSSM_DL_DB_SCHEMA_INDEXES: _bindgen_ty_138 = 1;
pub const CSSM_DL_DB_SCHEMA_ATTRIBUTES: _bindgen_ty_138 = 2;
pub const CSSM_DL_DB_SCHEMA_PARSING_MODULE: _bindgen_ty_138 = 3;
pub const CSSM_DL_DB_RECORD_ANY: _bindgen_ty_138 = 10;
pub const CSSM_DL_DB_RECORD_CERT: _bindgen_ty_138 = 11;
pub const CSSM_DL_DB_RECORD_CRL: _bindgen_ty_138 = 12;
pub const CSSM_DL_DB_RECORD_POLICY: _bindgen_ty_138 = 13;
pub const CSSM_DL_DB_RECORD_GENERIC: _bindgen_ty_138 = 14;
pub const CSSM_DL_DB_RECORD_PUBLIC_KEY: _bindgen_ty_138 = 15;
pub const CSSM_DL_DB_RECORD_PRIVATE_KEY: _bindgen_ty_138 = 16;
pub const CSSM_DL_DB_RECORD_SYMMETRIC_KEY: _bindgen_ty_138 = 17;
pub const CSSM_DL_DB_RECORD_ALL_KEYS: _bindgen_ty_138 = 18;
pub type _bindgen_ty_138 = ::std::os::raw::c_uint;
pub const CSSM_DB_CERT_USE_TRUSTED: _bindgen_ty_139 = 1;
pub const CSSM_DB_CERT_USE_SYSTEM: _bindgen_ty_139 = 2;
pub const CSSM_DB_CERT_USE_OWNER: _bindgen_ty_139 = 4;
pub const CSSM_DB_CERT_USE_REVOKED: _bindgen_ty_139 = 8;
pub const CSSM_DB_CERT_USE_SIGNING: _bindgen_ty_139 = 16;
pub const CSSM_DB_CERT_USE_PRIVACY: _bindgen_ty_139 = 32;
pub type _bindgen_ty_139 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_db_record_attribute_info {
    pub DataRecordType: CSSM_DB_RECORDTYPE,
    pub NumberOfAttributes: uint32,
    pub AttributeInfo: CSSM_DB_ATTRIBUTE_INFO_PTR,
}
pub type CSSM_DB_RECORD_ATTRIBUTE_INFO = cssm_db_record_attribute_info;
pub type CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR = *mut cssm_db_record_attribute_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_db_record_attribute_data {
    pub DataRecordType: CSSM_DB_RECORDTYPE,
    pub SemanticInformation: uint32,
    pub NumberOfAttributes: uint32,
    pub AttributeData: CSSM_DB_ATTRIBUTE_DATA_PTR,
}
pub type CSSM_DB_RECORD_ATTRIBUTE_DATA = cssm_db_record_attribute_data;
pub type CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR = *mut cssm_db_record_attribute_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_db_parsing_module_info {
    pub RecordType: CSSM_DB_RECORDTYPE,
    pub ModuleSubserviceUid: CSSM_SUBSERVICE_UID,
}
pub type CSSM_DB_PARSING_MODULE_INFO = cssm_db_parsing_module_info;
pub type CSSM_DB_PARSING_MODULE_INFO_PTR = *mut cssm_db_parsing_module_info;
pub type CSSM_DB_INDEX_TYPE = uint32;
pub const CSSM_DB_INDEX_UNIQUE: _bindgen_ty_140 = 0;
pub const CSSM_DB_INDEX_NONUNIQUE: _bindgen_ty_140 = 1;
pub type _bindgen_ty_140 = ::std::os::raw::c_uint;
pub type CSSM_DB_INDEXED_DATA_LOCATION = uint32;
pub const CSSM_DB_INDEX_ON_UNKNOWN: _bindgen_ty_141 = 0;
pub const CSSM_DB_INDEX_ON_ATTRIBUTE: _bindgen_ty_141 = 1;
pub const CSSM_DB_INDEX_ON_RECORD: _bindgen_ty_141 = 2;
pub type _bindgen_ty_141 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_db_index_info {
    pub IndexType: CSSM_DB_INDEX_TYPE,
    pub IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
    pub Info: CSSM_DB_ATTRIBUTE_INFO,
}
pub type CSSM_DB_INDEX_INFO = cssm_db_index_info;
pub type CSSM_DB_INDEX_INFO_PTR = *mut cssm_db_index_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_db_unique_record {
    pub RecordLocator: CSSM_DB_INDEX_INFO,
    pub RecordIdentifier: SecAsn1Item,
}
pub type CSSM_DB_UNIQUE_RECORD = cssm_db_unique_record;
pub type CSSM_DB_UNIQUE_RECORD_PTR = *mut cssm_db_unique_record;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_db_record_index_info {
    pub DataRecordType: CSSM_DB_RECORDTYPE,
    pub NumberOfIndexes: uint32,
    pub IndexInfo: CSSM_DB_INDEX_INFO_PTR,
}
pub type CSSM_DB_RECORD_INDEX_INFO = cssm_db_record_index_info;
pub type CSSM_DB_RECORD_INDEX_INFO_PTR = *mut cssm_db_record_index_info;
pub type CSSM_DB_ACCESS_TYPE = uint32;
pub type CSSM_DB_ACCESS_TYPE_PTR = *mut uint32;
pub const CSSM_DB_ACCESS_READ: _bindgen_ty_142 = 1;
pub const CSSM_DB_ACCESS_WRITE: _bindgen_ty_142 = 2;
pub const CSSM_DB_ACCESS_PRIVILEGED: _bindgen_ty_142 = 4;
pub type _bindgen_ty_142 = ::std::os::raw::c_uint;
pub type CSSM_DB_MODIFY_MODE = uint32;
pub const CSSM_DB_MODIFY_ATTRIBUTE_NONE: _bindgen_ty_143 = 0;
pub const CSSM_DB_MODIFY_ATTRIBUTE_ADD: _bindgen_ty_143 = 1;
pub const CSSM_DB_MODIFY_ATTRIBUTE_DELETE: _bindgen_ty_143 = 2;
pub const CSSM_DB_MODIFY_ATTRIBUTE_REPLACE: _bindgen_ty_143 = 3;
pub type _bindgen_ty_143 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_dbinfo {
    pub NumberOfRecordTypes: uint32,
    pub DefaultParsingModules: CSSM_DB_PARSING_MODULE_INFO_PTR,
    pub RecordAttributeNames: CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR,
    pub RecordIndexes: CSSM_DB_RECORD_INDEX_INFO_PTR,
    pub IsLocal: CSSM_BOOL,
    pub AccessPath: *mut ::std::os::raw::c_char,
    pub Reserved: *mut ::std::os::raw::c_void,
}
pub type CSSM_DBINFO = cssm_dbinfo;
pub type CSSM_DBINFO_PTR = *mut cssm_dbinfo;
pub type CSSM_DB_OPERATOR = uint32;
pub type CSSM_DB_OPERATOR_PTR = *mut uint32;
pub const CSSM_DB_EQUAL: _bindgen_ty_144 = 0;
pub const CSSM_DB_NOT_EQUAL: _bindgen_ty_144 = 1;
pub const CSSM_DB_LESS_THAN: _bindgen_ty_144 = 2;
pub const CSSM_DB_GREATER_THAN: _bindgen_ty_144 = 3;
pub const CSSM_DB_CONTAINS: _bindgen_ty_144 = 4;
pub const CSSM_DB_CONTAINS_INITIAL_SUBSTRING: _bindgen_ty_144 = 5;
pub const CSSM_DB_CONTAINS_FINAL_SUBSTRING: _bindgen_ty_144 = 6;
pub type _bindgen_ty_144 = ::std::os::raw::c_uint;
pub type CSSM_DB_CONJUNCTIVE = uint32;
pub type CSSM_DB_CONJUNCTIVE_PTR = *mut uint32;
pub const CSSM_DB_NONE: _bindgen_ty_145 = 0;
pub const CSSM_DB_AND: _bindgen_ty_145 = 1;
pub const CSSM_DB_OR: _bindgen_ty_145 = 2;
pub type _bindgen_ty_145 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_selection_predicate {
    pub DbOperator: CSSM_DB_OPERATOR,
    pub Attribute: CSSM_DB_ATTRIBUTE_DATA,
}
pub type CSSM_SELECTION_PREDICATE = cssm_selection_predicate;
pub type CSSM_SELECTION_PREDICATE_PTR = *mut cssm_selection_predicate;
pub const CSSM_QUERY_TIMELIMIT_NONE: _bindgen_ty_146 = 0;
pub type _bindgen_ty_146 = ::std::os::raw::c_uint;
pub const CSSM_QUERY_SIZELIMIT_NONE: _bindgen_ty_147 = 0;
pub type _bindgen_ty_147 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_query_limits {
    pub TimeLimit: uint32,
    pub SizeLimit: uint32,
}
pub type CSSM_QUERY_LIMITS = cssm_query_limits;
pub type CSSM_QUERY_LIMITS_PTR = *mut cssm_query_limits;
pub type CSSM_QUERY_FLAGS = uint32;
pub const CSSM_QUERY_RETURN_DATA: _bindgen_ty_148 = 1;
pub type _bindgen_ty_148 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_query {
    pub RecordType: CSSM_DB_RECORDTYPE,
    pub Conjunctive: CSSM_DB_CONJUNCTIVE,
    pub NumSelectionPredicates: uint32,
    pub SelectionPredicate: CSSM_SELECTION_PREDICATE_PTR,
    pub QueryLimits: CSSM_QUERY_LIMITS,
    pub QueryFlags: CSSM_QUERY_FLAGS,
}
pub type CSSM_QUERY = cssm_query;
pub type CSSM_QUERY_PTR = *mut cssm_query;
pub type CSSM_DLTYPE = uint32;
pub type CSSM_DLTYPE_PTR = *mut uint32;
pub const CSSM_DL_UNKNOWN: _bindgen_ty_149 = 0;
pub const CSSM_DL_CUSTOM: _bindgen_ty_149 = 1;
pub const CSSM_DL_LDAP: _bindgen_ty_149 = 2;
pub const CSSM_DL_ODBC: _bindgen_ty_149 = 3;
pub const CSSM_DL_PKCS11: _bindgen_ty_149 = 4;
pub const CSSM_DL_FFS: _bindgen_ty_149 = 5;
pub const CSSM_DL_MEMORY: _bindgen_ty_149 = 6;
pub const CSSM_DL_REMOTEDIR: _bindgen_ty_149 = 7;
pub type _bindgen_ty_149 = ::std::os::raw::c_uint;
pub type CSSM_DL_CUSTOM_ATTRIBUTES = *mut ::std::os::raw::c_void;
pub type CSSM_DL_LDAP_ATTRIBUTES = *mut ::std::os::raw::c_void;
pub type CSSM_DL_ODBC_ATTRIBUTES = *mut ::std::os::raw::c_void;
pub type CSSM_DL_FFS_ATTRIBUTES = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_dl_pkcs11_attributes {
    pub DeviceAccessFlags: uint32,
}
pub type CSSM_DL_PKCS11_ATTRIBUTE = *mut cssm_dl_pkcs11_attributes;
pub type CSSM_DL_PKCS11_ATTRIBUTE_PTR = *mut cssm_dl_pkcs11_attributes;
pub const CSSM_DB_DATASTORES_UNKNOWN: _bindgen_ty_150 = 4294967295;
pub type _bindgen_ty_150 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_name_list {
    pub NumStrings: uint32,
    pub String: *mut *mut ::std::os::raw::c_char,
}
pub type CSSM_NAME_LIST = cssm_name_list;
pub type CSSM_NAME_LIST_PTR = *mut cssm_name_list;
pub type CSSM_DB_RETRIEVAL_MODES = uint32;
pub const CSSM_DB_TRANSACTIONAL_MODE: _bindgen_ty_151 = 0;
pub const CSSM_DB_FILESYSTEMSCAN_MODE: _bindgen_ty_151 = 1;
pub type _bindgen_ty_151 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_db_schema_attribute_info {
    pub AttributeId: uint32,
    pub AttributeName: *mut ::std::os::raw::c_char,
    pub AttributeNameID: SecAsn1Oid,
    pub DataType: CSSM_DB_ATTRIBUTE_FORMAT,
}
pub type CSSM_DB_SCHEMA_ATTRIBUTE_INFO = cssm_db_schema_attribute_info;
pub type CSSM_DB_SCHEMA_ATTRIBUTE_INFO_PTR = *mut cssm_db_schema_attribute_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_db_schema_index_info {
    pub AttributeId: uint32,
    pub IndexId: uint32,
    pub IndexType: CSSM_DB_INDEX_TYPE,
    pub IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
}
pub type CSSM_DB_SCHEMA_INDEX_INFO = cssm_db_schema_index_info;
pub type CSSM_DB_SCHEMA_INDEX_INFO_PTR = *mut cssm_db_schema_index_info;
pub type CSSM_BER_TAG = uint8;
pub type CSSM_X509_ALGORITHM_IDENTIFIER_PTR = *mut SecAsn1AlgId;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_type_value_pair {
    pub type_: SecAsn1Oid,
    pub valueType: CSSM_BER_TAG,
    pub value: SecAsn1Item,
}
pub type CSSM_X509_TYPE_VALUE_PAIR = cssm_x509_type_value_pair;
pub type CSSM_X509_TYPE_VALUE_PAIR_PTR = *mut cssm_x509_type_value_pair;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_rdn {
    pub numberOfPairs: uint32,
    pub AttributeTypeAndValue: CSSM_X509_TYPE_VALUE_PAIR_PTR,
}
pub type CSSM_X509_RDN = cssm_x509_rdn;
pub type CSSM_X509_RDN_PTR = *mut cssm_x509_rdn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_name {
    pub numberOfRDNs: uint32,
    pub RelativeDistinguishedName: CSSM_X509_RDN_PTR,
}
pub type CSSM_X509_NAME = cssm_x509_name;
pub type CSSM_X509_NAME_PTR = *mut cssm_x509_name;
pub type CSSM_X509_SUBJECT_PUBLIC_KEY_INFO_PTR = *mut SecAsn1PubKeyInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_time {
    pub timeType: CSSM_BER_TAG,
    pub time: SecAsn1Item,
}
pub type CSSM_X509_TIME = cssm_x509_time;
pub type CSSM_X509_TIME_PTR = *mut cssm_x509_time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x509_validity {
    pub notBefore: CSSM_X509_TIME,
    pub notAfter: CSSM_X509_TIME,
}
pub type CSSM_X509_VALIDITY = x509_validity;
pub type CSSM_X509_VALIDITY_PTR = *mut x509_validity;
pub type CSSM_X509_OPTION = CSSM_BOOL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509ext_basicConstraints {
    pub cA: CSSM_BOOL,
    pub pathLenConstraintPresent: CSSM_X509_OPTION,
    pub pathLenConstraint: uint32,
}
pub type CSSM_X509EXT_BASICCONSTRAINTS = cssm_x509ext_basicConstraints;
pub type CSSM_X509EXT_BASICCONSTRAINTS_PTR = *mut cssm_x509ext_basicConstraints;
pub const extension_data_format_CSSM_X509_DATAFORMAT_ENCODED: extension_data_format = 0;
pub const extension_data_format_CSSM_X509_DATAFORMAT_PARSED: extension_data_format = 1;
pub const extension_data_format_CSSM_X509_DATAFORMAT_PAIR: extension_data_format = 2;
pub type extension_data_format = ::std::os::raw::c_uint;
pub use self::extension_data_format as CSSM_X509EXT_DATA_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_extensionTagAndValue {
    pub type_: CSSM_BER_TAG,
    pub value: SecAsn1Item,
}
pub type CSSM_X509EXT_TAGandVALUE = cssm_x509_extensionTagAndValue;
pub type CSSM_X509EXT_TAGandVALUE_PTR = *mut cssm_x509_extensionTagAndValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509ext_pair {
    pub tagAndValue: CSSM_X509EXT_TAGandVALUE,
    pub parsedValue: *mut ::std::os::raw::c_void,
}
pub type CSSM_X509EXT_PAIR = cssm_x509ext_pair;
pub type CSSM_X509EXT_PAIR_PTR = *mut cssm_x509ext_pair;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_x509_extension {
    pub extnId: SecAsn1Oid,
    pub critical: CSSM_BOOL,
    pub format: CSSM_X509EXT_DATA_FORMAT,
    pub value: cssm_x509_extension_cssm_x509ext_value,
    pub BERvalue: SecAsn1Item,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cssm_x509_extension_cssm_x509ext_value {
    pub tagAndValue: *mut CSSM_X509EXT_TAGandVALUE,
    pub parsedValue: *mut ::std::os::raw::c_void,
    pub valuePair: *mut CSSM_X509EXT_PAIR,
}
pub type CSSM_X509_EXTENSION = cssm_x509_extension;
pub type CSSM_X509_EXTENSION_PTR = *mut cssm_x509_extension;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_extensions {
    pub numberOfExtensions: uint32,
    pub extensions: CSSM_X509_EXTENSION_PTR,
}
pub type CSSM_X509_EXTENSIONS = cssm_x509_extensions;
pub type CSSM_X509_EXTENSIONS_PTR = *mut cssm_x509_extensions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_tbs_certificate {
    pub version: SecAsn1Item,
    pub serialNumber: SecAsn1Item,
    pub signature: SecAsn1AlgId,
    pub issuer: CSSM_X509_NAME,
    pub validity: CSSM_X509_VALIDITY,
    pub subject: CSSM_X509_NAME,
    pub subjectPublicKeyInfo: SecAsn1PubKeyInfo,
    pub issuerUniqueIdentifier: SecAsn1Item,
    pub subjectUniqueIdentifier: SecAsn1Item,
    pub extensions: CSSM_X509_EXTENSIONS,
}
pub type CSSM_X509_TBS_CERTIFICATE = cssm_x509_tbs_certificate;
pub type CSSM_X509_TBS_CERTIFICATE_PTR = *mut cssm_x509_tbs_certificate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_signature {
    pub algorithmIdentifier: SecAsn1AlgId,
    pub encrypted: SecAsn1Item,
}
pub type CSSM_X509_SIGNATURE = cssm_x509_signature;
pub type CSSM_X509_SIGNATURE_PTR = *mut cssm_x509_signature;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_signed_certificate {
    pub certificate: CSSM_X509_TBS_CERTIFICATE,
    pub signature: CSSM_X509_SIGNATURE,
}
pub type CSSM_X509_SIGNED_CERTIFICATE = cssm_x509_signed_certificate;
pub type CSSM_X509_SIGNED_CERTIFICATE_PTR = *mut cssm_x509_signed_certificate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509ext_policyQualifierInfo {
    pub policyQualifierId: SecAsn1Oid,
    pub value: SecAsn1Item,
}
pub type CSSM_X509EXT_POLICYQUALIFIERINFO = cssm_x509ext_policyQualifierInfo;
pub type CSSM_X509EXT_POLICYQUALIFIERINFO_PTR = *mut cssm_x509ext_policyQualifierInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509ext_policyQualifiers {
    pub numberOfPolicyQualifiers: uint32,
    pub policyQualifier: *mut CSSM_X509EXT_POLICYQUALIFIERINFO,
}
pub type CSSM_X509EXT_POLICYQUALIFIERS = cssm_x509ext_policyQualifiers;
pub type CSSM_X509EXT_POLICYQUALIFIERS_PTR = *mut cssm_x509ext_policyQualifiers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509ext_policyInfo {
    pub policyIdentifier: SecAsn1Oid,
    pub policyQualifiers: CSSM_X509EXT_POLICYQUALIFIERS,
}
pub type CSSM_X509EXT_POLICYINFO = cssm_x509ext_policyInfo;
pub type CSSM_X509EXT_POLICYINFO_PTR = *mut cssm_x509ext_policyInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_revoked_cert_entry {
    pub certificateSerialNumber: SecAsn1Item,
    pub revocationDate: CSSM_X509_TIME,
    pub extensions: CSSM_X509_EXTENSIONS,
}
pub type CSSM_X509_REVOKED_CERT_ENTRY = cssm_x509_revoked_cert_entry;
pub type CSSM_X509_REVOKED_CERT_ENTRY_PTR = *mut cssm_x509_revoked_cert_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_revoked_cert_list {
    pub numberOfRevokedCertEntries: uint32,
    pub revokedCertEntry: CSSM_X509_REVOKED_CERT_ENTRY_PTR,
}
pub type CSSM_X509_REVOKED_CERT_LIST = cssm_x509_revoked_cert_list;
pub type CSSM_X509_REVOKED_CERT_LIST_PTR = *mut cssm_x509_revoked_cert_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_tbs_certlist {
    pub version: SecAsn1Item,
    pub signature: SecAsn1AlgId,
    pub issuer: CSSM_X509_NAME,
    pub thisUpdate: CSSM_X509_TIME,
    pub nextUpdate: CSSM_X509_TIME,
    pub revokedCertificates: CSSM_X509_REVOKED_CERT_LIST_PTR,
    pub extensions: CSSM_X509_EXTENSIONS,
}
pub type CSSM_X509_TBS_CERTLIST = cssm_x509_tbs_certlist;
pub type CSSM_X509_TBS_CERTLIST_PTR = *mut cssm_x509_tbs_certlist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_x509_signed_crl {
    pub tbsCertList: CSSM_X509_TBS_CERTLIST,
    pub signature: CSSM_X509_SIGNATURE,
}
pub type CSSM_X509_SIGNED_CRL = cssm_x509_signed_crl;
pub type CSSM_X509_SIGNED_CRL_PTR = *mut cssm_x509_signed_crl;
extern "C" {
    pub fn SecCertificateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecCertificateCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
    ) -> SecCertificateRef;
}
extern "C" {
    pub fn SecCertificateCopyData(certificate: SecCertificateRef) -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopySubjectSummary(certificate: SecCertificateRef) -> CFStringRef;
}
extern "C" {
    pub fn SecCertificateCopyCommonName(
        certificate: SecCertificateRef,
        commonName: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopyEmailAddresses(
        certificate: SecCertificateRef,
        emailAddresses: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopyNormalizedIssuerSequence(certificate: SecCertificateRef) -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopyNormalizedSubjectSequence(certificate: SecCertificateRef)
        -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopyKey(certificate: SecCertificateRef) -> SecKeyRef;
}
extern "C" {
    #[link_name = "\u{1}_SecCertificateCopyPublicKey$LEGACYMAC"]
    pub fn SecCertificateCopyPublicKey(
        certificate: SecCertificateRef,
        key: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopySerialNumberData(
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    #[link_name = "\u{1}_SecCertificateCopySerialNumber$LEGACYMAC"]
    pub fn SecCertificateCopySerialNumber(
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub const kSecSubjectItemAttr: _bindgen_ty_152 = 1937072746;
pub const kSecIssuerItemAttr: _bindgen_ty_152 = 1769173877;
pub const kSecSerialNumberItemAttr: _bindgen_ty_152 = 1936614002;
pub const kSecPublicKeyHashItemAttr: _bindgen_ty_152 = 1752198009;
pub const kSecSubjectKeyIdentifierItemAttr: _bindgen_ty_152 = 1936419172;
pub const kSecCertTypeItemAttr: _bindgen_ty_152 = 1668577648;
pub const kSecCertEncodingItemAttr: _bindgen_ty_152 = 1667591779;
pub type _bindgen_ty_152 = ::std::os::raw::c_uint;
extern "C" {
    pub fn SecCertificateCreateFromData(
        data: *const SecAsn1Item,
        type_: CSSM_CERT_TYPE,
        encoding: CSSM_CERT_ENCODING,
        certificate: *mut SecCertificateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateAddToKeychain(
        certificate: SecCertificateRef,
        keychain: SecKeychainRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateGetData(certificate: SecCertificateRef, data: CSSM_DATA_PTR) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateGetType(
        certificate: SecCertificateRef,
        certificateType: *mut CSSM_CERT_TYPE,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateGetSubject(
        certificate: SecCertificateRef,
        subject: *mut *const CSSM_X509_NAME,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateGetIssuer(
        certificate: SecCertificateRef,
        issuer: *mut *const CSSM_X509_NAME,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateGetCLHandle(
        certificate: SecCertificateRef,
        clHandle: *mut CSSM_CL_HANDLE,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateGetAlgorithmID(
        certificate: SecCertificateRef,
        algid: *mut *const SecAsn1AlgId,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopyPreference(
        name: CFStringRef,
        keyUsage: uint32,
        certificate: *mut SecCertificateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateCopyPreferred(
        name: CFStringRef,
        keyUsage: CFArrayRef,
    ) -> SecCertificateRef;
}
extern "C" {
    pub fn SecCertificateSetPreference(
        certificate: SecCertificateRef,
        name: CFStringRef,
        keyUsage: uint32,
        date: CFDateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCertificateSetPreferred(
        certificate: SecCertificateRef,
        name: CFStringRef,
        keyUsage: CFArrayRef,
    ) -> OSStatus;
}
pub const SecKeyUsage_kSecKeyUsageUnspecified: SecKeyUsage = 0;
pub const SecKeyUsage_kSecKeyUsageDigitalSignature: SecKeyUsage = 1;
pub const SecKeyUsage_kSecKeyUsageNonRepudiation: SecKeyUsage = 2;
pub const SecKeyUsage_kSecKeyUsageContentCommitment: SecKeyUsage = 2;
pub const SecKeyUsage_kSecKeyUsageKeyEncipherment: SecKeyUsage = 4;
pub const SecKeyUsage_kSecKeyUsageDataEncipherment: SecKeyUsage = 8;
pub const SecKeyUsage_kSecKeyUsageKeyAgreement: SecKeyUsage = 16;
pub const SecKeyUsage_kSecKeyUsageKeyCertSign: SecKeyUsage = 32;
pub const SecKeyUsage_kSecKeyUsageCRLSign: SecKeyUsage = 64;
pub const SecKeyUsage_kSecKeyUsageEncipherOnly: SecKeyUsage = 128;
pub const SecKeyUsage_kSecKeyUsageDecipherOnly: SecKeyUsage = 256;
pub const SecKeyUsage_kSecKeyUsageCritical: SecKeyUsage = 2147483648;
pub const SecKeyUsage_kSecKeyUsageAll: SecKeyUsage = 2147483647;
pub type SecKeyUsage = u32;
extern "C" {
    pub static kSecPropertyKeyType: CFStringRef;
}
extern "C" {
    pub static kSecPropertyKeyLabel: CFStringRef;
}
extern "C" {
    pub static kSecPropertyKeyLocalizedLabel: CFStringRef;
}
extern "C" {
    pub static kSecPropertyKeyValue: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeWarning: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeSuccess: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeSection: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeData: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeString: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeURL: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeDate: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeArray: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeNumber: CFStringRef;
}
extern "C" {
    pub fn SecCertificateCopyValues(
        certificate: SecCertificateRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecCertificateCopyLongDescription(
        alloc: CFAllocatorRef,
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SecCertificateCopyShortDescription(
        alloc: CFAllocatorRef,
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SecCertificateCopyNormalizedIssuerContent(
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecCertificateCopyNormalizedSubjectContent(
        certificate: SecCertificateRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecIdentityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecIdentityCreateWithCertificate(
        keychainOrArray: CFTypeRef,
        certificateRef: SecCertificateRef,
        identityRef: *mut SecIdentityRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentityCopyCertificate(
        identityRef: SecIdentityRef,
        certificateRef: *mut SecCertificateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentityCopyPrivateKey(
        identityRef: SecIdentityRef,
        privateKeyRef: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentityCopyPreference(
        name: CFStringRef,
        keyUsage: CSSM_KEYUSE,
        validIssuers: CFArrayRef,
        identity: *mut SecIdentityRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentityCopyPreferred(
        name: CFStringRef,
        keyUsage: CFArrayRef,
        validIssuers: CFArrayRef,
    ) -> SecIdentityRef;
}
extern "C" {
    pub fn SecIdentitySetPreference(
        identity: SecIdentityRef,
        name: CFStringRef,
        keyUsage: CSSM_KEYUSE,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentitySetPreferred(
        identity: SecIdentityRef,
        name: CFStringRef,
        keyUsage: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentityCopySystemIdentity(
        domain: CFStringRef,
        idRef: *mut SecIdentityRef,
        actualDomain: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentitySetSystemIdentity(domain: CFStringRef, idRef: SecIdentityRef) -> OSStatus;
}
extern "C" {
    pub static kSecIdentityDomainDefault: CFStringRef;
}
extern "C" {
    pub static kSecIdentityDomainKerberosKDC: CFStringRef;
}
extern "C" {
    pub fn SecAccessControlGetTypeID() -> CFTypeID;
}
pub const SecAccessControlCreateFlags_kSecAccessControlUserPresence: SecAccessControlCreateFlags =
    1;
pub const SecAccessControlCreateFlags_kSecAccessControlBiometryAny: SecAccessControlCreateFlags = 2;
pub const SecAccessControlCreateFlags_kSecAccessControlTouchIDAny: SecAccessControlCreateFlags = 2;
pub const SecAccessControlCreateFlags_kSecAccessControlBiometryCurrentSet:
    SecAccessControlCreateFlags = 8;
pub const SecAccessControlCreateFlags_kSecAccessControlTouchIDCurrentSet:
    SecAccessControlCreateFlags = 8;
pub const SecAccessControlCreateFlags_kSecAccessControlDevicePasscode: SecAccessControlCreateFlags =
    16;
pub const SecAccessControlCreateFlags_kSecAccessControlWatch: SecAccessControlCreateFlags = 32;
pub const SecAccessControlCreateFlags_kSecAccessControlOr: SecAccessControlCreateFlags = 16384;
pub const SecAccessControlCreateFlags_kSecAccessControlAnd: SecAccessControlCreateFlags = 32768;
pub const SecAccessControlCreateFlags_kSecAccessControlPrivateKeyUsage:
    SecAccessControlCreateFlags = 1073741824;
pub const SecAccessControlCreateFlags_kSecAccessControlApplicationPassword:
    SecAccessControlCreateFlags = 2147483648;
pub type SecAccessControlCreateFlags = CFOptionFlags;
extern "C" {
    pub fn SecAccessControlCreateWithFlags(
        allocator: CFAllocatorRef,
        protection: CFTypeRef,
        flags: SecAccessControlCreateFlags,
        error: *mut CFErrorRef,
    ) -> SecAccessControlRef;
}
extern "C" {
    pub static kSecClass: CFStringRef;
}
extern "C" {
    pub static kSecClassInternetPassword: CFStringRef;
}
extern "C" {
    pub static kSecClassGenericPassword: CFStringRef;
}
extern "C" {
    pub static kSecClassCertificate: CFStringRef;
}
extern "C" {
    pub static kSecClassKey: CFStringRef;
}
extern "C" {
    pub static kSecClassIdentity: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessible: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccess: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessControl: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessGroup: CFStringRef;
}
extern "C" {
    pub static kSecAttrSynchronizable: CFStringRef;
}
extern "C" {
    pub static kSecAttrSynchronizableAny: CFStringRef;
}
extern "C" {
    pub static kSecAttrCreationDate: CFStringRef;
}
extern "C" {
    pub static kSecAttrModificationDate: CFStringRef;
}
extern "C" {
    pub static kSecAttrDescription: CFStringRef;
}
extern "C" {
    pub static kSecAttrComment: CFStringRef;
}
extern "C" {
    pub static kSecAttrCreator: CFStringRef;
}
extern "C" {
    pub static kSecAttrType: CFStringRef;
}
extern "C" {
    pub static kSecAttrLabel: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsInvisible: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsNegative: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccount: CFStringRef;
}
extern "C" {
    pub static kSecAttrService: CFStringRef;
}
extern "C" {
    pub static kSecAttrGeneric: CFStringRef;
}
extern "C" {
    pub static kSecAttrSecurityDomain: CFStringRef;
}
extern "C" {
    pub static kSecAttrServer: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocol: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationType: CFStringRef;
}
extern "C" {
    pub static kSecAttrPort: CFStringRef;
}
extern "C" {
    pub static kSecAttrPath: CFStringRef;
}
extern "C" {
    pub static kSecAttrSubject: CFStringRef;
}
extern "C" {
    pub static kSecAttrIssuer: CFStringRef;
}
extern "C" {
    pub static kSecAttrSerialNumber: CFStringRef;
}
extern "C" {
    pub static kSecAttrSubjectKeyID: CFStringRef;
}
extern "C" {
    pub static kSecAttrPublicKeyHash: CFStringRef;
}
extern "C" {
    pub static kSecAttrCertificateType: CFStringRef;
}
extern "C" {
    pub static kSecAttrCertificateEncoding: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClass: CFStringRef;
}
extern "C" {
    pub static kSecAttrApplicationLabel: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsPermanent: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsSensitive: CFStringRef;
}
extern "C" {
    pub static kSecAttrIsExtractable: CFStringRef;
}
extern "C" {
    pub static kSecAttrApplicationTag: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyType: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRF: CFStringRef;
}
extern "C" {
    pub static kSecAttrSalt: CFStringRef;
}
extern "C" {
    pub static kSecAttrRounds: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeySizeInBits: CFStringRef;
}
extern "C" {
    pub static kSecAttrEffectiveKeySize: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanEncrypt: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanDecrypt: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanDerive: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanSign: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanVerify: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanWrap: CFStringRef;
}
extern "C" {
    pub static kSecAttrCanUnwrap: CFStringRef;
}
extern "C" {
    pub static kSecAttrSyncViewHint: CFStringRef;
}
extern "C" {
    pub static kSecAttrTokenID: CFStringRef;
}
extern "C" {
    pub static kSecAttrPersistantReference: CFStringRef;
}
extern "C" {
    pub static kSecAttrPersistentReference: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleWhenUnlocked: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAfterFirstUnlock: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAlways: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleWhenUnlockedThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessibleAlwaysThisDeviceOnly: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTPAccount: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIRC: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolNNTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolPOP3: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSMTP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSOCKS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIMAP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolLDAP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolAppleTalk: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolAFP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolTelnet: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSSH: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTPProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolHTTPSProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolFTPProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolSMB: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolRTSP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolRTSPProxy: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolDAAP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolEPPC: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIPP: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolNNTPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolLDAPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolTelnetS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIMAPS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolIRCS: CFStringRef;
}
extern "C" {
    pub static kSecAttrProtocolPOP3S: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeNTLM: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeMSN: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeDPA: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeRPA: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeHTTPBasic: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeHTTPDigest: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeHTMLForm: CFStringRef;
}
extern "C" {
    pub static kSecAttrAuthenticationTypeDefault: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClassPublic: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClassPrivate: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyClassSymmetric: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeRSA: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeDSA: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeAES: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeDES: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyType3DES: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeRC4: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeRC2: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeCAST: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeECDSA: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeEC: CFStringRef;
}
extern "C" {
    pub static kSecAttrKeyTypeECSECPrimeRandom: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA1: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA224: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA256: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA384: CFStringRef;
}
extern "C" {
    pub static kSecAttrPRFHmacAlgSHA512: CFStringRef;
}
extern "C" {
    pub static kSecMatchPolicy: CFStringRef;
}
extern "C" {
    pub static kSecMatchItemList: CFStringRef;
}
extern "C" {
    pub static kSecMatchSearchList: CFStringRef;
}
extern "C" {
    pub static kSecMatchIssuers: CFStringRef;
}
extern "C" {
    pub static kSecMatchEmailAddressIfPresent: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectContains: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectStartsWith: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectEndsWith: CFStringRef;
}
extern "C" {
    pub static kSecMatchSubjectWholeString: CFStringRef;
}
extern "C" {
    pub static kSecMatchCaseInsensitive: CFStringRef;
}
extern "C" {
    pub static kSecMatchDiacriticInsensitive: CFStringRef;
}
extern "C" {
    pub static kSecMatchWidthInsensitive: CFStringRef;
}
extern "C" {
    pub static kSecMatchTrustedOnly: CFStringRef;
}
extern "C" {
    pub static kSecMatchValidOnDate: CFStringRef;
}
extern "C" {
    pub static kSecMatchLimit: CFStringRef;
}
extern "C" {
    pub static kSecMatchLimitOne: CFStringRef;
}
extern "C" {
    pub static kSecMatchLimitAll: CFStringRef;
}
extern "C" {
    pub static kSecReturnData: CFStringRef;
}
extern "C" {
    pub static kSecReturnAttributes: CFStringRef;
}
extern "C" {
    pub static kSecReturnRef: CFStringRef;
}
extern "C" {
    pub static kSecReturnPersistentRef: CFStringRef;
}
extern "C" {
    pub static kSecValueData: CFStringRef;
}
extern "C" {
    pub static kSecValueRef: CFStringRef;
}
extern "C" {
    pub static kSecValuePersistentRef: CFStringRef;
}
extern "C" {
    pub static kSecUseItemList: CFStringRef;
}
extern "C" {
    pub static kSecUseKeychain: CFStringRef;
}
extern "C" {
    pub static kSecUseOperationPrompt: CFStringRef;
}
extern "C" {
    pub static kSecUseNoAuthenticationUI: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUI: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationContext: CFStringRef;
}
extern "C" {
    pub static kSecUseDataProtectionKeychain: CFStringRef;
}
extern "C" {
    pub static kSecUseUserIndependentKeychain: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUIAllow: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUIFail: CFStringRef;
}
extern "C" {
    pub static kSecUseAuthenticationUISkip: CFStringRef;
}
extern "C" {
    pub static kSecAttrTokenIDSecureEnclave: CFStringRef;
}
extern "C" {
    pub static kSecAttrAccessGroupToken: CFStringRef;
}
extern "C" {
    pub fn SecItemCopyMatching(query: CFDictionaryRef, result: *mut CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecItemAdd(attributes: CFDictionaryRef, result: *mut CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecItemUpdate(query: CFDictionaryRef, attributesToUpdate: CFDictionaryRef) -> OSStatus;
}
extern "C" {
    pub fn SecItemDelete(query: CFDictionaryRef) -> OSStatus;
}
pub type SecAccessOwnerType = UInt32;
pub const kSecUseOnlyUID: _bindgen_ty_153 = 1;
pub const kSecUseOnlyGID: _bindgen_ty_153 = 2;
pub const kSecHonorRoot: _bindgen_ty_153 = 256;
pub const kSecMatchBits: _bindgen_ty_153 = 3;
pub type _bindgen_ty_153 = ::std::os::raw::c_uint;
extern "C" {
    pub static kSecACLAuthorizationAny: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationLogin: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationGenKey: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationDelete: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationExportWrapped: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationExportClear: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationImportWrapped: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationImportClear: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationSign: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationEncrypt: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationDecrypt: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationMAC: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationDerive: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationKeychainCreate: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationKeychainDelete: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationKeychainItemRead: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationKeychainItemInsert: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationKeychainItemModify: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationKeychainItemDelete: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationChangeACL: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationChangeOwner: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationPartitionID: CFStringRef;
}
extern "C" {
    pub static kSecACLAuthorizationIntegrity: CFStringRef;
}
extern "C" {
    pub fn SecAccessGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecAccessCreate(
        descriptor: CFStringRef,
        trustedlist: CFArrayRef,
        accessRef: *mut SecAccessRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAccessCreateFromOwnerAndACL(
        owner: *const CSSM_ACL_OWNER_PROTOTYPE,
        aclCount: uint32,
        acls: *const CSSM_ACL_ENTRY_INFO,
        accessRef: *mut SecAccessRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAccessCreateWithOwnerAndACL(
        userId: uid_t,
        groupId: gid_t,
        ownerType: SecAccessOwnerType,
        acls: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> SecAccessRef;
}
extern "C" {
    pub fn SecAccessGetOwnerAndACL(
        accessRef: SecAccessRef,
        owner: *mut CSSM_ACL_OWNER_PROTOTYPE_PTR,
        aclCount: *mut uint32,
        acls: *mut CSSM_ACL_ENTRY_INFO_PTR,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAccessCopyOwnerAndACL(
        accessRef: SecAccessRef,
        userId: *mut uid_t,
        groupId: *mut gid_t,
        ownerType: *mut SecAccessOwnerType,
        aclList: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAccessCopyACLList(accessRef: SecAccessRef, aclList: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SecAccessCopySelectedACLList(
        accessRef: SecAccessRef,
        action: CSSM_ACL_AUTHORIZATION_TAG,
        aclList: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAccessCopyMatchingACLList(
        accessRef: SecAccessRef,
        authorizationTag: CFTypeRef,
    ) -> CFArrayRef;
}
pub const kSecKeyKeyClass: _bindgen_ty_154 = 0;
pub const kSecKeyPrintName: _bindgen_ty_154 = 1;
pub const kSecKeyAlias: _bindgen_ty_154 = 2;
pub const kSecKeyPermanent: _bindgen_ty_154 = 3;
pub const kSecKeyPrivate: _bindgen_ty_154 = 4;
pub const kSecKeyModifiable: _bindgen_ty_154 = 5;
pub const kSecKeyLabel: _bindgen_ty_154 = 6;
pub const kSecKeyApplicationTag: _bindgen_ty_154 = 7;
pub const kSecKeyKeyCreator: _bindgen_ty_154 = 8;
pub const kSecKeyKeyType: _bindgen_ty_154 = 9;
pub const kSecKeyKeySizeInBits: _bindgen_ty_154 = 10;
pub const kSecKeyEffectiveKeySize: _bindgen_ty_154 = 11;
pub const kSecKeyStartDate: _bindgen_ty_154 = 12;
pub const kSecKeyEndDate: _bindgen_ty_154 = 13;
pub const kSecKeySensitive: _bindgen_ty_154 = 14;
pub const kSecKeyAlwaysSensitive: _bindgen_ty_154 = 15;
pub const kSecKeyExtractable: _bindgen_ty_154 = 16;
pub const kSecKeyNeverExtractable: _bindgen_ty_154 = 17;
pub const kSecKeyEncrypt: _bindgen_ty_154 = 18;
pub const kSecKeyDecrypt: _bindgen_ty_154 = 19;
pub const kSecKeyDerive: _bindgen_ty_154 = 20;
pub const kSecKeySign: _bindgen_ty_154 = 21;
pub const kSecKeyVerify: _bindgen_ty_154 = 22;
pub const kSecKeySignRecover: _bindgen_ty_154 = 23;
pub const kSecKeyVerifyRecover: _bindgen_ty_154 = 24;
pub const kSecKeyWrap: _bindgen_ty_154 = 25;
pub const kSecKeyUnwrap: _bindgen_ty_154 = 26;
pub type _bindgen_ty_154 = ::std::os::raw::c_int;
pub const SecCredentialType_kSecCredentialTypeDefault: SecCredentialType = 0;
pub const SecCredentialType_kSecCredentialTypeWithUI: SecCredentialType = 1;
pub const SecCredentialType_kSecCredentialTypeNoUI: SecCredentialType = 2;
pub type SecCredentialType = uint32;
pub const SecPadding_kSecPaddingNone: SecPadding = 0;
pub const SecPadding_kSecPaddingPKCS1: SecPadding = 1;
pub const SecPadding_kSecPaddingOAEP: SecPadding = 2;
pub const SecPadding_kSecPaddingSigRaw: SecPadding = 16384;
pub const SecPadding_kSecPaddingPKCS1MD2: SecPadding = 32768;
pub const SecPadding_kSecPaddingPKCS1MD5: SecPadding = 32769;
pub const SecPadding_kSecPaddingPKCS1SHA1: SecPadding = 32770;
pub const SecPadding_kSecPaddingPKCS1SHA224: SecPadding = 32771;
pub const SecPadding_kSecPaddingPKCS1SHA256: SecPadding = 32772;
pub const SecPadding_kSecPaddingPKCS1SHA384: SecPadding = 32773;
pub const SecPadding_kSecPaddingPKCS1SHA512: SecPadding = 32774;
pub type SecPadding = u32;
pub const SecKeySizes_kSecDefaultKeySize: SecKeySizes = 0;
pub const SecKeySizes_kSec3DES192: SecKeySizes = 192;
pub const SecKeySizes_kSecAES128: SecKeySizes = 128;
pub const SecKeySizes_kSecAES192: SecKeySizes = 192;
pub const SecKeySizes_kSecAES256: SecKeySizes = 256;
pub const SecKeySizes_kSecp192r1: SecKeySizes = 192;
pub const SecKeySizes_kSecp256r1: SecKeySizes = 256;
pub const SecKeySizes_kSecp384r1: SecKeySizes = 384;
pub const SecKeySizes_kSecp521r1: SecKeySizes = 521;
pub const SecKeySizes_kSecRSAMin: SecKeySizes = 1024;
pub const SecKeySizes_kSecRSAMax: SecKeySizes = 4096;
pub type SecKeySizes = u32;
extern "C" {
    pub static kSecPrivateKeyAttrs: CFStringRef;
}
extern "C" {
    pub static kSecPublicKeyAttrs: CFStringRef;
}
extern "C" {
    pub fn SecKeyGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecKeyCreatePair(
        keychainRef: SecKeychainRef,
        algorithm: CSSM_ALGORITHMS,
        keySizeInBits: uint32,
        contextHandle: CSSM_CC_HANDLE,
        publicKeyUsage: CSSM_KEYUSE,
        publicKeyAttr: uint32,
        privateKeyUsage: CSSM_KEYUSE,
        privateKeyAttr: uint32,
        initialAccess: SecAccessRef,
        publicKey: *mut SecKeyRef,
        privateKey: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyGenerate(
        keychainRef: SecKeychainRef,
        algorithm: CSSM_ALGORITHMS,
        keySizeInBits: uint32,
        contextHandle: CSSM_CC_HANDLE,
        keyUsage: CSSM_KEYUSE,
        keyAttr: uint32,
        initialAccess: SecAccessRef,
        keyRef: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyGetCSSMKey(key: SecKeyRef, cssmKey: *mut *const CSSM_KEY) -> OSStatus;
}
extern "C" {
    pub fn SecKeyGetCSPHandle(keyRef: SecKeyRef, cspHandle: *mut CSSM_CSP_HANDLE) -> OSStatus;
}
extern "C" {
    pub fn SecKeyGetCredentials(
        keyRef: SecKeyRef,
        operation: CSSM_ACL_AUTHORIZATION_TAG,
        credentialType: SecCredentialType,
        outCredentials: *mut *const CSSM_ACCESS_CREDENTIALS,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyGenerateSymmetric(
        parameters: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyCreateFromData(
        parameters: CFDictionaryRef,
        keyData: CFDataRef,
        error: *mut CFErrorRef,
    ) -> SecKeyRef;
}
pub type SecKeyGeneratePairBlock = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn SecKeyGeneratePairAsync(
        parameters: CFDictionaryRef,
        deliveryQueue: NSObject,
        result: SecKeyGeneratePairBlock,
    );
}
extern "C" {
    pub fn SecKeyDeriveFromPassword(
        password: CFStringRef,
        parameters: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyWrapSymmetric(
        keyToWrap: SecKeyRef,
        wrappingKey: SecKeyRef,
        parameters: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyUnwrapSymmetric(
        keyToUnwrap: *mut CFDataRef,
        unwrappingKey: SecKeyRef,
        parameters: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyGeneratePair(
        parameters: CFDictionaryRef,
        publicKey: *mut SecKeyRef,
        privateKey: *mut SecKeyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeyCreateRandomKey(parameters: CFDictionaryRef, error: *mut CFErrorRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyCreateWithData(
        keyData: CFDataRef,
        attributes: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> SecKeyRef;
}
extern "C" {
    pub fn SecKeyGetBlockSize(key: SecKeyRef) -> usize;
}
extern "C" {
    pub fn SecKeyCopyExternalRepresentation(key: SecKeyRef, error: *mut CFErrorRef) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyCopyAttributes(key: SecKeyRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecKeyCopyPublicKey(key: SecKeyRef) -> SecKeyRef;
}
pub type SecKeyAlgorithm = CFStringRef;
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureRaw: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureDigestPSSSHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSASignatureMessagePSSSHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureRFC4754: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureDigestX962SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDSASignatureMessageX962SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionRaw: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionPKCS1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandard: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactor: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384: SecKeyAlgorithm;
}
extern "C" {
    pub static kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512: SecKeyAlgorithm;
}
extern "C" {
    pub fn SecKeyCreateSignature(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        dataToSign: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyVerifySignature(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        signedData: CFDataRef,
        signature: CFDataRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SecKeyCreateEncryptedData(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        plaintext: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn SecKeyCreateDecryptedData(
        key: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        ciphertext: CFDataRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type SecKeyKeyExchangeParameter = CFStringRef;
extern "C" {
    pub static kSecKeyKeyExchangeParameterRequestedSize: SecKeyKeyExchangeParameter;
}
extern "C" {
    pub static kSecKeyKeyExchangeParameterSharedInfo: SecKeyKeyExchangeParameter;
}
extern "C" {
    pub fn SecKeyCopyKeyExchangeResult(
        privateKey: SecKeyRef,
        algorithm: SecKeyAlgorithm,
        publicKey: SecKeyRef,
        parameters: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub const SecKeyOperationType_kSecKeyOperationTypeSign: SecKeyOperationType = 0;
pub const SecKeyOperationType_kSecKeyOperationTypeVerify: SecKeyOperationType = 1;
pub const SecKeyOperationType_kSecKeyOperationTypeEncrypt: SecKeyOperationType = 2;
pub const SecKeyOperationType_kSecKeyOperationTypeDecrypt: SecKeyOperationType = 3;
pub const SecKeyOperationType_kSecKeyOperationTypeKeyExchange: SecKeyOperationType = 4;
pub type SecKeyOperationType = CFIndex;
extern "C" {
    pub fn SecKeyIsAlgorithmSupported(
        key: SecKeyRef,
        operation: SecKeyOperationType,
        algorithm: SecKeyAlgorithm,
    ) -> Boolean;
}
extern "C" {
    pub static kSecPolicyAppleX509Basic: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleSSL: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleSMIME: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleEAP: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleIPsec: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleiChat: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePKINITClient: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePKINITServer: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleCodeSigning: CFStringRef;
}
extern "C" {
    pub static kSecPolicyMacAppStoreReceipt: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleIDValidation: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleTimeStamping: CFStringRef;
}
extern "C" {
    pub static kSecPolicyAppleRevocation: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePassbookSigning: CFStringRef;
}
extern "C" {
    pub static kSecPolicyApplePayIssuerEncryption: CFStringRef;
}
extern "C" {
    pub static kSecPolicyOid: CFStringRef;
}
extern "C" {
    pub static kSecPolicyName: CFStringRef;
}
extern "C" {
    pub static kSecPolicyClient: CFStringRef;
}
extern "C" {
    pub static kSecPolicyRevocationFlags: CFStringRef;
}
extern "C" {
    pub static kSecPolicyTeamIdentifier: CFStringRef;
}
extern "C" {
    pub fn SecPolicyGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecPolicyCopyProperties(policyRef: SecPolicyRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecPolicyCreateBasicX509() -> SecPolicyRef;
}
extern "C" {
    pub fn SecPolicyCreateSSL(server: Boolean, hostname: CFStringRef) -> SecPolicyRef;
}
pub const kSecRevocationOCSPMethod: _bindgen_ty_155 = 1;
pub const kSecRevocationCRLMethod: _bindgen_ty_155 = 2;
pub const kSecRevocationPreferCRL: _bindgen_ty_155 = 4;
pub const kSecRevocationRequirePositiveResponse: _bindgen_ty_155 = 8;
pub const kSecRevocationNetworkAccessDisabled: _bindgen_ty_155 = 16;
pub const kSecRevocationUseAnyAvailableMethod: _bindgen_ty_155 = 3;
pub type _bindgen_ty_155 = CFOptionFlags;
extern "C" {
    pub fn SecPolicyCreateRevocation(revocationFlags: CFOptionFlags) -> SecPolicyRef;
}
extern "C" {
    pub fn SecPolicyCreateWithProperties(
        policyIdentifier: CFTypeRef,
        properties: CFDictionaryRef,
    ) -> SecPolicyRef;
}
extern "C" {
    pub static kSecPolicyKU_DigitalSignature: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_NonRepudiation: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_KeyEncipherment: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_DataEncipherment: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_KeyAgreement: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_KeyCertSign: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_CRLSign: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_EncipherOnly: CFStringRef;
}
extern "C" {
    pub static kSecPolicyKU_DecipherOnly: CFStringRef;
}
extern "C" {
    pub fn SecPolicyCreateWithOID(policyOID: CFTypeRef) -> SecPolicyRef;
}
extern "C" {
    pub fn SecPolicyGetOID(policyRef: SecPolicyRef, oid: *mut SecAsn1Oid) -> OSStatus;
}
extern "C" {
    pub fn SecPolicyGetValue(policyRef: SecPolicyRef, value: *mut SecAsn1Item) -> OSStatus;
}
extern "C" {
    pub fn SecPolicySetValue(policyRef: SecPolicyRef, value: *const SecAsn1Item) -> OSStatus;
}
extern "C" {
    pub fn SecPolicySetProperties(policyRef: SecPolicyRef, properties: CFDictionaryRef)
        -> OSStatus;
}
extern "C" {
    pub fn SecPolicyGetTPHandle(policyRef: SecPolicyRef, tpHandle: *mut CSSM_TP_HANDLE)
        -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecRandom {
    _unused: [u8; 0],
}
pub type SecRandomRef = *const __SecRandom;
extern "C" {
    pub static kSecRandomDefault: SecRandomRef;
}
extern "C" {
    pub fn SecRandomCopyBytes(
        rnd: SecRandomRef,
        count: usize,
        bytes: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const CSSM_BASE_ERROR: _bindgen_ty_156 = -2147418112;
pub const CSSM_ERRORCODE_MODULE_EXTENT: _bindgen_ty_156 = 2048;
pub const CSSM_ERRORCODE_CUSTOM_OFFSET: _bindgen_ty_156 = 1024;
pub const CSSM_ERRORCODE_COMMON_EXTENT: _bindgen_ty_156 = 256;
pub const CSSM_CSSM_BASE_ERROR: _bindgen_ty_156 = -2147418112;
pub const CSSM_CSSM_PRIVATE_ERROR: _bindgen_ty_156 = -2147417088;
pub const CSSM_CSP_BASE_ERROR: _bindgen_ty_156 = -2147416064;
pub const CSSM_CSP_PRIVATE_ERROR: _bindgen_ty_156 = -2147415040;
pub const CSSM_DL_BASE_ERROR: _bindgen_ty_156 = -2147414016;
pub const CSSM_DL_PRIVATE_ERROR: _bindgen_ty_156 = -2147412992;
pub const CSSM_CL_BASE_ERROR: _bindgen_ty_156 = -2147411968;
pub const CSSM_CL_PRIVATE_ERROR: _bindgen_ty_156 = -2147410944;
pub const CSSM_TP_BASE_ERROR: _bindgen_ty_156 = -2147409920;
pub const CSSM_TP_PRIVATE_ERROR: _bindgen_ty_156 = -2147408896;
pub const CSSM_KR_BASE_ERROR: _bindgen_ty_156 = -2147407872;
pub const CSSM_KR_PRIVATE_ERROR: _bindgen_ty_156 = -2147406848;
pub const CSSM_AC_BASE_ERROR: _bindgen_ty_156 = -2147405824;
pub const CSSM_AC_PRIVATE_ERROR: _bindgen_ty_156 = -2147404800;
pub type _bindgen_ty_156 = ::std::os::raw::c_int;
pub const CSSM_MDS_BASE_ERROR: _bindgen_ty_157 = -2147414016;
pub const CSSM_MDS_PRIVATE_ERROR: _bindgen_ty_157 = -2147412992;
pub type _bindgen_ty_157 = ::std::os::raw::c_int;
pub const CSSMERR_CSSM_INVALID_ADDIN_HANDLE: _bindgen_ty_158 = -2147417855;
pub const CSSMERR_CSSM_NOT_INITIALIZED: _bindgen_ty_158 = -2147417854;
pub const CSSMERR_CSSM_INVALID_HANDLE_USAGE: _bindgen_ty_158 = -2147417853;
pub const CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND: _bindgen_ty_158 = -2147417852;
pub const CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL: _bindgen_ty_158 = -2147417851;
pub type _bindgen_ty_158 = ::std::os::raw::c_int;
pub const CSSM_ERRCODE_INTERNAL_ERROR: _bindgen_ty_159 = 1;
pub const CSSM_ERRCODE_MEMORY_ERROR: _bindgen_ty_159 = 2;
pub const CSSM_ERRCODE_MDS_ERROR: _bindgen_ty_159 = 3;
pub const CSSM_ERRCODE_INVALID_POINTER: _bindgen_ty_159 = 4;
pub const CSSM_ERRCODE_INVALID_INPUT_POINTER: _bindgen_ty_159 = 5;
pub const CSSM_ERRCODE_INVALID_OUTPUT_POINTER: _bindgen_ty_159 = 6;
pub const CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_159 = 7;
pub const CSSM_ERRCODE_SELF_CHECK_FAILED: _bindgen_ty_159 = 8;
pub const CSSM_ERRCODE_OS_ACCESS_DENIED: _bindgen_ty_159 = 9;
pub const CSSM_ERRCODE_FUNCTION_FAILED: _bindgen_ty_159 = 10;
pub const CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED: _bindgen_ty_159 = 11;
pub const CSSM_ERRCODE_INVALID_GUID: _bindgen_ty_159 = 12;
pub type _bindgen_ty_159 = ::std::os::raw::c_uint;
pub const CSSM_ERRCODE_OPERATION_AUTH_DENIED: _bindgen_ty_160 = 32;
pub const CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED: _bindgen_ty_160 = 33;
pub const CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED: _bindgen_ty_160 = 34;
pub const CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED: _bindgen_ty_160 = 35;
pub const CSSM_ERRCODE_OBJECT_ACL_REQUIRED: _bindgen_ty_160 = 36;
pub const CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS: _bindgen_ty_160 = 37;
pub const CSSM_ERRCODE_INVALID_ACL_BASE_CERTS: _bindgen_ty_160 = 38;
pub const CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED: _bindgen_ty_160 = 39;
pub const CSSM_ERRCODE_INVALID_SAMPLE_VALUE: _bindgen_ty_160 = 40;
pub const CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED: _bindgen_ty_160 = 41;
pub const CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE: _bindgen_ty_160 = 42;
pub const CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED: _bindgen_ty_160 = 43;
pub const CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK: _bindgen_ty_160 = 44;
pub const CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED: _bindgen_ty_160 = 45;
pub const CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG: _bindgen_ty_160 = 46;
pub const CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND: _bindgen_ty_160 = 47;
pub const CSSM_ERRCODE_INVALID_ACL_EDIT_MODE: _bindgen_ty_160 = 48;
pub const CSSM_ERRCODE_ACL_CHANGE_FAILED: _bindgen_ty_160 = 49;
pub const CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY: _bindgen_ty_160 = 50;
pub const CSSM_ERRCODE_INVALID_NEW_ACL_OWNER: _bindgen_ty_160 = 51;
pub const CSSM_ERRCODE_ACL_DELETE_FAILED: _bindgen_ty_160 = 52;
pub const CSSM_ERRCODE_ACL_REPLACE_FAILED: _bindgen_ty_160 = 53;
pub const CSSM_ERRCODE_ACL_ADD_FAILED: _bindgen_ty_160 = 54;
pub type _bindgen_ty_160 = ::std::os::raw::c_uint;
pub const CSSM_ERRCODE_INVALID_CONTEXT_HANDLE: _bindgen_ty_161 = 64;
pub const CSSM_ERRCODE_INCOMPATIBLE_VERSION: _bindgen_ty_161 = 65;
pub const CSSM_ERRCODE_INVALID_CERTGROUP_POINTER: _bindgen_ty_161 = 66;
pub const CSSM_ERRCODE_INVALID_CERT_POINTER: _bindgen_ty_161 = 67;
pub const CSSM_ERRCODE_INVALID_CRL_POINTER: _bindgen_ty_161 = 68;
pub const CSSM_ERRCODE_INVALID_FIELD_POINTER: _bindgen_ty_161 = 69;
pub const CSSM_ERRCODE_INVALID_DATA: _bindgen_ty_161 = 70;
pub const CSSM_ERRCODE_CRL_ALREADY_SIGNED: _bindgen_ty_161 = 71;
pub const CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS: _bindgen_ty_161 = 72;
pub const CSSM_ERRCODE_VERIFICATION_FAILURE: _bindgen_ty_161 = 73;
pub const CSSM_ERRCODE_INVALID_DB_HANDLE: _bindgen_ty_161 = 74;
pub const CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED: _bindgen_ty_161 = 75;
pub const CSSM_ERRCODE_INVALID_DB_LIST: _bindgen_ty_161 = 76;
pub const CSSM_ERRCODE_INVALID_DB_LIST_POINTER: _bindgen_ty_161 = 77;
pub const CSSM_ERRCODE_UNKNOWN_FORMAT: _bindgen_ty_161 = 78;
pub const CSSM_ERRCODE_UNKNOWN_TAG: _bindgen_ty_161 = 79;
pub const CSSM_ERRCODE_INVALID_CSP_HANDLE: _bindgen_ty_161 = 80;
pub const CSSM_ERRCODE_INVALID_DL_HANDLE: _bindgen_ty_161 = 81;
pub const CSSM_ERRCODE_INVALID_CL_HANDLE: _bindgen_ty_161 = 82;
pub const CSSM_ERRCODE_INVALID_TP_HANDLE: _bindgen_ty_161 = 83;
pub const CSSM_ERRCODE_INVALID_KR_HANDLE: _bindgen_ty_161 = 84;
pub const CSSM_ERRCODE_INVALID_AC_HANDLE: _bindgen_ty_161 = 85;
pub const CSSM_ERRCODE_INVALID_PASSTHROUGH_ID: _bindgen_ty_161 = 86;
pub const CSSM_ERRCODE_INVALID_NETWORK_ADDR: _bindgen_ty_161 = 87;
pub const CSSM_ERRCODE_INVALID_CRYPTO_DATA: _bindgen_ty_161 = 88;
pub type _bindgen_ty_161 = ::std::os::raw::c_uint;
pub const CSSMERR_CSSM_INTERNAL_ERROR: _bindgen_ty_162 = -2147418111;
pub const CSSMERR_CSSM_MEMORY_ERROR: _bindgen_ty_162 = -2147418110;
pub const CSSMERR_CSSM_MDS_ERROR: _bindgen_ty_162 = -2147418109;
pub const CSSMERR_CSSM_INVALID_POINTER: _bindgen_ty_162 = -2147418108;
pub const CSSMERR_CSSM_INVALID_INPUT_POINTER: _bindgen_ty_162 = -2147418107;
pub const CSSMERR_CSSM_INVALID_OUTPUT_POINTER: _bindgen_ty_162 = -2147418106;
pub const CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_162 = -2147418105;
pub const CSSMERR_CSSM_SELF_CHECK_FAILED: _bindgen_ty_162 = -2147418104;
pub const CSSMERR_CSSM_OS_ACCESS_DENIED: _bindgen_ty_162 = -2147418103;
pub const CSSMERR_CSSM_FUNCTION_FAILED: _bindgen_ty_162 = -2147418102;
pub const CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED: _bindgen_ty_162 = -2147418101;
pub const CSSMERR_CSSM_INVALID_GUID: _bindgen_ty_162 = -2147418100;
pub type _bindgen_ty_162 = ::std::os::raw::c_int;
pub const CSSMERR_CSSM_INVALID_CONTEXT_HANDLE: _bindgen_ty_163 = -2147418048;
pub const CSSMERR_CSSM_INCOMPATIBLE_VERSION: _bindgen_ty_163 = -2147418047;
pub const CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED: _bindgen_ty_163 = -2147418037;
pub type _bindgen_ty_163 = ::std::os::raw::c_int;
pub const CSSM_CSSM_BASE_CSSM_ERROR: _bindgen_ty_164 = -2147417840;
pub const CSSMERR_CSSM_SCOPE_NOT_SUPPORTED: _bindgen_ty_164 = -2147417839;
pub const CSSMERR_CSSM_PVC_ALREADY_CONFIGURED: _bindgen_ty_164 = -2147417838;
pub const CSSMERR_CSSM_INVALID_PVC: _bindgen_ty_164 = -2147417837;
pub const CSSMERR_CSSM_EMM_LOAD_FAILED: _bindgen_ty_164 = -2147417836;
pub const CSSMERR_CSSM_EMM_UNLOAD_FAILED: _bindgen_ty_164 = -2147417835;
pub const CSSMERR_CSSM_ADDIN_LOAD_FAILED: _bindgen_ty_164 = -2147417834;
pub const CSSMERR_CSSM_INVALID_KEY_HIERARCHY: _bindgen_ty_164 = -2147417833;
pub const CSSMERR_CSSM_ADDIN_UNLOAD_FAILED: _bindgen_ty_164 = -2147417832;
pub const CSSMERR_CSSM_LIB_REF_NOT_FOUND: _bindgen_ty_164 = -2147417831;
pub const CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE: _bindgen_ty_164 = -2147417830;
pub const CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED: _bindgen_ty_164 = -2147417829;
pub const CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED: _bindgen_ty_164 = -2147417828;
pub const CSSMERR_CSSM_INVALID_SERVICE_MASK: _bindgen_ty_164 = -2147417827;
pub const CSSMERR_CSSM_MODULE_NOT_LOADED: _bindgen_ty_164 = -2147417826;
pub const CSSMERR_CSSM_INVALID_SUBSERVICEID: _bindgen_ty_164 = -2147417825;
pub const CSSMERR_CSSM_BUFFER_TOO_SMALL: _bindgen_ty_164 = -2147417824;
pub const CSSMERR_CSSM_INVALID_ATTRIBUTE: _bindgen_ty_164 = -2147417823;
pub const CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT: _bindgen_ty_164 = -2147417822;
pub const CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL: _bindgen_ty_164 = -2147417821;
pub const CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND: _bindgen_ty_164 = -2147417820;
pub const CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND: _bindgen_ty_164 = -2147417819;
pub type _bindgen_ty_164 = ::std::os::raw::c_int;
pub const CSSMERR_CSP_INTERNAL_ERROR: _bindgen_ty_165 = -2147416063;
pub const CSSMERR_CSP_MEMORY_ERROR: _bindgen_ty_165 = -2147416062;
pub const CSSMERR_CSP_MDS_ERROR: _bindgen_ty_165 = -2147416061;
pub const CSSMERR_CSP_INVALID_POINTER: _bindgen_ty_165 = -2147416060;
pub const CSSMERR_CSP_INVALID_INPUT_POINTER: _bindgen_ty_165 = -2147416059;
pub const CSSMERR_CSP_INVALID_OUTPUT_POINTER: _bindgen_ty_165 = -2147416058;
pub const CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_165 = -2147416057;
pub const CSSMERR_CSP_SELF_CHECK_FAILED: _bindgen_ty_165 = -2147416056;
pub const CSSMERR_CSP_OS_ACCESS_DENIED: _bindgen_ty_165 = -2147416055;
pub const CSSMERR_CSP_FUNCTION_FAILED: _bindgen_ty_165 = -2147416054;
pub type _bindgen_ty_165 = ::std::os::raw::c_int;
pub const CSSMERR_CSP_OPERATION_AUTH_DENIED: _bindgen_ty_166 = -2147416032;
pub const CSSMERR_CSP_OBJECT_USE_AUTH_DENIED: _bindgen_ty_166 = -2147416031;
pub const CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED: _bindgen_ty_166 = -2147416030;
pub const CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED: _bindgen_ty_166 = -2147416029;
pub const CSSMERR_CSP_OBJECT_ACL_REQUIRED: _bindgen_ty_166 = -2147416028;
pub const CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS: _bindgen_ty_166 = -2147416027;
pub const CSSMERR_CSP_INVALID_ACL_BASE_CERTS: _bindgen_ty_166 = -2147416026;
pub const CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED: _bindgen_ty_166 = -2147416025;
pub const CSSMERR_CSP_INVALID_SAMPLE_VALUE: _bindgen_ty_166 = -2147416024;
pub const CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED: _bindgen_ty_166 = -2147416023;
pub const CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE: _bindgen_ty_166 = -2147416022;
pub const CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED: _bindgen_ty_166 = -2147416021;
pub const CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK: _bindgen_ty_166 = -2147416020;
pub const CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED: _bindgen_ty_166 = -2147416019;
pub const CSSMERR_CSP_INVALID_ACL_ENTRY_TAG: _bindgen_ty_166 = -2147416018;
pub const CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND: _bindgen_ty_166 = -2147416017;
pub const CSSMERR_CSP_INVALID_ACL_EDIT_MODE: _bindgen_ty_166 = -2147416016;
pub const CSSMERR_CSP_ACL_CHANGE_FAILED: _bindgen_ty_166 = -2147416015;
pub const CSSMERR_CSP_INVALID_NEW_ACL_ENTRY: _bindgen_ty_166 = -2147416014;
pub const CSSMERR_CSP_INVALID_NEW_ACL_OWNER: _bindgen_ty_166 = -2147416013;
pub const CSSMERR_CSP_ACL_DELETE_FAILED: _bindgen_ty_166 = -2147416012;
pub const CSSMERR_CSP_ACL_REPLACE_FAILED: _bindgen_ty_166 = -2147416011;
pub const CSSMERR_CSP_ACL_ADD_FAILED: _bindgen_ty_166 = -2147416010;
pub type _bindgen_ty_166 = ::std::os::raw::c_int;
pub const CSSMERR_CSP_INVALID_CONTEXT_HANDLE: _bindgen_ty_167 = -2147416000;
pub const CSSMERR_CSP_PRIVILEGE_NOT_GRANTED: _bindgen_ty_167 = -2147415989;
pub const CSSMERR_CSP_INVALID_DATA: _bindgen_ty_167 = -2147415994;
pub const CSSMERR_CSP_INVALID_PASSTHROUGH_ID: _bindgen_ty_167 = -2147415978;
pub const CSSMERR_CSP_INVALID_CRYPTO_DATA: _bindgen_ty_167 = -2147415976;
pub type _bindgen_ty_167 = ::std::os::raw::c_int;
pub const CSSM_CSP_BASE_CSP_ERROR: _bindgen_ty_168 = -2147415808;
pub const CSSMERR_CSP_INPUT_LENGTH_ERROR: _bindgen_ty_168 = -2147415807;
pub const CSSMERR_CSP_OUTPUT_LENGTH_ERROR: _bindgen_ty_168 = -2147415806;
pub const CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED: _bindgen_ty_168 = -2147415805;
pub const CSSMERR_CSP_DEVICE_ERROR: _bindgen_ty_168 = -2147415804;
pub const CSSMERR_CSP_DEVICE_MEMORY_ERROR: _bindgen_ty_168 = -2147415803;
pub const CSSMERR_CSP_ATTACH_HANDLE_BUSY: _bindgen_ty_168 = -2147415802;
pub const CSSMERR_CSP_NOT_LOGGED_IN: _bindgen_ty_168 = -2147415801;
pub const CSSMERR_CSP_INVALID_KEY: _bindgen_ty_168 = -2147415792;
pub const CSSMERR_CSP_INVALID_KEY_REFERENCE: _bindgen_ty_168 = -2147415791;
pub const CSSMERR_CSP_INVALID_KEY_CLASS: _bindgen_ty_168 = -2147415790;
pub const CSSMERR_CSP_ALGID_MISMATCH: _bindgen_ty_168 = -2147415789;
pub const CSSMERR_CSP_KEY_USAGE_INCORRECT: _bindgen_ty_168 = -2147415788;
pub const CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT: _bindgen_ty_168 = -2147415787;
pub const CSSMERR_CSP_KEY_HEADER_INCONSISTENT: _bindgen_ty_168 = -2147415786;
pub const CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT: _bindgen_ty_168 = -2147415785;
pub const CSSMERR_CSP_UNSUPPORTED_KEY_SIZE: _bindgen_ty_168 = -2147415784;
pub const CSSMERR_CSP_INVALID_KEY_POINTER: _bindgen_ty_168 = -2147415783;
pub const CSSMERR_CSP_INVALID_KEYUSAGE_MASK: _bindgen_ty_168 = -2147415782;
pub const CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK: _bindgen_ty_168 = -2147415781;
pub const CSSMERR_CSP_INVALID_KEYATTR_MASK: _bindgen_ty_168 = -2147415780;
pub const CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK: _bindgen_ty_168 = -2147415779;
pub const CSSMERR_CSP_INVALID_KEY_LABEL: _bindgen_ty_168 = -2147415778;
pub const CSSMERR_CSP_UNSUPPORTED_KEY_LABEL: _bindgen_ty_168 = -2147415777;
pub const CSSMERR_CSP_INVALID_KEY_FORMAT: _bindgen_ty_168 = -2147415776;
pub const CSSMERR_CSP_INVALID_DATA_COUNT: _bindgen_ty_168 = -2147415768;
pub const CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED: _bindgen_ty_168 = -2147415767;
pub const CSSMERR_CSP_INVALID_INPUT_VECTOR: _bindgen_ty_168 = -2147415766;
pub const CSSMERR_CSP_INVALID_OUTPUT_VECTOR: _bindgen_ty_168 = -2147415765;
pub const CSSMERR_CSP_INVALID_CONTEXT: _bindgen_ty_168 = -2147415760;
pub const CSSMERR_CSP_INVALID_ALGORITHM: _bindgen_ty_168 = -2147415759;
pub const CSSMERR_CSP_INVALID_ATTR_KEY: _bindgen_ty_168 = -2147415754;
pub const CSSMERR_CSP_MISSING_ATTR_KEY: _bindgen_ty_168 = -2147415753;
pub const CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR: _bindgen_ty_168 = -2147415752;
pub const CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR: _bindgen_ty_168 = -2147415751;
pub const CSSMERR_CSP_INVALID_ATTR_SALT: _bindgen_ty_168 = -2147415750;
pub const CSSMERR_CSP_MISSING_ATTR_SALT: _bindgen_ty_168 = -2147415749;
pub const CSSMERR_CSP_INVALID_ATTR_PADDING: _bindgen_ty_168 = -2147415748;
pub const CSSMERR_CSP_MISSING_ATTR_PADDING: _bindgen_ty_168 = -2147415747;
pub const CSSMERR_CSP_INVALID_ATTR_RANDOM: _bindgen_ty_168 = -2147415746;
pub const CSSMERR_CSP_MISSING_ATTR_RANDOM: _bindgen_ty_168 = -2147415745;
pub const CSSMERR_CSP_INVALID_ATTR_SEED: _bindgen_ty_168 = -2147415744;
pub const CSSMERR_CSP_MISSING_ATTR_SEED: _bindgen_ty_168 = -2147415743;
pub const CSSMERR_CSP_INVALID_ATTR_PASSPHRASE: _bindgen_ty_168 = -2147415742;
pub const CSSMERR_CSP_MISSING_ATTR_PASSPHRASE: _bindgen_ty_168 = -2147415741;
pub const CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH: _bindgen_ty_168 = -2147415740;
pub const CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH: _bindgen_ty_168 = -2147415739;
pub const CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE: _bindgen_ty_168 = -2147415738;
pub const CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE: _bindgen_ty_168 = -2147415737;
pub const CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE: _bindgen_ty_168 = -2147415708;
pub const CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE: _bindgen_ty_168 = -2147415707;
pub const CSSMERR_CSP_INVALID_ATTR_ROUNDS: _bindgen_ty_168 = -2147415706;
pub const CSSMERR_CSP_MISSING_ATTR_ROUNDS: _bindgen_ty_168 = -2147415705;
pub const CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS: _bindgen_ty_168 = -2147415704;
pub const CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS: _bindgen_ty_168 = -2147415703;
pub const CSSMERR_CSP_INVALID_ATTR_LABEL: _bindgen_ty_168 = -2147415702;
pub const CSSMERR_CSP_MISSING_ATTR_LABEL: _bindgen_ty_168 = -2147415701;
pub const CSSMERR_CSP_INVALID_ATTR_KEY_TYPE: _bindgen_ty_168 = -2147415700;
pub const CSSMERR_CSP_MISSING_ATTR_KEY_TYPE: _bindgen_ty_168 = -2147415699;
pub const CSSMERR_CSP_INVALID_ATTR_MODE: _bindgen_ty_168 = -2147415698;
pub const CSSMERR_CSP_MISSING_ATTR_MODE: _bindgen_ty_168 = -2147415697;
pub const CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS: _bindgen_ty_168 = -2147415696;
pub const CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS: _bindgen_ty_168 = -2147415695;
pub const CSSMERR_CSP_INVALID_ATTR_START_DATE: _bindgen_ty_168 = -2147415694;
pub const CSSMERR_CSP_MISSING_ATTR_START_DATE: _bindgen_ty_168 = -2147415693;
pub const CSSMERR_CSP_INVALID_ATTR_END_DATE: _bindgen_ty_168 = -2147415692;
pub const CSSMERR_CSP_MISSING_ATTR_END_DATE: _bindgen_ty_168 = -2147415691;
pub const CSSMERR_CSP_INVALID_ATTR_VERSION: _bindgen_ty_168 = -2147415690;
pub const CSSMERR_CSP_MISSING_ATTR_VERSION: _bindgen_ty_168 = -2147415689;
pub const CSSMERR_CSP_INVALID_ATTR_PRIME: _bindgen_ty_168 = -2147415688;
pub const CSSMERR_CSP_MISSING_ATTR_PRIME: _bindgen_ty_168 = -2147415687;
pub const CSSMERR_CSP_INVALID_ATTR_BASE: _bindgen_ty_168 = -2147415686;
pub const CSSMERR_CSP_MISSING_ATTR_BASE: _bindgen_ty_168 = -2147415685;
pub const CSSMERR_CSP_INVALID_ATTR_SUBPRIME: _bindgen_ty_168 = -2147415684;
pub const CSSMERR_CSP_MISSING_ATTR_SUBPRIME: _bindgen_ty_168 = -2147415683;
pub const CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT: _bindgen_ty_168 = -2147415682;
pub const CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT: _bindgen_ty_168 = -2147415681;
pub const CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE: _bindgen_ty_168 = -2147415680;
pub const CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE: _bindgen_ty_168 = -2147415679;
pub const CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS: _bindgen_ty_168 = -2147415678;
pub const CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS: _bindgen_ty_168 = -2147415677;
pub const CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT: _bindgen_ty_168 = -2147415676;
pub const CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT: _bindgen_ty_168 = -2147415675;
pub const CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT: _bindgen_ty_168 = -2147415674;
pub const CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT: _bindgen_ty_168 = -2147415673;
pub const CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT: _bindgen_ty_168 = -2147415672;
pub const CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT: _bindgen_ty_168 = -2147415671;
pub const CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT: _bindgen_ty_168 = -2147415670;
pub const CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT: _bindgen_ty_168 = -2147415669;
pub const CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS: _bindgen_ty_168 = -2147415736;
pub const CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED: _bindgen_ty_168 = -2147415735;
pub const CSSMERR_CSP_VERIFY_FAILED: _bindgen_ty_168 = -2147415734;
pub const CSSMERR_CSP_INVALID_SIGNATURE: _bindgen_ty_168 = -2147415733;
pub const CSSMERR_CSP_QUERY_SIZE_UNKNOWN: _bindgen_ty_168 = -2147415732;
pub const CSSMERR_CSP_BLOCK_SIZE_MISMATCH: _bindgen_ty_168 = -2147415731;
pub const CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND: _bindgen_ty_168 = -2147415730;
pub const CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT: _bindgen_ty_168 = -2147415729;
pub const CSSMERR_CSP_DEVICE_VERIFY_FAILED: _bindgen_ty_168 = -2147415728;
pub const CSSMERR_CSP_INVALID_LOGIN_NAME: _bindgen_ty_168 = -2147415727;
pub const CSSMERR_CSP_ALREADY_LOGGED_IN: _bindgen_ty_168 = -2147415726;
pub const CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS: _bindgen_ty_168 = -2147415725;
pub const CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS: _bindgen_ty_168 = -2147415724;
pub const CSSMERR_CSP_INVALID_DIGEST_ALGORITHM: _bindgen_ty_168 = -2147415723;
pub const CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED: _bindgen_ty_168 = -2147415722;
pub type _bindgen_ty_168 = ::std::os::raw::c_int;
pub const CSSMERR_TP_INTERNAL_ERROR: _bindgen_ty_169 = -2147409919;
pub const CSSMERR_TP_MEMORY_ERROR: _bindgen_ty_169 = -2147409918;
pub const CSSMERR_TP_MDS_ERROR: _bindgen_ty_169 = -2147409917;
pub const CSSMERR_TP_INVALID_POINTER: _bindgen_ty_169 = -2147409916;
pub const CSSMERR_TP_INVALID_INPUT_POINTER: _bindgen_ty_169 = -2147409915;
pub const CSSMERR_TP_INVALID_OUTPUT_POINTER: _bindgen_ty_169 = -2147409914;
pub const CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_169 = -2147409913;
pub const CSSMERR_TP_SELF_CHECK_FAILED: _bindgen_ty_169 = -2147409912;
pub const CSSMERR_TP_OS_ACCESS_DENIED: _bindgen_ty_169 = -2147409911;
pub const CSSMERR_TP_FUNCTION_FAILED: _bindgen_ty_169 = -2147409910;
pub const CSSMERR_TP_INVALID_CONTEXT_HANDLE: _bindgen_ty_169 = -2147409856;
pub const CSSMERR_TP_INVALID_DATA: _bindgen_ty_169 = -2147409850;
pub const CSSMERR_TP_INVALID_DB_LIST: _bindgen_ty_169 = -2147409844;
pub const CSSMERR_TP_INVALID_CERTGROUP_POINTER: _bindgen_ty_169 = -2147409854;
pub const CSSMERR_TP_INVALID_CERT_POINTER: _bindgen_ty_169 = -2147409853;
pub const CSSMERR_TP_INVALID_CRL_POINTER: _bindgen_ty_169 = -2147409852;
pub const CSSMERR_TP_INVALID_FIELD_POINTER: _bindgen_ty_169 = -2147409851;
pub const CSSMERR_TP_INVALID_NETWORK_ADDR: _bindgen_ty_169 = -2147409833;
pub const CSSMERR_TP_CRL_ALREADY_SIGNED: _bindgen_ty_169 = -2147409849;
pub const CSSMERR_TP_INVALID_NUMBER_OF_FIELDS: _bindgen_ty_169 = -2147409848;
pub const CSSMERR_TP_VERIFICATION_FAILURE: _bindgen_ty_169 = -2147409847;
pub const CSSMERR_TP_INVALID_DB_HANDLE: _bindgen_ty_169 = -2147409846;
pub const CSSMERR_TP_UNKNOWN_FORMAT: _bindgen_ty_169 = -2147409842;
pub const CSSMERR_TP_UNKNOWN_TAG: _bindgen_ty_169 = -2147409841;
pub const CSSMERR_TP_INVALID_PASSTHROUGH_ID: _bindgen_ty_169 = -2147409834;
pub const CSSMERR_TP_INVALID_CSP_HANDLE: _bindgen_ty_169 = -2147409840;
pub const CSSMERR_TP_INVALID_DL_HANDLE: _bindgen_ty_169 = -2147409839;
pub const CSSMERR_TP_INVALID_CL_HANDLE: _bindgen_ty_169 = -2147409838;
pub const CSSMERR_TP_INVALID_DB_LIST_POINTER: _bindgen_ty_169 = -2147409843;
pub type _bindgen_ty_169 = ::std::os::raw::c_int;
pub const CSSM_TP_BASE_TP_ERROR: _bindgen_ty_170 = -2147409664;
pub const CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER: _bindgen_ty_170 = -2147409663;
pub const CSSMERR_TP_INVALID_IDENTIFIER_POINTER: _bindgen_ty_170 = -2147409662;
pub const CSSMERR_TP_INVALID_KEYCACHE_HANDLE: _bindgen_ty_170 = -2147409661;
pub const CSSMERR_TP_INVALID_CERTGROUP: _bindgen_ty_170 = -2147409660;
pub const CSSMERR_TP_INVALID_CRLGROUP: _bindgen_ty_170 = -2147409659;
pub const CSSMERR_TP_INVALID_CRLGROUP_POINTER: _bindgen_ty_170 = -2147409658;
pub const CSSMERR_TP_AUTHENTICATION_FAILED: _bindgen_ty_170 = -2147409657;
pub const CSSMERR_TP_CERTGROUP_INCOMPLETE: _bindgen_ty_170 = -2147409656;
pub const CSSMERR_TP_CERTIFICATE_CANT_OPERATE: _bindgen_ty_170 = -2147409655;
pub const CSSMERR_TP_CERT_EXPIRED: _bindgen_ty_170 = -2147409654;
pub const CSSMERR_TP_CERT_NOT_VALID_YET: _bindgen_ty_170 = -2147409653;
pub const CSSMERR_TP_CERT_REVOKED: _bindgen_ty_170 = -2147409652;
pub const CSSMERR_TP_CERT_SUSPENDED: _bindgen_ty_170 = -2147409651;
pub const CSSMERR_TP_INSUFFICIENT_CREDENTIALS: _bindgen_ty_170 = -2147409650;
pub const CSSMERR_TP_INVALID_ACTION: _bindgen_ty_170 = -2147409649;
pub const CSSMERR_TP_INVALID_ACTION_DATA: _bindgen_ty_170 = -2147409648;
pub const CSSMERR_TP_INVALID_ANCHOR_CERT: _bindgen_ty_170 = -2147409646;
pub const CSSMERR_TP_INVALID_AUTHORITY: _bindgen_ty_170 = -2147409645;
pub const CSSMERR_TP_VERIFY_ACTION_FAILED: _bindgen_ty_170 = -2147409644;
pub const CSSMERR_TP_INVALID_CERTIFICATE: _bindgen_ty_170 = -2147409643;
pub const CSSMERR_TP_INVALID_CERT_AUTHORITY: _bindgen_ty_170 = -2147409642;
pub const CSSMERR_TP_INVALID_CRL_AUTHORITY: _bindgen_ty_170 = -2147409641;
pub const CSSMERR_TP_INVALID_CRL_ENCODING: _bindgen_ty_170 = -2147409640;
pub const CSSMERR_TP_INVALID_CRL_TYPE: _bindgen_ty_170 = -2147409639;
pub const CSSMERR_TP_INVALID_CRL: _bindgen_ty_170 = -2147409638;
pub const CSSMERR_TP_INVALID_FORM_TYPE: _bindgen_ty_170 = -2147409637;
pub const CSSMERR_TP_INVALID_ID: _bindgen_ty_170 = -2147409636;
pub const CSSMERR_TP_INVALID_IDENTIFIER: _bindgen_ty_170 = -2147409635;
pub const CSSMERR_TP_INVALID_INDEX: _bindgen_ty_170 = -2147409634;
pub const CSSMERR_TP_INVALID_NAME: _bindgen_ty_170 = -2147409633;
pub const CSSMERR_TP_INVALID_POLICY_IDENTIFIERS: _bindgen_ty_170 = -2147409632;
pub const CSSMERR_TP_INVALID_TIMESTRING: _bindgen_ty_170 = -2147409631;
pub const CSSMERR_TP_INVALID_REASON: _bindgen_ty_170 = -2147409630;
pub const CSSMERR_TP_INVALID_REQUEST_INPUTS: _bindgen_ty_170 = -2147409629;
pub const CSSMERR_TP_INVALID_RESPONSE_VECTOR: _bindgen_ty_170 = -2147409628;
pub const CSSMERR_TP_INVALID_SIGNATURE: _bindgen_ty_170 = -2147409627;
pub const CSSMERR_TP_INVALID_STOP_ON_POLICY: _bindgen_ty_170 = -2147409626;
pub const CSSMERR_TP_INVALID_CALLBACK: _bindgen_ty_170 = -2147409625;
pub const CSSMERR_TP_INVALID_TUPLE: _bindgen_ty_170 = -2147409624;
pub const CSSMERR_TP_NOT_SIGNER: _bindgen_ty_170 = -2147409623;
pub const CSSMERR_TP_NOT_TRUSTED: _bindgen_ty_170 = -2147409622;
pub const CSSMERR_TP_NO_DEFAULT_AUTHORITY: _bindgen_ty_170 = -2147409621;
pub const CSSMERR_TP_REJECTED_FORM: _bindgen_ty_170 = -2147409620;
pub const CSSMERR_TP_REQUEST_LOST: _bindgen_ty_170 = -2147409619;
pub const CSSMERR_TP_REQUEST_REJECTED: _bindgen_ty_170 = -2147409618;
pub const CSSMERR_TP_UNSUPPORTED_ADDR_TYPE: _bindgen_ty_170 = -2147409617;
pub const CSSMERR_TP_UNSUPPORTED_SERVICE: _bindgen_ty_170 = -2147409616;
pub const CSSMERR_TP_INVALID_TUPLEGROUP_POINTER: _bindgen_ty_170 = -2147409615;
pub const CSSMERR_TP_INVALID_TUPLEGROUP: _bindgen_ty_170 = -2147409614;
pub type _bindgen_ty_170 = ::std::os::raw::c_int;
pub const CSSMERR_AC_INTERNAL_ERROR: _bindgen_ty_171 = -2147405823;
pub const CSSMERR_AC_MEMORY_ERROR: _bindgen_ty_171 = -2147405822;
pub const CSSMERR_AC_MDS_ERROR: _bindgen_ty_171 = -2147405821;
pub const CSSMERR_AC_INVALID_POINTER: _bindgen_ty_171 = -2147405820;
pub const CSSMERR_AC_INVALID_INPUT_POINTER: _bindgen_ty_171 = -2147405819;
pub const CSSMERR_AC_INVALID_OUTPUT_POINTER: _bindgen_ty_171 = -2147405818;
pub const CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_171 = -2147405817;
pub const CSSMERR_AC_SELF_CHECK_FAILED: _bindgen_ty_171 = -2147405816;
pub const CSSMERR_AC_OS_ACCESS_DENIED: _bindgen_ty_171 = -2147405815;
pub const CSSMERR_AC_FUNCTION_FAILED: _bindgen_ty_171 = -2147405814;
pub const CSSMERR_AC_INVALID_CONTEXT_HANDLE: _bindgen_ty_171 = -2147405760;
pub const CSSMERR_AC_INVALID_DATA: _bindgen_ty_171 = -2147405754;
pub const CSSMERR_AC_INVALID_DB_LIST: _bindgen_ty_171 = -2147405748;
pub const CSSMERR_AC_INVALID_PASSTHROUGH_ID: _bindgen_ty_171 = -2147405738;
pub const CSSMERR_AC_INVALID_DL_HANDLE: _bindgen_ty_171 = -2147405743;
pub const CSSMERR_AC_INVALID_CL_HANDLE: _bindgen_ty_171 = -2147405742;
pub const CSSMERR_AC_INVALID_TP_HANDLE: _bindgen_ty_171 = -2147405741;
pub const CSSMERR_AC_INVALID_DB_HANDLE: _bindgen_ty_171 = -2147405750;
pub const CSSMERR_AC_INVALID_DB_LIST_POINTER: _bindgen_ty_171 = -2147405747;
pub type _bindgen_ty_171 = ::std::os::raw::c_int;
pub const CSSM_AC_BASE_AC_ERROR: _bindgen_ty_172 = -2147405568;
pub const CSSMERR_AC_INVALID_BASE_ACLS: _bindgen_ty_172 = -2147405567;
pub const CSSMERR_AC_INVALID_TUPLE_CREDENTIALS: _bindgen_ty_172 = -2147405566;
pub const CSSMERR_AC_INVALID_ENCODING: _bindgen_ty_172 = -2147405565;
pub const CSSMERR_AC_INVALID_VALIDITY_PERIOD: _bindgen_ty_172 = -2147405564;
pub const CSSMERR_AC_INVALID_REQUESTOR: _bindgen_ty_172 = -2147405563;
pub const CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR: _bindgen_ty_172 = -2147405562;
pub type _bindgen_ty_172 = ::std::os::raw::c_int;
pub const CSSMERR_CL_INTERNAL_ERROR: _bindgen_ty_173 = -2147411967;
pub const CSSMERR_CL_MEMORY_ERROR: _bindgen_ty_173 = -2147411966;
pub const CSSMERR_CL_MDS_ERROR: _bindgen_ty_173 = -2147411965;
pub const CSSMERR_CL_INVALID_POINTER: _bindgen_ty_173 = -2147411964;
pub const CSSMERR_CL_INVALID_INPUT_POINTER: _bindgen_ty_173 = -2147411963;
pub const CSSMERR_CL_INVALID_OUTPUT_POINTER: _bindgen_ty_173 = -2147411962;
pub const CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_173 = -2147411961;
pub const CSSMERR_CL_SELF_CHECK_FAILED: _bindgen_ty_173 = -2147411960;
pub const CSSMERR_CL_OS_ACCESS_DENIED: _bindgen_ty_173 = -2147411959;
pub const CSSMERR_CL_FUNCTION_FAILED: _bindgen_ty_173 = -2147411958;
pub const CSSMERR_CL_INVALID_CONTEXT_HANDLE: _bindgen_ty_173 = -2147411904;
pub const CSSMERR_CL_INVALID_CERTGROUP_POINTER: _bindgen_ty_173 = -2147411902;
pub const CSSMERR_CL_INVALID_CERT_POINTER: _bindgen_ty_173 = -2147411901;
pub const CSSMERR_CL_INVALID_CRL_POINTER: _bindgen_ty_173 = -2147411900;
pub const CSSMERR_CL_INVALID_FIELD_POINTER: _bindgen_ty_173 = -2147411899;
pub const CSSMERR_CL_INVALID_DATA: _bindgen_ty_173 = -2147411898;
pub const CSSMERR_CL_CRL_ALREADY_SIGNED: _bindgen_ty_173 = -2147411897;
pub const CSSMERR_CL_INVALID_NUMBER_OF_FIELDS: _bindgen_ty_173 = -2147411896;
pub const CSSMERR_CL_VERIFICATION_FAILURE: _bindgen_ty_173 = -2147411895;
pub const CSSMERR_CL_UNKNOWN_FORMAT: _bindgen_ty_173 = -2147411890;
pub const CSSMERR_CL_UNKNOWN_TAG: _bindgen_ty_173 = -2147411889;
pub const CSSMERR_CL_INVALID_PASSTHROUGH_ID: _bindgen_ty_173 = -2147411882;
pub type _bindgen_ty_173 = ::std::os::raw::c_int;
pub const CSSM_CL_BASE_CL_ERROR: _bindgen_ty_174 = -2147411712;
pub const CSSMERR_CL_INVALID_BUNDLE_POINTER: _bindgen_ty_174 = -2147411711;
pub const CSSMERR_CL_INVALID_CACHE_HANDLE: _bindgen_ty_174 = -2147411710;
pub const CSSMERR_CL_INVALID_RESULTS_HANDLE: _bindgen_ty_174 = -2147411709;
pub const CSSMERR_CL_INVALID_BUNDLE_INFO: _bindgen_ty_174 = -2147411708;
pub const CSSMERR_CL_INVALID_CRL_INDEX: _bindgen_ty_174 = -2147411707;
pub const CSSMERR_CL_INVALID_SCOPE: _bindgen_ty_174 = -2147411706;
pub const CSSMERR_CL_NO_FIELD_VALUES: _bindgen_ty_174 = -2147411705;
pub const CSSMERR_CL_SCOPE_NOT_SUPPORTED: _bindgen_ty_174 = -2147411704;
pub type _bindgen_ty_174 = ::std::os::raw::c_int;
pub const CSSMERR_DL_INTERNAL_ERROR: _bindgen_ty_175 = -2147414015;
pub const CSSMERR_DL_MEMORY_ERROR: _bindgen_ty_175 = -2147414014;
pub const CSSMERR_DL_MDS_ERROR: _bindgen_ty_175 = -2147414013;
pub const CSSMERR_DL_INVALID_POINTER: _bindgen_ty_175 = -2147414012;
pub const CSSMERR_DL_INVALID_INPUT_POINTER: _bindgen_ty_175 = -2147414011;
pub const CSSMERR_DL_INVALID_OUTPUT_POINTER: _bindgen_ty_175 = -2147414010;
pub const CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED: _bindgen_ty_175 = -2147414009;
pub const CSSMERR_DL_SELF_CHECK_FAILED: _bindgen_ty_175 = -2147414008;
pub const CSSMERR_DL_OS_ACCESS_DENIED: _bindgen_ty_175 = -2147414007;
pub const CSSMERR_DL_FUNCTION_FAILED: _bindgen_ty_175 = -2147414006;
pub const CSSMERR_DL_INVALID_CSP_HANDLE: _bindgen_ty_175 = -2147413936;
pub const CSSMERR_DL_INVALID_DL_HANDLE: _bindgen_ty_175 = -2147413935;
pub const CSSMERR_DL_INVALID_CL_HANDLE: _bindgen_ty_175 = -2147413934;
pub const CSSMERR_DL_INVALID_DB_LIST_POINTER: _bindgen_ty_175 = -2147413939;
pub type _bindgen_ty_175 = ::std::os::raw::c_int;
pub const CSSMERR_DL_OPERATION_AUTH_DENIED: _bindgen_ty_176 = -2147413984;
pub const CSSMERR_DL_OBJECT_USE_AUTH_DENIED: _bindgen_ty_176 = -2147413983;
pub const CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED: _bindgen_ty_176 = -2147413982;
pub const CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED: _bindgen_ty_176 = -2147413981;
pub const CSSMERR_DL_OBJECT_ACL_REQUIRED: _bindgen_ty_176 = -2147413980;
pub const CSSMERR_DL_INVALID_ACCESS_CREDENTIALS: _bindgen_ty_176 = -2147413979;
pub const CSSMERR_DL_INVALID_ACL_BASE_CERTS: _bindgen_ty_176 = -2147413978;
pub const CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED: _bindgen_ty_176 = -2147413977;
pub const CSSMERR_DL_INVALID_SAMPLE_VALUE: _bindgen_ty_176 = -2147413976;
pub const CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED: _bindgen_ty_176 = -2147413975;
pub const CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE: _bindgen_ty_176 = -2147413974;
pub const CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED: _bindgen_ty_176 = -2147413973;
pub const CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK: _bindgen_ty_176 = -2147413972;
pub const CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED: _bindgen_ty_176 = -2147413971;
pub const CSSMERR_DL_INVALID_ACL_ENTRY_TAG: _bindgen_ty_176 = -2147413970;
pub const CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND: _bindgen_ty_176 = -2147413969;
pub const CSSMERR_DL_INVALID_ACL_EDIT_MODE: _bindgen_ty_176 = -2147413968;
pub const CSSMERR_DL_ACL_CHANGE_FAILED: _bindgen_ty_176 = -2147413967;
pub const CSSMERR_DL_INVALID_NEW_ACL_ENTRY: _bindgen_ty_176 = -2147413966;
pub const CSSMERR_DL_INVALID_NEW_ACL_OWNER: _bindgen_ty_176 = -2147413965;
pub const CSSMERR_DL_ACL_DELETE_FAILED: _bindgen_ty_176 = -2147413964;
pub const CSSMERR_DL_ACL_REPLACE_FAILED: _bindgen_ty_176 = -2147413963;
pub const CSSMERR_DL_ACL_ADD_FAILED: _bindgen_ty_176 = -2147413962;
pub type _bindgen_ty_176 = ::std::os::raw::c_int;
pub const CSSMERR_DL_INVALID_DB_HANDLE: _bindgen_ty_177 = -2147413942;
pub const CSSMERR_DL_INVALID_PASSTHROUGH_ID: _bindgen_ty_177 = -2147413930;
pub const CSSMERR_DL_INVALID_NETWORK_ADDR: _bindgen_ty_177 = -2147413929;
pub type _bindgen_ty_177 = ::std::os::raw::c_int;
pub const CSSM_DL_BASE_DL_ERROR: _bindgen_ty_178 = -2147413760;
pub const CSSMERR_DL_DATABASE_CORRUPT: _bindgen_ty_178 = -2147413759;
pub const CSSMERR_DL_INVALID_RECORD_INDEX: _bindgen_ty_178 = -2147413752;
pub const CSSMERR_DL_INVALID_RECORDTYPE: _bindgen_ty_178 = -2147413751;
pub const CSSMERR_DL_INVALID_FIELD_NAME: _bindgen_ty_178 = -2147413750;
pub const CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT: _bindgen_ty_178 = -2147413749;
pub const CSSMERR_DL_UNSUPPORTED_INDEX_INFO: _bindgen_ty_178 = -2147413748;
pub const CSSMERR_DL_UNSUPPORTED_LOCALITY: _bindgen_ty_178 = -2147413747;
pub const CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES: _bindgen_ty_178 = -2147413746;
pub const CSSMERR_DL_UNSUPPORTED_NUM_INDEXES: _bindgen_ty_178 = -2147413745;
pub const CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES: _bindgen_ty_178 = -2147413744;
pub const CSSMERR_DL_UNSUPPORTED_RECORDTYPE: _bindgen_ty_178 = -2147413743;
pub const CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE: _bindgen_ty_178 = -2147413742;
pub const CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT: _bindgen_ty_178 = -2147413741;
pub const CSSMERR_DL_INVALID_PARSING_MODULE: _bindgen_ty_178 = -2147413740;
pub const CSSMERR_DL_INVALID_DB_NAME: _bindgen_ty_178 = -2147413738;
pub const CSSMERR_DL_DATASTORE_DOESNOT_EXIST: _bindgen_ty_178 = -2147413737;
pub const CSSMERR_DL_DATASTORE_ALREADY_EXISTS: _bindgen_ty_178 = -2147413736;
pub const CSSMERR_DL_DB_LOCKED: _bindgen_ty_178 = -2147413735;
pub const CSSMERR_DL_DATASTORE_IS_OPEN: _bindgen_ty_178 = -2147413734;
pub const CSSMERR_DL_RECORD_NOT_FOUND: _bindgen_ty_178 = -2147413733;
pub const CSSMERR_DL_MISSING_VALUE: _bindgen_ty_178 = -2147413732;
pub const CSSMERR_DL_UNSUPPORTED_QUERY: _bindgen_ty_178 = -2147413731;
pub const CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS: _bindgen_ty_178 = -2147413730;
pub const CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS: _bindgen_ty_178 = -2147413729;
pub const CSSMERR_DL_UNSUPPORTED_OPERATOR: _bindgen_ty_178 = -2147413727;
pub const CSSMERR_DL_INVALID_RESULTS_HANDLE: _bindgen_ty_178 = -2147413726;
pub const CSSMERR_DL_INVALID_DB_LOCATION: _bindgen_ty_178 = -2147413725;
pub const CSSMERR_DL_INVALID_ACCESS_REQUEST: _bindgen_ty_178 = -2147413724;
pub const CSSMERR_DL_INVALID_INDEX_INFO: _bindgen_ty_178 = -2147413723;
pub const CSSMERR_DL_INVALID_SELECTION_TAG: _bindgen_ty_178 = -2147413722;
pub const CSSMERR_DL_INVALID_NEW_OWNER: _bindgen_ty_178 = -2147413721;
pub const CSSMERR_DL_INVALID_RECORD_UID: _bindgen_ty_178 = -2147413720;
pub const CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA: _bindgen_ty_178 = -2147413719;
pub const CSSMERR_DL_INVALID_MODIFY_MODE: _bindgen_ty_178 = -2147413718;
pub const CSSMERR_DL_INVALID_OPEN_PARAMETERS: _bindgen_ty_178 = -2147413717;
pub const CSSMERR_DL_RECORD_MODIFIED: _bindgen_ty_178 = -2147413716;
pub const CSSMERR_DL_ENDOFDATA: _bindgen_ty_178 = -2147413715;
pub const CSSMERR_DL_INVALID_QUERY: _bindgen_ty_178 = -2147413714;
pub const CSSMERR_DL_INVALID_VALUE: _bindgen_ty_178 = -2147413713;
pub const CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED: _bindgen_ty_178 = -2147413712;
pub const CSSMERR_DL_STALE_UNIQUE_RECORD: _bindgen_ty_178 = -2147413711;
pub type _bindgen_ty_178 = ::std::os::raw::c_int;
pub const __CE_GeneralNameType_GNT_OtherName: __CE_GeneralNameType = 0;
pub const __CE_GeneralNameType_GNT_RFC822Name: __CE_GeneralNameType = 1;
pub const __CE_GeneralNameType_GNT_DNSName: __CE_GeneralNameType = 2;
pub const __CE_GeneralNameType_GNT_X400Address: __CE_GeneralNameType = 3;
pub const __CE_GeneralNameType_GNT_DirectoryName: __CE_GeneralNameType = 4;
pub const __CE_GeneralNameType_GNT_EdiPartyName: __CE_GeneralNameType = 5;
pub const __CE_GeneralNameType_GNT_URI: __CE_GeneralNameType = 6;
pub const __CE_GeneralNameType_GNT_IPAddress: __CE_GeneralNameType = 7;
pub const __CE_GeneralNameType_GNT_RegisteredID: __CE_GeneralNameType = 8;
pub type __CE_GeneralNameType = ::std::os::raw::c_uint;
pub use self::__CE_GeneralNameType as CE_GeneralNameType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_OtherName {
    pub typeId: SecAsn1Oid,
    pub value: SecAsn1Item,
}
pub type CE_OtherName = __CE_OtherName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_GeneralName {
    pub nameType: CE_GeneralNameType,
    pub berEncoded: CSSM_BOOL,
    pub name: SecAsn1Item,
}
pub type CE_GeneralName = __CE_GeneralName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_GeneralNames {
    pub numNames: uint32,
    pub generalName: *mut CE_GeneralName,
}
pub type CE_GeneralNames = __CE_GeneralNames;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_AuthorityKeyID {
    pub keyIdentifierPresent: CSSM_BOOL,
    pub keyIdentifier: SecAsn1Item,
    pub generalNamesPresent: CSSM_BOOL,
    pub generalNames: *mut CE_GeneralNames,
    pub serialNumberPresent: CSSM_BOOL,
    pub serialNumber: SecAsn1Item,
}
pub type CE_AuthorityKeyID = __CE_AuthorityKeyID;
pub type CE_SubjectKeyID = SecAsn1Item;
pub type CE_KeyUsage = uint16;
pub type CE_CrlReason = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_ExtendedKeyUsage {
    pub numPurposes: uint32,
    pub purposes: CSSM_OID_PTR,
}
pub type CE_ExtendedKeyUsage = __CE_ExtendedKeyUsage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_BasicConstraints {
    pub cA: CSSM_BOOL,
    pub pathLenConstraintPresent: CSSM_BOOL,
    pub pathLenConstraint: uint32,
}
pub type CE_BasicConstraints = __CE_BasicConstraints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_PolicyQualifierInfo {
    pub policyQualifierId: SecAsn1Oid,
    pub qualifier: SecAsn1Item,
}
pub type CE_PolicyQualifierInfo = __CE_PolicyQualifierInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_PolicyInformation {
    pub certPolicyId: SecAsn1Oid,
    pub numPolicyQualifiers: uint32,
    pub policyQualifiers: *mut CE_PolicyQualifierInfo,
}
pub type CE_PolicyInformation = __CE_PolicyInformation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_CertPolicies {
    pub numPolicies: uint32,
    pub policies: *mut CE_PolicyInformation,
}
pub type CE_CertPolicies = __CE_CertPolicies;
pub type CE_NetscapeCertType = uint16;
pub type CE_CrlDistReasonFlags = uint8;
pub const __CE_CrlDistributionPointNameType_CE_CDNT_FullName: __CE_CrlDistributionPointNameType = 0;
pub const __CE_CrlDistributionPointNameType_CE_CDNT_NameRelativeToCrlIssuer:
    __CE_CrlDistributionPointNameType = 1;
pub type __CE_CrlDistributionPointNameType = ::std::os::raw::c_uint;
pub use self::__CE_CrlDistributionPointNameType as CE_CrlDistributionPointNameType;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __CE_DistributionPointName {
    pub __bindgen_anon_1: __CE_DistributionPointName__bindgen_ty_1,
    pub nameType: CE_CrlDistributionPointNameType,
    pub dpn: __CE_DistributionPointName__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __CE_DistributionPointName__bindgen_ty_1 {
    pub fullName: *mut CE_GeneralNames,
    pub rdn: CSSM_X509_RDN_PTR,
}
pub type CE_DistributionPointName = __CE_DistributionPointName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_CRLDistributionPoint {
    pub distPointName: *mut CE_DistributionPointName,
    pub reasonsPresent: CSSM_BOOL,
    pub reasons: CE_CrlDistReasonFlags,
    pub crlIssuer: *mut CE_GeneralNames,
}
pub type CE_CRLDistributionPoint = __CE_CRLDistributionPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_CRLDistPointsSyntax {
    pub numDistPoints: uint32,
    pub distPoints: *mut CE_CRLDistributionPoint,
}
pub type CE_CRLDistPointsSyntax = __CE_CRLDistPointsSyntax;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_AccessDescription {
    pub accessMethod: SecAsn1Oid,
    pub accessLocation: CE_GeneralName,
}
pub type CE_AccessDescription = __CE_AccessDescription;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_AuthorityInfoAccess {
    pub numAccessDescriptions: uint32,
    pub accessDescriptions: *mut CE_AccessDescription,
}
pub type CE_AuthorityInfoAccess = __CE_AuthorityInfoAccess;
pub type CE_NameRegistrationAuthorities = CE_GeneralNames;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_SemanticsInformation {
    pub semanticsIdentifier: *mut SecAsn1Oid,
    pub nameRegistrationAuthorities: *mut CE_NameRegistrationAuthorities,
}
pub type CE_SemanticsInformation = __CE_SemanticsInformation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_QC_Statement {
    pub statementId: SecAsn1Oid,
    pub semanticsInfo: *mut CE_SemanticsInformation,
    pub otherInfo: *mut SecAsn1Item,
}
pub type CE_QC_Statement = __CE_QC_Statement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_QC_Statements {
    pub numQCStatements: uint32,
    pub qcStatements: *mut CE_QC_Statement,
}
pub type CE_QC_Statements = __CE_QC_Statements;
pub type CE_CrlNumber = uint32;
pub type CE_DeltaCrl = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_IssuingDistributionPoint {
    pub distPointName: *mut CE_DistributionPointName,
    pub onlyUserCertsPresent: CSSM_BOOL,
    pub onlyUserCerts: CSSM_BOOL,
    pub onlyCACertsPresent: CSSM_BOOL,
    pub onlyCACerts: CSSM_BOOL,
    pub onlySomeReasonsPresent: CSSM_BOOL,
    pub onlySomeReasons: CE_CrlDistReasonFlags,
    pub indirectCrlPresent: CSSM_BOOL,
    pub indirectCrl: CSSM_BOOL,
}
pub type CE_IssuingDistributionPoint = __CE_IssuingDistributionPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_GeneralSubtree {
    pub base: *mut CE_GeneralNames,
    pub minimum: uint32,
    pub maximumPresent: CSSM_BOOL,
    pub maximum: uint32,
}
pub type CE_GeneralSubtree = __CE_GeneralSubtree;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_GeneralSubtrees {
    pub numSubtrees: uint32,
    pub subtrees: *mut CE_GeneralSubtree,
}
pub type CE_GeneralSubtrees = __CE_GeneralSubtrees;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_NameConstraints {
    pub permitted: *mut CE_GeneralSubtrees,
    pub excluded: *mut CE_GeneralSubtrees,
}
pub type CE_NameConstraints = __CE_NameConstraints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_PolicyMapping {
    pub issuerDomainPolicy: SecAsn1Oid,
    pub subjectDomainPolicy: SecAsn1Oid,
}
pub type CE_PolicyMapping = __CE_PolicyMapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_PolicyMappings {
    pub numPolicyMappings: uint32,
    pub policyMappings: *mut CE_PolicyMapping,
}
pub type CE_PolicyMappings = __CE_PolicyMappings;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CE_PolicyConstraints {
    pub requireExplicitPolicyPresent: CSSM_BOOL,
    pub requireExplicitPolicy: uint32,
    pub inhibitPolicyMappingPresent: CSSM_BOOL,
    pub inhibitPolicyMapping: uint32,
}
pub type CE_PolicyConstraints = __CE_PolicyConstraints;
pub type CE_InhibitAnyPolicy = uint32;
pub const __CE_DataType_DT_AuthorityKeyID: __CE_DataType = 0;
pub const __CE_DataType_DT_SubjectKeyID: __CE_DataType = 1;
pub const __CE_DataType_DT_KeyUsage: __CE_DataType = 2;
pub const __CE_DataType_DT_SubjectAltName: __CE_DataType = 3;
pub const __CE_DataType_DT_IssuerAltName: __CE_DataType = 4;
pub const __CE_DataType_DT_ExtendedKeyUsage: __CE_DataType = 5;
pub const __CE_DataType_DT_BasicConstraints: __CE_DataType = 6;
pub const __CE_DataType_DT_CertPolicies: __CE_DataType = 7;
pub const __CE_DataType_DT_NetscapeCertType: __CE_DataType = 8;
pub const __CE_DataType_DT_CrlNumber: __CE_DataType = 9;
pub const __CE_DataType_DT_DeltaCrl: __CE_DataType = 10;
pub const __CE_DataType_DT_CrlReason: __CE_DataType = 11;
pub const __CE_DataType_DT_CrlDistributionPoints: __CE_DataType = 12;
pub const __CE_DataType_DT_IssuingDistributionPoint: __CE_DataType = 13;
pub const __CE_DataType_DT_AuthorityInfoAccess: __CE_DataType = 14;
pub const __CE_DataType_DT_Other: __CE_DataType = 15;
pub const __CE_DataType_DT_QC_Statements: __CE_DataType = 16;
pub const __CE_DataType_DT_NameConstraints: __CE_DataType = 17;
pub const __CE_DataType_DT_PolicyMappings: __CE_DataType = 18;
pub const __CE_DataType_DT_PolicyConstraints: __CE_DataType = 19;
pub const __CE_DataType_DT_InhibitAnyPolicy: __CE_DataType = 20;
pub type __CE_DataType = ::std::os::raw::c_uint;
pub use self::__CE_DataType as CE_DataType;
#[repr(C)]
#[derive(Copy, Clone)]
pub union CE_Data {
    pub authorityKeyID: CE_AuthorityKeyID,
    pub subjectKeyID: CE_SubjectKeyID,
    pub keyUsage: CE_KeyUsage,
    pub subjectAltName: CE_GeneralNames,
    pub issuerAltName: CE_GeneralNames,
    pub extendedKeyUsage: CE_ExtendedKeyUsage,
    pub basicConstraints: CE_BasicConstraints,
    pub certPolicies: CE_CertPolicies,
    pub netscapeCertType: CE_NetscapeCertType,
    pub crlNumber: CE_CrlNumber,
    pub deltaCrl: CE_DeltaCrl,
    pub crlReason: CE_CrlReason,
    pub crlDistPoints: CE_CRLDistPointsSyntax,
    pub issuingDistPoint: CE_IssuingDistributionPoint,
    pub authorityInfoAccess: CE_AuthorityInfoAccess,
    pub qualifiedCertStatements: CE_QC_Statements,
    pub nameConstraints: CE_NameConstraints,
    pub policyMappings: CE_PolicyMappings,
    pub policyConstraints: CE_PolicyConstraints,
    pub inhibitAnyPolicy: CE_InhibitAnyPolicy,
    pub rawData: SecAsn1Item,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __CE_DataAndType {
    pub type_: CE_DataType,
    pub extension: CE_Data,
    pub critical: CSSM_BOOL,
}
pub type CE_DataAndType = __CE_DataAndType;
extern "C" {
    pub static gGuidCssm: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleFileDL: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleCSP: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleCSPDL: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleX509CL: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleX509TP: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleLDAPDL: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleDotMacTP: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleSdCSPDL: CSSM_GUID;
}
extern "C" {
    pub static gGuidAppleDotMacDL: CSSM_GUID;
}
pub const CSSM_WORDID_KEYCHAIN_PROMPT: _bindgen_ty_179 = 65536;
pub const CSSM_WORDID_KEYCHAIN_LOCK: _bindgen_ty_179 = 65537;
pub const CSSM_WORDID_KEYCHAIN_CHANGE_LOCK: _bindgen_ty_179 = 65538;
pub const CSSM_WORDID_PROCESS: _bindgen_ty_179 = 65539;
pub const CSSM_WORDID__RESERVED_1: _bindgen_ty_179 = 65540;
pub const CSSM_WORDID_SYMMETRIC_KEY: _bindgen_ty_179 = 65541;
pub const CSSM_WORDID_SYSTEM: _bindgen_ty_179 = 65542;
pub const CSSM_WORDID_KEY: _bindgen_ty_179 = 65543;
pub const CSSM_WORDID_PIN: _bindgen_ty_179 = 65544;
pub const CSSM_WORDID_PREAUTH: _bindgen_ty_179 = 65545;
pub const CSSM_WORDID_PREAUTH_SOURCE: _bindgen_ty_179 = 65546;
pub const CSSM_WORDID_ASYMMETRIC_KEY: _bindgen_ty_179 = 65547;
pub const CSSM_WORDID_PARTITION: _bindgen_ty_179 = 65548;
pub const CSSM_WORDID_KEYBAG_KEY: _bindgen_ty_179 = 65549;
pub const CSSM_WORDID__FIRST_UNUSED: _bindgen_ty_179 = 65550;
pub type _bindgen_ty_179 = ::std::os::raw::c_uint;
pub const CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT: _bindgen_ty_180 = 65536;
pub const CSSM_ACL_SUBJECT_TYPE_PROCESS: _bindgen_ty_180 = 65539;
pub const CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE: _bindgen_ty_180 = 116;
pub const CSSM_ACL_SUBJECT_TYPE_COMMENT: _bindgen_ty_180 = 12;
pub const CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY: _bindgen_ty_180 = 65541;
pub const CSSM_ACL_SUBJECT_TYPE_PREAUTH: _bindgen_ty_180 = 65545;
pub const CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE: _bindgen_ty_180 = 65546;
pub const CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY: _bindgen_ty_180 = 65547;
pub const CSSM_ACL_SUBJECT_TYPE_PARTITION: _bindgen_ty_180 = 65548;
pub type _bindgen_ty_180 = ::std::os::raw::c_uint;
pub const CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT: _bindgen_ty_181 = 65536;
pub const CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK: _bindgen_ty_181 = 65537;
pub const CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK: _bindgen_ty_181 = 65538;
pub const CSSM_SAMPLE_TYPE_PROCESS: _bindgen_ty_181 = 65539;
pub const CSSM_SAMPLE_TYPE_COMMENT: _bindgen_ty_181 = 12;
pub const CSSM_SAMPLE_TYPE_RETRY_ID: _bindgen_ty_181 = 85;
pub const CSSM_SAMPLE_TYPE_SYMMETRIC_KEY: _bindgen_ty_181 = 65541;
pub const CSSM_SAMPLE_TYPE_PREAUTH: _bindgen_ty_181 = 65545;
pub const CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY: _bindgen_ty_181 = 65547;
pub const CSSM_SAMPLE_TYPE_KEYBAG_KEY: _bindgen_ty_181 = 65549;
pub type _bindgen_ty_181 = ::std::os::raw::c_uint;
pub const CSSM_ACL_AUTHORIZATION_CHANGE_ACL: _bindgen_ty_182 = 65536;
pub const CSSM_ACL_AUTHORIZATION_CHANGE_OWNER: _bindgen_ty_182 = 65537;
pub const CSSM_ACL_AUTHORIZATION_PARTITION_ID: _bindgen_ty_182 = 65538;
pub const CSSM_ACL_AUTHORIZATION_INTEGRITY: _bindgen_ty_182 = 65539;
pub const CSSM_ACL_AUTHORIZATION_PREAUTH_BASE: _bindgen_ty_182 = 16842752;
pub const CSSM_ACL_AUTHORIZATION_PREAUTH_END: _bindgen_ty_182 = 16908288;
pub type _bindgen_ty_182 = ::std::os::raw::c_uint;
pub const CSSM_ACL_CODE_SIGNATURE_INVALID: _bindgen_ty_183 = 0;
pub const CSSM_ACL_CODE_SIGNATURE_OSX: _bindgen_ty_183 = 1;
pub type _bindgen_ty_183 = ::std::os::raw::c_uint;
pub const CSSM_ACL_MATCH_UID: _bindgen_ty_184 = 1;
pub const CSSM_ACL_MATCH_GID: _bindgen_ty_184 = 2;
pub const CSSM_ACL_MATCH_HONOR_ROOT: _bindgen_ty_184 = 256;
pub const CSSM_ACL_MATCH_BITS: _bindgen_ty_184 = 3;
pub type _bindgen_ty_184 = ::std::os::raw::c_uint;
pub const CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION: _bindgen_ty_185 = 257;
pub type _bindgen_ty_185 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_process_subject_selector {
    pub version: uint16,
    pub mask: uint16,
    pub uid: uint32,
    pub gid: uint32,
}
pub type CSSM_ACL_PROCESS_SUBJECT_SELECTOR = cssm_acl_process_subject_selector;
pub const CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION: _bindgen_ty_186 = 257;
pub type _bindgen_ty_186 = ::std::os::raw::c_uint;
pub const CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE: _bindgen_ty_187 = 1;
pub const CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED: _bindgen_ty_187 = 16;
pub const CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT: _bindgen_ty_187 = 32;
pub const CSSM_ACL_KEYCHAIN_PROMPT_INVALID: _bindgen_ty_187 = 64;
pub const CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT: _bindgen_ty_187 = 128;
pub type _bindgen_ty_187 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_acl_keychain_prompt_selector {
    pub version: uint16,
    pub flags: uint16,
}
pub type CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR = cssm_acl_keychain_prompt_selector;
pub type CSSM_ACL_PREAUTH_TRACKING_STATE = uint32;
pub const CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK: _bindgen_ty_188 = 255;
pub const CSSM_ACL_PREAUTH_TRACKING_BLOCKED: _bindgen_ty_188 = 0;
pub const CSSM_ACL_PREAUTH_TRACKING_UNKNOWN: _bindgen_ty_188 = 1073741824;
pub const CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED: _bindgen_ty_188 = 2147483648;
pub type _bindgen_ty_188 = ::std::os::raw::c_uint;
pub const CSSM_DB_ACCESS_RESET: _bindgen_ty_189 = 65536;
pub type _bindgen_ty_189 = ::std::os::raw::c_uint;
pub const CSSM_ALGID_APPLE_YARROW: _bindgen_ty_190 = 2147483648;
pub const CSSM_ALGID_AES: _bindgen_ty_190 = 2147483649;
pub const CSSM_ALGID_FEE: _bindgen_ty_190 = 2147483650;
pub const CSSM_ALGID_FEE_MD5: _bindgen_ty_190 = 2147483651;
pub const CSSM_ALGID_FEE_SHA1: _bindgen_ty_190 = 2147483652;
pub const CSSM_ALGID_FEED: _bindgen_ty_190 = 2147483653;
pub const CSSM_ALGID_FEEDEXP: _bindgen_ty_190 = 2147483654;
pub const CSSM_ALGID_ASC: _bindgen_ty_190 = 2147483655;
pub const CSSM_ALGID_SHA1HMAC_LEGACY: _bindgen_ty_190 = 2147483656;
pub const CSSM_ALGID_KEYCHAIN_KEY: _bindgen_ty_190 = 2147483657;
pub const CSSM_ALGID_PKCS12_PBE_ENCR: _bindgen_ty_190 = 2147483658;
pub const CSSM_ALGID_PKCS12_PBE_MAC: _bindgen_ty_190 = 2147483659;
pub const CSSM_ALGID_SECURE_PASSPHRASE: _bindgen_ty_190 = 2147483660;
pub const CSSM_ALGID_PBE_OPENSSL_MD5: _bindgen_ty_190 = 2147483661;
pub const CSSM_ALGID_SHA256: _bindgen_ty_190 = 2147483662;
pub const CSSM_ALGID_SHA384: _bindgen_ty_190 = 2147483663;
pub const CSSM_ALGID_SHA512: _bindgen_ty_190 = 2147483664;
pub const CSSM_ALGID_ENTROPY_DEFAULT: _bindgen_ty_190 = 2147483665;
pub const CSSM_ALGID_SHA224: _bindgen_ty_190 = 2147483666;
pub const CSSM_ALGID_SHA224WithRSA: _bindgen_ty_190 = 2147483667;
pub const CSSM_ALGID_SHA256WithRSA: _bindgen_ty_190 = 2147483668;
pub const CSSM_ALGID_SHA384WithRSA: _bindgen_ty_190 = 2147483669;
pub const CSSM_ALGID_SHA512WithRSA: _bindgen_ty_190 = 2147483670;
pub const CSSM_ALGID_OPENSSH1: _bindgen_ty_190 = 2147483671;
pub const CSSM_ALGID_SHA224WithECDSA: _bindgen_ty_190 = 2147483672;
pub const CSSM_ALGID_SHA256WithECDSA: _bindgen_ty_190 = 2147483673;
pub const CSSM_ALGID_SHA384WithECDSA: _bindgen_ty_190 = 2147483674;
pub const CSSM_ALGID_SHA512WithECDSA: _bindgen_ty_190 = 2147483675;
pub const CSSM_ALGID_ECDSA_SPECIFIED: _bindgen_ty_190 = 2147483676;
pub const CSSM_ALGID_ECDH_X963_KDF: _bindgen_ty_190 = 2147483677;
pub const CSSM_ALGID__FIRST_UNUSED: _bindgen_ty_190 = 2147483678;
pub type _bindgen_ty_190 = ::std::os::raw::c_uint;
pub const CSSM_PADDING_APPLE_SSLv2: _bindgen_ty_191 = 2147483648;
pub type _bindgen_ty_191 = ::std::os::raw::c_uint;
pub const CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED: _bindgen_ty_192 = 2147483648;
pub type _bindgen_ty_192 = ::std::os::raw::c_uint;
pub const CSSM_KEYBLOB_RAW_FORMAT_X509: _bindgen_ty_193 = 2147483648;
pub const CSSM_KEYBLOB_RAW_FORMAT_OPENSSH: _bindgen_ty_193 = 2147483649;
pub const CSSM_KEYBLOB_RAW_FORMAT_OPENSSL: _bindgen_ty_193 = 2147483650;
pub const CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2: _bindgen_ty_193 = 2147483651;
pub type _bindgen_ty_193 = ::std::os::raw::c_uint;
pub const CSSM_CUSTOM_COMMON_ERROR_EXTENT: _bindgen_ty_194 = 224;
pub const CSSM_ERRCODE_NO_USER_INTERACTION: _bindgen_ty_194 = 224;
pub const CSSM_ERRCODE_USER_CANCELED: _bindgen_ty_194 = 225;
pub const CSSM_ERRCODE_SERVICE_NOT_AVAILABLE: _bindgen_ty_194 = 226;
pub const CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_194 = 227;
pub const CSSM_ERRCODE_DEVICE_RESET: _bindgen_ty_194 = 228;
pub const CSSM_ERRCODE_DEVICE_FAILED: _bindgen_ty_194 = 229;
pub const CSSM_ERRCODE_IN_DARK_WAKE: _bindgen_ty_194 = 230;
pub type _bindgen_ty_194 = ::std::os::raw::c_uint;
pub const CSSMERR_CSSM_NO_USER_INTERACTION: _bindgen_ty_195 = -2147417888;
pub const CSSMERR_AC_NO_USER_INTERACTION: _bindgen_ty_195 = -2147405600;
pub const CSSMERR_CSP_NO_USER_INTERACTION: _bindgen_ty_195 = -2147415840;
pub const CSSMERR_CL_NO_USER_INTERACTION: _bindgen_ty_195 = -2147411744;
pub const CSSMERR_DL_NO_USER_INTERACTION: _bindgen_ty_195 = -2147413792;
pub const CSSMERR_TP_NO_USER_INTERACTION: _bindgen_ty_195 = -2147409696;
pub const CSSMERR_CSSM_USER_CANCELED: _bindgen_ty_195 = -2147417887;
pub const CSSMERR_AC_USER_CANCELED: _bindgen_ty_195 = -2147405599;
pub const CSSMERR_CSP_USER_CANCELED: _bindgen_ty_195 = -2147415839;
pub const CSSMERR_CL_USER_CANCELED: _bindgen_ty_195 = -2147411743;
pub const CSSMERR_DL_USER_CANCELED: _bindgen_ty_195 = -2147413791;
pub const CSSMERR_TP_USER_CANCELED: _bindgen_ty_195 = -2147409695;
pub const CSSMERR_CSSM_SERVICE_NOT_AVAILABLE: _bindgen_ty_195 = -2147417886;
pub const CSSMERR_AC_SERVICE_NOT_AVAILABLE: _bindgen_ty_195 = -2147405598;
pub const CSSMERR_CSP_SERVICE_NOT_AVAILABLE: _bindgen_ty_195 = -2147415838;
pub const CSSMERR_CL_SERVICE_NOT_AVAILABLE: _bindgen_ty_195 = -2147411742;
pub const CSSMERR_DL_SERVICE_NOT_AVAILABLE: _bindgen_ty_195 = -2147413790;
pub const CSSMERR_TP_SERVICE_NOT_AVAILABLE: _bindgen_ty_195 = -2147409694;
pub const CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_195 = -2147417885;
pub const CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_195 = -2147405597;
pub const CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_195 = -2147415837;
pub const CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_195 = -2147411741;
pub const CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_195 = -2147413789;
pub const CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION: _bindgen_ty_195 = -2147409693;
pub const CSSMERR_CSSM_DEVICE_RESET: _bindgen_ty_195 = -2147417884;
pub const CSSMERR_AC_DEVICE_RESET: _bindgen_ty_195 = -2147405596;
pub const CSSMERR_CSP_DEVICE_RESET: _bindgen_ty_195 = -2147415836;
pub const CSSMERR_CL_DEVICE_RESET: _bindgen_ty_195 = -2147411740;
pub const CSSMERR_DL_DEVICE_RESET: _bindgen_ty_195 = -2147413788;
pub const CSSMERR_TP_DEVICE_RESET: _bindgen_ty_195 = -2147409692;
pub const CSSMERR_CSSM_DEVICE_FAILED: _bindgen_ty_195 = -2147417883;
pub const CSSMERR_AC_DEVICE_FAILED: _bindgen_ty_195 = -2147405595;
pub const CSSMERR_CSP_DEVICE_FAILED: _bindgen_ty_195 = -2147415835;
pub const CSSMERR_CL_DEVICE_FAILED: _bindgen_ty_195 = -2147411739;
pub const CSSMERR_DL_DEVICE_FAILED: _bindgen_ty_195 = -2147413787;
pub const CSSMERR_TP_DEVICE_FAILED: _bindgen_ty_195 = -2147409691;
pub const CSSMERR_CSSM_IN_DARK_WAKE: _bindgen_ty_195 = -2147417882;
pub const CSSMERR_AC_IN_DARK_WAKE: _bindgen_ty_195 = -2147405594;
pub const CSSMERR_CSP_IN_DARK_WAKE: _bindgen_ty_195 = -2147415834;
pub const CSSMERR_CL_IN_DARK_WAKE: _bindgen_ty_195 = -2147411738;
pub const CSSMERR_DL_IN_DARK_WAKE: _bindgen_ty_195 = -2147413786;
pub const CSSMERR_TP_IN_DARK_WAKE: _bindgen_ty_195 = -2147409690;
pub type _bindgen_ty_195 = ::std::os::raw::c_int;
pub const CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT: _bindgen_ty_196 = -2147415040;
pub const CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE: _bindgen_ty_196 = -2147415039;
pub const CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH: _bindgen_ty_196 = -2147415038;
pub const CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE: _bindgen_ty_196 = -2147415037;
pub const CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE: _bindgen_ty_196 = -2147415036;
pub const CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR: _bindgen_ty_196 = -2147415035;
pub const CSSMERR_CSP_APPLE_SSLv2_ROLLBACK: _bindgen_ty_196 = -2147415034;
pub type _bindgen_ty_196 = ::std::os::raw::c_int;
pub const CSSM_DL_DB_RECORD_GENERIC_PASSWORD: _bindgen_ty_197 = 2147483648;
pub const CSSM_DL_DB_RECORD_INTERNET_PASSWORD: _bindgen_ty_197 = 2147483649;
pub const CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD: _bindgen_ty_197 = 2147483650;
pub const CSSM_DL_DB_RECORD_X509_CERTIFICATE: _bindgen_ty_197 = 2147487744;
pub const CSSM_DL_DB_RECORD_USER_TRUST: _bindgen_ty_197 = 2147487745;
pub const CSSM_DL_DB_RECORD_X509_CRL: _bindgen_ty_197 = 2147487746;
pub const CSSM_DL_DB_RECORD_UNLOCK_REFERRAL: _bindgen_ty_197 = 2147487747;
pub const CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE: _bindgen_ty_197 = 2147487748;
pub const CSSM_DL_DB_RECORD_METADATA: _bindgen_ty_197 = 2147516416;
pub type _bindgen_ty_197 = ::std::os::raw::c_uint;
pub const CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT: _bindgen_ty_198 = 0;
pub const CSSM_APPLEFILEDL_COMMIT: _bindgen_ty_198 = 1;
pub const CSSM_APPLEFILEDL_ROLLBACK: _bindgen_ty_198 = 2;
pub const CSSM_APPLEFILEDL_TAKE_FILE_LOCK: _bindgen_ty_198 = 3;
pub const CSSM_APPLEFILEDL_MAKE_BACKUP: _bindgen_ty_198 = 4;
pub const CSSM_APPLEFILEDL_MAKE_COPY: _bindgen_ty_198 = 5;
pub const CSSM_APPLEFILEDL_DELETE_FILE: _bindgen_ty_198 = 6;
pub type _bindgen_ty_198 = ::std::os::raw::c_uint;
pub const CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT: _bindgen_ty_199 = 1;
pub const CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE: _bindgen_ty_199 = 2;
pub const CSSM_APPLE_UNLOCK_TYPE_KEYBAG: _bindgen_ty_199 = 3;
pub type _bindgen_ty_199 = ::std::os::raw::c_uint;
pub const CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS: _bindgen_ty_200 = -2147412992;
pub const CSSMERR_APPLEDL_DISK_FULL: _bindgen_ty_200 = -2147412991;
pub const CSSMERR_APPLEDL_QUOTA_EXCEEDED: _bindgen_ty_200 = -2147412990;
pub const CSSMERR_APPLEDL_FILE_TOO_BIG: _bindgen_ty_200 = -2147412989;
pub const CSSMERR_APPLEDL_INVALID_DATABASE_BLOB: _bindgen_ty_200 = -2147412988;
pub const CSSMERR_APPLEDL_INVALID_KEY_BLOB: _bindgen_ty_200 = -2147412987;
pub const CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB: _bindgen_ty_200 = -2147412986;
pub const CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB: _bindgen_ty_200 = -2147412985;
pub type _bindgen_ty_200 = ::std::os::raw::c_int;
pub const CSSMERR_APPLETP_HOSTNAME_MISMATCH: _bindgen_ty_201 = -2147408896;
pub const CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN: _bindgen_ty_201 = -2147408895;
pub const CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS: _bindgen_ty_201 = -2147408894;
pub const CSSMERR_APPLETP_INVALID_CA: _bindgen_ty_201 = -2147408893;
pub const CSSMERR_APPLETP_INVALID_AUTHORITY_ID: _bindgen_ty_201 = -2147408892;
pub const CSSMERR_APPLETP_INVALID_SUBJECT_ID: _bindgen_ty_201 = -2147408891;
pub const CSSMERR_APPLETP_INVALID_KEY_USAGE: _bindgen_ty_201 = -2147408890;
pub const CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE: _bindgen_ty_201 = -2147408889;
pub const CSSMERR_APPLETP_INVALID_ID_LINKAGE: _bindgen_ty_201 = -2147408888;
pub const CSSMERR_APPLETP_PATH_LEN_CONSTRAINT: _bindgen_ty_201 = -2147408887;
pub const CSSMERR_APPLETP_INVALID_ROOT: _bindgen_ty_201 = -2147408886;
pub const CSSMERR_APPLETP_CRL_EXPIRED: _bindgen_ty_201 = -2147408885;
pub const CSSMERR_APPLETP_CRL_NOT_VALID_YET: _bindgen_ty_201 = -2147408884;
pub const CSSMERR_APPLETP_CRL_NOT_FOUND: _bindgen_ty_201 = -2147408883;
pub const CSSMERR_APPLETP_CRL_SERVER_DOWN: _bindgen_ty_201 = -2147408882;
pub const CSSMERR_APPLETP_CRL_BAD_URI: _bindgen_ty_201 = -2147408881;
pub const CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN: _bindgen_ty_201 = -2147408880;
pub const CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN: _bindgen_ty_201 = -2147408879;
pub const CSSMERR_APPLETP_CRL_NOT_TRUSTED: _bindgen_ty_201 = -2147408878;
pub const CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT: _bindgen_ty_201 = -2147408877;
pub const CSSMERR_APPLETP_CRL_POLICY_FAIL: _bindgen_ty_201 = -2147408876;
pub const CSSMERR_APPLETP_IDP_FAIL: _bindgen_ty_201 = -2147408875;
pub const CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER: _bindgen_ty_201 = -2147408874;
pub const CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER: _bindgen_ty_201 = -2147408873;
pub const CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND: _bindgen_ty_201 = -2147408872;
pub const CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE: _bindgen_ty_201 = -2147408871;
pub const CSSMERR_APPLETP_SMIME_BAD_KEY_USE: _bindgen_ty_201 = -2147408870;
pub const CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL: _bindgen_ty_201 = -2147408869;
pub const CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS: _bindgen_ty_201 = -2147408868;
pub const CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT: _bindgen_ty_201 = -2147408867;
pub const CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE: _bindgen_ty_201 = -2147408866;
pub const CSSMERR_APPLETP_OCSP_BAD_RESPONSE: _bindgen_ty_201 = -2147408865;
pub const CSSMERR_APPLETP_OCSP_BAD_REQUEST: _bindgen_ty_201 = -2147408864;
pub const CSSMERR_APPLETP_OCSP_UNAVAILABLE: _bindgen_ty_201 = -2147408863;
pub const CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED: _bindgen_ty_201 = -2147408862;
pub const CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK: _bindgen_ty_201 = -2147408861;
pub const CSSMERR_APPLETP_NETWORK_FAILURE: _bindgen_ty_201 = -2147408860;
pub const CSSMERR_APPLETP_OCSP_NOT_TRUSTED: _bindgen_ty_201 = -2147408859;
pub const CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT: _bindgen_ty_201 = -2147408858;
pub const CSSMERR_APPLETP_OCSP_SIG_ERROR: _bindgen_ty_201 = -2147408857;
pub const CSSMERR_APPLETP_OCSP_NO_SIGNER: _bindgen_ty_201 = -2147408856;
pub const CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ: _bindgen_ty_201 = -2147408855;
pub const CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR: _bindgen_ty_201 = -2147408854;
pub const CSSMERR_APPLETP_OCSP_RESP_TRY_LATER: _bindgen_ty_201 = -2147408853;
pub const CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED: _bindgen_ty_201 = -2147408852;
pub const CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED: _bindgen_ty_201 = -2147408851;
pub const CSSMERR_APPLETP_OCSP_NONCE_MISMATCH: _bindgen_ty_201 = -2147408850;
pub const CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH: _bindgen_ty_201 = -2147408849;
pub const CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS: _bindgen_ty_201 = -2147408848;
pub const CSSMERR_APPLETP_CS_BAD_PATH_LENGTH: _bindgen_ty_201 = -2147408847;
pub const CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE: _bindgen_ty_201 = -2147408846;
pub const CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT: _bindgen_ty_201 = -2147408845;
pub const CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH: _bindgen_ty_201 = -2147408844;
pub const CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE: _bindgen_ty_201 = -2147408843;
pub const CSSMERR_APPLETP_TRUST_SETTING_DENY: _bindgen_ty_201 = -2147408842;
pub const CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT: _bindgen_ty_201 = -2147408841;
pub const CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT: _bindgen_ty_201 = -2147408840;
pub const CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION: _bindgen_ty_201 = -2147408839;
pub const CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL: _bindgen_ty_201 = -2147408838;
pub const CSSMERR_APPLETP_IDENTIFIER_MISSING: _bindgen_ty_201 = -2147408837;
pub const CSSMERR_APPLETP_CA_PIN_MISMATCH: _bindgen_ty_201 = -2147408836;
pub const CSSMERR_APPLETP_LEAF_PIN_MISMATCH: _bindgen_ty_201 = -2147408835;
pub type _bindgen_ty_201 = ::std::os::raw::c_int;
pub const CSSMERR_APPLE_DOTMAC_REQ_QUEUED: _bindgen_ty_202 = -2147408796;
pub const CSSMERR_APPLE_DOTMAC_REQ_REDIRECT: _bindgen_ty_202 = -2147408795;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR: _bindgen_ty_202 = -2147408794;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM: _bindgen_ty_202 = -2147408793;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH: _bindgen_ty_202 = -2147408792;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL: _bindgen_ty_202 = -2147408791;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL: _bindgen_ty_202 = -2147408790;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST: _bindgen_ty_202 = -2147408789;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR: _bindgen_ty_202 = -2147408788;
pub const CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING: _bindgen_ty_202 = -2147408787;
pub const CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING: _bindgen_ty_202 = -2147408786;
pub const CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL: _bindgen_ty_202 = -2147408785;
pub const CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK: _bindgen_ty_202 = -2147408784;
pub type _bindgen_ty_202 = ::std::os::raw::c_int;
pub const CSSM_APPLEDL_OPEN_PARAMETERS_VERSION: _bindgen_ty_203 = 1;
pub type _bindgen_ty_203 = ::std::os::raw::c_uint;
pub const cssm_appledl_open_parameters_mask_kCSSM_APPLEDL_MASK_MODE:
    cssm_appledl_open_parameters_mask = 1;
pub type cssm_appledl_open_parameters_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_appledl_open_parameters {
    pub length: uint32,
    pub version: uint32,
    pub autoCommit: CSSM_BOOL,
    pub mask: uint32,
    pub mode: mode_t,
}
pub type CSSM_APPLEDL_OPEN_PARAMETERS = cssm_appledl_open_parameters;
pub type CSSM_APPLEDL_OPEN_PARAMETERS_PTR = *mut cssm_appledl_open_parameters;
pub const CSSM_APPLECSPDL_DB_LOCK: _bindgen_ty_204 = 0;
pub const CSSM_APPLECSPDL_DB_UNLOCK: _bindgen_ty_204 = 1;
pub const CSSM_APPLECSPDL_DB_GET_SETTINGS: _bindgen_ty_204 = 2;
pub const CSSM_APPLECSPDL_DB_SET_SETTINGS: _bindgen_ty_204 = 3;
pub const CSSM_APPLECSPDL_DB_IS_LOCKED: _bindgen_ty_204 = 4;
pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD: _bindgen_ty_204 = 5;
pub const CSSM_APPLECSPDL_DB_GET_HANDLE: _bindgen_ty_204 = 6;
pub const CSSM_APPLESCPDL_CSP_GET_KEYHANDLE: _bindgen_ty_204 = 7;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_8: _bindgen_ty_204 = 8;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_9: _bindgen_ty_204 = 9;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_10: _bindgen_ty_204 = 10;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_11: _bindgen_ty_204 = 11;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_12: _bindgen_ty_204 = 12;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_13: _bindgen_ty_204 = 13;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_14: _bindgen_ty_204 = 14;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_15: _bindgen_ty_204 = 15;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_16: _bindgen_ty_204 = 16;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_17: _bindgen_ty_204 = 17;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_18: _bindgen_ty_204 = 18;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_19: _bindgen_ty_204 = 19;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_20: _bindgen_ty_204 = 20;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_21: _bindgen_ty_204 = 21;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_22: _bindgen_ty_204 = 22;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_23: _bindgen_ty_204 = 23;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_24: _bindgen_ty_204 = 24;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_25: _bindgen_ty_204 = 25;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_26: _bindgen_ty_204 = 26;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_27: _bindgen_ty_204 = 27;
pub const CSSM_APPLECSP_KEYDIGEST: _bindgen_ty_204 = 256;
pub type _bindgen_ty_204 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_applecspdl_db_settings_parameters {
    pub idleTimeout: uint32,
    pub lockOnSleep: uint8,
}
pub type CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS = cssm_applecspdl_db_settings_parameters;
pub type CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS_PTR = *mut cssm_applecspdl_db_settings_parameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_applecspdl_db_is_locked_parameters {
    pub isLocked: uint8,
}
pub type CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS = cssm_applecspdl_db_is_locked_parameters;
pub type CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS_PTR = *mut cssm_applecspdl_db_is_locked_parameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_applecspdl_db_change_password_parameters {
    pub accessCredentials: *mut CSSM_ACCESS_CREDENTIALS,
}
pub type CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS =
    cssm_applecspdl_db_change_password_parameters;
pub type CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS_PTR =
    *mut cssm_applecspdl_db_change_password_parameters;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM: _bindgen_ty_205 = 100;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL: _bindgen_ty_205 = 101;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1: _bindgen_ty_205 = 102;
pub type _bindgen_ty_205 = ::std::os::raw::c_uint;
pub const CSSM_ATTRIBUTE_VENDOR_DEFINED: _bindgen_ty_206 = 8388608;
pub type _bindgen_ty_206 = ::std::os::raw::c_uint;
pub const CSSM_ATTRIBUTE_PUBLIC_KEY: _bindgen_ty_207 = 1082130432;
pub const CSSM_ATTRIBUTE_FEE_PRIME_TYPE: _bindgen_ty_207 = 276824065;
pub const CSSM_ATTRIBUTE_FEE_CURVE_TYPE: _bindgen_ty_207 = 276824066;
pub const CSSM_ATTRIBUTE_ASC_OPTIMIZATION: _bindgen_ty_207 = 276824067;
pub const CSSM_ATTRIBUTE_RSA_BLINDING: _bindgen_ty_207 = 276824068;
pub const CSSM_ATTRIBUTE_PARAM_KEY: _bindgen_ty_207 = 1082130437;
pub const CSSM_ATTRIBUTE_PROMPT: _bindgen_ty_207 = 545259526;
pub const CSSM_ATTRIBUTE_ALERT_TITLE: _bindgen_ty_207 = 545259527;
pub const CSSM_ATTRIBUTE_VERIFY_PASSPHRASE: _bindgen_ty_207 = 276824072;
pub type _bindgen_ty_207 = ::std::os::raw::c_uint;
pub const CSSM_FEE_PRIME_TYPE_DEFAULT: _bindgen_ty_208 = 0;
pub const CSSM_FEE_PRIME_TYPE_MERSENNE: _bindgen_ty_208 = 1;
pub const CSSM_FEE_PRIME_TYPE_FEE: _bindgen_ty_208 = 2;
pub const CSSM_FEE_PRIME_TYPE_GENERAL: _bindgen_ty_208 = 3;
pub type _bindgen_ty_208 = ::std::os::raw::c_uint;
pub const CSSM_FEE_CURVE_TYPE_DEFAULT: _bindgen_ty_209 = 0;
pub const CSSM_FEE_CURVE_TYPE_MONTGOMERY: _bindgen_ty_209 = 1;
pub const CSSM_FEE_CURVE_TYPE_WEIERSTRASS: _bindgen_ty_209 = 2;
pub const CSSM_FEE_CURVE_TYPE_ANSI_X9_62: _bindgen_ty_209 = 3;
pub type _bindgen_ty_209 = ::std::os::raw::c_uint;
pub const CSSM_ASC_OPTIMIZE_DEFAULT: _bindgen_ty_210 = 0;
pub const CSSM_ASC_OPTIMIZE_SIZE: _bindgen_ty_210 = 1;
pub const CSSM_ASC_OPTIMIZE_SECURITY: _bindgen_ty_210 = 2;
pub const CSSM_ASC_OPTIMIZE_TIME: _bindgen_ty_210 = 3;
pub const CSSM_ASC_OPTIMIZE_TIME_SIZE: _bindgen_ty_210 = 4;
pub const CSSM_ASC_OPTIMIZE_ASCII: _bindgen_ty_210 = 5;
pub type _bindgen_ty_210 = ::std::os::raw::c_uint;
pub const CSSM_KEYATTR_PARTIAL: _bindgen_ty_211 = 65536;
pub const CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT: _bindgen_ty_211 = 131072;
pub type _bindgen_ty_211 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_TP_NAME_OID {
    pub string: *const ::std::os::raw::c_char,
    pub oid: *const SecAsn1Oid,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_TP_CERT_REQUEST {
    pub cspHand: CSSM_CSP_HANDLE,
    pub clHand: CSSM_CL_HANDLE,
    pub serialNumber: uint32,
    pub numSubjectNames: uint32,
    pub subjectNames: *mut CSSM_APPLE_TP_NAME_OID,
    pub numIssuerNames: uint32,
    pub issuerNames: *mut CSSM_APPLE_TP_NAME_OID,
    pub issuerNameX509: CSSM_X509_NAME_PTR,
    pub certPublicKey: *const CSSM_KEY,
    pub issuerPrivateKey: *const CSSM_KEY,
    pub signatureAlg: CSSM_ALGORITHMS,
    pub signatureOid: SecAsn1Oid,
    pub notBefore: uint32,
    pub notAfter: uint32,
    pub numExtensions: uint32,
    pub extensions: *mut CE_DataAndType,
    pub challengeString: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_TP_SSL_OPTIONS {
    pub Version: uint32,
    pub ServerNameLen: uint32,
    pub ServerName: *const ::std::os::raw::c_char,
    pub Flags: uint32,
}
pub type CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;
pub const CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT: _bindgen_ty_212 = 1;
pub const CSSM_TP_ACTION_FETCH_CRL_FROM_NET: _bindgen_ty_212 = 2;
pub const CSSM_TP_ACTION_CRL_SUFFICIENT: _bindgen_ty_212 = 4;
pub const CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT: _bindgen_ty_212 = 8;
pub type _bindgen_ty_212 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_TP_CRL_OPTIONS {
    pub Version: uint32,
    pub CrlFlags: CSSM_APPLE_TP_CRL_OPT_FLAGS,
    pub crlStore: CSSM_DL_DB_HANDLE_PTR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_TP_SMIME_OPTIONS {
    pub Version: uint32,
    pub IntendedUsage: CE_KeyUsage,
    pub SenderEmailLen: uint32,
    pub SenderEmail: *const ::std::os::raw::c_char,
}
pub type CSSM_APPLE_TP_ACTION_FLAGS = uint32;
pub const CSSM_TP_ACTION_ALLOW_EXPIRED: _bindgen_ty_213 = 1;
pub const CSSM_TP_ACTION_LEAF_IS_CA: _bindgen_ty_213 = 2;
pub const CSSM_TP_ACTION_FETCH_CERT_FROM_NET: _bindgen_ty_213 = 4;
pub const CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT: _bindgen_ty_213 = 8;
pub const CSSM_TP_ACTION_REQUIRE_REV_PER_CERT: _bindgen_ty_213 = 16;
pub const CSSM_TP_ACTION_TRUST_SETTINGS: _bindgen_ty_213 = 32;
pub const CSSM_TP_ACTION_IMPLICIT_ANCHORS: _bindgen_ty_213 = 64;
pub type _bindgen_ty_213 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_TP_ACTION_DATA {
    pub Version: uint32,
    pub ActionFlags: CSSM_APPLE_TP_ACTION_FLAGS,
}
pub type CSSM_TP_APPLE_CERT_STATUS = uint32;
pub const CSSM_CERT_STATUS_EXPIRED: _bindgen_ty_214 = 1;
pub const CSSM_CERT_STATUS_NOT_VALID_YET: _bindgen_ty_214 = 2;
pub const CSSM_CERT_STATUS_IS_IN_INPUT_CERTS: _bindgen_ty_214 = 4;
pub const CSSM_CERT_STATUS_IS_IN_ANCHORS: _bindgen_ty_214 = 8;
pub const CSSM_CERT_STATUS_IS_ROOT: _bindgen_ty_214 = 16;
pub const CSSM_CERT_STATUS_IS_FROM_NET: _bindgen_ty_214 = 32;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER: _bindgen_ty_214 = 64;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN: _bindgen_ty_214 = 128;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM: _bindgen_ty_214 = 256;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST: _bindgen_ty_214 = 512;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_DENY: _bindgen_ty_214 = 1024;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR: _bindgen_ty_214 = 2048;
pub type _bindgen_ty_214 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_TP_APPLE_EVIDENCE_INFO {
    pub StatusBits: CSSM_TP_APPLE_CERT_STATUS,
    pub NumStatusCodes: uint32,
    pub StatusCodes: *mut CSSM_RETURN,
    pub Index: uint32,
    pub DlDbHandle: CSSM_DL_DB_HANDLE,
    pub UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_TP_APPLE_EVIDENCE_HEADER {
    pub Version: uint32,
}
pub const CSSM_EVIDENCE_FORM_APPLE_HEADER: _bindgen_ty_215 = 2147483648;
pub const CSSM_EVIDENCE_FORM_APPLE_CERTGROUP: _bindgen_ty_215 = 2147483649;
pub const CSSM_EVIDENCE_FORM_APPLE_CERT_INFO: _bindgen_ty_215 = 2147483650;
pub type _bindgen_ty_215 = ::std::os::raw::c_uint;
pub const CSSM_APPLEX509CL_OBTAIN_CSR: _bindgen_ty_216 = 0;
pub const CSSM_APPLEX509CL_VERIFY_CSR: _bindgen_ty_216 = 1;
pub type _bindgen_ty_216 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSSM_APPLE_CL_CSR_REQUEST {
    pub subjectNameX509: CSSM_X509_NAME_PTR,
    pub signatureAlg: CSSM_ALGORITHMS,
    pub signatureOid: SecAsn1Oid,
    pub cspHand: CSSM_CSP_HANDLE,
    pub subjectPublicKey: *const CSSM_KEY,
    pub subjectPrivateKey: *const CSSM_KEY,
    pub challengeString: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn cssmPerror(how: *const ::std::os::raw::c_char, error: CSSM_RETURN);
}
extern "C" {
    pub fn cssmOidToAlg(oid: *const SecAsn1Oid, alg: *mut CSSM_ALGORITHMS) -> bool;
}
extern "C" {
    pub fn cssmAlgToOid(algId: CSSM_ALGORITHMS) -> *const SecAsn1Oid;
}
pub const kSecUnlockStateStatus: _bindgen_ty_217 = 1;
pub const kSecReadPermStatus: _bindgen_ty_217 = 2;
pub const kSecWritePermStatus: _bindgen_ty_217 = 4;
pub type _bindgen_ty_217 = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainSettings {
    pub version: UInt32,
    pub lockOnSleep: Boolean,
    pub useLockInterval: Boolean,
    pub lockInterval: UInt32,
}
pub const SecAuthenticationType_kSecAuthenticationTypeNTLM: SecAuthenticationType = 1835824238;
pub const SecAuthenticationType_kSecAuthenticationTypeMSN: SecAuthenticationType = 1634628461;
pub const SecAuthenticationType_kSecAuthenticationTypeDPA: SecAuthenticationType = 1633775716;
pub const SecAuthenticationType_kSecAuthenticationTypeRPA: SecAuthenticationType = 1633775730;
pub const SecAuthenticationType_kSecAuthenticationTypeHTTPBasic: SecAuthenticationType = 1886680168;
pub const SecAuthenticationType_kSecAuthenticationTypeHTTPDigest: SecAuthenticationType =
    1685353576;
pub const SecAuthenticationType_kSecAuthenticationTypeHTMLForm: SecAuthenticationType = 1836216166;
pub const SecAuthenticationType_kSecAuthenticationTypeDefault: SecAuthenticationType = 1953261156;
pub const SecAuthenticationType_kSecAuthenticationTypeAny: SecAuthenticationType = 0;
pub type SecAuthenticationType = FourCharCode;
pub const SecProtocolType_kSecProtocolTypeFTP: SecProtocolType = 1718906912;
pub const SecProtocolType_kSecProtocolTypeFTPAccount: SecProtocolType = 1718906977;
pub const SecProtocolType_kSecProtocolTypeHTTP: SecProtocolType = 1752462448;
pub const SecProtocolType_kSecProtocolTypeIRC: SecProtocolType = 1769104160;
pub const SecProtocolType_kSecProtocolTypeNNTP: SecProtocolType = 1852732528;
pub const SecProtocolType_kSecProtocolTypePOP3: SecProtocolType = 1886351411;
pub const SecProtocolType_kSecProtocolTypeSMTP: SecProtocolType = 1936553072;
pub const SecProtocolType_kSecProtocolTypeSOCKS: SecProtocolType = 1936685088;
pub const SecProtocolType_kSecProtocolTypeIMAP: SecProtocolType = 1768776048;
pub const SecProtocolType_kSecProtocolTypeLDAP: SecProtocolType = 1818517872;
pub const SecProtocolType_kSecProtocolTypeAppleTalk: SecProtocolType = 1635019883;
pub const SecProtocolType_kSecProtocolTypeAFP: SecProtocolType = 1634103328;
pub const SecProtocolType_kSecProtocolTypeTelnet: SecProtocolType = 1952803950;
pub const SecProtocolType_kSecProtocolTypeSSH: SecProtocolType = 1936943136;
pub const SecProtocolType_kSecProtocolTypeFTPS: SecProtocolType = 1718906995;
pub const SecProtocolType_kSecProtocolTypeHTTPS: SecProtocolType = 1752461427;
pub const SecProtocolType_kSecProtocolTypeHTTPProxy: SecProtocolType = 1752461432;
pub const SecProtocolType_kSecProtocolTypeHTTPSProxy: SecProtocolType = 1752462200;
pub const SecProtocolType_kSecProtocolTypeFTPProxy: SecProtocolType = 1718907000;
pub const SecProtocolType_kSecProtocolTypeCIFS: SecProtocolType = 1667851891;
pub const SecProtocolType_kSecProtocolTypeSMB: SecProtocolType = 1936548384;
pub const SecProtocolType_kSecProtocolTypeRTSP: SecProtocolType = 1920234352;
pub const SecProtocolType_kSecProtocolTypeRTSPProxy: SecProtocolType = 1920234360;
pub const SecProtocolType_kSecProtocolTypeDAAP: SecProtocolType = 1684103536;
pub const SecProtocolType_kSecProtocolTypeEPPC: SecProtocolType = 1701867619;
pub const SecProtocolType_kSecProtocolTypeIPP: SecProtocolType = 1768976416;
pub const SecProtocolType_kSecProtocolTypeNNTPS: SecProtocolType = 1853124723;
pub const SecProtocolType_kSecProtocolTypeLDAPS: SecProtocolType = 1818521715;
pub const SecProtocolType_kSecProtocolTypeTelnetS: SecProtocolType = 1952803955;
pub const SecProtocolType_kSecProtocolTypeIMAPS: SecProtocolType = 1768779891;
pub const SecProtocolType_kSecProtocolTypeIRCS: SecProtocolType = 1769104243;
pub const SecProtocolType_kSecProtocolTypePOP3S: SecProtocolType = 1886351475;
pub const SecProtocolType_kSecProtocolTypeCVSpserver: SecProtocolType = 1668707184;
pub const SecProtocolType_kSecProtocolTypeSVN: SecProtocolType = 1937141280;
pub const SecProtocolType_kSecProtocolTypeAny: SecProtocolType = 0;
pub type SecProtocolType = FourCharCode;
pub const SecKeychainEvent_kSecLockEvent: SecKeychainEvent = 1;
pub const SecKeychainEvent_kSecUnlockEvent: SecKeychainEvent = 2;
pub const SecKeychainEvent_kSecAddEvent: SecKeychainEvent = 3;
pub const SecKeychainEvent_kSecDeleteEvent: SecKeychainEvent = 4;
pub const SecKeychainEvent_kSecUpdateEvent: SecKeychainEvent = 5;
pub const SecKeychainEvent_kSecPasswordChangedEvent: SecKeychainEvent = 6;
pub const SecKeychainEvent_kSecDefaultChangedEvent: SecKeychainEvent = 9;
pub const SecKeychainEvent_kSecDataAccessEvent: SecKeychainEvent = 10;
pub const SecKeychainEvent_kSecKeychainListChangedEvent: SecKeychainEvent = 11;
pub const SecKeychainEvent_kSecTrustSettingsChangedEvent: SecKeychainEvent = 12;
pub type SecKeychainEvent = UInt32;
pub const SecKeychainEventMask_kSecLockEventMask: SecKeychainEventMask = 2;
pub const SecKeychainEventMask_kSecUnlockEventMask: SecKeychainEventMask = 4;
pub const SecKeychainEventMask_kSecAddEventMask: SecKeychainEventMask = 8;
pub const SecKeychainEventMask_kSecDeleteEventMask: SecKeychainEventMask = 16;
pub const SecKeychainEventMask_kSecUpdateEventMask: SecKeychainEventMask = 32;
pub const SecKeychainEventMask_kSecPasswordChangedEventMask: SecKeychainEventMask = 64;
pub const SecKeychainEventMask_kSecDefaultChangedEventMask: SecKeychainEventMask = 512;
pub const SecKeychainEventMask_kSecDataAccessEventMask: SecKeychainEventMask = 1024;
pub const SecKeychainEventMask_kSecKeychainListChangedMask: SecKeychainEventMask = 2048;
pub const SecKeychainEventMask_kSecTrustSettingsChangedEventMask: SecKeychainEventMask = 4096;
pub const SecKeychainEventMask_kSecEveryEventMask: SecKeychainEventMask = 4294967295;
pub type SecKeychainEventMask = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeychainCallbackInfo {
    pub version: UInt32,
    pub item: SecKeychainItemRef,
    pub keychain: SecKeychainRef,
    pub pid: pid_t,
}
extern "C" {
    pub fn SecKeychainGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecKeychainGetVersion(returnVers: *mut UInt32) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainOpen(
        pathName: *const ::std::os::raw::c_char,
        keychain: *mut SecKeychainRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainCreate(
        pathName: *const ::std::os::raw::c_char,
        passwordLength: UInt32,
        password: *const ::std::os::raw::c_void,
        promptUser: Boolean,
        initialAccess: SecAccessRef,
        keychain: *mut SecKeychainRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainDelete(keychainOrArray: SecKeychainRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetSettings(
        keychain: SecKeychainRef,
        newSettings: *const SecKeychainSettings,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainCopySettings(
        keychain: SecKeychainRef,
        outSettings: *mut SecKeychainSettings,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainUnlock(
        keychain: SecKeychainRef,
        passwordLength: UInt32,
        password: *const ::std::os::raw::c_void,
        usePassword: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainLock(keychain: SecKeychainRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainLockAll() -> OSStatus;
}
extern "C" {
    pub fn SecKeychainCopyDefault(keychain: *mut SecKeychainRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetDefault(keychain: SecKeychainRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainCopySearchList(searchList: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetSearchList(searchList: CFArrayRef) -> OSStatus;
}
pub const SecPreferencesDomain_kSecPreferencesDomainUser: SecPreferencesDomain = 0;
pub const SecPreferencesDomain_kSecPreferencesDomainSystem: SecPreferencesDomain = 1;
pub const SecPreferencesDomain_kSecPreferencesDomainCommon: SecPreferencesDomain = 2;
pub const SecPreferencesDomain_kSecPreferencesDomainDynamic: SecPreferencesDomain = 3;
pub type SecPreferencesDomain = ::std::os::raw::c_int;
extern "C" {
    pub fn SecKeychainCopyDomainDefault(
        domain: SecPreferencesDomain,
        keychain: *mut SecKeychainRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetDomainDefault(
        domain: SecPreferencesDomain,
        keychain: SecKeychainRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainCopyDomainSearchList(
        domain: SecPreferencesDomain,
        searchList: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetDomainSearchList(
        domain: SecPreferencesDomain,
        searchList: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetPreferenceDomain(domain: SecPreferencesDomain) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainGetPreferenceDomain(domain: *mut SecPreferencesDomain) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainGetStatus(
        keychain: SecKeychainRef,
        keychainStatus: *mut SecKeychainStatus,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainGetPath(
        keychain: SecKeychainRef,
        ioPathLength: *mut UInt32,
        pathName: *mut ::std::os::raw::c_char,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainAttributeInfoForItemID(
        keychain: SecKeychainRef,
        itemID: UInt32,
        info: *mut *mut SecKeychainAttributeInfo,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainFreeAttributeInfo(info: *mut SecKeychainAttributeInfo) -> OSStatus;
}
pub type SecKeychainCallback = ::std::option::Option<
    unsafe extern "C" fn(
        keychainEvent: SecKeychainEvent,
        info: *mut SecKeychainCallbackInfo,
        context: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
extern "C" {
    pub fn SecKeychainAddCallback(
        callbackFunction: SecKeychainCallback,
        eventMask: SecKeychainEventMask,
        userContext: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainRemoveCallback(callbackFunction: SecKeychainCallback) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainAddInternetPassword(
        keychain: SecKeychainRef,
        serverNameLength: UInt32,
        serverName: *const ::std::os::raw::c_char,
        securityDomainLength: UInt32,
        securityDomain: *const ::std::os::raw::c_char,
        accountNameLength: UInt32,
        accountName: *const ::std::os::raw::c_char,
        pathLength: UInt32,
        path: *const ::std::os::raw::c_char,
        port: UInt16,
        protocol: SecProtocolType,
        authenticationType: SecAuthenticationType,
        passwordLength: UInt32,
        passwordData: *const ::std::os::raw::c_void,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainFindInternetPassword(
        keychainOrArray: CFTypeRef,
        serverNameLength: UInt32,
        serverName: *const ::std::os::raw::c_char,
        securityDomainLength: UInt32,
        securityDomain: *const ::std::os::raw::c_char,
        accountNameLength: UInt32,
        accountName: *const ::std::os::raw::c_char,
        pathLength: UInt32,
        path: *const ::std::os::raw::c_char,
        port: UInt16,
        protocol: SecProtocolType,
        authenticationType: SecAuthenticationType,
        passwordLength: *mut UInt32,
        passwordData: *mut *mut ::std::os::raw::c_void,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainAddGenericPassword(
        keychain: SecKeychainRef,
        serviceNameLength: UInt32,
        serviceName: *const ::std::os::raw::c_char,
        accountNameLength: UInt32,
        accountName: *const ::std::os::raw::c_char,
        passwordLength: UInt32,
        passwordData: *const ::std::os::raw::c_void,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainFindGenericPassword(
        keychainOrArray: CFTypeRef,
        serviceNameLength: UInt32,
        serviceName: *const ::std::os::raw::c_char,
        accountNameLength: UInt32,
        accountName: *const ::std::os::raw::c_char,
        passwordLength: *mut UInt32,
        passwordData: *mut *mut ::std::os::raw::c_void,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetUserInteractionAllowed(state: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainGetUserInteractionAllowed(state: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainGetCSPHandle(
        keychain: SecKeychainRef,
        cspHandle: *mut CSSM_CSP_HANDLE,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainGetDLDBHandle(
        keychain: SecKeychainRef,
        dldbHandle: *mut CSSM_DL_DB_HANDLE,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainCopyAccess(keychain: SecKeychainRef, access: *mut SecAccessRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSetAccess(keychain: SecKeychainRef, access: SecAccessRef) -> OSStatus;
}
pub const SecExternalFormat_kSecFormatUnknown: SecExternalFormat = 0;
pub const SecExternalFormat_kSecFormatOpenSSL: SecExternalFormat = 1;
pub const SecExternalFormat_kSecFormatSSH: SecExternalFormat = 2;
pub const SecExternalFormat_kSecFormatBSAFE: SecExternalFormat = 3;
pub const SecExternalFormat_kSecFormatRawKey: SecExternalFormat = 4;
pub const SecExternalFormat_kSecFormatWrappedPKCS8: SecExternalFormat = 5;
pub const SecExternalFormat_kSecFormatWrappedOpenSSL: SecExternalFormat = 6;
pub const SecExternalFormat_kSecFormatWrappedSSH: SecExternalFormat = 7;
pub const SecExternalFormat_kSecFormatWrappedLSH: SecExternalFormat = 8;
pub const SecExternalFormat_kSecFormatX509Cert: SecExternalFormat = 9;
pub const SecExternalFormat_kSecFormatPEMSequence: SecExternalFormat = 10;
pub const SecExternalFormat_kSecFormatPKCS7: SecExternalFormat = 11;
pub const SecExternalFormat_kSecFormatPKCS12: SecExternalFormat = 12;
pub const SecExternalFormat_kSecFormatNetscapeCertSequence: SecExternalFormat = 13;
pub const SecExternalFormat_kSecFormatSSHv2: SecExternalFormat = 14;
pub type SecExternalFormat = u32;
pub const SecExternalItemType_kSecItemTypeUnknown: SecExternalItemType = 0;
pub const SecExternalItemType_kSecItemTypePrivateKey: SecExternalItemType = 1;
pub const SecExternalItemType_kSecItemTypePublicKey: SecExternalItemType = 2;
pub const SecExternalItemType_kSecItemTypeSessionKey: SecExternalItemType = 3;
pub const SecExternalItemType_kSecItemTypeCertificate: SecExternalItemType = 4;
pub const SecExternalItemType_kSecItemTypeAggregate: SecExternalItemType = 5;
pub type SecExternalItemType = u32;
pub const SecItemImportExportFlags_kSecItemPemArmour: SecItemImportExportFlags = 1;
pub type SecItemImportExportFlags = u32;
pub const SecKeyImportExportFlags_kSecKeyImportOnlyOne: SecKeyImportExportFlags = 1;
pub const SecKeyImportExportFlags_kSecKeySecurePassphrase: SecKeyImportExportFlags = 2;
pub const SecKeyImportExportFlags_kSecKeyNoAccessControl: SecKeyImportExportFlags = 4;
pub type SecKeyImportExportFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecKeyImportExportParameters {
    pub version: u32,
    pub flags: SecKeyImportExportFlags,
    pub passphrase: CFTypeRef,
    pub alertTitle: CFStringRef,
    pub alertPrompt: CFStringRef,
    pub accessRef: SecAccessRef,
    pub keyUsage: CSSM_KEYUSE,
    pub keyAttributes: CSSM_KEYATTR_FLAGS,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecItemImportExportKeyParameters {
    pub version: u32,
    pub flags: SecKeyImportExportFlags,
    pub passphrase: CFTypeRef,
    pub alertTitle: CFStringRef,
    pub alertPrompt: CFStringRef,
    pub accessRef: SecAccessRef,
    pub keyUsage: CFArrayRef,
    pub keyAttributes: CFArrayRef,
}
extern "C" {
    pub fn SecKeychainItemExport(
        keychainItemOrArray: CFTypeRef,
        outputFormat: SecExternalFormat,
        flags: SecItemImportExportFlags,
        keyParams: *const SecKeyImportExportParameters,
        exportedData: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecItemExport(
        secItemOrArray: CFTypeRef,
        outputFormat: SecExternalFormat,
        flags: SecItemImportExportFlags,
        keyParams: *const SecItemImportExportKeyParameters,
        exportedData: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemImport(
        importedData: CFDataRef,
        fileNameOrExtension: CFStringRef,
        inputFormat: *mut SecExternalFormat,
        itemType: *mut SecExternalItemType,
        flags: SecItemImportExportFlags,
        keyParams: *const SecKeyImportExportParameters,
        importKeychain: SecKeychainRef,
        outItems: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecItemImport(
        importedData: CFDataRef,
        fileNameOrExtension: CFStringRef,
        inputFormat: *mut SecExternalFormat,
        itemType: *mut SecExternalItemType,
        flags: SecItemImportExportFlags,
        keyParams: *const SecItemImportExportKeyParameters,
        importKeychain: SecKeychainRef,
        outItems: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub static kSecImportExportPassphrase: CFStringRef;
}
extern "C" {
    pub static kSecImportExportKeychain: CFStringRef;
}
extern "C" {
    pub static kSecImportExportAccess: CFStringRef;
}
extern "C" {
    pub static kSecImportItemLabel: CFStringRef;
}
extern "C" {
    pub static kSecImportItemKeyID: CFStringRef;
}
extern "C" {
    pub static kSecImportItemTrust: CFStringRef;
}
extern "C" {
    pub static kSecImportItemCertChain: CFStringRef;
}
extern "C" {
    pub static kSecImportItemIdentity: CFStringRef;
}
extern "C" {
    pub fn SecPKCS12Import(
        pkcs12_data: CFDataRef,
        options: CFDictionaryRef,
        items: *mut CFArrayRef,
    ) -> OSStatus;
}
pub const SecTrustResultType_kSecTrustResultInvalid: SecTrustResultType = 0;
pub const SecTrustResultType_kSecTrustResultProceed: SecTrustResultType = 1;
pub const SecTrustResultType_kSecTrustResultConfirm: SecTrustResultType = 2;
pub const SecTrustResultType_kSecTrustResultDeny: SecTrustResultType = 3;
pub const SecTrustResultType_kSecTrustResultUnspecified: SecTrustResultType = 4;
pub const SecTrustResultType_kSecTrustResultRecoverableTrustFailure: SecTrustResultType = 5;
pub const SecTrustResultType_kSecTrustResultFatalTrustFailure: SecTrustResultType = 6;
pub const SecTrustResultType_kSecTrustResultOtherError: SecTrustResultType = 7;
pub type SecTrustResultType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecTrust {
    _unused: [u8; 0],
}
pub type SecTrustRef = *mut __SecTrust;
extern "C" {
    pub static kSecPropertyTypeTitle: CFStringRef;
}
extern "C" {
    pub static kSecPropertyTypeError: CFStringRef;
}
extern "C" {
    pub static kSecTrustEvaluationDate: CFStringRef;
}
extern "C" {
    pub static kSecTrustExtendedValidation: CFStringRef;
}
extern "C" {
    pub static kSecTrustOrganizationName: CFStringRef;
}
extern "C" {
    pub static kSecTrustResultValue: CFStringRef;
}
extern "C" {
    pub static kSecTrustRevocationChecked: CFStringRef;
}
extern "C" {
    pub static kSecTrustRevocationValidUntilDate: CFStringRef;
}
extern "C" {
    pub static kSecTrustCertificateTransparency: CFStringRef;
}
extern "C" {
    pub static kSecTrustCertificateTransparencyWhiteList: CFStringRef;
}
pub type SecTrustCallback = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn SecTrustGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecTrustCreateWithCertificates(
        certificates: CFTypeRef,
        policies: CFTypeRef,
        trust: *mut SecTrustRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetPolicies(trust: SecTrustRef, policies: CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyPolicies(trust: SecTrustRef, policies: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetNetworkFetchAllowed(trust: SecTrustRef, allowFetch: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetNetworkFetchAllowed(trust: SecTrustRef, allowFetch: *mut Boolean)
        -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetAnchorCertificates(
        trust: SecTrustRef,
        anchorCertificates: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetAnchorCertificatesOnly(
        trust: SecTrustRef,
        anchorCertificatesOnly: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyCustomAnchorCertificates(
        trust: SecTrustRef,
        anchors: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetVerifyDate(trust: SecTrustRef, verifyDate: CFDateRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetVerifyTime(trust: SecTrustRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn SecTrustEvaluate(trust: SecTrustRef, result: *mut SecTrustResultType) -> OSStatus;
}
extern "C" {
    pub fn SecTrustEvaluateAsync(
        trust: SecTrustRef,
        queue: NSObject,
        result: SecTrustCallback,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustEvaluateWithError(trust: SecTrustRef, error: *mut CFErrorRef) -> bool;
}
pub type SecTrustWithErrorCallback = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn SecTrustEvaluateAsyncWithError(
        trust: SecTrustRef,
        queue: NSObject,
        result: SecTrustWithErrorCallback,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetTrustResult(trust: SecTrustRef, result: *mut SecTrustResultType) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyPublicKey(trust: SecTrustRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecTrustCopyKey(trust: SecTrustRef) -> SecKeyRef;
}
extern "C" {
    pub fn SecTrustGetCertificateCount(trust: SecTrustRef) -> CFIndex;
}
extern "C" {
    pub fn SecTrustGetCertificateAtIndex(trust: SecTrustRef, ix: CFIndex) -> SecCertificateRef;
}
extern "C" {
    pub fn SecTrustCopyExceptions(trust: SecTrustRef) -> CFDataRef;
}
extern "C" {
    pub fn SecTrustSetExceptions(trust: SecTrustRef, exceptions: CFDataRef) -> bool;
}
extern "C" {
    pub fn SecTrustCopyProperties(trust: SecTrustRef) -> CFArrayRef;
}
extern "C" {
    pub fn SecTrustCopyResult(trust: SecTrustRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecTrustSetOCSPResponse(trust: SecTrustRef, responseData: CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetSignedCertificateTimestamps(
        trust: SecTrustRef,
        sctArray: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyCertificateChain(trust: SecTrustRef) -> CFArrayRef;
}
pub use self::SecTrustResultType as SecTrustUserSetting;
pub const SecTrustOptionFlags_kSecTrustOptionAllowExpired: SecTrustOptionFlags = 1;
pub const SecTrustOptionFlags_kSecTrustOptionLeafIsCA: SecTrustOptionFlags = 2;
pub const SecTrustOptionFlags_kSecTrustOptionFetchIssuerFromNet: SecTrustOptionFlags = 4;
pub const SecTrustOptionFlags_kSecTrustOptionAllowExpiredRoot: SecTrustOptionFlags = 8;
pub const SecTrustOptionFlags_kSecTrustOptionRequireRevPerCert: SecTrustOptionFlags = 16;
pub const SecTrustOptionFlags_kSecTrustOptionUseTrustSettings: SecTrustOptionFlags = 32;
pub const SecTrustOptionFlags_kSecTrustOptionImplicitAnchors: SecTrustOptionFlags = 64;
pub type SecTrustOptionFlags = u32;
extern "C" {
    pub fn SecTrustSetOptions(trustRef: SecTrustRef, options: SecTrustOptionFlags) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetParameters(
        trustRef: SecTrustRef,
        action: CSSM_TP_ACTION,
        actionData: CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSetKeychains(trust: SecTrustRef, keychainOrArray: CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetResult(
        trustRef: SecTrustRef,
        result: *mut SecTrustResultType,
        certChain: *mut CFArrayRef,
        statusChain: *mut *mut CSSM_TP_APPLE_EVIDENCE_INFO,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetCssmResult(
        trust: SecTrustRef,
        result: *mut CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetCssmResultCode(trust: SecTrustRef, resultCode: *mut OSStatus) -> OSStatus;
}
extern "C" {
    pub fn SecTrustGetTPHandle(trust: SecTrustRef, handle: *mut CSSM_TP_HANDLE) -> OSStatus;
}
extern "C" {
    pub fn SecTrustCopyAnchorCertificates(anchors: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub static kSecSharedPassword: CFStringRef;
}
extern "C" {
    pub fn SecAddSharedWebCredential(
        fqdn: CFStringRef,
        account: CFStringRef,
        password: CFStringRef,
        completionHandler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SecRequestSharedWebCredential(
        fqdn: CFStringRef,
        account: CFStringRef,
        completionHandler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SecCreateSharedWebCredentialPassword() -> CFStringRef;
}
extern "C" {
    pub fn sec_retain(obj: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sec_release(obj: *mut ::std::os::raw::c_void);
}
pub trait POS_sec_object: Sized + std::ops::Deref {}
pub type sec_object_t = NSObject;
pub type SSLCipherSuite = u16;
pub const SSL_NULL_WITH_NULL_NULL: _bindgen_ty_218 = 0;
pub const SSL_RSA_WITH_NULL_MD5: _bindgen_ty_218 = 1;
pub const SSL_RSA_WITH_NULL_SHA: _bindgen_ty_218 = 2;
pub const SSL_RSA_EXPORT_WITH_RC4_40_MD5: _bindgen_ty_218 = 3;
pub const SSL_RSA_WITH_RC4_128_MD5: _bindgen_ty_218 = 4;
pub const SSL_RSA_WITH_RC4_128_SHA: _bindgen_ty_218 = 5;
pub const SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5: _bindgen_ty_218 = 6;
pub const SSL_RSA_WITH_IDEA_CBC_SHA: _bindgen_ty_218 = 7;
pub const SSL_RSA_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_218 = 8;
pub const SSL_RSA_WITH_DES_CBC_SHA: _bindgen_ty_218 = 9;
pub const SSL_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 10;
pub const SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_218 = 11;
pub const SSL_DH_DSS_WITH_DES_CBC_SHA: _bindgen_ty_218 = 12;
pub const SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 13;
pub const SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_218 = 14;
pub const SSL_DH_RSA_WITH_DES_CBC_SHA: _bindgen_ty_218 = 15;
pub const SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 16;
pub const SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_218 = 17;
pub const SSL_DHE_DSS_WITH_DES_CBC_SHA: _bindgen_ty_218 = 18;
pub const SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 19;
pub const SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_218 = 20;
pub const SSL_DHE_RSA_WITH_DES_CBC_SHA: _bindgen_ty_218 = 21;
pub const SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 22;
pub const SSL_DH_anon_EXPORT_WITH_RC4_40_MD5: _bindgen_ty_218 = 23;
pub const SSL_DH_anon_WITH_RC4_128_MD5: _bindgen_ty_218 = 24;
pub const SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA: _bindgen_ty_218 = 25;
pub const SSL_DH_anon_WITH_DES_CBC_SHA: _bindgen_ty_218 = 26;
pub const SSL_DH_anon_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 27;
pub const SSL_FORTEZZA_DMS_WITH_NULL_SHA: _bindgen_ty_218 = 28;
pub const SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA: _bindgen_ty_218 = 29;
pub const TLS_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 47;
pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 48;
pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49;
pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 50;
pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 51;
pub const TLS_DH_anon_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 52;
pub const TLS_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 53;
pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 54;
pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 55;
pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 56;
pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 57;
pub const TLS_DH_anon_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 58;
pub const TLS_ECDH_ECDSA_WITH_NULL_SHA: _bindgen_ty_218 = 49153;
pub const TLS_ECDH_ECDSA_WITH_RC4_128_SHA: _bindgen_ty_218 = 49154;
pub const TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 49155;
pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49156;
pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 49157;
pub const TLS_ECDHE_ECDSA_WITH_NULL_SHA: _bindgen_ty_218 = 49158;
pub const TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: _bindgen_ty_218 = 49159;
pub const TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 49160;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49161;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 49162;
pub const TLS_ECDH_RSA_WITH_NULL_SHA: _bindgen_ty_218 = 49163;
pub const TLS_ECDH_RSA_WITH_RC4_128_SHA: _bindgen_ty_218 = 49164;
pub const TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 49165;
pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49166;
pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 49167;
pub const TLS_ECDHE_RSA_WITH_NULL_SHA: _bindgen_ty_218 = 49168;
pub const TLS_ECDHE_RSA_WITH_RC4_128_SHA: _bindgen_ty_218 = 49169;
pub const TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 49170;
pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49171;
pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 49172;
pub const TLS_ECDH_anon_WITH_NULL_SHA: _bindgen_ty_218 = 49173;
pub const TLS_ECDH_anon_WITH_RC4_128_SHA: _bindgen_ty_218 = 49174;
pub const TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 49175;
pub const TLS_ECDH_anon_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49176;
pub const TLS_ECDH_anon_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 49177;
pub const TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 49205;
pub const TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 49206;
pub const TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: _bindgen_ty_218 = 52395;
pub const TLS_NULL_WITH_NULL_NULL: _bindgen_ty_218 = 0;
pub const TLS_RSA_WITH_NULL_MD5: _bindgen_ty_218 = 1;
pub const TLS_RSA_WITH_NULL_SHA: _bindgen_ty_218 = 2;
pub const TLS_RSA_WITH_RC4_128_MD5: _bindgen_ty_218 = 4;
pub const TLS_RSA_WITH_RC4_128_SHA: _bindgen_ty_218 = 5;
pub const TLS_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 10;
pub const TLS_RSA_WITH_NULL_SHA256: _bindgen_ty_218 = 59;
pub const TLS_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 60;
pub const TLS_RSA_WITH_AES_256_CBC_SHA256: _bindgen_ty_218 = 61;
pub const TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 13;
pub const TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 16;
pub const TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 19;
pub const TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 22;
pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 62;
pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 63;
pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 64;
pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 103;
pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA256: _bindgen_ty_218 = 104;
pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA256: _bindgen_ty_218 = 105;
pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: _bindgen_ty_218 = 106;
pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: _bindgen_ty_218 = 107;
pub const TLS_DH_anon_WITH_RC4_128_MD5: _bindgen_ty_218 = 24;
pub const TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 27;
pub const TLS_DH_anon_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 108;
pub const TLS_DH_anon_WITH_AES_256_CBC_SHA256: _bindgen_ty_218 = 109;
pub const TLS_PSK_WITH_RC4_128_SHA: _bindgen_ty_218 = 138;
pub const TLS_PSK_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 139;
pub const TLS_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 140;
pub const TLS_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 141;
pub const TLS_DHE_PSK_WITH_RC4_128_SHA: _bindgen_ty_218 = 142;
pub const TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 143;
pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 144;
pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 145;
pub const TLS_RSA_PSK_WITH_RC4_128_SHA: _bindgen_ty_218 = 146;
pub const TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: _bindgen_ty_218 = 147;
pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA: _bindgen_ty_218 = 148;
pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA: _bindgen_ty_218 = 149;
pub const TLS_PSK_WITH_NULL_SHA: _bindgen_ty_218 = 44;
pub const TLS_DHE_PSK_WITH_NULL_SHA: _bindgen_ty_218 = 45;
pub const TLS_RSA_PSK_WITH_NULL_SHA: _bindgen_ty_218 = 46;
pub const TLS_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 156;
pub const TLS_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 157;
pub const TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 158;
pub const TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 159;
pub const TLS_DH_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 160;
pub const TLS_DH_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 161;
pub const TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 162;
pub const TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 163;
pub const TLS_DH_DSS_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 164;
pub const TLS_DH_DSS_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 165;
pub const TLS_DH_anon_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 166;
pub const TLS_DH_anon_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 167;
pub const TLS_PSK_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 168;
pub const TLS_PSK_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 169;
pub const TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 170;
pub const TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 171;
pub const TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 172;
pub const TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 173;
pub const TLS_PSK_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 174;
pub const TLS_PSK_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 175;
pub const TLS_PSK_WITH_NULL_SHA256: _bindgen_ty_218 = 176;
pub const TLS_PSK_WITH_NULL_SHA384: _bindgen_ty_218 = 177;
pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 178;
pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 179;
pub const TLS_DHE_PSK_WITH_NULL_SHA256: _bindgen_ty_218 = 180;
pub const TLS_DHE_PSK_WITH_NULL_SHA384: _bindgen_ty_218 = 181;
pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 182;
pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 183;
pub const TLS_RSA_PSK_WITH_NULL_SHA256: _bindgen_ty_218 = 184;
pub const TLS_RSA_PSK_WITH_NULL_SHA384: _bindgen_ty_218 = 185;
pub const TLS_AES_128_GCM_SHA256: _bindgen_ty_218 = 4865;
pub const TLS_AES_256_GCM_SHA384: _bindgen_ty_218 = 4866;
pub const TLS_CHACHA20_POLY1305_SHA256: _bindgen_ty_218 = 4867;
pub const TLS_AES_128_CCM_SHA256: _bindgen_ty_218 = 4868;
pub const TLS_AES_128_CCM_8_SHA256: _bindgen_ty_218 = 4869;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 49187;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 49188;
pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 49189;
pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 49190;
pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 49191;
pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 49192;
pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: _bindgen_ty_218 = 49193;
pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: _bindgen_ty_218 = 49194;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 49195;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 49196;
pub const TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 49197;
pub const TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 49198;
pub const TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 49199;
pub const TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 49200;
pub const TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: _bindgen_ty_218 = 49201;
pub const TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: _bindgen_ty_218 = 49202;
pub const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: _bindgen_ty_218 = 52392;
pub const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: _bindgen_ty_218 = 52393;
pub const TLS_EMPTY_RENEGOTIATION_INFO_SCSV: _bindgen_ty_218 = 255;
pub const SSL_RSA_WITH_RC2_CBC_MD5: _bindgen_ty_218 = 65408;
pub const SSL_RSA_WITH_IDEA_CBC_MD5: _bindgen_ty_218 = 65409;
pub const SSL_RSA_WITH_DES_CBC_MD5: _bindgen_ty_218 = 65410;
pub const SSL_RSA_WITH_3DES_EDE_CBC_MD5: _bindgen_ty_218 = 65411;
pub const SSL_NO_SUCH_CIPHERSUITE: _bindgen_ty_218 = 65535;
pub type _bindgen_ty_218 = SSLCipherSuite;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupDefault: SSLCiphersuiteGroup = 0;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupCompatibility: SSLCiphersuiteGroup = 1;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupLegacy: SSLCiphersuiteGroup = 2;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupATS: SSLCiphersuiteGroup = 3;
pub const SSLCiphersuiteGroup_kSSLCiphersuiteGroupATSCompatibility: SSLCiphersuiteGroup = 4;
pub type SSLCiphersuiteGroup = ::std::os::raw::c_int;
pub trait POS_sec_trust: Sized + std::ops::Deref {}
pub type sec_trust_t = NSObject;
pub trait POS_sec_identity: Sized + std::ops::Deref {}
pub type sec_identity_t = NSObject;
pub trait POS_sec_certificate: Sized + std::ops::Deref {}
pub type sec_certificate_t = NSObject;
pub const tls_protocol_version_t_tls_protocol_version_TLSv10: tls_protocol_version_t = 769;
pub const tls_protocol_version_t_tls_protocol_version_TLSv11: tls_protocol_version_t = 770;
pub const tls_protocol_version_t_tls_protocol_version_TLSv12: tls_protocol_version_t = 771;
pub const tls_protocol_version_t_tls_protocol_version_TLSv13: tls_protocol_version_t = 772;
pub const tls_protocol_version_t_tls_protocol_version_DTLSv10: tls_protocol_version_t = 65279;
pub const tls_protocol_version_t_tls_protocol_version_DTLSv12: tls_protocol_version_t = 65277;
pub type tls_protocol_version_t = u16;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA: tls_ciphersuite_t = 10;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA: tls_ciphersuite_t = 47;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA: tls_ciphersuite_t = 53;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256: tls_ciphersuite_t = 156;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384: tls_ciphersuite_t = 157;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256: tls_ciphersuite_t = 60;
pub const tls_ciphersuite_t_tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256: tls_ciphersuite_t = 61;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: tls_ciphersuite_t =
    49160;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: tls_ciphersuite_t =
    49161;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: tls_ciphersuite_t =
    49162;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: tls_ciphersuite_t =
    49170;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA: tls_ciphersuite_t =
    49171;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA: tls_ciphersuite_t =
    49172;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: tls_ciphersuite_t =
    49187;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: tls_ciphersuite_t =
    49188;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256: tls_ciphersuite_t =
    49191;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384: tls_ciphersuite_t =
    49192;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: tls_ciphersuite_t =
    49195;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: tls_ciphersuite_t =
    49196;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256: tls_ciphersuite_t =
    49199;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384: tls_ciphersuite_t =
    49200;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    tls_ciphersuite_t = 52392;
pub const tls_ciphersuite_t_tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    tls_ciphersuite_t = 52393;
pub const tls_ciphersuite_t_tls_ciphersuite_AES_128_GCM_SHA256: tls_ciphersuite_t = 4865;
pub const tls_ciphersuite_t_tls_ciphersuite_AES_256_GCM_SHA384: tls_ciphersuite_t = 4866;
pub const tls_ciphersuite_t_tls_ciphersuite_CHACHA20_POLY1305_SHA256: tls_ciphersuite_t = 4867;
pub type tls_ciphersuite_t = u16;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_default: tls_ciphersuite_group_t = 0;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_compatibility: tls_ciphersuite_group_t = 1;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_legacy: tls_ciphersuite_group_t = 2;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_ats: tls_ciphersuite_group_t = 3;
pub const tls_ciphersuite_group_t_tls_ciphersuite_group_ats_compatibility: tls_ciphersuite_group_t =
    4;
pub type tls_ciphersuite_group_t = u16;
pub const SSLProtocol_kSSLProtocolUnknown: SSLProtocol = 0;
pub const SSLProtocol_kTLSProtocol1: SSLProtocol = 4;
pub const SSLProtocol_kTLSProtocol11: SSLProtocol = 7;
pub const SSLProtocol_kTLSProtocol12: SSLProtocol = 8;
pub const SSLProtocol_kDTLSProtocol1: SSLProtocol = 9;
pub const SSLProtocol_kTLSProtocol13: SSLProtocol = 10;
pub const SSLProtocol_kDTLSProtocol12: SSLProtocol = 11;
pub const SSLProtocol_kTLSProtocolMaxSupported: SSLProtocol = 999;
pub const SSLProtocol_kSSLProtocol2: SSLProtocol = 1;
pub const SSLProtocol_kSSLProtocol3: SSLProtocol = 2;
pub const SSLProtocol_kSSLProtocol3Only: SSLProtocol = 3;
pub const SSLProtocol_kTLSProtocol1Only: SSLProtocol = 5;
pub const SSLProtocol_kSSLProtocolAll: SSLProtocol = 6;
pub type SSLProtocol = ::std::os::raw::c_int;
extern "C" {
    pub fn sec_trust_create(trust: SecTrustRef) -> sec_trust_t;
}
extern "C" {
    pub fn sec_trust_copy_ref(trust: NSObject) -> SecTrustRef;
}
extern "C" {
    pub fn sec_identity_create(identity: SecIdentityRef) -> sec_identity_t;
}
extern "C" {
    pub fn sec_identity_create_with_certificates(
        identity: SecIdentityRef,
        certificates: CFArrayRef,
    ) -> sec_identity_t;
}
extern "C" {
    pub fn sec_identity_access_certificates(
        identity: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_identity_copy_ref(identity: NSObject) -> SecIdentityRef;
}
extern "C" {
    pub fn sec_identity_copy_certificates_ref(identity: NSObject) -> CFArrayRef;
}
extern "C" {
    pub fn sec_certificate_create(certificate: SecCertificateRef) -> sec_certificate_t;
}
extern "C" {
    pub fn sec_certificate_copy_ref(certificate: NSObject) -> SecCertificateRef;
}
pub trait POS_sec_protocol_metadata: Sized + std::ops::Deref {}
pub type sec_protocol_metadata_t = NSObject;
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_protocol(
        metadata: NSObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sec_protocol_metadata_copy_peer_public_key(metadata: NSObject) -> dispatch_data_t;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_tls_protocol_version(
        metadata: NSObject,
    ) -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_protocol_version(metadata: NSObject)
        -> SSLProtocol;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(
        metadata: NSObject,
    ) -> tls_ciphersuite_t;
}
extern "C" {
    pub fn sec_protocol_metadata_get_negotiated_ciphersuite(metadata: NSObject) -> SSLCipherSuite;
}
extern "C" {
    pub fn sec_protocol_metadata_get_early_data_accepted(metadata: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_peer_certificate_chain(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_ocsp_response(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_supported_signature_algorithms(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_distinguished_names(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_access_pre_shared_keys(
        metadata: NSObject,
        handler: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_get_server_name(
        metadata: NSObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sec_protocol_metadata_peers_are_equal(metadataA: NSObject, metadataB: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_challenge_parameters_are_equal(
        metadataA: NSObject,
        metadataB: NSObject,
    ) -> bool;
}
extern "C" {
    pub fn sec_protocol_metadata_create_secret(
        metadata: NSObject,
        label_len: usize,
        label: *const ::std::os::raw::c_char,
        exporter_length: usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn sec_protocol_metadata_create_secret_with_context(
        metadata: NSObject,
        label_len: usize,
        label: *const ::std::os::raw::c_char,
        context_len: usize,
        context: *const u8,
        exporter_length: usize,
    ) -> dispatch_data_t;
}
pub trait POS_sec_protocol_options: Sized + std::ops::Deref {}
pub type sec_protocol_options_t = NSObject;
extern "C" {
    pub fn sec_protocol_options_are_equal(optionsA: NSObject, optionsB: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_options_set_local_identity(options: NSObject, identity: NSObject);
}
extern "C" {
    pub fn sec_protocol_options_append_tls_ciphersuite(
        options: NSObject,
        ciphersuite: tls_ciphersuite_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_add_tls_ciphersuite(options: NSObject, ciphersuite: SSLCipherSuite);
}
extern "C" {
    pub fn sec_protocol_options_append_tls_ciphersuite_group(
        options: NSObject,
        group: tls_ciphersuite_group_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_add_tls_ciphersuite_group(
        options: NSObject,
        group: SSLCiphersuiteGroup,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_min_version(options: NSObject, version: SSLProtocol);
}
extern "C" {
    pub fn sec_protocol_options_set_min_tls_protocol_version(
        options: NSObject,
        version: tls_protocol_version_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_get_default_min_tls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_get_default_min_dtls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_set_tls_max_version(options: NSObject, version: SSLProtocol);
}
extern "C" {
    pub fn sec_protocol_options_set_max_tls_protocol_version(
        options: NSObject,
        version: tls_protocol_version_t,
    );
}
extern "C" {
    pub fn sec_protocol_options_get_default_max_tls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_get_default_max_dtls_protocol_version() -> tls_protocol_version_t;
}
extern "C" {
    pub fn sec_protocol_options_get_enable_encrypted_client_hello(options: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_options_get_quic_use_legacy_codepoint(options: NSObject) -> bool;
}
extern "C" {
    pub fn sec_protocol_options_add_tls_application_protocol(
        options: NSObject,
        application_protocol: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_server_name(
        options: NSObject,
        server_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_diffie_hellman_parameters(
        options: NSObject,
        params: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_add_pre_shared_key(
        options: NSObject,
        psk: NSObject,
        psk_identity: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_pre_shared_key_identity_hint(
        options: NSObject,
        psk_identity_hint: NSObject,
    );
}
pub type sec_protocol_pre_shared_key_selection_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_pre_shared_key_selection_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn sec_protocol_options_set_pre_shared_key_selection_block(
        options: NSObject,
        psk_selection_block: sec_protocol_pre_shared_key_selection_t,
        psk_selection_queue: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_tickets_enabled(options: NSObject, tickets_enabled: bool);
}
extern "C" {
    pub fn sec_protocol_options_set_tls_is_fallback_attempt(
        options: NSObject,
        is_fallback_attempt: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_resumption_enabled(
        options: NSObject,
        resumption_enabled: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_false_start_enabled(
        options: NSObject,
        false_start_enabled: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_tls_ocsp_enabled(options: NSObject, ocsp_enabled: bool);
}
extern "C" {
    pub fn sec_protocol_options_set_tls_sct_enabled(options: NSObject, sct_enabled: bool);
}
extern "C" {
    pub fn sec_protocol_options_set_tls_renegotiation_enabled(
        options: NSObject,
        renegotiation_enabled: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_peer_authentication_required(
        options: NSObject,
        peer_authentication_required: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_peer_authentication_optional(
        options: NSObject,
        peer_authentication_optional: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_enable_encrypted_client_hello(
        options: NSObject,
        enable_encrypted_client_hello: bool,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_quic_use_legacy_codepoint(
        options: NSObject,
        quic_use_legacy_codepoint: bool,
    );
}
pub type sec_protocol_key_update_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_key_update_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_challenge_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_challenge_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_verify_complete_t = *mut ::std::os::raw::c_void;
pub type sec_protocol_verify_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn sec_protocol_options_set_key_update_block(
        options: NSObject,
        key_update_block: sec_protocol_key_update_t,
        key_update_queue: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_challenge_block(
        options: NSObject,
        challenge_block: sec_protocol_challenge_t,
        challenge_queue: NSObject,
    );
}
extern "C" {
    pub fn sec_protocol_options_set_verify_block(
        options: NSObject,
        verify_block: sec_protocol_verify_t,
        verify_block_queue: NSObject,
    );
}
pub const errAuthorizationSuccess: _bindgen_ty_219 = 0;
pub const errAuthorizationInvalidSet: _bindgen_ty_219 = -60001;
pub const errAuthorizationInvalidRef: _bindgen_ty_219 = -60002;
pub const errAuthorizationInvalidTag: _bindgen_ty_219 = -60003;
pub const errAuthorizationInvalidPointer: _bindgen_ty_219 = -60004;
pub const errAuthorizationDenied: _bindgen_ty_219 = -60005;
pub const errAuthorizationCanceled: _bindgen_ty_219 = -60006;
pub const errAuthorizationInteractionNotAllowed: _bindgen_ty_219 = -60007;
pub const errAuthorizationInternal: _bindgen_ty_219 = -60008;
pub const errAuthorizationExternalizeNotAllowed: _bindgen_ty_219 = -60009;
pub const errAuthorizationInternalizeNotAllowed: _bindgen_ty_219 = -60010;
pub const errAuthorizationInvalidFlags: _bindgen_ty_219 = -60011;
pub const errAuthorizationToolExecuteFailure: _bindgen_ty_219 = -60031;
pub const errAuthorizationToolEnvironmentError: _bindgen_ty_219 = -60032;
pub const errAuthorizationBadAddress: _bindgen_ty_219 = -60033;
pub type _bindgen_ty_219 = OSStatus;
pub const AuthorizationFlags_kAuthorizationFlagDefaults: AuthorizationFlags = 0;
pub const AuthorizationFlags_kAuthorizationFlagInteractionAllowed: AuthorizationFlags = 1;
pub const AuthorizationFlags_kAuthorizationFlagExtendRights: AuthorizationFlags = 2;
pub const AuthorizationFlags_kAuthorizationFlagPartialRights: AuthorizationFlags = 4;
pub const AuthorizationFlags_kAuthorizationFlagDestroyRights: AuthorizationFlags = 8;
pub const AuthorizationFlags_kAuthorizationFlagPreAuthorize: AuthorizationFlags = 16;
pub const AuthorizationFlags_kAuthorizationFlagNoData: AuthorizationFlags = 1048576;
pub type AuthorizationFlags = UInt32;
pub const kAuthorizationFlagCanNotPreAuthorize: _bindgen_ty_220 = 1;
pub type _bindgen_ty_220 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationOpaqueRef {
    _unused: [u8; 0],
}
pub type AuthorizationRef = *const AuthorizationOpaqueRef;
pub type AuthorizationString = *const ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationItem {
    pub name: AuthorizationString,
    pub valueLength: usize,
    pub value: *mut ::std::os::raw::c_void,
    pub flags: UInt32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationItemSet {
    pub count: UInt32,
    pub items: *mut AuthorizationItem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationExternalForm {
    pub bytes: [::std::os::raw::c_char; 32usize],
}
pub type AuthorizationRights = AuthorizationItemSet;
pub type AuthorizationEnvironment = AuthorizationItemSet;
extern "C" {
    pub fn AuthorizationCreate(
        rights: *const AuthorizationRights,
        environment: *const AuthorizationEnvironment,
        flags: AuthorizationFlags,
        authorization: *mut AuthorizationRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationFree(
        authorization: AuthorizationRef,
        flags: AuthorizationFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationCopyRights(
        authorization: AuthorizationRef,
        rights: *const AuthorizationRights,
        environment: *const AuthorizationEnvironment,
        flags: AuthorizationFlags,
        authorizedRights: *mut *mut AuthorizationRights,
    ) -> OSStatus;
}
pub type AuthorizationAsyncCallback = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn AuthorizationCopyRightsAsync(
        authorization: AuthorizationRef,
        rights: *const AuthorizationRights,
        environment: *const AuthorizationEnvironment,
        flags: AuthorizationFlags,
        callbackBlock: AuthorizationAsyncCallback,
    );
}
extern "C" {
    pub fn AuthorizationCopyInfo(
        authorization: AuthorizationRef,
        tag: AuthorizationString,
        info: *mut *mut AuthorizationItemSet,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationMakeExternalForm(
        authorization: AuthorizationRef,
        extForm: *mut AuthorizationExternalForm,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationCreateFromExternalForm(
        extForm: *const AuthorizationExternalForm,
        authorization: *mut AuthorizationRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationFreeItemSet(set: *mut AuthorizationItemSet) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationExecuteWithPrivileges(
        authorization: AuthorizationRef,
        pathToTool: *const ::std::os::raw::c_char,
        options: AuthorizationFlags,
        arguments: *const *mut ::std::os::raw::c_char,
        communicationsPipe: *mut *mut FILE,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationCopyPrivilegedReference(
        authorization: *mut AuthorizationRef,
        flags: AuthorizationFlags,
    ) -> OSStatus;
}
pub type SecuritySessionId = UInt32;
pub const noSecuritySession: _bindgen_ty_221 = 0;
pub const callerSecuritySession: _bindgen_ty_221 = 4294967295;
pub type _bindgen_ty_221 = SecuritySessionId;
pub const SessionAttributeBits_sessionIsRoot: SessionAttributeBits = 1;
pub const SessionAttributeBits_sessionHasGraphicAccess: SessionAttributeBits = 16;
pub const SessionAttributeBits_sessionHasTTY: SessionAttributeBits = 32;
pub const SessionAttributeBits_sessionIsRemote: SessionAttributeBits = 4096;
pub type SessionAttributeBits = UInt32;
pub const SessionCreationFlags_sessionKeepCurrentBootstrap: SessionCreationFlags = 32768;
pub type SessionCreationFlags = UInt32;
pub const errSessionSuccess: _bindgen_ty_222 = 0;
pub const errSessionInvalidId: _bindgen_ty_222 = -60500;
pub const errSessionInvalidAttributes: _bindgen_ty_222 = -60501;
pub const errSessionAuthorizationDenied: _bindgen_ty_222 = -60502;
pub const errSessionValueNotSet: _bindgen_ty_222 = -60503;
pub const errSessionInternal: _bindgen_ty_222 = -60008;
pub const errSessionInvalidFlags: _bindgen_ty_222 = -60011;
pub type _bindgen_ty_222 = OSStatus;
extern "C" {
    pub fn SessionGetInfo(
        session: SecuritySessionId,
        sessionId: *mut SecuritySessionId,
        attributes: *mut SessionAttributeBits,
    ) -> OSStatus;
}
extern "C" {
    pub fn SessionCreate(flags: SessionCreationFlags, attributes: SessionAttributeBits)
        -> OSStatus;
}
pub type CSSM_MANAGER_EVENT_TYPES = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_manager_event_notification {
    pub DestinationModuleManagerType: CSSM_SERVICE_MASK,
    pub SourceModuleManagerType: CSSM_SERVICE_MASK,
    pub Event: CSSM_MANAGER_EVENT_TYPES,
    pub EventId: uint32,
    pub EventData: SecAsn1Item,
}
pub type CSSM_MANAGER_EVENT_NOTIFICATION = cssm_manager_event_notification;
pub type CSSM_MANAGER_EVENT_NOTIFICATION_PTR = *mut cssm_manager_event_notification;
extern "C" {
    pub fn CSSM_Init(
        Version: *const CSSM_VERSION,
        Scope: CSSM_PRIVILEGE_SCOPE,
        CallerGuid: *const CSSM_GUID,
        KeyHierarchy: CSSM_KEY_HIERARCHY,
        PvcPolicy: *mut CSSM_PVC_MODE,
        Reserved: *const ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_Terminate() -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ModuleLoad(
        ModuleGuid: *const CSSM_GUID,
        KeyHierarchy: CSSM_KEY_HIERARCHY,
        AppNotifyCallback: CSSM_API_ModuleEventHandler,
        AppNotifyCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ModuleUnload(
        ModuleGuid: *const CSSM_GUID,
        AppNotifyCallback: CSSM_API_ModuleEventHandler,
        AppNotifyCallbackCtx: *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_Introduce(
        ModuleID: *const CSSM_GUID,
        KeyHierarchy: CSSM_KEY_HIERARCHY,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_Unintroduce(ModuleID: *const CSSM_GUID) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ModuleAttach(
        ModuleGuid: *const CSSM_GUID,
        Version: *const CSSM_VERSION,
        MemoryFuncs: *const CSSM_API_MEMORY_FUNCS,
        SubserviceID: uint32,
        SubServiceType: CSSM_SERVICE_TYPE,
        AttachFlags: CSSM_ATTACH_FLAGS,
        KeyHierarchy: CSSM_KEY_HIERARCHY,
        FunctionTable: *mut CSSM_FUNC_NAME_ADDR,
        NumFunctionTable: uint32,
        Reserved: *const ::std::os::raw::c_void,
        NewModuleHandle: CSSM_MODULE_HANDLE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ModuleDetach(ModuleHandle: CSSM_MODULE_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_SetPrivilege(Privilege: CSSM_PRIVILEGE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetPrivilege(Privilege: *mut CSSM_PRIVILEGE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetModuleGUIDFromHandle(
        ModuleHandle: CSSM_MODULE_HANDLE,
        ModuleGUID: CSSM_GUID_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetSubserviceUIDFromHandle(
        ModuleHandle: CSSM_MODULE_HANDLE,
        SubserviceUID: CSSM_SUBSERVICE_UID_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ListAttachedModuleManagers(
        NumberOfModuleManagers: *mut uint32,
        ModuleManagerGuids: CSSM_GUID_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetAPIMemoryFunctions(
        AddInHandle: CSSM_MODULE_HANDLE,
        AppMemoryFuncs: CSSM_API_MEMORY_FUNCS_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateSignatureContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        Key: *const CSSM_KEY,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateSymmetricContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        Mode: CSSM_ENCRYPT_MODE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        Key: *const CSSM_KEY,
        InitVector: *const SecAsn1Item,
        Padding: CSSM_PADDING,
        Reserved: *mut ::std::os::raw::c_void,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateDigestContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateMacContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        Key: *const CSSM_KEY,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateRandomGenContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        Seed: *const CSSM_CRYPTO_DATA,
        Length: CSSM_SIZE,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateAsymmetricContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        Key: *const CSSM_KEY,
        Padding: CSSM_PADDING,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateDeriveKeyContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        DeriveKeyType: CSSM_KEY_TYPE,
        DeriveKeyLengthInBits: uint32,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        BaseKey: *const CSSM_KEY,
        IterationCount: uint32,
        Salt: *const SecAsn1Item,
        Seed: *const CSSM_CRYPTO_DATA,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreateKeyGenContext(
        CSPHandle: CSSM_CSP_HANDLE,
        AlgorithmID: CSSM_ALGORITHMS,
        KeySizeInBits: uint32,
        Seed: *const CSSM_CRYPTO_DATA,
        Salt: *const SecAsn1Item,
        StartDate: *const CSSM_DATE,
        EndDate: *const CSSM_DATE,
        Params: *const SecAsn1Item,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_CreatePassThroughContext(
        CSPHandle: CSSM_CSP_HANDLE,
        Key: *const CSSM_KEY,
        NewContextHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetContext(CCHandle: CSSM_CC_HANDLE, Context: *mut CSSM_CONTEXT_PTR)
        -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_FreeContext(Context: CSSM_CONTEXT_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_SetContext(CCHandle: CSSM_CC_HANDLE, Context: *const CSSM_CONTEXT) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DeleteContext(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetContextAttribute(
        Context: *const CSSM_CONTEXT,
        AttributeType: uint32,
        ContextAttribute: *mut CSSM_CONTEXT_ATTRIBUTE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_UpdateContextAttributes(
        CCHandle: CSSM_CC_HANDLE,
        NumberOfAttributes: uint32,
        ContextAttributes: *const CSSM_CONTEXT_ATTRIBUTE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DeleteContextAttributes(
        CCHandle: CSSM_CC_HANDLE,
        NumberOfAttributes: uint32,
        ContextAttributes: *const CSSM_CONTEXT_ATTRIBUTE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_Login(
        CSPHandle: CSSM_CSP_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        LoginName: *const SecAsn1Item,
        Reserved: *const ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_Logout(CSPHandle: CSSM_CSP_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_GetLoginAcl(
        CSPHandle: CSSM_CSP_HANDLE,
        SelectionTag: *const CSSM_STRING,
        NumberOfAclInfos: *mut uint32,
        AclInfos: *mut CSSM_ACL_ENTRY_INFO_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_ChangeLoginAcl(
        CSPHandle: CSSM_CSP_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        AclEdit: *const CSSM_ACL_EDIT,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetKeyAcl(
        CSPHandle: CSSM_CSP_HANDLE,
        Key: *const CSSM_KEY,
        SelectionTag: *const CSSM_STRING,
        NumberOfAclInfos: *mut uint32,
        AclInfos: *mut CSSM_ACL_ENTRY_INFO_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ChangeKeyAcl(
        CSPHandle: CSSM_CSP_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        AclEdit: *const CSSM_ACL_EDIT,
        Key: *const CSSM_KEY,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetKeyOwner(
        CSPHandle: CSSM_CSP_HANDLE,
        Key: *const CSSM_KEY,
        Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_ChangeKeyOwner(
        CSPHandle: CSSM_CSP_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        Key: *const CSSM_KEY,
        NewOwner: *const CSSM_ACL_OWNER_PROTOTYPE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_GetLoginOwner(
        CSPHandle: CSSM_CSP_HANDLE,
        Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_ChangeLoginOwner(
        CSPHandle: CSSM_CSP_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        NewOwner: *const CSSM_ACL_OWNER_PROTOTYPE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_SignData(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
        DigestAlgorithm: CSSM_ALGORITHMS,
        Signature: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_SignDataInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_SignDataUpdate(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_SignDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: CSSM_DATA_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyData(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
        DigestAlgorithm: CSSM_ALGORITHMS,
        Signature: *const SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyDataInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyDataUpdate(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyDataFinal(
        CCHandle: CSSM_CC_HANDLE,
        Signature: *const SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DigestData(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
        Digest: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DigestDataInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DigestDataUpdate(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DigestDataClone(
        CCHandle: CSSM_CC_HANDLE,
        ClonednewCCHandle: *mut CSSM_CC_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DigestDataFinal(CCHandle: CSSM_CC_HANDLE, Digest: CSSM_DATA_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateMac(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
        Mac: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateMacInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateMacUpdate(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: CSSM_DATA_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyMac(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
        Mac: *const SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyMacInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyMacUpdate(
        CCHandle: CSSM_CC_HANDLE,
        DataBufs: *const SecAsn1Item,
        DataBufCount: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: *const SecAsn1Item) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_QuerySize(
        CCHandle: CSSM_CC_HANDLE,
        Encrypt: CSSM_BOOL,
        QuerySizeCount: uint32,
        DataBlockSizes: CSSM_QUERY_SIZE_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_EncryptData(
        CCHandle: CSSM_CC_HANDLE,
        ClearBufs: *const SecAsn1Item,
        ClearBufCount: uint32,
        CipherBufs: CSSM_DATA_PTR,
        CipherBufCount: uint32,
        bytesEncrypted: *mut CSSM_SIZE,
        RemData: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_EncryptDataP(
        CCHandle: CSSM_CC_HANDLE,
        ClearBufs: *const SecAsn1Item,
        ClearBufCount: uint32,
        CipherBufs: CSSM_DATA_PTR,
        CipherBufCount: uint32,
        bytesEncrypted: *mut CSSM_SIZE,
        RemData: CSSM_DATA_PTR,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_EncryptDataInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_EncryptDataInitP(
        CCHandle: CSSM_CC_HANDLE,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_EncryptDataUpdate(
        CCHandle: CSSM_CC_HANDLE,
        ClearBufs: *const SecAsn1Item,
        ClearBufCount: uint32,
        CipherBufs: CSSM_DATA_PTR,
        CipherBufCount: uint32,
        bytesEncrypted: *mut CSSM_SIZE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_EncryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DecryptData(
        CCHandle: CSSM_CC_HANDLE,
        CipherBufs: *const SecAsn1Item,
        CipherBufCount: uint32,
        ClearBufs: CSSM_DATA_PTR,
        ClearBufCount: uint32,
        bytesDecrypted: *mut CSSM_SIZE,
        RemData: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DecryptDataP(
        CCHandle: CSSM_CC_HANDLE,
        CipherBufs: *const SecAsn1Item,
        CipherBufCount: uint32,
        ClearBufs: CSSM_DATA_PTR,
        ClearBufCount: uint32,
        bytesDecrypted: *mut CSSM_SIZE,
        RemData: CSSM_DATA_PTR,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DecryptDataInit(CCHandle: CSSM_CC_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DecryptDataInitP(
        CCHandle: CSSM_CC_HANDLE,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DecryptDataUpdate(
        CCHandle: CSSM_CC_HANDLE,
        CipherBufs: *const SecAsn1Item,
        CipherBufCount: uint32,
        ClearBufs: CSSM_DATA_PTR,
        ClearBufCount: uint32,
        bytesDecrypted: *mut CSSM_SIZE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DecryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_QueryKeySizeInBits(
        CSPHandle: CSSM_CSP_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        Key: *const CSSM_KEY,
        KeySize: CSSM_KEY_SIZE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateKey(
        CCHandle: CSSM_CC_HANDLE,
        KeyUsage: uint32,
        KeyAttr: uint32,
        KeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        Key: CSSM_KEY_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateKeyP(
        CCHandle: CSSM_CC_HANDLE,
        KeyUsage: uint32,
        KeyAttr: uint32,
        KeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        Key: CSSM_KEY_PTR,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateKeyPair(
        CCHandle: CSSM_CC_HANDLE,
        PublicKeyUsage: uint32,
        PublicKeyAttr: uint32,
        PublicKeyLabel: *const SecAsn1Item,
        PublicKey: CSSM_KEY_PTR,
        PrivateKeyUsage: uint32,
        PrivateKeyAttr: uint32,
        PrivateKeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        PrivateKey: CSSM_KEY_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateKeyPairP(
        CCHandle: CSSM_CC_HANDLE,
        PublicKeyUsage: uint32,
        PublicKeyAttr: uint32,
        PublicKeyLabel: *const SecAsn1Item,
        PublicKey: CSSM_KEY_PTR,
        PrivateKeyUsage: uint32,
        PrivateKeyAttr: uint32,
        PrivateKeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        PrivateKey: CSSM_KEY_PTR,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateRandom(
        CCHandle: CSSM_CC_HANDLE,
        RandomNumber: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_ObtainPrivateKeyFromPublicKey(
        CSPHandle: CSSM_CSP_HANDLE,
        PublicKey: *const CSSM_KEY,
        PrivateKey: CSSM_KEY_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_WrapKey(
        CCHandle: CSSM_CC_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        Key: *const CSSM_KEY,
        DescriptiveData: *const SecAsn1Item,
        WrappedKey: CSSM_WRAP_KEY_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_UnwrapKey(
        CCHandle: CSSM_CC_HANDLE,
        PublicKey: *const CSSM_KEY,
        WrappedKey: *const CSSM_WRAP_KEY,
        KeyUsage: uint32,
        KeyAttr: uint32,
        KeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        UnwrappedKey: CSSM_KEY_PTR,
        DescriptiveData: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_WrapKeyP(
        CCHandle: CSSM_CC_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        Key: *const CSSM_KEY,
        DescriptiveData: *const SecAsn1Item,
        WrappedKey: CSSM_WRAP_KEY_PTR,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_UnwrapKeyP(
        CCHandle: CSSM_CC_HANDLE,
        PublicKey: *const CSSM_KEY,
        WrappedKey: *const CSSM_WRAP_KEY,
        KeyUsage: uint32,
        KeyAttr: uint32,
        KeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        UnwrappedKey: CSSM_KEY_PTR,
        DescriptiveData: CSSM_DATA_PTR,
        Privilege: CSSM_PRIVILEGE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DeriveKey(
        CCHandle: CSSM_CC_HANDLE,
        Param: CSSM_DATA_PTR,
        KeyUsage: uint32,
        KeyAttr: uint32,
        KeyLabel: *const SecAsn1Item,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        DerivedKey: CSSM_KEY_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_FreeKey(
        CSPHandle: CSSM_CSP_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        KeyPtr: CSSM_KEY_PTR,
        Delete: CSSM_BOOL,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GenerateAlgorithmParams(
        CCHandle: CSSM_CC_HANDLE,
        ParamBits: uint32,
        Param: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_GetOperationalStatistics(
        CSPHandle: CSSM_CSP_HANDLE,
        Statistics: *mut CSSM_CSP_OPERATIONAL_STATISTICS,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_GetTimeValue(
        CSPHandle: CSSM_CSP_HANDLE,
        TimeAlgorithm: CSSM_ALGORITHMS,
        TimeData: *mut SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_RetrieveUniqueId(
        CSPHandle: CSSM_CSP_HANDLE,
        UniqueID: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_RetrieveCounter(CSPHandle: CSSM_CSP_HANDLE, Counter: CSSM_DATA_PTR) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_VerifyDevice(
        CSPHandle: CSSM_CSP_HANDLE,
        DeviceCert: *const SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CSP_PassThrough(
        CCHandle: CSSM_CC_HANDLE,
        PassThroughId: uint32,
        InData: *const ::std::os::raw::c_void,
        OutData: *mut *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_SubmitCredRequest(
        TPHandle: CSSM_TP_HANDLE,
        PreferredAuthority: *const CSSM_TP_AUTHORITY_ID,
        RequestType: CSSM_TP_AUTHORITY_REQUEST_TYPE,
        RequestInput: *const CSSM_TP_REQUEST_SET,
        CallerAuthContext: *const CSSM_TP_CALLERAUTH_CONTEXT,
        EstimatedTime: *mut sint32,
        ReferenceIdentifier: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_RetrieveCredResult(
        TPHandle: CSSM_TP_HANDLE,
        ReferenceIdentifier: *const SecAsn1Item,
        CallerAuthCredentials: *const CSSM_TP_CALLERAUTH_CONTEXT,
        EstimatedTime: *mut sint32,
        ConfirmationRequired: *mut CSSM_BOOL,
        RetrieveOutput: *mut CSSM_TP_RESULT_SET_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_ConfirmCredResult(
        TPHandle: CSSM_TP_HANDLE,
        ReferenceIdentifier: *const SecAsn1Item,
        CallerAuthCredentials: *const CSSM_TP_CALLERAUTH_CONTEXT,
        Responses: *const CSSM_TP_CONFIRM_RESPONSE,
        PreferredAuthority: *const CSSM_TP_AUTHORITY_ID,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_ReceiveConfirmation(
        TPHandle: CSSM_TP_HANDLE,
        ReferenceIdentifier: *const SecAsn1Item,
        Responses: *mut CSSM_TP_CONFIRM_RESPONSE_PTR,
        ElapsedTime: *mut sint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertReclaimKey(
        TPHandle: CSSM_TP_HANDLE,
        CertGroup: *const CSSM_CERTGROUP,
        CertIndex: uint32,
        KeyCacheHandle: CSSM_LONG_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertReclaimAbort(
        TPHandle: CSSM_TP_HANDLE,
        KeyCacheHandle: CSSM_LONG_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_FormRequest(
        TPHandle: CSSM_TP_HANDLE,
        PreferredAuthority: *const CSSM_TP_AUTHORITY_ID,
        FormType: CSSM_TP_FORM_TYPE,
        BlankForm: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_FormSubmit(
        TPHandle: CSSM_TP_HANDLE,
        FormType: CSSM_TP_FORM_TYPE,
        Form: *const SecAsn1Item,
        ClearanceAuthority: *const CSSM_TP_AUTHORITY_ID,
        RepresentedAuthority: *const CSSM_TP_AUTHORITY_ID,
        Credentials: CSSM_ACCESS_CREDENTIALS_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertGroupVerify(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        CertGroupToBeVerified: *const CSSM_CERTGROUP,
        VerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        VerifyContextResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertCreateTemplate(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: uint32,
        CertFields: *const CSSM_FIELD,
        CertTemplate: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertGetAllTemplateFields(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CertTemplate: *const SecAsn1Item,
        NumberOfFields: *mut uint32,
        CertFields: *mut CSSM_FIELD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertSign(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CertTemplateToBeSigned: *const SecAsn1Item,
        SignerCertGroup: *const CSSM_CERTGROUP,
        SignerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        SignedCert: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CrlVerify(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        CrlToBeVerified: *const CSSM_ENCODED_CRL,
        SignerCertGroup: *const CSSM_CERTGROUP,
        VerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CrlCreateTemplate(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: uint32,
        CrlFields: *const CSSM_FIELD,
        NewCrlTemplate: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertRevoke(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        OldCrlTemplate: *const SecAsn1Item,
        CertGroupToBeRevoked: *const CSSM_CERTGROUP,
        RevokerCertGroup: *const CSSM_CERTGROUP,
        RevokerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        Reason: CSSM_TP_CERTCHANGE_REASON,
        NewCrlTemplate: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertRemoveFromCrlTemplate(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        OldCrlTemplate: *const SecAsn1Item,
        CertGroupToBeRemoved: *const CSSM_CERTGROUP,
        RevokerCertGroup: *const CSSM_CERTGROUP,
        RevokerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        NewCrlTemplate: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CrlSign(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CrlToBeSigned: *const CSSM_ENCODED_CRL,
        SignerCertGroup: *const CSSM_CERTGROUP,
        SignerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        SignedCrl: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_ApplyCrlToDb(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        CrlToBeApplied: *const CSSM_ENCODED_CRL,
        SignerCertGroup: *const CSSM_CERTGROUP,
        ApplyCrlVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
        ApplyCrlVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertGroupConstruct(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CSPHandle: CSSM_CSP_HANDLE,
        DBList: *const CSSM_DL_DB_LIST,
        ConstructParams: *const ::std::os::raw::c_void,
        CertGroupFrag: *const CSSM_CERTGROUP,
        CertGroup: *mut CSSM_CERTGROUP_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertGroupPrune(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        DBList: *const CSSM_DL_DB_LIST,
        OrderedCertGroup: *const CSSM_CERTGROUP,
        PrunedCertGroup: *mut CSSM_CERTGROUP_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_CertGroupToTupleGroup(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CertGroup: *const CSSM_CERTGROUP,
        TupleGroup: *mut CSSM_TUPLEGROUP_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_TupleGroupToCertGroup(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        TupleGroup: *const CSSM_TUPLEGROUP,
        CertTemplates: *mut CSSM_CERTGROUP_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_TP_PassThrough(
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        DBList: *const CSSM_DL_DB_LIST,
        PassThroughId: uint32,
        InputParams: *const ::std::os::raw::c_void,
        OutputParams: *mut *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_AC_AuthCompute(
        ACHandle: CSSM_AC_HANDLE,
        BaseAuthorizations: *const CSSM_TUPLEGROUP,
        Credentials: *const CSSM_TUPLEGROUP,
        NumberOfRequestors: uint32,
        Requestors: *const CSSM_LIST,
        RequestedAuthorizationPeriod: *const CSSM_LIST,
        RequestedAuthorization: *const CSSM_LIST,
        AuthorizationResult: CSSM_TUPLEGROUP_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_AC_PassThrough(
        ACHandle: CSSM_AC_HANDLE,
        TPHandle: CSSM_TP_HANDLE,
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        DBList: *const CSSM_DL_DB_LIST,
        PassThroughId: uint32,
        InputParams: *const ::std::os::raw::c_void,
        OutputParams: *mut *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertCreateTemplate(
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: uint32,
        CertFields: *const CSSM_FIELD,
        CertTemplate: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetAllTemplateFields(
        CLHandle: CSSM_CL_HANDLE,
        CertTemplate: *const SecAsn1Item,
        NumberOfFields: *mut uint32,
        CertFields: *mut CSSM_FIELD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertSign(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CertTemplate: *const SecAsn1Item,
        SignScope: *const CSSM_FIELD,
        ScopeSize: uint32,
        SignedCert: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertVerify(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CertToBeVerified: *const SecAsn1Item,
        SignerCert: *const SecAsn1Item,
        VerifyScope: *const CSSM_FIELD,
        ScopeSize: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertVerifyWithKey(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CertToBeVerified: *const SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetFirstFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        CertField: *const SecAsn1Oid,
        ResultsHandle: CSSM_HANDLE_PTR,
        NumberOfMatchedFields: *mut uint32,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetNextFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        ResultsHandle: CSSM_HANDLE,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertAbortQuery(
        CLHandle: CSSM_CL_HANDLE,
        ResultsHandle: CSSM_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetKeyInfo(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        Key: *mut CSSM_KEY_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetAllFields(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        NumberOfFields: *mut uint32,
        CertFields: *mut CSSM_FIELD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_FreeFields(
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: uint32,
        Fields: *mut CSSM_FIELD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_FreeFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        CertOrCrlOid: *const SecAsn1Oid,
        Value: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertCache(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        CertHandle: CSSM_HANDLE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetFirstCachedFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        CertHandle: CSSM_HANDLE,
        CertField: *const SecAsn1Oid,
        ResultsHandle: CSSM_HANDLE_PTR,
        NumberOfMatchedFields: *mut uint32,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGetNextCachedFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        ResultsHandle: CSSM_HANDLE,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertAbortCache(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE)
        -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGroupToSignedBundle(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CertGroupToBundle: *const CSSM_CERTGROUP,
        BundleInfo: *const CSSM_CERT_BUNDLE_HEADER,
        SignedBundle: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertGroupFromVerifiedBundle(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CertBundle: *const CSSM_CERT_BUNDLE,
        SignerCert: *const SecAsn1Item,
        CertGroup: *mut CSSM_CERTGROUP_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CertDescribeFormat(
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: *mut uint32,
        OidList: *mut CSSM_OID_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlCreateTemplate(
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: uint32,
        CrlTemplate: *const CSSM_FIELD,
        NewCrl: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlSetFields(
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: uint32,
        CrlTemplate: *const CSSM_FIELD,
        OldCrl: *const SecAsn1Item,
        ModifiedCrl: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlAddCert(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        Cert: *const SecAsn1Item,
        NumberOfFields: uint32,
        CrlEntryFields: *const CSSM_FIELD,
        OldCrl: *const SecAsn1Item,
        NewCrl: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlRemoveCert(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        OldCrl: *const SecAsn1Item,
        NewCrl: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlSign(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        UnsignedCrl: *const SecAsn1Item,
        SignScope: *const CSSM_FIELD,
        ScopeSize: uint32,
        SignedCrl: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlVerify(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CrlToBeVerified: *const SecAsn1Item,
        SignerCert: *const SecAsn1Item,
        VerifyScope: *const CSSM_FIELD,
        ScopeSize: uint32,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlVerifyWithKey(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        CrlToBeVerified: *const SecAsn1Item,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_IsCertInCrl(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        Crl: *const SecAsn1Item,
        CertFound: *mut CSSM_BOOL,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlGetFirstFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        Crl: *const SecAsn1Item,
        CrlField: *const SecAsn1Oid,
        ResultsHandle: CSSM_HANDLE_PTR,
        NumberOfMatchedFields: *mut uint32,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlGetNextFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        ResultsHandle: CSSM_HANDLE,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlAbortQuery(
        CLHandle: CSSM_CL_HANDLE,
        ResultsHandle: CSSM_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlGetAllFields(
        CLHandle: CSSM_CL_HANDLE,
        Crl: *const SecAsn1Item,
        NumberOfCrlFields: *mut uint32,
        CrlFields: *mut CSSM_FIELD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlCache(
        CLHandle: CSSM_CL_HANDLE,
        Crl: *const SecAsn1Item,
        CrlHandle: CSSM_HANDLE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_IsCertInCachedCrl(
        CLHandle: CSSM_CL_HANDLE,
        Cert: *const SecAsn1Item,
        CrlHandle: CSSM_HANDLE,
        CertFound: *mut CSSM_BOOL,
        CrlRecordIndex: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlGetFirstCachedFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        CrlHandle: CSSM_HANDLE,
        CrlRecordIndex: *const SecAsn1Item,
        CrlField: *const SecAsn1Oid,
        ResultsHandle: CSSM_HANDLE_PTR,
        NumberOfMatchedFields: *mut uint32,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlGetNextCachedFieldValue(
        CLHandle: CSSM_CL_HANDLE,
        ResultsHandle: CSSM_HANDLE,
        Value: *mut CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlGetAllCachedRecordFields(
        CLHandle: CSSM_CL_HANDLE,
        CrlHandle: CSSM_HANDLE,
        CrlRecordIndex: *const SecAsn1Item,
        NumberOfFields: *mut uint32,
        CrlFields: *mut CSSM_FIELD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlAbortCache(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_CrlDescribeFormat(
        CLHandle: CSSM_CL_HANDLE,
        NumberOfFields: *mut uint32,
        OidList: *mut CSSM_OID_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_CL_PassThrough(
        CLHandle: CSSM_CL_HANDLE,
        CCHandle: CSSM_CC_HANDLE,
        PassThroughId: uint32,
        InputParams: *const ::std::os::raw::c_void,
        OutputParams: *mut *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DbOpen(
        DLHandle: CSSM_DL_HANDLE,
        DbName: *const ::std::os::raw::c_char,
        DbLocation: *const CSSM_NET_ADDRESS,
        AccessRequest: CSSM_DB_ACCESS_TYPE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        OpenParameters: *const ::std::os::raw::c_void,
        DbHandle: *mut CSSM_DB_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DbClose(DLDBHandle: CSSM_DL_DB_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DbCreate(
        DLHandle: CSSM_DL_HANDLE,
        DbName: *const ::std::os::raw::c_char,
        DbLocation: *const CSSM_NET_ADDRESS,
        DBInfo: *const CSSM_DBINFO,
        AccessRequest: CSSM_DB_ACCESS_TYPE,
        CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        OpenParameters: *const ::std::os::raw::c_void,
        DbHandle: *mut CSSM_DB_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DbDelete(
        DLHandle: CSSM_DL_HANDLE,
        DbName: *const ::std::os::raw::c_char,
        DbLocation: *const CSSM_NET_ADDRESS,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_CreateRelation(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        RelationID: CSSM_DB_RECORDTYPE,
        RelationName: *const ::std::os::raw::c_char,
        NumberOfAttributes: uint32,
        pAttributeInfo: *const CSSM_DB_SCHEMA_ATTRIBUTE_INFO,
        NumberOfIndexes: uint32,
        pIndexInfo: *const CSSM_DB_SCHEMA_INDEX_INFO,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DestroyRelation(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        RelationID: CSSM_DB_RECORDTYPE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_Authenticate(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        AccessRequest: CSSM_DB_ACCESS_TYPE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_GetDbAcl(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        SelectionTag: *const CSSM_STRING,
        NumberOfAclInfos: *mut uint32,
        AclInfos: *mut CSSM_ACL_ENTRY_INFO_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_ChangeDbAcl(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        AclEdit: *const CSSM_ACL_EDIT,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_GetDbOwner(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_ChangeDbOwner(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        NewOwner: *const CSSM_ACL_OWNER_PROTOTYPE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_GetDbNames(
        DLHandle: CSSM_DL_HANDLE,
        NameList: *mut CSSM_NAME_LIST_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_GetDbNameFromHandle(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        DbName: *mut *mut ::std::os::raw::c_char,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_FreeNameList(
        DLHandle: CSSM_DL_HANDLE,
        NameList: CSSM_NAME_LIST_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataInsert(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        RecordType: CSSM_DB_RECORDTYPE,
        Attributes: *const CSSM_DB_RECORD_ATTRIBUTE_DATA,
        Data: *const SecAsn1Item,
        UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataDelete(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        UniqueRecordIdentifier: *const CSSM_DB_UNIQUE_RECORD,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataModify(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        RecordType: CSSM_DB_RECORDTYPE,
        UniqueRecordIdentifier: CSSM_DB_UNIQUE_RECORD_PTR,
        AttributesToBeModified: *const CSSM_DB_RECORD_ATTRIBUTE_DATA,
        DataToBeModified: *const SecAsn1Item,
        ModifyMode: CSSM_DB_MODIFY_MODE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataGetFirst(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        Query: *const CSSM_QUERY,
        ResultsHandle: CSSM_HANDLE_PTR,
        Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
        Data: CSSM_DATA_PTR,
        UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataGetNext(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        ResultsHandle: CSSM_HANDLE,
        Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
        Data: CSSM_DATA_PTR,
        UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataAbortQuery(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        ResultsHandle: CSSM_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_DataGetFromUniqueRecordId(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        UniqueRecord: *const CSSM_DB_UNIQUE_RECORD,
        Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
        Data: CSSM_DATA_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_FreeUniqueRecord(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn CSSM_DL_PassThrough(
        DLDBHandle: CSSM_DL_DB_HANDLE,
        PassThroughId: uint32,
        InputParams: *const ::std::os::raw::c_void,
        OutputParams: *mut *mut ::std::os::raw::c_void,
    ) -> CSSM_RETURN;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_spi_ac_funcs {
    pub AuthCompute: ::std::option::Option<
        unsafe extern "C" fn(
            ACHandle: CSSM_AC_HANDLE,
            BaseAuthorizations: *const CSSM_TUPLEGROUP,
            Credentials: *const CSSM_TUPLEGROUP,
            NumberOfRequestors: uint32,
            Requestors: *const CSSM_LIST,
            RequestedAuthorizationPeriod: *const CSSM_LIST,
            RequestedAuthorization: *const CSSM_LIST,
            AuthorizationResult: CSSM_TUPLEGROUP_PTR,
        ) -> CSSM_RETURN,
    >,
    pub PassThrough: ::std::option::Option<
        unsafe extern "C" fn(
            ACHandle: CSSM_AC_HANDLE,
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DBList: *const CSSM_DL_DB_LIST,
            PassThroughId: uint32,
            InputParams: *const ::std::os::raw::c_void,
            OutputParams: *mut *mut ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_SPI_AC_FUNCS = cssm_spi_ac_funcs;
pub type CSSM_SPI_AC_FUNCS_PTR = *mut cssm_spi_ac_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_spi_cl_funcs {
    pub CertCreateTemplate: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: uint32,
            CertFields: *const CSSM_FIELD,
            CertTemplate: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGetAllTemplateFields: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CertTemplate: *const SecAsn1Item,
            NumberOfFields: *mut uint32,
            CertFields: *mut CSSM_FIELD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertSign: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CertTemplate: *const SecAsn1Item,
            SignScope: *const CSSM_FIELD,
            ScopeSize: uint32,
            SignedCert: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertVerify: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CertToBeVerified: *const SecAsn1Item,
            SignerCert: *const SecAsn1Item,
            VerifyScope: *const CSSM_FIELD,
            ScopeSize: uint32,
        ) -> CSSM_RETURN,
    >,
    pub CertVerifyWithKey: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CertToBeVerified: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub CertGetFirstFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            CertField: *const SecAsn1Oid,
            ResultsHandle: CSSM_HANDLE_PTR,
            NumberOfMatchedFields: *mut uint32,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGetNextFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            ResultsHandle: CSSM_HANDLE,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertAbortQuery: ::std::option::Option<
        unsafe extern "C" fn(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) -> CSSM_RETURN,
    >,
    pub CertGetKeyInfo: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            Key: *mut CSSM_KEY_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGetAllFields: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            NumberOfFields: *mut uint32,
            CertFields: *mut CSSM_FIELD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub FreeFields: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: uint32,
            FieldArray: *mut CSSM_FIELD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub FreeFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CertOrCrlOid: *const SecAsn1Oid,
            Value: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertCache: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            CertHandle: CSSM_HANDLE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGetFirstCachedFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CertHandle: CSSM_HANDLE,
            CertField: *const SecAsn1Oid,
            ResultsHandle: CSSM_HANDLE_PTR,
            NumberOfMatchedFields: *mut uint32,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGetNextCachedFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            ResultsHandle: CSSM_HANDLE,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertAbortCache: ::std::option::Option<
        unsafe extern "C" fn(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE) -> CSSM_RETURN,
    >,
    pub CertGroupToSignedBundle: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CertGroupToBundle: *const CSSM_CERTGROUP,
            BundleInfo: *const CSSM_CERT_BUNDLE_HEADER,
            SignedBundle: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGroupFromVerifiedBundle: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CertBundle: *const CSSM_CERT_BUNDLE,
            SignerCert: *const SecAsn1Item,
            CertGroup: *mut CSSM_CERTGROUP_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertDescribeFormat: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: *mut uint32,
            OidList: *mut CSSM_OID_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlCreateTemplate: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: uint32,
            CrlTemplate: *const CSSM_FIELD,
            NewCrl: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlSetFields: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: uint32,
            CrlTemplate: *const CSSM_FIELD,
            OldCrl: *const SecAsn1Item,
            ModifiedCrl: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlAddCert: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Cert: *const SecAsn1Item,
            NumberOfFields: uint32,
            CrlEntryFields: *const CSSM_FIELD,
            OldCrl: *const SecAsn1Item,
            NewCrl: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlRemoveCert: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            OldCrl: *const SecAsn1Item,
            NewCrl: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlSign: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            UnsignedCrl: *const SecAsn1Item,
            SignScope: *const CSSM_FIELD,
            ScopeSize: uint32,
            SignedCrl: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlVerify: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CrlToBeVerified: *const SecAsn1Item,
            SignerCert: *const SecAsn1Item,
            VerifyScope: *const CSSM_FIELD,
            ScopeSize: uint32,
        ) -> CSSM_RETURN,
    >,
    pub CrlVerifyWithKey: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CrlToBeVerified: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub IsCertInCrl: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            Crl: *const SecAsn1Item,
            CertFound: *mut CSSM_BOOL,
        ) -> CSSM_RETURN,
    >,
    pub CrlGetFirstFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Crl: *const SecAsn1Item,
            CrlField: *const SecAsn1Oid,
            ResultsHandle: CSSM_HANDLE_PTR,
            NumberOfMatchedFields: *mut uint32,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlGetNextFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            ResultsHandle: CSSM_HANDLE,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlAbortQuery: ::std::option::Option<
        unsafe extern "C" fn(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) -> CSSM_RETURN,
    >,
    pub CrlGetAllFields: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Crl: *const SecAsn1Item,
            NumberOfCrlFields: *mut uint32,
            CrlFields: *mut CSSM_FIELD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlCache: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Crl: *const SecAsn1Item,
            CrlHandle: CSSM_HANDLE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub IsCertInCachedCrl: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            Cert: *const SecAsn1Item,
            CrlHandle: CSSM_HANDLE,
            CertFound: *mut CSSM_BOOL,
            CrlRecordIndex: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlGetFirstCachedFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CrlHandle: CSSM_HANDLE,
            CrlRecordIndex: *const SecAsn1Item,
            CrlField: *const SecAsn1Oid,
            ResultsHandle: CSSM_HANDLE_PTR,
            NumberOfMatchedFields: *mut uint32,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlGetNextCachedFieldValue: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            ResultsHandle: CSSM_HANDLE,
            Value: *mut CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlGetAllCachedRecordFields: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CrlHandle: CSSM_HANDLE,
            CrlRecordIndex: *const SecAsn1Item,
            NumberOfFields: *mut uint32,
            CrlFields: *mut CSSM_FIELD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlAbortCache: ::std::option::Option<
        unsafe extern "C" fn(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE) -> CSSM_RETURN,
    >,
    pub CrlDescribeFormat: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: *mut uint32,
            OidList: *mut CSSM_OID_PTR,
        ) -> CSSM_RETURN,
    >,
    pub PassThrough: ::std::option::Option<
        unsafe extern "C" fn(
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            PassThroughId: uint32,
            InputParams: *const ::std::os::raw::c_void,
            OutputParams: *mut *mut ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_SPI_CL_FUNCS = cssm_spi_cl_funcs;
pub type CSSM_SPI_CL_FUNCS_PTR = *mut cssm_spi_cl_funcs;
pub type CSSM_SPI_ModuleEventHandler = ::std::option::Option<
    unsafe extern "C" fn(
        ModuleGuid: *const CSSM_GUID,
        CssmNotifyCallbackCtx: *mut ::std::os::raw::c_void,
        SubserviceId: uint32,
        ServiceType: CSSM_SERVICE_TYPE,
        EventType: CSSM_MODULE_EVENT,
    ) -> CSSM_RETURN,
>;
pub type CSSM_CONTEXT_EVENT = uint32;
pub const CSSM_CONTEXT_EVENT_CREATE: _bindgen_ty_223 = 1;
pub const CSSM_CONTEXT_EVENT_DELETE: _bindgen_ty_223 = 2;
pub const CSSM_CONTEXT_EVENT_UPDATE: _bindgen_ty_223 = 3;
pub type _bindgen_ty_223 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_module_funcs {
    pub ServiceType: CSSM_SERVICE_TYPE,
    pub NumberOfServiceFuncs: uint32,
    pub ServiceFuncs: *const CSSM_PROC_ADDR,
}
pub type CSSM_MODULE_FUNCS = cssm_module_funcs;
pub type CSSM_MODULE_FUNCS_PTR = *mut cssm_module_funcs;
pub type CSSM_UPCALLS_MALLOC = ::std::option::Option<
    unsafe extern "C" fn(AddInHandle: CSSM_HANDLE, size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type CSSM_UPCALLS_FREE = ::std::option::Option<
    unsafe extern "C" fn(AddInHandle: CSSM_HANDLE, memblock: *mut ::std::os::raw::c_void),
>;
pub type CSSM_UPCALLS_REALLOC = ::std::option::Option<
    unsafe extern "C" fn(
        AddInHandle: CSSM_HANDLE,
        memblock: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CSSM_UPCALLS_CALLOC = ::std::option::Option<
    unsafe extern "C" fn(
        AddInHandle: CSSM_HANDLE,
        num: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_upcalls {
    pub malloc_func: CSSM_UPCALLS_MALLOC,
    pub free_func: CSSM_UPCALLS_FREE,
    pub realloc_func: CSSM_UPCALLS_REALLOC,
    pub calloc_func: CSSM_UPCALLS_CALLOC,
    pub CcToHandle_func: ::std::option::Option<
        unsafe extern "C" fn(
            Cc: CSSM_CC_HANDLE,
            ModuleHandle: CSSM_MODULE_HANDLE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GetModuleInfo_func: ::std::option::Option<
        unsafe extern "C" fn(
            Module: CSSM_MODULE_HANDLE,
            Guid: CSSM_GUID_PTR,
            Version: CSSM_VERSION_PTR,
            SubServiceId: *mut uint32,
            SubServiceType: *mut CSSM_SERVICE_TYPE,
            AttachFlags: *mut CSSM_ATTACH_FLAGS,
            KeyHierarchy: *mut CSSM_KEY_HIERARCHY,
            AttachedMemFuncs: CSSM_API_MEMORY_FUNCS_PTR,
            FunctionTable: CSSM_FUNC_NAME_ADDR_PTR,
            NumFunctions: uint32,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_UPCALLS = cssm_upcalls;
pub type CSSM_UPCALLS_PTR = *mut cssm_upcalls;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cssm_spi_csp_funcs {
    pub EventNotify: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            Event: CSSM_CONTEXT_EVENT,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub QuerySize: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            Encrypt: CSSM_BOOL,
            QuerySizeCount: uint32,
            DataBlock: CSSM_QUERY_SIZE_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub SignData: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
            DigestAlgorithm: CSSM_ALGORITHMS,
            Signature: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub SignDataInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub SignDataUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
        ) -> CSSM_RETURN,
    >,
    pub SignDataFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Signature: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub VerifyData: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
            DigestAlgorithm: CSSM_ALGORITHMS,
            Signature: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub VerifyDataInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub VerifyDataUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
        ) -> CSSM_RETURN,
    >,
    pub VerifyDataFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Signature: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub DigestData: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
            Digest: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DigestDataInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub DigestDataUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
        ) -> CSSM_RETURN,
    >,
    pub DigestDataClone: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            ClonedCCHandle: CSSM_CC_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub DigestDataFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Digest: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GenerateMac: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
            Mac: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GenerateMacInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub GenerateMacUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
        ) -> CSSM_RETURN,
    >,
    pub GenerateMacFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Mac: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub VerifyMac: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
            Mac: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub VerifyMacInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub VerifyMacUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DataBufs: *const SecAsn1Item,
            DataBufCount: uint32,
        ) -> CSSM_RETURN,
    >,
    pub VerifyMacFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Mac: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub EncryptData: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            ClearBufs: *const SecAsn1Item,
            ClearBufCount: uint32,
            CipherBufs: CSSM_DATA_PTR,
            CipherBufCount: uint32,
            bytesEncrypted: *mut CSSM_SIZE,
            RemData: CSSM_DATA_PTR,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub EncryptDataInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub EncryptDataUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            ClearBufs: *const SecAsn1Item,
            ClearBufCount: uint32,
            CipherBufs: CSSM_DATA_PTR,
            CipherBufCount: uint32,
            bytesEncrypted: *mut CSSM_SIZE,
        ) -> CSSM_RETURN,
    >,
    pub EncryptDataFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            RemData: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DecryptData: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            CipherBufs: *const SecAsn1Item,
            CipherBufCount: uint32,
            ClearBufs: CSSM_DATA_PTR,
            ClearBufCount: uint32,
            bytesDecrypted: *mut CSSM_SIZE,
            RemData: CSSM_DATA_PTR,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub DecryptDataInit: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub DecryptDataUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CipherBufs: *const SecAsn1Item,
            CipherBufCount: uint32,
            ClearBufs: CSSM_DATA_PTR,
            ClearBufCount: uint32,
            bytesDecrypted: *mut CSSM_SIZE,
        ) -> CSSM_RETURN,
    >,
    pub DecryptDataFinal: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            RemData: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub QueryKeySizeInBits: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            Key: *const CSSM_KEY,
            KeySize: CSSM_KEY_SIZE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GenerateKey: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            KeyUsage: uint32,
            KeyAttr: uint32,
            KeyLabel: *const SecAsn1Item,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
            Key: CSSM_KEY_PTR,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub GenerateKeyPair: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            PublicKeyUsage: uint32,
            PublicKeyAttr: uint32,
            PublicKeyLabel: *const SecAsn1Item,
            PublicKey: CSSM_KEY_PTR,
            PrivateKeyUsage: uint32,
            PrivateKeyAttr: uint32,
            PrivateKeyLabel: *const SecAsn1Item,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
            PrivateKey: CSSM_KEY_PTR,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub GenerateRandom: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            RandomNumber: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GenerateAlgorithmParams: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            ParamBits: uint32,
            Param: CSSM_DATA_PTR,
            NumberOfUpdatedAttibutes: *mut uint32,
            UpdatedAttributes: *mut CSSM_CONTEXT_ATTRIBUTE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub WrapKey: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            Key: *const CSSM_KEY,
            DescriptiveData: *const SecAsn1Item,
            WrappedKey: CSSM_WRAP_KEY_PTR,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub UnwrapKey: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            PublicKey: *const CSSM_KEY,
            WrappedKey: *const CSSM_WRAP_KEY,
            KeyUsage: uint32,
            KeyAttr: uint32,
            KeyLabel: *const SecAsn1Item,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
            UnwrappedKey: CSSM_KEY_PTR,
            DescriptiveData: CSSM_DATA_PTR,
            Privilege: CSSM_PRIVILEGE,
        ) -> CSSM_RETURN,
    >,
    pub DeriveKey: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            Param: CSSM_DATA_PTR,
            KeyUsage: uint32,
            KeyAttr: uint32,
            KeyLabel: *const SecAsn1Item,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
            DerivedKey: CSSM_KEY_PTR,
        ) -> CSSM_RETURN,
    >,
    pub FreeKey: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            KeyPtr: CSSM_KEY_PTR,
            Delete: CSSM_BOOL,
        ) -> CSSM_RETURN,
    >,
    pub PassThrough: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            Context: *const CSSM_CONTEXT,
            PassThroughId: uint32,
            InData: *const ::std::os::raw::c_void,
            OutData: *mut *mut ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
    pub Login: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            LoginName: *const SecAsn1Item,
            Reserved: *const ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
    pub Logout:
        ::std::option::Option<unsafe extern "C" fn(CSPHandle: CSSM_CSP_HANDLE) -> CSSM_RETURN>,
    pub ChangeLoginAcl: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            AclEdit: *const CSSM_ACL_EDIT,
        ) -> CSSM_RETURN,
    >,
    pub ObtainPrivateKeyFromPublicKey: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            PublicKey: *const CSSM_KEY,
            PrivateKey: CSSM_KEY_PTR,
        ) -> CSSM_RETURN,
    >,
    pub RetrieveUniqueId: ::std::option::Option<
        unsafe extern "C" fn(CSPHandle: CSSM_CSP_HANDLE, UniqueID: CSSM_DATA_PTR) -> CSSM_RETURN,
    >,
    pub RetrieveCounter: ::std::option::Option<
        unsafe extern "C" fn(CSPHandle: CSSM_CSP_HANDLE, Counter: CSSM_DATA_PTR) -> CSSM_RETURN,
    >,
    pub VerifyDevice: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            DeviceCert: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub GetTimeValue: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            TimeAlgorithm: CSSM_ALGORITHMS,
            TimeData: *mut SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub GetOperationalStatistics: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            Statistics: *mut CSSM_CSP_OPERATIONAL_STATISTICS,
        ) -> CSSM_RETURN,
    >,
    pub GetLoginAcl: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            SelectionTag: *const CSSM_STRING,
            NumberOfAclInfos: *mut uint32,
            AclInfos: *mut CSSM_ACL_ENTRY_INFO_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GetKeyAcl: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            Key: *const CSSM_KEY,
            SelectionTag: *const CSSM_STRING,
            NumberOfAclInfos: *mut uint32,
            AclInfos: *mut CSSM_ACL_ENTRY_INFO_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ChangeKeyAcl: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            AclEdit: *const CSSM_ACL_EDIT,
            Key: *const CSSM_KEY,
        ) -> CSSM_RETURN,
    >,
    pub GetKeyOwner: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            Key: *const CSSM_KEY,
            Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ChangeKeyOwner: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            Key: *const CSSM_KEY,
            NewOwner: *const CSSM_ACL_OWNER_PROTOTYPE,
        ) -> CSSM_RETURN,
    >,
    pub GetLoginOwner: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ChangeLoginOwner: ::std::option::Option<
        unsafe extern "C" fn(
            CSPHandle: CSSM_CSP_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            NewOwner: *const CSSM_ACL_OWNER_PROTOTYPE,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_SPI_CSP_FUNCS = cssm_spi_csp_funcs;
pub type CSSM_SPI_CSP_FUNCS_PTR = *mut cssm_spi_csp_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_spi_dl_funcs {
    pub DbOpen: ::std::option::Option<
        unsafe extern "C" fn(
            DLHandle: CSSM_DL_HANDLE,
            DbName: *const ::std::os::raw::c_char,
            DbLocation: *const CSSM_NET_ADDRESS,
            AccessRequest: CSSM_DB_ACCESS_TYPE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            OpenParameters: *const ::std::os::raw::c_void,
            DbHandle: *mut CSSM_DB_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub DbClose:
        ::std::option::Option<unsafe extern "C" fn(DLDBHandle: CSSM_DL_DB_HANDLE) -> CSSM_RETURN>,
    pub DbCreate: ::std::option::Option<
        unsafe extern "C" fn(
            DLHandle: CSSM_DL_HANDLE,
            DbName: *const ::std::os::raw::c_char,
            DbLocation: *const CSSM_NET_ADDRESS,
            DBInfo: *const CSSM_DBINFO,
            AccessRequest: CSSM_DB_ACCESS_TYPE,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
            OpenParameters: *const ::std::os::raw::c_void,
            DbHandle: *mut CSSM_DB_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub DbDelete: ::std::option::Option<
        unsafe extern "C" fn(
            DLHandle: CSSM_DL_HANDLE,
            DbName: *const ::std::os::raw::c_char,
            DbLocation: *const CSSM_NET_ADDRESS,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        ) -> CSSM_RETURN,
    >,
    pub CreateRelation: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            RelationID: CSSM_DB_RECORDTYPE,
            RelationName: *const ::std::os::raw::c_char,
            NumberOfAttributes: uint32,
            pAttributeInfo: *const CSSM_DB_SCHEMA_ATTRIBUTE_INFO,
            NumberOfIndexes: uint32,
            pIndexInfo: *const CSSM_DB_SCHEMA_INDEX_INFO,
        ) -> CSSM_RETURN,
    >,
    pub DestroyRelation: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            RelationID: CSSM_DB_RECORDTYPE,
        ) -> CSSM_RETURN,
    >,
    pub Authenticate: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            AccessRequest: CSSM_DB_ACCESS_TYPE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
        ) -> CSSM_RETURN,
    >,
    pub GetDbAcl: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            SelectionTag: *const CSSM_STRING,
            NumberOfAclInfos: *mut uint32,
            AclInfos: *mut CSSM_ACL_ENTRY_INFO_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ChangeDbAcl: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            AclEdit: *const CSSM_ACL_EDIT,
        ) -> CSSM_RETURN,
    >,
    pub GetDbOwner: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ChangeDbOwner: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            NewOwner: *const CSSM_ACL_OWNER_PROTOTYPE,
        ) -> CSSM_RETURN,
    >,
    pub GetDbNames: ::std::option::Option<
        unsafe extern "C" fn(
            DLHandle: CSSM_DL_HANDLE,
            NameList: *mut CSSM_NAME_LIST_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GetDbNameFromHandle: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            DbName: *mut *mut ::std::os::raw::c_char,
        ) -> CSSM_RETURN,
    >,
    pub FreeNameList: ::std::option::Option<
        unsafe extern "C" fn(DLHandle: CSSM_DL_HANDLE, NameList: CSSM_NAME_LIST_PTR) -> CSSM_RETURN,
    >,
    pub DataInsert: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            RecordType: CSSM_DB_RECORDTYPE,
            Attributes: *const CSSM_DB_RECORD_ATTRIBUTE_DATA,
            Data: *const SecAsn1Item,
            UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DataDelete: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            UniqueRecordIdentifier: *const CSSM_DB_UNIQUE_RECORD,
        ) -> CSSM_RETURN,
    >,
    pub DataModify: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            RecordType: CSSM_DB_RECORDTYPE,
            UniqueRecordIdentifier: CSSM_DB_UNIQUE_RECORD_PTR,
            AttributesToBeModified: *const CSSM_DB_RECORD_ATTRIBUTE_DATA,
            DataToBeModified: *const SecAsn1Item,
            ModifyMode: CSSM_DB_MODIFY_MODE,
        ) -> CSSM_RETURN,
    >,
    pub DataGetFirst: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            Query: *const CSSM_QUERY,
            ResultsHandle: CSSM_HANDLE_PTR,
            Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
            Data: CSSM_DATA_PTR,
            UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DataGetNext: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            ResultsHandle: CSSM_HANDLE,
            Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
            Data: CSSM_DATA_PTR,
            UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DataAbortQuery: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            ResultsHandle: CSSM_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub DataGetFromUniqueRecordId: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            UniqueRecord: *const CSSM_DB_UNIQUE_RECORD,
            Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
            Data: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub FreeUniqueRecord: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub PassThrough: ::std::option::Option<
        unsafe extern "C" fn(
            DLDBHandle: CSSM_DL_DB_HANDLE,
            PassThroughId: uint32,
            InputParams: *const ::std::os::raw::c_void,
            OutputParams: *mut *mut ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_SPI_DL_FUNCS = cssm_spi_dl_funcs;
pub type CSSM_SPI_DL_FUNCS_PTR = *mut cssm_spi_dl_funcs;
pub type CSSM_KRSP_HANDLE = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_kr_name {
    pub Type: uint8,
    pub Length: uint8,
    pub Name: *mut ::std::os::raw::c_char,
}
pub type CSSM_KR_NAME = cssm_kr_name;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_kr_profile {
    pub UserName: CSSM_KR_NAME,
    pub UserCertificate: CSSM_CERTGROUP_PTR,
    pub KRSCertChain: CSSM_CERTGROUP_PTR,
    pub LE_KRANum: uint8,
    pub LE_KRACertChainList: CSSM_CERTGROUP_PTR,
    pub ENT_KRANum: uint8,
    pub ENT_KRACertChainList: CSSM_CERTGROUP_PTR,
    pub INDIV_KRANum: uint8,
    pub INDIV_KRACertChainList: CSSM_CERTGROUP_PTR,
    pub INDIV_AuthenticationInfo: CSSM_DATA_PTR,
    pub KRSPFlags: uint32,
    pub KRSPExtensions: CSSM_DATA_PTR,
}
pub type CSSM_KR_PROFILE = cssm_kr_profile;
pub type CSSM_KR_PROFILE_PTR = *mut cssm_kr_profile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_kr_wrappedproductinfo {
    pub StandardVersion: CSSM_VERSION,
    pub StandardDescription: CSSM_STRING,
    pub ProductVersion: CSSM_VERSION,
    pub ProductDescription: CSSM_STRING,
    pub ProductVendor: CSSM_STRING,
    pub ProductFlags: uint32,
}
pub type CSSM_KR_WRAPPEDPRODUCT_INFO = cssm_kr_wrappedproductinfo;
pub type CSSM_KR_WRAPPEDPRODUCT_INFO_PTR = *mut cssm_kr_wrappedproductinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_krsubservice {
    pub SubServiceId: uint32,
    pub Description: *mut ::std::os::raw::c_char,
    pub WrappedProduct: CSSM_KR_WRAPPEDPRODUCT_INFO,
}
pub type CSSM_KRSUBSERVICE = cssm_krsubservice;
pub type CSSM_KRSUBSERVICE_PTR = *mut cssm_krsubservice;
pub type CSSM_KR_POLICY_TYPE = uint32;
pub type CSSM_KR_POLICY_FLAGS = uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_kr_policy_list_item {
    pub next: *mut kr_policy_list_item,
    pub AlgorithmId: CSSM_ALGORITHMS,
    pub Mode: CSSM_ENCRYPT_MODE,
    pub MaxKeyLength: uint32,
    pub MaxRounds: uint32,
    pub WorkFactor: uint8,
    pub PolicyFlags: CSSM_KR_POLICY_FLAGS,
    pub AlgClass: CSSM_CONTEXT_TYPE,
}
pub type CSSM_KR_POLICY_LIST_ITEM = cssm_kr_policy_list_item;
pub type CSSM_KR_POLICY_LIST_ITEM_PTR = *mut cssm_kr_policy_list_item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_kr_policy_info {
    pub krbNotAllowed: CSSM_BOOL,
    pub numberOfEntries: uint32,
    pub policyEntry: *mut CSSM_KR_POLICY_LIST_ITEM,
}
pub type CSSM_KR_POLICY_INFO = cssm_kr_policy_info;
pub type CSSM_KR_POLICY_INFO_PTR = *mut cssm_kr_policy_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_spi_kr_funcs {
    pub RegistrationRequest: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            KRRegistrationContextHandle: CSSM_CC_HANDLE,
            KRRegistrationContext: *const CSSM_CONTEXT,
            KRInData: *const SecAsn1Item,
            AccessCredentials: *const CSSM_ACCESS_CREDENTIALS,
            KRFlags: CSSM_KR_POLICY_FLAGS,
            EstimatedTime: *mut sint32,
            ReferenceHandle: CSSM_HANDLE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub RegistrationRetrieve: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            ReferenceHandle: CSSM_HANDLE,
            EstimatedTime: *mut sint32,
            KRProfile: CSSM_KR_PROFILE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GenerateRecoveryFields: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            KREnablementContextHandle: CSSM_CC_HANDLE,
            KREnablementContext: *const CSSM_CONTEXT,
            CryptoContextHandle: CSSM_CC_HANDLE,
            CryptoContext: *const CSSM_CONTEXT,
            KRSPOptions: *const SecAsn1Item,
            KRFlags: CSSM_KR_POLICY_FLAGS,
            KRFields: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ProcessRecoveryFields: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            KREnablementContextHandle: CSSM_CC_HANDLE,
            KREnablementContext: *const CSSM_CONTEXT,
            CryptoContextHandle: CSSM_CC_HANDLE,
            CryptoContext: *const CSSM_CONTEXT,
            KRSPOptions: *const SecAsn1Item,
            KRFlags: CSSM_KR_POLICY_FLAGS,
            KRFields: *const SecAsn1Item,
        ) -> CSSM_RETURN,
    >,
    pub RecoveryRequest: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            KRRequestContextHandle: CSSM_CC_HANDLE,
            KRRequestContext: *const CSSM_CONTEXT,
            KRInData: *const SecAsn1Item,
            AccessCredentials: *const CSSM_ACCESS_CREDENTIALS,
            EstimatedTime: *mut sint32,
            ReferenceHandle: CSSM_HANDLE_PTR,
        ) -> CSSM_RETURN,
    >,
    pub RecoveryRetrieve: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            ReferenceHandle: CSSM_HANDLE,
            EstimatedTime: *mut sint32,
            CacheHandle: CSSM_HANDLE_PTR,
            NumberOfRecoveredKeys: *mut uint32,
        ) -> CSSM_RETURN,
    >,
    pub GetRecoveredObject: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            CacheHandle: CSSM_HANDLE,
            IndexInResults: uint32,
            CSPHandle: CSSM_CSP_HANDLE,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
            Flags: uint32,
            RecoveredKey: CSSM_KEY_PTR,
            OtherInfo: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub RecoveryRequestAbort: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            ResultsHandle: CSSM_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub PassThrough: ::std::option::Option<
        unsafe extern "C" fn(
            KRSPHandle: CSSM_KRSP_HANDLE,
            KeyRecoveryContextHandle: CSSM_CC_HANDLE,
            KeyRecoveryContext: *const CSSM_CONTEXT,
            CryptoContextHandle: CSSM_CC_HANDLE,
            CryptoContext: *const CSSM_CONTEXT,
            PassThroughId: uint32,
            InputParams: *const ::std::os::raw::c_void,
            OutputParams: *mut *mut ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_SPI_KR_FUNCS = cssm_spi_kr_funcs;
pub type CSSM_SPI_KR_FUNCS_PTR = *mut cssm_spi_kr_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_spi_tp_funcs {
    pub SubmitCredRequest: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            PreferredAuthority: *const CSSM_TP_AUTHORITY_ID,
            RequestType: CSSM_TP_AUTHORITY_REQUEST_TYPE,
            RequestInput: *const CSSM_TP_REQUEST_SET,
            CallerAuthContext: *const CSSM_TP_CALLERAUTH_CONTEXT,
            EstimatedTime: *mut sint32,
            ReferenceIdentifier: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub RetrieveCredResult: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            ReferenceIdentifier: *const SecAsn1Item,
            CallerAuthCredentials: *const CSSM_TP_CALLERAUTH_CONTEXT,
            EstimatedTime: *mut sint32,
            ConfirmationRequired: *mut CSSM_BOOL,
            RetrieveOutput: *mut CSSM_TP_RESULT_SET_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ConfirmCredResult: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            ReferenceIdentifier: *const SecAsn1Item,
            CallerAuthCredentials: *const CSSM_TP_CALLERAUTH_CONTEXT,
            Responses: *const CSSM_TP_CONFIRM_RESPONSE,
            PreferredAuthority: *const CSSM_TP_AUTHORITY_ID,
        ) -> CSSM_RETURN,
    >,
    pub ReceiveConfirmation: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            ReferenceIdentifier: *const SecAsn1Item,
            Responses: *mut CSSM_TP_CONFIRM_RESPONSE_PTR,
            ElapsedTime: *mut sint32,
        ) -> CSSM_RETURN,
    >,
    pub CertReclaimKey: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CertGroup: *const CSSM_CERTGROUP,
            CertIndex: uint32,
            KeyCacheHandle: CSSM_LONG_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            CredAndAclEntry: *const CSSM_RESOURCE_CONTROL_CONTEXT,
        ) -> CSSM_RETURN,
    >,
    pub CertReclaimAbort: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            KeyCacheHandle: CSSM_LONG_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub FormRequest: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            PreferredAuthority: *const CSSM_TP_AUTHORITY_ID,
            FormType: CSSM_TP_FORM_TYPE,
            BlankForm: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub FormSubmit: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            FormType: CSSM_TP_FORM_TYPE,
            Form: *const SecAsn1Item,
            ClearanceAuthority: *const CSSM_TP_AUTHORITY_ID,
            RepresentedAuthority: *const CSSM_TP_AUTHORITY_ID,
            Credentials: CSSM_ACCESS_CREDENTIALS_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGroupVerify: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            CertGroupToBeVerified: *const CSSM_CERTGROUP,
            VerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            VerifyContextResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertCreateTemplate: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: uint32,
            CertFields: *const CSSM_FIELD,
            CertTemplate: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGetAllTemplateFields: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CertTemplate: *const SecAsn1Item,
            NumberOfFields: *mut uint32,
            CertFields: *mut CSSM_FIELD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertSign: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CertTemplateToBeSigned: *const SecAsn1Item,
            SignerCertGroup: *const CSSM_CERTGROUP,
            SignerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
            SignedCert: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlVerify: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            CrlToBeVerified: *const CSSM_ENCODED_CRL,
            SignerCertGroup: *const CSSM_CERTGROUP,
            VerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlCreateTemplate: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            NumberOfFields: uint32,
            CrlFields: *const CSSM_FIELD,
            NewCrlTemplate: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertRevoke: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            OldCrlTemplate: *const SecAsn1Item,
            CertGroupToBeRevoked: *const CSSM_CERTGROUP,
            RevokerCertGroup: *const CSSM_CERTGROUP,
            RevokerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
            Reason: CSSM_TP_CERTCHANGE_REASON,
            NewCrlTemplate: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertRemoveFromCrlTemplate: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            OldCrlTemplate: *const SecAsn1Item,
            CertGroupToBeRemoved: *const CSSM_CERTGROUP,
            RevokerCertGroup: *const CSSM_CERTGROUP,
            RevokerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
            NewCrlTemplate: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CrlSign: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            CrlToBeSigned: *const CSSM_ENCODED_CRL,
            SignerCertGroup: *const CSSM_CERTGROUP,
            SignerVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
            SignedCrl: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub ApplyCrlToDb: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            CrlToBeApplied: *const CSSM_ENCODED_CRL,
            SignerCertGroup: *const CSSM_CERTGROUP,
            ApplyCrlVerifyContext: *const CSSM_TP_VERIFY_CONTEXT,
            ApplyCrlVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGroupConstruct: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CSPHandle: CSSM_CSP_HANDLE,
            DBList: *const CSSM_DL_DB_LIST,
            ConstructParams: *const ::std::os::raw::c_void,
            CertGroupFrag: *const CSSM_CERTGROUP,
            CertGroup: *mut CSSM_CERTGROUP_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGroupPrune: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            DBList: *const CSSM_DL_DB_LIST,
            OrderedCertGroup: *const CSSM_CERTGROUP,
            PrunedCertGroup: *mut CSSM_CERTGROUP_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CertGroupToTupleGroup: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CertGroup: *const CSSM_CERTGROUP,
            TupleGroup: *mut CSSM_TUPLEGROUP_PTR,
        ) -> CSSM_RETURN,
    >,
    pub TupleGroupToCertGroup: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            TupleGroup: *const CSSM_TUPLEGROUP,
            CertTemplates: *mut CSSM_CERTGROUP_PTR,
        ) -> CSSM_RETURN,
    >,
    pub PassThrough: ::std::option::Option<
        unsafe extern "C" fn(
            TPHandle: CSSM_TP_HANDLE,
            CLHandle: CSSM_CL_HANDLE,
            CCHandle: CSSM_CC_HANDLE,
            DBList: *const CSSM_DL_DB_LIST,
            PassThroughId: uint32,
            InputParams: *const ::std::os::raw::c_void,
            OutputParams: *mut *mut ::std::os::raw::c_void,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_SPI_TP_FUNCS = cssm_spi_tp_funcs;
pub type CSSM_SPI_TP_FUNCS_PTR = *mut cssm_spi_tp_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_state_funcs {
    pub cssm_GetAttachFunctions: ::std::option::Option<
        unsafe extern "C" fn(
            hAddIn: CSSM_MODULE_HANDLE,
            AddinType: CSSM_SERVICE_MASK,
            SPFunctions: *mut *mut ::std::os::raw::c_void,
            Guid: CSSM_GUID_PTR,
            Serialized: *mut CSSM_BOOL,
        ) -> CSSM_RETURN,
    >,
    pub cssm_ReleaseAttachFunctions:
        ::std::option::Option<unsafe extern "C" fn(hAddIn: CSSM_MODULE_HANDLE) -> CSSM_RETURN>,
    pub cssm_GetAppMemoryFunctions: ::std::option::Option<
        unsafe extern "C" fn(
            hAddIn: CSSM_MODULE_HANDLE,
            UpcallTable: CSSM_UPCALLS_PTR,
        ) -> CSSM_RETURN,
    >,
    pub cssm_IsFuncCallValid: ::std::option::Option<
        unsafe extern "C" fn(
            hAddin: CSSM_MODULE_HANDLE,
            SrcAddress: CSSM_PROC_ADDR,
            DestAddress: CSSM_PROC_ADDR,
            InPriv: CSSM_PRIVILEGE,
            OutPriv: *mut CSSM_PRIVILEGE,
            Hints: CSSM_BITMASK,
            IsOK: *mut CSSM_BOOL,
        ) -> CSSM_RETURN,
    >,
    pub cssm_DeregisterManagerServices:
        ::std::option::Option<unsafe extern "C" fn(GUID: *const CSSM_GUID) -> CSSM_RETURN>,
    pub cssm_DeliverModuleManagerEvent: ::std::option::Option<
        unsafe extern "C" fn(
            EventDescription: *const CSSM_MANAGER_EVENT_NOTIFICATION,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_STATE_FUNCS = cssm_state_funcs;
pub type CSSM_STATE_FUNCS_PTR = *mut cssm_state_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cssm_manager_registration_info {
    pub Initialize: ::std::option::Option<
        unsafe extern "C" fn(VerMajor: uint32, VerMinor: uint32) -> CSSM_RETURN,
    >,
    pub Terminate: ::std::option::Option<unsafe extern "C" fn() -> CSSM_RETURN>,
    pub RegisterDispatchTable: ::std::option::Option<
        unsafe extern "C" fn(CssmStateCallTable: CSSM_STATE_FUNCS_PTR) -> CSSM_RETURN,
    >,
    pub DeregisterDispatchTable: ::std::option::Option<unsafe extern "C" fn() -> CSSM_RETURN>,
    pub EventNotifyManager: ::std::option::Option<
        unsafe extern "C" fn(
            EventDescription: *const CSSM_MANAGER_EVENT_NOTIFICATION,
        ) -> CSSM_RETURN,
    >,
    pub RefreshFunctionTable: ::std::option::Option<
        unsafe extern "C" fn(
            FuncNameAddrPtr: CSSM_FUNC_NAME_ADDR_PTR,
            NumOfFuncNameAddr: uint32,
        ) -> CSSM_RETURN,
    >,
}
pub type CSSM_MANAGER_REGISTRATION_INFO = cssm_manager_registration_info;
pub type CSSM_MANAGER_REGISTRATION_INFO_PTR = *mut cssm_manager_registration_info;
pub const CSSM_HINT_NONE: _bindgen_ty_224 = 0;
pub const CSSM_HINT_ADDRESS_APP: _bindgen_ty_224 = 1;
pub const CSSM_HINT_ADDRESS_SP: _bindgen_ty_224 = 2;
pub type _bindgen_ty_224 = ::std::os::raw::c_uint;
pub type MDS_HANDLE = CSSM_DL_HANDLE;
pub type MDS_DB_HANDLE = CSSM_DL_DB_HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mds_funcs {
    pub DbOpen: ::std::option::Option<
        unsafe extern "C" fn(
            MdsHandle: MDS_HANDLE,
            DbName: *const ::std::os::raw::c_char,
            DbLocation: *const CSSM_NET_ADDRESS,
            AccessRequest: CSSM_DB_ACCESS_TYPE,
            AccessCred: *const CSSM_ACCESS_CREDENTIALS,
            OpenParameters: *const ::std::os::raw::c_void,
            hMds: *mut CSSM_DB_HANDLE,
        ) -> CSSM_RETURN,
    >,
    pub DbClose:
        ::std::option::Option<unsafe extern "C" fn(MdsDbHandle: MDS_DB_HANDLE) -> CSSM_RETURN>,
    pub GetDbNames: ::std::option::Option<
        unsafe extern "C" fn(
            MdsHandle: MDS_HANDLE,
            NameList: *mut CSSM_NAME_LIST_PTR,
        ) -> CSSM_RETURN,
    >,
    pub GetDbNameFromHandle: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            DbName: *mut *mut ::std::os::raw::c_char,
        ) -> CSSM_RETURN,
    >,
    pub FreeNameList: ::std::option::Option<
        unsafe extern "C" fn(MdsHandle: MDS_HANDLE, NameList: CSSM_NAME_LIST_PTR) -> CSSM_RETURN,
    >,
    pub DataInsert: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            RecordType: CSSM_DB_RECORDTYPE,
            Attributes: *const CSSM_DB_RECORD_ATTRIBUTE_DATA,
            Data: *const SecAsn1Item,
            UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DataDelete: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            UniqueRecordIdentifier: *const CSSM_DB_UNIQUE_RECORD,
        ) -> CSSM_RETURN,
    >,
    pub DataModify: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            RecordType: CSSM_DB_RECORDTYPE,
            UniqueRecordIdentifier: CSSM_DB_UNIQUE_RECORD_PTR,
            AttributesToBeModified: *const CSSM_DB_RECORD_ATTRIBUTE_DATA,
            DataToBeModified: *const SecAsn1Item,
            ModifyMode: CSSM_DB_MODIFY_MODE,
        ) -> CSSM_RETURN,
    >,
    pub DataGetFirst: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            Query: *const CSSM_QUERY,
            ResultsHandle: CSSM_HANDLE_PTR,
            Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
            Data: CSSM_DATA_PTR,
            UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DataGetNext: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            ResultsHandle: CSSM_HANDLE,
            Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
            Data: CSSM_DATA_PTR,
            UniqueId: *mut CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub DataAbortQuery: ::std::option::Option<
        unsafe extern "C" fn(MdsDbHandle: MDS_DB_HANDLE, ResultsHandle: CSSM_HANDLE) -> CSSM_RETURN,
    >,
    pub DataGetFromUniqueRecordId: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            UniqueRecord: *const CSSM_DB_UNIQUE_RECORD,
            Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR,
            Data: CSSM_DATA_PTR,
        ) -> CSSM_RETURN,
    >,
    pub FreeUniqueRecord: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
        ) -> CSSM_RETURN,
    >,
    pub CreateRelation: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            RelationID: CSSM_DB_RECORDTYPE,
            RelationName: *const ::std::os::raw::c_char,
            NumberOfAttributes: uint32,
            pAttributeInfo: *const CSSM_DB_SCHEMA_ATTRIBUTE_INFO,
            NumberOfIndexes: uint32,
            pIndexInfo: *const CSSM_DB_SCHEMA_INDEX_INFO,
        ) -> CSSM_RETURN,
    >,
    pub DestroyRelation: ::std::option::Option<
        unsafe extern "C" fn(
            MdsDbHandle: MDS_DB_HANDLE,
            RelationID: CSSM_DB_RECORDTYPE,
        ) -> CSSM_RETURN,
    >,
}
pub type MDS_FUNCS = mds_funcs;
pub type MDS_FUNCS_PTR = *mut mds_funcs;
extern "C" {
    pub fn MDS_Initialize(
        pCallerGuid: *const CSSM_GUID,
        pMemoryFunctions: *const CSSM_MEMORY_FUNCS,
        pDlFunctions: MDS_FUNCS_PTR,
        hMds: *mut MDS_HANDLE,
    ) -> CSSM_RETURN;
}
extern "C" {
    pub fn MDS_Terminate(MdsHandle: MDS_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn MDS_Install(MdsHandle: MDS_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub fn MDS_Uninstall(MdsHandle: MDS_HANDLE) -> CSSM_RETURN;
}
extern "C" {
    pub static CSSMOID_MD2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MD4: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MD5: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_RSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MD2WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MD4WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MD5WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA1WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA224WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA256WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA384WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA512WithRSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA1WithRSA_OIW: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_RSAWithOAEP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OAEP_MGF1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OAEP_ID_PSPECIFIED: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DES_CBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_PUB_NUMBER: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_STATIC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_ONE_FLOW: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_EPHEM: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_HYBRID1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_HYBRID2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_HYBRID_ONEFLOW: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_MQV1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_MQV2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_STATIC_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_ONE_FLOW_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_EPHEM_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_HYBRID1_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_DH_HYBRID2_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_MQV1_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ANSI_MQV2_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS3: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DH: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DSA_CMS: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DSA_JDK: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA1WithDSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA1WithDSA_CMS: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA1WithDSA_JDK: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA224: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA256: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA384: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SHA512: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ecPublicKey: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ECDSA_WithSHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ECDSA_WithSHA224: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ECDSA_WithSHA256: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ECDSA_WithSHA384: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ECDSA_WithSHA512: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ECDSA_WithSpecified: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_ISIGN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_X509_BASIC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_SSL: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_LOCAL_CERT_GEN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_CSR_GEN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_REVOCATION_CRL: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_REVOCATION_OCSP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_SMIME: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_EAP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_CODE_SIGN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_SW_UPDATE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_IP_SEC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_ICHAT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_RESOURCE_SIGN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PKINIT_CLIENT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PKINIT_SERVER: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_CODE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PACKAGE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_MACAPPSTORE_RECEIPT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_APPLEID_SHARING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_TIMESTAMPING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_REVOCATION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PASSBOOK_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_MOBILE_STORE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_ESCROW_SERVICE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PROFILE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_QA_PROFILE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_TEST_MOBILE_STORE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PCS_ESCROW_SERVICE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_TP_PROVISIONING_PROFILE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_FEE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_ASC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_FEE_MD5: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_FEE_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_FEED: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_FEEDEXP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_ECDSA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_IDENTITY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_EMAIL_SIGN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_EMAIL_ENCRYPT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_LIST: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_STORE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_FETCH: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_REMOVE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_SHARED_SERVICES: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_VALUE_USERNAME: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_VALUE_PASSWORD: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_VALUE_HOSTNAME: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_VALUE_RENEW: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_VALUE_ASYNC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_REQ_VALUE_IS_PENDING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_DIGEST_ALG: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_ENCRYPT_ALG: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_HMAC_SHA1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_pbeWithMD2AndDES: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_pbeWithMD2AndRC2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_pbeWithMD5AndDES: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_pbeWithMD5AndRC2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_pbeWithSHA1AndDES: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_pbeWithSHA1AndRC2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_PBKDF2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_PBES2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_PBMAC1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_RC2_CBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_DES_EDE3_CBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS5_RC5_CBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_pbeWithSHAAnd128BitRC4: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_pbeWithSHAAnd40BitRC4: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_pbeWithSHAAnd3Key3DESCBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_pbeWithSHAAnd2Key3DESCBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_pbeWithSHAAnd128BitRC2CBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_pbewithSHAAnd40BitRC2CBC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ObjectClass: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AliasedEntryName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KnowledgeInformation: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CommonName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Surname: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SerialNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CountryName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_LocalityName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_StateProvinceName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveStateProvinceName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_StreetAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveStreetAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OrganizationName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveOrganizationName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OrganizationalUnitName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveOrganizationalUnitName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Title: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Description: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SearchGuide: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_BusinessCategory: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PostalAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectivePostalAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PostalCode: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectivePostalCode: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PostOfficeBox: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectivePostOfficeBox: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PhysicalDeliveryOfficeName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectivePhysicalDeliveryOfficeName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_TelephoneNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveTelephoneNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_TelexNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveTelexNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_TelexTerminalIdentifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveTelexTerminalIdentifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_FacsimileTelephoneNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveFacsimileTelephoneNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X_121Address: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_InternationalISDNNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CollectiveInternationalISDNNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_RegisteredAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DestinationIndicator: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PreferredDeliveryMethod: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PresentationAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SupportedApplicationContext: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Member: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Owner: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_RoleOccupant: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SeeAlso: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UserPassword: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UserCertificate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CACertificate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AuthorityRevocationList: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CertificateRevocationList: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CrossCertificatePair: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Name: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_GivenName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Initials: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_GenerationQualifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UniqueIdentifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DNQualifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_EnhancedSearchGuide: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ProtocolInformation: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DistinguishedName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UniqueMember: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_HouseIdentifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_EmailAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UnstructuredName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ContentType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MessageDigest: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SigningTime: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CounterSignature: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ChallengePassword: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UnstructuredAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ExtendedCertificateAttributes: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_Id_Ct_TSTInfo: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_TimeStampToken: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_QT_CPS: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_QT_UNOTICE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AD_OCSP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AD_CA_ISSUERS: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AD_TIME_STAMPING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AD_CA_REPOSITORY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PDA_DATE_OF_BIRTH: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PDA_PLACE_OF_BIRTH: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PDA_GENDER: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PDA_COUNTRY_CITIZEN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PDA_COUNTRY_RESIDENCE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OID_QCS_SYNTAX_V1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OID_QCS_SYNTAX_V2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ETSI_QCS_QC_COMPLIANCE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ETSI_QCS_QC_LIMIT_VALUE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ETSI_QCS_QC_RETENTION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ETSI_QCS_QC_SSCD: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_Data: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_SignedData: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_EnvelopedData: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_SignedAndEnvelopedData: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_DigestedData: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_EncryptedData: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_DataWithAttributes: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS7_EncryptedPrivateKeyInfo: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_FriendlyName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_LocalKeyId: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_CertTypes: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_CrlTypes: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_X509Certificate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_SdsiCertificate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS9_X509Crl: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_keyBag: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_shroudedKeyBag: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_certBag: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_crlBag: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_secretBag: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKCS12_safeContentsBag: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UserID: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DomainComponent: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KERBv5_PKINIT_AUTH_DATA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KERBv5_PKINIT_DH_KEY_DATA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KERBv5_PKINIT_RKEY_DATA: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62_FieldType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62_PubKeyType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62_EllCurve: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62_C_TwoCurve: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62_PrimeCurve: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X9_62_SigType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp192r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp256r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_Certicom: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CerticomEllCurve: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp112r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp112r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp128r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp128r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp160k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp160r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp160r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp192k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp224k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp224r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp256k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp384r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_secp521r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect113r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect113r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect131r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect131r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect163k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect163r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect163r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect193r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect193r2: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect233k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect233r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect239k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect283k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect283r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect409k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect409r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect571k1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_sect571r1: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3SignedCertificate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3SignedCertificateCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3Certificate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1Version: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SerialNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1IssuerName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1IssuerNameStd: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1IssuerNameCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1IssuerNameLDAP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1ValidityNotBefore: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1ValidityNotAfter: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectNameStd: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectNameCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectNameLDAP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CSSMKeyStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectPublicKeyCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectPublicKeyAlgorithm: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectPublicKeyAlgorithmParameters: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SubjectPublicKey: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CertificateIssuerUniqueId: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CertificateSubjectUniqueId: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionsStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionsCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateNumberOfExtensions: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionId: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionCritical: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V3CertificateExtensionValue: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SignatureStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SignatureCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SignatureAlgorithm: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SignatureAlgorithmTBS: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1SignatureAlgorithmParameters: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1Signature: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectSignatureBitmap: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectPicture: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectEmailAddress: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_UseExemptions: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectDirectoryAttributes: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectKeyIdentifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KeyUsage: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PrivateKeyUsagePeriod: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectAltName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_IssuerAltName: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_BasicConstraints: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CrlNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CrlReason: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_HoldInstructionCode: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_InvalidityDate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DeltaCrlIndicator: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_IssuingDistributionPoint: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_IssuingDistributionPoints: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CertIssuer: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_NameConstraints: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CrlDistributionPoints: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_CertificatePolicies: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PolicyMappings: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PolicyConstraints: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AuthorityKeyIdentifier: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ExtendedKeyUsage: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_InhibitAnyPolicy: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_AuthorityInfoAccess: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_BiometricInfo: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_QC_Statements: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_SubjectInfoAccess: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ExtendedKeyUsageAny: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ServerAuth: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ClientAuth: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ExtendedUseCodeSigning: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_EmailProtection: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_TimeStamping: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_OCSPSigning: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KERBv5_PKINIT_KP_CLIENT_AUTH: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_KERBv5_PKINIT_KP_KDC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_EKU_IPSec: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_EXTENSION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_IDENTITY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_EMAIL_SIGN: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_EMAIL_ENCRYPT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_DOTMAC_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_ADC_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MACAPPSTORE_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MACAPPSTORE_RECEIPT_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLEID_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLEID_SHARING_CERT_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MOBILE_STORE_SIGNING_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_TEST_MOBILE_STORE_SIGNING_POLICY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_CODE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_CODE_SIGNING_DEV: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_RESOURCE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_ICHAT_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_ICHAT_ENCRYPTION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_SYSTEM_IDENTITY: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_PASSBOOK_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_PROFILE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EKU_QA_PROFILE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_CODE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_APPLE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_ADC_DEV_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_ADC_APPLE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_PASSBOOK_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_MACAPPSTORE_RECEIPT: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_INTERMEDIATE_MARKER: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_WWDR_INTERMEDIATE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_ITMS_INTERMEDIATE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_AAI_INTERMEDIATE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_APPLEID_INTERMEDIATE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_APPLEID_SHARING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_SYSINT2_INTERMEDIATE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_DEVELOPER_AUTHENTICATION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_SERVER_AUTHENTICATION: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_ESCROW_SERVICE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_NetscapeCertType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_NetscapeCertSequence: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_NetscapeSGC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_MicrosoftSGC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLSignedCrlStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLSignedCrlCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLTbsCertListStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLTbsCertListCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLVersion: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLIssuerStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLIssuerNameCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLIssuerNameLDAP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLThisUpdate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLNextUpdate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLRevokedCertificatesStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLRevokedCertificatesCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLNumberOfRevokedCertEntries: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLRevokedEntryStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLRevokedEntryCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLRevokedEntrySerialNumber: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V1CRLRevokedEntryRevocationDate: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryAllExtensionsStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryAllExtensionsCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryNumberOfExtensions: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntrySingleExtensionStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntrySingleExtensionCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryExtensionId: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryExtensionCritical: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryExtensionType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLRevokedEntryExtensionValue: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLAllExtensionsStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLAllExtensionsCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLNumberOfExtensions: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLSingleExtensionStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLSingleExtensionCStruct: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLExtensionId: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLExtensionCritical: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_X509V2CRLExtensionType: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_BASIC: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_NONCE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_CRL: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_RESPONSE: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_NOCHECK: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_ARCHIVE_CUTOFF: SecAsn1Oid;
}
extern "C" {
    pub static CSSMOID_PKIX_OCSP_SERVICE_LOCATOR: SecAsn1Oid;
}
pub const SecKeychainPromptSelector_kSecKeychainPromptRequirePassphase: SecKeychainPromptSelector =
    1;
pub const SecKeychainPromptSelector_kSecKeychainPromptUnsigned: SecKeychainPromptSelector = 16;
pub const SecKeychainPromptSelector_kSecKeychainPromptUnsignedAct: SecKeychainPromptSelector = 32;
pub const SecKeychainPromptSelector_kSecKeychainPromptInvalid: SecKeychainPromptSelector = 64;
pub const SecKeychainPromptSelector_kSecKeychainPromptInvalidAct: SecKeychainPromptSelector = 128;
pub type SecKeychainPromptSelector = uint16;
extern "C" {
    pub fn SecACLGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecACLCreateFromSimpleContents(
        access: SecAccessRef,
        applicationList: CFArrayRef,
        description: CFStringRef,
        promptSelector: *const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR,
        newAcl: *mut SecACLRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLCreateWithSimpleContents(
        access: SecAccessRef,
        applicationList: CFArrayRef,
        description: CFStringRef,
        promptSelector: SecKeychainPromptSelector,
        newAcl: *mut SecACLRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLRemove(aclRef: SecACLRef) -> OSStatus;
}
extern "C" {
    pub fn SecACLCopySimpleContents(
        acl: SecACLRef,
        applicationList: *mut CFArrayRef,
        description: *mut CFStringRef,
        promptSelector: *mut CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLCopyContents(
        acl: SecACLRef,
        applicationList: *mut CFArrayRef,
        description: *mut CFStringRef,
        promptSelector: *mut SecKeychainPromptSelector,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLSetSimpleContents(
        acl: SecACLRef,
        applicationList: CFArrayRef,
        description: CFStringRef,
        promptSelector: *const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLSetContents(
        acl: SecACLRef,
        applicationList: CFArrayRef,
        description: CFStringRef,
        promptSelector: SecKeychainPromptSelector,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLGetAuthorizations(
        acl: SecACLRef,
        tags: *mut CSSM_ACL_AUTHORIZATION_TAG,
        tagCount: *mut uint32,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLCopyAuthorizations(acl: SecACLRef) -> CFArrayRef;
}
extern "C" {
    pub fn SecACLSetAuthorizations(
        acl: SecACLRef,
        tags: *mut CSSM_ACL_AUTHORIZATION_TAG,
        tagCount: uint32,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecACLUpdateAuthorizations(acl: SecACLRef, authorizations: CFArrayRef) -> OSStatus;
}
extern "C" {
    pub static kSecOIDADC_CERT_POLICY: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_CERT_POLICY: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EKU_CODE_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EKU_CODE_SIGNING_DEV: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EKU_ICHAT_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EKU_RESOURCE_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EKU_SYSTEM_IDENTITY: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_APPLE_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_CODE_SIGNING: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE: CFStringRef;
}
extern "C" {
    pub static kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE: CFStringRef;
}
extern "C" {
    pub static kSecOIDAuthorityInfoAccess: CFStringRef;
}
extern "C" {
    pub static kSecOIDAuthorityKeyIdentifier: CFStringRef;
}
extern "C" {
    pub static kSecOIDBasicConstraints: CFStringRef;
}
extern "C" {
    pub static kSecOIDBiometricInfo: CFStringRef;
}
extern "C" {
    pub static kSecOIDCSSMKeyStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDCertIssuer: CFStringRef;
}
extern "C" {
    pub static kSecOIDCertificatePolicies: CFStringRef;
}
extern "C" {
    pub static kSecOIDClientAuth: CFStringRef;
}
extern "C" {
    pub static kSecOIDCollectiveStateProvinceName: CFStringRef;
}
extern "C" {
    pub static kSecOIDCollectiveStreetAddress: CFStringRef;
}
extern "C" {
    pub static kSecOIDCommonName: CFStringRef;
}
extern "C" {
    pub static kSecOIDCountryName: CFStringRef;
}
extern "C" {
    pub static kSecOIDCrlDistributionPoints: CFStringRef;
}
extern "C" {
    pub static kSecOIDCrlNumber: CFStringRef;
}
extern "C" {
    pub static kSecOIDCrlReason: CFStringRef;
}
extern "C" {
    pub static kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT: CFStringRef;
}
extern "C" {
    pub static kSecOIDDOTMAC_CERT_EMAIL_SIGN: CFStringRef;
}
extern "C" {
    pub static kSecOIDDOTMAC_CERT_EXTENSION: CFStringRef;
}
extern "C" {
    pub static kSecOIDDOTMAC_CERT_IDENTITY: CFStringRef;
}
extern "C" {
    pub static kSecOIDDOTMAC_CERT_POLICY: CFStringRef;
}
extern "C" {
    pub static kSecOIDDeltaCrlIndicator: CFStringRef;
}
extern "C" {
    pub static kSecOIDDescription: CFStringRef;
}
extern "C" {
    pub static kSecOIDEKU_IPSec: CFStringRef;
}
extern "C" {
    pub static kSecOIDEmailAddress: CFStringRef;
}
extern "C" {
    pub static kSecOIDEmailProtection: CFStringRef;
}
extern "C" {
    pub static kSecOIDExtendedKeyUsage: CFStringRef;
}
extern "C" {
    pub static kSecOIDExtendedKeyUsageAny: CFStringRef;
}
extern "C" {
    pub static kSecOIDExtendedUseCodeSigning: CFStringRef;
}
extern "C" {
    pub static kSecOIDGivenName: CFStringRef;
}
extern "C" {
    pub static kSecOIDHoldInstructionCode: CFStringRef;
}
extern "C" {
    pub static kSecOIDInvalidityDate: CFStringRef;
}
extern "C" {
    pub static kSecOIDIssuerAltName: CFStringRef;
}
extern "C" {
    pub static kSecOIDIssuingDistributionPoint: CFStringRef;
}
extern "C" {
    pub static kSecOIDIssuingDistributionPoints: CFStringRef;
}
extern "C" {
    pub static kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH: CFStringRef;
}
extern "C" {
    pub static kSecOIDKERBv5_PKINIT_KP_KDC: CFStringRef;
}
extern "C" {
    pub static kSecOIDKeyUsage: CFStringRef;
}
extern "C" {
    pub static kSecOIDLocalityName: CFStringRef;
}
extern "C" {
    pub static kSecOIDMS_NTPrincipalName: CFStringRef;
}
extern "C" {
    pub static kSecOIDMicrosoftSGC: CFStringRef;
}
extern "C" {
    pub static kSecOIDNameConstraints: CFStringRef;
}
extern "C" {
    pub static kSecOIDNetscapeCertSequence: CFStringRef;
}
extern "C" {
    pub static kSecOIDNetscapeCertType: CFStringRef;
}
extern "C" {
    pub static kSecOIDNetscapeSGC: CFStringRef;
}
extern "C" {
    pub static kSecOIDOCSPSigning: CFStringRef;
}
extern "C" {
    pub static kSecOIDOrganizationName: CFStringRef;
}
extern "C" {
    pub static kSecOIDOrganizationalUnitName: CFStringRef;
}
extern "C" {
    pub static kSecOIDPolicyConstraints: CFStringRef;
}
extern "C" {
    pub static kSecOIDPolicyMappings: CFStringRef;
}
extern "C" {
    pub static kSecOIDPrivateKeyUsagePeriod: CFStringRef;
}
extern "C" {
    pub static kSecOIDQC_Statements: CFStringRef;
}
extern "C" {
    pub static kSecOIDSerialNumber: CFStringRef;
}
extern "C" {
    pub static kSecOIDServerAuth: CFStringRef;
}
extern "C" {
    pub static kSecOIDStateProvinceName: CFStringRef;
}
extern "C" {
    pub static kSecOIDStreetAddress: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectAltName: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectDirectoryAttributes: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectEmailAddress: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectInfoAccess: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectKeyIdentifier: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectPicture: CFStringRef;
}
extern "C" {
    pub static kSecOIDSubjectSignatureBitmap: CFStringRef;
}
extern "C" {
    pub static kSecOIDSurname: CFStringRef;
}
extern "C" {
    pub static kSecOIDTimeStamping: CFStringRef;
}
extern "C" {
    pub static kSecOIDTitle: CFStringRef;
}
extern "C" {
    pub static kSecOIDUseExemptions: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1CertificateIssuerUniqueId: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1CertificateSubjectUniqueId: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1IssuerName: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1IssuerNameCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1IssuerNameLDAP: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1IssuerNameStd: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SerialNumber: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1Signature: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SignatureAlgorithm: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SignatureAlgorithmParameters: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SignatureAlgorithmTBS: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SignatureCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SignatureStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectName: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectNameCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectNameLDAP: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectNameStd: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectPublicKey: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectPublicKeyAlgorithm: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectPublicKeyAlgorithmParameters: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1SubjectPublicKeyCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1ValidityNotAfter: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1ValidityNotBefore: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V1Version: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3Certificate: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionCritical: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionId: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionType: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionValue: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionsCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateExtensionsStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3CertificateNumberOfExtensions: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3SignedCertificate: CFStringRef;
}
extern "C" {
    pub static kSecOIDX509V3SignedCertificateCStruct: CFStringRef;
}
extern "C" {
    pub static kSecOIDSRVName: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueSecIdentitySearchRef {
    _unused: [u8; 0],
}
pub type SecIdentitySearchRef = *mut OpaqueSecIdentitySearchRef;
extern "C" {
    pub fn SecIdentitySearchGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecIdentitySearchCreate(
        keychainOrArray: CFTypeRef,
        keyUsage: CSSM_KEYUSE,
        searchRef: *mut SecIdentitySearchRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecIdentitySearchCopyNext(
        searchRef: SecIdentitySearchRef,
        identity: *mut SecIdentityRef,
    ) -> OSStatus;
}
pub const SecItemClass_kSecInternetPasswordItemClass: SecItemClass = 1768842612;
pub const SecItemClass_kSecGenericPasswordItemClass: SecItemClass = 1734700656;
pub const SecItemClass_kSecAppleSharePasswordItemClass: SecItemClass = 1634953328;
pub const SecItemClass_kSecCertificateItemClass: SecItemClass = 2147487744;
pub const SecItemClass_kSecPublicKeyItemClass: SecItemClass = 15;
pub const SecItemClass_kSecPrivateKeyItemClass: SecItemClass = 16;
pub const SecItemClass_kSecSymmetricKeyItemClass: SecItemClass = 17;
pub type SecItemClass = FourCharCode;
pub const SecItemAttr_kSecCreationDateItemAttr: SecItemAttr = 1667522932;
pub const SecItemAttr_kSecModDateItemAttr: SecItemAttr = 1835295092;
pub const SecItemAttr_kSecDescriptionItemAttr: SecItemAttr = 1684370275;
pub const SecItemAttr_kSecCommentItemAttr: SecItemAttr = 1768123764;
pub const SecItemAttr_kSecCreatorItemAttr: SecItemAttr = 1668445298;
pub const SecItemAttr_kSecTypeItemAttr: SecItemAttr = 1954115685;
pub const SecItemAttr_kSecScriptCodeItemAttr: SecItemAttr = 1935897200;
pub const SecItemAttr_kSecLabelItemAttr: SecItemAttr = 1818321516;
pub const SecItemAttr_kSecInvisibleItemAttr: SecItemAttr = 1768846953;
pub const SecItemAttr_kSecNegativeItemAttr: SecItemAttr = 1852139361;
pub const SecItemAttr_kSecCustomIconItemAttr: SecItemAttr = 1668641641;
pub const SecItemAttr_kSecAccountItemAttr: SecItemAttr = 1633903476;
pub const SecItemAttr_kSecServiceItemAttr: SecItemAttr = 1937138533;
pub const SecItemAttr_kSecGenericItemAttr: SecItemAttr = 1734700641;
pub const SecItemAttr_kSecSecurityDomainItemAttr: SecItemAttr = 1935961454;
pub const SecItemAttr_kSecServerItemAttr: SecItemAttr = 1936881266;
pub const SecItemAttr_kSecAuthenticationTypeItemAttr: SecItemAttr = 1635023216;
pub const SecItemAttr_kSecPortItemAttr: SecItemAttr = 1886351988;
pub const SecItemAttr_kSecPathItemAttr: SecItemAttr = 1885434984;
pub const SecItemAttr_kSecVolumeItemAttr: SecItemAttr = 1986817381;
pub const SecItemAttr_kSecAddressItemAttr: SecItemAttr = 1633969266;
pub const SecItemAttr_kSecSignatureItemAttr: SecItemAttr = 1936943463;
pub const SecItemAttr_kSecProtocolItemAttr: SecItemAttr = 1886675820;
pub const SecItemAttr_kSecCertificateType: SecItemAttr = 1668577648;
pub const SecItemAttr_kSecCertificateEncoding: SecItemAttr = 1667591779;
pub const SecItemAttr_kSecCrlType: SecItemAttr = 1668445296;
pub const SecItemAttr_kSecCrlEncoding: SecItemAttr = 1668443747;
pub const SecItemAttr_kSecAlias: SecItemAttr = 1634494835;
pub type SecItemAttr = FourCharCode;
pub type SecAFPServerSignature = [UInt8; 16usize];
pub type SecPublicKeyHash = [UInt8; 20usize];
extern "C" {
    pub fn SecKeychainItemGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecKeychainItemModifyAttributesAndData(
        itemRef: SecKeychainItemRef,
        attrList: *const SecKeychainAttributeList,
        length: UInt32,
        data: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCreateFromContent(
        itemClass: SecItemClass,
        attrList: *mut SecKeychainAttributeList,
        length: UInt32,
        data: *const ::std::os::raw::c_void,
        keychainRef: SecKeychainRef,
        initialAccess: SecAccessRef,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemModifyContent(
        itemRef: SecKeychainItemRef,
        attrList: *const SecKeychainAttributeList,
        length: UInt32,
        data: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCopyContent(
        itemRef: SecKeychainItemRef,
        itemClass: *mut SecItemClass,
        attrList: *mut SecKeychainAttributeList,
        length: *mut UInt32,
        outData: *mut *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemFreeContent(
        attrList: *mut SecKeychainAttributeList,
        data: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCopyAttributesAndData(
        itemRef: SecKeychainItemRef,
        info: *mut SecKeychainAttributeInfo,
        itemClass: *mut SecItemClass,
        attrList: *mut *mut SecKeychainAttributeList,
        length: *mut UInt32,
        outData: *mut *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemFreeAttributesAndData(
        attrList: *mut SecKeychainAttributeList,
        data: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemDelete(itemRef: SecKeychainItemRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCopyKeychain(
        itemRef: SecKeychainItemRef,
        keychainRef: *mut SecKeychainRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCreateCopy(
        itemRef: SecKeychainItemRef,
        destKeychainRef: SecKeychainRef,
        initialAccess: SecAccessRef,
        itemCopy: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCreatePersistentReference(
        itemRef: SecKeychainItemRef,
        persistentItemRef: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCopyFromPersistentReference(
        persistentItemRef: CFDataRef,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemGetDLDBHandle(
        keyItemRef: SecKeychainItemRef,
        dldbHandle: *mut CSSM_DL_DB_HANDLE,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemGetUniqueRecordID(
        itemRef: SecKeychainItemRef,
        uniqueRecordID: *mut *const CSSM_DB_UNIQUE_RECORD,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemCopyAccess(
        itemRef: SecKeychainItemRef,
        access: *mut SecAccessRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainItemSetAccess(itemRef: SecKeychainItemRef, access: SecAccessRef) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSearchGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecKeychainSearchCreateFromAttributes(
        keychainOrArray: CFTypeRef,
        itemClass: SecItemClass,
        attrList: *const SecKeychainAttributeList,
        searchRef: *mut SecKeychainSearchRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecKeychainSearchCopyNext(
        searchRef: SecKeychainSearchRef,
        itemRef: *mut SecKeychainItemRef,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaquePolicySearchRef {
    _unused: [u8; 0],
}
pub type SecPolicySearchRef = *mut OpaquePolicySearchRef;
extern "C" {
    pub fn SecPolicySearchGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecPolicySearchCreate(
        certType: CSSM_CERT_TYPE,
        policyOID: *const SecAsn1Oid,
        value: *const SecAsn1Item,
        searchRef: *mut SecPolicySearchRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecPolicySearchCopyNext(
        searchRef: SecPolicySearchRef,
        policyRef: *mut SecPolicyRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustedApplicationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecTrustedApplicationCreateFromPath(
        path: *const ::std::os::raw::c_char,
        app: *mut SecTrustedApplicationRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustedApplicationCopyData(
        appRef: SecTrustedApplicationRef,
        data: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustedApplicationSetData(
        appRef: SecTrustedApplicationRef,
        data: CFDataRef,
    ) -> OSStatus;
}
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseSignature: SecTrustSettingsKeyUsage = 1;
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseEnDecryptData: SecTrustSettingsKeyUsage =
    2;
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseEnDecryptKey: SecTrustSettingsKeyUsage =
    4;
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseSignCert: SecTrustSettingsKeyUsage = 8;
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseSignRevocation: SecTrustSettingsKeyUsage =
    16;
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseKeyExchange: SecTrustSettingsKeyUsage =
    32;
pub const SecTrustSettingsKeyUsage_kSecTrustSettingsKeyUseAny: SecTrustSettingsKeyUsage =
    4294967295;
pub type SecTrustSettingsKeyUsage = u32;
pub const SecTrustSettingsResult_kSecTrustSettingsResultInvalid: SecTrustSettingsResult = 0;
pub const SecTrustSettingsResult_kSecTrustSettingsResultTrustRoot: SecTrustSettingsResult = 1;
pub const SecTrustSettingsResult_kSecTrustSettingsResultTrustAsRoot: SecTrustSettingsResult = 2;
pub const SecTrustSettingsResult_kSecTrustSettingsResultDeny: SecTrustSettingsResult = 3;
pub const SecTrustSettingsResult_kSecTrustSettingsResultUnspecified: SecTrustSettingsResult = 4;
pub type SecTrustSettingsResult = u32;
pub const SecTrustSettingsDomain_kSecTrustSettingsDomainUser: SecTrustSettingsDomain = 0;
pub const SecTrustSettingsDomain_kSecTrustSettingsDomainAdmin: SecTrustSettingsDomain = 1;
pub const SecTrustSettingsDomain_kSecTrustSettingsDomainSystem: SecTrustSettingsDomain = 2;
pub type SecTrustSettingsDomain = u32;
extern "C" {
    pub fn SecTrustSettingsCopyTrustSettings(
        certRef: SecCertificateRef,
        domain: SecTrustSettingsDomain,
        trustSettings: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSettingsSetTrustSettings(
        certRef: SecCertificateRef,
        domain: SecTrustSettingsDomain,
        trustSettingsDictOrArray: CFTypeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSettingsRemoveTrustSettings(
        certRef: SecCertificateRef,
        domain: SecTrustSettingsDomain,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSettingsCopyCertificates(
        domain: SecTrustSettingsDomain,
        certArray: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSettingsCopyModificationDate(
        certRef: SecCertificateRef,
        domain: SecTrustSettingsDomain,
        modificationDate: *mut CFDateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSettingsCreateExternalRepresentation(
        domain: SecTrustSettingsDomain,
        trustSettings: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecTrustSettingsImportExternalRepresentation(
        domain: SecTrustSettingsDomain,
        trustSettings: CFDataRef,
    ) -> OSStatus;
}
pub const errSecCSUnimplemented: _bindgen_ty_225 = -67072;
pub const errSecCSInvalidObjectRef: _bindgen_ty_225 = -67071;
pub const errSecCSInvalidFlags: _bindgen_ty_225 = -67070;
pub const errSecCSObjectRequired: _bindgen_ty_225 = -67069;
pub const errSecCSStaticCodeNotFound: _bindgen_ty_225 = -67068;
pub const errSecCSUnsupportedGuestAttributes: _bindgen_ty_225 = -67067;
pub const errSecCSInvalidAttributeValues: _bindgen_ty_225 = -67066;
pub const errSecCSNoSuchCode: _bindgen_ty_225 = -67065;
pub const errSecCSMultipleGuests: _bindgen_ty_225 = -67064;
pub const errSecCSGuestInvalid: _bindgen_ty_225 = -67063;
pub const errSecCSUnsigned: _bindgen_ty_225 = -67062;
pub const errSecCSSignatureFailed: _bindgen_ty_225 = -67061;
pub const errSecCSSignatureNotVerifiable: _bindgen_ty_225 = -67060;
pub const errSecCSSignatureUnsupported: _bindgen_ty_225 = -67059;
pub const errSecCSBadDictionaryFormat: _bindgen_ty_225 = -67058;
pub const errSecCSResourcesNotSealed: _bindgen_ty_225 = -67057;
pub const errSecCSResourcesNotFound: _bindgen_ty_225 = -67056;
pub const errSecCSResourcesInvalid: _bindgen_ty_225 = -67055;
pub const errSecCSBadResource: _bindgen_ty_225 = -67054;
pub const errSecCSResourceRulesInvalid: _bindgen_ty_225 = -67053;
pub const errSecCSReqInvalid: _bindgen_ty_225 = -67052;
pub const errSecCSReqUnsupported: _bindgen_ty_225 = -67051;
pub const errSecCSReqFailed: _bindgen_ty_225 = -67050;
pub const errSecCSBadObjectFormat: _bindgen_ty_225 = -67049;
pub const errSecCSInternalError: _bindgen_ty_225 = -67048;
pub const errSecCSHostReject: _bindgen_ty_225 = -67047;
pub const errSecCSNotAHost: _bindgen_ty_225 = -67046;
pub const errSecCSSignatureInvalid: _bindgen_ty_225 = -67045;
pub const errSecCSHostProtocolRelativePath: _bindgen_ty_225 = -67044;
pub const errSecCSHostProtocolContradiction: _bindgen_ty_225 = -67043;
pub const errSecCSHostProtocolDedicationError: _bindgen_ty_225 = -67042;
pub const errSecCSHostProtocolNotProxy: _bindgen_ty_225 = -67041;
pub const errSecCSHostProtocolStateError: _bindgen_ty_225 = -67040;
pub const errSecCSHostProtocolUnrelated: _bindgen_ty_225 = -67039;
pub const errSecCSNotSupported: _bindgen_ty_225 = -67037;
pub const errSecCSCMSTooLarge: _bindgen_ty_225 = -67036;
pub const errSecCSHostProtocolInvalidHash: _bindgen_ty_225 = -67035;
pub const errSecCSStaticCodeChanged: _bindgen_ty_225 = -67034;
pub const errSecCSDBDenied: _bindgen_ty_225 = -67033;
pub const errSecCSDBAccess: _bindgen_ty_225 = -67032;
pub const errSecCSSigDBDenied: _bindgen_ty_225 = -67033;
pub const errSecCSSigDBAccess: _bindgen_ty_225 = -67032;
pub const errSecCSHostProtocolInvalidAttribute: _bindgen_ty_225 = -67031;
pub const errSecCSInfoPlistFailed: _bindgen_ty_225 = -67030;
pub const errSecCSNoMainExecutable: _bindgen_ty_225 = -67029;
pub const errSecCSBadBundleFormat: _bindgen_ty_225 = -67028;
pub const errSecCSNoMatches: _bindgen_ty_225 = -67027;
pub const errSecCSFileHardQuarantined: _bindgen_ty_225 = -67026;
pub const errSecCSOutdated: _bindgen_ty_225 = -67025;
pub const errSecCSDbCorrupt: _bindgen_ty_225 = -67024;
pub const errSecCSResourceDirectoryFailed: _bindgen_ty_225 = -67023;
pub const errSecCSUnsignedNestedCode: _bindgen_ty_225 = -67022;
pub const errSecCSBadNestedCode: _bindgen_ty_225 = -67021;
pub const errSecCSBadCallbackValue: _bindgen_ty_225 = -67020;
pub const errSecCSHelperFailed: _bindgen_ty_225 = -67019;
pub const errSecCSVetoed: _bindgen_ty_225 = -67018;
pub const errSecCSBadLVArch: _bindgen_ty_225 = -67017;
pub const errSecCSResourceNotSupported: _bindgen_ty_225 = -67016;
pub const errSecCSRegularFile: _bindgen_ty_225 = -67015;
pub const errSecCSUnsealedAppRoot: _bindgen_ty_225 = -67014;
pub const errSecCSWeakResourceRules: _bindgen_ty_225 = -67013;
pub const errSecCSDSStoreSymlink: _bindgen_ty_225 = -67012;
pub const errSecCSAmbiguousBundleFormat: _bindgen_ty_225 = -67011;
pub const errSecCSBadMainExecutable: _bindgen_ty_225 = -67010;
pub const errSecCSBadFrameworkVersion: _bindgen_ty_225 = -67009;
pub const errSecCSUnsealedFrameworkRoot: _bindgen_ty_225 = -67008;
pub const errSecCSWeakResourceEnvelope: _bindgen_ty_225 = -67007;
pub const errSecCSCancelled: _bindgen_ty_225 = -67006;
pub const errSecCSInvalidPlatform: _bindgen_ty_225 = -67005;
pub const errSecCSTooBig: _bindgen_ty_225 = -67004;
pub const errSecCSInvalidSymlink: _bindgen_ty_225 = -67003;
pub const errSecCSNotAppLike: _bindgen_ty_225 = -67002;
pub const errSecCSBadDiskImageFormat: _bindgen_ty_225 = -67001;
pub const errSecCSUnsupportedDigestAlgorithm: _bindgen_ty_225 = -67000;
pub const errSecCSInvalidAssociatedFileData: _bindgen_ty_225 = -66999;
pub const errSecCSInvalidTeamIdentifier: _bindgen_ty_225 = -66998;
pub const errSecCSBadTeamIdentifier: _bindgen_ty_225 = -66997;
pub const errSecCSSignatureUntrusted: _bindgen_ty_225 = -66996;
pub const errSecMultipleExecSegments: _bindgen_ty_225 = -66995;
pub const errSecCSInvalidEntitlements: _bindgen_ty_225 = -66994;
pub const errSecCSInvalidRuntimeVersion: _bindgen_ty_225 = -66993;
pub const errSecCSRevokedNotarization: _bindgen_ty_225 = -66992;
pub type _bindgen_ty_225 = OSStatus;
extern "C" {
    pub static kSecCFErrorArchitecture: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorPattern: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorResourceSeal: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorResourceAdded: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorResourceAltered: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorResourceMissing: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorResourceSideband: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorInfoPlist: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorGuestAttributes: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorRequirementSyntax: CFStringRef;
}
extern "C" {
    pub static kSecCFErrorPath: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecCode {
    _unused: [u8; 0],
}
pub type SecCodeRef = *mut __SecCode;
pub type SecStaticCodeRef = *const __SecCode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecRequirement {
    _unused: [u8; 0],
}
pub type SecRequirementRef = *mut __SecRequirement;
pub type SecGuestRef = u_int32_t;
pub const kSecNoGuest: _bindgen_ty_226 = 0;
pub type _bindgen_ty_226 = SecGuestRef;
pub const SecCSFlags_kSecCSDefaultFlags: SecCSFlags = 0;
pub const SecCSFlags_kSecCSConsiderExpiration: SecCSFlags = 2147483648;
pub const SecCSFlags_kSecCSEnforceRevocationChecks: SecCSFlags = 1073741824;
pub const SecCSFlags_kSecCSNoNetworkAccess: SecCSFlags = 536870912;
pub const SecCSFlags_kSecCSReportProgress: SecCSFlags = 268435456;
pub const SecCSFlags_kSecCSCheckTrustedAnchors: SecCSFlags = 134217728;
pub const SecCSFlags_kSecCSQuickCheck: SecCSFlags = 67108864;
pub const SecCSFlags_kSecCSApplyEmbeddedPolicy: SecCSFlags = 33554432;
pub type SecCSFlags = u32;
pub const SecCodeSignatureFlags_kSecCodeSignatureHost: SecCodeSignatureFlags = 1;
pub const SecCodeSignatureFlags_kSecCodeSignatureAdhoc: SecCodeSignatureFlags = 2;
pub const SecCodeSignatureFlags_kSecCodeSignatureForceHard: SecCodeSignatureFlags = 256;
pub const SecCodeSignatureFlags_kSecCodeSignatureForceKill: SecCodeSignatureFlags = 512;
pub const SecCodeSignatureFlags_kSecCodeSignatureForceExpiration: SecCodeSignatureFlags = 1024;
pub const SecCodeSignatureFlags_kSecCodeSignatureRestrict: SecCodeSignatureFlags = 2048;
pub const SecCodeSignatureFlags_kSecCodeSignatureEnforcement: SecCodeSignatureFlags = 4096;
pub const SecCodeSignatureFlags_kSecCodeSignatureLibraryValidation: SecCodeSignatureFlags = 8192;
pub const SecCodeSignatureFlags_kSecCodeSignatureRuntime: SecCodeSignatureFlags = 65536;
pub const SecCodeSignatureFlags_kSecCodeSignatureLinkerSigned: SecCodeSignatureFlags = 131072;
pub type SecCodeSignatureFlags = u32;
pub const SecCodeStatus_kSecCodeStatusValid: SecCodeStatus = 1;
pub const SecCodeStatus_kSecCodeStatusHard: SecCodeStatus = 256;
pub const SecCodeStatus_kSecCodeStatusKill: SecCodeStatus = 512;
pub const SecCodeStatus_kSecCodeStatusDebugged: SecCodeStatus = 268435456;
pub const SecCodeStatus_kSecCodeStatusPlatform: SecCodeStatus = 67108864;
pub type SecCodeStatus = u32;
pub const SecRequirementType_kSecHostRequirementType: SecRequirementType = 1;
pub const SecRequirementType_kSecGuestRequirementType: SecRequirementType = 2;
pub const SecRequirementType_kSecDesignatedRequirementType: SecRequirementType = 3;
pub const SecRequirementType_kSecLibraryRequirementType: SecRequirementType = 4;
pub const SecRequirementType_kSecPluginRequirementType: SecRequirementType = 5;
pub const SecRequirementType_kSecInvalidRequirementType: SecRequirementType = 6;
pub const SecRequirementType_kSecRequirementTypeCount: SecRequirementType = 6;
pub type SecRequirementType = u32;
pub const SecCSDigestAlgorithm_kSecCodeSignatureNoHash: SecCSDigestAlgorithm = 0;
pub const SecCSDigestAlgorithm_kSecCodeSignatureHashSHA1: SecCSDigestAlgorithm = 1;
pub const SecCSDigestAlgorithm_kSecCodeSignatureHashSHA256: SecCSDigestAlgorithm = 2;
pub const SecCSDigestAlgorithm_kSecCodeSignatureHashSHA256Truncated: SecCSDigestAlgorithm = 3;
pub const SecCSDigestAlgorithm_kSecCodeSignatureHashSHA384: SecCSDigestAlgorithm = 4;
pub const SecCSDigestAlgorithm_kSecCodeSignatureHashSHA512: SecCSDigestAlgorithm = 5;
pub type SecCSDigestAlgorithm = u32;
extern "C" {
    pub fn SecStaticCodeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecStaticCodeCreateWithPath(
        path: CFURLRef,
        flags: SecCSFlags,
        staticCode: *mut SecStaticCodeRef,
    ) -> OSStatus;
}
extern "C" {
    pub static kSecCodeAttributeArchitecture: CFStringRef;
}
extern "C" {
    pub static kSecCodeAttributeSubarchitecture: CFStringRef;
}
extern "C" {
    pub static kSecCodeAttributeUniversalFileOffset: CFStringRef;
}
extern "C" {
    pub static kSecCodeAttributeBundleVersion: CFStringRef;
}
extern "C" {
    pub fn SecStaticCodeCreateWithPathAndAttributes(
        path: CFURLRef,
        flags: SecCSFlags,
        attributes: CFDictionaryRef,
        staticCode: *mut SecStaticCodeRef,
    ) -> OSStatus;
}
pub const kSecCSCheckAllArchitectures: _bindgen_ty_227 = 1;
pub const kSecCSDoNotValidateExecutable: _bindgen_ty_227 = 2;
pub const kSecCSDoNotValidateResources: _bindgen_ty_227 = 4;
pub const kSecCSBasicValidateOnly: _bindgen_ty_227 = 6;
pub const kSecCSCheckNestedCode: _bindgen_ty_227 = 8;
pub const kSecCSStrictValidate: _bindgen_ty_227 = 16;
pub const kSecCSFullReport: _bindgen_ty_227 = 32;
pub const kSecCSCheckGatekeeperArchitectures: _bindgen_ty_227 = 65;
pub const kSecCSRestrictSymlinks: _bindgen_ty_227 = 128;
pub const kSecCSRestrictToAppLike: _bindgen_ty_227 = 256;
pub const kSecCSRestrictSidebandData: _bindgen_ty_227 = 512;
pub const kSecCSUseSoftwareSigningCert: _bindgen_ty_227 = 1024;
pub const kSecCSValidatePEH: _bindgen_ty_227 = 2048;
pub const kSecCSSingleThreaded: _bindgen_ty_227 = 4096;
pub const kSecCSAllowNetworkAccess: _bindgen_ty_227 = 65536;
pub const kSecCSFastExecutableValidation: _bindgen_ty_227 = 131072;
pub type _bindgen_ty_227 = u32;
extern "C" {
    pub fn SecStaticCodeCheckValidity(
        staticCode: SecStaticCodeRef,
        flags: SecCSFlags,
        requirement: SecRequirementRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecStaticCodeCheckValidityWithErrors(
        staticCode: SecStaticCodeRef,
        flags: SecCSFlags,
        requirement: SecRequirementRef,
        errors: *mut CFErrorRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecCodeCopySelf(flags: SecCSFlags, self_: *mut SecCodeRef) -> OSStatus;
}
pub const kSecCSUseAllArchitectures: _bindgen_ty_228 = 1;
pub type _bindgen_ty_228 = u32;
extern "C" {
    pub fn SecCodeCopyStaticCode(
        code: SecCodeRef,
        flags: SecCSFlags,
        staticCode: *mut SecStaticCodeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeCopyHost(guest: SecCodeRef, flags: SecCSFlags, host: *mut SecCodeRef)
        -> OSStatus;
}
extern "C" {
    pub static kSecGuestAttributeCanonical: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeHash: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeMachPort: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributePid: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeAudit: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeDynamicCode: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeDynamicCodeInfoPlist: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeArchitecture: CFStringRef;
}
extern "C" {
    pub static kSecGuestAttributeSubarchitecture: CFStringRef;
}
extern "C" {
    pub fn SecCodeCopyGuestWithAttributes(
        host: SecCodeRef,
        attributes: CFDictionaryRef,
        flags: SecCSFlags,
        guest: *mut SecCodeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeCreateWithXPCMessage(
        message: NSObject,
        flags: SecCSFlags,
        target: *mut SecCodeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeCheckValidity(
        code: SecCodeRef,
        flags: SecCSFlags,
        requirement: SecRequirementRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeCheckValidityWithErrors(
        code: SecCodeRef,
        flags: SecCSFlags,
        requirement: SecRequirementRef,
        errors: *mut CFErrorRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeCopyPath(
        staticCode: SecStaticCodeRef,
        flags: SecCSFlags,
        path: *mut CFURLRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeCopyDesignatedRequirement(
        code: SecStaticCodeRef,
        flags: SecCSFlags,
        requirement: *mut SecRequirementRef,
    ) -> OSStatus;
}
pub const kSecCSInternalInformation: _bindgen_ty_229 = 1;
pub const kSecCSSigningInformation: _bindgen_ty_229 = 2;
pub const kSecCSRequirementInformation: _bindgen_ty_229 = 4;
pub const kSecCSDynamicInformation: _bindgen_ty_229 = 8;
pub const kSecCSContentInformation: _bindgen_ty_229 = 16;
pub const kSecCSSkipResourceDirectory: _bindgen_ty_229 = 32;
pub const kSecCSCalculateCMSDigest: _bindgen_ty_229 = 64;
pub type _bindgen_ty_229 = u32;
extern "C" {
    pub static kSecCodeInfoCertificates: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoChangedFiles: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoCMS: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoDesignatedRequirement: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoEntitlements: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoEntitlementsDict: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoFlags: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoFormat: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoDigestAlgorithm: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoDigestAlgorithms: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoPlatformIdentifier: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoIdentifier: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoImplicitDesignatedRequirement: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoDefaultDesignatedLightweightCodeRequirement: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoMainExecutable: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoPList: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoRequirements: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoRequirementData: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoSource: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoStatus: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoTeamIdentifier: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoTime: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoTimestamp: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoTrust: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoUnique: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoCdHashes: CFStringRef;
}
extern "C" {
    pub static kSecCodeInfoRuntimeVersion: CFStringRef;
}
extern "C" {
    pub fn SecCodeCopySigningInformation(
        code: SecStaticCodeRef,
        flags: SecCSFlags,
        information: *mut CFDictionaryRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecCodeMapMemory(code: SecStaticCodeRef, flags: SecCSFlags) -> OSStatus;
}
pub const kSecCSDedicatedHost: _bindgen_ty_230 = 1;
pub const kSecCSGenerateGuestHash: _bindgen_ty_230 = 2;
pub type _bindgen_ty_230 = u32;
extern "C" {
    pub fn SecHostCreateGuest(
        host: SecGuestRef,
        status: u32,
        path: CFURLRef,
        attributes: CFDictionaryRef,
        flags: SecCSFlags,
        newGuest: *mut SecGuestRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecHostRemoveGuest(host: SecGuestRef, guest: SecGuestRef, flags: SecCSFlags)
        -> OSStatus;
}
extern "C" {
    pub fn SecHostSelectGuest(guestRef: SecGuestRef, flags: SecCSFlags) -> OSStatus;
}
extern "C" {
    pub fn SecHostSelectedGuest(flags: SecCSFlags, guestRef: *mut SecGuestRef) -> OSStatus;
}
extern "C" {
    pub fn SecHostSetGuestStatus(
        guestRef: SecGuestRef,
        status: u32,
        attributes: CFDictionaryRef,
        flags: SecCSFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecHostSetHostingPort(hostingPort: mach_port_t, flags: SecCSFlags) -> OSStatus;
}
extern "C" {
    pub fn SecRequirementGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecRequirementCreateWithData(
        data: CFDataRef,
        flags: SecCSFlags,
        requirement: *mut SecRequirementRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecRequirementCreateWithString(
        text: CFStringRef,
        flags: SecCSFlags,
        requirement: *mut SecRequirementRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecRequirementCreateWithStringAndErrors(
        text: CFStringRef,
        flags: SecCSFlags,
        errors: *mut CFErrorRef,
        requirement: *mut SecRequirementRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecRequirementCopyData(
        requirement: SecRequirementRef,
        flags: SecCSFlags,
        data: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecRequirementCopyString(
        requirement: SecRequirementRef,
        flags: SecCSFlags,
        text: *mut CFStringRef,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SecTask {
    _unused: [u8; 0],
}
pub type SecTaskRef = *mut __SecTask;
extern "C" {
    pub fn SecTaskGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecTaskCreateWithAuditToken(
        allocator: CFAllocatorRef,
        token: audit_token_t,
    ) -> SecTaskRef;
}
extern "C" {
    pub fn SecTaskCreateFromSelf(allocator: CFAllocatorRef) -> SecTaskRef;
}
extern "C" {
    pub fn SecTaskCopyValueForEntitlement(
        task: SecTaskRef,
        entitlement: CFStringRef,
        error: *mut CFErrorRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn SecTaskCopyValuesForEntitlements(
        task: SecTaskRef,
        entitlements: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SecTaskCopySigningIdentifier(task: SecTaskRef, error: *mut CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn SecTaskGetCodeSignStatus(task: SecTaskRef) -> u32;
}
extern "C" {
    pub fn AuthorizationRightGet(
        rightName: *const ::std::os::raw::c_char,
        rightDefinition: *mut CFDictionaryRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationRightSet(
        authRef: AuthorizationRef,
        rightName: *const ::std::os::raw::c_char,
        rightDefinition: CFTypeRef,
        descriptionKey: CFStringRef,
        bundle: CFBundleRef,
        localeTableName: CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AuthorizationRightRemove(
        authRef: AuthorizationRef,
        rightName: *const ::std::os::raw::c_char,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CMSDecoder {
    _unused: [u8; 0],
}
pub type CMSDecoderRef = *mut _CMSDecoder;
extern "C" {
    pub fn CMSDecoderGetTypeID() -> CFTypeID;
}
pub const CMSSignerStatus_kCMSSignerUnsigned: CMSSignerStatus = 0;
pub const CMSSignerStatus_kCMSSignerValid: CMSSignerStatus = 1;
pub const CMSSignerStatus_kCMSSignerNeedsDetachedContent: CMSSignerStatus = 2;
pub const CMSSignerStatus_kCMSSignerInvalidSignature: CMSSignerStatus = 3;
pub const CMSSignerStatus_kCMSSignerInvalidCert: CMSSignerStatus = 4;
pub const CMSSignerStatus_kCMSSignerInvalidIndex: CMSSignerStatus = 5;
pub type CMSSignerStatus = u32;
extern "C" {
    pub fn CMSDecoderCreate(cmsDecoderOut: *mut CMSDecoderRef) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderUpdateMessage(
        cmsDecoder: CMSDecoderRef,
        msgBytes: *const ::std::os::raw::c_void,
        msgBytesLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderFinalizeMessage(cmsDecoder: CMSDecoderRef) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderSetDetachedContent(
        cmsDecoder: CMSDecoderRef,
        detachedContent: CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopyDetachedContent(
        cmsDecoder: CMSDecoderRef,
        detachedContentOut: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderSetSearchKeychain(
        cmsDecoder: CMSDecoderRef,
        keychainOrArray: CFTypeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderGetNumSigners(
        cmsDecoder: CMSDecoderRef,
        numSignersOut: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerStatus(
        cmsDecoder: CMSDecoderRef,
        signerIndex: usize,
        policyOrArray: CFTypeRef,
        evaluateSecTrust: Boolean,
        signerStatusOut: *mut CMSSignerStatus,
        secTrustOut: *mut SecTrustRef,
        certVerifyResultCodeOut: *mut OSStatus,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerEmailAddress(
        cmsDecoder: CMSDecoderRef,
        signerIndex: usize,
        signerEmailAddressOut: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerCert(
        cmsDecoder: CMSDecoderRef,
        signerIndex: usize,
        signerCertOut: *mut SecCertificateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderIsContentEncrypted(
        cmsDecoder: CMSDecoderRef,
        isEncryptedOut: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopyEncapsulatedContentType(
        cmsDecoder: CMSDecoderRef,
        eContentTypeOut: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopyAllCerts(cmsDecoder: CMSDecoderRef, certsOut: *mut CFArrayRef)
        -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopyContent(cmsDecoder: CMSDecoderRef, contentOut: *mut CFDataRef)
        -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerSigningTime(
        cmsDecoder: CMSDecoderRef,
        signerIndex: usize,
        signingTime: *mut CFAbsoluteTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerTimestamp(
        cmsDecoder: CMSDecoderRef,
        signerIndex: usize,
        timestamp: *mut CFAbsoluteTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerTimestampWithPolicy(
        cmsDecoder: CMSDecoderRef,
        timeStampPolicy: CFTypeRef,
        signerIndex: usize,
        timestamp: *mut CFAbsoluteTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSDecoderCopySignerTimestampCertificates(
        cmsDecoder: CMSDecoderRef,
        signerIndex: usize,
        certificateRefs: *mut CFArrayRef,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CMSEncoder {
    _unused: [u8; 0],
}
pub type CMSEncoderRef = *mut _CMSEncoder;
extern "C" {
    pub fn CMSEncoderGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CMSEncoderCreate(cmsEncoderOut: *mut CMSEncoderRef) -> OSStatus;
}
extern "C" {
    pub static kCMSEncoderDigestAlgorithmSHA1: CFStringRef;
}
extern "C" {
    pub static kCMSEncoderDigestAlgorithmSHA256: CFStringRef;
}
extern "C" {
    pub fn CMSEncoderSetSignerAlgorithm(
        cmsEncoder: CMSEncoderRef,
        digestAlgorithm: CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderAddSigners(cmsEncoder: CMSEncoderRef, signerOrArray: CFTypeRef) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopySigners(
        cmsEncoder: CMSEncoderRef,
        signersOut: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderAddRecipients(
        cmsEncoder: CMSEncoderRef,
        recipientOrArray: CFTypeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopyRecipients(
        cmsEncoder: CMSEncoderRef,
        recipientsOut: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderSetHasDetachedContent(
        cmsEncoder: CMSEncoderRef,
        detachedContent: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderGetHasDetachedContent(
        cmsEncoder: CMSEncoderRef,
        detachedContentOut: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderSetEncapsulatedContentType(
        cmsEncoder: CMSEncoderRef,
        eContentType: *const SecAsn1Oid,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderSetEncapsulatedContentTypeOID(
        cmsEncoder: CMSEncoderRef,
        eContentTypeOID: CFTypeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopyEncapsulatedContentType(
        cmsEncoder: CMSEncoderRef,
        eContentTypeOut: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderAddSupportingCerts(
        cmsEncoder: CMSEncoderRef,
        certOrArray: CFTypeRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopySupportingCerts(
        cmsEncoder: CMSEncoderRef,
        certsOut: *mut CFArrayRef,
    ) -> OSStatus;
}
pub const CMSSignedAttributes_kCMSAttrNone: CMSSignedAttributes = 0;
pub const CMSSignedAttributes_kCMSAttrSmimeCapabilities: CMSSignedAttributes = 1;
pub const CMSSignedAttributes_kCMSAttrSmimeEncryptionKeyPrefs: CMSSignedAttributes = 2;
pub const CMSSignedAttributes_kCMSAttrSmimeMSEncryptionKeyPrefs: CMSSignedAttributes = 4;
pub const CMSSignedAttributes_kCMSAttrSigningTime: CMSSignedAttributes = 8;
pub const CMSSignedAttributes_kCMSAttrAppleCodesigningHashAgility: CMSSignedAttributes = 16;
pub const CMSSignedAttributes_kCMSAttrAppleCodesigningHashAgilityV2: CMSSignedAttributes = 32;
pub const CMSSignedAttributes_kCMSAttrAppleExpirationTime: CMSSignedAttributes = 64;
pub type CMSSignedAttributes = u32;
extern "C" {
    pub fn CMSEncoderAddSignedAttributes(
        cmsEncoder: CMSEncoderRef,
        signedAttributes: CMSSignedAttributes,
    ) -> OSStatus;
}
pub const CMSCertificateChainMode_kCMSCertificateNone: CMSCertificateChainMode = 0;
pub const CMSCertificateChainMode_kCMSCertificateSignerOnly: CMSCertificateChainMode = 1;
pub const CMSCertificateChainMode_kCMSCertificateChain: CMSCertificateChainMode = 2;
pub const CMSCertificateChainMode_kCMSCertificateChainWithRoot: CMSCertificateChainMode = 3;
pub const CMSCertificateChainMode_kCMSCertificateChainWithRootOrFail: CMSCertificateChainMode = 4;
pub type CMSCertificateChainMode = u32;
extern "C" {
    pub fn CMSEncoderSetCertificateChainMode(
        cmsEncoder: CMSEncoderRef,
        chainMode: CMSCertificateChainMode,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderGetCertificateChainMode(
        cmsEncoder: CMSEncoderRef,
        chainModeOut: *mut CMSCertificateChainMode,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderUpdateContent(
        cmsEncoder: CMSEncoderRef,
        content: *const ::std::os::raw::c_void,
        contentLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopyEncodedContent(
        cmsEncoder: CMSEncoderRef,
        encodedContentOut: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncode(
        signers: CFTypeRef,
        recipients: CFTypeRef,
        eContentType: *const SecAsn1Oid,
        detachedContent: Boolean,
        signedAttributes: CMSSignedAttributes,
        content: *const ::std::os::raw::c_void,
        contentLen: usize,
        encodedContentOut: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncodeContent(
        signers: CFTypeRef,
        recipients: CFTypeRef,
        eContentTypeOID: CFTypeRef,
        detachedContent: Boolean,
        signedAttributes: CMSSignedAttributes,
        content: *const ::std::os::raw::c_void,
        contentLen: usize,
        encodedContentOut: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopySignerTimestamp(
        cmsEncoder: CMSEncoderRef,
        signerIndex: usize,
        timestamp: *mut CFAbsoluteTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CMSEncoderCopySignerTimestampWithPolicy(
        cmsEncoder: CMSEncoderRef,
        timeStampPolicy: CFTypeRef,
        signerIndex: usize,
        timestamp: *mut CFAbsoluteTime,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SSLContext {
    _unused: [u8; 0],
}
pub type SSLContextRef = *mut SSLContext;
pub type SSLConnectionRef = *const ::std::os::raw::c_void;
pub const SSLSessionOption_kSSLSessionOptionBreakOnServerAuth: SSLSessionOption = 0;
pub const SSLSessionOption_kSSLSessionOptionBreakOnCertRequested: SSLSessionOption = 1;
pub const SSLSessionOption_kSSLSessionOptionBreakOnClientAuth: SSLSessionOption = 2;
pub const SSLSessionOption_kSSLSessionOptionFalseStart: SSLSessionOption = 3;
pub const SSLSessionOption_kSSLSessionOptionSendOneByteRecord: SSLSessionOption = 4;
pub const SSLSessionOption_kSSLSessionOptionAllowServerIdentityChange: SSLSessionOption = 5;
pub const SSLSessionOption_kSSLSessionOptionFallback: SSLSessionOption = 6;
pub const SSLSessionOption_kSSLSessionOptionBreakOnClientHello: SSLSessionOption = 7;
pub const SSLSessionOption_kSSLSessionOptionAllowRenegotiation: SSLSessionOption = 8;
pub const SSLSessionOption_kSSLSessionOptionEnableSessionTickets: SSLSessionOption = 9;
pub type SSLSessionOption = ::std::os::raw::c_int;
pub const SSLSessionState_kSSLIdle: SSLSessionState = 0;
pub const SSLSessionState_kSSLHandshake: SSLSessionState = 1;
pub const SSLSessionState_kSSLConnected: SSLSessionState = 2;
pub const SSLSessionState_kSSLClosed: SSLSessionState = 3;
pub const SSLSessionState_kSSLAborted: SSLSessionState = 4;
pub type SSLSessionState = ::std::os::raw::c_int;
pub const SSLClientCertificateState_kSSLClientCertNone: SSLClientCertificateState = 0;
pub const SSLClientCertificateState_kSSLClientCertRequested: SSLClientCertificateState = 1;
pub const SSLClientCertificateState_kSSLClientCertSent: SSLClientCertificateState = 2;
pub const SSLClientCertificateState_kSSLClientCertRejected: SSLClientCertificateState = 3;
pub type SSLClientCertificateState = ::std::os::raw::c_int;
pub type SSLReadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        connection: SSLConnectionRef,
        data: *mut ::std::os::raw::c_void,
        dataLength: *mut usize,
    ) -> OSStatus,
>;
pub type SSLWriteFunc = ::std::option::Option<
    unsafe extern "C" fn(
        connection: SSLConnectionRef,
        data: *const ::std::os::raw::c_void,
        dataLength: *mut usize,
    ) -> OSStatus,
>;
pub const SSLProtocolSide_kSSLServerSide: SSLProtocolSide = 0;
pub const SSLProtocolSide_kSSLClientSide: SSLProtocolSide = 1;
pub type SSLProtocolSide = ::std::os::raw::c_int;
pub const SSLConnectionType_kSSLStreamType: SSLConnectionType = 0;
pub const SSLConnectionType_kSSLDatagramType: SSLConnectionType = 1;
pub type SSLConnectionType = ::std::os::raw::c_int;
extern "C" {
    pub static kSSLSessionConfig_default: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_ATSv1: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_ATSv1_noPFS: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_standard: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_RC4_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_TLSv1_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_TLSv1_RC4_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_legacy: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_legacy_DHE: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_anonymous: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_3DES_fallback: CFStringRef;
}
extern "C" {
    pub static kSSLSessionConfig_TLSv1_3DES_fallback: CFStringRef;
}
extern "C" {
    pub fn SSLContextGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SSLCreateContext(
        alloc: CFAllocatorRef,
        protocolSide: SSLProtocolSide,
        connectionType: SSLConnectionType,
    ) -> SSLContextRef;
}
extern "C" {
    pub fn SSLNewContext(isServer: Boolean, contextPtr: *mut SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLDisposeContext(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLGetSessionState(context: SSLContextRef, state: *mut SSLSessionState) -> OSStatus;
}
extern "C" {
    pub fn SSLSetSessionOption(
        context: SSLContextRef,
        option: SSLSessionOption,
        value: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetSessionOption(
        context: SSLContextRef,
        option: SSLSessionOption,
        value: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetIOFuncs(
        context: SSLContextRef,
        readFunc: SSLReadFunc,
        writeFunc: SSLWriteFunc,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetSessionConfig(context: SSLContextRef, config: CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetProtocolVersionMin(context: SSLContextRef, minVersion: SSLProtocol) -> OSStatus;
}
extern "C" {
    pub fn SSLGetProtocolVersionMin(
        context: SSLContextRef,
        minVersion: *mut SSLProtocol,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetProtocolVersionMax(context: SSLContextRef, maxVersion: SSLProtocol) -> OSStatus;
}
extern "C" {
    pub fn SSLGetProtocolVersionMax(
        context: SSLContextRef,
        maxVersion: *mut SSLProtocol,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetProtocolVersionEnabled(
        context: SSLContextRef,
        protocol: SSLProtocol,
        enable: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetProtocolVersionEnabled(
        context: SSLContextRef,
        protocol: SSLProtocol,
        enable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetProtocolVersion(context: SSLContextRef, version: SSLProtocol) -> OSStatus;
}
extern "C" {
    pub fn SSLGetProtocolVersion(context: SSLContextRef, protocol: *mut SSLProtocol) -> OSStatus;
}
extern "C" {
    pub fn SSLSetCertificate(context: SSLContextRef, certRefs: CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetConnection(context: SSLContextRef, connection: SSLConnectionRef) -> OSStatus;
}
extern "C" {
    pub fn SSLGetConnection(context: SSLContextRef, connection: *mut SSLConnectionRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetPeerDomainName(
        context: SSLContextRef,
        peerName: *const ::std::os::raw::c_char,
        peerNameLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetPeerDomainNameLength(context: SSLContextRef, peerNameLen: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLGetPeerDomainName(
        context: SSLContextRef,
        peerName: *mut ::std::os::raw::c_char,
        peerNameLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyRequestedPeerNameLength(ctx: SSLContextRef, peerNameLen: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyRequestedPeerName(
        context: SSLContextRef,
        peerName: *mut ::std::os::raw::c_char,
        peerNameLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetDatagramHelloCookie(
        dtlsContext: SSLContextRef,
        cookie: *const ::std::os::raw::c_void,
        cookieLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: usize) -> OSStatus;
}
extern "C" {
    pub fn SSLGetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: *mut usize)
        -> OSStatus;
}
extern "C" {
    pub fn SSLGetNegotiatedProtocolVersion(
        context: SSLContextRef,
        protocol: *mut SSLProtocol,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetNumberSupportedCiphers(context: SSLContextRef, numCiphers: *mut usize)
        -> OSStatus;
}
extern "C" {
    pub fn SSLGetSupportedCiphers(
        context: SSLContextRef,
        ciphers: *mut SSLCipherSuite,
        numCiphers: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetNumberEnabledCiphers(context: SSLContextRef, numCiphers: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLSetEnabledCiphers(
        context: SSLContextRef,
        ciphers: *const SSLCipherSuite,
        numCiphers: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetEnabledCiphers(
        context: SSLContextRef,
        ciphers: *mut SSLCipherSuite,
        numCiphers: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetSessionTicketsEnabled(context: SSLContextRef, enabled: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLSetEnableCertVerify(context: SSLContextRef, enableVerify: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLGetEnableCertVerify(context: SSLContextRef, enableVerify: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLSetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLGetAllowsExpiredCerts(
        context: SSLContextRef,
        allowsExpired: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLGetAllowsExpiredRoots(
        context: SSLContextRef,
        allowsExpired: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetAllowsAnyRoot(context: SSLContextRef, anyRoot: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLGetAllowsAnyRoot(context: SSLContextRef, anyRoot: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLSetTrustedRoots(
        context: SSLContextRef,
        trustedRoots: CFArrayRef,
        replaceExisting: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyTrustedRoots(context: SSLContextRef, trustedRoots: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyPeerCertificates(context: SSLContextRef, certs: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyPeerTrust(context: SSLContextRef, trust: *mut SecTrustRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetPeerID(
        context: SSLContextRef,
        peerID: *const ::std::os::raw::c_void,
        peerIDLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetPeerID(
        context: SSLContextRef,
        peerID: *mut *const ::std::os::raw::c_void,
        peerIDLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetNegotiatedCipher(
        context: SSLContextRef,
        cipherSuite: *mut SSLCipherSuite,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetALPNProtocols(context: SSLContextRef, protocols: CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyALPNProtocols(context: SSLContextRef, protocols: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetOCSPResponse(context: SSLContextRef, response: CFDataRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetEncryptionCertificate(context: SSLContextRef, certRefs: CFArrayRef) -> OSStatus;
}
pub const SSLAuthenticate_kNeverAuthenticate: SSLAuthenticate = 0;
pub const SSLAuthenticate_kAlwaysAuthenticate: SSLAuthenticate = 1;
pub const SSLAuthenticate_kTryAuthenticate: SSLAuthenticate = 2;
pub type SSLAuthenticate = ::std::os::raw::c_int;
extern "C" {
    pub fn SSLSetClientSideAuthenticate(context: SSLContextRef, auth: SSLAuthenticate) -> OSStatus;
}
extern "C" {
    pub fn SSLAddDistinguishedName(
        context: SSLContextRef,
        derDN: *const ::std::os::raw::c_void,
        derDNLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetCertificateAuthorities(
        context: SSLContextRef,
        certificateOrArray: CFTypeRef,
        replaceExisting: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyCertificateAuthorities(
        context: SSLContextRef,
        certificates: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLCopyDistinguishedNames(context: SSLContextRef, names: *mut CFArrayRef) -> OSStatus;
}
extern "C" {
    pub fn SSLGetClientCertificateState(
        context: SSLContextRef,
        clientState: *mut SSLClientCertificateState,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetDiffieHellmanParams(
        context: SSLContextRef,
        dhParams: *const ::std::os::raw::c_void,
        dhParamsLen: usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetDiffieHellmanParams(
        context: SSLContextRef,
        dhParams: *mut *const ::std::os::raw::c_void,
        dhParamsLen: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLSetRsaBlinding(context: SSLContextRef, blinding: Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLGetRsaBlinding(context: SSLContextRef, blinding: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn SSLHandshake(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLReHandshake(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLWrite(
        context: SSLContextRef,
        data: *const ::std::os::raw::c_void,
        dataLength: usize,
        processed: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLRead(
        context: SSLContextRef,
        data: *mut ::std::os::raw::c_void,
        dataLength: usize,
        processed: *mut usize,
    ) -> OSStatus;
}
extern "C" {
    pub fn SSLGetBufferedReadSize(context: SSLContextRef, bufferSize: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLGetDatagramWriteSize(dtlsContext: SSLContextRef, bufSize: *mut usize) -> OSStatus;
}
extern "C" {
    pub fn SSLClose(context: SSLContextRef) -> OSStatus;
}
extern "C" {
    pub fn SSLSetError(context: SSLContextRef, status: OSStatus) -> OSStatus;
}
extern "C" {
    pub static kSecTransformErrorDomain: CFStringRef;
}
extern "C" {
    pub static kSecTransformPreviousErrorKey: CFStringRef;
}
extern "C" {
    pub static kSecTransformAbortOriginatorKey: CFStringRef;
}
pub const kSecTransformErrorAttributeNotFound: _bindgen_ty_231 = 1;
pub const kSecTransformErrorInvalidOperation: _bindgen_ty_231 = 2;
pub const kSecTransformErrorNotInitializedCorrectly: _bindgen_ty_231 = 3;
pub const kSecTransformErrorMoreThanOneOutput: _bindgen_ty_231 = 4;
pub const kSecTransformErrorInvalidInputDictionary: _bindgen_ty_231 = 5;
pub const kSecTransformErrorInvalidAlgorithm: _bindgen_ty_231 = 6;
pub const kSecTransformErrorInvalidLength: _bindgen_ty_231 = 7;
pub const kSecTransformErrorInvalidType: _bindgen_ty_231 = 8;
pub const kSecTransformErrorInvalidInput: _bindgen_ty_231 = 10;
pub const kSecTransformErrorNameAlreadyRegistered: _bindgen_ty_231 = 11;
pub const kSecTransformErrorUnsupportedAttribute: _bindgen_ty_231 = 12;
pub const kSecTransformOperationNotSupportedOnGroup: _bindgen_ty_231 = 13;
pub const kSecTransformErrorMissingParameter: _bindgen_ty_231 = 14;
pub const kSecTransformErrorInvalidConnection: _bindgen_ty_231 = 15;
pub const kSecTransformTransformIsExecuting: _bindgen_ty_231 = 16;
pub const kSecTransformInvalidOverride: _bindgen_ty_231 = 17;
pub const kSecTransformTransformIsNotRegistered: _bindgen_ty_231 = 18;
pub const kSecTransformErrorAbortInProgress: _bindgen_ty_231 = 19;
pub const kSecTransformErrorAborted: _bindgen_ty_231 = 20;
pub const kSecTransformInvalidArgument: _bindgen_ty_231 = 21;
pub type _bindgen_ty_231 = CFIndex;
pub type SecTransformRef = CFTypeRef;
pub type SecGroupTransformRef = CFTypeRef;
extern "C" {
    pub fn SecTransformGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecGroupTransformGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kSecTransformInputAttributeName: CFStringRef;
}
extern "C" {
    pub static kSecTransformOutputAttributeName: CFStringRef;
}
extern "C" {
    pub static kSecTransformDebugAttributeName: CFStringRef;
}
extern "C" {
    pub static kSecTransformTransformName: CFStringRef;
}
extern "C" {
    pub static kSecTransformAbortAttributeName: CFStringRef;
}
extern "C" {
    pub fn SecTransformCreateFromExternalRepresentation(
        dictionary: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub fn SecTransformCopyExternalRepresentation(transformRef: SecTransformRef)
        -> CFDictionaryRef;
}
extern "C" {
    pub fn SecTransformCreateGroupTransform() -> SecGroupTransformRef;
}
extern "C" {
    pub fn SecTransformConnectTransforms(
        sourceTransformRef: SecTransformRef,
        sourceAttributeName: CFStringRef,
        destinationTransformRef: SecTransformRef,
        destinationAttributeName: CFStringRef,
        group: SecGroupTransformRef,
        error: *mut CFErrorRef,
    ) -> SecGroupTransformRef;
}
extern "C" {
    pub fn SecTransformSetAttribute(
        transformRef: SecTransformRef,
        key: CFStringRef,
        value: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SecTransformGetAttribute(transformRef: SecTransformRef, key: CFStringRef) -> CFTypeRef;
}
extern "C" {
    pub fn SecTransformFindByName(
        transform: SecGroupTransformRef,
        name: CFStringRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub fn SecTransformExecute(
        transformRef: SecTransformRef,
        errorRef: *mut CFErrorRef,
    ) -> CFTypeRef;
}
pub type SecMessageBlock = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn SecTransformExecuteAsync(
        transformRef: SecTransformRef,
        deliveryQueue: NSObject,
        deliveryBlock: SecMessageBlock,
    );
}
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeValue:
    SecTransformMetaAttributeType = 0;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeName:
    SecTransformMetaAttributeType = 1;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeRef:
    SecTransformMetaAttributeType = 2;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeRequired:
    SecTransformMetaAttributeType = 3;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeRequiresOutboundConnection:
    SecTransformMetaAttributeType = 4;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeDeferred:
    SecTransformMetaAttributeType = 5;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeStream:
    SecTransformMetaAttributeType = 6;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeCanCycle:
    SecTransformMetaAttributeType = 7;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeExternalize:
    SecTransformMetaAttributeType = 8;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeHasOutboundConnections:
    SecTransformMetaAttributeType = 9;
pub const SecTransformMetaAttributeType_kSecTransformMetaAttributeHasInboundConnection:
    SecTransformMetaAttributeType = 10;
pub type SecTransformMetaAttributeType = CFIndex;
pub type SecTransformAttributeRef = CFTypeRef;
pub type SecTransformStringOrAttributeRef = CFTypeRef;
pub type SecTransformActionBlock = *mut ::std::os::raw::c_void;
pub type SecTransformAttributeActionBlock = *mut ::std::os::raw::c_void;
pub type SecTransformDataBlock = *mut ::std::os::raw::c_void;
pub type SecTransformInstanceBlock = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueSecTransformImplementation {
    _unused: [u8; 0],
}
pub type SecTransformImplementationRef = *const OpaqueSecTransformImplementation;
extern "C" {
    pub fn SecTransformSetAttributeAction(
        ref_: SecTransformImplementationRef,
        action: CFStringRef,
        attribute: SecTransformStringOrAttributeRef,
        newAction: SecTransformAttributeActionBlock,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn SecTransformSetDataAction(
        ref_: SecTransformImplementationRef,
        action: CFStringRef,
        newAction: SecTransformDataBlock,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn SecTransformSetTransformAction(
        ref_: SecTransformImplementationRef,
        action: CFStringRef,
        newAction: SecTransformActionBlock,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn SecTranformCustomGetAttribute(
        ref_: SecTransformImplementationRef,
        attribute: SecTransformStringOrAttributeRef,
        type_: SecTransformMetaAttributeType,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn SecTransformCustomSetAttribute(
        ref_: SecTransformImplementationRef,
        attribute: SecTransformStringOrAttributeRef,
        type_: SecTransformMetaAttributeType,
        value: CFTypeRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn SecTransformPushbackAttribute(
        ref_: SecTransformImplementationRef,
        attribute: SecTransformStringOrAttributeRef,
        value: CFTypeRef,
    ) -> CFTypeRef;
}
pub type SecTransformCreateFP = ::std::option::Option<
    unsafe extern "C" fn(
        name: CFStringRef,
        newTransform: SecTransformRef,
        ref_: SecTransformImplementationRef,
    ) -> SecTransformInstanceBlock,
>;
extern "C" {
    pub static kSecTransformActionCanExecute: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionStartingExecution: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionFinalize: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionExternalizeExtraData: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionProcessData: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionInternalizeExtraData: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionAttributeNotification: CFStringRef;
}
extern "C" {
    pub static kSecTransformActionAttributeValidation: CFStringRef;
}
extern "C" {
    pub fn SecTransformRegister(
        uniqueName: CFStringRef,
        createTransformFunction: SecTransformCreateFP,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SecTransformCreate(name: CFStringRef, error: *mut CFErrorRef) -> SecTransformRef;
}
extern "C" {
    pub fn SecTransformNoData() -> CFTypeRef;
}
extern "C" {
    pub static kSecBase64Encoding: CFStringRef;
}
extern "C" {
    pub static kSecBase32Encoding: CFStringRef;
}
extern "C" {
    pub static kSecZLibEncoding: CFStringRef;
}
extern "C" {
    pub static kSecEncodeTypeAttribute: CFStringRef;
}
extern "C" {
    pub static kSecLineLength64: CFStringRef;
}
extern "C" {
    pub static kSecLineLength76: CFStringRef;
}
extern "C" {
    pub static kSecEncodeLineLengthAttribute: CFStringRef;
}
extern "C" {
    pub static kSecCompressionRatio: CFStringRef;
}
extern "C" {
    pub fn SecEncodeTransformCreate(
        encodeType: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub static kSecDecodeTypeAttribute: CFStringRef;
}
extern "C" {
    pub fn SecDecodeTransformCreate(
        DecodeType: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub static kSecDigestMD2: CFStringRef;
}
extern "C" {
    pub static kSecDigestMD4: CFStringRef;
}
extern "C" {
    pub static kSecDigestMD5: CFStringRef;
}
extern "C" {
    pub static kSecDigestSHA1: CFStringRef;
}
extern "C" {
    pub static kSecDigestSHA2: CFStringRef;
}
extern "C" {
    pub static kSecDigestHMACMD5: CFStringRef;
}
extern "C" {
    pub static kSecDigestHMACSHA1: CFStringRef;
}
extern "C" {
    pub static kSecDigestHMACSHA2: CFStringRef;
}
extern "C" {
    pub static kSecDigestTypeAttribute: CFStringRef;
}
extern "C" {
    pub static kSecDigestLengthAttribute: CFStringRef;
}
extern "C" {
    pub static kSecDigestHMACKeyAttribute: CFStringRef;
}
extern "C" {
    pub fn SecDigestTransformCreate(
        digestType: CFTypeRef,
        digestLength: CFIndex,
        error: *mut CFErrorRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub fn SecDigestTransformGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kSecPaddingNoneKey: CFStringRef;
}
extern "C" {
    pub static kSecPaddingPKCS1Key: CFStringRef;
}
extern "C" {
    pub static kSecPaddingPKCS5Key: CFStringRef;
}
extern "C" {
    pub static kSecPaddingPKCS7Key: CFStringRef;
}
extern "C" {
    pub static kSecPaddingOAEPKey: CFStringRef;
}
extern "C" {
    pub static kSecModeNoneKey: CFStringRef;
}
extern "C" {
    pub static kSecModeECBKey: CFStringRef;
}
extern "C" {
    pub static kSecModeCBCKey: CFStringRef;
}
extern "C" {
    pub static kSecModeCFBKey: CFStringRef;
}
extern "C" {
    pub static kSecModeOFBKey: CFStringRef;
}
extern "C" {
    pub static kSecEncryptKey: CFStringRef;
}
extern "C" {
    pub static kSecPaddingKey: CFStringRef;
}
extern "C" {
    pub static kSecIVKey: CFStringRef;
}
extern "C" {
    pub static kSecEncryptionMode: CFStringRef;
}
extern "C" {
    pub static kSecOAEPMessageLengthAttributeName: CFStringRef;
}
extern "C" {
    pub static kSecOAEPEncodingParametersAttributeName: CFStringRef;
}
extern "C" {
    pub static kSecOAEPMGF1DigestAlgorithmAttributeName: CFStringRef;
}
extern "C" {
    pub fn SecEncryptTransformCreate(keyRef: SecKeyRef, error: *mut CFErrorRef) -> SecTransformRef;
}
extern "C" {
    pub fn SecDecryptTransformCreate(keyRef: SecKeyRef, error: *mut CFErrorRef) -> SecTransformRef;
}
extern "C" {
    pub fn SecDecryptTransformGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SecEncryptTransformGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kSecKeyAttributeName: CFStringRef;
}
extern "C" {
    pub static mut kSecSignatureAttributeName: CFStringRef;
}
extern "C" {
    pub static mut kSecInputIsAttributeName: CFStringRef;
}
extern "C" {
    pub static kSecInputIsPlainText: CFStringRef;
}
extern "C" {
    pub static mut kSecInputIsDigest: CFStringRef;
}
extern "C" {
    pub static mut kSecInputIsRaw: CFStringRef;
}
extern "C" {
    pub fn SecSignTransformCreate(key: SecKeyRef, error: *mut CFErrorRef) -> SecTransformRef;
}
extern "C" {
    pub fn SecVerifyTransformCreate(
        key: SecKeyRef,
        signature: CFDataRef,
        error: *mut CFErrorRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub fn SecTransformCreateReadTransformWithReadStream(
        inputStream: CFReadStreamRef,
    ) -> SecTransformRef;
}
extern "C" {
    pub static oidRsa: DERItem;
}
extern "C" {
    pub static oidMd2Rsa: DERItem;
}
extern "C" {
    pub static oidMd4Rsa: DERItem;
}
extern "C" {
    pub static oidMd5Rsa: DERItem;
}
extern "C" {
    pub static oidSha1Rsa: DERItem;
}
extern "C" {
    pub static oidSha256Rsa: DERItem;
}
extern "C" {
    pub static oidSha384Rsa: DERItem;
}
extern "C" {
    pub static oidSha512Rsa: DERItem;
}
extern "C" {
    pub static oidSha224Rsa: DERItem;
}
extern "C" {
    pub static oidEcPubKey: DERItem;
}
extern "C" {
    pub static oidSha1Ecdsa: DERItem;
}
extern "C" {
    pub static oidSha224Ecdsa: DERItem;
}
extern "C" {
    pub static oidSha256Ecdsa: DERItem;
}
extern "C" {
    pub static oidSha384Ecdsa: DERItem;
}
extern "C" {
    pub static oidSha512Ecdsa: DERItem;
}
extern "C" {
    pub static oidSha1Dsa: DERItem;
}
extern "C" {
    pub static oidMd2: DERItem;
}
extern "C" {
    pub static oidMd4: DERItem;
}
extern "C" {
    pub static oidMd5: DERItem;
}
extern "C" {
    pub static oidSha1: DERItem;
}
extern "C" {
    pub static oidSha1DsaOIW: DERItem;
}
extern "C" {
    pub static oidSha1DsaCommonOIW: DERItem;
}
extern "C" {
    pub static oidSha1RsaOIW: DERItem;
}
extern "C" {
    pub static oidSha256: DERItem;
}
extern "C" {
    pub static oidSha384: DERItem;
}
extern "C" {
    pub static oidSha512: DERItem;
}
extern "C" {
    pub static oidSha224: DERItem;
}
extern "C" {
    pub static oidFee: DERItem;
}
extern "C" {
    pub static oidMd5Fee: DERItem;
}
extern "C" {
    pub static oidSha1Fee: DERItem;
}
extern "C" {
    pub static oidEcPrime192v1: DERItem;
}
extern "C" {
    pub static oidEcPrime256v1: DERItem;
}
extern "C" {
    pub static oidAnsip384r1: DERItem;
}
extern "C" {
    pub static oidAnsip521r1: DERItem;
}
extern "C" {
    pub static oidSubjectKeyIdentifier: DERItem;
}
extern "C" {
    pub static oidKeyUsage: DERItem;
}
extern "C" {
    pub static oidPrivateKeyUsagePeriod: DERItem;
}
extern "C" {
    pub static oidSubjectAltName: DERItem;
}
extern "C" {
    pub static oidIssuerAltName: DERItem;
}
extern "C" {
    pub static oidBasicConstraints: DERItem;
}
extern "C" {
    pub static oidNameConstraints: DERItem;
}
extern "C" {
    pub static oidCrlDistributionPoints: DERItem;
}
extern "C" {
    pub static oidCertificatePolicies: DERItem;
}
extern "C" {
    pub static oidAnyPolicy: DERItem;
}
extern "C" {
    pub static oidPolicyMappings: DERItem;
}
extern "C" {
    pub static oidAuthorityKeyIdentifier: DERItem;
}
extern "C" {
    pub static oidPolicyConstraints: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsage: DERItem;
}
extern "C" {
    pub static oidAnyExtendedKeyUsage: DERItem;
}
extern "C" {
    pub static oidInhibitAnyPolicy: DERItem;
}
extern "C" {
    pub static oidAuthorityInfoAccess: DERItem;
}
extern "C" {
    pub static oidSubjectInfoAccess: DERItem;
}
extern "C" {
    pub static oidAdOCSP: DERItem;
}
extern "C" {
    pub static oidAdCAIssuer: DERItem;
}
extern "C" {
    pub static oidNetscapeCertType: DERItem;
}
extern "C" {
    pub static oidEntrustVersInfo: DERItem;
}
extern "C" {
    pub static oidMSNTPrincipalName: DERItem;
}
extern "C" {
    pub static oidQtCps: DERItem;
}
extern "C" {
    pub static oidQtUNotice: DERItem;
}
extern "C" {
    pub static oidCommonName: DERItem;
}
extern "C" {
    pub static oidCountryName: DERItem;
}
extern "C" {
    pub static oidLocalityName: DERItem;
}
extern "C" {
    pub static oidStateOrProvinceName: DERItem;
}
extern "C" {
    pub static oidOrganizationName: DERItem;
}
extern "C" {
    pub static oidOrganizationalUnitName: DERItem;
}
extern "C" {
    pub static oidDescription: DERItem;
}
extern "C" {
    pub static oidEmailAddress: DERItem;
}
extern "C" {
    pub static oidFriendlyName: DERItem;
}
extern "C" {
    pub static oidLocalKeyId: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageServerAuth: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageClientAuth: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageCodeSigning: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageEmailProtection: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageTimeStamping: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageOCSPSigning: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageIPSec: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageMicrosoftSGC: DERItem;
}
extern "C" {
    pub static oidExtendedKeyUsageNetscapeSGC: DERItem;
}
extern "C" {
    pub static oidGoogleEmbeddedSignedCertificateTimestamp: DERItem;
}
extern "C" {
    pub static oidGoogleOCSPSignedCertificateTimestamp: DERItem;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationValue {
    pub length: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationValueVector {
    pub count: UInt32,
    pub values: *mut AuthorizationValue,
}
pub const AuthorizationContextFlags_kAuthorizationContextFlagExtractable:
    AuthorizationContextFlags = 1;
pub const AuthorizationContextFlags_kAuthorizationContextFlagVolatile: AuthorizationContextFlags =
    2;
pub const AuthorizationContextFlags_kAuthorizationContextFlagSticky: AuthorizationContextFlags = 4;
pub type AuthorizationContextFlags = UInt32;
pub type AuthorizationMechanismId = AuthorizationString;
pub type AuthorizationPluginId = AuthorizationString;
pub type AuthorizationPluginRef = *mut ::std::os::raw::c_void;
pub type AuthorizationMechanismRef = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __OpaqueAuthorizationEngine {
    _unused: [u8; 0],
}
pub type AuthorizationEngineRef = *mut __OpaqueAuthorizationEngine;
pub type AuthorizationSessionId = *mut ::std::os::raw::c_void;
pub const AuthorizationResult_kAuthorizationResultAllow: AuthorizationResult = 0;
pub const AuthorizationResult_kAuthorizationResultDeny: AuthorizationResult = 1;
pub const AuthorizationResult_kAuthorizationResultUndefined: AuthorizationResult = 2;
pub const AuthorizationResult_kAuthorizationResultUserCanceled: AuthorizationResult = 3;
pub type AuthorizationResult = UInt32;
pub const kAuthorizationPluginInterfaceVersion: _bindgen_ty_232 = 0;
pub type _bindgen_ty_232 = ::std::os::raw::c_uint;
pub const kAuthorizationCallbacksVersion: _bindgen_ty_233 = 4;
pub type _bindgen_ty_233 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationCallbacks {
    pub version: UInt32,
    pub SetResult: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inResult: AuthorizationResult,
        ) -> OSStatus,
    >,
    pub RequestInterrupt:
        ::std::option::Option<unsafe extern "C" fn(inEngine: AuthorizationEngineRef) -> OSStatus>,
    pub DidDeactivate:
        ::std::option::Option<unsafe extern "C" fn(inEngine: AuthorizationEngineRef) -> OSStatus>,
    pub GetContextValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
            outContextFlags: *mut AuthorizationContextFlags,
            outValue: *mut *const AuthorizationValue,
        ) -> OSStatus,
    >,
    pub SetContextValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
            inContextFlags: AuthorizationContextFlags,
            inValue: *const AuthorizationValue,
        ) -> OSStatus,
    >,
    pub GetHintValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
            outValue: *mut *const AuthorizationValue,
        ) -> OSStatus,
    >,
    pub SetHintValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
            inValue: *const AuthorizationValue,
        ) -> OSStatus,
    >,
    pub GetArguments: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            outArguments: *mut *const AuthorizationValueVector,
        ) -> OSStatus,
    >,
    pub GetSessionId: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            outSessionId: *mut AuthorizationSessionId,
        ) -> OSStatus,
    >,
    pub GetImmutableHintValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
            outValue: *mut *const AuthorizationValue,
        ) -> OSStatus,
    >,
    pub GetLAContext: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            outValue: *mut CFTypeRef,
        ) -> OSStatus,
    >,
    pub GetTokenIdentities: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            context: CFTypeRef,
            outValue: *mut CFArrayRef,
        ) -> OSStatus,
    >,
    pub GetTKTokenWatcher: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            outValue: *mut CFTypeRef,
        ) -> OSStatus,
    >,
    pub RemoveHintValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
        ) -> OSStatus,
    >,
    pub RemoveContextValue: ::std::option::Option<
        unsafe extern "C" fn(
            inEngine: AuthorizationEngineRef,
            inKey: AuthorizationString,
        ) -> OSStatus,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AuthorizationPluginInterface {
    pub version: UInt32,
    pub PluginDestroy:
        ::std::option::Option<unsafe extern "C" fn(inPlugin: AuthorizationPluginRef) -> OSStatus>,
    pub MechanismCreate: ::std::option::Option<
        unsafe extern "C" fn(
            inPlugin: AuthorizationPluginRef,
            inEngine: AuthorizationEngineRef,
            mechanismId: AuthorizationMechanismId,
            outMechanism: *mut AuthorizationMechanismRef,
        ) -> OSStatus,
    >,
    pub MechanismInvoke: ::std::option::Option<
        unsafe extern "C" fn(inMechanism: AuthorizationMechanismRef) -> OSStatus,
    >,
    pub MechanismDeactivate: ::std::option::Option<
        unsafe extern "C" fn(inMechanism: AuthorizationMechanismRef) -> OSStatus,
    >,
    pub MechanismDestroy: ::std::option::Option<
        unsafe extern "C" fn(inMechanism: AuthorizationMechanismRef) -> OSStatus,
    >,
}
extern "C" {
    pub fn AuthorizationPluginCreate(
        callbacks: *const AuthorizationCallbacks,
        outPlugin: *mut AuthorizationPluginRef,
        outPluginInterface: *mut *const AuthorizationPluginInterface,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecAsn1Coder {
    _unused: [u8; 0],
}
pub type SecAsn1CoderRef = *mut SecAsn1Coder;
extern "C" {
    pub fn SecAsn1CoderCreate(coder: *mut SecAsn1CoderRef) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1CoderRelease(coder: SecAsn1CoderRef) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1Decode(
        coder: SecAsn1CoderRef,
        src: *const ::std::os::raw::c_void,
        len: usize,
        templates: *const SecAsn1Template,
        dest: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1DecodeData(
        coder: SecAsn1CoderRef,
        src: *const SecAsn1Item,
        templ: *const SecAsn1Template,
        dest: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1EncodeItem(
        coder: SecAsn1CoderRef,
        src: *const ::std::os::raw::c_void,
        templates: *const SecAsn1Template,
        dest: *mut SecAsn1Item,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1Malloc(coder: SecAsn1CoderRef, len: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SecAsn1AllocItem(coder: SecAsn1CoderRef, item: *mut SecAsn1Item, len: usize)
        -> OSStatus;
}
extern "C" {
    pub fn SecAsn1AllocCopy(
        coder: SecAsn1CoderRef,
        src: *const ::std::os::raw::c_void,
        len: usize,
        dest: *mut SecAsn1Item,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1AllocCopyItem(
        coder: SecAsn1CoderRef,
        src: *const SecAsn1Item,
        dest: *mut SecAsn1Item,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecAsn1OidCompare(oid1: *const SecAsn1Oid, oid2: *const SecAsn1Oid) -> bool;
}
extern "C" {
    pub static kSecAsn1AnyTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1BitStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1BMPStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1BooleanTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1EnumeratedTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1GeneralizedTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1IA5StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1IntegerTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1UnsignedIntegerTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1NullTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1ObjectIDTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1OctetStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PrintableStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1T61StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1UniversalStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1UTCTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1UTF8StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1VisibleStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1TeletexStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToAnyTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToBitStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToBMPStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToBooleanTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToEnumeratedTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToGeneralizedTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToIA5StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToIntegerTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToNullTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToObjectIDTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToOctetStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToPrintableStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToT61StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToUniversalStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToUTCTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToUTF8StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToVisibleStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1PointerToTeletexStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfAnyTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfBitStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfBMPStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfBooleanTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfEnumeratedTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfGeneralizedTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfIA5StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfIntegerTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfNullTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfObjectIDTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfOctetStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfPrintableStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfT61StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfUniversalStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfUTCTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfUTF8StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfVisibleStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SequenceOfTeletexStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfAnyTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfBitStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfBMPStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfBooleanTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfEnumeratedTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfGeneralizedTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfIA5StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfIntegerTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfNullTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfObjectIDTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfOctetStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfPrintableStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfT61StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfUniversalStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfUTCTimeTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfUTF8StringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfVisibleStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SetOfTeletexStringTemplate: [SecAsn1Template; 0usize];
}
extern "C" {
    pub static kSecAsn1SkipTemplate: [SecAsn1Template; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueSecureDownload {
    _unused: [u8; 0],
}
pub type SecureDownloadRef = *mut OpaqueSecureDownload;
pub const errSecureDownloadInvalidTicket: _bindgen_ty_234 = -20052;
pub const errSecureDownloadInvalidDownload: _bindgen_ty_234 = -20053;
pub type _bindgen_ty_234 = ::std::os::raw::c_int;
pub const _SecureDownloadTrustCallbackResult_kSecureDownloadDoNotEvaluateSigner:
    _SecureDownloadTrustCallbackResult = 0;
pub const _SecureDownloadTrustCallbackResult_kSecureDownloadEvaluateSigner:
    _SecureDownloadTrustCallbackResult = 1;
pub const _SecureDownloadTrustCallbackResult_kSecureDownloadFailEvaluation:
    _SecureDownloadTrustCallbackResult = 2;
pub type _SecureDownloadTrustCallbackResult = ::std::os::raw::c_uint;
pub use self::_SecureDownloadTrustCallbackResult as SecureDownloadTrustCallbackResult;
pub type SecureDownloadTrustSetupCallback = ::std::option::Option<
    unsafe extern "C" fn(
        trustRef: SecTrustRef,
        setupContext: *mut ::std::os::raw::c_void,
    ) -> SecureDownloadTrustCallbackResult,
>;
pub type SecureDownloadTrustEvaluateCallback = ::std::option::Option<
    unsafe extern "C" fn(
        trustRef: SecTrustRef,
        result: SecTrustResultType,
        evaluateContext: *mut ::std::os::raw::c_void,
    ) -> SecTrustResultType,
>;
extern "C" {
    pub fn SecureDownloadCreateWithTicket(
        ticket: CFDataRef,
        setup: SecureDownloadTrustSetupCallback,
        setupContext: *mut ::std::os::raw::c_void,
        evaluate: SecureDownloadTrustEvaluateCallback,
        evaluateContext: *mut ::std::os::raw::c_void,
        downloadRef: *mut SecureDownloadRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadCopyURLs(
        downloadRef: SecureDownloadRef,
        urls: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadCopyName(
        downloadRef: SecureDownloadRef,
        name: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadCopyCreationDate(
        downloadRef: SecureDownloadRef,
        date: *mut CFDateRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadGetDownloadSize(
        downloadRef: SecureDownloadRef,
        downloadSize: *mut SInt64,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadUpdateWithData(
        downloadRef: SecureDownloadRef,
        data: CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadFinished(downloadRef: SecureDownloadRef) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadRelease(downloadRef: SecureDownloadRef) -> OSStatus;
}
extern "C" {
    pub fn SecureDownloadCopyTicketLocation(
        url: CFURLRef,
        ticketLocation: *mut CFURLRef,
    ) -> OSStatus;
}
pub const kSCStatusOK: _bindgen_ty_235 = 0;
pub const kSCStatusFailed: _bindgen_ty_235 = 1001;
pub const kSCStatusInvalidArgument: _bindgen_ty_235 = 1002;
pub const kSCStatusAccessError: _bindgen_ty_235 = 1003;
pub const kSCStatusNoKey: _bindgen_ty_235 = 1004;
pub const kSCStatusKeyExists: _bindgen_ty_235 = 1005;
pub const kSCStatusLocked: _bindgen_ty_235 = 1006;
pub const kSCStatusNeedLock: _bindgen_ty_235 = 1007;
pub const kSCStatusNoStoreSession: _bindgen_ty_235 = 2001;
pub const kSCStatusNoStoreServer: _bindgen_ty_235 = 2002;
pub const kSCStatusNotifierActive: _bindgen_ty_235 = 2003;
pub const kSCStatusNoPrefsSession: _bindgen_ty_235 = 3001;
pub const kSCStatusPrefsBusy: _bindgen_ty_235 = 3002;
pub const kSCStatusNoConfigFile: _bindgen_ty_235 = 3003;
pub const kSCStatusNoLink: _bindgen_ty_235 = 3004;
pub const kSCStatusStale: _bindgen_ty_235 = 3005;
pub const kSCStatusMaxLink: _bindgen_ty_235 = 3006;
pub const kSCStatusReachabilityUnknown: _bindgen_ty_235 = 4001;
pub const kSCStatusConnectionNoService: _bindgen_ty_235 = 5001;
pub const kSCStatusConnectionIgnore: _bindgen_ty_235 = 5002;
pub type _bindgen_ty_235 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCDynamicStore {
    _unused: [u8; 0],
}
pub type SCDynamicStoreRef = *const __SCDynamicStore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCDynamicStoreContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type SCDynamicStoreCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        store: SCDynamicStoreRef,
        changedKeys: CFArrayRef,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn SCDynamicStoreGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCDynamicStoreCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: SCDynamicStoreCallBack,
        context: *mut SCDynamicStoreContext,
    ) -> SCDynamicStoreRef;
}
extern "C" {
    pub fn SCDynamicStoreCreateWithOptions(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        storeOptions: CFDictionaryRef,
        callout: SCDynamicStoreCallBack,
        context: *mut SCDynamicStoreContext,
    ) -> SCDynamicStoreRef;
}
extern "C" {
    pub static kSCDynamicStoreUseSessionKeys: CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreCreateRunLoopSource(
        allocator: CFAllocatorRef,
        store: SCDynamicStoreRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn SCDynamicStoreSetDispatchQueue(store: SCDynamicStoreRef, queue: NSObject) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreCopyKeyList(store: SCDynamicStoreRef, pattern: CFStringRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCDynamicStoreAddValue(
        store: SCDynamicStoreRef,
        key: CFStringRef,
        value: CFPropertyListRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreAddTemporaryValue(
        store: SCDynamicStoreRef,
        key: CFStringRef,
        value: CFPropertyListRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreCopyValue(store: SCDynamicStoreRef, key: CFStringRef)
        -> CFPropertyListRef;
}
extern "C" {
    pub fn SCDynamicStoreCopyMultiple(
        store: SCDynamicStoreRef,
        keys: CFArrayRef,
        patterns: CFArrayRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCDynamicStoreSetValue(
        store: SCDynamicStoreRef,
        key: CFStringRef,
        value: CFPropertyListRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreSetMultiple(
        store: SCDynamicStoreRef,
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        keysToNotify: CFArrayRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreRemoveValue(store: SCDynamicStoreRef, key: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreNotifyValue(store: SCDynamicStoreRef, key: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreSetNotificationKeys(
        store: SCDynamicStoreRef,
        keys: CFArrayRef,
        patterns: CFArrayRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCDynamicStoreCopyNotifiedKeys(store: SCDynamicStoreRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreate(allocator: CFAllocatorRef, fmt: CFStringRef, ...)
        -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateNetworkGlobalEntity(
        allocator: CFAllocatorRef,
        domain: CFStringRef,
        entity: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateNetworkInterface(
        allocator: CFAllocatorRef,
        domain: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateNetworkInterfaceEntity(
        allocator: CFAllocatorRef,
        domain: CFStringRef,
        ifname: CFStringRef,
        entity: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateNetworkServiceEntity(
        allocator: CFAllocatorRef,
        domain: CFStringRef,
        serviceID: CFStringRef,
        entity: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateComputerName(allocator: CFAllocatorRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateConsoleUser(allocator: CFAllocatorRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateHostNames(allocator: CFAllocatorRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateLocation(allocator: CFAllocatorRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreKeyCreateProxies(allocator: CFAllocatorRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreCopyComputerName(
        store: SCDynamicStoreRef,
        nameEncoding: *mut CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreCopyConsoleUser(
        store: SCDynamicStoreRef,
        uid: *mut uid_t,
        gid: *mut gid_t,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreCopyLocalHostName(store: SCDynamicStoreRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreCopyLocation(store: SCDynamicStoreRef) -> CFStringRef;
}
extern "C" {
    pub fn SCDynamicStoreCopyProxies(store: SCDynamicStoreRef) -> CFDictionaryRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCPreferences {
    _unused: [u8; 0],
}
pub type SCPreferencesRef = *const __SCPreferences;
pub const SCPreferencesNotification_kSCPreferencesNotificationCommit: SCPreferencesNotification = 1;
pub const SCPreferencesNotification_kSCPreferencesNotificationApply: SCPreferencesNotification = 2;
pub type SCPreferencesNotification = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCPreferencesContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub type SCPreferencesCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        prefs: SCPreferencesRef,
        notificationType: SCPreferencesNotification,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn SCPreferencesGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCPreferencesCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        prefsID: CFStringRef,
    ) -> SCPreferencesRef;
}
extern "C" {
    pub fn SCPreferencesCreateWithAuthorization(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        prefsID: CFStringRef,
        authorization: AuthorizationRef,
    ) -> SCPreferencesRef;
}
extern "C" {
    pub fn SCPreferencesLock(prefs: SCPreferencesRef, wait: Boolean) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesCommitChanges(prefs: SCPreferencesRef) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesApplyChanges(prefs: SCPreferencesRef) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesUnlock(prefs: SCPreferencesRef) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesGetSignature(prefs: SCPreferencesRef) -> CFDataRef;
}
extern "C" {
    pub fn SCPreferencesCopyKeyList(prefs: SCPreferencesRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCPreferencesGetValue(prefs: SCPreferencesRef, key: CFStringRef) -> CFPropertyListRef;
}
extern "C" {
    pub fn SCPreferencesAddValue(
        prefs: SCPreferencesRef,
        key: CFStringRef,
        value: CFPropertyListRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesSetValue(
        prefs: SCPreferencesRef,
        key: CFStringRef,
        value: CFPropertyListRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesRemoveValue(prefs: SCPreferencesRef, key: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesSetCallback(
        prefs: SCPreferencesRef,
        callout: SCPreferencesCallBack,
        context: *mut SCPreferencesContext,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesScheduleWithRunLoop(
        prefs: SCPreferencesRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesUnscheduleFromRunLoop(
        prefs: SCPreferencesRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesSetDispatchQueue(prefs: SCPreferencesRef, queue: NSObject) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesSynchronize(prefs: SCPreferencesRef);
}
extern "C" {
    pub fn SCPreferencesPathCreateUniqueChild(
        prefs: SCPreferencesRef,
        prefix: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCPreferencesPathGetValue(prefs: SCPreferencesRef, path: CFStringRef)
        -> CFDictionaryRef;
}
extern "C" {
    pub fn SCPreferencesPathGetLink(prefs: SCPreferencesRef, path: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn SCPreferencesPathSetValue(
        prefs: SCPreferencesRef,
        path: CFStringRef,
        value: CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesPathSetLink(
        prefs: SCPreferencesRef,
        path: CFStringRef,
        link: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesPathRemoveValue(prefs: SCPreferencesRef, path: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesSetComputerName(
        prefs: SCPreferencesRef,
        name: CFStringRef,
        nameEncoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn SCPreferencesSetLocalHostName(prefs: SCPreferencesRef, name: CFStringRef) -> Boolean;
}
extern "C" {
    pub static kSCResvLink: CFStringRef;
}
extern "C" {
    pub static kSCResvInactive: CFStringRef;
}
extern "C" {
    pub static kSCPropInterfaceName: CFStringRef;
}
extern "C" {
    pub static kSCPropMACAddress: CFStringRef;
}
extern "C" {
    pub static kSCPropUserDefinedName: CFStringRef;
}
extern "C" {
    pub static kSCPropVersion: CFStringRef;
}
extern "C" {
    pub static kSCPrefCurrentSet: CFStringRef;
}
extern "C" {
    pub static kSCPrefNetworkServices: CFStringRef;
}
extern "C" {
    pub static kSCPrefSets: CFStringRef;
}
extern "C" {
    pub static kSCPrefSystem: CFStringRef;
}
extern "C" {
    pub static kSCCompNetwork: CFStringRef;
}
extern "C" {
    pub static kSCCompService: CFStringRef;
}
extern "C" {
    pub static kSCCompGlobal: CFStringRef;
}
extern "C" {
    pub static kSCCompHostNames: CFStringRef;
}
extern "C" {
    pub static kSCCompInterface: CFStringRef;
}
extern "C" {
    pub static kSCCompSystem: CFStringRef;
}
extern "C" {
    pub static kSCCompUsers: CFStringRef;
}
extern "C" {
    pub static kSCCompAnyRegex: CFStringRef;
}
extern "C" {
    pub static kSCEntNetAirPort: CFStringRef;
}
extern "C" {
    pub static kSCEntNetDHCP: CFStringRef;
}
extern "C" {
    pub static kSCEntNetDNS: CFStringRef;
}
extern "C" {
    pub static kSCEntNetEthernet: CFStringRef;
}
extern "C" {
    pub static kSCEntNetFireWire: CFStringRef;
}
extern "C" {
    pub static kSCEntNetInterface: CFStringRef;
}
extern "C" {
    pub static kSCEntNetIPSec: CFStringRef;
}
extern "C" {
    pub static kSCEntNetIPv4: CFStringRef;
}
extern "C" {
    pub static kSCEntNetIPv6: CFStringRef;
}
extern "C" {
    pub static kSCEntNetL2TP: CFStringRef;
}
extern "C" {
    pub static kSCEntNetLink: CFStringRef;
}
extern "C" {
    pub static kSCEntNetModem: CFStringRef;
}
extern "C" {
    pub static kSCEntNetPPP: CFStringRef;
}
extern "C" {
    pub static kSCEntNetPPPoE: CFStringRef;
}
extern "C" {
    pub static kSCEntNetPPPSerial: CFStringRef;
}
extern "C" {
    pub static kSCEntNetPPTP: CFStringRef;
}
extern "C" {
    pub static kSCEntNetProxies: CFStringRef;
}
extern "C" {
    pub static kSCEntNetSMB: CFStringRef;
}
extern "C" {
    pub static kSCEntNet6to4: CFStringRef;
}
extern "C" {
    pub static kSCPropNetOverridePrimary: CFStringRef;
}
extern "C" {
    pub static kSCPropNetServiceOrder: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPOverridePrimary: CFStringRef;
}
extern "C" {
    pub static kSCPropNetInterfaces: CFStringRef;
}
extern "C" {
    pub static kSCPropNetLocalHostName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortAllowNetCreation: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortAuthPassword: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortAuthPasswordEncryption: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortJoinMode: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortPowerEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortPreferredNetwork: CFStringRef;
}
extern "C" {
    pub static kSCPropNetAirPortSavePasswords: CFStringRef;
}
extern "C" {
    pub static kSCValNetAirPortJoinModeAutomatic: CFStringRef;
}
extern "C" {
    pub static kSCValNetAirPortJoinModePreferred: CFStringRef;
}
extern "C" {
    pub static kSCValNetAirPortJoinModeRanked: CFStringRef;
}
extern "C" {
    pub static kSCValNetAirPortJoinModeRecent: CFStringRef;
}
extern "C" {
    pub static kSCValNetAirPortJoinModeStrongest: CFStringRef;
}
extern "C" {
    pub static kSCValNetAirPortAuthPasswordEncryptionKeychain: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSDomainName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSOptions: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSSearchDomains: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSSearchOrder: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSServerAddresses: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSServerPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSServerTimeout: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSSortList: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSSupplementalMatchDomains: CFStringRef;
}
extern "C" {
    pub static kSCPropNetDNSSupplementalMatchOrders: CFStringRef;
}
extern "C" {
    pub static kSCPropNetEthernetMediaSubType: CFStringRef;
}
extern "C" {
    pub static kSCPropNetEthernetMediaOptions: CFStringRef;
}
extern "C" {
    pub static kSCPropNetEthernetMTU: CFStringRef;
}
extern "C" {
    pub static kSCPropNetInterfaceDeviceName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetInterfaceHardware: CFStringRef;
}
extern "C" {
    pub static kSCPropNetInterfaceType: CFStringRef;
}
extern "C" {
    pub static kSCPropNetInterfaceSubType: CFStringRef;
}
extern "C" {
    pub static kSCPropNetInterfaceSupportsModemOnHold: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceTypeEthernet: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceTypeFireWire: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceTypePPP: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceType6to4: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceTypeIPSec: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceSubTypePPPoE: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceSubTypePPPSerial: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceSubTypePPTP: CFStringRef;
}
extern "C" {
    pub static kSCValNetInterfaceSubTypeL2TP: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecAuthenticationMethod: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecLocalCertificate: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecLocalIdentifier: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecLocalIdentifierType: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecSharedSecret: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecSharedSecretEncryption: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecConnectTime: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecRemoteAddress: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecStatus: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecXAuthEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecXAuthName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecXAuthPassword: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPSecXAuthPasswordEncryption: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecAuthenticationMethodSharedSecret: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecAuthenticationMethodCertificate: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecAuthenticationMethodHybrid: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecLocalIdentifierTypeKeyID: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecSharedSecretEncryptionKeychain: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecXAuthPasswordEncryptionKeychain: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPSecXAuthPasswordEncryptionPrompt: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4Addresses: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4ConfigMethod: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4DHCPClientID: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4Router: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4SubnetMasks: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4DestAddresses: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv4BroadcastAddresses: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodAutomatic: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodBOOTP: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodDHCP: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodINFORM: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodLinkLocal: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodManual: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv4ConfigMethodPPP: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv6Addresses: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv6ConfigMethod: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv6DestAddresses: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv6Flags: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv6PrefixLength: CFStringRef;
}
extern "C" {
    pub static kSCPropNetIPv6Router: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv6ConfigMethodAutomatic: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv6ConfigMethodLinkLocal: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv6ConfigMethodManual: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv6ConfigMethodRouterAdvertisement: CFStringRef;
}
extern "C" {
    pub static kSCValNetIPv6ConfigMethod6to4: CFStringRef;
}
extern "C" {
    pub static kSCPropNet6to4Relay: CFStringRef;
}
extern "C" {
    pub static kSCPropNetLinkActive: CFStringRef;
}
extern "C" {
    pub static kSCPropNetLinkDetaching: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemAccessPointName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemConnectionPersonality: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemConnectionScript: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemConnectSpeed: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemDataCompression: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemDeviceContextID: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemDeviceModel: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemDeviceVendor: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemDialMode: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemErrorCorrection: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemHoldCallWaitingAudibleAlert: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemHoldDisconnectOnAnswer: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemHoldEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemHoldReminder: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemHoldReminderTime: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemNote: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemPulseDial: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemSpeaker: CFStringRef;
}
extern "C" {
    pub static kSCPropNetModemSpeed: CFStringRef;
}
extern "C" {
    pub static kSCValNetModemDialModeIgnoreDialTone: CFStringRef;
}
extern "C" {
    pub static kSCValNetModemDialModeManual: CFStringRef;
}
extern "C" {
    pub static kSCValNetModemDialModeWaitForDialTone: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPACSPEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPConnectTime: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDeviceLastCause: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDialOnDemand: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDisconnectOnFastUserSwitch: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDisconnectOnIdle: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDisconnectOnIdleTimer: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDisconnectOnLogout: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDisconnectOnSleep: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPDisconnectTime: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPIdleReminder: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPIdleReminderTimer: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLastCause: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLogfile: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPPlugins: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPRetryConnectTime: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPSessionTimer: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPStatus: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPUseSessionTimer: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPVerboseLogging: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPAuthEAPPlugins: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPAuthName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPAuthPassword: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPAuthPasswordEncryption: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPAuthPrompt: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPAuthProtocol: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthPasswordEncryptionKeychain: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthPasswordEncryptionToken: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthPromptBefore: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthPromptAfter: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthProtocolCHAP: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthProtocolEAP: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthProtocolMSCHAP1: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthProtocolMSCHAP2: CFStringRef;
}
extern "C" {
    pub static kSCValNetPPPAuthProtocolPAP: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommAlternateRemoteAddress: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommConnectDelay: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommDisplayTerminalWindow: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommRedialCount: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommRedialEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommRedialInterval: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommRemoteAddress: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommTerminalScript: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCommUseTerminalScript: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCCPEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCCPMPPE40Enabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPCCPMPPE128Enabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPIPCPCompressionVJ: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPIPCPUsePeerDNS: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPEchoEnabled: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPEchoFailure: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPEchoInterval: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPCompressionACField: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPCompressionPField: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPMRU: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPMTU: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPReceiveACCM: CFStringRef;
}
extern "C" {
    pub static kSCPropNetPPPLCPTransmitACCM: CFStringRef;
}
extern "C" {
    pub static kSCPropNetL2TPIPSecSharedSecret: CFStringRef;
}
extern "C" {
    pub static kSCPropNetL2TPIPSecSharedSecretEncryption: CFStringRef;
}
extern "C" {
    pub static kSCPropNetL2TPTransport: CFStringRef;
}
extern "C" {
    pub static kSCValNetL2TPIPSecSharedSecretEncryptionKeychain: CFStringRef;
}
extern "C" {
    pub static kSCValNetL2TPTransportIP: CFStringRef;
}
extern "C" {
    pub static kSCValNetL2TPTransportIPSec: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesExceptionsList: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesExcludeSimpleHostnames: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesFTPEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesFTPPassive: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesFTPPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesFTPProxy: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesGopherEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesGopherPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesGopherProxy: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesHTTPEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesHTTPPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesHTTPProxy: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesHTTPSEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesHTTPSPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesHTTPSProxy: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesRTSPEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesRTSPPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesRTSPProxy: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesSOCKSEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesSOCKSPort: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesSOCKSProxy: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesProxyAutoConfigEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesProxyAutoConfigJavaScript: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesProxyAutoConfigURLString: CFStringRef;
}
extern "C" {
    pub static kSCPropNetProxiesProxyAutoDiscoveryEnable: CFStringRef;
}
extern "C" {
    pub static kSCPropNetSMBNetBIOSName: CFStringRef;
}
extern "C" {
    pub static kSCPropNetSMBNetBIOSNodeType: CFStringRef;
}
extern "C" {
    pub static kSCPropNetSMBNetBIOSScope: CFStringRef;
}
extern "C" {
    pub static kSCPropNetSMBWINSAddresses: CFStringRef;
}
extern "C" {
    pub static kSCPropNetSMBWorkgroup: CFStringRef;
}
extern "C" {
    pub static kSCValNetSMBNetBIOSNodeTypeBroadcast: CFStringRef;
}
extern "C" {
    pub static kSCValNetSMBNetBIOSNodeTypePeer: CFStringRef;
}
extern "C" {
    pub static kSCValNetSMBNetBIOSNodeTypeMixed: CFStringRef;
}
extern "C" {
    pub static kSCValNetSMBNetBIOSNodeTypeHybrid: CFStringRef;
}
extern "C" {
    pub static kSCEntUsersConsoleUser: CFStringRef;
}
extern "C" {
    pub static kSCPropSystemComputerName: CFStringRef;
}
extern "C" {
    pub static kSCPropSystemComputerNameEncoding: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStoreDomainFile: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStoreDomainPlugin: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStoreDomainSetup: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStoreDomainState: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStoreDomainPrefs: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStorePropSetupCurrentSet: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStorePropSetupLastUpdated: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStorePropNetInterfaces: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStorePropNetPrimaryInterface: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStorePropNetPrimaryService: CFStringRef;
}
extern "C" {
    pub static kSCDynamicStorePropNetServiceIDs: CFStringRef;
}
extern "C" {
    pub static kSCPropUsersConsoleUserName: CFStringRef;
}
extern "C" {
    pub static kSCPropUsersConsoleUserUID: CFStringRef;
}
extern "C" {
    pub static kSCPropUsersConsoleUserGID: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCNetworkInterface {
    _unused: [u8; 0],
}
pub type SCNetworkInterfaceRef = *const __SCNetworkInterface;
extern "C" {
    pub static kSCNetworkInterfaceType6to4: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeBluetooth: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeBond: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeEthernet: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeFireWire: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeIEEE80211: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeIPSec: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeIrDA: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeL2TP: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeModem: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypePPP: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypePPTP: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeSerial: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeVLAN: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeWWAN: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceTypeIPv4: CFStringRef;
}
extern "C" {
    pub static kSCNetworkInterfaceIPv4: SCNetworkInterfaceRef;
}
pub type SCBondInterfaceRef = SCNetworkInterfaceRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCBondStatus {
    _unused: [u8; 0],
}
pub type SCBondStatusRef = *const __SCBondStatus;
pub const kSCBondStatusOK: _bindgen_ty_236 = 0;
pub const kSCBondStatusLinkInvalid: _bindgen_ty_236 = 1;
pub const kSCBondStatusNoPartner: _bindgen_ty_236 = 2;
pub const kSCBondStatusNotInActiveGroup: _bindgen_ty_236 = 3;
pub const kSCBondStatusUnknown: _bindgen_ty_236 = 999;
pub type _bindgen_ty_236 = ::std::os::raw::c_uint;
extern "C" {
    pub static kSCBondStatusDeviceAggregationStatus: CFStringRef;
}
extern "C" {
    pub static kSCBondStatusDeviceCollecting: CFStringRef;
}
extern "C" {
    pub static kSCBondStatusDeviceDistributing: CFStringRef;
}
pub type SCVLANInterfaceRef = SCNetworkInterfaceRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCNetworkProtocol {
    _unused: [u8; 0],
}
pub type SCNetworkProtocolRef = *const __SCNetworkProtocol;
extern "C" {
    pub static kSCNetworkProtocolTypeDNS: CFStringRef;
}
extern "C" {
    pub static kSCNetworkProtocolTypeIPv4: CFStringRef;
}
extern "C" {
    pub static kSCNetworkProtocolTypeIPv6: CFStringRef;
}
extern "C" {
    pub static kSCNetworkProtocolTypeProxies: CFStringRef;
}
extern "C" {
    pub static kSCNetworkProtocolTypeSMB: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCNetworkService {
    _unused: [u8; 0],
}
pub type SCNetworkServiceRef = *const __SCNetworkService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCNetworkSet {
    _unused: [u8; 0],
}
pub type SCNetworkSetRef = *const __SCNetworkSet;
extern "C" {
    pub fn SCNetworkInterfaceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCNetworkInterfaceCopyAll() -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetSupportedInterfaceTypes(
        interface: SCNetworkInterfaceRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetSupportedProtocolTypes(
        interface: SCNetworkInterfaceRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkInterfaceCreateWithInterface(
        interface: SCNetworkInterfaceRef,
        interfaceType: CFStringRef,
    ) -> SCNetworkInterfaceRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetBSDName(interface: SCNetworkInterfaceRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetConfiguration(interface: SCNetworkInterfaceRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetExtendedConfiguration(
        interface: SCNetworkInterfaceRef,
        extendedType: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetHardwareAddressString(
        interface: SCNetworkInterfaceRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetInterface(
        interface: SCNetworkInterfaceRef,
    ) -> SCNetworkInterfaceRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetInterfaceType(interface: SCNetworkInterfaceRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkInterfaceGetLocalizedDisplayName(
        interface: SCNetworkInterfaceRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkInterfaceSetConfiguration(
        interface: SCNetworkInterfaceRef,
        config: CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceSetExtendedConfiguration(
        interface: SCNetworkInterfaceRef,
        extendedType: CFStringRef,
        config: CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceCopyMediaOptions(
        interface: SCNetworkInterfaceRef,
        current: *mut CFDictionaryRef,
        active: *mut CFDictionaryRef,
        available: *mut CFArrayRef,
        filter: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceCopyMediaSubTypes(available: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkInterfaceCopyMediaSubTypeOptions(
        available: CFArrayRef,
        subType: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkInterfaceCopyMTU(
        interface: SCNetworkInterfaceRef,
        mtu_cur: *mut ::std::os::raw::c_int,
        mtu_min: *mut ::std::os::raw::c_int,
        mtu_max: *mut ::std::os::raw::c_int,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceSetMediaOptions(
        interface: SCNetworkInterfaceRef,
        subtype: CFStringRef,
        options: CFArrayRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceSetMTU(
        interface: SCNetworkInterfaceRef,
        mtu: ::std::os::raw::c_int,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceForceConfigurationRefresh(interface: SCNetworkInterfaceRef)
        -> Boolean;
}
extern "C" {
    pub fn SCBondInterfaceCopyAll(prefs: SCPreferencesRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCBondInterfaceCopyAvailableMemberInterfaces(prefs: SCPreferencesRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCBondInterfaceCreate(prefs: SCPreferencesRef) -> SCBondInterfaceRef;
}
extern "C" {
    pub fn SCBondInterfaceRemove(bond: SCBondInterfaceRef) -> Boolean;
}
extern "C" {
    pub fn SCBondInterfaceGetMemberInterfaces(bond: SCBondInterfaceRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCBondInterfaceGetOptions(bond: SCBondInterfaceRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCBondInterfaceSetMemberInterfaces(
        bond: SCBondInterfaceRef,
        members: CFArrayRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCBondInterfaceSetLocalizedDisplayName(
        bond: SCBondInterfaceRef,
        newName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCBondInterfaceSetOptions(
        bond: SCBondInterfaceRef,
        newOptions: CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCBondInterfaceCopyStatus(bond: SCBondInterfaceRef) -> SCBondStatusRef;
}
extern "C" {
    pub fn SCBondStatusGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCBondStatusGetMemberInterfaces(bondStatus: SCBondStatusRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCBondStatusGetInterfaceStatus(
        bondStatus: SCBondStatusRef,
        interface: SCNetworkInterfaceRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCVLANInterfaceCopyAll(prefs: SCPreferencesRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCVLANInterfaceCopyAvailablePhysicalInterfaces() -> CFArrayRef;
}
extern "C" {
    pub fn SCVLANInterfaceCreate(
        prefs: SCPreferencesRef,
        physical: SCNetworkInterfaceRef,
        tag: CFNumberRef,
    ) -> SCVLANInterfaceRef;
}
extern "C" {
    pub fn SCVLANInterfaceRemove(vlan: SCVLANInterfaceRef) -> Boolean;
}
extern "C" {
    pub fn SCVLANInterfaceGetPhysicalInterface(vlan: SCVLANInterfaceRef) -> SCNetworkInterfaceRef;
}
extern "C" {
    pub fn SCVLANInterfaceGetTag(vlan: SCVLANInterfaceRef) -> CFNumberRef;
}
extern "C" {
    pub fn SCVLANInterfaceGetOptions(vlan: SCVLANInterfaceRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCVLANInterfaceSetPhysicalInterfaceAndTag(
        vlan: SCVLANInterfaceRef,
        physical: SCNetworkInterfaceRef,
        tag: CFNumberRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCVLANInterfaceSetLocalizedDisplayName(
        vlan: SCVLANInterfaceRef,
        newName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCVLANInterfaceSetOptions(
        vlan: SCVLANInterfaceRef,
        newOptions: CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkProtocolGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCNetworkProtocolGetConfiguration(protocol: SCNetworkProtocolRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCNetworkProtocolGetEnabled(protocol: SCNetworkProtocolRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkProtocolGetProtocolType(protocol: SCNetworkProtocolRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkProtocolSetConfiguration(
        protocol: SCNetworkProtocolRef,
        config: CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkProtocolSetEnabled(protocol: SCNetworkProtocolRef, enabled: Boolean)
        -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCNetworkServiceAddProtocolType(
        service: SCNetworkServiceRef,
        protocolType: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceCopyAll(prefs: SCPreferencesRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkServiceCopyProtocols(service: SCNetworkServiceRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkServiceCreate(
        prefs: SCPreferencesRef,
        interface: SCNetworkInterfaceRef,
    ) -> SCNetworkServiceRef;
}
extern "C" {
    pub fn SCNetworkServiceCopy(
        prefs: SCPreferencesRef,
        serviceID: CFStringRef,
    ) -> SCNetworkServiceRef;
}
extern "C" {
    pub fn SCNetworkServiceEstablishDefaultConfiguration(service: SCNetworkServiceRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceGetEnabled(service: SCNetworkServiceRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceGetInterface(service: SCNetworkServiceRef) -> SCNetworkInterfaceRef;
}
extern "C" {
    pub fn SCNetworkServiceGetName(service: SCNetworkServiceRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkServiceCopyProtocol(
        service: SCNetworkServiceRef,
        protocolType: CFStringRef,
    ) -> SCNetworkProtocolRef;
}
extern "C" {
    pub fn SCNetworkServiceGetServiceID(service: SCNetworkServiceRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkServiceRemove(service: SCNetworkServiceRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceRemoveProtocolType(
        service: SCNetworkServiceRef,
        protocolType: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceSetEnabled(service: SCNetworkServiceRef, enabled: Boolean) -> Boolean;
}
extern "C" {
    pub fn SCNetworkServiceSetName(service: SCNetworkServiceRef, name: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCNetworkSetAddService(set: SCNetworkSetRef, service: SCNetworkServiceRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetContainsInterface(
        set: SCNetworkSetRef,
        interface: SCNetworkInterfaceRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetCopyAll(prefs: SCPreferencesRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkSetCopyCurrent(prefs: SCPreferencesRef) -> SCNetworkSetRef;
}
extern "C" {
    pub fn SCNetworkSetCopyServices(set: SCNetworkSetRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkSetCreate(prefs: SCPreferencesRef) -> SCNetworkSetRef;
}
extern "C" {
    pub fn SCNetworkSetCopy(prefs: SCPreferencesRef, setID: CFStringRef) -> SCNetworkSetRef;
}
extern "C" {
    pub fn SCNetworkSetGetName(set: SCNetworkSetRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkSetGetSetID(set: SCNetworkSetRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkSetGetServiceOrder(set: SCNetworkSetRef) -> CFArrayRef;
}
extern "C" {
    pub fn SCNetworkSetRemove(set: SCNetworkSetRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetRemoveService(set: SCNetworkSetRef, service: SCNetworkServiceRef)
        -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetSetCurrent(set: SCNetworkSetRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetSetName(set: SCNetworkSetRef, name: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn SCNetworkSetSetServiceOrder(set: SCNetworkSetRef, newOrder: CFArrayRef) -> Boolean;
}
pub const kSCNetworkFlagsTransientConnection: _bindgen_ty_237 = 1;
pub const kSCNetworkFlagsReachable: _bindgen_ty_237 = 2;
pub const kSCNetworkFlagsConnectionRequired: _bindgen_ty_237 = 4;
pub const kSCNetworkFlagsConnectionAutomatic: _bindgen_ty_237 = 8;
pub const kSCNetworkFlagsInterventionRequired: _bindgen_ty_237 = 16;
pub const kSCNetworkFlagsIsLocalAddress: _bindgen_ty_237 = 65536;
pub const kSCNetworkFlagsIsDirect: _bindgen_ty_237 = 131072;
pub type _bindgen_ty_237 = ::std::os::raw::c_uint;
pub type SCNetworkConnectionFlags = u32;
extern "C" {
    pub fn SCNetworkCheckReachabilityByAddress(
        address: *const sockaddr,
        addrlen: socklen_t,
        flags: *mut SCNetworkConnectionFlags,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkCheckReachabilityByName(
        nodename: *const ::std::os::raw::c_char,
        flags: *mut SCNetworkConnectionFlags,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkInterfaceRefreshConfiguration(ifName: CFStringRef) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCNetworkReachability {
    _unused: [u8; 0],
}
pub type SCNetworkReachabilityRef = *const __SCNetworkReachability;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCNetworkReachabilityContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsTransientConnection:
    SCNetworkReachabilityFlags = 1;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsReachable:
    SCNetworkReachabilityFlags = 2;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsConnectionRequired:
    SCNetworkReachabilityFlags = 4;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsConnectionOnTraffic:
    SCNetworkReachabilityFlags = 8;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsInterventionRequired:
    SCNetworkReachabilityFlags = 16;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsConnectionOnDemand:
    SCNetworkReachabilityFlags = 32;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsIsLocalAddress:
    SCNetworkReachabilityFlags = 65536;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsIsDirect:
    SCNetworkReachabilityFlags = 131072;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsIsWWAN: SCNetworkReachabilityFlags =
    262144;
pub const SCNetworkReachabilityFlags_kSCNetworkReachabilityFlagsConnectionAutomatic:
    SCNetworkReachabilityFlags = 8;
pub type SCNetworkReachabilityFlags = u32;
pub type SCNetworkReachabilityCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        target: SCNetworkReachabilityRef,
        flags: SCNetworkReachabilityFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn SCNetworkReachabilityCreateWithAddress(
        allocator: CFAllocatorRef,
        address: *const sockaddr,
    ) -> SCNetworkReachabilityRef;
}
extern "C" {
    pub fn SCNetworkReachabilityCreateWithAddressPair(
        allocator: CFAllocatorRef,
        localAddress: *const sockaddr,
        remoteAddress: *const sockaddr,
    ) -> SCNetworkReachabilityRef;
}
extern "C" {
    pub fn SCNetworkReachabilityCreateWithName(
        allocator: CFAllocatorRef,
        nodename: *const ::std::os::raw::c_char,
    ) -> SCNetworkReachabilityRef;
}
extern "C" {
    pub fn SCNetworkReachabilityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCNetworkReachabilityGetFlags(
        target: SCNetworkReachabilityRef,
        flags: *mut SCNetworkReachabilityFlags,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkReachabilitySetCallback(
        target: SCNetworkReachabilityRef,
        callout: SCNetworkReachabilityCallBack,
        context: *mut SCNetworkReachabilityContext,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkReachabilityScheduleWithRunLoop(
        target: SCNetworkReachabilityRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkReachabilityUnscheduleFromRunLoop(
        target: SCNetworkReachabilityRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkReachabilitySetDispatchQueue(
        target: SCNetworkReachabilityRef,
        queue: NSObject,
    ) -> Boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __SCNetworkConnection {
    _unused: [u8; 0],
}
pub type SCNetworkConnectionRef = *const __SCNetworkConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCNetworkConnectionContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
pub const SCNetworkConnectionStatus_kSCNetworkConnectionInvalid: SCNetworkConnectionStatus = -1;
pub const SCNetworkConnectionStatus_kSCNetworkConnectionDisconnected: SCNetworkConnectionStatus = 0;
pub const SCNetworkConnectionStatus_kSCNetworkConnectionConnecting: SCNetworkConnectionStatus = 1;
pub const SCNetworkConnectionStatus_kSCNetworkConnectionConnected: SCNetworkConnectionStatus = 2;
pub const SCNetworkConnectionStatus_kSCNetworkConnectionDisconnecting: SCNetworkConnectionStatus =
    3;
pub type SCNetworkConnectionStatus = i32;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPDisconnected:
    SCNetworkConnectionPPPStatus = 0;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPInitializing:
    SCNetworkConnectionPPPStatus = 1;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPConnectingLink:
    SCNetworkConnectionPPPStatus = 2;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPDialOnTraffic:
    SCNetworkConnectionPPPStatus = 3;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPNegotiatingLink:
    SCNetworkConnectionPPPStatus = 4;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPAuthenticating:
    SCNetworkConnectionPPPStatus = 5;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPWaitingForCallBack:
    SCNetworkConnectionPPPStatus = 6;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPNegotiatingNetwork:
    SCNetworkConnectionPPPStatus = 7;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPConnected:
    SCNetworkConnectionPPPStatus = 8;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPTerminating:
    SCNetworkConnectionPPPStatus = 9;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPDisconnectingLink:
    SCNetworkConnectionPPPStatus = 10;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPHoldingLinkOff:
    SCNetworkConnectionPPPStatus = 11;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPSuspended:
    SCNetworkConnectionPPPStatus = 12;
pub const SCNetworkConnectionPPPStatus_kSCNetworkConnectionPPPWaitingForRedial:
    SCNetworkConnectionPPPStatus = 13;
pub type SCNetworkConnectionPPPStatus = i32;
pub type SCNetworkConnectionCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        connection: SCNetworkConnectionRef,
        status: SCNetworkConnectionStatus,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn SCNetworkConnectionGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn SCNetworkConnectionCopyUserPreferences(
        selectionOptions: CFDictionaryRef,
        serviceID: *mut CFStringRef,
        userOptions: *mut CFDictionaryRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkConnectionCreateWithServiceID(
        allocator: CFAllocatorRef,
        serviceID: CFStringRef,
        callout: SCNetworkConnectionCallBack,
        context: *mut SCNetworkConnectionContext,
    ) -> SCNetworkConnectionRef;
}
extern "C" {
    pub fn SCNetworkConnectionCopyServiceID(connection: SCNetworkConnectionRef) -> CFStringRef;
}
extern "C" {
    pub fn SCNetworkConnectionGetStatus(
        connection: SCNetworkConnectionRef,
    ) -> SCNetworkConnectionStatus;
}
extern "C" {
    pub fn SCNetworkConnectionCopyExtendedStatus(
        connection: SCNetworkConnectionRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCNetworkConnectionCopyStatistics(connection: SCNetworkConnectionRef)
        -> CFDictionaryRef;
}
extern "C" {
    pub fn SCNetworkConnectionStart(
        connection: SCNetworkConnectionRef,
        userOptions: CFDictionaryRef,
        linger: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkConnectionStop(
        connection: SCNetworkConnectionRef,
        forceDisconnect: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkConnectionCopyUserOptions(
        connection: SCNetworkConnectionRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn SCNetworkConnectionScheduleWithRunLoop(
        connection: SCNetworkConnectionRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkConnectionUnscheduleFromRunLoop(
        connection: SCNetworkConnectionRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn SCNetworkConnectionSetDispatchQueue(
        connection: SCNetworkConnectionRef,
        queue: NSObject,
    ) -> Boolean;
}
extern "C" {
    pub static kCFErrorDomainSystemConfiguration: CFStringRef;
}
extern "C" {
    pub fn SCCopyLastError() -> CFErrorRef;
}
extern "C" {
    pub fn SCError() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SCErrorString(status: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CNSetSupportedSSIDs(ssidArray: CFArrayRef) -> Boolean;
}
extern "C" {
    pub fn CNMarkPortalOnline(interfaceName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CNMarkPortalOffline(interfaceName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CNCopySupportedInterfaces() -> CFArrayRef;
}
extern "C" {
    pub static kCNNetworkInfoKeySSIDData: CFStringRef;
}
extern "C" {
    pub static kCNNetworkInfoKeySSID: CFStringRef;
}
extern "C" {
    pub static kCNNetworkInfoKeyBSSID: CFStringRef;
}
extern "C" {
    pub fn CNCopyCurrentNetworkInfo(interfaceName: CFStringRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn DHCPClientPreferencesSetApplicationOptions(
        applicationID: CFStringRef,
        options: *const UInt8,
        count: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn DHCPClientPreferencesCopyApplicationOptions(
        applicationID: CFStringRef,
        count: *mut CFIndex,
    ) -> *mut UInt8;
}
extern "C" {
    pub fn SCDynamicStoreCopyDHCPInfo(
        store: SCDynamicStoreRef,
        serviceID: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn DHCPInfoGetOptionData(info: CFDictionaryRef, code: UInt8) -> CFDataRef;
}
extern "C" {
    pub fn DHCPInfoGetLeaseStartTime(info: CFDictionaryRef) -> CFDateRef;
}
extern "C" {
    pub fn DHCPInfoGetLeaseExpirationTime(info: CFDictionaryRef) -> CFDateRef;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_guts {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigacts {
    pub _address: u8,
}
pub type instancetype = id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kr_policy_list_item {
    pub _address: u8,
}
